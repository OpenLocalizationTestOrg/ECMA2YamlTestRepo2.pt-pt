### YamlMime:ManagedReference
items:
- uid: System.IO.File
  id: File
  children:
  - System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - System.IO.File.AppendAllText(System.String,System.String)
  - System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  - System.IO.File.AppendText(System.String)
  - System.IO.File.Copy(System.String,System.String)
  - System.IO.File.Copy(System.String,System.String,System.Boolean)
  - System.IO.File.Create(System.String)
  - System.IO.File.Create(System.String,System.Int32)
  - System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  - System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  - System.IO.File.CreateText(System.String)
  - System.IO.File.Decrypt(System.String)
  - System.IO.File.Delete(System.String)
  - System.IO.File.Encrypt(System.String)
  - System.IO.File.Exists(System.String)
  - System.IO.File.GetAccessControl(System.String)
  - System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  - System.IO.File.GetAttributes(System.String)
  - System.IO.File.GetCreationTime(System.String)
  - System.IO.File.GetCreationTimeUtc(System.String)
  - System.IO.File.GetLastAccessTime(System.String)
  - System.IO.File.GetLastAccessTimeUtc(System.String)
  - System.IO.File.GetLastWriteTime(System.String)
  - System.IO.File.GetLastWriteTimeUtc(System.String)
  - System.IO.File.Move(System.String,System.String)
  - System.IO.File.Open(System.String,System.IO.FileMode)
  - System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.File.OpenRead(System.String)
  - System.IO.File.OpenText(System.String)
  - System.IO.File.OpenWrite(System.String)
  - System.IO.File.ReadAllBytes(System.String)
  - System.IO.File.ReadAllLines(System.String)
  - System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  - System.IO.File.ReadAllText(System.String)
  - System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  - System.IO.File.ReadLines(System.String)
  - System.IO.File.ReadLines(System.String,System.Text.Encoding)
  - System.IO.File.Replace(System.String,System.String,System.String)
  - System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)
  - System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  - System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  - System.IO.File.SetCreationTime(System.String,System.DateTime)
  - System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  - System.IO.File.WriteAllBytes(System.String,System.Byte[])
  - System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.IO.File.WriteAllLines(System.String,System.String[])
  - System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  - System.IO.File.WriteAllText(System.String,System.String)
  - System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  langs:
  - csharp
  name: File
  nameWithType: File
  fullName: System.IO.File
  type: Class
  summary: "Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <xref href=&quot;System.IO.FileStream&quot;></xref> objects.       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the File class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to a single file at a time. You can also use the File class to get and set file attributes or <xref:System.DateTime> information related to the creation, access, and writing of a file. If you want to perform operations on multiple files, see <xref:System.IO.Directory.GetFiles%2A?displayProperty=fullName> or <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=fullName>.  \n  \n Many of the File methods return other I/O types when you create or open files. You can use these other types to further manipulate a file. For more information, see specific File members such as <xref:System.IO.File.OpenText%2A>, <xref:System.IO.File.CreateText%2A>, or <xref:System.IO.File.Create%2A>.  \n  \n Because all File methods are static, it might be more efficient to use a File method rather than a corresponding <xref:System.IO.FileInfo> instance method if you want to perform only one action. All File methods require the path to the file that you are manipulating.  \n  \n The static methods of the File class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.FileInfo> instead, because the security check will not always be necessary.  \n  \n By default, full read/write access to new files is granted to all users.  \n  \n The following table describes the enumerations that are used to customize the behavior of various File methods.  \n  \n|Enumeration|Description|  \n|-----------------|-----------------|  \n|<xref:System.IO.FileAccess>|Specifies read and write access to a file.|  \n|<xref:System.IO.FileShare>|Specifies the level of access permitted for a file that is already in use.|  \n|<xref:System.IO.FileMode>|Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception.|  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the File class to check whether a file exists, and depending on the result, either create a new file and write to it, or open the existing file and read from it. Before running the code, create a `c:\\temp` folder.  \n  \n [!code-cpp[File Class Example#1](~/add/codesnippet/cpp/t-system.io.file_1.cpp)]\n [!code-cs[File Class Example#1](~/add/codesnippet/csharp/t-system.io.file_1.cs)]\n [!code-vb[File Class Example#1](~/add/codesnippet/visualbasic/t-system.io.file_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class File
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllLines(String,IEnumerable<String>)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file."
  remarks: "The method creates the file if it doesn’t exist, but it doesn&quot;t create new directories. Therefore, the value of the `path` parameter must contain existing directories."
  example:
  - "The following example writes selected lines from a sample data file to a file, and then appends more lines. The directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-cs[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/csharp/d3653703-4b0a-4cbe-b582-_1.cs)]\n [!code-vb[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/visualbasic/d3653703-4b0a-4cbe-b582-_1.vb)]"
  syntax:
    content: public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable<string> contents);
    parameters:
    - id: path
      type: System.String
      description: "The file to append the lines to. The file is created if it doesn&quot;t already exist."
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "The lines to append to the file."
  overload: System.IO.File.AppendAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path </code>or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <code>path</code> was not found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have permission to write to the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> is a directory."
  platform:
  - net462
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file."
  remarks: "The method creates the file if it doesn’t exist, but it doesn&quot;t create new directories. Therefore, the value of the `path` parameter must contain existing directories.       You can use this method to create a file that contains the following:      -   The results of a [LINQ to Objects](~/add/includes/ajax-current-ext-md.md) query on the lines of a file, as obtained by using the <xref:System.IO.File.ReadLines%2A> method.      -   The contents of a collection that implements an <xref:System.Collections.Generic.IEnumerable%601> of strings."
  syntax:
    content: public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to append the lines to. The file is created if it doesn&quot;t already exist."
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "The lines to append to the file."
    - id: encoding
      type: System.Text.Encoding
      description: "The character encoding to use."
  overload: System.IO.File.AppendAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path</code>, <code>contents</code>, or <code>encoding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <code>path</code> was not found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> is a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.AppendAllText(System.String,System.String)
  id: AppendAllText(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllText(String,String)
  nameWithType: File.AppendAllText(String,String)
  fullName: System.IO.File.AppendAllText(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file."
  remarks: "Given a string and a file path, this method opens the specified file, appends the string to the end of the file, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.       The method creates the file if it doesn’t exist, but it doesn&quot;t create new directories. Therefore, the value of the `path` parameter must contain existing directories."
  example:
  - "The following code example demonstrates the use of the AppendAllText method to add extra text to the end of a file. In this example, a file is created if it doesn't already exist, and text is added to it. However, the directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-vb[System.IO.File.AllText#00](~/add/codesnippet/visualbasic/m-system.io.file.appenda_0_1.vb)]\n [!code-cs[System.IO.File.AllText#00](~/add/codesnippet/csharp/m-system.io.file.appenda_0_1.cs)]"
  syntax:
    content: public static void AppendAllText (string path, string contents);
    parameters:
    - id: path
      type: System.String
      description: "The file to append the specified string to."
    - id: contents
      type: System.String
      description: "The string to append to the file."
  overload: System.IO.File.AppendAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  id: AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllText(String,String,Encoding)
  nameWithType: File.AppendAllText(String,String,Encoding)
  fullName: System.IO.File.AppendAllText(String,String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Appends the specified string to the file, creating the file if it does not already exist."
  remarks: "Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.       The method creates the file if it doesn’t exist, but it doesn&quot;t create new directories. Therefore, the value of the `path` parameter must contain existing directories."
  example:
  - "The following code example demonstrates the use of the AppendAllText method to add extra text to the end of a file. In this example, a file is created if it doesn't already exist, and text is added to it. However, the directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-cs[System.IO.File.AllText_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.appenda_1_1.cs)]\n [!code-vb[System.IO.File.AllText_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.appenda_1_1.vb)]"
  syntax:
    content: public static void AppendAllText (string path, string contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to append the specified string to."
    - id: contents
      type: System.String
      description: "The string to append to the file."
    - id: encoding
      type: System.Text.Encoding
      description: "The character encoding to use."
  overload: System.IO.File.AppendAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendText(String)
  nameWithType: File.AppendText(String)
  fullName: System.IO.File.AppendText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a <xref:System.IO.StreamWriter> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist."
  remarks: "This method is equivalent to the <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29> constructor overload. If the file specified by `path` does not exist, it is created. If the file does exist, write operations to the <xref:System.IO.StreamWriter> append text to the file. Additional threads are permitted to read the file while it is open.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example appends text to a file. The method creates a new file if the file doesn’t exist. However, the directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-cpp[File_AppendText#1](~/add/codesnippet/cpp/m-system.io.file.appendt_1.cpp)]\n [!code-cs[File_AppendText#1](~/add/codesnippet/csharp/m-system.io.file.appendt_1.cs)]\n [!code-vb[File_AppendText#1](~/add/codesnippet/visualbasic/m-system.io.file.appendt_1.vb)]"
  syntax:
    content: public static System.IO.StreamWriter AppendText (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to the file to append to."
    return:
      type: System.IO.StreamWriter
      description: "A stream writer that appends UTF-8 encoded text to the specified file or to a new file."
  overload: System.IO.File.AppendText*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Copy(System.String,System.String)
  id: Copy(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Copy(String,String)
  nameWithType: File.Copy(String,String)
  fullName: System.IO.File.Copy(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Copies an existing file to a new file. Overwriting a file of the same name is not allowed."
  remarks: "This method is equivalent to the <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29> method overload with the `overwrite` parameter set to `false`.       The `sourceFileName` and `destFileName` parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see the <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName> method. This method does not support wildcard characters in the parameters.       The attributes of the original file are retained in the copied file."
  example:
  - "The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <xref:System.IO.File.Copy%2A> method as follows:  \n  \n-   It first uses the Copymethod overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  \n  \n-   It then uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.  \n  \n [!code-cs[FileCopyDelete#1](~/add/codesnippet/csharp/m-system.io.file.copy-sy_0_1.cs)]\n [!code-vb[FileCopyDelete#1](~/add/codesnippet/visualbasic/m-system.io.file.copy-sy_0_1.vb)]"
  syntax:
    content: public static void Copy (string sourceFileName, string destFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The file to copy."
    - id: destFileName
      type: System.String
      description: "The name of the destination file. This cannot be a directory or an existing file."
  overload: System.IO.File.Copy*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.       -or-       <code>sourceFileName</code> or <code>destFileName</code> specifies a directory."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The path specified in <code>sourceFileName</code> or <code>destFileName</code> is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>sourceFileName</code> was not found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destFileName</code> exists.       -or-       An I/O error has occurred."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Copy(System.String,System.String,System.Boolean)
  id: Copy(System.String,System.String,System.Boolean)
  parent: System.IO.File
  langs:
  - csharp
  name: Copy(String,String,Boolean)
  nameWithType: File.Copy(String,String,Boolean)
  fullName: System.IO.File.Copy(String,String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Copies an existing file to a new file. Overwriting a file of the same name is allowed."
  remarks: "The `sourceFileName` and `destFileName` parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. This method does not support wildcard characters in the parameters.       The attributes of the original file are retained in the copied file.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <xref:System.IO.File.Copy%2A> method as follows:  \n  \n-   It first uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%29?displayProperty=fullName> method overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  \n  \n It then uses the Copy method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.  \n  \n [!code-cs[FileCopyDelete#1](~/add/codesnippet/csharp/m-system.io.file.copy-sy_1_1.cs)]\n [!code-vb[FileCopyDelete#1](~/add/codesnippet/visualbasic/m-system.io.file.copy-sy_1_1.vb)]"
  syntax:
    content: public static void Copy (string sourceFileName, string destFileName, bool overwrite);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The file to copy."
    - id: destFileName
      type: System.String
      description: "The name of the destination file. This cannot be a directory."
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the destination file can be overwritten; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.File.Copy*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       <code>destFileName</code> is read-only."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.       -or-       <code>sourceFileName</code> or <code>destFileName</code> specifies a directory."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The path specified in <code>sourceFileName</code> or <code>destFileName</code> is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>sourceFileName</code> was not found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destFileName</code> exists and <code>overwrite</code> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.       -or-       An I/O error has occurred."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Create(System.String)
  id: Create(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String)
  nameWithType: File.Create(String)
  fullName: System.IO.File.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates or overwrites a file in the specified path."
  remarks: "The <xref:System.IO.FileStream> object created by this method has a default <xref:System.IO.FileShare> value of <xref:System.IO.FileShare>; no other process or code can access the created file until the original file handle is closed.       This method is equivalent to the <xref:System.IO.File.Create%28System.String%2CSystem.Int32%29> method overload using the default buffer size.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.       By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a file in the specified path, writes some information to the file, and reads from the file.  \n  \n [!code-cs[File Create1#1](~/add/codesnippet/csharp/m-system.io.file.create-_0_1.cs)]\n [!code-cpp[File Create1#1](~/add/codesnippet/cpp/m-system.io.file.create-_0_1.cpp)]\n [!code-vb[File Create1#1](~/add/codesnippet/visualbasic/m-system.io.file.create-_0_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Create (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path and name of the file to create."
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;></xref> that provides read/write access to the file specified in <code>path</code>."
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       <code>path</code> specified a file that is read-only."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while creating the file."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Create(System.String,System.Int32)
  id: Create(System.String,System.Int32)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String,Int32)
  nameWithType: File.Create(String,Int32)
  fullName: System.IO.File.Create(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates or overwrites the specified file."
  remarks: "The <xref:System.IO.FileStream> object created by this method has a default <xref:System.IO.FileShare> value of <xref:System.IO.FileShare>; no other process or code can access the created file until the original file handle is closed.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.       By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a file with the specified buffer size.  \n  \n [!code-cs[File Create2#1](~/add/codesnippet/csharp/m-system.io.file.create-_1_1.cs)]\n [!code-vb[File Create2#1](~/add/codesnippet/visualbasic/m-system.io.file.create-_1_1.vb)]\n [!code-cpp[File Create2#1](~/add/codesnippet/cpp/m-system.io.file.create-_1_1.cpp)]"
  syntax:
    content: public static System.IO.FileStream Create (string path, int bufferSize);
    parameters:
    - id: path
      type: System.String
      description: "The name of the file."
    - id: bufferSize
      type: System.Int32
      description: "The number of bytes buffered for reads and writes to the file."
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;></xref> with the specified buffer size that provides read/write access to the file specified in <code>path</code>."
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       <code>path</code> specified a file that is read-only."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while creating the file."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  id: Create(System.String,System.Int32,System.IO.FileOptions)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String,Int32,FileOptions)
  nameWithType: File.Create(String,Int32,FileOptions)
  fullName: System.IO.File.Create(String,Int32,FileOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates or overwrites the specified file, specifying a buffer size and a <xref href=&quot;System.IO.FileOptions&quot;></xref> value that describes how to create or overwrite the file."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.       By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options);
    parameters:
    - id: path
      type: System.String
      description: "The name of the file."
    - id: bufferSize
      type: System.Int32
      description: "The number of bytes buffered for reads and writes to the file."
    - id: options
      type: System.IO.FileOptions
      description: "One of the <xref href=&quot;System.IO.FileOptions&quot;></xref> values that describes how to create or overwrite the file."
    return:
      type: System.IO.FileStream
      description: "A new file with the specified buffer size."
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       <code>path</code> specified a file that is read-only."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while creating the file."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  id: Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String,Int32,FileOptions,FileSecurity)
  nameWithType: File.Create(String,Int32,FileOptions,FileSecurity)
  fullName: System.IO.File.Create(String,Int32,FileOptions,FileSecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates or overwrites the specified file with the specified buffer size, file options, and file security."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.       By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: path
      type: System.String
      description: "The name of the file."
    - id: bufferSize
      type: System.Int32
      description: "The number of bytes buffered for reads and writes to the file."
    - id: options
      type: System.IO.FileOptions
      description: "One of the <xref href=&quot;System.IO.FileOptions&quot;></xref> values that describes how to create or overwrite the file."
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "One of the <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> values that determines the access control and audit security for the file."
    return:
      type: System.IO.FileStream
      description: "A new file with the specified buffer size, file options, and file security."
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       <code>path</code> specified a file that is read-only."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while creating the file."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.CreateText(System.String)
  id: CreateText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: CreateText(String)
  nameWithType: File.CreateText(String)
  fullName: System.IO.File.CreateText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates or opens a file for writing UTF-8 encoded text."
  remarks: "This method is equivalent to the <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29> constructor overload with the `append` parameter set to `false`. If the file specified by `path` does not exist, it is created. If the file does exist, its contents are overwritten. Additional threads are permitted to read the file while it is open.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a file for text writing and reading.  \n  \n [!code-cs[File CreateText#1](~/add/codesnippet/csharp/m-system.io.file.createt_1.cs)]\n [!code-vb[File CreateText#1](~/add/codesnippet/visualbasic/m-system.io.file.createt_1.vb)]\n [!code-cpp[File CreateText#1](~/add/codesnippet/cpp/m-system.io.file.createt_1.cpp)]"
  syntax:
    content: public static System.IO.StreamWriter CreateText (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to be opened for writing."
    return:
      type: System.IO.StreamWriter
      description: "A <xref:System.IO.StreamWriter> that writes to the specified file using UTF-8 encoding."
  overload: System.IO.File.CreateText*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Decrypt(System.String)
  id: Decrypt(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Decrypt(String)
  nameWithType: File.Decrypt(String)
  fullName: System.IO.File.Decrypt(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Decrypts a file that was encrypted by the current account using the <xref:System.IO.File.Encrypt*> method."
  remarks: "The Decrypt method allows you to decrypt a file that was encrypted using the <xref:System.IO.File.Encrypt%2A> method.  The Decrypt method can decrypt only files that were encrypted using the current user account.       The Decrypt method requires exclusive access to the file being decrypted, and will raise an exception if another process is using the file. If the file is not encrypted, Decrypt will return a nonzero value, which indicates success.       Both the <xref:System.IO.File.Encrypt%2A> method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.       The current file system must be formatted as NTFS and the current operating system must be Windows NT or later."
  example:
  - "The following code example uses the <xref:System.IO.File.Encrypt%2A> method and the Decrypt method to encrypt and then decrypt a file. The file must exist for the example to work.  \n  \n [!code-cs[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/csharp/m-system.io.file.decrypt_1.cs)]\n [!code-cpp[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/cpp/m-system.io.file.decrypt_1.cpp)]\n [!code-vb[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/visualbasic/m-system.io.file.decrypt_1.vb)]"
  syntax:
    content: public static void Decrypt (string path);
    parameters:
    - id: path
      type: System.String
      description: "A path that describes a file to decrypt."
  overload: System.IO.File.Decrypt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "An invalid drive was specified."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file described by the <code>path</code> parameter could not be found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file. For example, the encrypted file is already open.       -or-       This operation is not supported on the current platform."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The file system is not NTFS."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The <code>path</code> parameter specified a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Delete(String)
  nameWithType: File.Delete(String)
  fullName: System.IO.File.Delete(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Deletes the specified file."
  remarks: "Specify a file name with any relative or absolute path information for the `path` parameter. Wildcard characters cannot be included. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       If the file to be deleted does not exist, no exception is thrown.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example copies groups of files to the C:\\archives\\2008 backup folder and then deletes them from the source folder.  \n  \n [!code-cs[FileCopyDelete#1](~/add/codesnippet/csharp/m-system.io.file.delete-_1.cs)]\n [!code-vb[FileCopyDelete#1](~/add/codesnippet/visualbasic/m-system.io.file.delete-_1.vb)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "The name of the file to be deleted. Wildcard characters are not supported."
  overload: System.IO.File.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The specified file is in use.       -or-       There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see [How to: Enumerate Directories and Files](~/add/includes/ajax-current-ext-md.md)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       The file is an executable file that is in use.       -or-       <code>path</code> is a directory.       -or-       <code>path</code> specified a read-only file."
  platform:
  - net462
- uid: System.IO.File.Encrypt(System.String)
  id: Encrypt(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Encrypt(String)
  nameWithType: File.Encrypt(String)
  fullName: System.IO.File.Encrypt(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Encrypts a file so that only the account used to encrypt the file can decrypt it."
  remarks: "The Encrypt method allows you to encrypt a file so that only the account used to call this method can decrypt it. Use the <xref:System.IO.File.Decrypt%2A> method to decrypt a file encrypted by the Encrypt method.       The Encrypt method requires exclusive access to the file being encrypted, and will fail if another process is using the file.       Both the Encrypt method and the <xref:System.IO.File.Decrypt%2A> method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.       This method is not available on all versions of Windows. For example, it is not available on Home editions.       The current file system must be formatted as NTFS."
  example:
  - "The following code example uses the Encrypt method and the <xref:System.IO.File.Decrypt%2A> method to encrypt and then decrypt a file. The file must exist for the example to work.  \n  \n [!code-cs[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/csharp/m-system.io.file.encrypt_1.cs)]\n [!code-cpp[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/cpp/m-system.io.file.encrypt_1.cpp)]\n [!code-vb[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/visualbasic/m-system.io.file.encrypt_1.vb)]"
  syntax:
    content: public static void Encrypt (string path);
    parameters:
    - id: path
      type: System.String
      description: "A path that describes a file to encrypt."
  overload: System.IO.File.Encrypt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "An invalid drive was specified."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file described by the <code>path</code> parameter could not be found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file.       -or-       This operation is not supported on the current platform."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The file system is not NTFS."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The <code>path</code> parameter specified a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Exists(String)
  nameWithType: File.Exists(String)
  fullName: System.IO.File.Exists(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Determines whether the specified file exists."
  remarks: "The Exists method should not be used for path validation, this method merely checks if the file specified in `path` exists. Passing an invalid path to Exists returns `false`. To check whether the path contains any invalid characters, you can call the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve the characters that are invalid for the file system. You can also create a regular expression to test the whether the path is valid for your environment. For examples of acceptable paths, see <xref:System.IO.File>.       To check if a directory exists, see <xref:System.IO.Directory.Exists%2A?displayProperty=fullName>.       Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as <xref:System.IO.File.Delete%2A>.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       If `path` describes a directory, this method returns `false`. Trailing spaces are removed from the `path` parameter before determining if the file exists.       The Exists method returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file."
  example:
  - "The following example determines if a file exists.  \n  \n [!code-vb[File Exists#1](~/add/codesnippet/visualbasic/m-system.io.file.exists-_1.vb)]\n [!code-cs[File Exists#1](~/add/codesnippet/csharp/m-system.io.file.exists-_1.cs)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the caller has the required permissions and <code>path</code> contains the name of an existing file; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. This method also returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> regardless of the existence of <code>path</code>."
  overload: System.IO.File.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.File.GetAccessControl(System.String)
  id: GetAccessControl(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetAccessControl(String)
  nameWithType: File.GetAccessControl(String)
  fullName: System.IO.File.GetAccessControl(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets a <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that encapsulates the access control list (ACL) entries for a specified file."
  remarks: "Use the GetAccessControl method to retrieve the access control list (ACL) entries for a file.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       In NTFS environments, <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights> are granted to the user if the user has <xref:System.Security.AccessControl.FileSystemRights> rights on the parent folder. To deny <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights>, deny <xref:System.Security.AccessControl.FileSystemRights> on the parent directory."
  example:
  - "The following code example uses the <xref:System.IO.File.GetAccessControl%2A> and the <xref:System.IO.File.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  \n  \n [!code-cs[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.file.getacce_1.cs)]\n [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.file.getacce_1.vb)]\n [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.file.getacce_1.cpp)]"
  syntax:
    content: public static System.Security.AccessControl.FileSecurity GetAccessControl (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to a file containing a <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that describes the file&quot;s access control list (ACL) information."
    return:
      type: System.Security.AccessControl.FileSecurity
      description: "A <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter."
  overload: System.IO.File.GetAccessControl*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "The file could not be found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The <code>path</code> parameter specified a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.File
  langs:
  - csharp
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: File.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.File.GetAccessControl(String,AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets a <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that encapsulates the specified type of access control list (ACL) entries for a particular file."
  remarks: "Use the GetAccessControl method to retrieve the access control list (ACL) entries for a file.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       In NTFS environments, <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights> are granted to the user if the user has <xref:System.Security.AccessControl.FileSystemRights> rights on the parent folder. To deny <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights>, deny <xref:System.Security.AccessControl.FileSystemRights> on the parent directory."
  syntax:
    content: public static System.Security.AccessControl.FileSecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: path
      type: System.String
      description: "The path to a file containing a <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that describes the file&quot;s access control list (ACL) information."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "One of the <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref> values that specifies the type of access control list (ACL) information to receive."
    return:
      type: System.Security.AccessControl.FileSecurity
      description: "A <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that encapsulates the access control rules for the file described by the <code>path</code> parameter."
  overload: System.IO.File.GetAccessControl*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "The file could not be found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The <code>path</code> parameter specified a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.GetAttributes(System.String)
  id: GetAttributes(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetAttributes(String)
  nameWithType: File.GetAttributes(String)
  fullName: System.IO.File.GetAttributes(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets the <xref href=&quot;System.IO.FileAttributes&quot;></xref> of the file on the path."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates the `GetAttributes` and `SetAttributes` methods by applying the `Archive` and `Hidden` attributes to a file.  \n  \n [!code-cs[File GetAttributes#1](~/add/codesnippet/csharp/m-system.io.file.getattr_1.cs)]\n [!code-cpp[File GetAttributes#1](~/add/codesnippet/cpp/m-system.io.file.getattr_1.cpp)]\n [!code-vb[File GetAttributes#1](~/add/codesnippet/visualbasic/m-system.io.file.getattr_1.vb)]"
  syntax:
    content: public static System.IO.FileAttributes GetAttributes (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to the file."
    return:
      type: System.IO.FileAttributes
      description: "The <xref href=&quot;System.IO.FileAttributes&quot;></xref> of the file on the path."
  overload: System.IO.File.GetAttributes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is empty, contains only white spaces, or contains invalid characters."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>path</code> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "This file is being used by another process."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetCreationTime(String)
  nameWithType: File.GetCreationTime(String)
  fullName: System.IO.File.GetCreationTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the creation date and time of the specified file or directory."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       If the file described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       NTFS-formatted drives may cache information about a file, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates `GetCreationTime`.  \n  \n [!code-vb[System.IO.File.GetCreationTime#1](~/add/codesnippet/visualbasic/m-system.io.file.getcrea_0_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain creation date and time information."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> structure set to the creation date and time for the specified file or directory. This value is expressed in local time."
  overload: System.IO.File.GetCreationTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetCreationTimeUtc(String)
  nameWithType: File.GetCreationTimeUtc(String)
  fullName: System.IO.File.GetCreationTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the file described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       NTFS-formatted drives may cache information about a file, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates the GetCreationTimeUtc method.  \n  \n [!code-vb[System.IO.File.GetCreationTime#2](~/add/codesnippet/visualbasic/m-system.io.file.getcrea_1_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain creation date and time information."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time."
  overload: System.IO.File.GetCreationTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastAccessTime(String)
  nameWithType: File.GetLastAccessTime(String)
  fullName: System.IO.File.GetLastAccessTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time the specified file or directory was last accessed."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the file described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates `GetLastAccessTime`.  \n  \n [!code-vb[File GetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.file.getlast_1_1.vb)]\n [!code-cs[File GetLastAccess#1](~/add/codesnippet/csharp/m-system.io.file.getlast_1_1.cs)]\n [!code-cpp[File GetLastAccess#1](~/add/codesnippet/cpp/m-system.io.file.getlast_1_1.cpp)]"
  syntax:
    content: public static DateTime GetLastAccessTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain access date and time information."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time."
  overload: System.IO.File.GetLastAccessTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastAccessTimeUtc(String)
  nameWithType: File.GetLastAccessTimeUtc(String)
  fullName: System.IO.File.GetLastAccessTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the file described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static DateTime GetLastAccessTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain access date and time information."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time."
  overload: System.IO.File.GetLastAccessTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastWriteTime(String)
  nameWithType: File.GetLastWriteTime(String)
  fullName: System.IO.File.GetLastWriteTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time the specified file or directory was last written to."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. Each operating system manages the last write time according to its own rules. To improve performance, an operating system might not set the last write time value to the exact time of the last write operation, but might set it to a close approximation instead.       If the file described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates `GetLastWriteTime`.  \n  \n [!code-cpp[File GetLastWrite#1](~/add/codesnippet/cpp/m-system.io.file.getlast_0_1.cpp)]\n [!code-vb[File GetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.file.getlast_0_1.vb)]\n [!code-cs[File GetLastWrite#1](~/add/codesnippet/csharp/m-system.io.file.getlast_0_1.cs)]"
  syntax:
    content: public static DateTime GetLastWriteTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain write date and time information."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time."
  overload: System.IO.File.GetLastWriteTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastWriteTimeUtc(String)
  nameWithType: File.GetLastWriteTimeUtc(String)
  fullName: System.IO.File.GetLastWriteTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. Each operating system manages the last write time according to its own rules. To improve performance, an operating system might not set the last write time value to the exact time of the last write operation, but might set it to a close approximation instead.       If the file described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static DateTime GetLastWriteTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain write date and time information."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time."
  overload: System.IO.File.GetLastWriteTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Move(String,String)
  nameWithType: File.Move(String,String)
  fullName: System.IO.File.Move(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Moves a specified file to a new location, providing the option to specify a new file name."
  remarks: "This method works across disk volumes, and it does not throw an exception if the source and destination are the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <xref:System.IO.IOException>. You cannot use the Move method to overwrite an existing file.       The `sourceFileName` and `destFileName` arguments can include relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       If you try to move a file across disk volumes and that file is in use, the file is copied to the destination, but it is not deleted from the source.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example moves a file.  \n  \n [!code-cpp[File Move#1](~/add/codesnippet/cpp/m-system.io.file.move-sy_1.cpp)]\n [!code-cs[File Move#1](~/add/codesnippet/csharp/m-system.io.file.move-sy_1.cs)]\n [!code-vb[File Move#1](~/add/codesnippet/visualbasic/m-system.io.file.move-sy_1.vb)]"
  syntax:
    content: public static void Move (string sourceFileName, string destFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The name of the file to move. Can include a relative or absolute path."
    - id: destFileName
      type: System.String
      description: "The new path and name for the file."
  overload: System.IO.File.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The destination file already exists.       -or-       <code>sourceFileName</code> was not found."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is a zero-length string, contains only white space, or contains invalid characters as defined in <xref:System.IO.Path.InvalidPathChars>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The path specified in <code>sourceFileName</code> or <code>destFileName</code> is invalid, (for example, it is on an unmapped drive)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceFileName</code> or <code>destFileName</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Open(System.String,System.IO.FileMode)
  id: Open(System.String,System.IO.FileMode)
  parent: System.IO.File
  langs:
  - csharp
  name: Open(String,FileMode)
  nameWithType: File.Open(String,FileMode)
  fullName: System.IO.File.Open(String,FileMode)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a <xref href=&quot;System.IO.FileStream&quot;></xref> on the specified path with read/write access."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a temporary file and writes some text to it. The example then opens the file, using T:System.IO.FileMode.Open; that is, if the file did not already exist, it would not be created.  \n  \n [!code-cpp[File Open1#1](~/add/codesnippet/cpp/m-system.io.file.open-sy_0_1.cpp)]\n [!code-cs[File Open1#1](~/add/codesnippet/csharp/m-system.io.file.open-sy_0_1.cs)]\n [!code-vb[File Open1#1](~/add/codesnippet/visualbasic/m-system.io.file.open-sy_0_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Open (string path, System.IO.FileMode mode);
    parameters:
    - id: path
      type: System.String
      description: "The file to open."
    - id: mode
      type: System.IO.FileMode
      description: "A <xref href=&quot;System.IO.FileMode&quot;></xref> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten."
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;></xref> opened in the specified mode and path, with read/write access and not shared."
  overload: System.IO.File.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref> and the specified file is a hidden file."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code> specified an invalid value."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.File
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess)
  nameWithType: File.Open(String,FileMode,FileAccess)
  fullName: System.IO.File.Open(String,FileMode,FileAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a <xref href=&quot;System.IO.FileStream&quot;></xref> on the specified path, with the specified mode and access."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>."
  example:
  - "The following example opens a file with read-only access.  \n  \n [!code-cs[file open2#1](~/add/codesnippet/csharp/m-system.io.file.open-sy_1_1.cs)]\n [!code-cpp[file open2#1](~/add/codesnippet/cpp/m-system.io.file.open-sy_1_1.cpp)]\n [!code-vb[file open2#1](~/add/codesnippet/visualbasic/m-system.io.file.open-sy_1_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "The file to open."
    - id: mode
      type: System.IO.FileMode
      description: "A <xref href=&quot;System.IO.FileMode&quot;></xref> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten."
    - id: access
      type: System.IO.FileAccess
      description: "A <xref href=&quot;System.IO.FileAccess&quot;></xref> value that specifies the operations that can be performed on the file."
    return:
      type: System.IO.FileStream
      description: "An unshared <xref href=&quot;System.IO.FileStream&quot;></xref> that provides access to the specified file, with the specified mode and access."
  overload: System.IO.File.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.       -or-       <code>access</code> specified <xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref> and <code>mode</code> specified <xref uid=&quot;langword_csharp_Create&quot; name=&quot;Create&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CreateNew&quot; name=&quot;CreateNew&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Truncate&quot; name=&quot;Truncate&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Append&quot; name=&quot;Append&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only and <code>access</code> is not <xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref>.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref> and the specified file is a hidden file."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code> or <code>access</code> specified an invalid value."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.File
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: File.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.File.Open(String,FileMode,FileAccess,FileShare)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a <xref href=&quot;System.IO.FileStream&quot;></xref> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example opens a file with read-only access and with file sharing disallowed.  \n  \n [!code-cs[file open3#1](~/add/codesnippet/csharp/da5a0cfa-1b45-4d75-942d-_1.cs)]\n [!code-cpp[file open3#1](~/add/codesnippet/cpp/da5a0cfa-1b45-4d75-942d-_1.cpp)]\n [!code-vb[file open3#1](~/add/codesnippet/visualbasic/da5a0cfa-1b45-4d75-942d-_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
    parameters:
    - id: path
      type: System.String
      description: "The file to open."
    - id: mode
      type: System.IO.FileMode
      description: "A <xref href=&quot;System.IO.FileMode&quot;></xref> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten."
    - id: access
      type: System.IO.FileAccess
      description: "A <xref href=&quot;System.IO.FileAccess&quot;></xref> value that specifies the operations that can be performed on the file."
    - id: share
      type: System.IO.FileShare
      description: "A <xref href=&quot;System.IO.FileShare&quot;></xref> value specifying the type of access other threads have to the file."
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;></xref> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option."
  overload: System.IO.File.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.       -or-       <code>access</code> specified <xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref> and <code>mode</code> specified <xref uid=&quot;langword_csharp_Create&quot; name=&quot;Create&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CreateNew&quot; name=&quot;CreateNew&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Truncate&quot; name=&quot;Truncate&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Append&quot; name=&quot;Append&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only and <code>access</code> is not <xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref>.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission.       -or-       <code>mode</code> is <xref href=&quot;System.IO.FileMode&quot;></xref> and the specified file is a hidden file."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>, <code>access</code>, or <code>share</code> specified an invalid value."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: OpenRead(String)
  nameWithType: File.OpenRead(String)
  fullName: System.IO.File.OpenRead(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens an existing file for reading."
  remarks: "This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29> constructor overload with a <xref:System.IO.FileMode> value of <xref:System.IO.FileMode>, a <xref:System.IO.FileAccess> value of <xref:System.IO.FileAccess> and a <xref:System.IO.FileShare> value of <xref:System.IO.FileShare>.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example opens a file for reading.  \n  \n [!code-cs[file openread#1](~/add/codesnippet/csharp/m-system.io.file.openrea_1.cs)]\n [!code-vb[file openread#1](~/add/codesnippet/visualbasic/m-system.io.file.openrea_1.vb)]\n [!code-cpp[file openread#1](~/add/codesnippet/cpp/m-system.io.file.openrea_1.cpp)]"
  syntax:
    content: public static System.IO.FileStream OpenRead (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to be opened for reading."
    return:
      type: System.IO.FileStream
      description: "A read-only <xref href=&quot;System.IO.FileStream&quot;></xref> on the specified path."
  overload: System.IO.File.OpenRead*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  platform:
  - net462
- uid: System.IO.File.OpenText(System.String)
  id: OpenText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: OpenText(String)
  nameWithType: File.OpenText(String)
  fullName: System.IO.File.OpenText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens an existing UTF-8 encoded text file for reading."
  remarks: "This method is equivalent to the <xref:System.IO.StreamReader.%23ctor%28System.String%29> constructor overload.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example opens a text file for reading.  \n  \n [!code-vb[file opentext#1](~/add/codesnippet/visualbasic/m-system.io.file.opentex_1.vb)]\n [!code-cs[file opentext#1](~/add/codesnippet/csharp/m-system.io.file.opentex_1.cs)]\n [!code-cpp[file opentext#1](~/add/codesnippet/cpp/m-system.io.file.opentex_1.cpp)]"
  syntax:
    content: public static System.IO.StreamReader OpenText (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to be opened for reading."
    return:
      type: System.IO.StreamReader
      description: "A <xref:System.IO.StreamReader> on the specified path."
  overload: System.IO.File.OpenText*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.OpenWrite(System.String)
  id: OpenWrite(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: OpenWrite(String)
  nameWithType: File.OpenWrite(String)
  fullName: System.IO.File.OpenWrite(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens an existing file or creates a new file for writing."
  remarks: "This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29> constructor overload with file mode set to <xref:System.IO.FileMode>, the access set to <xref:System.IO.FileAccess>, and the share mode set to <xref:System.IO.FileShare>.       The OpenWrite method opens a file if one already exists for the file path, or creates a new file if one does not exist. For an existing file, it does not append the new text to the existing text. Instead, it overwrites the existing characters with the new characters. If you overwrite a longer string (such as “This is a test of the OpenWrite method”) with a shorter string (such as “Second run”), the file will contain a mix of the strings (“Second runtest of the OpenWrite method”).       The `path` parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, use the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example opens a file for reading and writing.  \n  \n [!code-cpp[file openwrite#1](~/add/codesnippet/cpp/m-system.io.file.openwri_1.cpp)]\n [!code-cs[file openwrite#1](~/add/codesnippet/csharp/m-system.io.file.openwri_1.cs)]\n [!code-vb[file openwrite#1](~/add/codesnippet/visualbasic/m-system.io.file.openwri_1.vb)]"
  syntax:
    content: public static System.IO.FileStream OpenWrite (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to be opened for writing."
    return:
      type: System.IO.FileStream
      description: "An unshared <xref href=&quot;System.IO.FileStream&quot;></xref> object on the specified path with <xref href=&quot;System.IO.FileAccess&quot;></xref> access."
  overload: System.IO.File.OpenWrite*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       <code>path</code> specified a read-only file or directory."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.ReadAllBytes(System.String)
  id: ReadAllBytes(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllBytes(String)
  nameWithType: File.ReadAllBytes(String)
  fullName: System.IO.File.ReadAllBytes(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a binary file, reads the contents of the file into a byte array, and then closes the file."
  remarks: "Given a file path, this method opens the file, reads the contents of the file into a byte array, and then closes the file."
  syntax:
    content: public static byte[] ReadAllBytes (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to open for reading."
    return:
      type: System.Byte[]
      description: "A byte array containing the contents of the file."
  overload: System.IO.File.ReadAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.ReadAllLines(System.String)
  id: ReadAllLines(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllLines(String)
  nameWithType: File.ReadAllLines(String)
  fullName: System.IO.File.ReadAllLines(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a text file, reads all lines of the file, and then closes the file."
  remarks: "This method opens a file, reads each line of the file, then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected."
  example:
  - "The following code example demonstrates the use of the ReadAllLines method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_1_1.vb)]\n [!code-cs[System.IO.File.AllLines#00](~/add/codesnippet/csharp/m-system.io.file.readall_1_1.cs)]"
  syntax:
    content: public static string[] ReadAllLines (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to open for reading."
    return:
      type: System.String[]
      description: "A string array containing all lines of the file."
  overload: System.IO.File.ReadAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  id: ReadAllLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllLines(String,Encoding)
  nameWithType: File.ReadAllLines(String,Encoding)
  fullName: System.IO.File.ReadAllLines(String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a file, reads all lines of the file with the specified encoding, and then closes the file."
  remarks: "This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected."
  example:
  - "The following code example demonstrates the use of the ReadAllLines method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_0_1.vb)]\n [!code-cs[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.readall_0_1.cs)]"
  syntax:
    content: public static string[] ReadAllLines (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to open for reading."
    - id: encoding
      type: System.Text.Encoding
      description: "The encoding applied to the contents of the file."
    return:
      type: System.String[]
      description: "A string array containing all lines of the file."
  overload: System.IO.File.ReadAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllText(String)
  nameWithType: File.ReadAllText(String)
  fullName: System.IO.File.ReadAllText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a text file, reads all lines of the file, and then closes the file."
  remarks: "This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.  \n  \n Use the <xref:System.IO.File.ReadAllText%28System.String%2CSystem.Text.Encoding%29> method overload when reading files that might contain imported text, because unrecognized characters may not be read correctly.  \n  \n The file handle is guaranteed to be closed by this method, even if exceptions are raised."
  example:
  - "The following code example demonstrates the use of the ReadAllText method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllText#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_3_1.vb)]\n [!code-cs[System.IO.File.AllText#00](~/add/codesnippet/csharp/m-system.io.file.readall_3_1.cs)]"
  syntax:
    content: public static string ReadAllText (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to open for reading."
    return:
      type: System.String
      description: "A string containing all lines of the file."
  overload: System.IO.File.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  id: ReadAllText(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllText(String,Encoding)
  nameWithType: File.ReadAllText(String,Encoding)
  fullName: System.IO.File.ReadAllText(String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Opens a file, reads all lines of the file with the specified encoding, and then closes the file."
  remarks: "This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.  \n  \n The file handle is guaranteed to be closed by this method, even if exceptions are raised.  \n  \n To use the encoding settings as configured for your operating system, specify the <xref:System.Text.Encoding.Default%2A?displayProperty=fullName> property for the `encoding` parameter."
  example:
  - "The following code example demonstrates the use of the ReadAllText method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-cs[System.IO.File.AllText_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.readall_2_1.cs)]\n [!code-vb[System.IO.File.AllText_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_2_1.vb)]"
  syntax:
    content: public static string ReadAllText (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to open for reading."
    - id: encoding
      type: System.Text.Encoding
      description: "The encoding applied to the contents of the file."
    return:
      type: System.String
      description: "A string containing all lines of the file."
  overload: System.IO.File.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>path</code> was not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.ReadLines(System.String)
  id: ReadLines(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadLines(String)
  nameWithType: File.ReadLines(String)
  fullName: System.IO.File.ReadLines(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Reads the lines of a file."
  remarks: "The ReadLines and <xref:System.IO.File.ReadAllLines%2A> methods differ as follows: When you use ReadLines, you can start enumerating the collection of strings before the whole collection is returned; when you use <xref:System.IO.File.ReadAllLines%2A>, you must wait for the whole array of strings be returned before you can access the array. Therefore, when you are working with very large files, ReadLines can be more efficient.       You can use the ReadLines method to do the following:      -   Perform [LINQ to Objects](~/add/includes/ajax-current-ext-md.md) queries on a file to obtain a filtered set of its lines.      -   Write the returned collection of lines to a file with the <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName> method, or append them to an existing file with the <xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName> method.      -   Create an immediately populated instance of a collection that takes an <xref:System.Collections.Generic.IEnumerable%601> collection of strings for its constructor, such as a <xref:System.Collections.Generic.IList%601> or a <xref:System.Collections.Generic.Queue%601>.       This method uses <xref:System.Text.Encoding.UTF8%2A> for the encoding value."
  example:
  - "The following example reads the lines of a file to find lines that contain specified strings.  \n  \n [!code-vb[System.IO.File.ReadLines#1](~/add/codesnippet/visualbasic/m-system.io.file.readlin_1.vb)]\n [!code-cs[System.IO.File.ReadLines#1](~/add/codesnippet/csharp/m-system.io.file.readlin_1.cs)]  \n  \n The following example uses the ReadLines method in a LINQ query that enumerates all directories for files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".  \n  \n [!code-cs[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/csharp/m-system.io.file.readlin_2.cs)]\n [!code-vb[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/visualbasic/m-system.io.file.readlin_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> ReadLines (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file to read."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "All the lines of the file, or the lines that are the result of a query."
  overload: System.IO.File.ReadLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <code>path</code> was not found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> is a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.ReadLines(System.String,System.Text.Encoding)
  id: ReadLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadLines(String,Encoding)
  nameWithType: File.ReadLines(String,Encoding)
  fullName: System.IO.File.ReadLines(String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Read the lines of a file that has a specified encoding."
  remarks: "Use this method to specify an encoding to use read the file.       The ReadLines and <xref:System.IO.File.ReadAllLines%2A> methods differ as follows: When you use ReadLines, you can start enumerating the collection of strings before the whole collection is returned. When you use <xref:System.IO.File.ReadAllLines%2A>, you must wait for the whole array of strings be returned before you can access the array. Therefore, when you are working with very large files, ReadLines can be more efficient.       You can use the ReadLines method to do the following:      -   Perform [LINQ to Objects](~/add/includes/ajax-current-ext-md.md) queries on a file to obtain a filtered set of its lines.      -   Write the returned collection of lines to a file with the <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName> method, or append them to an existing file with the <xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName> method.      -   Create an immediately populated instance of a collection that takes an <xref:System.Collections.Generic.IEnumerable%601> collection of strings for its constructor, such as a <xref:System.Collections.Generic.IList%601> or a <xref:System.Collections.Generic.Queue%601>."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> ReadLines (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to read."
    - id: encoding
      type: System.Text.Encoding
      description: "The encoding that is applied to the contents of the file."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "All the lines of the file, or the lines that are the result of a query."
  overload: System.IO.File.ReadLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <code>path</code> was not found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> is a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.Replace(System.String,System.String,System.String)
  id: Replace(System.String,System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Replace(String,String,String)
  nameWithType: File.Replace(String,String,String)
  fullName: System.IO.File.Replace(String,String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file."
  remarks: "The Replace method replaces the contents of a specified file with the contents of another file.  It also creates a backup of the file that was replaced.       If the `sourceFileName` and `destinationFileName` are on different volumes, this method will raise an exception. If the `destinationBackupFileName` is on a different volume from the source file, the backup file will be deleted.       Pass `null` to the `destinationBackupFileName` parameter if you do not want to create a backup of the file being replaced."
  example:
  - "The following code example uses the <xref:System.IO.File.Replace%2A> method to replace a file with another file and create a backup of the replaced file.  \n  \n [!code-vb[IO.File.Replace#1](~/add/codesnippet/visualbasic/m-system.io.file.replace_1.vb)]\n [!code-cs[IO.File.Replace#1](~/add/codesnippet/csharp/m-system.io.file.replace_1.cs)]\n [!code-cpp[IO.File.Replace#1](~/add/codesnippet/cpp/m-system.io.file.replace_1.cpp)]"
  syntax:
    content: public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The name of a file that replaces the file specified by `destinationFileName`."
    - id: destinationFileName
      type: System.String
      description: "The name of the file being replaced."
    - id: destinationBackupFileName
      type: System.String
      description: "The name of the backup file."
  overload: System.IO.File.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path described by the <code>destinationFileName</code> parameter was not of a legal form.       -or-       The path described by the <code>destinationBackupFileName</code> parameter was not of a legal form."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationFileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "An invalid drive was specified."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file described by the current <xref href=&quot;System.IO.FileInfo&quot;></xref> object could not be found.       -or-       The file described by the <code>destinationBackupFileName</code> parameter could not be found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file.  \n  \n \\- or -  \n  \n The <code>sourceFileName</code> and <code>destinationFileName</code> parameters specify the same file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>sourceFileName</code> or <code>destinationFileName</code> parameter specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       Source or destination parameters specify a directory instead of a file.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)
  id: Replace(System.String,System.String,System.String,System.Boolean)
  parent: System.IO.File
  langs:
  - csharp
  name: Replace(String,String,String,Boolean)
  nameWithType: File.Replace(String,String,String,Boolean)
  fullName: System.IO.File.Replace(String,String,String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors."
  remarks: "The Replace method replaces the contents of a specified file with the contents of another file.  It also creates a backup of the file that was replaced.       If the `sourceFileName` and `destinationFileName` are on different volumes, this method will raise an exception. If the `destinationBackupFileName` is on a different volume from the source file, the backup file will be deleted.       Pass `null` to the `destinationBackupFileName` parameter if you do not want to create a backup of the file being replaced."
  example:
  - "The following code example uses the Replace method to replace a file with another file and create a backup of the replaced file.  \n  \n [!code-vb[IO.File.Replace#1](~/add/codesnippet/visualbasic/be01e0a6-2a02-46ff-8d10-_1.vb)]\n [!code-cs[IO.File.Replace#1](~/add/codesnippet/csharp/be01e0a6-2a02-46ff-8d10-_1.cs)]\n [!code-cpp[IO.File.Replace#1](~/add/codesnippet/cpp/be01e0a6-2a02-46ff-8d10-_1.cpp)]"
  syntax:
    content: public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The name of a file that replaces the file specified by `destinationFileName`."
    - id: destinationFileName
      type: System.String
      description: "The name of the file being replaced."
    - id: destinationBackupFileName
      type: System.String
      description: "The name of the backup file."
    - id: ignoreMetadataErrors
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.File.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path described by the <code>destinationFileName</code> parameter was not of a legal form.       -or-       The path described by the <code>destinationBackupFileName</code> parameter was not of a legal form."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationFileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "An invalid drive was specified."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file described by the current <xref href=&quot;System.IO.FileInfo&quot;></xref> object could not be found.       -or-       The file described by the <code>destinationBackupFileName</code> parameter could not be found."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file.  \n  \n \\- or -  \n  \n The <code>sourceFileName</code> and <code>destinationFileName</code> parameters specify the same file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>sourceFileName</code> or <code>destinationFileName</code> parameter specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       Source or destination parameters specify a directory instead of a file.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  id: SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  langs:
  - csharp
  name: SetAccessControl(String,FileSecurity)
  nameWithType: File.SetAccessControl(String,FileSecurity)
  fullName: System.IO.File.SetAccessControl(String,FileSecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Applies access control list (ACL) entries described by a <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object to the specified file."
  remarks: "The SetAccessControl method applies access control list (ACL) entries to a file that represents the noninherited ACL list.      > [!CAUTION] >  The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file. To add permissions for a new user, use the <xref:System.IO.File.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use SetAccessControl to apply it back to the file.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       The SetAccessControl method persists only <xref:System.Security.AccessControl.FileSecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.FileSecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.FileSecurity> object from one file and reapply the same object to another file.       To copy ACL information from one file to another:      1.  Use the <xref:System.IO.File.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.FileSecurity> object from the source file.      2.  Create a new <xref:System.Security.AccessControl.FileSecurity> object for the destination file.      3.  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.FileSecurity> object to retrieve the ACL information.      4.  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.FileSecurity> object.      5.  Set the destination <xref:System.Security.AccessControl.FileSecurity> object to the destination file using the SetAccessControl method.       In NTFS environments, <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights> are granted to the user if the user has <xref:System.Security.AccessControl.FileSystemRights> rights on the parent folder. To deny <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights>, deny <xref:System.Security.AccessControl.FileSystemRights> on the parent directory."
  example:
  - "The following code example uses the <xref:System.IO.File.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  \n  \n [!code-cs[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/4f792c56-f52f-4b2d-89e4-_1.cs)]\n [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/4f792c56-f52f-4b2d-89e4-_1.vb)]\n [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/4f792c56-f52f-4b2d-89e4-_1.cpp)]"
  syntax:
    content: public static void SetAccessControl (string path, System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: path
      type: System.String
      description: "A file to add or remove access control list (ACL) entries from."
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "A <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;></xref> object that describes an ACL entry to apply to the file described by the `path` parameter."
  overload: System.IO.File.SetAccessControl*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "The file could not be found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The <code>path</code> parameter specified a directory.       -or-       The caller does not have the required permission."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>fileSecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  id: SetAttributes(System.String,System.IO.FileAttributes)
  parent: System.IO.File
  langs:
  - csharp
  name: SetAttributes(String,FileAttributes)
  nameWithType: File.SetAttributes(String,FileAttributes)
  fullName: System.IO.File.SetAttributes(String,FileAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the specified <xref href=&quot;System.IO.FileAttributes&quot;></xref> of the file on the specified path."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       Certain file attributes, such as <xref:System.IO.FileAttributes> and <xref:System.IO.FileAttributes>, can be combined. Other attributes, such as <xref:System.IO.FileAttributes>, must be used alone.       It is not possible to change the compression status of a <xref:System.IO.File> object using the SetAttributes method.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates the `GetAttributes` and `SetAttributes` methods by applying the `Archive` and `Hidden` attributes to a file.  \n  \n [!code-cs[File GetAttributes#1](~/add/codesnippet/csharp/m-system.io.file.setattr_1.cs)]\n [!code-cpp[File GetAttributes#1](~/add/codesnippet/cpp/m-system.io.file.setattr_1.cpp)]\n [!code-vb[File GetAttributes#1](~/add/codesnippet/visualbasic/m-system.io.file.setattr_1.vb)]"
  syntax:
    content: public static void SetAttributes (string path, System.IO.FileAttributes fileAttributes);
    parameters:
    - id: path
      type: System.String
      description: "The path to the file."
    - id: fileAttributes
      type: System.IO.FileAttributes
      description: "A bitwise combination of the enumeration values."
  overload: System.IO.File.SetAttributes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid, (for example, it is on an unmapped drive)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file cannot be found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetCreationTime(String,DateTime)
  nameWithType: File.SetCreationTime(String,DateTime)
  fullName: System.IO.File.SetCreationTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time the file was created."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetCreationTime (string path, DateTime creationTime);
    parameters:
    - id: path
      type: System.String
      description: "The file for which to set the creation date and time information."
    - id: creationTime
      type: System.DateTime
      description: "A <xref:System.DateTime> containing the value to set for the creation date and time of `path`. This value is expressed in local time."
  overload: System.IO.File.SetCreationTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while performing the operation."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code> specifies a value outside the range of dates, times, or both permitted for this operation."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: File.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.File.SetCreationTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time, in coordinated universal time (UTC), that the file was created."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "The file for which to set the creation date and time information."
    - id: creationTimeUtc
      type: System.DateTime
      description: "A <xref:System.DateTime> containing the value to set for the creation date and time of `path`. This value is expressed in UTC time."
  overload: System.IO.File.SetCreationTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while performing the operation."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code> specifies a value outside the range of dates, times, or both permitted for this operation."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  platform:
  - net462
- uid: System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastAccessTime(String,DateTime)
  nameWithType: File.SetLastAccessTime(String,DateTime)
  fullName: System.IO.File.SetLastAccessTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time the specified file was last accessed."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example checks the file system for the specified file, creating it if necessary, and then sets and gets the last access time.  \n  \n [!code-cpp[file setlastaccess#1](~/add/codesnippet/cpp/m-system.io.file.setlast_0_1.cpp)]\n [!code-vb[file setlastaccess#1](~/add/codesnippet/visualbasic/m-system.io.file.setlast_0_1.vb)]\n [!code-cs[file setlastaccess#1](~/add/codesnippet/csharp/m-system.io.file.setlast_0_1.cs)]"
  syntax:
    content: public static void SetLastAccessTime (string path, DateTime lastAccessTime);
    parameters:
    - id: path
      type: System.String
      description: "The file for which to set the access date and time information."
    - id: lastAccessTime
      type: System.DateTime
      description: "A <xref:System.DateTime> containing the value to set for the last access date and time of `path`. This value is expressed in local time."
  overload: System.IO.File.SetLastAccessTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTime</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: File.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastAccessTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "The file for which to set the access date and time information."
    - id: lastAccessTimeUtc
      type: System.DateTime
      description: "A <xref:System.DateTime> containing the value to set for the last access date and time of `path`. This value is expressed in UTC time."
  overload: System.IO.File.SetLastAccessTimeUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastWriteTime(String,DateTime)
  nameWithType: File.SetLastWriteTime(String,DateTime)
  fullName: System.IO.File.SetLastWriteTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time that the specified file was last written to."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example checks the file system for the specified file, creating the file if necessary, and then sets and gets the last write time of the file.  \n  \n [!code-cs[file setlastwrite#1](~/add/codesnippet/csharp/m-system.io.file.setlast_1_1.cs)]\n [!code-vb[file setlastwrite#1](~/add/codesnippet/visualbasic/m-system.io.file.setlast_1_1.vb)]\n [!code-cpp[file setlastwrite#1](~/add/codesnippet/cpp/m-system.io.file.setlast_1_1.cpp)]"
  syntax:
    content: public static void SetLastWriteTime (string path, DateTime lastWriteTime);
    parameters:
    - id: path
      type: System.String
      description: "The file for which to set the date and time information."
    - id: lastWriteTime
      type: System.DateTime
      description: "A <xref:System.DateTime> containing the value to set for the last write date and time of `path`. This value is expressed in local time."
  overload: System.IO.File.SetLastWriteTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTime</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: File.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastWriteTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "The file for which to set the date and time information."
    - id: lastWriteTimeUtc
      type: System.DateTime
      description: "A <xref:System.DateTime> containing the value to set for the last write date and time of `path`. This value is expressed in UTC time."
  overload: System.IO.File.SetLastWriteTimeUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.File.WriteAllBytes(System.String,System.Byte[])
  id: WriteAllBytes(System.String,System.Byte[])
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllBytes(String,Byte[])
  nameWithType: File.WriteAllBytes(String,Byte[])
  fullName: System.IO.File.WriteAllBytes(String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten."
  remarks: "Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file."
  syntax:
    content: public static void WriteAllBytes (string path, byte[] bytes);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: bytes
      type: System.Byte[]
      description: "The bytes to write to the file."
  overload: System.IO.File.WriteAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or the byte array is empty."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,IEnumerable<String>)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file, writes a collection of strings to the file, and then closes the file."
  remarks: "The default behavior of the WriteAllLines method is to write out data by using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29> method overload with <xref:System.Text.Encoding.UTF8%2A> encoding.       If the target file already exists, it is overwritten.       You can use this method to create the contents for a collection class that takes an <xref:System.Collections.Generic.IEnumerable%601> in its constructor, such as a <xref:System.Collections.Generic.List%601.%23ctor%2A>, <xref:System.Collections.Generic.HashSet%601.%23ctor%2A>, or a <xref:System.Collections.Generic.SortedSet%601.%23ctor%2A> class."
  example:
  - "The following example writes selected lines from a sample data file to a file.  \n  \n [!code-cs[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/csharp/f09e9593-445c-47ad-bb1b-_1.cs)]\n [!code-vb[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/visualbasic/f09e9593-445c-47ad-bb1b-_1.vb)]"
  syntax:
    content: public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable<string> contents);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "The lines to write to the file."
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path </code>or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> is a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.String[])
  id: WriteAllLines(System.String,System.String[])
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,String[])
  nameWithType: File.WriteAllLines(String,String[])
  fullName: System.IO.File.WriteAllLines(String,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file, write the specified string array to the file, and then closes the file."
  remarks: "If the target file already exists, it is overwritten.  \n  \n The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the [WriteAllLines(String, String\\[\\], Encoding)](assetId:///M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)?qualifyHint=False&autoUpgrade=False) method overload with <xref:System.Text.Encoding.UTF8%2A> encoding.  \n  \n Given a string array and a file path, this method opens the specified file, writes the string array to the file, and then closes the file."
  example:
  - "The following code example demonstrates the use of the WriteAllLines method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines#00](~/add/codesnippet/visualbasic/m-system.io.file.writeal_1_1.vb)]\n [!code-cs[System.IO.File.AllLines#00](~/add/codesnippet/csharp/m-system.io.file.writeal_1_1.cs)]"
  syntax:
    content: public static void WriteAllLines (string path, string[] contents);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: contents
      type: System.String[]
      description: "The string array to write to the file."
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either <code>path</code> or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file."
  remarks: "If the target file already exists, it is overwritten.       You can use this method to create a file that contains the following:      -   The results of a [LINQ to Objects](~/add/includes/ajax-current-ext-md.md) query on the lines of a file, as obtained by using the <xref:System.IO.File.ReadLines%2A> method.      -   The contents of a collection that implements an <xref:System.Collections.Generic.IEnumerable%601> of strings."
  syntax:
    content: public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "The lines to write to the file."
    - id: encoding
      type: System.Text.Encoding
      description: "The character encoding to use."
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path</code>,<code> contents</code>, or <code>encoding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specifies a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> is a directory.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  id: WriteAllLines(System.String,System.String[],System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,String[],Encoding)
  nameWithType: File.WriteAllLines(String,String[],Encoding)
  fullName: System.IO.File.WriteAllLines(String,String[],Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file."
  remarks: "If the target file already exists, it is overwritten.       Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding, and then closes the file."
  example:
  - "The following code example demonstrates the use of the WriteAllLines method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/visualbasic/3d8070ff-3246-4c2d-a728-_1.vb)]\n [!code-cs[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/csharp/3d8070ff-3246-4c2d-a728-_1.cs)]"
  syntax:
    content: public static void WriteAllLines (string path, string[] contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: contents
      type: System.String[]
      description: "The string array to write to the file."
    - id: encoding
      type: System.Text.Encoding
      description: "An <xref:System.Text.Encoding> object that represents the character encoding applied to the string array."
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either <code>path</code> or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.WriteAllText(System.String,System.String)
  id: WriteAllText(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllText(String,String)
  nameWithType: File.WriteAllText(String,String)
  fullName: System.IO.File.WriteAllText(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten."
  remarks: "This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <xref:System.Text.Encoding.GetPreamble%2A> method will return an empty byte array. If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <xref:System.IO.File.WriteAllText%28System.String%2CSystem.String%2CSystem.Text.Encoding%29> method overload with <xref:System.Text.Encoding.UTF8%2A> encoding.       Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file."
  example:
  - "The following code example demonstrates the use of the WriteAllText method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllText#00](~/add/codesnippet/visualbasic/m-system.io.file.writeal_0_1.vb)]\n [!code-cs[System.IO.File.AllText#00](~/add/codesnippet/csharp/m-system.io.file.writeal_0_1.cs)]"
  syntax:
    content: public static void WriteAllText (string path, string contents);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: contents
      type: System.String
      description: "The string to write to the file."
  overload: System.IO.File.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <code>contents</code> is empty."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  id: WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllText(String,String,Encoding)
  nameWithType: File.WriteAllText(String,String,Encoding)
  fullName: System.IO.File.WriteAllText(String,String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten."
  remarks: "Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised."
  example:
  - "The following code example demonstrates the use of the WriteAllText method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-cs[System.IO.File.AllText_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.writeal_2_1.cs)]\n [!code-vb[System.IO.File.AllText_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.writeal_2_1.vb)]"
  syntax:
    content: public static void WriteAllText (string path, string contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The file to write to."
    - id: contents
      type: System.String
      description: "The string to write to the file."
    - id: encoding
      type: System.Text.Encoding
      description: "The encoding to apply to the string."
  overload: System.IO.File.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <code>contents</code> is empty."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code> specified a file that is read-only.       -or-       This operation is not supported on the current platform.       -or-       <code>path</code> specified a directory.       -or-       The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.DriveNotFoundException
  parent: System.IO
  isExternal: false
  name: DriveNotFoundException
  nameWithType: DriveNotFoundException
  fullName: System.IO.DriveNotFoundException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Runtime.InteropServices.SEHException
  isExternal: true
  name: System.Runtime.InteropServices.SEHException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  isExternal: false
  name: AppendAllLines(String,IEnumerable<String>)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: AppendAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.File.AppendAllText(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: AppendAllText(String,String)
  nameWithType: File.AppendAllText(String,String)
  fullName: System.IO.File.AppendAllText(String,String)
- uid: System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: AppendAllText(String,String,Encoding)
  nameWithType: File.AppendAllText(String,String,Encoding)
  fullName: System.IO.File.AppendAllText(String,String,Encoding)
- uid: System.IO.File.AppendText(System.String)
  parent: System.IO.File
  isExternal: false
  name: AppendText(String)
  nameWithType: File.AppendText(String)
  fullName: System.IO.File.AppendText(String)
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: true
  name: StreamWriter
  nameWithType: StreamWriter
  fullName: System.IO.StreamWriter
- uid: System.IO.File.Copy(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: Copy(String,String)
  nameWithType: File.Copy(String,String)
  fullName: System.IO.File.Copy(String,String)
- uid: System.IO.File.Copy(System.String,System.String,System.Boolean)
  parent: System.IO.File
  isExternal: false
  name: Copy(String,String,Boolean)
  nameWithType: File.Copy(String,String,Boolean)
  fullName: System.IO.File.Copy(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.File.Create(System.String)
  parent: System.IO.File
  isExternal: false
  name: Create(String)
  nameWithType: File.Create(String)
  fullName: System.IO.File.Create(String)
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: System.IO.File.Create(System.String,System.Int32)
  parent: System.IO.File
  isExternal: false
  name: Create(String,Int32)
  nameWithType: File.Create(String,Int32)
  fullName: System.IO.File.Create(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  parent: System.IO.File
  isExternal: false
  name: Create(String,Int32,FileOptions)
  nameWithType: File.Create(String,Int32,FileOptions)
  fullName: System.IO.File.Create(String,Int32,FileOptions)
- uid: System.IO.FileOptions
  parent: System.IO
  isExternal: false
  name: FileOptions
  nameWithType: FileOptions
  fullName: System.IO.FileOptions
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  isExternal: false
  name: Create(String,Int32,FileOptions,FileSecurity)
  nameWithType: File.Create(String,Int32,FileOptions,FileSecurity)
  fullName: System.IO.File.Create(String,Int32,FileOptions,FileSecurity)
- uid: System.Security.AccessControl.FileSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSecurity
  nameWithType: FileSecurity
  fullName: System.Security.AccessControl.FileSecurity
- uid: System.IO.File.CreateText(System.String)
  parent: System.IO.File
  isExternal: false
  name: CreateText(String)
  nameWithType: File.CreateText(String)
  fullName: System.IO.File.CreateText(String)
- uid: System.IO.File.Decrypt(System.String)
  parent: System.IO.File
  isExternal: false
  name: Decrypt(String)
  nameWithType: File.Decrypt(String)
  fullName: System.IO.File.Decrypt(String)
- uid: System.IO.File.Delete(System.String)
  parent: System.IO.File
  isExternal: false
  name: Delete(String)
  nameWithType: File.Delete(String)
  fullName: System.IO.File.Delete(String)
- uid: System.IO.File.Encrypt(System.String)
  parent: System.IO.File
  isExternal: false
  name: Encrypt(String)
  nameWithType: File.Encrypt(String)
  fullName: System.IO.File.Encrypt(String)
- uid: System.IO.File.Exists(System.String)
  parent: System.IO.File
  isExternal: false
  name: Exists(String)
  nameWithType: File.Exists(String)
  fullName: System.IO.File.Exists(String)
- uid: System.IO.File.GetAccessControl(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetAccessControl(String)
  nameWithType: File.GetAccessControl(String)
  fullName: System.IO.File.GetAccessControl(String)
- uid: System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.File
  isExternal: false
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: File.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.File.GetAccessControl(String,AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.File.GetAttributes(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetAttributes(String)
  nameWithType: File.GetAttributes(String)
  fullName: System.IO.File.GetAttributes(String)
- uid: System.IO.FileAttributes
  parent: System.IO
  isExternal: false
  name: FileAttributes
  nameWithType: FileAttributes
  fullName: System.IO.FileAttributes
- uid: System.IO.File.GetCreationTime(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetCreationTime(String)
  nameWithType: File.GetCreationTime(String)
  fullName: System.IO.File.GetCreationTime(String)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.File.GetCreationTimeUtc(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetCreationTimeUtc(String)
  nameWithType: File.GetCreationTimeUtc(String)
  fullName: System.IO.File.GetCreationTimeUtc(String)
- uid: System.IO.File.GetLastAccessTime(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTime(String)
  nameWithType: File.GetLastAccessTime(String)
  fullName: System.IO.File.GetLastAccessTime(String)
- uid: System.IO.File.GetLastAccessTimeUtc(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTimeUtc(String)
  nameWithType: File.GetLastAccessTimeUtc(String)
  fullName: System.IO.File.GetLastAccessTimeUtc(String)
- uid: System.IO.File.GetLastWriteTime(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTime(String)
  nameWithType: File.GetLastWriteTime(String)
  fullName: System.IO.File.GetLastWriteTime(String)
- uid: System.IO.File.GetLastWriteTimeUtc(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTimeUtc(String)
  nameWithType: File.GetLastWriteTimeUtc(String)
  fullName: System.IO.File.GetLastWriteTimeUtc(String)
- uid: System.IO.File.Move(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: Move(String,String)
  nameWithType: File.Move(String,String)
  fullName: System.IO.File.Move(String,String)
- uid: System.IO.File.Open(System.String,System.IO.FileMode)
  parent: System.IO.File
  isExternal: false
  name: Open(String,FileMode)
  nameWithType: File.Open(String,FileMode)
  fullName: System.IO.File.Open(String,FileMode)
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.File
  isExternal: false
  name: Open(String,FileMode,FileAccess)
  nameWithType: File.Open(String,FileMode,FileAccess)
  fullName: System.IO.File.Open(String,FileMode,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.File
  isExternal: false
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: File.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.File.Open(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.File.OpenRead(System.String)
  parent: System.IO.File
  isExternal: false
  name: OpenRead(String)
  nameWithType: File.OpenRead(String)
  fullName: System.IO.File.OpenRead(String)
- uid: System.IO.File.OpenText(System.String)
  parent: System.IO.File
  isExternal: false
  name: OpenText(String)
  nameWithType: File.OpenText(String)
  fullName: System.IO.File.OpenText(String)
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: true
  name: StreamReader
  nameWithType: StreamReader
  fullName: System.IO.StreamReader
- uid: System.IO.File.OpenWrite(System.String)
  parent: System.IO.File
  isExternal: false
  name: OpenWrite(String)
  nameWithType: File.OpenWrite(String)
  fullName: System.IO.File.OpenWrite(String)
- uid: System.IO.File.ReadAllBytes(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadAllBytes(String)
  nameWithType: File.ReadAllBytes(String)
  fullName: System.IO.File.ReadAllBytes(String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.File.ReadAllLines(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadAllLines(String)
  nameWithType: File.ReadAllLines(String)
  fullName: System.IO.File.ReadAllLines(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: ReadAllLines(String,Encoding)
  nameWithType: File.ReadAllLines(String,Encoding)
  fullName: System.IO.File.ReadAllLines(String,Encoding)
- uid: System.IO.File.ReadAllText(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadAllText(String)
  nameWithType: File.ReadAllText(String)
  fullName: System.IO.File.ReadAllText(String)
- uid: System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: ReadAllText(String,Encoding)
  nameWithType: File.ReadAllText(String,Encoding)
  fullName: System.IO.File.ReadAllText(String,Encoding)
- uid: System.IO.File.ReadLines(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadLines(String)
  nameWithType: File.ReadLines(String)
  fullName: System.IO.File.ReadLines(String)
- uid: System.IO.File.ReadLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: ReadLines(String,Encoding)
  nameWithType: File.ReadLines(String,Encoding)
  fullName: System.IO.File.ReadLines(String,Encoding)
- uid: System.IO.File.Replace(System.String,System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: Replace(String,String,String)
  nameWithType: File.Replace(String,String,String)
  fullName: System.IO.File.Replace(String,String,String)
- uid: System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)
  parent: System.IO.File
  isExternal: false
  name: Replace(String,String,String,Boolean)
  nameWithType: File.Replace(String,String,String,Boolean)
  fullName: System.IO.File.Replace(String,String,String,Boolean)
- uid: System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  isExternal: false
  name: SetAccessControl(String,FileSecurity)
  nameWithType: File.SetAccessControl(String,FileSecurity)
  fullName: System.IO.File.SetAccessControl(String,FileSecurity)
- uid: System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  parent: System.IO.File
  isExternal: false
  name: SetAttributes(String,FileAttributes)
  nameWithType: File.SetAttributes(String,FileAttributes)
  fullName: System.IO.File.SetAttributes(String,FileAttributes)
- uid: System.IO.File.SetCreationTime(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetCreationTime(String,DateTime)
  nameWithType: File.SetCreationTime(String,DateTime)
  fullName: System.IO.File.SetCreationTime(String,DateTime)
- uid: System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: File.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.File.SetCreationTimeUtc(String,DateTime)
- uid: System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTime(String,DateTime)
  nameWithType: File.SetLastAccessTime(String,DateTime)
  fullName: System.IO.File.SetLastAccessTime(String,DateTime)
- uid: System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: File.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastAccessTimeUtc(String,DateTime)
- uid: System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTime(String,DateTime)
  nameWithType: File.SetLastWriteTime(String,DateTime)
  fullName: System.IO.File.SetLastWriteTime(String,DateTime)
- uid: System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: File.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastWriteTimeUtc(String,DateTime)
- uid: System.IO.File.WriteAllBytes(System.String,System.Byte[])
  parent: System.IO.File
  isExternal: false
  name: WriteAllBytes(String,Byte[])
  nameWithType: File.WriteAllBytes(String,Byte[])
  fullName: System.IO.File.WriteAllBytes(String,Byte[])
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,IEnumerable<String>)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>)
- uid: System.IO.File.WriteAllLines(System.String,System.String[])
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,String[])
  nameWithType: File.WriteAllLines(String,String[])
  fullName: System.IO.File.WriteAllLines(String,String[])
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>,Encoding)
- uid: System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,String[],Encoding)
  nameWithType: File.WriteAllLines(String,String[],Encoding)
  fullName: System.IO.File.WriteAllLines(String,String[],Encoding)
- uid: System.IO.File.WriteAllText(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: WriteAllText(String,String)
  nameWithType: File.WriteAllText(String,String)
  fullName: System.IO.File.WriteAllText(String,String)
- uid: System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: WriteAllText(String,String,Encoding)
  nameWithType: File.WriteAllText(String,String,Encoding)
  fullName: System.IO.File.WriteAllText(String,String,Encoding)
- uid: System.IO.File.AppendAllLines*
  parent: System.IO.File
  isExternal: false
  name: AppendAllLines
  nameWithType: File.AppendAllLines
- uid: System.IO.File.AppendAllText*
  parent: System.IO.File
  isExternal: false
  name: AppendAllText
  nameWithType: File.AppendAllText
- uid: System.IO.File.AppendText*
  parent: System.IO.File
  isExternal: false
  name: AppendText
  nameWithType: File.AppendText
- uid: System.IO.File.Copy*
  parent: System.IO.File
  isExternal: false
  name: Copy
  nameWithType: File.Copy
- uid: System.IO.File.Create*
  parent: System.IO.File
  isExternal: false
  name: Create
  nameWithType: File.Create
- uid: System.IO.File.CreateText*
  parent: System.IO.File
  isExternal: false
  name: CreateText
  nameWithType: File.CreateText
- uid: System.IO.File.Decrypt*
  parent: System.IO.File
  isExternal: false
  name: Decrypt
  nameWithType: File.Decrypt
- uid: System.IO.File.Delete*
  parent: System.IO.File
  isExternal: false
  name: Delete
  nameWithType: File.Delete
- uid: System.IO.File.Encrypt*
  parent: System.IO.File
  isExternal: false
  name: Encrypt
  nameWithType: File.Encrypt
- uid: System.IO.File.Exists*
  parent: System.IO.File
  isExternal: false
  name: Exists
  nameWithType: File.Exists
- uid: System.IO.File.GetAccessControl*
  parent: System.IO.File
  isExternal: false
  name: GetAccessControl
  nameWithType: File.GetAccessControl
- uid: System.IO.File.GetAttributes*
  parent: System.IO.File
  isExternal: false
  name: GetAttributes
  nameWithType: File.GetAttributes
- uid: System.IO.File.GetCreationTime*
  parent: System.IO.File
  isExternal: false
  name: GetCreationTime
  nameWithType: File.GetCreationTime
- uid: System.IO.File.GetCreationTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: GetCreationTimeUtc
  nameWithType: File.GetCreationTimeUtc
- uid: System.IO.File.GetLastAccessTime*
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTime
  nameWithType: File.GetLastAccessTime
- uid: System.IO.File.GetLastAccessTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTimeUtc
  nameWithType: File.GetLastAccessTimeUtc
- uid: System.IO.File.GetLastWriteTime*
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTime
  nameWithType: File.GetLastWriteTime
- uid: System.IO.File.GetLastWriteTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTimeUtc
  nameWithType: File.GetLastWriteTimeUtc
- uid: System.IO.File.Move*
  parent: System.IO.File
  isExternal: false
  name: Move
  nameWithType: File.Move
- uid: System.IO.File.Open*
  parent: System.IO.File
  isExternal: false
  name: Open
  nameWithType: File.Open
- uid: System.IO.File.OpenRead*
  parent: System.IO.File
  isExternal: false
  name: OpenRead
  nameWithType: File.OpenRead
- uid: System.IO.File.OpenText*
  parent: System.IO.File
  isExternal: false
  name: OpenText
  nameWithType: File.OpenText
- uid: System.IO.File.OpenWrite*
  parent: System.IO.File
  isExternal: false
  name: OpenWrite
  nameWithType: File.OpenWrite
- uid: System.IO.File.ReadAllBytes*
  parent: System.IO.File
  isExternal: false
  name: ReadAllBytes
  nameWithType: File.ReadAllBytes
- uid: System.IO.File.ReadAllLines*
  parent: System.IO.File
  isExternal: false
  name: ReadAllLines
  nameWithType: File.ReadAllLines
- uid: System.IO.File.ReadAllText*
  parent: System.IO.File
  isExternal: false
  name: ReadAllText
  nameWithType: File.ReadAllText
- uid: System.IO.File.ReadLines*
  parent: System.IO.File
  isExternal: false
  name: ReadLines
  nameWithType: File.ReadLines
- uid: System.IO.File.Replace*
  parent: System.IO.File
  isExternal: false
  name: Replace
  nameWithType: File.Replace
- uid: System.IO.File.SetAccessControl*
  parent: System.IO.File
  isExternal: false
  name: SetAccessControl
  nameWithType: File.SetAccessControl
- uid: System.IO.File.SetAttributes*
  parent: System.IO.File
  isExternal: false
  name: SetAttributes
  nameWithType: File.SetAttributes
- uid: System.IO.File.SetCreationTime*
  parent: System.IO.File
  isExternal: false
  name: SetCreationTime
  nameWithType: File.SetCreationTime
- uid: System.IO.File.SetCreationTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: SetCreationTimeUtc
  nameWithType: File.SetCreationTimeUtc
- uid: System.IO.File.SetLastAccessTime*
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTime
  nameWithType: File.SetLastAccessTime
- uid: System.IO.File.SetLastAccessTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTimeUtc
  nameWithType: File.SetLastAccessTimeUtc
- uid: System.IO.File.SetLastWriteTime*
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTime
  nameWithType: File.SetLastWriteTime
- uid: System.IO.File.SetLastWriteTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTimeUtc
  nameWithType: File.SetLastWriteTimeUtc
- uid: System.IO.File.WriteAllBytes*
  parent: System.IO.File
  isExternal: false
  name: WriteAllBytes
  nameWithType: File.WriteAllBytes
- uid: System.IO.File.WriteAllLines*
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines
  nameWithType: File.WriteAllLines
- uid: System.IO.File.WriteAllText*
  parent: System.IO.File
  isExternal: false
  name: WriteAllText
  nameWithType: File.WriteAllText
