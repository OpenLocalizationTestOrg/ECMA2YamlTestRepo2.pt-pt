### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DES
  id: DES
  children:
  - System.Security.Cryptography.DES.#ctor
  - System.Security.Cryptography.DES.Create
  - System.Security.Cryptography.DES.Create(System.String)
  - System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.Key
  langs:
  - csharp
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
  type: Class
  summary: "Represents the base class for the Data Encryption Standard (DES) algorithm from which all DES implementations must derive."
  remarks: "This algorithm supports a key length of 64 bits.      > [!NOTE] >  A newer asymmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> class instead of the DES class. Use DES only for compatibility with legacy applications and data."
  example:
  - "The following code example uses <xref:System.Security.Cryptography.DESCryptoServiceProvider> (an implementation of DES) to encrypt a string to an in-memory buffer. It then decrypts and displays the round-tripped string.  \n  \n [!code-vb[TripleDESCryptoServiceProvider#1](~/add/codesnippet/visualbasic/t-system.security.crypto_29_1.vb)]\n [!code-cs[TripleDESCryptoServiceProvider#1](~/add/codesnippet/csharp/t-system.security.crypto_29_1.cs)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.DES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.DES&quot;></xref> class."
  remarks: "You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values shown in the following table.      |Field|Default Value|   |-----------|-------------------|   |<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|64|   |<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|   |<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|"
  syntax:
    content: protected DES ();
    parameters: []
  overload: System.Security.Cryptography.DES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create
  id: Create
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates an instance of a cryptographic object to perform the Data Encryption Standard (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) algorithm."
  remarks: "Creates an instance of the <xref:System.Security.Cryptography.DES> object that can be used for encrypting and decrypting data."
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-vb[Cryptography.DES.Create.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_1.vb)]\n [!code-cpp[Cryptography.DES.Create.File#1](~/add/codesnippet/cpp/m-system.security.crypto_69_1.cpp)]\n [!code-cs[Cryptography.DES.Create.File#1](~/add/codesnippet/csharp/m-system.security.crypto_69_1.cs)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Create.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_69_2.cs)]\n [!code-cpp[Cryptography.DES.Create.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_69_2.cpp)]\n [!code-vb[Cryptography.DES.Create.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DES
      description: "A cryptographic object."
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates an instance of a cryptographic object to perform the specified implementation of the Data Encryption Standard (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) algorithm."
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-cs[Cryptography.DES.Createstring.File#1](~/add/codesnippet/csharp/m-system.security.crypto_27_1.cs)]\n [!code-vb[Cryptography.DES.Createstring.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_1.vb)]\n [!code-cpp[Cryptography.DES.Createstring.File#1](~/add/codesnippet/cpp/m-system.security.crypto_27_1.cpp)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_27_2.cs)]\n [!code-cpp[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_27_2.cpp)]\n [!code-vb[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "The name of the specific implementation of <xref href=&quot;System.Security.Cryptography.DES&quot;></xref> to use."
    return:
      type: System.Security.Cryptography.DES
      description: "A cryptographic object."
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  id: IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Determines whether the specified key is semi-weak."
  remarks: "Semi-weak keys are pairs of keys that result in ciphers that are easy to break. If text is encrypted with a semi-weak key, encrypting the resulting cipher with the partner of that semi-weak key returns the original text. There are six known semi-weak key pairs for the Data Encryption Standard (<xref:System.Security.Cryptography.DES>) algorithm; this method checks for those semi-weak keys.       Attempting to set a semi-weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a semi-weak key will never be returned."
  syntax:
    content: public static bool IsSemiWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "The secret key to test for semi-weakness."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the key is semi-weak; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DES.IsSemiWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The size of the <code>rgbKey</code> parameter is not valid."
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Determines whether the specified key is weak."
  remarks: "Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. There are four known weak keys for the Data Encryption Standard (<xref:System.Security.Cryptography.DES>) algorithm; this method checks for those weak keys.       Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned."
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "The secret key to test for weakness."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the key is weak; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The size of the <code>rgbKey</code> parameter is not valid."
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Key
  id: Key
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets the secret key for the Data Encryption Standard (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) algorithm."
  remarks: "If this property is `null` when it is used, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> is called to create a new random value.       The length of the key must be equal to <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>.       This algorithm supports a key length of 64 bits."
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "The secret key for the <xref href=&quot;System.Security.Cryptography.DES&quot;></xref> algorithm."
  overload: System.Security.Cryptography.DES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "An attempt was made to set the key to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An attempt was made to set a key whose length is not equal to <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An attempt was made to set a weak key (see <xref:System.Security.Cryptography.DES.IsWeakKey*>) or a semi-weak key (see <xref:System.Security.Cryptography.DES.IsSemiWeakKey*>)."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.DES.#ctor
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
- uid: System.Security.Cryptography.DES.Create
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
- uid: System.Security.Cryptography.DES
  parent: System.Security.Cryptography
  isExternal: false
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
- uid: System.Security.Cryptography.DES.Create(System.String)
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
- uid: System.Security.Cryptography.DES.Key
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
- uid: System.Security.Cryptography.DES.#ctor*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES
  nameWithType: DES.DES
- uid: System.Security.Cryptography.DES.Create*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create
  nameWithType: DES.Create
- uid: System.Security.Cryptography.DES.IsSemiWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey
  nameWithType: DES.IsSemiWeakKey
- uid: System.Security.Cryptography.DES.IsWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey
  nameWithType: DES.IsWeakKey
- uid: System.Security.Cryptography.DES.Key*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
