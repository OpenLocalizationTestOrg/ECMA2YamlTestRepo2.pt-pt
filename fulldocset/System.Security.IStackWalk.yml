### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Gere o percurso da pilha que determina se os todos os chamadores na pilha de chamadas têm as permissões necessárias para aceder a um recurso protegido."
  remarks: "Código parcialmente fidedigno sempre apresenta um risco de segurança. Por vezes, pode ser manipulado para efetuar ações em nome de código malicioso que não tem permissão para aceder a um recurso. Desta forma, o código malicioso pode alcançar mais elevada de segurança de acesso que deve ter permissão.       O language runtime ajuda a proteger código gerido contra estes ataques executando um percurso da pilha em todas as chamadas. O percurso da pilha requer que todo o código na pilha de chamadas tem permissão para aceder a um recurso protegido. Porque o código de tentativa de ataque será sempre algures na pilha de chamadas, será possível exceder os seus próprios permissões de segurança."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Asserções-se de que o código de chamada pode aceder ao recurso identificado pelo objecto actual da permissão, mesmo se os chamadores superiores na pilha não tenham sido concedidos permissão para aceder ao recurso."
  remarks: "Chamar asserção interrompe a verificação da permissão nos chamadores superiores na pilha de chamadas. Por conseguinte, mesmo que estes chamadores não tiverem as permissões da, ainda podem aceder a recursos. Uma asserção é eficaz apenas se o código que chama a asserção passar a verificação de segurança para a permissão que é asserting.       Uma chamada para declarar tem efeita até que o código de chamada devolve ao respetivo autor da chamada ou até que uma chamada subsequente para declarar compõe a asserção anterior ineficaz. Além disso, <xref:System.Security.CodeAccessPermission.RevertAssert%2A>ou <xref:System.Security.CodeAccessPermission.RevertAll%2A>Remove uma asserção pendente.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Asserção é ignorada para uma permissão não concedida devido uma pedido para essa permissão não será concluída com êxito. No entanto, se inferior na pilha de chamadas chama <xref:System.Security.IStackWalk.Demand%2A>para essa permissão, uma <xref:System.Security.SecurityException>é acionada quando o percurso da pilha atinge o código que tentou chamar asserção.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Isto acontece porque o código que chamado asserção não foi concedido permissão, apesar de o tentar Assert-lo.      > [!CAUTION] > Porque chamar asserção remove o requisito de que todo o código na cadeia de chamada tem de ser concedido permissão para aceder ao recurso especificado, pode abrir vulnerabilidades de segurança se utilizado inadequada ou incorretamente. Por conseguinte, deve ser utilizada com cuidado excelente."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O código de chamada não tem <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina em tempo de execução se todos os chamadores na pilha de chamadas foi concedidos a permissão especificada pelo objeto atual a permissão."
  remarks: "Este método é normalmente utilizado pelo bibliotecas seguras para se certificar de que os chamadores tem permissão para aceder a um recurso. Por exemplo, uma classe de ficheiro numa biblioteca segura de classe chama a pedido para o necessário <xref:System.Security.Permissions.FileIOPermission>antes de efetuar uma operação de ficheiro solicitada pelo chamador.</xref:System.Security.Permissions.FileIOPermission>       As permissões de código que chama este método não são examinadas; a verificação começa do chamador imediato desse código e continua a pilha de cópia de segurança. Será efetuada com êxito a pedido apenas se não <xref:System.Security.SecurityException>é gerado.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Um chamador superior na pilha de chamadas não tem a permissão especificada pelo objeto atual a permissão.       - ou - foi chamado um emissor na pilha de chamadas <xref:System.Security.IStackWalk.Deny*>no objeto de permissão atual.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Faz com que cada <xref:System.Security.IStackWalk.Demand*>para o objeto atual que atravessa o código de chamada falhe.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Este método impede os chamadores superiores na pilha de chamadas de aceder ao recurso protegido através de código que chama este método, mesmo que esses chamadores tem permissão para aceder ao mesmo. A pilha de chamadas é normalmente representada como a crescer para baixo, para que os métodos superiores na pilha de chamadas chamar os métodos inferior na pilha de chamadas.       Negar pode limitar a responsabilidade do programador ou ajudar a evitar vulnerabilidades de segurança acidental porque ajuda a impedir que o método que chama a negação de que está a ser utilizado para aceder o recursos protegidos pela permissão negada. Se um método chama negar uma permissão e um <xref:System.Security.IStackWalk.Demand%2A>para essa permissão é invocada por um emissor inferior na pilha de chamadas, que essa verificação de segurança falhará quando atinge o negar.</xref:System.Security.IStackWalk.Demand%2A>       Negar são ignoradas para uma permissão não concedida devido uma pedido para essa permissão não será concluída com êxito."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Faz com que cada <xref:System.Security.IStackWalk.Demand*>para todos os objetos, exceto o atual que atravessa o código de chamada falhe, mesmo se superior na pilha de chamadas de código tem permissão para aceder a outros recursos.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly é semelhante à <xref:System.Security.IStackWalk.Deny%2A>, em que ambos fazer com que a pilha explica como falha quando que caso contrário, seriam concluída com êxito.</xref:System.Security.IStackWalk.Deny%2A> A diferença é que <xref:System.Security.IStackWalk.Deny%2A>Especifica as permissões que fará com que a pilha guiá-lo a falhar, mas PermitOnly Especifica as permissões de apenas não causam a falhar o percurso da pilha.</xref:System.Security.IStackWalk.Deny%2A> Chame este método para se certificar de que o seu código pode ser utilizado para aceder apenas os recursos especificados.       PermitOnly é ignorada para uma permissão não concedida devido uma pedido para essa permissão não será concluída com êxito. No entanto, se o código inferior na chamada da pilha mais tarde chamadas <xref:System.Security.IStackWalk.Demand%2A>para essa permissão, uma <xref:System.Security.SecurityException>é acionada quando o percurso da pilha atinge o código que tentou chamar PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Isto acontece porque o código que chamado PermitOnly não foi concedido permissão, apesar de chamou PermitOnly para essa permissão. A pilha de chamadas é normalmente representada como a crescer para baixo, para que os métodos superiores na pilha de chamadas chamar os métodos inferior na pilha de chamadas."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
