### YamlMime:ManagedReference
items:
- uid: System.Web.Security.AuthorizationStoreRoleProvider
  id: AuthorizationStoreRoleProvider
  children:
  - System.Web.Security.AuthorizationStoreRoleProvider.#ctor
  - System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  - System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  - System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles
  - System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  langs:
  - csharp
  name: AuthorizationStoreRoleProvider
  nameWithType: AuthorizationStoreRoleProvider
  fullName: System.Web.Security.AuthorizationStoreRoleProvider
  type: Class
  summary: "Manages storage of role-membership information for an ASP.NET application in an authorization-manager policy store, either in an XML file, in an Active Directory, or on an Active Directory Application Mode server."
  remarks: "This class is used by the <xref:System.Web.Security.Roles> and <xref:System.Web.Security.RolePrincipal> classes to provide role-management services for an ASP.NET application using an authorization-manager store. You can use role management to specify different levels of authorization for your application. The authorization manager can be accessed using the Microsoft Management Console.  \n  \n The AuthorizationStoreRoleProvider object works with both Windows authentication and forms authentication modes.  \n  \n You can configure the AuthorizationStoreRoleProvider object to use either a local XML file or an Active Directory or Active Directory Application Mode (ADAM) server. When using a local file, the connection string should look like the following example.  \n  \n```  \nmsxml://<path to xml file>  \n```  \n  \n If the local file is stored in the directory tree of an ASP.NET Web application, you can use the tilde (\"~\") character to indicate the root directory. For example, to indicate that the local file is stored in the Web application's data directory, you would use a connection string similar to the following example.  \n  \n `msxml://~\\App_Data\\datafilename.xml`  \n  \n> [!IMPORTANT]\n>  Storing an XML data file in the Web application directory is a potential security threat. By default, IIS will serve XML data files to the Web. To improve security when using a local data file in an ASP.NET application, you should store the data file in the `App_Data` directory. Files stored in the `App_Data` directory will not be served to the Web.  \n  \n If you are using an Active Directory or ADAM server for the policy store, your connection string should be similar to the following example.  \n  \n `msldap://myserver/CN=MyAzManStore,OU=MyOU,DC=MyDomain,DC=MyDC,DC=Com`  \n  \n The exceptions listed in the documentation for AuthorizationStoreRoleProvider object methods are the exceptions that are raised by the AuthorizationStoreRoleProvider object. Since the provider relies on the underlying Authentication Manager runtime, a <xref:System.Runtime.InteropServices.COMException> exception may be thrown whenever the AuthorizationStoreRoleProvider object forwards a method call to the Authentication Manager runtime.  \n  \n> [!IMPORTANT]\n>  The AuthorizationStoreRoleProvider object has the following requirements for running in partial-trust environments:  \n>   \n>  When using a file-based policy store in an ASP.NET application, the file I/O permissions granted by the current trust level determine whether read and write actions are allowed by the provider. The ASP.NET application must have read permission on the file to read data from the policy store, and must have write permission to save new information or update existing information in the policy store. The default Medium-trust policy file gives an ASP.NET application read/write permissions in its application directory. The default Low-trust policy file only gives an ASP.NET application read permission in its application directory. In addition, the process identity under which the ASP.NET application runs must have file-system permissions to read and/or write the policy file.  \n>   \n>  When using an Active Directory or ADAM server, the ASP.NET application needs unmanaged-code permission because the internal AuthorizationStoreRoleProvider object code uses COM interop.  \n>   \n>  When using the AuthorizationStoreRoleProvider object outside of ASP.NET, the calling code needs unmanaged-code permission."
  example:
  - "The following code example shows a Web.config file set to use the AuthorizationStoreRoleProvider for role management.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"AuthorizationServices\" connectionString=\"msxml://~\\App_Data\\SampleStore.xml\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n  \n    <authentication mode=\"Windows\" />  \n    <identity impersonate=\"true\" />  \n  \n    <roleManager defaultProvider=\"AuthorizationStoreRoleProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"false\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n      <providers>  \n        <clear />  \n          <add  \n            name=\"AuthorizationStoreRoleProvider\"  \n            type=\"System.Web.Security.AuthorizationStoreRoleProvider\"  \n            connectionStringName=\"AuthorizationServices\"  \n            applicationName=\"SampleApplication\"   \n            cacheRefreshInterval=\"60\"  \n            scopeName=\"\" />  \n      </providers>  \n    </roleManager>  \n  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: 'public class AuthorizationStoreRoleProvider : System.Web.Security.RoleProvider'
  inheritance:
  - System.Web.Security.RoleProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.#ctor
  id: '#ctor'
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: AuthorizationStoreRoleProvider()
  nameWithType: AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> class."
  remarks: "The AuthorizationStoreRoleProvider constructor is called by ASP.NET to create an instance of the <xref:System.Web.Security.AuthorizationStoreRoleProvider> class as specified in the configuration for the application. This constructor is not intended to be used from your code."
  syntax:
    content: public AuthorizationStoreRoleProvider ();
    parameters: []
  overload: System.Web.Security.AuthorizationStoreRoleProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adds the specified user names to each of the specified roles."
  remarks: "The AddUsersToRoles method is called by the <xref:System.Web.Security.Roles> class to associate one or more users with one or more roles in the authorization-manager data store specified in the ASP.NET application&quot;s configuration file (Web.config). This method is called by the <xref:System.Web.Security.Roles.AddUserToRole%2A?displayProperty=fullName>, <xref:System.Web.Security.Roles.AddUserToRoles%2A?displayProperty=fullName>, <xref:System.Web.Security.Roles.AddUsersToRole%2A?displayProperty=fullName>, and <xref:System.Web.Security.Roles.AddUsersToRoles%2A?displayProperty=fullName> methods of the <xref:System.Web.Security.Roles> class."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/51528ad0-2535-416a-b69f-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/51528ad0-2535-416a-b69f-_1.aspx)]"
  syntax:
    content: public override void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "A string array of user names to be added to the specified roles."
    - id: roleNames
      type: System.String[]
      description: "A string array of role names to add the specified user names to."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the specified user names is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the specified role names is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "One of the specified user names is an empty string or contains a comma (,).       -or-       One of the specified role names is an empty string or contains a comma (,).       -or-       <code>usernames</code> contains a duplicate element.       -or-       <code>roleNames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: AuthorizationStoreRoleProvider.ApplicationName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets or sets the name of the authorization store application for which to store and retrieve role information."
  remarks: "The ApplicationName is used by the <xref:System.Web.Security.AuthorizationStoreRoleProvider> to associate users and roles with different authorization-manager applications, which enables multiple ASP.NET applications to use the same authorization-manager policy store to store role information without running into conflicts between duplicate role names. Alternatively, multiple ASP.NET applications can use the same policy store by specifying the same value in the ApplicationName property. The ApplicationName property can be set programmatically, or it can be set declaratively in the application&quot;s Web.config file by using the `applicationName` attribute.       If a value is not specified for the `applicationName` attribute in the Web.config file, then the <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> property value for the current <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> object is used.      > [!NOTE] >  Authorization-manager application names cannot contain the &quot;/&quot; character that is included in the <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> property. As a result, the default value for the ApplicationName property cannot be used as an authorization-manager application name, and in the application&quot;s Web.config file, you must always specify an `applicationName` attribute in the `provider` element to configure your <xref:System.Web.Security.AuthorizationStoreRoleProvider> instance.      > [!CAUTION] >  Because a single default role provider instance is used for all of the requests served by an <xref:System.Web.HttpApplication> object, you can have multiple requests executing concurrently and attempting to set the ApplicationName property value. The ApplicationName property is not thread safe for multiple writes, and changing the ApplicationName property value can result in unexpected behavior when there are multiple users of an application. We recommend that you avoid writing code that allows users to set the ApplicationName property unless you must. An example of an application where setting the ApplicationName property may be required is an administrative application that manages role data for multiple applications. Such an application should be a single-user application and not a Web application."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies the application's <xref:System.Web.Security.AuthorizationStoreRoleProvider> instance and sets the ApplicationName property to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"AuthorizationStoreProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.AuthorizationStoreRoleProvider\"  \n      connectionStringName=\"AuthorizationStoreServices\"   \n      scopeName=\"MyScope\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "The name of the authorization store application for which to store and retrieve role information. The default is the &lt;xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName&gt; property value for the current &lt;xref:System.Web.HttpContext.Request%2A?displayProperty=fullName&gt;."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "An attempt was made to set the ApplicationName to a string that is longer than 256 characters."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  id: CacheRefreshInterval
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: CacheRefreshInterval
  nameWithType: AuthorizationStoreRoleProvider.CacheRefreshInterval
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the number of minutes between refreshes of the cache of the policy-store data."
  syntax:
    content: public int CacheRefreshInterval { get; }
    return:
      type: System.Int32
      description: "The number of minutes between refreshes of cached policy-store data. The default is 60."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: AuthorizationStoreRoleProvider.CreateRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adds a new role to the role authorization-manager policy store."
  remarks: "The CreateRole method is called by the <xref:System.Web.Security.Roles> class to create a role in the authorization-manager data store specified in the ASP.NET application&quot;s configuration file (Web.config).       Role names are not case sensitive."
  example:
  - "The following code example creates a new role in the authorization-manager policy store. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.au_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.au_0_1.aspx)]"
  syntax:
    content: public override void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "The name of the role to create."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string.       -or-       <code>roleName</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Removes a role from the authorization-manager policy store."
  remarks: "The DeleteRole method is called by the <xref:System.Web.Security.Roles> class to delete a role from the authorization-manager policy store specified in the ASP.NET application&quot;s configuration file (Web.config). When a role is deleted, the list of users associated with that role is also deleted from the policy store. The user information in the database is not affected.       If `throwOnPopulatedRole` is `true`, then an exception will be thrown and the role will not be deleted if the role identified by the `roleName` parameter has one or more members. If `throwOnPopulatedRole` is `false`, then the role will be deleted whether it is empty or not."
  example:
  - "The following example deletes a role from the authorization-manager policy store. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/f8238a62-ae02-4a3c-85f0-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/f8238a62-ae02-4a3c-85f0-_1.aspx)]"
  syntax:
    content: public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "The name of the role to delete."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, throws an exception if `roleName` has one or more members."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the role was deleted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string.       -or-       <code>roleName</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code> has one or more members and <code>throwOnPopulatedRole</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.       -or-       The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "This method is not supported by the authorization store role provider."
  syntax:
    content: public override string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "The role to search in."
    - id: usernameToMatch
      type: System.String
      description: "The user name to search for."
    return:
      type: System.String[]
      description: "A string array containing the names of all the users whose user name matches <code>usernameToMatch</code> and who are members of the specified role."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "An unsupported method was called."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: AuthorizationStoreRoleProvider.GetAllRoles()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a list of all the roles for the application."
  remarks: "The GetAllRoles method is called by the <xref:System.Web.Security.Roles> class to retrieve a list of all the roles in the authorization-manager policy store specified in the ASP.NET application&quot;s configuration file (Web.config)."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetAllRoles%2A> method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.au_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.au_2_1.aspx)]"
  syntax:
    content: public override string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "A string array containing the names of all the roles stored in the authorization-manager policy store for a particular application."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: AuthorizationStoreRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a list of the roles that a user is in."
  remarks: "The GetRolesForUser method is called by the <xref:System.Web.Security.Roles> class to retrieve a list of a specified user&quot;s roles from the authorization-manager policy store specified in the ASP.NET application&quot;s configuration file (Web.config)."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and binds them to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/540a45cf-e182-4a47-b288-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/540a45cf-e182-4a47-b288-_1.aspx)]"
  syntax:
    content: public override string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "The user to return a list of roles for."
    return:
      type: System.String[]
      description: "A string array containing the names of all the roles that the specified user is in."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: AuthorizationStoreRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a list of users in the specified role."
  remarks: "The GetUsersInRole method is called by the <xref:System.Web.Security.Roles> class to retrieve the list of users associated with the specified role in the authorization-manager policy store specified in the ASP.NET application&quot;s configuration file (Web.config).       The GetUsersInRole method only returns user names that are directly contained in the authorization-manager role specified by the `roleName` parameter. The underlying authorization-manager API called by the GetUsersInRole method does not support group expansion, so users contained in nested NT groups, nested authorization-manager groups, and LDAP query groups will not be returned."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetUsersInRole%2A> method to get a list of the users in a particular role and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/ebc3a7d6-e0bc-48f6-bf0f-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/ebc3a7d6-e0bc-48f6-bf0f-_1.aspx)]"
  syntax:
    content: public override string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "The name of the role to get the list of users for."
    return:
      type: System.String[]
      description: "A string array containing the names of all the users who are members of the specified role."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string.       -or-       <code>roleName</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Initializes the authorization-manager role provider with the property values specified in the ASP.NET application&quot;s configuration file. This method is not intended to be used directly from your code."
  remarks: "The Initialize method initializes the <xref:System.Web.Security.AuthorizationStoreRoleProvider> with the property values specified in the ASP.NET application configuration file (Web.config) and is not intended to be used directly from your code."
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "The name of the <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance to initialize."
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;></xref> that contains the names and values of configuration options for the role provider."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>config</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute is empty or does not exist in the [connectionStrings Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/b6ffbb2e-a4d1-410e-8f7e-9755e92c65de) configuration section.       -or-       The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> is longer than 256 characters.       -or-       The configuration for this <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance contains an unrecognized attribute."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The ASP.NET application is not running at <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;></xref> trust or higher."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value indicating whether the specified user is in the specified role."
  remarks: "The IsUserInRole method is called by the <xref:System.Web.Security.Roles> class and the <xref:System.Security.Principal.IPrincipal.IsInRole%2A> method of the <xref:System.Web.UI.Page.User%2A?displayProperty=fullName> property to determine whether a user is associated with a role in the authorization-manager data store specified in the ASP.NET application&quot;s configuration file (Web.config)."
  example:
  - "The following code example programmatically checks to see whether the logged-on user is in the Administrators role before allowing the user to view user roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/90a9fe0c-acb8-442c-9ca1-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/90a9fe0c-acb8-442c-9ca1-_1.aspx)]"
  syntax:
    content: public override bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "The user name to search for."
    - id: roleName
      type: System.String
      description: "The role to search in."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified user name is in the specified role; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or       <code>roleName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string.       -or-       <code>roleName</code> contains a comma.       -or-       <code>username</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Removes the specified user names from the specified roles."
  remarks: "The RemoveUsersFromRoles method is called by the <xref:System.Web.Security.Roles> class to remove one or more users from one or more roles in the authorization-manager policy store specified in the ASP.NET application&quot;s configuration file (Web.config). This method is called by the <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>, <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>, <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>, and <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> methods of the <xref:System.Web.Security.Roles> class."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/a89492ce-ed56-4c62-adf2-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/a89492ce-ed56-4c62-adf2-_1.aspx)]"
  syntax:
    content: public override void RemoveUsersFromRoles (string[] userNames, string[] roleNames);
    parameters:
    - id: userNames
      type: System.String[]
      description: "A string array of user names to be removed from the specified roles."
    - id: roleNames
      type: System.String[]
      description: "A string array of role names to remove the specified user names from."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the specified user names is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the specified role names is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>userNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "One of the specified user names is an empty string or contains a comma.       -or-       One of the specified role names is an empty string or contains a comma.       -or-       <code>userNames</code> contains a duplicate element.       -or-       <code>roleNames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: AuthorizationStoreRoleProvider.RoleExists(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value indicating whether the specified role name already exists in the authorization-manager policy store."
  remarks: "The RoleExists method is called by the <xref:System.Web.Security.Roles> class to determine whether a role name exists in the authorization-manager data store specified in the ASP.NET application&quot;s configuration file (Web.config)."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RoleExists%2A> method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.au_1_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.au_1_1.aspx)]"
  syntax:
    content: public override bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "The name of the role to search for in the authorization-manager policy store."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the role name already exists in the authorization-manager policy store; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string.       -or-       <code>roleName</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "The configured <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref> was not found.       -or-       The configured <xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref> was not found.       -or-       The authorization-manager runtime is not installed on the server."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The <xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;></xref> attribute references a connection string to a file that does not exist."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref> instance is configured with a file-based policy store, and read access to the file is not allowed at the current trust level."
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  id: ScopeName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: ScopeName
  nameWithType: AuthorizationStoreRoleProvider.ScopeName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets or sets the scope name for the authorization store."
  remarks: "The ScopeName property can be set using the `scopeName` configuration attribute for the provider instance in the `providers` section of the  configuration section.      > [!CAUTION] >  Because a single default role provider instance is used for all of the requests served by an <xref:System.Web.HttpApplication> object, you can have multiple requests executing concurrently and attempting to set the ScopeName property value. The ScopeName property is not thread safe for multiple writes, and changing the ScopeName property value can result in unexpected behavior when there are multiple users of an application. We recommend that you avoid writing code that allows users to set the ScopeName property unless you must. An example of an application where setting the ScopeName property may be required is an administrative application that manages role data for multiple applications. Such an application should be a single-user application and not a Web application."
  syntax:
    content: public string ScopeName { get; set; }
    return:
      type: System.String
      description: "The scope name for the authorization store."
  overload: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Security.RoleProvider
  isExternal: false
  name: System.Web.Security.RoleProvider
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.Web.Security.AuthorizationStoreRoleProvider.#ctor
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AuthorizationStoreRoleProvider()
  nameWithType: AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
- uid: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: AuthorizationStoreRoleProvider.ApplicationName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CacheRefreshInterval
  nameWithType: AuthorizationStoreRoleProvider.CacheRefreshInterval
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CreateRole(String)
  nameWithType: AuthorizationStoreRoleProvider.CreateRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetAllRoles()
  nameWithType: AuthorizationStoreRoleProvider.GetAllRoles()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles()
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: AuthorizationStoreRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: AuthorizationStoreRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(String,String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RoleExists(String)
  nameWithType: AuthorizationStoreRoleProvider.RoleExists(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ScopeName
  nameWithType: AuthorizationStoreRoleProvider.ScopeName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
- uid: System.Web.Security.AuthorizationStoreRoleProvider.#ctor*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AuthorizationStoreRoleProvider
  nameWithType: AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider
- uid: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AddUsersToRoles
  nameWithType: AuthorizationStoreRoleProvider.AddUsersToRoles
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: AuthorizationStoreRoleProvider.ApplicationName
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CacheRefreshInterval
  nameWithType: AuthorizationStoreRoleProvider.CacheRefreshInterval
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CreateRole
  nameWithType: AuthorizationStoreRoleProvider.CreateRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: DeleteRole
  nameWithType: AuthorizationStoreRoleProvider.DeleteRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: FindUsersInRole
  nameWithType: AuthorizationStoreRoleProvider.FindUsersInRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetAllRoles
  nameWithType: AuthorizationStoreRoleProvider.GetAllRoles
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetRolesForUser
  nameWithType: AuthorizationStoreRoleProvider.GetRolesForUser
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetUsersInRole
  nameWithType: AuthorizationStoreRoleProvider.GetUsersInRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.Initialize*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: Initialize
  nameWithType: AuthorizationStoreRoleProvider.Initialize
- uid: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: IsUserInRole
  nameWithType: AuthorizationStoreRoleProvider.IsUserInRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: AuthorizationStoreRoleProvider.RemoveUsersFromRoles
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RoleExists
  nameWithType: AuthorizationStoreRoleProvider.RoleExists
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ScopeName
  nameWithType: AuthorizationStoreRoleProvider.ScopeName
