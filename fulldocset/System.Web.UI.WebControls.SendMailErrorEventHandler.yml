### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SendMailErrorEventHandler
  id: SendMailErrorEventHandler
  langs:
  - csharp
  name: SendMailErrorEventHandler
  nameWithType: SendMailErrorEventHandler
  fullName: System.Web.UI.WebControls.SendMailErrorEventHandler
  type: Delegate
  summary: "Representa o método que processa o <xref uid=&quot;langword_csharp_SendMailError&quot; name=&quot;SendMailError&quot; href=&quot;&quot;> </xref> eventos de controlos, tais como o <xref href=&quot;System.Web.UI.WebControls.ChangePassword&quot;> </xref> controlo, o <xref href=&quot;System.Web.UI.WebControls.CreateUserWizard&quot;> </xref> controlo e o <xref href=&quot;System.Web.UI.WebControls.PasswordRecovery&quot;> </xref> controlo."
  remarks: "Quando cria um delegado SendMailErrorEventHandler, identifique o método que irá processar o evento. Para associar o evento com o processador de eventos, adicione uma instância do delegado para o evento. O processador de eventos é denominado sempre que o evento ocorre, a menos que remove o delegado do evento. Para obter mais informações sobre o delegado de processador de eventos, consulte [processamento de eventos de servidor no ASP.NET Web Pages de formulários](~/add/includes/ajax-current-ext-md.md).       Processar o `SendMailError` eventos permite à aplicação Web continuar em execução, mesmo que ocorre uma exceção ao tentar enviar uma mensagem de correio eletrónico. Por exemplo, isto é útil se a exceção ocorre quando um utilizador está a funcionar através de um Assistente de vários passo. É preferível para iniciar o erro, apresentar uma mensagem informativo ao utilizador e permitir que o utilizador concluir o assistente, em vez de terminar a aplicação.       Se não criar um processador de eventos para o <xref:System.Web.UI.WebControls.ChangePassword.SendMailError>evento, ou se criar um processador de eventos, mas deixe o <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>propriedade definida como `false`, a aplicação Web irá interromper a execução se ocorrer um erro ao enviar uma mensagem de correio electrónico e ASP.NET apresentará uma mensagem de erro.</xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> </xref:System.Web.UI.WebControls.ChangePassword.SendMailError>       O <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A>método também permite que as classes derivadas processar o evento, em vez do SendMailErrorEventHandler.</xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> Este é a preferido técnica para processar o evento de uma classe que deriva de <xref:System.Web.UI.WebControls.ChangePassword>ou <xref:System.Web.UI.WebControls.CreateUserWizard>.</xref:System.Web.UI.WebControls.CreateUserWizard> </xref:System.Web.UI.WebControls.ChangePassword>       Para obter mais informações sobre como lidar com eventos, consulte [processamento de eventos de servidor no ASP.NET Web Pages de formulários](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md)."
  example:
  - "The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event named `SendMailError`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the `SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_1.aspx)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_2.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_2.cs)]"
  syntax:
    content: public delegate void SendMailErrorEventHandler(object sender, SendMailErrorEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
