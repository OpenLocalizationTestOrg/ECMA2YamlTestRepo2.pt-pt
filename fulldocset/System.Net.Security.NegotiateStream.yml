### YamlMime:ManagedReference
items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  name: NegotiateStream
  nameWithType: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  summary: "Fornece um fluxo que utiliza o protocolo de segurança Negociar para autenticar o cliente e, opcionalmente, o servidor, comunicação cliente-servidor."
  remarks: "Utilize a classe de NegotiateStream para autenticação e para ajudar a proteger informações transmitidas entre um cliente e um servidor. Utilizar NegotiateStream, pode fazer o seguinte.      -Envie credenciais do cliente para o servidor para representação ou delegação.      -Autenticação do pedido.      -Encriptar e/ou assinar dados antes de os transmitir.       A autenticação tem de ser executada antes de os transmitir informações. Os clientes pedem autenticação utilizando o síncrona <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>métodos, que bloquear até concluir a autenticação, ou o assíncrona <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>métodos, que não bloqueiam ao aguardar que a autenticação concluir.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servidores de pedem de autenticação utilizando o síncrona <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>ou assíncrona <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> O cliente e, opcionalmente, o servidor, é autenticado utilizando o protocolo de segurança negociar. Em sistemas Windows 95/98, o Windows NT LAN Manager (NTLM) é o protocolo utilizado para autenticação. Em outras plataformas Kerberos protocolo é utilizado para autenticação, se o cliente e o servidor suportam; caso contrário, é utilizado o NTLM. Para obter descrições detalhadas destes protocolos, consulte a documentação do SDK de plataforma no MSDN, no msdn.microsoft.com/library/. A classe de NegotiateStream efetua a autenticação através da Interface de fornecedor de suporte de segurança (SSPI).       Quando autenticação for bem sucedida, tem de verificar o <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança serão utilizadas pelo NegotiateStream para ajudar a proteger os dados durante a transmissão.</xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> Pode obter informações sobre o cliente remoto ou o servidor a utilizar o <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>propriedade.</xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>       Se falhar a autenticação, irá receber uma <xref:System.Security.Authentication.AuthenticationException>ou <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente.       Enviar dados utilizando o síncrona <xref:System.Net.Security.NegotiateStream.Write%2A>ou assíncrona <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginWrite%2A> </xref:System.Net.Security.NegotiateStream.Write%2A> Recebe dados utilizando o síncrona <xref:System.Net.Security.NegotiateStream.Read%2A>ou assíncrona <xref:System.Net.Security.NegotiateStream.BeginRead%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginRead%2A> </xref:System.Net.Security.NegotiateStream.Read%2A> Se a segurança dos serviços, tais como encriptação ou a assinatura estão ativados, estes são automaticamente aplicadas aos seus dados pelo NegotiateStream.       O NegotiateStream transmite dados através de um fluxo que forneceu ao criar o NegotiateStream. Ao fornecer este fluxo subjacente, tem a opção para especificar se fechar o NegotiateStream também fecha o fluxo subjacente."
  example:
  - "The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \n  \n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \n  \n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \n  \n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]"
  syntax:
    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> classe utilizando o <xref:System.IO.Stream>.</xref:System.IO.Stream> especificado"
  remarks: ''
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>objeto utilizado pelo <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> para enviar e receber dados.</xref:System.IO.Stream>"
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> classe utilizando especificado <xref:System.IO.Stream>e comportamento de fecho de sequência.</xref:System.IO.Stream>"
  remarks: "Quando especificar `true` para o `leaveStreamOpen` parâmetro, a fechar o <xref:System.Net.Security.NegotiateStream>não tem qualquer efeito `innerStream` transmitir; tem de fechar explicitamente `innerStream` quando já não necessita de mesmo.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>objeto utilizado pelo <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> para enviar e receber dados.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para indicar que isto fechar <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> não tem qualquer efeito `innerstream`; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para indicar que isto fechar <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> também fecha `innerStream`. Consulte a secção observações para obter mais informações."
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  id: AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor."
  remarks: "A autenticação utiliza o cliente <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>, e é pedida autenticação mútua.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsClient ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais de cliente especificado."
  remarks: "O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>, e é pedida autenticação mútua.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais de cliente especificado e o enlace de canal."
  remarks: "O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>, e é pedida autenticação mútua.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizado para a proteção expandida que é transmitida a este método no `binding` parâmetro deverá ser obtido por uma aplicação da <xref:System.Net.Security.SslStream.TransportContext%2A>propriedade associada <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>que é utilizado para a proteção expandida.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais especificadas e opções de autenticação."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>Não é um valor válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>é nulo."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza a credencial especificada, as opções de autenticação e enlace de canal."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizado para a proteção expandida que é transmitida a este método no `binding` parâmetro deverá ser obtido por uma aplicação da <xref:System.Net.Security.SslStream.TransportContext%2A>propriedade associada <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>que é utilizado para a proteção expandida.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>Não é um valor válido."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona."
  remarks: "A autenticação utiliza o cliente <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>, e é pedida autenticação mútua.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza as credenciais de cliente especificado."
  remarks: "O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>, e é pedida autenticação mútua.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza as credenciais de cliente especificado e o enlace de canal."
  remarks: "O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>, e é pedida autenticação mútua.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizado para a proteção expandida que é transmitida a este método no `binding` parâmetro deverá ser obtido por uma aplicação da <xref:System.Net.Security.SslStream.TransportContext%2A>propriedade associada <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>que é utilizado para a proteção expandida.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza as credenciais especificadas e opções de autenticação."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>Não é um valor válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>é nulo."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza a credencial especificada, as opções de autenticação e enlace de canal."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizado para a proteção expandida que é transmitida a este método no `binding` parâmetro deverá ser obtido por uma aplicação da <xref:System.Net.Security.SslStream.TransportContext%2A>propriedade associada <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>que é utilizado para a proteção expandida.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>Não é um valor válido."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  id: AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor."
  remarks: "A autenticação utiliza o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Este método bloqueia enquanto a operação for concluída. Para evitar bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsServer ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza a política de proteção expandida especificado."
  remarks: "A autenticação utiliza o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Se o `policy` parâmetro é `null`, em seguida, uma política de protecção expandida utilizada que tenha <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Este método bloqueia enquanto a operação for concluída. Para evitar bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "O <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> que é utilizado para a proteção expandida."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <> </> *> e <> </> *> na política de proteção expandida transmitida a <code> policy </code> parâmetro estão ambos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O <code> policy </code> parâmetro foi definido como <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> numa plataforma que não suporta protecção expandida."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais de servidor especificado e opções de autenticação."
  remarks: "Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Este método bloqueia enquanto a operação for concluída. Para evitar bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do servidor.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para tentar autenticar o r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais de servidor especificado, as opções de autenticação e alargado a política de proteção."
  remarks: "Se o `policy` parâmetro é `null`, em seguida, uma política de protecção expandida utilizada que tenha <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Este método bloqueia enquanto a operação for concluída. Para evitar bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "O <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> que é utilizado para a proteção expandida."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <> </> *> e <> </> *> na política de proteção expandida transmitida a <code> policy </code> parâmetro estão ambos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para tentar autenticar o r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O <code> policy </code> parâmetro foi definido como <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> numa plataforma que não suporta protecção expandida."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona."
  remarks: "A autenticação utiliza o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza a política de proteção expandida especificado."
  remarks: "A autenticação utiliza o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Se o `policy` parâmetro é `null`, em seguida, uma política de protecção expandida utilizada que tenha <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "O <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> que é utilizado para a proteção expandida."
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <> </> *> e <> </> *> na política de proteção expandida transmitida a <code> policy </code> parâmetro estão ambos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O <code> policy </code> parâmetro foi definido como <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> numa plataforma que não suporta protecção expandida."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza as credenciais de servidor especificado e opções de autenticação."
  remarks: "Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do servidor.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para tentar autenticar o r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor como uma operação assíncrona. O processo de autenticação utiliza as credenciais de servidor especificado, as opções de autenticação e alargado a política de proteção."
  remarks: "Se o `policy` parâmetro é `null`, em seguida, uma política de protecção expandida utilizada que tenha <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "O <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> que é utilizado para a proteção expandida."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>o objeto de tarefa que representa a operação assíncrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <> </> *> e <> </> *> na política de proteção expandida transmitida a <code> policy </code> parâmetro estão ambos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para tentar autenticar o r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O <code> policy </code> parâmetro foi definido como <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> numa plataforma que não suporta protecção expandida."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. Este método não bloquear."
  remarks: "A autenticação utiliza o cliente <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, e o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> O <xref:System.Net.Security.NegotiateStream>classe será construir o SPN utilizado para autenticação mútua.</xref:System.Net.Security.NegotiateStream>       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  example:
  - "The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \n  \n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais especificadas. Este método não bloquear."
  remarks: "Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais especificadas e o enlace de canal. Este método não bloquear."
  remarks: "Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>que é utilizado para a proteção expandida.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais especificadas e opções de autenticação. Este método não bloquear."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado pelos clientes para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais especificadas, as opções de autenticação e enlace de canal. Este método não bloquear."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "O <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>que é utilizado para a proteção expandida.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "O serviço de nome do Principal (SPN) que identifica exclusivamente o servidor para autenticar."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. Este método não bloquear."
  remarks: "A autenticação utiliza o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza a política de proteção expandida especificado. Este método não bloquear."
  remarks: "A autenticação utiliza o servidor <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Foi especificado nenhum nome Principal do serviço (SPN) para o servidor. O nível de representação é <xref:System.Security.Principal.TokenImpersonationLevel>, o nível de segurança é <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Se o `policy` parâmetro é `null`, em seguida, uma política de protecção expandida utilizada que tenha <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "O <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> que é utilizado para a proteção expandida."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <> </> *> e <> </> *> na política de proteção expandida transmitida a <code> policy </code> parâmetro estão ambos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O <code> policy </code> parâmetro foi definido como <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> numa plataforma que não suporta protecção expandida."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais de servidor especificado e opções de autenticação. Este método não bloquear."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que, o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chamado por servidores para iniciar uma operação assíncrona para autenticar o cliente e, opcionalmente, o servidor, uma ligação de cliente-servidor. O processo de autenticação utiliza as credenciais de servidor especificado, as opções de autenticação e alargado a política de proteção. Este método não bloquear."
  remarks: "Utilize o `requiredProtectionLevel` parâmetro para serviços de segurança de pedidos para os dados transmitidos através de fluxo autenticado. Por exemplo, para que os dados assinados e encriptados, especifique o <xref:System.Net.Security.ProtectionLevel>valor.</xref:System.Net.Security.ProtectionLevel> Autenticação com êxito não garante que, o pedido <xref:System.Net.Security.ProtectionLevel>foi concedido.</xref:System.Net.Security.ProtectionLevel> Tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Se o `policy` parâmetro é `null`, em seguida, uma política de protecção expandida utilizada que tenha <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>definido como <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>sobrecargas do método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       A operação assíncrona de autenticação têm de ser concluída ao chamar o <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>método.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "O <xref:System.Net.NetworkCredential>que é utilizado para estabelecer a identidade do cliente.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "O <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> que é utilizado para a proteção expandida."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Um do <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valores, que indica que os serviços de segurança para o fluxo."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores, que indica como o servidor pode utilizar as credenciais o cliente para aceder aos recursos.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a autenticação for concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <> </> *> e <> </> *> na política de proteção expandida transmitida a <code> policy </code> parâmetro estão ambos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 não são suportados."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O <code> policy </code> parâmetro foi definido como <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> numa plataforma que não suporta protecção expandida."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Começa uma operação de leitura assíncrona que lê dados a partir do fluxo e armazena-os na matriz especificada."
  remarks: "Se a encriptação, assinatura, ou de encriptação e assinatura estiverem ativadas, a operação de leitura lê os dados a partir do fluxo subjacente, verifica a integridade dos dados e desencripta a mesma. Se nenhum segurança serviços, tais como a encriptação de dados ou a assinatura estão em utilização, este método é iniciada uma operação de leitura assíncrona no fluxo subjacente.       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize o <xref:System.Net.Security.NegotiateStream.Read%2A>método.</xref:System.Net.Security.NegotiateStream.Read%2A>       A operação de leitura assíncrona têm de ser concluída por chamar a <xref:System.Net.Security.NegotiateStream.EndRead%2A>método.</xref:System.Net.Security.NegotiateStream.EndRead%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) o <xref:System.Net.Security.NegotiateStream>classe não suporta operações de leitura em simultâneo vários.</xref:System.Net.Security.NegotiateStream> Se tentar iniciar uma operação de leitura enquanto outra ler operação já está a executar na mesma transmissão em fluxo, um <xref:System.NotSupportedException>exceção será emitida.</xref:System.NotSupportedException>       Não é possível chamar este método até ter de ser autenticadas com êxito. Para autenticar, chamar um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que recebe os bytes lido do fluxo.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "A localização com base em zero no `buffer` no qual pretende começar a armazenar os dados lida esta sequência."
    - id: count
      type: System.Int32
      description: "O número máximo de bytes a ler do fluxo."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação de leitura está concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de leitura. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Já está em curso uma operação de leitura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticação não tiver ocorrido."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Começa uma operação de escrita assíncrona que escreve <xref:System.Byte>s da memória intermédia especificada no fluxo.</xref:System.Byte>"
  remarks: "Se a encriptação, assinatura, ou de encriptação e assinatura estiverem ativados, este método lê os dados a partir da memória intermédia, encripta, inicia, ou encripta e assina-o e transmite-la utilizando o fluxo subjacente. Se nenhum segurança serviços, tais como a encriptação de dados ou a assinatura estão em utilização, este método é iniciada uma operação de escrita assíncrona no fluxo subjacente.       Este método é assíncrono e não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize o <xref:System.Net.Security.NegotiateStream.Read%2A>método.</xref:System.Net.Security.NegotiateStream.Read%2A>       A operação de leitura assíncrona têm de ser concluída por chamar a <xref:System.Net.Security.NegotiateStream.EndWrite%2A>método.</xref:System.Net.Security.NegotiateStream.EndWrite%2A> Normalmente, o método é invocado pelo `asyncCallback` delegar. Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md) o <xref:System.Net.Security.NegotiateStream>classe não suporta várias operações de escrita em simultâneo.</xref:System.Net.Security.NegotiateStream> Se tentar iniciar uma operação de escrita, enquanto outra operação de escrita já está a executar na mesma transmissão em fluxo, um <xref:System.NotSupportedException>exceção será emitida.</xref:System.NotSupportedException>       Não é possível chamar este método até ter de ser autenticadas com êxito. Para autenticar, chamar um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates beginning an asynchronous write operation.  \n  \n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \n  \n The following method is called when the operation completes.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que fornece os bytes para escrita no fluxo.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "A localização com base em zero no `buffer` no qual pretende começar a ler bytes a escrever no fluxo."
    - id: count
      type: System.Int32
      description: "Um <xref:System.Int32>valor que especifica o número de bytes a ler a partir do `buffer`.</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação de escrita está concluída.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de escrita. Este objeto é passado para o `asyncCallback` delegar ao concluir a operação."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que indica o estado da operação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Já está em curso uma operação de escrita."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticação não tiver ocorrido."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se o fluxo subjacente é legível.</xref:System.Boolean>"
  remarks: "Se tiver ocorrido uma autenticação com êxito, esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.CanRead%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.CanRead%2A> O fluxo subjacente é especificado ao criar uma instância de <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se tiver ocorrido uma autenticação e o fluxo subjacente é legível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se o fluxo subjacente é pesquisável.</xref:System.Boolean>"
  remarks: "Não deve tentar definir a posição do <xref:System.Net.Security.NegotiateStream>objeto ou o fluxo subjacente.</xref:System.Net.Security.NegotiateStream> O fluxo subjacente é especificado ao criar uma instância de <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Esta propriedade devolve sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se o fluxo subjacente suporta tempos limite.</xref:System.Boolean>"
  remarks: "Esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.CanTimeout%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.CanTimeout%2A> O fluxo subjacente é especificado ao criar uma instância de <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo subjacente suporta tempos limite; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se o fluxo subjacente é gravável.</xref:System.Boolean>"
  remarks: "Se tiver ocorrido uma autenticação com êxito, esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.CanWrite%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.CanWrite%2A> O fluxo subjacente é especificado ao criar uma instância de <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se tiver ocorrido uma autenticação e o fluxo subjacente é gravável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público `Dispose()`método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca protegida `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro for true, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Net.Security.NegotiateStream>referências.</xref:System.Net.Security.NegotiateStream> Este método invoca o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Net.Security.NegotiateStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina uma operação de autenticação de cliente assíncrona pendente que foi iniciada com uma chamada para <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>"
  remarks: "Se não tiver sido concluída a operação, este método bloqueia até que o faz. Quando a autenticação é concluída com êxito, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente.       Para executar esta operação de forma síncrona, utilize um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Uma <xref:System.IAsyncResult>instância devolvida por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>Não foi criado por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não há nenhuma autenticação de cliente pendente para concluir."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina uma operação de autenticação de cliente assíncrona pendente que foi iniciada com uma chamada para <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>"
  remarks: "Se não tiver sido concluída a operação, este método bloqueia até que o faz.       Quando autenticação for bem sucedida, tem de verificar as <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Propriedades para determinar que serviços de segurança são utilizados pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> e</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Verifique o <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>propriedade para determinar se a autenticação mútua ocorreu.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se falhar a autenticação, receberá um <xref:System.Security.Authentication.AuthenticationException>ou um <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> Neste caso, pode tentar novamente a autenticação com uma credencial diferente.       Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>método.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Uma <xref:System.IAsyncResult>instância devolvida por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>Não foi criado por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "A autenticação falha. Pode utilizar este objeto para repetir a autenticação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não há nenhuma autenticação pendente para concluir."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina uma operação de leitura assíncrona foi iniciada com uma chamada para <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  remarks: "Se não tiver sido concluída a operação, este método bloqueia até que o faz.       Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Security.NegotiateStream.Read%2A>método.</xref:System.Net.Security.NegotiateStream.Read%2A>       Não é possível chamar este método até ter de ser autenticadas com êxito. Para autenticar, chamar um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \n  \n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>instância devolvida por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginRead*></xref:System.Net.Security.NegotiateStream.BeginRead*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "A <xref:System.Int32>ler o valor que especifica o número de bytes do fluxo subjacente.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O asyncResult não foi criado por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticação não tiver ocorrido."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Falha na operação de leitura."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina uma operação de escrita assíncrona foi iniciada com uma chamada para <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  remarks: "Se não tiver sido concluída a operação, este método bloqueia até que o faz.       Não é possível chamar este método até ter de ser autenticadas com êxito. Para autenticar, chamar um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Security.NegotiateStream.Write%2A>método.</xref:System.Net.Security.NegotiateStream.Write%2A>"
  example:
  - "The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>instância devolvida por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginWrite*></xref:System.Net.Security.NegotiateStream.BeginWrite*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O asyncResult não foi criado por uma chamada para <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticação não tiver ocorrido."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A operação de escrita falhou."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Faz com que todos os dados colocados em memória intermédia para serem escritos para o dispositivo subjacente."
  remarks: "Este método invoca <xref:System.IO.Stream.Flush%2A>no fluxo subjacente.</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates flushing the stream.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um valor que indica como o servidor pode utilizar as credenciais do cliente."
  remarks: "Deve autenticar com êxito antes de chamar este método. Os clientes de especificar o nível de representação quando solicitarem autenticação chamando um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Se autenticar sem especificar um <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>é utilizado.</xref:System.Security.Principal.TokenImpersonationLevel> </xref:System.Security.Principal.TokenImpersonationLevel>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um do <xref:System.Security.Principal.TokenImpersonationLevel>valores.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A autenticação falhou ou não tiver ocorrido."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se a autenticação foi bem sucedida.</xref:System.Boolean>"
  remarks: "Autenticam clientes ao chamar o <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servidores autenticar-se ao chamar o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se tiver ocorrido a autenticação com êxito; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se esta <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> utiliza a encriptação de dados.</xref:System.Boolean>"
  remarks: "Encriptação ajuda a proteger a privacidade dos dados; nomeadamente, ajuda a garantir que dados enquanto estes se encontram em trânsito-não é possível deciphered por terceiros."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os dados são encriptados antes de ser transmitida através da rede e desencriptados quando atinge o ponto final remoto; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se o servidor e o cliente foi autenticadas.</xref:System.Boolean>"
  remarks: "A autenticação mútua é especificada pelo cliente quando o cliente quer que o servidor para fornecer credenciais para autenticação. Por predefinição, os clientes solicitam a autenticação mútua.       O protocolo de negociar seleciona NTLM ou Kerberos consoante os protocolos de segurança suportados pelo cliente e servidor. NTLM não suporta a autenticação mútua."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o servidor foi autenticado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se o local lado da ligação é utilizado por este <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> foi autenticada como o servidor.</xref:System.Boolean>"
  remarks: "Se a autenticação falhou ou não ocorriam, esta propriedade devolve `false`.       Para efetuar a autenticação como o servidor, chame o <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponto final local foi autenticado com êxito como o lado do servidor de ligação autenticada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém um <xref:System.Boolean>valor que indica se os dados enviados utilizando esta sequência estão assinados.</xref:System.Boolean>"
  remarks: "Assinatura de dados ajuda a proteger a integridade dos dados; nomeadamente, ajuda o destinatário a determinar se os dados foram adulterados em trânsito."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os dados estão assinados antes de a ser transmitidos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém o comprimento do fluxo subjacente."
  remarks: "Esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.Length%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.Length%2A> Se o fluxo subjacente não é pesquisável, esta propriedade, normalmente, irá gerar uma exceção. O tipo de tempo de execução do fluxo subjacente determina o tipo de tempo de execução da exceção que é acionada."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "Um <xref:System.Int64>que especifica o comprimento do fluxo subjacente.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Obter o valor desta propriedade não é suportada quando o fluxo subjacente é um <xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém ou define a posição atual no fluxo subjacente."
  remarks: "Esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.Position%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.Position%2A> Se o fluxo subjacente não é pesquisável, esta propriedade, normalmente, irá gerar uma exceção. O tipo de tempo de execução do fluxo subjacente determina o tipo de tempo de execução da exceção que é acionada."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>que especifica a posição atual no fluxo subjacente.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Lê dados a partir desta sequência e armazena-os na matriz especificada."
  remarks: "O método lê um máximo de `count` bytes do atual transmitir e armazena-os na `buffer` começando na `offset`.       Não é possível chamar este método até ter de ser autenticadas com êxito. Para autenticar, chamar um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Para efetuar esta operação assíncrona, utilize o <xref:System.Net.Security.NegotiateStream.BeginRead%2A>método.</xref:System.Net.Security.NegotiateStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que recebe os bytes lido do fluxo.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "A <xref:System.Int32>que contém a localização com base em zero no `buffer` no qual pretende começar a armazenar os dados lida neste fluxo.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32>que contém o número máximo de bytes a ler do fluxo.</xref:System.Int32>"
    return:
      type: System.Int32
      description: "A <xref:System.Int32>ler o valor que especifica o número de bytes do fluxo subjacente.</xref:System.Int32> Quando não houver nenhuma mais dados para ser de leitura, devolve 0."
  overload: System.Net.Security.NegotiateStream.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Falha na operação de leitura."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticação não tiver ocorrido."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Uma operação de leitura já está em curso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém ou define a quantidade de tempo que limite à espera de dados de blocos de uma operação de leitura."
  remarks: "Esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.ReadTimeout%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.ReadTimeout%2A> Quando definir esta propriedade, o <xref:System.IO.Stream.ReadTimeout%2A>valor no fluxo subjacente estiver definido como o valor especificado.</xref:System.IO.Stream.ReadTimeout%2A>       Se o fluxo subjacente é um <xref:System.Net.Sockets.NetworkStream>, ReadTimeout em milissegundos e é definido <xref:System.Threading.Timeout.Infinite>por predefinição, para que ler operações fazer não o tempo limite.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>que especifica o período de tempo que irá decorrer antes de falha de uma operação de leitura.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém as informações sobre a identidade da parte remota partilha este fluxo autenticado."
  remarks: "Quando acedido pelo cliente, esta propriedade devolve um <xref:System.Security.Principal.GenericIdentity>que contém o serviço de nome do Principal (SPN) do servidor e o protocolo de autenticação utilizado.</xref:System.Security.Principal.GenericIdentity> Quando acedido pelo servidor, esta propriedade devolve um <xref:System.Security.Principal.WindowsIdentity>que descreve o cliente.</xref:System.Security.Principal.WindowsIdentity> Se o <xref:System.Security.Principal.WindowsIdentity>está não disponível, as informações do cliente são devolvidas para o servidor no <xref:System.Security.Principal.GenericIdentity>.</xref:System.Security.Principal.GenericIdentity> </xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "Um <xref:System.Security.Principal.IIdentity>objeto que descreve a identidade do ponto final remoto.</xref:System.Security.Principal.IIdentity>"
  overload: System.Net.Security.NegotiateStream.RemoteIdentity*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A autenticação falhou ou não tiver ocorrido."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gera <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  remarks: "Não chame este método. É herdada, mas não é suportado pelo <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Este valor é ignorado."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Este valor é ignorado."
    return:
      type: System.Int64
      description: "Sempre emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  overload: System.Net.Security.NegotiateStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Pesquisa não é suportada no <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Define o comprimento do fluxo subjacente."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Um <xref:System.Int64>valor que especifica o comprimento da sequência.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Escrever o número especificado de <xref:System.Byte>s para o fluxo subjacente utilizando a memória intermédia especificada e o desvio.</xref:System.Byte>"
  remarks: "Se a encriptação, assinatura, ou de encriptação e assinatura estiverem ativados, este método lê os dados a partir da memória intermédia, encripta, inicia, ou encripta e assina-o e transmite-la utilizando o fluxo subjacente. Se nenhum segurança serviços, tais como a encriptação de dados ou a assinatura estão em utilização, este método invoca <xref:System.IO.Stream.Write%2A>no fluxo subjacente.</xref:System.IO.Stream.Write%2A>       Este método bloqueia enquanto estiver concluída a operação de escrita. Para evitar bloquear enquanto a operação for concluída, utilize o método de escrita.       Não é possível chamar este método até ter de ser autenticadas com êxito. Para autenticar, chamar um do <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>métodos.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       O <xref:System.Net.Security.NegotiateStream>classe não suporta várias operações de escrita em simultâneo.</xref:System.Net.Security.NegotiateStream> Se tentar iniciar uma operação de escrita, enquanto outra operação de escrita já está a executar na mesma transmissão em fluxo, um <xref:System.NotSupportedException>exceção será emitida.</xref:System.NotSupportedException>"
  example:
  - "The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que fornece os bytes escritos no fluxo.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Um <xref:System.Int32>que contém a localização com base em zero no `buffer` no qual pretende começar a ler bytes a escrever no fluxo.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32>que contém o número de bytes a ler a partir do `buffer`.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Já está em curso uma operação de escrita."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Este objeto foi fechado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticação não tiver ocorrido."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Obtém ou define a quantidade de tempo que limite à espera de dados de blocos de uma operação de escrita."
  remarks: "Esta propriedade devolve o valor devolvido pelo invocar o <xref:System.IO.Stream.WriteTimeout%2A>propriedade no fluxo subjacente.</xref:System.IO.Stream.WriteTimeout%2A> Para operações de conjunto, define o valor especificado a <xref:System.IO.Stream.WriteTimeout%2A>valor no fluxo subjacente.</xref:System.IO.Stream.WriteTimeout%2A>       Se o fluxo subjacente é um <xref:System.Net.Sockets.NetworkStream>, WriteTimeout em milissegundos e é definido <xref:System.Threading.Timeout.Infinite>por predefinição, para que escrever operações fazer não o tempo limite.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>que especifica o período de tempo que irá decorrer antes de falha de uma operação de escrita.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.Security.Authentication.InvalidCredentialException
  parent: System.Security.Authentication
  isExternal: false
  name: InvalidCredentialException
  nameWithType: InvalidCredentialException
  fullName: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: true
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: true
  name: ChannelBinding
  nameWithType: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.CanRead
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.Flush
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.NegotiateStream.Position
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
- uid: System.Net.Security.NegotiateStream.#ctor*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream
  nameWithType: NegotiateStream.NegotiateStream
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: NegotiateStream.AuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: NegotiateStream.AuthenticateAsClientAsync
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: NegotiateStream.AuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: NegotiateStream.AuthenticateAsServerAsync
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: NegotiateStream.BeginAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: NegotiateStream.BeginAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.BeginRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead
  nameWithType: NegotiateStream.BeginRead
- uid: System.Net.Security.NegotiateStream.BeginWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite
  nameWithType: NegotiateStream.BeginWrite
- uid: System.Net.Security.NegotiateStream.CanRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose
  nameWithType: NegotiateStream.Dispose
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: NegotiateStream.EndAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: NegotiateStream.EndAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.EndRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead
  nameWithType: NegotiateStream.EndRead
- uid: System.Net.Security.NegotiateStream.EndWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite
  nameWithType: NegotiateStream.EndWrite
- uid: System.Net.Security.NegotiateStream.Flush*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush
  nameWithType: NegotiateStream.Flush
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
- uid: System.Net.Security.NegotiateStream.Position*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read
  nameWithType: NegotiateStream.Read
- uid: System.Net.Security.NegotiateStream.ReadTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
- uid: System.Net.Security.NegotiateStream.Seek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek
  nameWithType: NegotiateStream.Seek
- uid: System.Net.Security.NegotiateStream.SetLength*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength
  nameWithType: NegotiateStream.SetLength
- uid: System.Net.Security.NegotiateStream.Write*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write
  nameWithType: NegotiateStream.Write
- uid: System.Net.Security.NegotiateStream.WriteTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
