### YamlMime:ManagedReference
items:
- uid: System.Workflow.ComponentModel.CompositeActivity
  id: CompositeActivity
  children:
  - System.Workflow.ComponentModel.CompositeActivity.#ctor
  - System.Workflow.ComponentModel.CompositeActivity.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity})
  - System.Workflow.ComponentModel.CompositeActivity.#ctor(System.String)
  - System.Workflow.ComponentModel.CompositeActivity.Activities
  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  langs:
  - csharp
  name: CompositeActivity
  nameWithType: CompositeActivity
  fullName: System.Workflow.ComponentModel.CompositeActivity
  type: Class
  summary: "Derivative of <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref> that is the base class for all activities that contain other activities. A CompositeActivity is responsible for managing the execution of its child activities."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       A CompositeActivity manages the execution of its child activities using <xref:System.Workflow.ComponentModel.ActivityExecutionContext> class methods and events defined on the <xref:System.Workflow.ComponentModel.Activity> class.  For example, a child activity is scheduled for execution using the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> of <xref:System.Workflow.ComponentModel.ActivityExecutionContext>. A CompositeActivity activity can be notified when a child activity completes its execution by subscribing to the <xref:System.Workflow.ComponentModel.Activity.Closed> event defined on <xref:System.Workflow.ComponentModel.Activity>.       The workflow runtime enforces certain constraints on CompositeActivity execution, the most fundamental of which is that a CompositeActivity activity cannot move to the <xref:System.Workflow.ComponentModel.Activity.Closed> state if any child activities are still in a <xref:System.Workflow.ComponentModel.Activity.Executing>, <xref:System.Workflow.ComponentModel.Activity.Canceling>, <xref:System.Workflow.ComponentModel.Activity.Compensating>, or <xref:System.Workflow.ComponentModel.Activity.Faulting>, state."
  example:
  - "This example shows a basic `CompositeActivity` that executes its first child activity for execution. When the child activity moves to the Closed state, the composite activity is notified and then completes its execution.  \n  \n```c#  \npublic class HasOneChildActivity : CompositeActivity  \n{  \n    protected override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)  \n    {  \n        Activity child = this.EnabledActivities[0];  \n        child.Closed += this.ChildClosed;  \n        executionContext.ExecuteActivity(child);  \n  \n        return ActivityExecutionStatus.Executing;  \n    }  \n  \n    void ChildClosed(object sender, ActivityExecutionStatusChangedEventArgs e)  \n    {  \n        e.Activity.Closed -= this.ChildClosed;  \n        ActivityExecutionContext executionContext = sender as ActivityExecutionContext;  \n  \n        executionContext.CloseActivity();  \n    }  \n}  \n```"
  syntax:
    content: >-
      [System.ComponentModel.Design.Serialization.DesignerSerializer(typeof(System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer), typeof(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer))]

      [System.ComponentModel.TypeDescriptionProvider(typeof(System.Workflow.ComponentModel.Serialization.CompositeActivityTypeDescriptorProvider))]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator(typeof(System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator))]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.ComponentModel.Compiler.CompositeActivityValidator))]

      [System.Workflow.ComponentModel.Serialization.ContentProperty("Activities")]

      public class CompositeActivity : System.Workflow.ComponentModel.Activity
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  implements: []
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: CompositeActivity()
  nameWithType: CompositeActivity.CompositeActivity()
  fullName: System.Workflow.ComponentModel.CompositeActivity.CompositeActivity()
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.ComponentModel.CompositeActivity&quot;></xref> class."
  syntax:
    content: public CompositeActivity ();
    parameters: []
  overload: System.Workflow.ComponentModel.CompositeActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity})'
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: CompositeActivity(IEnumerable<Activity>)
  nameWithType: CompositeActivity.CompositeActivity(IEnumerable<Activity>)
  fullName: System.Workflow.ComponentModel.CompositeActivity.CompositeActivity(IEnumerable<Activity>)
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.ComponentModel.CompositeActivity&quot;></xref> class from an <xref:System.Object> which implements the <xref:System.Collections.IEnumerable> interface with type <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>."
  syntax:
    content: public CompositeActivity (System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity> children);
    parameters:
    - id: children
      type: System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity}
      description: "The <xref:System.Object> implementing the <xref:System.Collections.IEnumerable> interface with type <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>."
  overload: System.Workflow.ComponentModel.CompositeActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: CompositeActivity(String)
  nameWithType: CompositeActivity.CompositeActivity(String)
  fullName: System.Workflow.ComponentModel.CompositeActivity.CompositeActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.ComponentModel.CompositeActivity&quot;></xref> class, along with the name for that activity."
  syntax:
    content: public CompositeActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name for the instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.Activities
  id: Activities
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: Activities
  nameWithType: CompositeActivity.Activities
  fullName: System.Workflow.ComponentModel.CompositeActivity.Activities
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Gets the object representing the collection, <xref href=&quot;System.Workflow.ComponentModel.ActivityCollection&quot;></xref>, of all child activities."
  remarks: "Represents the collection of child activities managed by the composite activity. This collection can be updated."
  example:
  - "The following code shows how to create activities and add them as children to a composite activity and includes setting the <xref:System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities%2A> permissive for this type.  \n  \n This code example is part of the Throw SDK sample and is from the ThrowWorkFlow.cs file. For more information, see [Throw Sample](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#179](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#179)]\n [!code-vb[WF_Samples#179](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#179)]"
  syntax:
    content: public System.Workflow.ComponentModel.ActivityCollection Activities { get; }
    return:
      type: System.Workflow.ComponentModel.ActivityCollection
      description: "<xref href=&quot;System.Workflow.ComponentModel.ActivityCollection&quot;></xref> of all child activities."
  overload: System.Workflow.ComponentModel.CompositeActivity.Activities*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: CompositeActivity.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Applies the <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;></xref> manifest in the parameter to this instance."
  syntax:
    content: protected void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "The <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;></xref> to apply."
  overload: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>workflowChanges</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  id: CanModifyActivities
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: CanModifyActivities
  nameWithType: CompositeActivity.CanModifyActivities
  fullName: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Gets or sets a value which controls whether the individual activities within <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*> can be modified."
  remarks: ''
  example:
  - "The following code shows how to create activities and add them as children to a composite activity and includes setting the CanModifyActivities permissive for this type.  \n  \n This code example is part of the Throw SDK sample and is from the ThrowWorkFlow.cs file. For more information, see [Throw Sample](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#179](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#179)]\n [!code-vb[WF_Samples#179](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#179)]"
  syntax:
    content: protected bool CanModifyActivities { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the individual activities within <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*> can be modified; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CompositeActivity.Dispose(Boolean)
  fullName: System.Workflow.ComponentModel.CompositeActivity.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Calls <xref:System.Workflow.ComponentModel.DependencyObject.Dispose*> on this instance, and optionally calls <xref:System.Workflow.ComponentModel.DependencyObject.Dispose*> on all child activities of this instance."
  remarks: "Throughout an activity&quot;s lifetime, several .NET objects may be created or disposed. Every time a workflow instance is unloaded from memory, the .NET objects corresponding to the activities in the workflow tree are disposed (the <xref:System.Workflow.ComponentModel.DependencyObject.Dispose%2A> method is called on each activity). When the workflow instance is loaded back into memory, a new .NET object is created for each activity with the state from the corresponding unload."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources used by this instance and all child activities of this instance; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only the unmanaged resources of this instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  id: EnabledActivities
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: EnabledActivities
  nameWithType: CompositeActivity.EnabledActivities
  fullName: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Gets the read-only collection that represents the subset of <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*> that are enabled."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.ComponentModel.Activity> EnabledActivities { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity}
      description: "The read-only collection that represents the subset of <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*> that are enabled."
  overload: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  id: GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: GetDynamicActivities(Activity)
  nameWithType: CompositeActivity.GetDynamicActivities(Activity)
  fullName: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(Activity)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Returns an array that contains all of the currently executing instances of the specified activity."
  syntax:
    content: protected System.Workflow.ComponentModel.Activity[] GetDynamicActivities (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "The specified <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>."
    return:
      type: System.Workflow.ComponentModel.Activity[]
      description: "An array of activity instances that are currently executing."
  overload: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  id: HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: HandleFault(ActivityExecutionContext,Exception)
  nameWithType: CompositeActivity.HandleFault(ActivityExecutionContext,Exception)
  fullName: System.Workflow.ComponentModel.CompositeActivity.HandleFault(ActivityExecutionContext,Exception)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called when an exception is raised within the context of the execution of this instance."
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus HandleFault (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, Exception exception);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> for this instance."
    - id: exception
      type: System.Exception
      description: "The <xref:System.Exception> that caused this fault."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionStatus&quot;></xref> that results from an attempt to cancel this instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.HandleFault*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exception</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)
  id: Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: Initialize(IServiceProvider)
  nameWithType: CompositeActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.Initialize(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Initializes all appropriate child activities of this instance and the specified <xref:System.IServiceProvider>."
  syntax:
    content: protected override void Initialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "The specified <xref:System.IServiceProvider>."
  overload: System.Workflow.ComponentModel.CompositeActivity.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>provider</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  id: OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)
  nameWithType: CompositeActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Calls when an activity is added."
  syntax:
    content: protected virtual void OnActivityChangeAdd (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity addedActivity);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The specified <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref>."
    - id: addedActivity
      type: System.Workflow.ComponentModel.Activity
      description: "The specified <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addedActivity</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  id: OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnActivityChangeRemove(ActivityExecutionContext,Activity)
  nameWithType: CompositeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called when an activity is removed."
  remarks: "Current implementation provides no functionality."
  syntax:
    content: protected virtual void OnActivityChangeRemove (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity removedActivity);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The specified <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref>."
    - id: removedActivity
      type: System.Workflow.ComponentModel.Activity
      description: "The specified <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  id: OnActivityExecutionContextLoad(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnActivityExecutionContextLoad(IServiceProvider)
  nameWithType: CompositeActivity.OnActivityExecutionContextLoad(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called by the workflow runtime engine every time the <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> for this activity is loaded."
  syntax:
    content: protected override void OnActivityExecutionContextLoad (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "An <xref:System.Object> that implements <xref:System.IServiceProvider> and provides services to this instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  id: OnActivityExecutionContextUnload(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnActivityExecutionContextUnload(IServiceProvider)
  nameWithType: CompositeActivity.OnActivityExecutionContextUnload(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called by the workflow runtime engine every time the <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> for this activity is unloaded."
  syntax:
    content: protected override void OnActivityExecutionContextUnload (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "An <xref:System.Object> that implements <xref:System.IServiceProvider> and provides services to this instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  id: OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnListChanged(ActivityCollectionChangeEventArgs)
  nameWithType: CompositeActivity.OnListChanged(ActivityCollectionChangeEventArgs)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnListChanged(ActivityCollectionChangeEventArgs)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Performs additional processing when the <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*> property changes."
  syntax:
    content: protected virtual void OnListChanged (System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs e);
    parameters:
    - id: e
      type: System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs&quot;></xref> broadcast by the event."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnListChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  id: OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnListChanging(ActivityCollectionChangeEventArgs)
  nameWithType: CompositeActivity.OnListChanging(ActivityCollectionChangeEventArgs)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnListChanging(ActivityCollectionChangeEventArgs)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Event that occurs before a change being made to the underlying <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*>."
  syntax:
    content: protected virtual void OnListChanging (System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs e);
    parameters:
    - id: e
      type: System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs
      description: "<xref:System.EventArgs> relating to the event."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnListChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: OnWorkflowChangesCompleted(ActivityExecutionContext)
  nameWithType: CompositeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called after changes have been made to the collection <xref:System.Workflow.ComponentModel.CompositeActivity.Activities*> of this instance."
  remarks: "When overridden in a derived class, provides processing for this event."
  syntax:
    content: protected virtual void OnWorkflowChangesCompleted (System.Workflow.ComponentModel.ActivityExecutionContext rootContext);
    parameters:
    - id: rootContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> associated with this instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  id: Uninitialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  langs:
  - csharp
  name: Uninitialize(IServiceProvider)
  nameWithType: CompositeActivity.Uninitialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.Uninitialize(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called by the workflow runtime engine when an activity transitions into the <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionStatus&quot;></xref> state from the <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionStatus&quot;></xref> state."
  remarks: "This method is used for activity cleanup, such as clearing dependency properties and deleting queues."
  syntax:
    content: protected override void Uninitialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "An <xref:System.Object> that implements <xref:System.IServiceProvider> and provides services to this instance."
  overload: System.Workflow.ComponentModel.CompositeActivity.Uninitialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.Activity
  isExternal: false
  name: System.Workflow.ComponentModel.Activity
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: CompositeActivity()
  nameWithType: CompositeActivity.CompositeActivity()
  fullName: System.Workflow.ComponentModel.CompositeActivity.CompositeActivity()
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity})
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: CompositeActivity(IEnumerable<Activity>)
  nameWithType: CompositeActivity.CompositeActivity(IEnumerable<Activity>)
  fullName: System.Workflow.ComponentModel.CompositeActivity.CompositeActivity(IEnumerable<Activity>)
- uid: System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Activity>
  nameWithType: IEnumerable<Activity>
  fullName: System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Workflow.ComponentModel.Activity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.Activity
    name: Activity
    nameWithType: Activity
    fullName: Activity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor(System.String)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: CompositeActivity(String)
  nameWithType: CompositeActivity.CompositeActivity(String)
  fullName: System.Workflow.ComponentModel.CompositeActivity.CompositeActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.ComponentModel.CompositeActivity.Activities
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Activities
  nameWithType: CompositeActivity.Activities
  fullName: System.Workflow.ComponentModel.CompositeActivity.Activities
- uid: System.Workflow.ComponentModel.ActivityCollection
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityCollection
  nameWithType: ActivityCollection
  fullName: System.Workflow.ComponentModel.ActivityCollection
- uid: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: CompositeActivity.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: CanModifyActivities
  nameWithType: CompositeActivity.CanModifyActivities
  fullName: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CompositeActivity.Dispose(Boolean)
  fullName: System.Workflow.ComponentModel.CompositeActivity.Dispose(Boolean)
- uid: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: EnabledActivities
  nameWithType: CompositeActivity.EnabledActivities
  fullName: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<Activity>
  nameWithType: ReadOnlyCollection<Activity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.ComponentModel.Activity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.ComponentModel.Activity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.Activity
    name: Activity
    nameWithType: Activity
    fullName: Activity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: GetDynamicActivities(Activity)
  nameWithType: CompositeActivity.GetDynamicActivities(Activity)
  fullName: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(Activity)
- uid: System.Workflow.ComponentModel.Activity[]
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity[]
  spec.csharp:
  - uid: System.Workflow.ComponentModel.Activity
    name: Activity
    nameWithType: Activity
    fullName: Activity[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: HandleFault(ActivityExecutionContext,Exception)
  nameWithType: CompositeActivity.HandleFault(ActivityExecutionContext,Exception)
  fullName: System.Workflow.ComponentModel.CompositeActivity.HandleFault(ActivityExecutionContext,Exception)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Initialize(IServiceProvider)
  nameWithType: CompositeActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.Initialize(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)
  nameWithType: CompositeActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityChangeRemove(ActivityExecutionContext,Activity)
  nameWithType: CompositeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityExecutionContextLoad(IServiceProvider)
  nameWithType: CompositeActivity.OnActivityExecutionContextLoad(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(IServiceProvider)
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityExecutionContextUnload(IServiceProvider)
  nameWithType: CompositeActivity.OnActivityExecutionContextUnload(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(IServiceProvider)
- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnListChanged(ActivityCollectionChangeEventArgs)
  nameWithType: CompositeActivity.OnListChanged(ActivityCollectionChangeEventArgs)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnListChanged(ActivityCollectionChangeEventArgs)
- uid: System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityCollectionChangeEventArgs
  nameWithType: ActivityCollectionChangeEventArgs
  fullName: System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs
- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnListChanging(ActivityCollectionChangeEventArgs)
  nameWithType: CompositeActivity.OnListChanging(ActivityCollectionChangeEventArgs)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnListChanging(ActivityCollectionChangeEventArgs)
- uid: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnWorkflowChangesCompleted(ActivityExecutionContext)
  nameWithType: CompositeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Uninitialize(IServiceProvider)
  nameWithType: CompositeActivity.Uninitialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompositeActivity.Uninitialize(IServiceProvider)
- uid: System.Workflow.ComponentModel.CompositeActivity.#ctor*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: CompositeActivity
  nameWithType: CompositeActivity.CompositeActivity
- uid: System.Workflow.ComponentModel.CompositeActivity.Activities*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Activities
  nameWithType: CompositeActivity.Activities
- uid: System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: CompositeActivity.ApplyWorkflowChanges
- uid: System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: CanModifyActivities
  nameWithType: CompositeActivity.CanModifyActivities
- uid: System.Workflow.ComponentModel.CompositeActivity.Dispose*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Dispose
  nameWithType: CompositeActivity.Dispose
- uid: System.Workflow.ComponentModel.CompositeActivity.EnabledActivities*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: EnabledActivities
  nameWithType: CompositeActivity.EnabledActivities
- uid: System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: GetDynamicActivities
  nameWithType: CompositeActivity.GetDynamicActivities
- uid: System.Workflow.ComponentModel.CompositeActivity.HandleFault*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: HandleFault
  nameWithType: CompositeActivity.HandleFault
- uid: System.Workflow.ComponentModel.CompositeActivity.Initialize*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Initialize
  nameWithType: CompositeActivity.Initialize
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityChangeAdd
  nameWithType: CompositeActivity.OnActivityChangeAdd
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityChangeRemove
  nameWithType: CompositeActivity.OnActivityChangeRemove
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityExecutionContextLoad
  nameWithType: CompositeActivity.OnActivityExecutionContextLoad
- uid: System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnActivityExecutionContextUnload
  nameWithType: CompositeActivity.OnActivityExecutionContextUnload
- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanged*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnListChanged
  nameWithType: CompositeActivity.OnListChanged
- uid: System.Workflow.ComponentModel.CompositeActivity.OnListChanging*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnListChanging
  nameWithType: CompositeActivity.OnListChanging
- uid: System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: OnWorkflowChangesCompleted
  nameWithType: CompositeActivity.OnWorkflowChangesCompleted
- uid: System.Workflow.ComponentModel.CompositeActivity.Uninitialize*
  parent: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: Uninitialize
  nameWithType: CompositeActivity.Uninitialize
