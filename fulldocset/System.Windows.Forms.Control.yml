### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.Control
  id: Control
  children:
  - System.Windows.Forms.Control.#ctor
  - System.Windows.Forms.Control.#ctor(System.String)
  - System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)
  - System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)
  - System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)
  - System.Windows.Forms.Control.AccessibilityObject
  - System.Windows.Forms.Control.AccessibleDefaultActionDescription
  - System.Windows.Forms.Control.AccessibleDescription
  - System.Windows.Forms.Control.AccessibleName
  - System.Windows.Forms.Control.AccessibleRole
  - System.Windows.Forms.Control.AllowDrop
  - System.Windows.Forms.Control.Anchor
  - System.Windows.Forms.Control.AutoScrollOffset
  - System.Windows.Forms.Control.AutoSize
  - System.Windows.Forms.Control.AutoSizeChanged
  - System.Windows.Forms.Control.BackColor
  - System.Windows.Forms.Control.BackColorChanged
  - System.Windows.Forms.Control.BackgroundImage
  - System.Windows.Forms.Control.BackgroundImageChanged
  - System.Windows.Forms.Control.BackgroundImageLayout
  - System.Windows.Forms.Control.BackgroundImageLayoutChanged
  - System.Windows.Forms.Control.BeginInvoke(System.Delegate)
  - System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])
  - System.Windows.Forms.Control.BindingContext
  - System.Windows.Forms.Control.BindingContextChanged
  - System.Windows.Forms.Control.Bottom
  - System.Windows.Forms.Control.Bounds
  - System.Windows.Forms.Control.BringToFront
  - System.Windows.Forms.Control.CanEnableIme
  - System.Windows.Forms.Control.CanFocus
  - System.Windows.Forms.Control.CanRaiseEvents
  - System.Windows.Forms.Control.CanSelect
  - System.Windows.Forms.Control.Capture
  - System.Windows.Forms.Control.CausesValidation
  - System.Windows.Forms.Control.CausesValidationChanged
  - System.Windows.Forms.Control.ChangeUICues
  - System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls
  - System.Windows.Forms.Control.Click
  - System.Windows.Forms.Control.ClientRectangle
  - System.Windows.Forms.Control.ClientSize
  - System.Windows.Forms.Control.ClientSizeChanged
  - System.Windows.Forms.Control.CompanyName
  - System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)
  - System.Windows.Forms.Control.ContainsFocus
  - System.Windows.Forms.Control.ContextMenu
  - System.Windows.Forms.Control.ContextMenuChanged
  - System.Windows.Forms.Control.ContextMenuStrip
  - System.Windows.Forms.Control.ContextMenuStripChanged
  - System.Windows.Forms.Control.ControlAdded
  - System.Windows.Forms.Control.ControlRemoved
  - System.Windows.Forms.Control.Controls
  - System.Windows.Forms.Control.CreateAccessibilityInstance
  - System.Windows.Forms.Control.CreateControl
  - System.Windows.Forms.Control.CreateControlsInstance
  - System.Windows.Forms.Control.Created
  - System.Windows.Forms.Control.CreateGraphics
  - System.Windows.Forms.Control.CreateHandle
  - System.Windows.Forms.Control.CreateParams
  - System.Windows.Forms.Control.Cursor
  - System.Windows.Forms.Control.CursorChanged
  - System.Windows.Forms.Control.DataBindings
  - System.Windows.Forms.Control.DefaultBackColor
  - System.Windows.Forms.Control.DefaultCursor
  - System.Windows.Forms.Control.DefaultFont
  - System.Windows.Forms.Control.DefaultForeColor
  - System.Windows.Forms.Control.DefaultImeMode
  - System.Windows.Forms.Control.DefaultMargin
  - System.Windows.Forms.Control.DefaultMaximumSize
  - System.Windows.Forms.Control.DefaultMinimumSize
  - System.Windows.Forms.Control.DefaultPadding
  - System.Windows.Forms.Control.DefaultSize
  - System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.DestroyHandle
  - System.Windows.Forms.Control.DisplayRectangle
  - System.Windows.Forms.Control.Dispose(System.Boolean)
  - System.Windows.Forms.Control.Disposing
  - System.Windows.Forms.Control.Dock
  - System.Windows.Forms.Control.DockChanged
  - System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)
  - System.Windows.Forms.Control.DoubleBuffered
  - System.Windows.Forms.Control.DoubleClick
  - System.Windows.Forms.Control.DragDrop
  - System.Windows.Forms.Control.DragEnter
  - System.Windows.Forms.Control.DragLeave
  - System.Windows.Forms.Control.DragOver
  - System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)
  - System.Windows.Forms.Control.Enabled
  - System.Windows.Forms.Control.EnabledChanged
  - System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)
  - System.Windows.Forms.Control.Enter
  - System.Windows.Forms.Control.FindForm
  - System.Windows.Forms.Control.Focus
  - System.Windows.Forms.Control.Focused
  - System.Windows.Forms.Control.Font
  - System.Windows.Forms.Control.FontChanged
  - System.Windows.Forms.Control.FontHeight
  - System.Windows.Forms.Control.ForeColor
  - System.Windows.Forms.Control.ForeColorChanged
  - System.Windows.Forms.Control.FromChildHandle(System.IntPtr)
  - System.Windows.Forms.Control.FromHandle(System.IntPtr)
  - System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)
  - System.Windows.Forms.Control.GetAutoSizeMode
  - System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)
  - System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)
  - System.Windows.Forms.Control.GetContainerControl
  - System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)
  - System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)
  - System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)
  - System.Windows.Forms.Control.GetTopLevel
  - System.Windows.Forms.Control.GiveFeedback
  - System.Windows.Forms.Control.GotFocus
  - System.Windows.Forms.Control.Handle
  - System.Windows.Forms.Control.HandleCreated
  - System.Windows.Forms.Control.HandleDestroyed
  - System.Windows.Forms.Control.HasChildren
  - System.Windows.Forms.Control.Height
  - System.Windows.Forms.Control.HelpRequested
  - System.Windows.Forms.Control.Hide
  - System.Windows.Forms.Control.ImeMode
  - System.Windows.Forms.Control.ImeModeBase
  - System.Windows.Forms.Control.ImeModeChanged
  - System.Windows.Forms.Control.InitLayout
  - System.Windows.Forms.Control.Invalidate
  - System.Windows.Forms.Control.Invalidate(System.Boolean)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Region)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)
  - System.Windows.Forms.Control.Invalidated
  - System.Windows.Forms.Control.Invoke(System.Delegate)
  - System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])
  - System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)
  - System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)
  - System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)
  - System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.InvokeRequired
  - System.Windows.Forms.Control.IsAccessible
  - System.Windows.Forms.Control.IsDisposed
  - System.Windows.Forms.Control.IsHandleCreated
  - System.Windows.Forms.Control.IsInputChar(System.Char)
  - System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)
  - System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)
  - System.Windows.Forms.Control.IsMirrored
  - System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)
  - System.Windows.Forms.Control.KeyDown
  - System.Windows.Forms.Control.KeyPress
  - System.Windows.Forms.Control.KeyUp
  - System.Windows.Forms.Control.Layout
  - System.Windows.Forms.Control.LayoutEngine
  - System.Windows.Forms.Control.Leave
  - System.Windows.Forms.Control.Left
  - System.Windows.Forms.Control.Location
  - System.Windows.Forms.Control.LocationChanged
  - System.Windows.Forms.Control.LostFocus
  - System.Windows.Forms.Control.Margin
  - System.Windows.Forms.Control.MarginChanged
  - System.Windows.Forms.Control.MaximumSize
  - System.Windows.Forms.Control.MinimumSize
  - System.Windows.Forms.Control.ModifierKeys
  - System.Windows.Forms.Control.MouseButtons
  - System.Windows.Forms.Control.MouseCaptureChanged
  - System.Windows.Forms.Control.MouseClick
  - System.Windows.Forms.Control.MouseDoubleClick
  - System.Windows.Forms.Control.MouseDown
  - System.Windows.Forms.Control.MouseEnter
  - System.Windows.Forms.Control.MouseHover
  - System.Windows.Forms.Control.MouseLeave
  - System.Windows.Forms.Control.MouseMove
  - System.Windows.Forms.Control.MousePosition
  - System.Windows.Forms.Control.MouseUp
  - System.Windows.Forms.Control.MouseWheel
  - System.Windows.Forms.Control.Move
  - System.Windows.Forms.Control.Name
  - System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)
  - System.Windows.Forms.Control.OnClick(System.EventArgs)
  - System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)
  - System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)
  - System.Windows.Forms.Control.OnCreateControl
  - System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnDockChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)
  - System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.OnDragLeave(System.EventArgs)
  - System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnEnter(System.EventArgs)
  - System.Windows.Forms.Control.OnFontChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)
  - System.Windows.Forms.Control.OnGotFocus(System.EventArgs)
  - System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)
  - System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)
  - System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)
  - System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)
  - System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)
  - System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)
  - System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)
  - System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)
  - System.Windows.Forms.Control.OnLeave(System.EventArgs)
  - System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnLostFocus(System.EventArgs)
  - System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseHover(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMove(System.EventArgs)
  - System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)
  - System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)
  - System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)
  - System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnResize(System.EventArgs)
  - System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnTextChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnValidated(System.EventArgs)
  - System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)
  - System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)
  - System.Windows.Forms.Control.Padding
  - System.Windows.Forms.Control.PaddingChanged
  - System.Windows.Forms.Control.Paint
  - System.Windows.Forms.Control.Parent
  - System.Windows.Forms.Control.ParentChanged
  - System.Windows.Forms.Control.PerformLayout
  - System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)
  - System.Windows.Forms.Control.PointToClient(System.Drawing.Point)
  - System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)
  - System.Windows.Forms.Control.PreferredSize
  - System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.PreviewKeyDown
  - System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  - System.Windows.Forms.Control.ProcessDialogChar(System.Char)
  - System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)
  - System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.ProcessMnemonic(System.Char)
  - System.Windows.Forms.Control.ProductName
  - System.Windows.Forms.Control.ProductVersion
  - System.Windows.Forms.Control.PropagatingImeMode
  - System.Windows.Forms.Control.QueryAccessibilityHelp
  - System.Windows.Forms.Control.QueryContinueDrag
  - System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)
  - System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.RecreateHandle
  - System.Windows.Forms.Control.RecreatingHandle
  - System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.Refresh
  - System.Windows.Forms.Control.Region
  - System.Windows.Forms.Control.RegionChanged
  - System.Windows.Forms.Control.RenderRightToLeft
  - System.Windows.Forms.Control.ResetBackColor
  - System.Windows.Forms.Control.ResetBindings
  - System.Windows.Forms.Control.ResetCursor
  - System.Windows.Forms.Control.ResetFont
  - System.Windows.Forms.Control.ResetForeColor
  - System.Windows.Forms.Control.ResetImeMode
  - System.Windows.Forms.Control.ResetMouseEventArgs
  - System.Windows.Forms.Control.ResetRightToLeft
  - System.Windows.Forms.Control.ResetText
  - System.Windows.Forms.Control.Resize
  - System.Windows.Forms.Control.ResizeRedraw
  - System.Windows.Forms.Control.ResumeLayout
  - System.Windows.Forms.Control.ResumeLayout(System.Boolean)
  - System.Windows.Forms.Control.Right
  - System.Windows.Forms.Control.RightToLeft
  - System.Windows.Forms.Control.RightToLeftChanged
  - System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)
  - System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)
  - System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)
  - System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)
  - System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)
  - System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)
  - System.Windows.Forms.Control.Scale(System.Drawing.SizeF)
  - System.Windows.Forms.Control.Scale(System.Single)
  - System.Windows.Forms.Control.Scale(System.Single,System.Single)
  - System.Windows.Forms.Control.ScaleChildren
  - System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)
  - System.Windows.Forms.Control.Select
  - System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)
  - System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - System.Windows.Forms.Control.SendToBack
  - System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)
  - System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)
  - System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)
  - System.Windows.Forms.Control.SetTopLevel(System.Boolean)
  - System.Windows.Forms.Control.SetVisibleCore(System.Boolean)
  - System.Windows.Forms.Control.Show
  - System.Windows.Forms.Control.ShowFocusCues
  - System.Windows.Forms.Control.ShowKeyboardCues
  - System.Windows.Forms.Control.Site
  - System.Windows.Forms.Control.Size
  - System.Windows.Forms.Control.SizeChanged
  - System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)
  - System.Windows.Forms.Control.StyleChanged
  - System.Windows.Forms.Control.SuspendLayout
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.SystemColorsChanged
  - System.Windows.Forms.Control.TabIndex
  - System.Windows.Forms.Control.TabIndexChanged
  - System.Windows.Forms.Control.TabStop
  - System.Windows.Forms.Control.TabStopChanged
  - System.Windows.Forms.Control.Tag
  - System.Windows.Forms.Control.Text
  - System.Windows.Forms.Control.TextChanged
  - System.Windows.Forms.Control.Top
  - System.Windows.Forms.Control.TopLevelControl
  - System.Windows.Forms.Control.Update
  - System.Windows.Forms.Control.UpdateBounds
  - System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.UpdateStyles
  - System.Windows.Forms.Control.UpdateZOrder
  - System.Windows.Forms.Control.UseWaitCursor
  - System.Windows.Forms.Control.Validated
  - System.Windows.Forms.Control.Validating
  - System.Windows.Forms.Control.Visible
  - System.Windows.Forms.Control.VisibleChanged
  - System.Windows.Forms.Control.Width
  - System.Windows.Forms.Control.WindowTarget
  - System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)
  langs:
  - csharp
  name: Control
  nameWithType: Control
  fullName: System.Windows.Forms.Control
  type: Class
  summary: "Defines the base class for controls, which are components with visual representation."
  remarks: "To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, Control classes, or from the other Windows Forms provided controls. For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](~/add/includes/ajax-current-ext-md.md).       The Control class implements very basic functionality required by classes that display information to the user. It handles user input through the keyboard and pointing devices. It handles message routing and security. It defines the bounds of a control (its position and size), although it does not implement painting. It provides a window handle (`hWnd`).       Windows Forms controls use ambient properties so child controls can appear like their surrounding environment. An *ambient property* is a control property that, if not set, is retrieved from the parent control. If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property. If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values. Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. Ambient properties provided by the Controlclass include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.      > [!NOTE] >  To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to `System` and include a manifest with your executable. A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file. For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration. For more information about using visual styles, see[Visual Styles](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx).       Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities. Sometimes you will want to provide additional information to accessibility client applications. There are two ways of providing this additional information. You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications. This method is typically used to provide limited accessibility information for existing controls. Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.      > [!NOTE] >  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.      > [!NOTE] >  Do not add data bindings for a Control in its constructor. Doing so will cause errors in code generation and can cause unwanted behavior.       The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on. For more information about the Windows common controls, see[General Control Reference](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx).       To identify Windows Forms controls from a separate process, use a standard `SendMessage` call to pass the WM_GETCONTROLNAME message. WM_GETCONTROLNAME is independent of the language and Windows hierarchy. For more information, see the &quot;Recommended Solution for Windows Forms&quot; topic in[Automating Windows Forms](http://msdn.microsoft.com/library/ms996405.aspx).       Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads. For more information about multithreaded Windows Forms controls, see [How to: Make Thread-Safe Calls to Windows Forms Controls](~/add/includes/ajax-current-ext-md.md)"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Click")]

      [System.ComponentModel.DefaultProperty("Text")]

      [System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]

      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISynchronizeInvoke
  - System.IDisposable
  - System.Windows.Forms.IBindableComponent
  - System.Windows.Forms.IDropTarget
  - System.Windows.Forms.IWin32Window
  inheritedMembers:
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.Control.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Control()
  nameWithType: Control.Control()
  fullName: System.Windows.Forms.Control.Control()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class with default settings."
  remarks: "The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class."
  syntax:
    content: public Control ();
    parameters: []
  overload: System.Windows.Forms.Control.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Control(String)
  nameWithType: Control.Control(String)
  fullName: System.Windows.Forms.Control.Control(String)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class with specific text."
  remarks: "The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.       This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value."
  syntax:
    content: public Control (string text);
    parameters:
    - id: text
      type: System.String
      description: "The text displayed by the control."
  overload: System.Windows.Forms.Control.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)
  id: '#ctor(System.Windows.Forms.Control,System.String)'
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Control(Control,String)
  nameWithType: Control.Control(Control,String)
  fullName: System.Windows.Forms.Control.Control(Control,String)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class as a child control, with specific text."
  remarks: "The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.       This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value. The constructor also adds the control to the parent control&quot;s <xref:System.Windows.Forms.Control.ControlCollection>."
  syntax:
    content: public Control (System.Windows.Forms.Control parent, string text);
    parameters:
    - id: parent
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to be the parent of the control."
    - id: text
      type: System.String
      description: "The text displayed by the control."
  overload: System.Windows.Forms.Control.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Control(String,Int32,Int32,Int32,Int32)
  nameWithType: Control.Control(String,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.Control(String,Int32,Int32,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class with specific text, size, and location."
  remarks: "The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.       This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A>property value to the `text` parameter value. The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.      > [!NOTE] >  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property."
  syntax:
    content: public Control (string text, int left, int top, int width, int height);
    parameters:
    - id: text
      type: System.String
      description: "The text displayed by the control."
    - id: left
      type: System.Int32
      description: "The <xref:System.Drawing.Point.X*> position of the control, in pixels, from the left edge of the control&quot;s container. The value is assigned to the <xref:System.Windows.Forms.Control.Left*> property."
    - id: top
      type: System.Int32
      description: "The <xref:System.Drawing.Point.Y*> position of the control, in pixels, from the top edge of the control&quot;s container. The value is assigned to the <xref:System.Windows.Forms.Control.Top*> property."
    - id: width
      type: System.Int32
      description: "The width of the control, in pixels. The value is assigned to the <xref:System.Windows.Forms.Control.Width*> property."
    - id: height
      type: System.Int32
      description: "The height of the control, in pixels. The value is assigned to the <xref:System.Windows.Forms.Control.Height*> property."
  overload: System.Windows.Forms.Control.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Control(Control,String,Int32,Int32,Int32,Int32)
  nameWithType: Control.Control(Control,String,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.Control(Control,String,Int32,Int32,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class as a child control, with specific text, size, and location."
  remarks: "The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.       This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value. The constructor also adds the control to the parent control&quot;s <xref:System.Windows.Forms.Control.ControlCollection>. The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.      > [!NOTE] >  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property."
  syntax:
    content: public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);
    parameters:
    - id: parent
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to be the parent of the control."
    - id: text
      type: System.String
      description: "The text displayed by the control."
    - id: left
      type: System.Int32
      description: "The <xref:System.Drawing.Point.X*> position of the control, in pixels, from the left edge of the control&quot;s container. The value is assigned to the <xref:System.Windows.Forms.Control.Left*> property."
    - id: top
      type: System.Int32
      description: "The <xref:System.Drawing.Point.Y*> position of the control, in pixels, from the top edge of the control&quot;s container. The value is assigned to the <xref:System.Windows.Forms.Control.Top*> property."
    - id: width
      type: System.Int32
      description: "The width of the control, in pixels. The value is assigned to the <xref:System.Windows.Forms.Control.Width*> property."
    - id: height
      type: System.Int32
      description: "The height of the control, in pixels. The value is assigned to the <xref:System.Windows.Forms.Control.Height*> property."
  overload: System.Windows.Forms.Control.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)
  id: AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibilityNotifyClients(AccessibleEvents,Int32)
  nameWithType: Control.AccessibilityNotifyClients(AccessibleEvents,Int32)
  fullName: System.Windows.Forms.Control.AccessibilityNotifyClients(AccessibleEvents,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Notifies the accessibility client applications of the specified <xref href=&quot;System.Windows.Forms.AccessibleEvents&quot;></xref> for the specified child control."
  remarks: "You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=fullName> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of. The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler. For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of `Hide` from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=fullName> event."
  example:
  - "The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  \n  \n This code excerpt demonstrates calling the AccessibilityNotifyClients method. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  \n  \n [!code-vb[System.Windows.Forms.AccessibleObject#5](~/add/codesnippet/visualbasic/af0c391d-8e12-4af6-b124-_1.vb)]\n [!code-cs[System.Windows.Forms.AccessibleObject#5](~/add/codesnippet/csharp/af0c391d-8e12-4af6-b124-_1.cs)]\n [!code-cpp[System.Windows.Forms.AccessibleObject#5](~/add/codesnippet/cpp/af0c391d-8e12-4af6-b124-_1.cpp)]"
  syntax:
    content: protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);
    parameters:
    - id: accEvent
      type: System.Windows.Forms.AccessibleEvents
      description: "The <xref href=&quot;System.Windows.Forms.AccessibleEvents&quot;></xref> to notify the accessibility client applications of."
    - id: childID
      type: System.Int32
      description: "The child <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to notify of the accessible event."
  overload: System.Windows.Forms.Control.AccessibilityNotifyClients*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)
  id: AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)
  nameWithType: Control.AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)
  fullName: System.Windows.Forms.Control.AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Notifies the accessibility client applications of the specified <xref href=&quot;System.Windows.Forms.AccessibleEvents&quot;></xref> for the specified child control ."
  syntax:
    content: protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);
    parameters:
    - id: accEvent
      type: System.Windows.Forms.AccessibleEvents
      description: "The <xref href=&quot;System.Windows.Forms.AccessibleEvents&quot;></xref> to notify the accessibility client applications of."
    - id: objectID
      type: System.Int32
      description: "The identifier of the <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref>."
    - id: childID
      type: System.Int32
      description: "The child <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to notify of the accessible event."
  overload: System.Windows.Forms.Control.AccessibilityNotifyClients*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibilityObject
  id: AccessibilityObject
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibilityObject
  nameWithType: Control.AccessibilityObject
  fullName: System.Windows.Forms.Control.AccessibilityObject
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref> assigned to the control."
  remarks: "To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.       If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.      > [!NOTE] >  To get or set the AccessibilityObject property, you must add a reference to the `Accessibility` assembly installed with the[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].       For more information about accessible objects, see [Active Accessibility](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)."
  syntax:
    content: public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }
    return:
      type: System.Windows.Forms.AccessibleObject
      description: "The <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref> assigned to the control."
  overload: System.Windows.Forms.Control.AccessibilityObject*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibleDefaultActionDescription
  id: AccessibleDefaultActionDescription
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibleDefaultActionDescription
  nameWithType: Control.AccessibleDefaultActionDescription
  fullName: System.Windows.Forms.Control.AccessibleDefaultActionDescription
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the default action description of the control for use by accessibility client applications."
  remarks: "An object&quot;s AccessibleDefaultActionDescription property describes the object&quot;s primary method of manipulation from the user&quot;s viewpoint. This property should be a verb or a short verb phrase.      > [!NOTE] >  Not all objects have default actions, and some objects might have a default action that is related to its <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=fullName> property, such as in the following examples:      -   A selected check box has a default action of &quot;Uncheck&quot; and a value of &quot;Checked.&quot;      -   A cleared check box has a default action of &quot;Check&quot; and a value of &quot;Unchecked.&quot;      -   A button labeled &quot;Print&quot; has a default action of &quot;Press,&quot; with no value.      -   A label or a text box control that shows &quot;Printer&quot; has no default action, but would have a value of &quot;Printer.&quot;       For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)."
  syntax:
    content: public string AccessibleDefaultActionDescription { get; set; }
    return:
      type: System.String
      description: "The default action description of the control for use by accessibility client applications."
  overload: System.Windows.Forms.Control.AccessibleDefaultActionDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibleDescription
  id: AccessibleDescription
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibleDescription
  nameWithType: Control.AccessibleDescription
  fullName: System.Windows.Forms.Control.AccessibleDescription
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the description of the control used by accessibility client applications."
  remarks: "An object&quot;s AccessibleDescription property provides a textual description about an object&quot;s visual appearance. The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.       The AccessibleDescription property is needed if the description is not obvious, or if it is redundant based on the object&quot;s <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties. For example, a button with &quot;OK&quot; would not need additional information, but a button that shows a picture of a cactus would. The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> (and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>) properties for the cactus button would describe its purpose, but the AccessibleDescription property would convey information that is less tangible, such as &quot;A button that shows a picture of a cactus.&quot;       For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)."
  example:
  - "The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and AccessibleDescription properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is `null`. This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.  \n  \n [!code-cs[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/csharp/p-system.windows.forms.c_91_1.cs)]\n [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/cpp/p-system.windows.forms.c_91_1.cpp)]\n [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_91_1.vb)]"
  syntax:
    content: public string AccessibleDescription { get; set; }
    return:
      type: System.String
      description: "The description of the control used by accessibility client applications. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.AccessibleDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibleName
  id: AccessibleName
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibleName
  nameWithType: Control.AccessibleName
  fullName: System.Windows.Forms.Control.AccessibleName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the name of the control used by accessibility client applications."
  remarks: "The AccessibleName property is a label that briefly describes and identifies the object within its container, such as the text in a <xref:System.Windows.Forms.Button>, the name of a <xref:System.Windows.Forms.MenuItem>, or a label displayed next to a <xref:System.Windows.Forms.TextBox> control.       For more information about properties of accessible objects, see the &quot;[Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)."
  example:
  - "The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the AccessibleName and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties since the <xref:System.Windows.Forms.Control.Text%2A> property is `null`. This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.  \n  \n [!code-cs[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/csharp/p-system.windows.forms.c_35_1.cs)]\n [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/cpp/p-system.windows.forms.c_35_1.cpp)]\n [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_35_1.vb)]"
  syntax:
    content: public string AccessibleName { get; set; }
    return:
      type: System.String
      description: "The name of the control used by accessibility client applications. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.AccessibleName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AccessibleRole
  id: AccessibleRole
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AccessibleRole
  nameWithType: Control.AccessibleRole
  fullName: System.Windows.Forms.Control.AccessibleRole
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the accessible role of the control"
  remarks: "The AccessibleRole property describes what kind of user interface element an object is. If the control&quot;s role cannot be determined, the AccessibleRole property is set to `Default`.       For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)."
  syntax:
    content: public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }
    return:
      type: System.Windows.Forms.AccessibleRole
      description: "One of the values of <xref href=&quot;System.Windows.Forms.AccessibleRole&quot;></xref>. The default is <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.AccessibleRole*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value assigned is not one of the <xref href=&quot;System.Windows.Forms.AccessibleRole&quot;></xref> values."
  platform:
  - net462
- uid: System.Windows.Forms.Control.AllowDrop
  id: AllowDrop
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AllowDrop
  nameWithType: Control.AllowDrop
  fullName: System.Windows.Forms.Control.AllowDrop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control can accept data that the user drags onto it."
  remarks: ''
  example:
  - "The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.  \n  \n [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/p-system.windows.forms.c_93_1.cs)]\n [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/p-system.windows.forms.c_93_1.cpp)]\n [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_93_1.vb)]"
  syntax:
    content: public virtual bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if drag-and-drop operations are allowed in the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Anchor
  id: Anchor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Anchor
  nameWithType: Control.Anchor
  fullName: System.Windows.Forms.Control.Anchor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent."
  remarks: "Use the Anchor property to define how a control is automatically resized as its parent control is resized. Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.       You can anchor a control to one or more edges of its container. For example, if you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> whose Anchor property value is set to `Top` and `Bottom`, the <xref:System.Windows.Forms.Button> is stretched to maintain the anchored distance to the top and bottom edges of the <xref:System.Windows.Forms.Form> as the <xref:System.Windows.Forms.Control.Height%2A> of the <xref:System.Windows.Forms.Form> is increased.      > [!NOTE] >  The Anchor and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence."
  example:
  - "The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  \n  \n [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_119_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_119_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_119_1.vb)]"
  syntax:
    content: public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }
    return:
      type: System.Windows.Forms.AnchorStyles
      description: "A bitwise combination of the <xref href=&quot;System.Windows.Forms.AnchorStyles&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_Top&quot; name=&quot;Top&quot; href=&quot;&quot;></xref> and <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Anchor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AutoScrollOffset
  id: AutoScrollOffset
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AutoScrollOffset
  nameWithType: Control.AutoScrollOffset
  fullName: System.Windows.Forms.Control.AutoScrollOffset
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets where this control is scrolled to in <xref:System.Windows.Forms.ScrollableControl.ScrollControlIntoView*>."
  syntax:
    content: public virtual System.Drawing.Point AutoScrollOffset { get; set; }
    return:
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> specifying the scroll location. The default is the upper-left corner of the control."
  overload: System.Windows.Forms.Control.AutoScrollOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AutoSize
  id: AutoSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AutoSize
  nameWithType: Control.AutoSize
  fullName: System.Windows.Forms.Control.AutoSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This property is not relevant for this class."
  remarks: "This property is not relevant for this class."
  syntax:
    content: public virtual bool AutoSize { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.AutoSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.AutoSizeChanged
  id: AutoSizeChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: AutoSizeChanged
  nameWithType: Control.AutoSizeChanged
  fullName: System.Windows.Forms.Control.AutoSizeChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This event is not relevant for this class."
  remarks: "This event is not relevant for this class."
  syntax:
    content: public event EventHandler AutoSizeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BackColor
  id: BackColor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BackColor
  nameWithType: Control.BackColor
  fullName: System.Windows.Forms.Control.BackColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the background color for the control."
  remarks: "The BackColor property does not support transparent colors unless the `SupportsTransparentBackColor` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> is set to `true`.       The BackColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same BackColor as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview."
  example:
  - "The following code example sets the BackColor and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.  \n  \n [!code-cs[Windows.Forms.Control Properties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_44_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_44_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_44_1.vb)]"
  syntax:
    content: public virtual System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> that represents the background color of the control. The default is the value of the <xref:System.Windows.Forms.Control.DefaultBackColor*> property."
  overload: System.Windows.Forms.Control.BackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BackColorChanged
  id: BackColorChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BackColorChanged
  nameWithType: Control.BackColorChanged
  fullName: System.Windows.Forms.Control.BackColorChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.BackColor*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.BackColor%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form>that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_47_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_47_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_47_1.cpp)]"
  syntax:
    content: public event EventHandler BackColorChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BackgroundImage
  id: BackgroundImage
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BackgroundImage
  nameWithType: Control.BackgroundImage
  fullName: System.Windows.Forms.Control.BackgroundImage
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the background image displayed in the control."
  remarks: "-   Use the BackgroundImage property to place a graphic image onto a control.      > [!NOTE] >  Images with translucent or transparent colors are not supported by Windows Forms controls as background images.   >    >  This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is `true`."
  example:
  - "The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the BackgroundImage and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  \n  \n [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_34_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_34_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_34_1.vb)]"
  syntax:
    content: public virtual System.Drawing.Image BackgroundImage { get; set; }
    return:
      type: System.Drawing.Image
      description: "An <xref href=&quot;System.Drawing.Image&quot;></xref> that represents the image to display in the background of the control."
  overload: System.Windows.Forms.Control.BackgroundImage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BackgroundImageChanged
  id: BackgroundImageChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BackgroundImageChanged
  nameWithType: Control.BackgroundImageChanged
  fullName: System.Windows.Forms.Control.BackgroundImageChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.BackgroundImage*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_46_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_46_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_46_1.cpp)]"
  syntax:
    content: public event EventHandler BackgroundImageChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BackgroundImageLayout
  id: BackgroundImageLayout
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BackgroundImageLayout
  nameWithType: Control.BackgroundImageLayout
  fullName: System.Windows.Forms.Control.BackgroundImageLayout
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the background image layout as defined in the <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref> enumeration."
  remarks: "Use the BackgroundImageLayout property to specify the position and behavior of an image you have placed onto a control. BackgroundImageLayout takes effect only if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is set.       You can increase performance for large images if you set BackgroundImageLayout to something other than <xref:System.Windows.Forms.ImageLayout>."
  syntax:
    content: public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }
    return:
      type: System.Windows.Forms.ImageLayout
      description: "One of the values of <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref> (<xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref> , <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref>, <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref>, <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref>, or <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref>). <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref> is the default value."
  overload: System.Windows.Forms.Control.BackgroundImageLayout*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The specified enumeration value does not exist."
  platform:
  - net462
- uid: System.Windows.Forms.Control.BackgroundImageLayoutChanged
  id: BackgroundImageLayoutChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BackgroundImageLayoutChanged
  nameWithType: Control.BackgroundImageLayoutChanged
  fullName: System.Windows.Forms.Control.BackgroundImageLayoutChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.BackgroundImageLayout*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property changes either programmatically or by user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BackgroundImageLayoutChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the BackgroundImageLayoutChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#9](~/add/codesnippet/csharp/e-system.windows.forms.c_5_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#9](~/add/codesnippet/visualbasic/e-system.windows.forms.c_5_1.vb)]"
  syntax:
    content: public event EventHandler BackgroundImageLayoutChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BeginInvoke(System.Delegate)
  id: BeginInvoke(System.Delegate)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BeginInvoke(Delegate)
  nameWithType: Control.BeginInvoke(Delegate)
  fullName: System.Windows.Forms.Control.BeginInvoke(Delegate)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes the specified delegate asynchronously on the thread that the control&quot;s underlying handle was created on."
  remarks: "The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control&quot;s handle. If the control&quot;s handle does not exist yet, this method searches up the control&quot;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, BeginInvoke will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application&quot;s untrapped exception handler.       You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required. <xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.      > [!NOTE] >  Most methods on a control can only be called from the thread where the control was created. In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, BeginInvoke, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&quot;s thread. The invoke methods always invoke their callbacks on the control&quot;s thread.      > [!NOTE] >  An exception might be thrown if the thread that should process the message is no longer active."
  example:
  - "The following code example demonstrates a use of the BeginInvoke method.  \n  \n [!code-cpp[Control_BeginInvoke#2](~/add/codesnippet/cpp/m-system.windows.forms.c_68_1.cpp)]\n [!code-vb[Control_BeginInvoke#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_68_1.vb)]\n [!code-cs[Control_BeginInvoke#2](~/add/codesnippet/csharp/m-system.windows.forms.c_68_1.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (Delegate method);
    parameters:
    - id: method
      type: System.Delegate
      description: "A delegate to a method that takes no parameters."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> that represents the result of the BeginInvoke operation."
  overload: System.Windows.Forms.Control.BeginInvoke*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No appropriate window handle can be found."
  platform:
  - net462
- uid: System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])
  id: BeginInvoke(System.Delegate,System.Object[])
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BeginInvoke(Delegate,Object[])
  nameWithType: Control.BeginInvoke(Delegate,Object[])
  fullName: System.Windows.Forms.Control.BeginInvoke(Delegate,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes the specified delegate asynchronously with the specified arguments, on the thread that the control&quot;s underlying handle was created on."
  remarks: "The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control&quot;s handle. If the control&quot;s handle does not exist yet, this method searches up the control&quot;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application&quot;s untrapped exception handler.       You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required. <xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.      > [!NOTE] >  Most methods on a control can only be called from the thread where the control was created. In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&quot;s thread. The invoke methods always invoke their callbacks on the control&quot;s thread.      > [!NOTE] >  An exception might be thrown if the thread that should process the message is no longer active."
  example:
  - "The following code example demonstrates a use of the BeginInvoke method.  \n  \n [!code-cpp[Control_BeginInvoke#1](~/add/codesnippet/cpp/m-system.windows.forms.c_33_1.cpp)]\n [!code-vb[Control_BeginInvoke#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_33_1.vb)]\n [!code-cs[Control_BeginInvoke#1](~/add/codesnippet/csharp/m-system.windows.forms.c_33_1.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "A delegate to a method that takes parameters of the same number and type that are contained in the `args` parameter."
    - id: args
      type: System.Object[]
      description: "An array of objects to pass as arguments to the given method. This can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no arguments are needed."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> that represents the result of the <xref:System.Windows.Forms.Control.BeginInvoke*> operation."
  overload: System.Windows.Forms.Control.BeginInvoke*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No appropriate window handle can be found."
  platform:
  - net462
- uid: System.Windows.Forms.Control.BindingContext
  id: BindingContext
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BindingContext
  nameWithType: Control.BindingContext
  fullName: System.Windows.Forms.Control.BindingContext
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the <xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref> for the control."
  remarks: "The <xref:System.Windows.Forms.BindingContext> of a <xref:System.Windows.Forms.Control> is used to return a single<xref:System.Windows.Forms.BindingManagerBase> for all data-bound controls contained by the <xref:System.Windows.Forms.Control>. The <xref:System.Windows.Forms.BindingManagerBase> keeps all controls that are bound to the same data source synchronized. For example, setting the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property of the <xref:System.Windows.Forms.BindingManagerBase> specifies the item in the underlying list that all data-bound controls point to.       For more information about creating a new <xref:System.Windows.Forms.BindingContext> and assigning it to the BindingContext property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A>."
  example:
  - "The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls, a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls, to several data sources. The <xref:System.Windows.Forms.BindingContext> is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.  \n  \n [!code-cpp[Classic BindingContext Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_109_1.cpp)]\n [!code-cs[Classic BindingContext Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_109_1.cs)]\n [!code-vb[Classic BindingContext Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_109_1.vb)]"
  syntax:
    content: public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }
    return:
      type: System.Windows.Forms.BindingContext
      description: "A <xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref> for the control."
  overload: System.Windows.Forms.Control.BindingContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BindingContextChanged
  id: BindingContextChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BindingContextChanged
  nameWithType: Control.BindingContextChanged
  fullName: System.Windows.Forms.Control.BindingContextChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref> property changes."
  remarks: "To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.       This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example adds an <xref:System.EventHandler> delegate to the BindingContextChanged event of a <xref:System.Windows.Forms.TextBox> control.  \n  \n [!code-vb[Classic Control.BindingContextChanged Example#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_1_1.vb)]\n [!code-cs[Classic Control.BindingContextChanged Example#1](~/add/codesnippet/csharp/e-system.windows.forms.c_1_1.cs)]\n [!code-cpp[Classic Control.BindingContextChanged Example#1](~/add/codesnippet/cpp/e-system.windows.forms.c_1_1.cpp)]"
  syntax:
    content: public event EventHandler BindingContextChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Bottom
  id: Bottom
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Bottom
  nameWithType: Control.Bottom
  fullName: System.Windows.Forms.Control.Bottom
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container&quot;s client area."
  remarks: "The value of this property is equal to the sum of the <xref:System.Windows.Forms.Control.Top%2A> property value, and the <xref:System.Windows.Forms.Control.Height%2A> property value.       The Bottom property is a read-only property. You can manipulate this property value by changing the value of the <xref:System.Windows.Forms.Control.Top%2A> or <xref:System.Windows.Forms.Control.Height%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods."
  example:
  - "The following code example uses the Bottom property to define the lower limit of a <xref:System.Windows.Forms.TextBox> control relative to the client area of the container.  \n  \n [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/p-system.windows.forms.c_53_1.cpp)]\n [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_53_1.vb)]\n [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/p-system.windows.forms.c_53_1.cs)]"
  syntax:
    content: public int Bottom { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container&quot;s client area."
  overload: System.Windows.Forms.Control.Bottom*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Bounds
  id: Bounds
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Bounds
  nameWithType: Control.Bounds
  fullName: System.Windows.Forms.Control.Bounds
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control."
  remarks: "The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus. The <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method is called to set the Bounds property. The Boundsproperty is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that your code is executed when the Bounds property is set."
  example:
  - "The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  \n  \n [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_114_1.cs)]\n [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_114_1.cpp)]\n [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_114_1.vb)]"
  syntax:
    content: public System.Drawing.Rectangle Bounds { get; set; }
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements."
  overload: System.Windows.Forms.Control.Bounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.BringToFront
  id: BringToFront
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: BringToFront()
  nameWithType: Control.BringToFront()
  fullName: System.Windows.Forms.Control.BringToFront()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Brings the control to the front of the z-order."
  remarks: "The control is moved to the front of the z-order. If the control is a child of another control, the child control is moved to the front of the z-order. BringToFront does not make a control a top-level control, and it does not raise the <xref:System.Windows.Forms.Control.Paint> event."
  example:
  - "The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its BringToFront method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.  \n  \n [!code-cs[Windows.Forms.Control Members4#1](~/add/codesnippet/csharp/m-system.windows.forms.c_59_1.cs)]\n [!code-vb[Windows.Forms.Control Members4#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_59_1.vb)]\n [!code-cpp[Windows.Forms.Control Members4#1](~/add/codesnippet/cpp/m-system.windows.forms.c_59_1.cpp)]"
  syntax:
    content: public void BringToFront ();
    parameters: []
  overload: System.Windows.Forms.Control.BringToFront*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CanEnableIme
  id: CanEnableIme
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CanEnableIme
  nameWithType: Control.CanEnableIme
  fullName: System.Windows.Forms.Control.CanEnableIme
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the <xref:System.Windows.Forms.Control.ImeMode*> property can be set to an active value, to enable IME support."
  remarks: "Derived classes can override this property to return `false` if IME is not supported."
  syntax:
    content: protected virtual bool CanEnableIme { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Windows.Forms.Control.CanEnableIme*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CanFocus
  id: CanFocus
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CanFocus
  nameWithType: Control.CanFocus
  fullName: System.Windows.Forms.Control.CanFocus
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control can receive focus."
  remarks: "In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to `true` for both the control and all its parent controls, and the control must be a form or the control&quot;s outermost parent must be a form."
  example:
  - "The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#1](~/add/codesnippet/cpp/p-system.windows.forms.c_18_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#1](~/add/codesnippet/csharp/p-system.windows.forms.c_18_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_18_1.vb)]"
  syntax:
    content: public bool CanFocus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control can receive focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.CanFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CanRaiseEvents
  id: CanRaiseEvents
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CanRaiseEvents
  nameWithType: Control.CanRaiseEvents
  fullName: System.Windows.Forms.Control.CanRaiseEvents
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines if events can be raised on the control."
  remarks: "If this control is being hosted as an ActiveX control, this property will return `false` if the ActiveX control has its events frozen."
  syntax:
    content: protected override bool CanRaiseEvents { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.CanRaiseEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CanSelect
  id: CanSelect
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CanSelect
  nameWithType: Control.CanSelect
  fullName: System.Windows.Forms.Control.CanSelect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control can be selected."
  remarks: "This property returns `true` if the `Selectable` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> is set to `true`, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.       The Windows Forms controls in the following list are not selectable and will return a value of `false` for the CanSelect property. Controls derived from these controls are also not selectable.      -   <xref:System.Windows.Forms.Panel>      -   <xref:System.Windows.Forms.GroupBox>      -   <xref:System.Windows.Forms.PictureBox>      -   <xref:System.Windows.Forms.ProgressBar>      -   <xref:System.Windows.Forms.Splitter>      -   <xref:System.Windows.Forms.Label>      -   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)"
  example:
  - "The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#2](~/add/codesnippet/cpp/p-system.windows.forms.c_67_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#2](~/add/codesnippet/csharp/p-system.windows.forms.c_67_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_67_1.vb)]"
  syntax:
    content: public bool CanSelect { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control can be selected; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.CanSelect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Capture
  id: Capture
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Capture
  nameWithType: Control.Capture
  fullName: System.Windows.Forms.Control.Capture
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control has captured the mouse."
  remarks: "When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders. The mouse is typically only captured during drag operations.       Only the foreground window can capture the mouse. When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.       When the mouse is captured, shortcut keys should not work."
  example:
  - "The following code example demonstrates the Capture property. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2. Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.  \n  \n [!code-vb[System.Windows.Forms.ControlCapture#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_104_1.vb)]\n [!code-cpp[System.Windows.Forms.ControlCapture#1](~/add/codesnippet/cpp/p-system.windows.forms.c_104_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlCapture#1](~/add/codesnippet/csharp/p-system.windows.forms.c_104_1.cs)]"
  syntax:
    content: public bool Capture { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control has captured the mouse; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CausesValidation
  id: CausesValidation
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CausesValidation
  nameWithType: Control.CausesValidation
  fullName: System.Windows.Forms.Control.CausesValidation
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus."
  remarks: "If the CausesValidation property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.       The CausesValidation property value is typically set to `false` for controls such as a Help button."
  example:
  - "The following code example uses the derived class<xref:System.Windows.Forms.TextBox> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing \"@\" and \".\"), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled. One of the buttons on the form has its CausesValidation property set to `false`. Clicking or setting focus to this button does not trigger validation. This example requires that a <xref:System.Windows.Forms.TextBox>, an <xref:System.Windows.Forms.ErrorProvider> control, and a <xref:System.Windows.Forms.Button> have been created on a form.  \n  \n [!code-cs[Control.Validating#2](~/add/codesnippet/csharp/p-system.windows.forms.c_66_1.cs)]\n [!code-cpp[Control.Validating#2](~/add/codesnippet/cpp/p-system.windows.forms.c_66_1.cpp)]\n [!code-vb[Control.Validating#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_66_1.vb)]"
  syntax:
    content: public bool CausesValidation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.CausesValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CausesValidationChanged
  id: CausesValidationChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CausesValidationChanged
  nameWithType: Control.CausesValidationChanged
  fullName: System.Windows.Forms.Control.CausesValidationChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.CausesValidation*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event EventHandler CausesValidationChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ChangeUICues
  id: ChangeUICues
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ChangeUICues
  nameWithType: Control.ChangeUICues
  fullName: System.Windows.Forms.Control.ChangeUICues
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the focus or keyboard user interface (UI) cues change."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ChangeUICues event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the ChangeUICues event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#67](~/add/codesnippet/csharp/e-system.windows.forms.c_50_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#67](~/add/codesnippet/visualbasic/e-system.windows.forms.c_50_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.UICuesEventHandler ChangeUICues;
    return:
      type: System.Windows.Forms.UICuesEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls
  id: CheckForIllegalCrossThreadCalls
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CheckForIllegalCrossThreadCalls
  nameWithType: Control.CheckForIllegalCrossThreadCalls
  fullName: System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether to catch calls on the wrong thread that access a control&quot;s <xref:System.Windows.Forms.Control.Handle*> property when an application is being debugged."
  remarks: "When a thread other than the creating thread of a control tries to access one of that control&quot;s methods or properties, it often leads to unpredictable results. A common invalid thread activity is a call on the wrong thread that accesses the control&quot;s <xref:System.Windows.Forms.Control.Handle%2A> property. Set CheckForIllegalCrossThreadCalls to `true` to find and diagnose this thread activity more easily while debugging."
  syntax:
    content: public static bool CheckForIllegalCrossThreadCalls { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if calls on the wrong thread are caught; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Click
  id: Click
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Click
  nameWithType: Control.Click
  fullName: System.Windows.Forms.Control.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is clicked."
  remarks: "The Click event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred. If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <xref:System.Windows.Forms.Control.MouseClick> event. However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.       A double-click is determined by the mouse settings of the user&quot;s operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The Click event is raised every time a control is double-clicked. For example, if you have event handlers for the Click and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the Click and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called. If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the Click event might be raised twice.       You must set the `StandardClick` value of<xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: Click, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example shows the Click event in an event handler.  \n  \n [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/e-system.windows.forms.c_21_1.cpp)]\n [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_21_1.vb)]\n [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/e-system.windows.forms.c_21_1.cs)]"
  syntax:
    content: public event EventHandler Click;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ClientRectangle
  id: ClientRectangle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ClientRectangle
  nameWithType: Control.ClientRectangle
  fullName: System.Windows.Forms.Control.ClientRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the rectangle that represents the client area of the control."
  remarks: "The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.       Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0). You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.       For more information about drawing on controls, see [Rendering a Windows Forms Control](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.  \n  \n [!code-cpp[Windows.Forms.Control Member5#2](~/add/codesnippet/cpp/p-system.windows.forms.c_86_1.cpp)]\n [!code-cs[Windows.Forms.Control Member5#2](~/add/codesnippet/csharp/p-system.windows.forms.c_86_1.cs)]\n [!code-vb[Windows.Forms.Control Member5#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_86_1.vb)]"
  syntax:
    content: public System.Drawing.Rectangle ClientRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that represents the client area of the control."
  overload: System.Windows.Forms.Control.ClientRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ClientSize
  id: ClientSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ClientSize
  nameWithType: Control.ClientSize
  fullName: System.Windows.Forms.Control.ClientSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the height and width of the client area of the control."
  remarks: "The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus. The <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method is called to set the ClientSizeproperty. The ClientSize property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that your code is executed when the ClientSize property is set.       The <xref:System.Drawing.Size.Width%2A?displayProperty=fullName> and <xref:System.Drawing.Size.Height%2A?displayProperty=fullName> properties represent the width and height of the client area of the control. You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.       For more information about drawing on controls, see [Rendering a Windows Forms Control](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  You cannot bind application settings to this property. For more information on application settings, see [Application Settings Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example resizes the specified control so the control will accommodate its formatted text. The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text. The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the <xref:System.Drawing.ContentAlignment?displayProperty=fullName> value, if your control supports it.  \n  \n [!code-cpp[Windows.Forms.Control Member5#1](~/add/codesnippet/cpp/p-system.windows.forms.c_30_1.cpp)]\n [!code-cs[Windows.Forms.Control Member5#1](~/add/codesnippet/csharp/p-system.windows.forms.c_30_1.cs)]\n [!code-vb[Windows.Forms.Control Member5#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_30_1.vb)]"
  syntax:
    content: public System.Drawing.Size ClientSize { get; set; }
    return:
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;></xref> that represents the dimensions of the client area of the control."
  overload: System.Windows.Forms.Control.ClientSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ClientSizeChanged
  id: ClientSizeChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ClientSizeChanged
  nameWithType: Control.ClientSizeChanged
  fullName: System.Windows.Forms.Control.ClientSizeChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.ClientSize*> property changes."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ClientSizeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the ClientSizeChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#12](~/add/codesnippet/csharp/e-system.windows.forms.c_7_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#12](~/add/codesnippet/visualbasic/e-system.windows.forms.c_7_1.vb)]"
  syntax:
    content: public event EventHandler ClientSizeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CompanyName
  id: CompanyName
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CompanyName
  nameWithType: Control.CompanyName
  fullName: System.Windows.Forms.Control.CompanyName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the name of the company or creator of the application containing the control."
  remarks: "The CompanyName property is a read-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>. The following line of C# code sets the CompanyName property.      ```c#   [assembly: AssemblyCompany(&quot;Microsoft&quot;)]   ```      > [!NOTE] >  It is strongly recommended that you provide the company name, product name, and product version for your app."
  example:
  - "The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the CompanyName, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.  \n  \n [!code-cs[Windows.Forms.Control Properties3#1](~/add/codesnippet/csharp/p-system.windows.forms.c_12_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties3#1](~/add/codesnippet/cpp/p-system.windows.forms.c_12_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties3#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_12_1.vb)]"
  syntax:
    content: public string CompanyName { get; }
    return:
      type: System.String
      description: "The company name or creator of the application containing the control."
  overload: System.Windows.Forms.Control.CompanyName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)
  id: Contains(System.Windows.Forms.Control)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Contains(Control)
  nameWithType: Control.Contains(Control)
  fullName: System.Windows.Forms.Control.Contains(Control)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves a value indicating whether the specified control is a child of the control."
  remarks: ''
  example:
  - "The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.  \n  \n [!code-cs[Windows.Forms.Control Members4#1](~/add/codesnippet/csharp/m-system.windows.forms.c_78_1.cs)]\n [!code-vb[Windows.Forms.Control Members4#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_78_1.vb)]\n [!code-cpp[Windows.Forms.Control Members4#1](~/add/codesnippet/cpp/m-system.windows.forms.c_78_1.cpp)]"
  syntax:
    content: public bool Contains (System.Windows.Forms.Control ctl);
    parameters:
    - id: ctl
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to evaluate."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified control is a child of the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ContainsFocus
  id: ContainsFocus
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ContainsFocus
  nameWithType: Control.ContainsFocus
  fullName: System.Windows.Forms.Control.ContainsFocus
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control, or one of its child controls, currently has the input focus."
  remarks: "You can use this property to determine whether a control or any of the controls contained within it has the input focus. To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property. To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods."
  syntax:
    content: public bool ContainsFocus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control or one of its child controls currently has the input focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ContainsFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ContextMenu
  id: ContextMenu
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ContextMenu
  nameWithType: Control.ContextMenu
  fullName: System.Windows.Forms.Control.ContextMenu
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the shortcut menu associated with the control."
  remarks: "Use a shortcut menus to give context-specific menu options to users when they right-click on the control."
  example:
  - "The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it. It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its ContextMenu property.  \n  \n [!code-cs[Windows.Forms.Control Properties2#5](~/add/codesnippet/csharp/p-system.windows.forms.c_108_1.cs)]\n [!code-vb[Windows.Forms.Control Properties2#5](~/add/codesnippet/visualbasic/p-system.windows.forms.c_108_1.vb)]\n [!code-cpp[Windows.Forms.Control Properties2#5](~/add/codesnippet/cpp/p-system.windows.forms.c_108_1.cpp)]"
  syntax:
    content: public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }
    return:
      type: System.Windows.Forms.ContextMenu
      description: "A <xref href=&quot;System.Windows.Forms.ContextMenu&quot;></xref> that represents the shortcut menu associated with the control."
  overload: System.Windows.Forms.Control.ContextMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ContextMenuChanged
  id: ContextMenuChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ContextMenuChanged
  nameWithType: Control.ContextMenuChanged
  fullName: System.Windows.Forms.Control.ContextMenuChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.ContextMenu*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example displays a message when a change occurs to the shortcut menu.  \n  \n [!code-cpp[Control_ContextMenu_CreateGraphics#2](~/add/codesnippet/cpp/e-system.windows.forms.c_6_1.cpp)]\n [!code-cs[Control_ContextMenu_CreateGraphics#2](~/add/codesnippet/csharp/e-system.windows.forms.c_6_1.cs)]\n [!code-vb[Control_ContextMenu_CreateGraphics#2](~/add/codesnippet/visualbasic/e-system.windows.forms.c_6_1.vb)]"
  syntax:
    content: public event EventHandler ContextMenuChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ContextMenuStrip
  id: ContextMenuStrip
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ContextMenuStrip
  nameWithType: Control.ContextMenuStrip
  fullName: System.Windows.Forms.Control.ContextMenuStrip
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the <xref href=&quot;System.Windows.Forms.ContextMenuStrip&quot;></xref> associated with this control."
  remarks: "If a <xref:System.Windows.Forms.ContextMenu> has also been assigned to the control, the <xref:System.Windows.Forms.ContextMenu> takes precedence over the <xref:System.Windows.Forms.ContextMenuStrip>."
  example:
  - "The following code example demonstrates how to add three <xref:System.Windows.Forms.ToolStripMenuItem> objects to a <xref:System.Windows.Forms.ContextMenuStrip>. In addition it demonstrates setting the ContextMenuStrip property of the form.  \n  \n [!code-vb[System.Windows.Forms.Control.ContextMenuStrip#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_48_1.vb)]\n [!code-cs[System.Windows.Forms.Control.ContextMenuStrip#1](~/add/codesnippet/csharp/p-system.windows.forms.c_48_1.cs)]"
  syntax:
    content: public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
    return:
      type: System.Windows.Forms.ContextMenuStrip
      description: "The <xref href=&quot;System.Windows.Forms.ContextMenuStrip&quot;></xref> for this control, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if there is no <xref href=&quot;System.Windows.Forms.ContextMenuStrip&quot;></xref>. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ContextMenuStrip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ContextMenuStripChanged
  id: ContextMenuStripChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ContextMenuStripChanged
  nameWithType: Control.ContextMenuStripChanged
  fullName: System.Windows.Forms.Control.ContextMenuStripChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.ContextMenuStrip*> property changes."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ContextMenuStripChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the ContextMenuStripChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#14](~/add/codesnippet/csharp/e-system.windows.forms.c_61_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#14](~/add/codesnippet/visualbasic/e-system.windows.forms.c_61_1.vb)]"
  syntax:
    content: public event EventHandler ContextMenuStripChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ControlAdded
  id: ControlAdded
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ControlAdded
  nameWithType: Control.ControlAdded
  fullName: System.Windows.Forms.Control.ControlAdded
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a new control is added to the <xref:System.Windows.Forms.Control.ControlCollection>."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses ControlAdded to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.  \n  \n [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/e-system.windows.forms.c_66_1.cpp)]\n [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_66_1.vb)]\n [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/e-system.windows.forms.c_66_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.ControlEventHandler ControlAdded;
    return:
      type: System.Windows.Forms.ControlEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ControlRemoved
  id: ControlRemoved
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ControlRemoved
  nameWithType: Control.ControlRemoved
  fullName: System.Windows.Forms.Control.ControlRemoved
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a control is removed from the <xref:System.Windows.Forms.Control.ControlCollection>."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses ControlRemoved to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.  \n  \n [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/e-system.windows.forms.c_8_1.cpp)]\n [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_8_1.vb)]\n [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/e-system.windows.forms.c_8_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.ControlEventHandler ControlRemoved;
    return:
      type: System.Windows.Forms.ControlEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Controls
  id: Controls
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Controls
  nameWithType: Control.Controls
  fullName: System.Windows.Forms.Control.Controls
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the collection of controls contained within the control."
  remarks: "A <xref:System.Windows.Forms.Control> can act as a parent to a collection of controls. For example, when several controls are added to a <xref:System.Windows.Forms.Form>, each of the controls is a member of the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the Controls property of the form, which is derived from the <xref:System.Windows.Forms.Control> class.       You can manipulate the controls in the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the Controls property by using the methods available in the <xref:System.Windows.Forms.Control.ControlCollection> class.       When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added. After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method. Doing so will increase the performance of applications with many controls.       Use the Controls property to iterate through all controls of a form, including nested controls. Use the <xref:System.Windows.Forms.Control.GetNextControl%2A> method to retrieve the previous or next child control in the tab order. Use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property to get or set the active control of a container control."
  example:
  - "The following code example removes a <xref:System.Windows.Forms.Control> from the <xref:System.Windows.Forms.Control.ControlCollection> of the derived class <xref:System.Windows.Forms.Panel> if it is a member of the collection. The example requires that you have created a <xref:System.Windows.Forms.Panel>, a <xref:System.Windows.Forms.Button>, and at least one <xref:System.Windows.Forms.RadioButton> control on a <xref:System.Windows.Forms.Form>. The <xref:System.Windows.Forms.RadioButton> control(s) are added to the <xref:System.Windows.Forms.Panel> control, and the <xref:System.Windows.Forms.Panel> control added to the <xref:System.Windows.Forms.Form>. When the button is clicked, the radio button named `removeButton` is removed from the <xref:System.Windows.Forms.Control.ControlCollection>.  \n  \n [!code-cs[ControlCollection#4](~/add/codesnippet/csharp/p-system.windows.forms.c_41_1.cs)]\n [!code-vb[ControlCollection#4](~/add/codesnippet/visualbasic/p-system.windows.forms.c_41_1.vb)]\n [!code-cpp[ControlCollection#4](~/add/codesnippet/cpp/p-system.windows.forms.c_41_1.cpp)]"
  syntax:
    content: public System.Windows.Forms.Control.ControlCollection Controls { get; }
    return:
      type: System.Windows.Forms.Control.ControlCollection
      description: "A <xref:System.Windows.Forms.Control.ControlCollection> representing the collection of controls contained within the control."
  overload: System.Windows.Forms.Control.Controls*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CreateAccessibilityInstance
  id: CreateAccessibilityInstance
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CreateAccessibilityInstance()
  nameWithType: Control.CreateAccessibilityInstance()
  fullName: System.Windows.Forms.Control.CreateAccessibilityInstance()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a new accessibility object for the control."
  remarks: "If you do not explicitly call the CreateAccessibilityInstance method, it will be called when the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property is referenced.      > [!NOTE] >  To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."
  example:
  - "The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the CreateAccessibilityInstance method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  \n  \n This code excerpt demonstrates overriding the CreateAccessibilityInstance method. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  \n  \n [!code-vb[System.Windows.Forms.AccessibleObject#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_3_1.vb)]\n [!code-cs[System.Windows.Forms.AccessibleObject#2](~/add/codesnippet/csharp/m-system.windows.forms.c_3_1.cs)]\n [!code-cpp[System.Windows.Forms.AccessibleObject#2](~/add/codesnippet/cpp/m-system.windows.forms.c_3_1.cpp)]"
  syntax:
    content: protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();
    parameters: []
    return:
      type: System.Windows.Forms.AccessibleObject
      description: "A new <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref> for the control."
  overload: System.Windows.Forms.Control.CreateAccessibilityInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CreateControl
  id: CreateControl
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CreateControl()
  nameWithType: Control.CreateControl()
  fullName: System.Windows.Forms.Control.CreateControl()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Forces the creation of the visible control, including the creation of the handle and any visible child controls."
  remarks: "The CreateControl method forces a handle to be created for the control and its child controls. This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control&quot;s constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.       CreateControl does not create a control handle if the control&quot;s <xref:System.Windows.Forms.Control.Visible%2A> property is `false`. You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control&quot;s handle regardless of the control&quot;s visibility, but in this case, no window handles are created for the control&quot;s children."
  syntax:
    content: public void CreateControl ();
    parameters: []
  overload: System.Windows.Forms.Control.CreateControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CreateControlsInstance
  id: CreateControlsInstance
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CreateControlsInstance()
  nameWithType: Control.CreateControlsInstance()
  fullName: System.Windows.Forms.Control.CreateControlsInstance()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a new instance of the control collection for the control."
  syntax:
    content: protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();
    parameters: []
    return:
      type: System.Windows.Forms.Control.ControlCollection
      description: "A new instance of <xref:System.Windows.Forms.Control.ControlCollection> assigned to the control."
  overload: System.Windows.Forms.Control.CreateControlsInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Created
  id: Created
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Created
  nameWithType: Control.Created
  fullName: System.Windows.Forms.Control.Created
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control has been created."
  remarks: "The Created property returns `true` if the <xref:System.Windows.Forms.Control> was successfully created even though the control&quot;s handle might not have been created or recreated yet."
  syntax:
    content: public bool Created { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control has been created; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Created*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CreateGraphics
  id: CreateGraphics
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CreateGraphics()
  nameWithType: Control.CreateGraphics()
  fullName: System.Windows.Forms.Control.CreateGraphics()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates the <xref href=&quot;System.Drawing.Graphics&quot;></xref> for the control."
  remarks: "The <xref:System.Drawing.Graphics> object that you retrieve through the CreateGraphics method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message. Therefore you cannot cache the <xref:System.Drawing.Graphics> object for reuse, except to use non-visual methods like <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=fullName>. Instead, you must call CreateGraphics every time that you want to use the <xref:System.Drawing.Graphics> object, and then call <xref:System.Drawing.Graphics.Dispose%2A> when you are finished using it. For more information about Windows messages, see <xref:System.Windows.Forms.Control.WndProc%2A>.       By design, CreateGraphics sets ownership to the calling thread, and fails if it is called on other threads.      > [!NOTE] >  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and CreateGraphics if the handle for the control has already been created. Calling CreateGraphics before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&quot;s thread."
  example:
  - "The following code example resizes the specified control so the control will accommodate its formatted text. The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text. The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the `MiddleCenter` value of <xref:System.Drawing.ContentAlignment?displayProperty=fullName> if your control supports it.  \n  \n [!code-cpp[Windows.Forms.Control Member5#1](~/add/codesnippet/cpp/m-system.windows.forms.c_91_1.cpp)]\n [!code-cs[Windows.Forms.Control Member5#1](~/add/codesnippet/csharp/m-system.windows.forms.c_91_1.cs)]\n [!code-vb[Windows.Forms.Control Member5#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_91_1.vb)]"
  syntax:
    content: public System.Drawing.Graphics CreateGraphics ();
    parameters: []
    return:
      type: System.Drawing.Graphics
      description: "The <xref href=&quot;System.Drawing.Graphics&quot;></xref> for the control."
  overload: System.Windows.Forms.Control.CreateGraphics*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CreateHandle
  id: CreateHandle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CreateHandle()
  nameWithType: Control.CreateHandle()
  fullName: System.Windows.Forms.Control.CreateHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a handle for the control."
  remarks: "You typically should not call the CreateHandle method directly. The preferred method is to call the <xref:System.Windows.Forms.Control.CreateControl%2A> method, which forces a handle to be created for the control and its child controls when the control is created."
  syntax:
    content: protected virtual void CreateHandle ();
    parameters: []
  overload: System.Windows.Forms.Control.CreateHandle*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object is in a disposed state."
  platform:
  - net462
- uid: System.Windows.Forms.Control.CreateParams
  id: CreateParams
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CreateParams
  nameWithType: Control.CreateParams
  fullName: System.Windows.Forms.Control.CreateParams
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the required creation parameters when the control handle is created."
  remarks: "The CreateParams property should not be overridden and used to adjust the properties of your derived control. Properties such as the <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=fullName>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=fullName> should be set by the corresponding properties in your control such as <xref:System.Windows.Forms.Control.Text%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=fullName> and <xref:System.Windows.Forms.Control.Height%2A?displayProperty=fullName>. The <xref:System.Windows.Forms.CreateParams> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace. For more information about creating control parameters, see the `CreateWindow` and `CreateWindowEx` functions and the [CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)structure documentation."
  example:
  - "The following code example extends the CreateParams property of a <xref:System.Windows.Forms.Button> derived class. The <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=fullName> property is changed, which causes the button to display an <xref:System.Drawing.Icon> rather than an <xref:System.Drawing.Image>. This example requires that you have a class that inherits from the <xref:System.Windows.Forms.Button> class.  \n  \n [!code-cs[CreateParams#3](~/add/codesnippet/csharp/p-system.windows.forms.c_71_1.cs)]\n [!code-cpp[CreateParams#3](~/add/codesnippet/cpp/p-system.windows.forms.c_71_1.cpp)]\n [!code-vb[CreateParams#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_71_1.vb)]"
  syntax:
    content: protected virtual System.Windows.Forms.CreateParams CreateParams { get; }
    return:
      type: System.Windows.Forms.CreateParams
      description: "A <xref href=&quot;System.Windows.Forms.CreateParams&quot;></xref> that contains the required creation parameters when the handle to the control is created."
  overload: System.Windows.Forms.Control.CreateParams*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Cursor
  id: Cursor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Cursor
  nameWithType: Control.Cursor
  fullName: System.Windows.Forms.Control.Cursor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the cursor that is displayed when the mouse pointer is over the control."
  remarks: "Assign a <xref:System.Windows.Forms.Cursor> to the Cursor property of the control to change the cursor displayed when the mouse pointer is over the control. To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName> property. Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.       The Cursor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview."
  example:
  - "The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives. The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=fullName> cursor is displayed when the mouse pointer is over the drop-down button. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.  \n  \n [!code-cs[Windows.Forms.Control Properties2#1](~/add/codesnippet/csharp/p-system.windows.forms.c_26_1.cs)]\n [!code-vb[Windows.Forms.Control Properties2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_26_1.vb)]\n [!code-cpp[Windows.Forms.Control Properties2#1](~/add/codesnippet/cpp/p-system.windows.forms.c_26_1.cpp)]"
  syntax:
    content: public virtual System.Windows.Forms.Cursor Cursor { get; set; }
    return:
      type: System.Windows.Forms.Cursor
      description: "A <xref href=&quot;System.Windows.Forms.Cursor&quot;></xref> that represents the cursor to display when the mouse pointer is over the control."
  overload: System.Windows.Forms.Control.Cursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.CursorChanged
  id: CursorChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: CursorChanged
  nameWithType: Control.CursorChanged
  fullName: System.Windows.Forms.Control.CursorChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.Cursor*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=fullName> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class. The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control. The<xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class. When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=fullName> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>. The <xref:System.Windows.Forms.ListView> is updated every time the CursorChanged event occurs.  \n  \n [!code-cpp[System.Windows.Forms.Cursors#1](~/add/codesnippet/cpp/e-system.windows.forms.c_56_1.cpp)]\n [!code-vb[System.Windows.Forms.Cursors#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_56_1.vb)]\n [!code-cs[System.Windows.Forms.Cursors#1](~/add/codesnippet/csharp/e-system.windows.forms.c_56_1.cs)]"
  syntax:
    content: public event EventHandler CursorChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DataBindings
  id: DataBindings
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DataBindings
  nameWithType: Control.DataBindings
  fullName: System.Windows.Forms.Control.DataBindings
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the data bindings for the control."
  remarks: "Use the DataBindings property to access the <xref:System.Windows.Forms.ControlBindingsCollection>. By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object."
  example:
  - "The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control. The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the DataBindings property of the <xref:System.Windows.Forms.Control> class.  \n  \n [!code-cpp[Classic Control.DataBindings Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_117_1.cpp)]\n [!code-cs[Classic Control.DataBindings Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_117_1.cs)]\n [!code-vb[Classic Control.DataBindings Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_117_1.vb)]"
  syntax:
    content: public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }
    return:
      type: System.Windows.Forms.ControlBindingsCollection
      description: "A <xref href=&quot;System.Windows.Forms.ControlBindingsCollection&quot;></xref> that contains the <xref href=&quot;System.Windows.Forms.Binding&quot;></xref> objects for the control."
  overload: System.Windows.Forms.Control.DataBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultBackColor
  id: DefaultBackColor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultBackColor
  nameWithType: Control.DefaultBackColor
  fullName: System.Windows.Forms.Control.DefaultBackColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the default background color of the control."
  remarks: "This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top-level control. Derived classes can have different defaults."
  example:
  - "The following code example demonstrates how to use the DefaultBackColor, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_52_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_52_1.cs)]\n [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_52_1.vb)]"
  syntax:
    content: public static System.Drawing.Color DefaultBackColor { get; }
    return:
      type: System.Drawing.Color
      description: "The default background <xref href=&quot;System.Drawing.Color&quot;></xref> of the control. The default is &lt;xref:System.Drawing.SystemColors.Control%2A?displayProperty=fullName&gt;."
  overload: System.Windows.Forms.Control.DefaultBackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultCursor
  id: DefaultCursor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultCursor
  nameWithType: Control.DefaultCursor
  fullName: System.Windows.Forms.Control.DefaultCursor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the default cursor for the control."
  remarks: "Override DefaultCursor to configure a default cursor for your control. This is more efficient than setting the cursor in the control&quot;s constructor, and gives automatic support for certain cursor-related designer functions."
  syntax:
    content: protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }
    return:
      type: System.Windows.Forms.Cursor
      description: "An object of type <xref href=&quot;System.Windows.Forms.Cursor&quot;></xref> representing the current default cursor."
  overload: System.Windows.Forms.Control.DefaultCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultFont
  id: DefaultFont
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultFont
  nameWithType: Control.DefaultFont
  fullName: System.Windows.Forms.Control.DefaultFont
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the default font of the control."
  remarks: "The following table describes the value returned by DefaultFont depending on the operating system and local culture.      |System/and or Culture|Font|   |----------------------------|----------|   |Windows NT 4x, Japanese version|MS UI Gothic, 9 point.|   |Arabic Windows|Tahoma, 8 point.|   |Other operating system/culture|MS Shell Dlg logical font, typically Microsoft San Serif 8 point.|       MS Shell Dlg maps to a font set in the system registry.       If the previous fonts are not installed, the default font is Tahoma, 8 point. If Tahoma, 8 point, is not installed, DefaultFontreturns the value of the <xref:System.Drawing.FontFamily.GenericSansSerif%2A> property"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, DefaultFont, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_29_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_29_1.cs)]\n [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_29_1.vb)]"
  syntax:
    content: public static System.Drawing.Font DefaultFont { get; }
    return:
      type: System.Drawing.Font
      description: "The default <xref href=&quot;System.Drawing.Font&quot;></xref> of the control. The value returned will vary depending on the user&quot;s operating system the local culture setting of their system."
  overload: System.Windows.Forms.Control.DefaultFont*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The default font or the regional alternative fonts are not installed on the client computer."
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultForeColor
  id: DefaultForeColor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultForeColor
  nameWithType: Control.DefaultForeColor
  fullName: System.Windows.Forms.Control.DefaultForeColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the default foreground color of the control."
  remarks: "This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control. Derived classes can have different defaults."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and DefaultForeColor members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_49_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_49_1.cs)]\n [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_49_1.vb)]"
  syntax:
    content: public static System.Drawing.Color DefaultForeColor { get; }
    return:
      type: System.Drawing.Color
      description: "The default foreground <xref href=&quot;System.Drawing.Color&quot;></xref> of the control. The default is &lt;xref:System.Drawing.SystemColors.ControlText%2A?displayProperty=fullName&gt;."
  overload: System.Windows.Forms.Control.DefaultForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultImeMode
  id: DefaultImeMode
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultImeMode
  nameWithType: Control.DefaultImeMode
  fullName: System.Windows.Forms.Control.DefaultImeMode
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the default Input Method Editor (IME) mode supported by the control."
  remarks: "An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.       As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode?displayProperty=fullName> value. The <xref:System.Windows.Forms.ImeMode> value specifies that the IME mode is inherited from the parent control."
  example:
  - "The following code example overrides the DefaultImeMode property to turn off the Input Method Editor.  \n  \n [!code-cs[Windows.Forms.Control Properties2#4](~/add/codesnippet/csharp/p-system.windows.forms.c_7_1.cs)]\n [!code-vb[Windows.Forms.Control Properties2#4](~/add/codesnippet/visualbasic/p-system.windows.forms.c_7_1.vb)]\n [!code-cpp[Windows.Forms.Control Properties2#4](~/add/codesnippet/cpp/p-system.windows.forms.c_7_1.cpp)]"
  syntax:
    content: protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }
    return:
      type: System.Windows.Forms.ImeMode
      description: "One of the <xref href=&quot;System.Windows.Forms.ImeMode&quot;></xref> values."
  overload: System.Windows.Forms.Control.DefaultImeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultMargin
  id: DefaultMargin
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultMargin
  nameWithType: Control.DefaultMargin
  fullName: System.Windows.Forms.Control.DefaultMargin
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the space, in pixels, that is specified by default between controls."
  syntax:
    content: protected virtual System.Windows.Forms.Padding DefaultMargin { get; }
    return:
      type: System.Windows.Forms.Padding
      description: "A <xref href=&quot;System.Windows.Forms.Padding&quot;></xref> that represents the default space between controls."
  overload: System.Windows.Forms.Control.DefaultMargin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultMaximumSize
  id: DefaultMaximumSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultMaximumSize
  nameWithType: Control.DefaultMaximumSize
  fullName: System.Windows.Forms.Control.DefaultMaximumSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the length and height, in pixels, that is specified as the default maximum size of a control."
  syntax:
    content: protected virtual System.Drawing.Size DefaultMaximumSize { get; }
    return:
      type: System.Drawing.Size
      description: "A &lt;xref:System.Drawing.Point.%23ctor%2A&gt; representing the size of the control."
  overload: System.Windows.Forms.Control.DefaultMaximumSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultMinimumSize
  id: DefaultMinimumSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultMinimumSize
  nameWithType: Control.DefaultMinimumSize
  fullName: System.Windows.Forms.Control.DefaultMinimumSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the length and height, in pixels, that is specified as the default minimum size of a control."
  syntax:
    content: protected virtual System.Drawing.Size DefaultMinimumSize { get; }
    return:
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;></xref> representing the size of the control."
  overload: System.Windows.Forms.Control.DefaultMinimumSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultPadding
  id: DefaultPadding
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultPadding
  nameWithType: Control.DefaultPadding
  fullName: System.Windows.Forms.Control.DefaultPadding
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the internal spacing, in pixels, of the contents of a control."
  syntax:
    content: protected virtual System.Windows.Forms.Padding DefaultPadding { get; }
    return:
      type: System.Windows.Forms.Padding
      description: "A <xref href=&quot;System.Windows.Forms.Padding&quot;></xref> that represents the internal spacing of the contents of a control."
  overload: System.Windows.Forms.Control.DefaultPadding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefaultSize
  id: DefaultSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefaultSize
  nameWithType: Control.DefaultSize
  fullName: System.Windows.Forms.Control.DefaultSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the default size of the control."
  remarks: "The DefaultSize property represents the <xref:System.Drawing.Size> of the control when it is initially created. You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.      > [!NOTE] >  To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor. The preferred method is to override the DefaultSize property.      > [!NOTE] >  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor."
  example:
  - "The following code example overrides the DefaultSize property, and makes the default size of the form 500 pixels square.  \n  \n [!code-cs[Windows.Forms.Control Properties2#3](~/add/codesnippet/csharp/p-system.windows.forms.c_10_1.cs)]\n [!code-vb[Windows.Forms.Control Properties2#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_10_1.vb)]\n [!code-cpp[Windows.Forms.Control Properties2#3](~/add/codesnippet/cpp/p-system.windows.forms.c_10_1.cpp)]"
  syntax:
    content: protected virtual System.Drawing.Size DefaultSize { get; }
    return:
      type: System.Drawing.Size
      description: "The default <xref href=&quot;System.Drawing.Size&quot;></xref> of the control."
  overload: System.Windows.Forms.Control.DefaultSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)
  id: DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DefWndProc(Message)
  nameWithType: Control.DefWndProc(Message)
  fullName: System.Windows.Forms.Control.DefWndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sends the specified message to the default window procedure."
  remarks: "For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565)."
  syntax:
    content: protected virtual void DefWndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "The Windows <xref href=&quot;System.Windows.Forms.Message&quot;></xref> to process."
  overload: System.Windows.Forms.Control.DefWndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DestroyHandle
  id: DestroyHandle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DestroyHandle()
  nameWithType: Control.DestroyHandle()
  fullName: System.Windows.Forms.Control.DestroyHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Destroys the handle associated with the control."
  syntax:
    content: protected virtual void DestroyHandle ();
    parameters: []
  overload: System.Windows.Forms.Control.DestroyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DisplayRectangle
  id: DisplayRectangle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DisplayRectangle
  nameWithType: Control.DisplayRectangle
  fullName: System.Windows.Forms.Control.DisplayRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the rectangle that represents the display area of the control."
  remarks: "The DisplayRectangle property returns the client rectangle of the display area of the control. For the base control class, this is equal to the client rectangle. However, inheriting controls might want to change this if their client area differs from their display area. The display rectangle is the smallest <xref:System.Drawing.Rectangle> that encloses a control and is used to lay out controls."
  syntax:
    content: public virtual System.Drawing.Rectangle DisplayRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that represents the display area of the control."
  overload: System.Windows.Forms.Control.DisplayRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Control.Dispose(Boolean)
  fullName: System.Windows.Forms.Control.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Windows.Forms.Control&quot;></xref> and its child controls and optionally releases the managed resources."
  remarks: "This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing`parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Windows.Forms.Control.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Disposing
  id: Disposing
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Disposing
  nameWithType: Control.Disposing
  fullName: System.Windows.Forms.Control.Disposing
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the base <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class is in the process of disposing."
  remarks: "When this property returns `true`, the base<xref:System.Windows.Forms.Control> class is in the process of disposing. After the control is disposed of, it can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method."
  syntax:
    content: public bool Disposing { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the base <xref href=&quot;System.Windows.Forms.Control&quot;></xref> class is in the process of disposing; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Disposing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Dock
  id: Dock
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Dock
  nameWithType: Control.Dock
  fullName: System.Windows.Forms.Control.Dock
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent."
  remarks: "Use the Dock property to define how a control is automatically resized as its parent control is resized. For example, setting Dock to <xref:System.Windows.Forms.DockStyle?displayProperty=fullName> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized. Controls are docked in their Z-order, which is the visual layering of controls on a form along the form&quot;s Z-axis (depth).       A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.       Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the the edges of its container.      > [!NOTE] >  The <xref:System.Windows.Forms.Control.Anchor%2A> and Dock properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence."
  example:
  - "The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.  \n  \n [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_24_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_24_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_24_1.vb)]"
  syntax:
    content: public virtual System.Windows.Forms.DockStyle Dock { get; set; }
    return:
      type: System.Windows.Forms.DockStyle
      description: "One of the <xref href=&quot;System.Windows.Forms.DockStyle&quot;></xref> values. The default is <xref href=&quot;System.Windows.Forms.DockStyle&quot;></xref>."
  overload: System.Windows.Forms.Control.Dock*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value assigned is not one of the <xref href=&quot;System.Windows.Forms.DockStyle&quot;></xref> values."
  platform:
  - net462
- uid: System.Windows.Forms.Control.DockChanged
  id: DockChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DockChanged
  nameWithType: Control.DockChanged
  fullName: System.Windows.Forms.Control.DockChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.Dock*> property changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes(*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_62_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_62_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_62_1.cpp)]"
  syntax:
    content: public event EventHandler DockChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)
  id: DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DoDragDrop(Object,DragDropEffects)
  nameWithType: Control.DoDragDrop(Object,DragDropEffects)
  fullName: System.Windows.Forms.Control.DoDragDrop(Object,DragDropEffects)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Begins a drag-and-drop operation."
  remarks: "The `allowedEffects` parameter determines which drag operations can occur. If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.       The following describes how and when events related to drag-and-drop operations are raised.       The DoDragDrop method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.       If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.       Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.      -   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.      -   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.      -   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.       If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event&quot;s <xref:System.Windows.Forms.QueryContinueDragEventArgs>.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.          > [!NOTE]     >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&quot;s position.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.      > [!NOTE] >  The DoDragDrop method catches all exceptions and rethrows only the following security or critical exceptions:      -   SecurityException      -   NullReferenceException      -   StackOverflowException      -   OutOfMemoryException      -   ThreadAbortException      -   ExecutionEngineException      -   IndexOutOfRangeException      -   AccessViolationException"
  example:
  - "The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the DoDragDrop method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#1](~/add/codesnippet/cpp/47e0feba-eeb5-4e2f-9c6b-_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#1](~/add/codesnippet/visualbasic/47e0feba-eeb5-4e2f-9c6b-_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#1](~/add/codesnippet/csharp/47e0feba-eeb5-4e2f-9c6b-_1.cs)]  \n  \n The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation. This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names. When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised. Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.  \n  \n [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/47e0feba-eeb5-4e2f-9c6b-_2.cs)]\n [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/47e0feba-eeb5-4e2f-9c6b-_2.vb)]\n [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/47e0feba-eeb5-4e2f-9c6b-_2.cpp)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);
    parameters:
    - id: data
      type: System.Object
      description: "The data to drag."
    - id: allowedEffects
      type: System.Windows.Forms.DragDropEffects
      description: "One of the <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref> values."
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "A value from the <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref> enumeration that represents the final effect that was performed during the drag-and-drop operation."
  overload: System.Windows.Forms.Control.DoDragDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DoubleBuffered
  id: DoubleBuffered
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DoubleBuffered
  nameWithType: Control.DoubleBuffered
  fullName: System.Windows.Forms.Control.DoubleBuffered
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker."
  remarks: "Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface. Buffered graphics require that the updated graphics data is first written to a buffer. The data in the graphics buffer is then quickly written to displayed surface memory. The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.      > [!NOTE] >  DoubleBuffered is not a bindable property."
  syntax:
    content: protected virtual bool DoubleBuffered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the surface of the control should be drawn using double buffering; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.DoubleBuffered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DoubleClick
  id: DoubleClick
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DoubleClick
  nameWithType: Control.DoubleClick
  fullName: System.Windows.Forms.Control.DoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is double-clicked."
  remarks: "A double-click is determined by the mouse settings of the user&quot;s operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked. For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and DoubleClick events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and DoubleClick events are raised when the form is double-clicked and both methods are called. If a control is double-clicked and that control does not support the DoubleClick event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.       You must set the `StandardDoubleClick` and `StandardClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised. These values might already be set to `true` if you are inheriting from existing Windows Forms controls.      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, DoubleClick, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the DoubleClick event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.  \n  \n [!code-cs[Control.DoubleClick#1](~/add/codesnippet/csharp/e-system.windows.forms.c_33_1.cs)]\n [!code-vb[Control.DoubleClick#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_33_1.vb)]\n [!code-cpp[Control.DoubleClick#1](~/add/codesnippet/cpp/e-system.windows.forms.c_33_1.cpp)]"
  syntax:
    content: public event EventHandler DoubleClick;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DragDrop
  id: DragDrop
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DragDrop
  nameWithType: Control.DragDrop
  fullName: System.Windows.Forms.Control.DragDrop
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a drag-and-drop operation is completed."
  remarks: "The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] code converts the properties to a client <xref:System.Drawing.Point>.      ```   Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));   ```      > [!NOTE] >  In versions earlier than [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and DragDrop events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised. However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and DragDrop events are not raised again.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This code excerpt demonstrates using the DragDrop event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#5](~/add/codesnippet/cpp/e-system.windows.forms.c_72_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#5](~/add/codesnippet/visualbasic/e-system.windows.forms.c_72_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#5](~/add/codesnippet/csharp/e-system.windows.forms.c_72_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.DragEventHandler DragDrop;
    return:
      type: System.Windows.Forms.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DragEnter
  id: DragEnter
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DragEnter
  nameWithType: Control.DragEnter
  fullName: System.Windows.Forms.Control.DragEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when an object is dragged into the control&quot;s bounds."
  remarks: "The DragEnter event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.      > [!NOTE] >  In versions earlier than [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with DragEnter and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised. However, when you close and reopen the solution, the DragEnter and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.       The following describes how and when events related to drag-and-drop operations are raised.       The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.       If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.       Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.      -   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.      -   If the mouse enters another control, the DragEnter for that control is raised.      -   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.       If there is a change in the keyboard or mouse button state, the<xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event&quot;s <xref:System.Windows.Forms.QueryContinueDragEventArgs>.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.          > [!NOTE]     >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&quot;s position.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.          > [!NOTE]     >  The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] code converts the properties to a client <xref:System.Drawing.Point>.          ```       Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));       ```       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragEnter event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#7](~/add/codesnippet/cpp/e-system.windows.forms.c_48_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#7](~/add/codesnippet/visualbasic/e-system.windows.forms.c_48_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#7](~/add/codesnippet/csharp/e-system.windows.forms.c_48_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.DragEventHandler DragEnter;
    return:
      type: System.Windows.Forms.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DragLeave
  id: DragLeave
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DragLeave
  nameWithType: Control.DragLeave
  fullName: System.Windows.Forms.Control.DragLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when an object is dragged out of the control&quot;s bounds."
  remarks: "The DragLeave event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.       The following describes how and when events related to drag-and-drop operations are raised.       The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.       If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.       Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.      -   If the user moves out of a window, the DragLeave event is raised.      -   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.      -   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.       If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event&quot;s <xref:System.Windows.Forms.QueryContinueDragEventArgs>.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.          > [!NOTE]     >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&quot;s position.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the DragLeave event is raised.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragLeave event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#8](~/add/codesnippet/cpp/e-system.windows.forms.c_10_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#8](~/add/codesnippet/visualbasic/e-system.windows.forms.c_10_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#8](~/add/codesnippet/csharp/e-system.windows.forms.c_10_1.cs)]"
  syntax:
    content: public event EventHandler DragLeave;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DragOver
  id: DragOver
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DragOver
  nameWithType: Control.DragOver
  fullName: System.Windows.Forms.Control.DragOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when an object is dragged over the control&quot;s bounds."
  remarks: "The DragOver event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.       The following describes how and when events related to drag-and-drop operations are raised.       The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.       If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.       Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.      -   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.      -   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.      -   If the mouse moves but stays within the same control, the DragOver event is raised.       If there is a change in the keyboard or mouse button state, the<xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event&quot;s <xref:System.Windows.Forms.QueryContinueDragEventArgs>.      -   If the value of <xref:System.Windows.Forms.DragAction> value is `Continue`, the DragOver event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.          > [!NOTE]     >  The DragOver and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&quot;s position.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.          > [!NOTE]     >  The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of C# code converts the properties to a client <xref:System.Drawing.Point>:       >        >  Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the DragOver event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragOver event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/e-system.windows.forms.c_17_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/e-system.windows.forms.c_17_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/e-system.windows.forms.c_17_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.DragEventHandler DragOver;
    return:
      type: System.Windows.Forms.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)
  id: DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: DrawToBitmap(Bitmap,Rectangle)
  nameWithType: Control.DrawToBitmap(Bitmap,Rectangle)
  fullName: System.Windows.Forms.Control.DrawToBitmap(Bitmap,Rectangle)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Supports rendering to the specified bitmap."
  remarks: "The DrawToBitmap method is not supported for ActiveX controls. You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.       The DrawToBitmap method has the following limitations:      -   An <xref:System.ArgumentException> might be thrown for large bitmaps. The maximum allowable size varies by machine.      -   DrawToBitmap does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.      -   DrawToBitmap does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.      -   Controls inside containers are rendered in reverse order.      -   DrawToBitmap is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn."
  syntax:
    content: public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);
    parameters:
    - id: bitmap
      type: System.Drawing.Bitmap
      description: "The bitmap to be drawn to."
    - id: targetBounds
      type: System.Drawing.Rectangle
      description: "The bounds within which the control is rendered."
  overload: System.Windows.Forms.Control.DrawToBitmap*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Enabled
  id: Enabled
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Enabled
  nameWithType: Control.Enabled
  fullName: System.Windows.Forms.Control.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control can respond to user interaction."
  remarks: "With the Enabled property, you can enable or disable controls at run time. For example, you can disable controls that do not apply to the current state of the application. You can also disable a control to restrict its use. For example, a button can be disabled to prevent the user from clicking it. If a control is disabled, it cannot be selected.      > [!IMPORTANT] >  Setting the Enabled property to `false` does not disable the application&quot;s control box or prevent the application window from receiving the focus.       When a container control has its enabled property set to `false`, all its contained controls are disabled, as well. For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.      > [!NOTE] >  When a scrollable control is disabled, the scroll bars are also disabled. For example, a disabled multiline textbox is unable to scroll to display all the lines of text."
  example:
  - "The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the Enabled property to `false`, which causes all controls contained within the group box to be disabled.  \n  \n [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_68_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_68_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_68_1.vb)]"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control can respond to user interaction; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.EnabledChanged
  id: EnabledChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: EnabledChanged
  nameWithType: Control.EnabledChanged
  fullName: System.Windows.Forms.Control.EnabledChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Enabled*> property value has changed."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the EnabledChanged event. Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to `false` and displays a <xref:System.Windows.Forms.MessageBox>.  \n  \n [!code-vb[System.Windows.Forms.Control.EnabledChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_32_1.vb)]\n [!code-cs[System.Windows.Forms.Control.EnabledChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_32_1.cs)]"
  syntax:
    content: public event EventHandler EnabledChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: Control.EndInvoke(IAsyncResult)
  fullName: System.Windows.Forms.Control.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed."
  remarks: "If the asynchronous operation has not been completed, this function will block until the result is available.      > [!NOTE] >  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, EndInvoke, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&quot;s thread."
  syntax:
    content: public object EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "The <xref:System.IAsyncResult> that represents a specific invoke asynchronous operation, returned when calling <xref:System.Windows.Forms.Control.BeginInvoke*>."
    return:
      type: System.Object
      description: "The <xref:System.Object> generated by the asynchronous operation."
  overload: System.Windows.Forms.Control.EndInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> parameter value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>asyncResult</code> object was not created by a preceding call of the <xref:System.Windows.Forms.Control.BeginInvoke*> method from the same control."
  platform:
  - net462
- uid: System.Windows.Forms.Control.Enter
  id: Enter
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Enter
  nameWithType: Control.Enter
  fullName: System.Windows.Forms.Control.Enter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is entered."
  remarks: "When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  \n  \n1.  Enter  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  <xref:System.Windows.Forms.Control.Leave>  \n  \n4.  <xref:System.Windows.Forms.Control.Validating>  \n  \n5.  <xref:System.Windows.Forms.Control.Validated>  \n  \n6.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  \n  \n1.  Enter  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n4.  <xref:System.Windows.Forms.Control.Leave>  \n  \n5.  <xref:System.Windows.Forms.Control.Validating>  \n  \n6.  <xref:System.Windows.Forms.Control.Validated>  \n  \n If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  \n  \n> [!NOTE]\n>  The Enter and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class. The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. The Enter and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control. When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the Enter event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.  \n  \n> [!CAUTION]\n>  Do not attempt to set focus from within the Enter, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the `WM_KILLFOCUS` topic in the \"Keyboard Input Reference\" section and the \"Message Deadlocks\" section of the[About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\\(v=vs.85\\).aspx)topic.  \n  \n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the Enter event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.  \n  \n [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/e-system.windows.forms.c_20_1.cs)]\n [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/e-system.windows.forms.c_20_1.cpp)]\n [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_20_1.vb)]"
  syntax:
    content: public event EventHandler Enter;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.FindForm
  id: FindForm
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: FindForm()
  nameWithType: Control.FindForm()
  fullName: System.Windows.Forms.Control.FindForm()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the form that the control is on."
  remarks: "The control&quot;s <xref:System.Windows.Forms.Control.Parent%2A> property value might not be the same as the <xref:System.Windows.Forms.Form> returned by FindForm method. For example, if a <xref:System.Windows.Forms.RadioButton> control is contained within a <xref:System.Windows.Forms.GroupBox> control, and the <xref:System.Windows.Forms.GroupBox> is on a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.RadioButton> control&quot;s <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.GroupBox> and the <xref:System.Windows.Forms.GroupBox> control&quot;s <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.Form>."
  example:
  - "The following code example finds the form that contains the specified button.  \n  \n [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/m-system.windows.forms.c_24_1.cpp)]\n [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_24_1.vb)]\n [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/m-system.windows.forms.c_24_1.cs)]"
  syntax:
    content: public System.Windows.Forms.Form FindForm ();
    parameters: []
    return:
      type: System.Windows.Forms.Form
      description: "The <xref href=&quot;System.Windows.Forms.Form&quot;></xref> that the control is on."
  overload: System.Windows.Forms.Control.FindForm*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Focus
  id: Focus
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Focus()
  nameWithType: Control.Focus()
  fullName: System.Windows.Forms.Control.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets input focus to the control."
  remarks: "The Focus method returns `true` if the control successfully received input focus. The control can have the input focus while not displaying any visual cues of having the focus. This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.       A control can be selected and receive input focus if all the following are true: the `Selectable` value of <xref:System.Windows.Forms.ControlStyles> is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.       The Windows Forms controls in the following list are not selectable. Controls derived from these controls are also not selectable.      -   <xref:System.Windows.Forms.Panel>      -   <xref:System.Windows.Forms.GroupBox>      -   <xref:System.Windows.Forms.PictureBox>      -   <xref:System.Windows.Forms.ProgressBar>      -   <xref:System.Windows.Forms.Splitter>      -   <xref:System.Windows.Forms.Label>      -   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)      > [!NOTE] >  Focus is a low-level method intended primarily for custom control authors. Instead, application programmers should use the <xref:System.Windows.Forms.Control.Select%2A> method or the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property for child controls, or the <xref:System.Windows.Forms.Form.Activate%2A> method for forms."
  example:
  - "The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#1](~/add/codesnippet/cpp/m-system.windows.forms.c_82_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#1](~/add/codesnippet/csharp/m-system.windows.forms.c_82_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_82_1.vb)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the input focus request was successful; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Focused
  id: Focused
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Focused
  nameWithType: Control.Focused
  fullName: System.Windows.Forms.Control.Focused
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control has input focus."
  remarks: ''
  example:
  - "The following code example disables a <xref:System.Windows.Forms.MenuItem> if a <xref:System.Windows.Forms.TextBox> does not have focus. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TextBox> named `textBox1` and two <xref:System.Windows.Forms.MenuItem> objects named `menuItemEdit` and `menuItemEditInsertCustomerInfo`.  \n  \n [!code-cs[Windows.FOrms.Control Members2#4](~/add/codesnippet/csharp/p-system.windows.forms.c_105_1.cs)]\n [!code-cpp[Windows.FOrms.Control Members2#4](~/add/codesnippet/cpp/p-system.windows.forms.c_105_1.cpp)]\n [!code-vb[Windows.FOrms.Control Members2#4](~/add/codesnippet/visualbasic/p-system.windows.forms.c_105_1.vb)]"
  syntax:
    content: public virtual bool Focused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control has focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Focused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Font
  id: Font
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Font
  nameWithType: Control.Font
  fullName: System.Windows.Forms.Control.Font
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the font of the text displayed by the control."
  remarks: "The Font property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.       Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the Font property a new <xref:System.Drawing.Font>. However, you can base the new font on the existing font.       [Visual Basic, C#]       The following is an example of how to adjust the existing font to make it bold:      ```c#   myControl.Font = new Font(myControl.Font,        myControl.Font.Style | FontStyle.Bold);   ```      ```vb#   MyControl.Font = New Font(MyControl.Font, _        MyControl.Font.Style Or FontStyle.Bold)   ```"
  example:
  - "The following code example displays a <xref:System.Windows.Forms.FontDialog> to the user and changes the <xref:System.Drawing.Font> of a <xref:System.Windows.Forms.DateTimePicker> control. This example requires that you have a <xref:System.Windows.Forms.Form> with <xref:System.Windows.Forms.Button> and a <xref:System.Windows.Forms.DateTimePicker> on it.  \n  \n [!code-cpp[Control_Font#1](~/add/codesnippet/cpp/p-system.windows.forms.c_116_1.cpp)]\n [!code-cs[Control_Font#1](~/add/codesnippet/csharp/p-system.windows.forms.c_116_1.cs)]\n [!code-vb[Control_Font#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_116_1.vb)]"
  syntax:
    content: public virtual System.Drawing.Font Font { get; set; }
    return:
      type: System.Drawing.Font
      description: "The <xref href=&quot;System.Drawing.Font&quot;></xref> to apply to the text displayed by the control. The default is the value of the <xref:System.Windows.Forms.Control.DefaultFont*> property."
  overload: System.Windows.Forms.Control.Font*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.FontChanged
  id: FontChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: FontChanged
  nameWithType: Control.FontChanged
  fullName: System.Windows.Forms.Control.FontChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Font*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Font%2A> property is changed by either a programmatic modification or through interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the FontChanged event.  \n  \n [!code-cs[System.Windows.Forms.Control.FontChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_35_1.cs)]\n [!code-vb[System.Windows.Forms.Control.FontChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_35_1.vb)]"
  syntax:
    content: public event EventHandler FontChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.FontHeight
  id: FontHeight
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: FontHeight
  nameWithType: Control.FontHeight
  fullName: System.Windows.Forms.Control.FontHeight
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the height of the font of the control."
  remarks: >-
    > [!NOTE]

    >  The FontHeight property should not be set to any value other than the control's <xref:System.Drawing.Font.Height%2A?displayProperty=fullName> value, or -1. Setting FontHeight to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.
  syntax:
    content: protected int FontHeight { get; set; }
    return:
      type: System.Int32
      description: "The height of the <xref href=&quot;System.Drawing.Font&quot;></xref> of the control in pixels."
  overload: System.Windows.Forms.Control.FontHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ForeColor
  id: ForeColor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ForeColor
  nameWithType: Control.ForeColor
  fullName: System.Windows.Forms.Control.ForeColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the foreground color of the control."
  remarks: "The ForeColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview."
  example:
  - "The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and ForeColor of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.  \n  \n [!code-cs[Windows.Forms.Control Properties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_23_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_23_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_23_1.vb)]"
  syntax:
    content: public virtual System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "The foreground <xref href=&quot;System.Drawing.Color&quot;></xref> of the control. The default is the value of the <xref:System.Windows.Forms.Control.DefaultForeColor*> property."
  overload: System.Windows.Forms.Control.ForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ForeColorChanged
  id: ForeColorChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ForeColorChanged
  nameWithType: Control.ForeColorChanged
  fullName: System.Windows.Forms.Control.ForeColorChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.ForeColor*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.ForeColor%2A> property is changed by either a programmatic modification or through interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_43_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_43_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_43_1.cpp)]"
  syntax:
    content: public event EventHandler ForeColorChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.FromChildHandle(System.IntPtr)
  id: FromChildHandle(System.IntPtr)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: FromChildHandle(IntPtr)
  nameWithType: Control.FromChildHandle(IntPtr)
  fullName: System.Windows.Forms.Control.FromChildHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the control that contains the specified handle."
  remarks: "This method searches up the window handle parent chain until it finds a handle that is associated with a control. This method is more reliable than the <xref:System.Windows.Forms.Control.FromHandle%2A> method, because it correctly returns controls that own more than one handle."
  syntax:
    content: public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "The window handle (<xref uid=&quot;langword_csharp_HWND&quot; name=&quot;HWND&quot; href=&quot;&quot;></xref>) to search for."
    return:
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> that represents the control associated with the specified handle; returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no control with the specified handle is found."
  overload: System.Windows.Forms.Control.FromChildHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.FromHandle(System.IntPtr)
  id: FromHandle(System.IntPtr)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: FromHandle(IntPtr)
  nameWithType: Control.FromHandle(IntPtr)
  fullName: System.Windows.Forms.Control.FromHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns the control that is currently associated with the specified handle."
  remarks: "Use the <xref:System.Windows.Forms.Control.FromChildHandle%2A> method if you need to return controls that own more than one handle."
  syntax:
    content: public static System.Windows.Forms.Control FromHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "The window handle (<xref uid=&quot;langword_csharp_HWND&quot; name=&quot;HWND&quot; href=&quot;&quot;></xref>) to search for."
    return:
      type: System.Windows.Forms.Control
      description: "A <xref href=&quot;System.Windows.Forms.Control&quot;></xref> that represents the control associated with the specified handle; returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no control with the specified handle is found."
  overload: System.Windows.Forms.Control.FromHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)
  id: GetAccessibilityObjectById(System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetAccessibilityObjectById(Int32)
  nameWithType: Control.GetAccessibilityObjectById(Int32)
  fullName: System.Windows.Forms.Control.GetAccessibilityObjectById(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the specified <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref>."
  syntax:
    content: protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);
    parameters:
    - id: objectId
      type: System.Int32
      description: "An <xref uid=&quot;langword_csharp_Int32&quot; name=&quot;Int32&quot; href=&quot;&quot;></xref> that identifies the <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref> to retrieve."
    return:
      type: System.Windows.Forms.AccessibleObject
      description: "The specified <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref>."
  overload: System.Windows.Forms.Control.GetAccessibilityObjectById*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetAutoSizeMode
  id: GetAutoSizeMode
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetAutoSizeMode()
  nameWithType: Control.GetAutoSizeMode()
  fullName: System.Windows.Forms.Control.GetAutoSizeMode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves a value indicating how a control will behave when its <xref:System.Windows.Forms.Control.AutoSize*> property is enabled."
  syntax:
    content: protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();
    parameters: []
    return:
      type: System.Windows.Forms.AutoSizeMode
      description: "One of the <xref href=&quot;System.Windows.Forms.AutoSizeMode&quot;></xref> values."
  overload: System.Windows.Forms.Control.GetAutoSizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)
  id: GetChildAtPoint(System.Drawing.Point)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetChildAtPoint(Point)
  nameWithType: Control.GetChildAtPoint(Point)
  fullName: System.Windows.Forms.Control.GetChildAtPoint(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the child control that is located at the specified coordinates."
  remarks: "If there is no child control at the specified point, the GetChildAtPoint method returns `null`."
  syntax:
    content: public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control&quot;s client area."
    return:
      type: System.Windows.Forms.Control
      description: "A <xref href=&quot;System.Windows.Forms.Control&quot;></xref> that represents the control that is located at the specified point."
  overload: System.Windows.Forms.Control.GetChildAtPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)
  id: GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetChildAtPoint(Point,GetChildAtPointSkip)
  nameWithType: Control.GetChildAtPoint(Point,GetChildAtPointSkip)
  fullName: System.Windows.Forms.Control.GetChildAtPoint(Point,GetChildAtPointSkip)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type."
  syntax:
    content: public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control&quot;s client area."
    - id: skipValue
      type: System.Windows.Forms.GetChildAtPointSkip
      description: "One of the values of <xref href=&quot;System.Windows.Forms.GetChildAtPointSkip&quot;></xref>, determining whether to ignore child controls of a certain type."
    return:
      type: System.Windows.Forms.Control
      description: "The child <xref href=&quot;System.Windows.Forms.Control&quot;></xref> at the specified coordinates."
  overload: System.Windows.Forms.Control.GetChildAtPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetContainerControl
  id: GetContainerControl
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetContainerControl()
  nameWithType: Control.GetContainerControl()
  fullName: System.Windows.Forms.Control.GetContainerControl()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns the next <xref href=&quot;System.Windows.Forms.ContainerControl&quot;></xref> up the control&quot;s chain of parent controls."
  syntax:
    content: public System.Windows.Forms.IContainerControl GetContainerControl ();
    parameters: []
    return:
      type: System.Windows.Forms.IContainerControl
      description: "An <xref href=&quot;System.Windows.Forms.IContainerControl&quot;></xref>, that represents the parent of the <xref href=&quot;System.Windows.Forms.Control&quot;></xref>."
  overload: System.Windows.Forms.Control.GetContainerControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)
  id: GetNextControl(System.Windows.Forms.Control,System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetNextControl(Control,Boolean)
  nameWithType: Control.GetNextControl(Control,Boolean)
  fullName: System.Windows.Forms.Control.GetNextControl(Control,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the next control forward or back in the tab order of child controls."
  remarks: "The GetNextControl method is dependent on tab order. To iterate through all controls of a form, including nested controls, use the <xref:System.Windows.Forms.Control.Controls%2A> property. To get or set the active control of a container control, use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property."
  syntax:
    content: public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);
    parameters:
    - id: ctl
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to start the search with."
    - id: forward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward in the tab order; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Windows.Forms.Control
      description: "The next <xref href=&quot;System.Windows.Forms.Control&quot;></xref> in the tab order."
  overload: System.Windows.Forms.Control.GetNextControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)
  id: GetPreferredSize(System.Drawing.Size)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetPreferredSize(Size)
  nameWithType: Control.GetPreferredSize(Size)
  fullName: System.Windows.Forms.Control.GetPreferredSize(Size)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the size of a rectangular area into which a control can be fitted."
  remarks: "The behavior of GetPreferredSize differs by control. The <xref:System.Windows.Forms.Control.LayoutEngine%2A> might be unable to assign the returned size to the control. You can return a size larger than the constraints indicated in the `proposedSize` parameter, but `proposedSize` should decrease as the constraint decreases. For example, `GetPreferredSize(new Size(100, 0))` should not be wider than `GetPreferredSize(new Size(200, 0))`. The exception is a `proposedSize` of 0 or `Size.Empty`, which are defined as unconstrained."
  syntax:
    content: public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);
    parameters:
    - id: proposedSize
      type: System.Drawing.Size
      description: "The custom-sized area for a control."
    return:
      type: System.Drawing.Size
      description: "An ordered pair of type <xref href=&quot;System.Drawing.Size&quot;></xref> representing the width and height of a rectangle."
  overload: System.Windows.Forms.Control.GetPreferredSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  id: GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetScaledBounds(Rectangle,SizeF,BoundsSpecified)
  nameWithType: Control.GetScaledBounds(Rectangle,SizeF,BoundsSpecified)
  fullName: System.Windows.Forms.Control.GetScaledBounds(Rectangle,SizeF,BoundsSpecified)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the bounds within which the control is scaled."
  remarks: "This is a helper method that is called by <xref:System.Windows.Forms.Control.ScaleControl%2A> to retrieve the bounds within which the control is scaled. You can override this method to reuse the <xref:System.Windows.Forms.Control.ScaleControl%2A> scaling logic, but you must supply your own bounds. The default implementation returns scaled bounds that take into account the `specified` bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have."
  syntax:
    content: protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);
    parameters:
    - id: bounds
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that specifies the area for which to retrieve the display bounds."
    - id: factor
      type: System.Drawing.SizeF
      description: "The height and width of the control&quot;s bounds."
    - id: specified
      type: System.Windows.Forms.BoundsSpecified
      description: "One of the values of <xref href=&quot;System.Windows.Forms.BoundsSpecified&quot;></xref> that specifies the bounds of the control to use when defining its size and position."
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> representing the bounds within which the control is scaled."
  overload: System.Windows.Forms.Control.GetScaledBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)
  id: GetStyle(System.Windows.Forms.ControlStyles)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetStyle(ControlStyles)
  nameWithType: Control.GetStyle(ControlStyles)
  fullName: System.Windows.Forms.Control.GetStyle(ControlStyles)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the value of the specified control style bit for the control."
  remarks: "Control style bit flags are used to categorize supported behavior. A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit and the Boolean value to set the bit to. To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the GetStyle method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate."
  example:
  - "The following code example returns the value of the double-buffering related style bits for a <xref:System.Windows.Forms.Form>. This example returns `true` only if all the style bits are set to `true`.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#4](~/add/codesnippet/cpp/m-system.windows.forms.c_115_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#4](~/add/codesnippet/csharp/m-system.windows.forms.c_115_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#4](~/add/codesnippet/visualbasic/m-system.windows.forms.c_115_1.vb)]"
  syntax:
    content: protected bool GetStyle (System.Windows.Forms.ControlStyles flag);
    parameters:
    - id: flag
      type: System.Windows.Forms.ControlStyles
      description: "The <xref href=&quot;System.Windows.Forms.ControlStyles&quot;></xref> bit to return the value from."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified control style bit is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.GetStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GetTopLevel
  id: GetTopLevel
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GetTopLevel()
  nameWithType: Control.GetTopLevel()
  fullName: System.Windows.Forms.Control.GetTopLevel()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines if the control is a top-level control."
  syntax:
    content: protected bool GetTopLevel ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is a top-level control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.GetTopLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: Control.GiveFeedback
  fullName: System.Windows.Forms.Control.GiveFeedback
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs during a drag operation."
  remarks: "The GiveFeedback event is raised when a drag-and-drop operation is started. With the GiveFeedback event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.       The following describes how and when events related to drag-and-drop operations are raised.       The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.       If the control is a valid drop target, the GiveFeedback event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.       Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.      -   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.      -   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.      -   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.       If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event&quot;s <xref:System.Windows.Forms.QueryContinueDragEventArgs>.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the GiveFeedback event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.          > [!NOTE]     >  The <xref:System.Windows.Forms.Control.DragOver> and GiveFeedback events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&quot;s position.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the GiveFeedback event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox`where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the GiveFeedback event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/add/codesnippet/cpp/e-system.windows.forms.c_55_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/add/codesnippet/visualbasic/e-system.windows.forms.c_55_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#3](~/add/codesnippet/csharp/e-system.windows.forms.c_55_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.Forms.GiveFeedbackEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.GotFocus
  id: GotFocus
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: GotFocus
  nameWithType: Control.GotFocus
  fullName: System.Windows.Forms.Control.GotFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control receives focus."
  remarks: "When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  GotFocus  \n  \n3.  <xref:System.Windows.Forms.Control.Leave>  \n  \n4.  <xref:System.Windows.Forms.Control.Validating>  \n  \n5.  <xref:System.Windows.Forms.Control.Validated>  \n  \n6.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  GotFocus  \n  \n3.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n4.  <xref:System.Windows.Forms.Control.Leave>  \n  \n5.  <xref:System.Windows.Forms.Control.Validating>  \n  \n6.  <xref:System.Windows.Forms.Control.Validated>  \n  \n If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  \n  \n **Note** The GotFocus and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the GotFocus and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls. Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. For more information about the GotFocus and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646283\\(v=vs.85\\).aspx)and[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\\(v=vs.85\\).aspx) topics.  \n  \n> [!CAUTION]\n>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, GotFocus, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\\(v=vs.85\\).aspx) topic.  \n  \n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the GotFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the GotFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#47](~/add/codesnippet/csharp/e-system.windows.forms.c_49_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#47](~/add/codesnippet/visualbasic/e-system.windows.forms.c_49_1.vb)]"
  syntax:
    content: public event EventHandler GotFocus;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Handle
  id: Handle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Handle
  nameWithType: Control.Handle
  fullName: System.Windows.Forms.Control.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the window handle that the control is bound to."
  remarks: "The value of the Handle property is a Windows `HWND`. If the handle has not yet been created, referencing this property will force the handle to be created."
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=fullName> and the Handle property. To run the example paste the following code in a form. Add two buttons named `Button1` and `Button2` to the form and ensure all events are connected to their event handlers.  \n  \n [!code-vb[System.Windows.Forms.ControlPaint1#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_25_1.vb)]\n [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/add/codesnippet/cpp/p-system.windows.forms.c_25_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlPaint1#2](~/add/codesnippet/csharp/p-system.windows.forms.c_25_1.cs)]"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "An <xref:System.IntPtr> that contains the window handle (<xref uid=&quot;langword_csharp_HWND&quot; name=&quot;HWND&quot; href=&quot;&quot;></xref>) of the control."
  overload: System.Windows.Forms.Control.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.HandleCreated
  id: HandleCreated
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: HandleCreated
  nameWithType: Control.HandleCreated
  fullName: System.Windows.Forms.Control.HandleCreated
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a handle is created for the control."
  remarks: "A handle is created when the <xref:System.Windows.Forms.Control> is displayed for the first time. For example, if a <xref:System.Windows.Forms.Control> is created that has <xref:System.Windows.Forms.Control.Visible%2A> set to `false`, the HandleCreated event will not be raised until <xref:System.Windows.Forms.Control.Visible%2A> is set to `true`.       For more information about handling events, see[Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleCreated event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button>or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the HandleCreated event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#37](~/add/codesnippet/csharp/e-system.windows.forms.c_70_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#37](~/add/codesnippet/visualbasic/e-system.windows.forms.c_70_1.vb)]"
  syntax:
    content: public event EventHandler HandleCreated;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.HandleDestroyed
  id: HandleDestroyed
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: HandleDestroyed
  nameWithType: Control.HandleDestroyed
  fullName: System.Windows.Forms.Control.HandleDestroyed
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control&quot;s handle is in the process of being destroyed."
  remarks: "During the HandleDestroyed event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleDestroyed event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the HandleDestroyed event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#38](~/add/codesnippet/csharp/e-system.windows.forms.c_52_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#38](~/add/codesnippet/visualbasic/e-system.windows.forms.c_52_1.vb)]"
  syntax:
    content: public event EventHandler HandleDestroyed;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.HasChildren
  id: HasChildren
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: HasChildren
  nameWithType: Control.HasChildren
  fullName: System.Windows.Forms.Control.HasChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control contains one or more child controls."
  remarks: "If the <xref:System.Windows.Forms.Control.Controls%2A> collection has a <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> greater than zero, the HasChildren property will return `true`. Accessing the HasChildren property does not force the creation of a <xref:System.Windows.Forms.Control.ControlCollection> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls."
  example:
  - "The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.  \n  \n [!code-cs[Windows.Forms.Control Properties#1](~/add/codesnippet/csharp/p-system.windows.forms.c_113_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#1](~/add/codesnippet/cpp/p-system.windows.forms.c_113_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_113_1.vb)]"
  syntax:
    content: public bool HasChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control contains one or more child controls; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.HasChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Height
  id: Height
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Height
  nameWithType: Control.Height
  fullName: System.Windows.Forms.Control.Height
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the height of the control."
  remarks: "Changes made to the Height and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.      > [!NOTE] >  The minimum height for the derived control <xref:System.Windows.Forms.Splitter> is one pixel. The default height for the <xref:System.Windows.Forms.Splitter> control is three pixels. Setting the height of the <xref:System.Windows.Forms.Splitter> control to a value less than one will reset the property value to the default height."
  example:
  - "The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  \n  \n [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_95_1.cs)]\n [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_95_1.cpp)]\n [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_95_1.vb)]"
  syntax:
    content: public int Height { get; set; }
    return:
      type: System.Int32
      description: "The height of the control in pixels."
  overload: System.Windows.Forms.Control.Height*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.HelpRequested
  id: HelpRequested
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: HelpRequested
  nameWithType: Control.HelpRequested
  fullName: System.Windows.Forms.Control.HelpRequested
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user requests help for a control."
  remarks: "The HelpRequested event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates handling the HelpRequested event to display custom Help content on a form containing four address fields. The HelpRequested event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field. The <xref:System.Windows.Forms.HelpEventArgs.Handled%2A> property is set to true to indicate that the `HelpRequested` event is handled. The example also demonstrates storing the Help text in the <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=fullName> property.  \n  \n [!code-cpp[System.Windows.Forms.HelpEventHandler#1](~/add/codesnippet/cpp/e-system.windows.forms.c_45_1.cpp)]\n [!code-vb[System.Windows.Forms.HelpEventHandler#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_45_1.vb)]\n [!code-cs[System.Windows.Forms.HelpEventHandler#1](~/add/codesnippet/csharp/e-system.windows.forms.c_45_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.HelpEventHandler HelpRequested;
    return:
      type: System.Windows.Forms.HelpEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Hide
  id: Hide
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Hide()
  nameWithType: Control.Hide()
  fullName: System.Windows.Forms.Control.Hide()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Conceals the control from the user."
  remarks: "Hiding the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `false`. After the Hide method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `false` until the <xref:System.Windows.Forms.Control.Show%2A> method is called."
  example:
  - "The following code example hides a button if the CTRL key is pressed when the button is clicked. This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-cs[Windows.Forms.Control Members4#2](~/add/codesnippet/csharp/m-system.windows.forms.c_42_1.cs)]\n [!code-vb[Windows.Forms.Control Members4#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_42_1.vb)]\n [!code-cpp[Windows.Forms.Control Members4#2](~/add/codesnippet/cpp/m-system.windows.forms.c_42_1.cpp)]"
  syntax:
    content: public void Hide ();
    parameters: []
  overload: System.Windows.Forms.Control.Hide*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ImeMode
  id: ImeMode
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ImeMode
  nameWithType: Control.ImeMode
  fullName: System.Windows.Forms.Control.ImeMode
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the Input Method Editor (IME) mode of the control."
  remarks: "An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard. The ImeMode property is typically set to <xref:System.Windows.Forms.ImeMode?displayProperty=fullName> for a <xref:System.Windows.Forms.TextBox> control that is intended to only enter numeric values. The ImeMode property value is set to <xref:System.Windows.Forms.ImeMode?displayProperty=fullName> for the <xref:System.Windows.Forms.Form> class.       Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <xref:System.Windows.Forms.ImeMode>.      > [!IMPORTANT] >  The user can interactively change the ImeMode unless it has been programmatically set to <xref:System.Windows.Forms.ImeMode?displayProperty=fullName>. In this case, the user will not be able to use the IME.   >    >  The ImeMode property is ignored on Windows 8 when the global input mode is in effect. For more info, see[Switch Text Input Changed from Per-Thread to Per-User](http://go.microsoft.com/fwlink/?LinkID=256509)."
  syntax:
    content: public System.Windows.Forms.ImeMode ImeMode { get; set; }
    return:
      type: System.Windows.Forms.ImeMode
      description: "One of the <xref href=&quot;System.Windows.Forms.ImeMode&quot;></xref> values. The default is <xref href=&quot;System.Windows.Forms.ImeMode&quot;></xref>."
  overload: System.Windows.Forms.Control.ImeMode*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The assigned value is not one of the <xref href=&quot;System.Windows.Forms.ImeMode&quot;></xref> enumeration values."
  platform:
  - net462
- uid: System.Windows.Forms.Control.ImeModeBase
  id: ImeModeBase
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ImeModeBase
  nameWithType: Control.ImeModeBase
  fullName: System.Windows.Forms.Control.ImeModeBase
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the IME mode of a control."
  syntax:
    content: protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }
    return:
      type: System.Windows.Forms.ImeMode
      description: "The IME mode of the control."
  overload: System.Windows.Forms.Control.ImeModeBase*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ImeModeChanged
  id: ImeModeChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ImeModeChanged
  nameWithType: Control.ImeModeChanged
  fullName: System.Windows.Forms.Control.ImeModeChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.ImeMode*> property has changed."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.ImeMode%2A> property is changed by either a programmatic modification or through interaction.       Controls that do not support Input Method Managers will never raise this event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_3_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_3_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_3_1.cpp)]"
  syntax:
    content: public event EventHandler ImeModeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InitLayout
  id: InitLayout
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InitLayout()
  nameWithType: Control.InitLayout()
  fullName: System.Windows.Forms.Control.InitLayout()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Called after the control has been added to another container."
  remarks: "The InitLayout method is called immediately after adding a control to a container. The InitLayout method enables a control to initialize its layout state based on its container. For example, you would typically apply anchoring and docking to the control in the InitLayout method."
  syntax:
    content: protected virtual void InitLayout ();
    parameters: []
  overload: System.Windows.Forms.Control.InitLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidate
  id: Invalidate
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidate()
  nameWithType: Control.Invalidate()
  fullName: System.Windows.Forms.Control.Invalidate()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invalidates the entire surface of the control and causes the control to be redrawn."
  remarks: "Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region."
  example:
  - "The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.  \n  \n [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/m-system.windows.forms.c_72_1.cs)]\n [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/m-system.windows.forms.c_72_1.cpp)]\n [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_72_1.vb)]"
  syntax:
    content: public void Invalidate ();
    parameters: []
  overload: System.Windows.Forms.Control.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidate(System.Boolean)
  id: Invalidate(System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidate(Boolean)
  nameWithType: Control.Invalidate(Boolean)
  fullName: System.Windows.Forms.Control.Invalidate(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invalidates a specific region of the control and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control."
  remarks: "Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region."
  syntax:
    content: public void Invalidate (bool invalidateChildren);
    parameters:
    - id: invalidateChildren
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to invalidate the control&quot;s child controls; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)
  id: Invalidate(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidate(Rectangle)
  nameWithType: Control.Invalidate(Rectangle)
  fullName: System.Windows.Forms.Control.Invalidate(Rectangle)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invalidates the specified region of the control (adds it to the control&quot;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control."
  remarks: "Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region."
  syntax:
    content: public void Invalidate (System.Drawing.Rectangle rc);
    parameters:
    - id: rc
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that represents the region to invalidate."
  overload: System.Windows.Forms.Control.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Region)
  id: Invalidate(System.Drawing.Region)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidate(Region)
  nameWithType: Control.Invalidate(Region)
  fullName: System.Windows.Forms.Control.Invalidate(Region)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invalidates the specified region of the control (adds it to the control&quot;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control."
  remarks: "Calling the Invalidate method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the Invalidate method. When this method is called with no parameters, the entire client area is added to the update region."
  syntax:
    content: public void Invalidate (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: "The <xref href=&quot;System.Drawing.Region&quot;></xref> to invalidate."
  overload: System.Windows.Forms.Control.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)
  id: Invalidate(System.Drawing.Rectangle,System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidate(Rectangle,Boolean)
  nameWithType: Control.Invalidate(Rectangle,Boolean)
  fullName: System.Windows.Forms.Control.Invalidate(Rectangle,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invalidates the specified region of the control (adds it to the control&quot;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control."
  remarks: "Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region."
  syntax:
    content: public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);
    parameters:
    - id: rc
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that represents the region to invalidate."
    - id: invalidateChildren
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to invalidate the control&quot;s child controls; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)
  id: Invalidate(System.Drawing.Region,System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidate(Region,Boolean)
  nameWithType: Control.Invalidate(Region,Boolean)
  fullName: System.Windows.Forms.Control.Invalidate(Region,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invalidates the specified region of the control (adds it to the control&quot;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control."
  remarks: "Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method. When this method is called with no parameters, the entire client area is added to the update region."
  syntax:
    content: public void Invalidate (System.Drawing.Region region, bool invalidateChildren);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: "The <xref href=&quot;System.Drawing.Region&quot;></xref> to invalidate."
    - id: invalidateChildren
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to invalidate the control&quot;s child controls; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invalidated
  id: Invalidated
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invalidated
  nameWithType: Control.Invalidated
  fullName: System.Windows.Forms.Control.Invalidated
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a control&quot;s display requires redrawing."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Invalidated event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the Invalidated event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#40](~/add/codesnippet/csharp/e-system.windows.forms.c_31_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#40](~/add/codesnippet/visualbasic/e-system.windows.forms.c_31_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.InvalidateEventHandler Invalidated;
    return:
      type: System.Windows.Forms.InvalidateEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invoke(System.Delegate)
  id: Invoke(System.Delegate)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invoke(Delegate)
  nameWithType: Control.Invoke(Delegate)
  fullName: System.Windows.Forms.Control.Invoke(Delegate)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes the specified delegate on the thread that owns the control&quot;s underlying window handle."
  remarks: "Delegates are similar to function pointers in C or C++ languages. Delegates encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time. Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.       The Invoke method searches up the control&quot;s parent chain until it finds a control or form that has a window handle if the current control&quot;s underlying window handle does not exist yet. If no appropriate handle can be found, the Invoke method will throw an exception. Exceptions that are raised during the call will be propagated back to the caller.      > [!NOTE] >  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: Invoke, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&quot;s thread.       The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=fullName>. The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list. A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.      > [!NOTE] >  An exception might be thrown if the thread that should process the message is no longer active."
  example:
  - "The following code example shows controls that contain a delegate. The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form. When the user clicks on the button, `Invoke` runs the delegate.  \n  \n [!code-cpp[Control_Invoke2#1](~/add/codesnippet/cpp/m-system.windows.forms.c_18_1.cpp)]\n [!code-cs[Control_Invoke2#1](~/add/codesnippet/csharp/m-system.windows.forms.c_18_1.cs)]\n [!code-vb[Control_Invoke2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_18_1.vb)]"
  syntax:
    content: public object Invoke (Delegate method);
    parameters:
    - id: method
      type: System.Delegate
      description: "A delegate that contains a method to be called in the control&quot;s thread context."
    return:
      type: System.Object
      description: "The return value from the delegate being invoked, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the delegate has no return value."
  overload: System.Windows.Forms.Control.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])
  id: Invoke(System.Delegate,System.Object[])
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Invoke(Delegate,Object[])
  nameWithType: Control.Invoke(Delegate,Object[])
  fullName: System.Windows.Forms.Control.Invoke(Delegate,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes the specified delegate, on the thread that owns the control&quot;s underlying window handle, with the specified list of arguments."
  remarks: "Delegates are similar to function pointers in C or C++ languages. Delegates encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time. Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.       If the control&quot;s handle does not exist yet, this method searches up the control&quot;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, this method throws an exception. Exceptions that are raised during the call will be propagated back to the caller.      > [!NOTE] >  In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&quot;s thread.       The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=fullName>. The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list. A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.      > [!NOTE] >  An exception might be thrown if the thread that should process the message is no longer active."
  example:
  - "The following code example shows controls that contain a delegate. The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments. When the user clicks on the button, `Invoke` runs the delegate.  \n  \n [!code-cs[Control_Invoke1#1](~/add/codesnippet/csharp/m-system.windows.forms.c_114_1.cs)]\n [!code-vb[Control_Invoke1#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_114_1.vb)]\n [!code-cpp[Control_Invoke1#1](~/add/codesnippet/cpp/m-system.windows.forms.c_114_1.cpp)]"
  syntax:
    content: public object Invoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "A delegate to a method that takes parameters of the same number and type that are contained in the `args` parameter."
    - id: args
      type: System.Object[]
      description: "An array of objects to pass as arguments to the specified method. This parameter can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the method takes no arguments."
    return:
      type: System.Object
      description: "An <xref:System.Object> that contains the return value from the delegate being invoked, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the delegate has no return value."
  overload: System.Windows.Forms.Control.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)
  id: InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InvokeGotFocus(Control,EventArgs)
  nameWithType: Control.InvokeGotFocus(Control,EventArgs)
  fullName: System.Windows.Forms.Control.InvokeGotFocus(Control,EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.GotFocus&quot;></xref> event for the specified control."
  syntax:
    content: protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);
    parameters:
    - id: toInvoke
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to assign the event to."
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.InvokeGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)
  id: InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InvokeLostFocus(Control,EventArgs)
  nameWithType: Control.InvokeLostFocus(Control,EventArgs)
  fullName: System.Windows.Forms.Control.InvokeLostFocus(Control,EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.LostFocus&quot;></xref> event for the specified control."
  syntax:
    content: protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);
    parameters:
    - id: toInvoke
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to assign the event to."
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.InvokeLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)
  id: InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InvokeOnClick(Control,EventArgs)
  nameWithType: Control.InvokeOnClick(Control,EventArgs)
  fullName: System.Windows.Forms.Control.InvokeOnClick(Control,EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Click&quot;></xref> event for the specified control."
  syntax:
    content: protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);
    parameters:
    - id: toInvoke
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to assign the <xref href=&quot;System.Windows.Forms.Control.Click&quot;></xref> event to."
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.InvokeOnClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  id: InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InvokePaint(Control,PaintEventArgs)
  nameWithType: Control.InvokePaint(Control,PaintEventArgs)
  fullName: System.Windows.Forms.Control.InvokePaint(Control,PaintEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Paint&quot;></xref> event for the specified control."
  syntax:
    content: protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);
    parameters:
    - id: c
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to assign the <xref href=&quot;System.Windows.Forms.Control.Paint&quot;></xref> event to."
    - id: e
      type: System.Windows.Forms.PaintEventArgs
      description: "An <xref href=&quot;System.Windows.Forms.PaintEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.InvokePaint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  id: InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InvokePaintBackground(Control,PaintEventArgs)
  nameWithType: Control.InvokePaintBackground(Control,PaintEventArgs)
  fullName: System.Windows.Forms.Control.InvokePaintBackground(Control,PaintEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref uid=&quot;langword_csharp_PaintBackground&quot; name=&quot;PaintBackground&quot; href=&quot;&quot;></xref> event for the specified control."
  syntax:
    content: protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);
    parameters:
    - id: c
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> to assign the <xref href=&quot;System.Windows.Forms.Control.Paint&quot;></xref> event to."
    - id: e
      type: System.Windows.Forms.PaintEventArgs
      description: "An <xref href=&quot;System.Windows.Forms.PaintEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.InvokePaintBackground*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.InvokeRequired
  id: InvokeRequired
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: InvokeRequired
  nameWithType: Control.InvokeRequired
  fullName: System.Windows.Forms.Control.InvokeRequired
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on."
  remarks: "Controls in Windows Forms are bound to a specific thread and are not thread safe. Therefore, if you are calling a control&quot;s method from a different thread, you must use one of the control&quot;s invoke methods to marshal the call to the proper thread. This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.      > [!NOTE] >  In addition to the InvokeRequired property, there are four methods on a control that are thread safe to call: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created. Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control&quot;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of these invoke methods when calling from a different thread.       If the control&quot;s handle does not yet exist, InvokeRequired searches up the control&quot;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, the InvokeRequired method returns `false`.       This means that InvokeRequiredcan return `false` if <xref:System.Windows.Forms.Control.Invoke%2A> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control&quot;s handle has not yet been created.       In the case where the control&quot;s handle has not yet been created, you should not simply call properties, methods, or events on the control. This might cause the control&quot;s handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.       You can protect against this case by also checking the value of <xref:System.Windows.Forms.Control.IsHandleCreated%2A> when InvokeRequired returns `false` on a background thread. If the control handle has not yet been created, you must wait until it has been created before calling <xref:System.Windows.Forms.Control.Invoke%2A> or <xref:System.Windows.Forms.Control.BeginInvoke%2A>. Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in `Application.Run(new MainForm())`, before the form has been shown or `Application.Run` has been called.       One solution is to wait until the form&quot;s handle has been created before starting the background thread. Either force handle creation by calling the <xref:System.Windows.Forms.Control.Handle%2A> property, or wait until the <xref:System.Windows.Forms.Form.Load> event to start the background process.       An even better solution is to use the `SynchronizationContext` returned by <xref:System.Threading.SynchronizationContext> rather than a control for cross-thread marshaling.      > [!NOTE] >  An exception might be thrown if the thread that should process the message is no longer active.       For more information about multithreaded Windows Forms controls, see [How to: Use a Background Thread to Search for Files](~/add/includes/ajax-current-ext-md.md) and [How to: Make Thread-Safe Calls to Windows Forms Controls](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool InvokeRequired { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control&quot;s <xref:System.Windows.Forms.Control.Handle*> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.InvokeRequired*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsAccessible
  id: IsAccessible
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsAccessible
  nameWithType: Control.IsAccessible
  fullName: System.Windows.Forms.Control.IsAccessible
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control is visible to accessibility applications."
  syntax:
    content: public bool IsAccessible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is visible to accessibility applications; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsAccessible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsDisposed
  id: IsDisposed
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsDisposed
  nameWithType: Control.IsDisposed
  fullName: System.Windows.Forms.Control.IsDisposed
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control has been disposed of."
  remarks: "When this property returns `true`, the control is disposed of and can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method."
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control has been disposed of; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsHandleCreated
  id: IsHandleCreated
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsHandleCreated
  nameWithType: Control.IsHandleCreated
  fullName: System.Windows.Forms.Control.IsHandleCreated
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control has a handle associated with it."
  remarks: "Use the IsHandleCreated property to determine whether <xref:System.Windows.Forms.Control.CreateHandle%2A> has been called."
  syntax:
    content: public bool IsHandleCreated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a handle has been assigned to the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsHandleCreated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsInputChar(System.Char)
  id: IsInputChar(System.Char)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsInputChar(Char)
  nameWithType: Control.IsInputChar(Char)
  fullName: System.Windows.Forms.Control.IsInputChar(Char)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines if a character is an input character that the control recognizes."
  remarks: "Call the IsInputChar method to determine whether the character specified by the `charCode` parameter is an input character that the control wants. This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control. If IsInputChar returns `true`, the specified character is sent directly to the control. If IsInputChar returns `false`, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase. The preprocessing of a character includes checking whether the character is a mnemonic of another control."
  syntax:
    content: protected virtual bool IsInputChar (char charCode);
    parameters:
    - id: charCode
      type: System.Char
      description: "The character to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character should be sent directly to the control and not preprocessed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsInputChar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)
  id: IsInputKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsInputKey(Keys)
  nameWithType: Control.IsInputKey(Keys)
  fullName: System.Windows.Forms.Control.IsInputKey(Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines whether the specified key is a regular input key or a special key that requires preprocessing."
  remarks: "Call the IsInputKey method to determine whether the key specified by the `keyData` parameter is an input key that the control wants. This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control. If IsInputKey returns `true`, the specified key is sent directly to the control. If IsInputKey returns `false`, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase. Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys."
  example:
  - "The following code example shows you how to override the IsInputKey method for a <xref:System.Windows.Forms.TextBox> control. In this example, the `TabTextBox` class handles the TAB key. When the `TabTextBox` has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text. By default, the <xref:System.Windows.Forms.TextBox> control handles the TAB key by moving the input focus to the next control. In this case, the keypress never reaches the <xref:System.Windows.Forms.Control.OnKeyDown%2A> method override. To prevent this default behavior, the IsInputKey method override returns `true` when the user presses the TAB key. For all other keypresses, the IsInputKey method override returns the result of calling the base-class version of the method.  \n  \n [!code-vb[System.Windows.Forms.Control.IsInputKey#0](~/add/codesnippet/visualbasic/m-system.windows.forms.c_106_1.vb)]\n [!code-cs[System.Windows.Forms.Control.IsInputKey#0](~/add/codesnippet/csharp/m-system.windows.forms.c_106_1.cs)]"
  syntax:
    content: protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);
    parameters:
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "One of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> values."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified key is a regular input key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsInputKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)
  id: IsKeyLocked(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsKeyLocked(Keys)
  nameWithType: Control.IsKeyLocked(Keys)
  fullName: System.Windows.Forms.Control.IsKeyLocked(Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect."
  remarks: "Use the IsKeyLocked property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination."
  example:
  - "The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.  \n  \n [!code-vb[ControlIsKeyLocked#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_2_1.vb)]\n [!code-cpp[ControlIsKeyLocked#1](~/add/codesnippet/cpp/m-system.windows.forms.c_2_1.cpp)]\n [!code-cs[ControlIsKeyLocked#1](~/add/codesnippet/csharp/m-system.windows.forms.c_2_1.cs)]"
  syntax:
    content: public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);
    parameters:
    - id: keyVal
      type: System.Windows.Forms.Keys
      description: "The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> enumeration."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified key or keys are in effect; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsKeyLocked*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>keyVal</code> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key."
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsMirrored
  id: IsMirrored
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsMirrored
  nameWithType: Control.IsMirrored
  fullName: System.Windows.Forms.Control.IsMirrored
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control is mirrored."
  remarks: 'A mirrored control displays both layout and text from right to left. For more information, see [How to: Create Mirrored Windows Forms and Controls](http://msdn.microsoft.com/en-us/7c5c4ecc-9bfb-4508-8383-753e306719b1).'
  syntax:
    content: public bool IsMirrored { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is mirrored; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsMirrored*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)
  id: IsMnemonic(System.Char,System.String)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: IsMnemonic(Char,String)
  nameWithType: Control.IsMnemonic(Char,String)
  fullName: System.Windows.Forms.Control.IsMnemonic(Char,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines if the specified character is the mnemonic character assigned to the control in the specified string."
  remarks: "The mnemonic character is the character immediately following the first instance of &quot;&&quot; in a <xref:System.String>."
  example:
  - "The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior. The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and IsMnemonic properties. To run this example paste the following code after a form class, in the same file. Add a button of type `MnemonicButton` to the form.  \n  \n [!code-cs[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/csharp/m-system.windows.forms.c_70_1.cs)]\n [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/cpp/m-system.windows.forms.c_70_1.cpp)]\n [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_70_1.vb)]"
  syntax:
    content: public static bool IsMnemonic (char charCode, string text);
    parameters:
    - id: charCode
      type: System.Char
      description: "The character to test."
    - id: text
      type: System.String
      description: "The string to search."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <code>charCode</code> character is the mnemonic character assigned to the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.IsMnemonic*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.KeyDown
  id: KeyDown
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: KeyDown
  nameWithType: Control.KeyDown
  fullName: System.Windows.Forms.Control.KeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a key is pressed while the control has focus."
  remarks: "Key events occur in the following order:      1.  KeyDown      2.  <xref:System.Windows.Forms.Control.KeyPress>      3.  <xref:System.Windows.Forms.Control.KeyUp>       To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> property in your form&quot;s <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyDown event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form. The code for the override of the <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`. Instead of overriding the <xref:System.Windows.Forms.Control.IsInputKey%2A> method, you can handle the <xref:System.Windows.Forms.Control.PreviewKeyDown> event and set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>property to `true`. For a code example, see the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the KeyDown event to determine the type of character entered into the control.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_14_1.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/e-system.windows.forms.c_14_1.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/e-system.windows.forms.c_14_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Forms.KeyEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.KeyPress
  id: KeyPress
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: KeyPress
  nameWithType: Control.KeyPress
  fullName: System.Windows.Forms.Control.KeyPress
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a character. space or backspace key is pressed while the control has focus."
  remarks: "Key events occur in the following order:      1.  <xref:System.Windows.Forms.Control.KeyDown>      2.  KeyPress      3.  <xref:System.Windows.Forms.Control.KeyUp>       The KeyPress event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> events.       Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.       To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> property in your form&quot;s KeyPress event-handling method to `true`.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the KeyPress event to prevent characters from entering the control.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_4_1.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/e-system.windows.forms.c_4_1.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/e-system.windows.forms.c_4_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.KeyPressEventHandler KeyPress;
    return:
      type: System.Windows.Forms.KeyPressEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.KeyUp
  id: KeyUp
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: KeyUp
  nameWithType: Control.KeyUp
  fullName: System.Windows.Forms.Control.KeyUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a key is released while the control has focus."
  remarks: "Key events occur in the following order:      1.  <xref:System.Windows.Forms.Control.KeyDown>      2.  <xref:System.Windows.Forms.Control.KeyPress>      3.  KeyUp       To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> property in your form&quot;s <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyUp event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form. The code for the override of <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the KeyUp event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.  \n  \n [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/e-system.windows.forms.c_40_1.cpp)]\n [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_40_1.vb)]\n [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/e-system.windows.forms.c_40_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Forms.KeyEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Layout
  id: Layout
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Layout
  nameWithType: Control.Layout
  fullName: System.Windows.Forms.Control.Layout
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a control should reposition its child controls."
  remarks: "The Layout event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control. The layout event can be suppressed using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods. Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change. For example, if you resize and move a control, each operation would raise a Layout event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the Layout event. This will keep the form centered as the user resizes it. This example requires that you have created a <xref:System.Windows.Forms.Form> control.  \n  \n [!code-cs[Control.Layout#1](~/add/codesnippet/csharp/e-system.windows.forms.c_22_1.cs)]\n [!code-vb[Control.Layout#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_22_1.vb)]\n [!code-cpp[Control.Layout#1](~/add/codesnippet/cpp/e-system.windows.forms.c_22_1.cpp)]"
  syntax:
    content: public event System.Windows.Forms.LayoutEventHandler Layout;
    return:
      type: System.Windows.Forms.LayoutEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.LayoutEngine
  id: LayoutEngine
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: LayoutEngine
  nameWithType: Control.LayoutEngine
  fullName: System.Windows.Forms.Control.LayoutEngine
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a cached instance of the control&quot;s layout engine."
  remarks: "The LayoutEngine property gets the layout engine for the control&quot;s children rather than for the control itself."
  syntax:
    content: public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }
    return:
      type: System.Windows.Forms.Layout.LayoutEngine
      description: "The <xref href=&quot;System.Windows.Forms.Layout.LayoutEngine&quot;></xref> for the control&quot;s contents."
  overload: System.Windows.Forms.Control.LayoutEngine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Leave
  id: Leave
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Leave
  nameWithType: Control.Leave
  fullName: System.Windows.Forms.Control.Leave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the input focus leaves the control."
  remarks: "When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  Leave  \n  \n4.  <xref:System.Windows.Forms.Control.Validating>  \n  \n5.  <xref:System.Windows.Forms.Control.Validated>  \n  \n6.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n4.  Leave  \n  \n5.  <xref:System.Windows.Forms.Control.Validating>  \n  \n6.  <xref:System.Windows.Forms.Control.Validated>  \n  \n If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.Control.Enter> and Leave events are suppressed by the <xref:System.Windows.Forms.Form> class. The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. The <xref:System.Windows.Forms.Control.Enter> and Leave events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control. When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the Leave event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.  \n  \n> [!CAUTION]\n>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, Leave, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\\(v=vs.85\\).aspx) topic.  \n  \n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the Leave event to reset a control to its former state.  \n  \n [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/e-system.windows.forms.c_39_1.cs)]\n [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/e-system.windows.forms.c_39_1.cpp)]\n [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_39_1.vb)]"
  syntax:
    content: public event EventHandler Leave;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Left
  id: Left
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Left
  nameWithType: Control.Left
  fullName: System.Windows.Forms.Control.Left
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container&quot;s client area."
  remarks: "The Left property value is equivalent to the <xref:System.Drawing.Point.X%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.       Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and Left property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change."
  example:
  - "The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  \n  \n [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_103_1.cs)]\n [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_103_1.cpp)]\n [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_103_1.vb)]"
  syntax:
    content: public int Left { get; set; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> representing the distance, in pixels, between the left edge of the control and the left edge of its container&quot;s client area."
  overload: System.Windows.Forms.Control.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Location
  id: Location
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Location
  nameWithType: Control.Location
  fullName: System.Windows.Forms.Control.Location
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container."
  remarks: "Because the <xref:System.Drawing.Point> class is a value type (`Structure` in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], `struct` in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)]), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control. So, adjusting the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Drawing.Point> returned from this property will not affect the <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, or <xref:System.Windows.Forms.Control.Bottom%2A> property values of the control. To adjust these properties set each property value individually, or set the Location property with a new <xref:System.Drawing.Point>.       If the <xref:System.Windows.Forms.Control> is a <xref:System.Windows.Forms.Form>, the Location property value represents the upper-left corner of the <xref:System.Windows.Forms.Form> in screen coordinates."
  example:
  - "The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox>and sets its Location within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.  \n  \n [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_94_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_94_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_94_1.vb)]"
  syntax:
    content: public System.Drawing.Point Location { get; set; }
    return:
      type: System.Drawing.Point
      description: "The <xref href=&quot;System.Drawing.Point&quot;></xref> that represents the upper-left corner of the control relative to the upper-left corner of its container."
  overload: System.Windows.Forms.Control.Location*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.LocationChanged
  id: LocationChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: LocationChanged
  nameWithType: Control.LocationChanged
  fullName: System.Windows.Forms.Control.LocationChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Location*> property value has changed."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Location%2A> property is changed by either a programmatic modification or through interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example raises the LocationChanged event on a <xref:System.Windows.Forms.StatusStrip> when the form is resized.  \n  \n [!code-cs[System.Windows.Forms.LocationChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_69_1.cs)]\n [!code-vb[System.Windows.Forms.LocationChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_69_1.vb)]"
  syntax:
    content: public event EventHandler LocationChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.LostFocus
  id: LostFocus
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: LostFocus
  nameWithType: Control.LostFocus
  fullName: System.Windows.Forms.Control.LostFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control loses focus."
  remarks: "When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  <xref:System.Windows.Forms.Control.Leave>  \n  \n4.  <xref:System.Windows.Forms.Control.Validating>  \n  \n5.  <xref:System.Windows.Forms.Control.Validated>  \n  \n6.  LostFocus  \n  \n When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  LostFocus  \n  \n4.  <xref:System.Windows.Forms.Control.Leave>  \n  \n5.  <xref:System.Windows.Forms.Control.Validating>  \n  \n6.  <xref:System.Windows.Forms.Control.Validated>  \n  \n If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  \n  \n If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.Control.GotFocus> and LostFocus events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the <xref:System.Windows.Forms.Control.GotFocus> and LostFocus events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls. Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. For more information about the <xref:System.Windows.Forms.Control.GotFocus> and LostFocus events, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\\(v=vs.85\\).aspx) and [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\\(v=vs.85\\).aspx) topics.  \n  \n> [!CAUTION]\n>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, LostFocus, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\\(v=vs.85\\).aspx) topic.  \n  \n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates validating the text for TextBox1. It also demonstrates handling the LostFocus event by setting the <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=fullName> property to the text in TextBox1. The code example used the <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=fullName> method to check for an error before opening the file dialog box. To run this example, paste the following code into a form containing a <xref:System.Windows.Forms.TextBox> named `TextBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, a <xref:System.Windows.Forms.Button> named `Button1`, and an <xref:System.Windows.Forms.ErrorProvider> named `ErrorProvider1`. Ensure all events are associated with their event handlers.  \n  \n [!code-cs[System.Windows.Forms.FileDialog#2](~/add/codesnippet/csharp/e-system.windows.forms.c_78_1.cs)]\n [!code-cpp[System.Windows.Forms.FileDialog#2](~/add/codesnippet/cpp/e-system.windows.forms.c_78_1.cpp)]\n [!code-vb[System.Windows.Forms.FileDialog#2](~/add/codesnippet/visualbasic/e-system.windows.forms.c_78_1.vb)]"
  syntax:
    content: public event EventHandler LostFocus;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Margin
  id: Margin
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Margin
  nameWithType: Control.Margin
  fullName: System.Windows.Forms.Control.Margin
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the space between controls."
  remarks: "Controls receive default values for Margin that are reasonably close to Windows user interface guidelines. Some adjustments might still be necessary for particular applications.      > [!NOTE] >  Setting the Margin property on a docked control has no effect on the distance of the control from the the edges of its container."
  syntax:
    content: public System.Windows.Forms.Padding Margin { get; set; }
    return:
      type: System.Windows.Forms.Padding
      description: "A <xref href=&quot;System.Windows.Forms.Padding&quot;></xref> representing the space between controls."
  overload: System.Windows.Forms.Control.Margin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MarginChanged
  id: MarginChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MarginChanged
  nameWithType: Control.MarginChanged
  fullName: System.Windows.Forms.Control.MarginChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control&quot;s margin changes."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MarginChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the MarginChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#21](~/add/codesnippet/csharp/e-system.windows.forms.c_67_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#21](~/add/codesnippet/visualbasic/e-system.windows.forms.c_67_1.vb)]"
  syntax:
    content: public event EventHandler MarginChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MaximumSize
  id: MaximumSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MaximumSize
  nameWithType: Control.MaximumSize
  fullName: System.Windows.Forms.Control.MaximumSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the size that is the upper limit that <xref:System.Windows.Forms.Control.GetPreferredSize*> can specify."
  syntax:
    content: public virtual System.Drawing.Size MaximumSize { get; set; }
    return:
      type: System.Drawing.Size
      description: "An ordered pair of type <xref href=&quot;System.Drawing.Size&quot;></xref> representing the width and height of a rectangle."
  overload: System.Windows.Forms.Control.MaximumSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MinimumSize
  id: MinimumSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MinimumSize
  nameWithType: Control.MinimumSize
  fullName: System.Windows.Forms.Control.MinimumSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the size that is the lower limit that <xref:System.Windows.Forms.Control.GetPreferredSize*> can specify."
  syntax:
    content: public virtual System.Drawing.Size MinimumSize { get; set; }
    return:
      type: System.Drawing.Size
      description: "An ordered pair of type <xref href=&quot;System.Drawing.Size&quot;></xref> representing the width and height of a rectangle."
  overload: System.Windows.Forms.Control.MinimumSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ModifierKeys
  id: ModifierKeys
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ModifierKeys
  nameWithType: Control.ModifierKeys
  fullName: System.Windows.Forms.Control.ModifierKeys
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state."
  remarks: ''
  example:
  - "The following code example hides a button when the CTRL key is pressed while the button is clicked. This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-cs[Windows.Forms.Control Members4#2](~/add/codesnippet/csharp/p-system.windows.forms.c_1_1.cs)]\n [!code-vb[Windows.Forms.Control Members4#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_1_1.vb)]\n [!code-cpp[Windows.Forms.Control Members4#2](~/add/codesnippet/cpp/p-system.windows.forms.c_1_1.cpp)]"
  syntax:
    content: public static System.Windows.Forms.Keys ModifierKeys { get; }
    return:
      type: System.Windows.Forms.Keys
      description: "A bitwise combination of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> values. The default is <xref href=&quot;System.Windows.Forms.Keys&quot;></xref>."
  overload: System.Windows.Forms.Control.ModifierKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseButtons
  id: MouseButtons
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseButtons
  nameWithType: Control.MouseButtons
  fullName: System.Windows.Forms.Control.MouseButtons
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating which of the mouse buttons is in a pressed state."
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, MouseButtons, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> members. To run the example, paste the following code in a form called Form1 containing several controls. This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.  \n  \n [!code-cs[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/csharp/p-system.windows.forms.c_50_1.cs)]\n [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/cpp/p-system.windows.forms.c_50_1.cpp)]\n [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_50_1.vb)]"
  syntax:
    content: public static System.Windows.Forms.MouseButtons MouseButtons { get; }
    return:
      type: System.Windows.Forms.MouseButtons
      description: "A bitwise combination of the <xref href=&quot;System.Windows.Forms.MouseButtons&quot;></xref> enumeration values. The default is <xref href=&quot;System.Windows.Forms.MouseButtons&quot;></xref>."
  overload: System.Windows.Forms.Control.MouseButtons*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseCaptureChanged
  id: MouseCaptureChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseCaptureChanged
  nameWithType: Control.MouseCaptureChanged
  fullName: System.Windows.Forms.Control.MouseCaptureChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control loses mouse capture."
  remarks: "In rare scenarios, you might need to detect unexpected input. For example, consider the following scenarios.      -   During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.      -   During a mouse operation, the user switches to another program by pressing ALT+TAB.      -   During a mouse operation, another program displays a window or a message box that takes focus away from the current application.       Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation. If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the MouseCaptureChanged event."
  example:
  - "The following code example demonstrates the MouseCaptureChanged event for a <xref:System.Windows.Forms.Button> control.  \n  \n [!code-cs[System.Windows.Forms.Control.MouseCaptureChanged#1](~/add/codesnippet/csharp/mousecapturechanged/form1.cs#1)]\n [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged#1](~/add/codesnippet/visualbasic/mousecapturechanged/form1.vb#1)]  \n  \n To test this example, run it in the debugger by pressing F5. Open the **Output** window in Visual Studio so that you can see when events are raised. Click the <xref:System.Windows.Forms.Button> and notice the following output.  \n  \n `button1_MouseDown`  \n  \n `button1_MouseUp`  \n  \n `button1_MouseCaptureChanged`  \n  \n Now, click and hold the left mouse button on the <xref:System.Windows.Forms.Button> control. While still clicking the mouse, press ALT+TAB to switch to another program. Notice that the MouseCaptureChanged event is raised enabling you to potentially handle this scenario. Depending on your actions, the <xref:System.Windows.Forms.Control.MouseUp> event might not be raised. You can also try this test with the Windows key or CTRL+ESC.  \n  \n `button1_MouseDown`  \n  \n `button1_MouseCaptureChanged`"
  syntax:
    content: public event EventHandler MouseCaptureChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseClick
  id: MouseClick
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseClick
  nameWithType: Control.MouseClick
  fullName: System.Windows.Forms.Control.MouseClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is clicked by the mouse."
  remarks: "Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:      1.  <xref:System.Windows.Forms.Control.MouseDown> event.      2.  <xref:System.Windows.Forms.Control.Click> event.      3.  MouseClick event.      4.  <xref:System.Windows.Forms.Control.MouseUp> event.       For this to occur, the various events cannot be disabled in the control&quot;s class.       Two single clicks that occur close enough in time, as determined by the mouse settings of the user&quot;s operating system, will generate a <xref:System.Windows.Forms.Control.MouseDoubleClick> event instead of the second MouseClick event.      > [!IMPORTANT] >  <xref:System.Windows.Forms.Control.Click> events are logically higher-level events of a control. They are often raised by other actions, such as pressing the ENTER key when the control has focus.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the MouseClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#54](~/add/codesnippet/csharp/e-system.windows.forms.c_15_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#54](~/add/codesnippet/visualbasic/e-system.windows.forms.c_15_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseClick;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseDoubleClick
  id: MouseDoubleClick
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseDoubleClick
  nameWithType: Control.MouseDoubleClick
  fullName: System.Windows.Forms.Control.MouseDoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is double clicked by the mouse."
  remarks: "The MouseDoubleClick event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control. The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user&quot;s operating system.       The following series of events is raised by the control when such a user action takes place:      1.  <xref:System.Windows.Forms.Control.MouseDown> event.      2.  <xref:System.Windows.Forms.Control.Click> event.      3.  <xref:System.Windows.Forms.Control.MouseClick> event.      4.  <xref:System.Windows.Forms.Control.MouseUp> event.      5.  <xref:System.Windows.Forms.Control.MouseDown> event.      6.  <xref:System.Windows.Forms.Control.DoubleClick> event.      7.  MouseDoubleClick event.      8.  <xref:System.Windows.Forms.Control.MouseUp> event.       For this to occur, the various events cannot be disabled in the control&quot;s class.      > [!IMPORTANT] >  <xref:System.Windows.Forms.Control.DoubleClick> events are logically higher-level events of a control. They may be raised by other user actions, such as shortcut key combinations.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the MouseDoubleClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#55](~/add/codesnippet/csharp/e-system.windows.forms.c_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#55](~/add/codesnippet/visualbasic/e-system.windows.forms.c_0_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseDown
  nameWithType: Control.MouseDown
  fullName: System.Windows.Forms.Control.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse pointer is over the control and a mouse button is pressed."
  remarks: "Mouse events occur in the following order:      1.  <xref:System.Windows.Forms.Control.MouseEnter>      2.  <xref:System.Windows.Forms.Control.MouseMove>      3.  <xref:System.Windows.Forms.Control.MouseHover> / MouseDown / <xref:System.Windows.Forms.Control.MouseWheel>      4.  <xref:System.Windows.Forms.Control.MouseUp>      5.  <xref:System.Windows.Forms.Control.MouseLeave>      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, MouseDown, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and MouseDown events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_13_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_13_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_13_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseDown;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseEnter
  id: MouseEnter
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseEnter
  nameWithType: Control.MouseEnter
  fullName: System.Windows.Forms.Control.MouseEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse pointer enters the control."
  remarks: "Mouse events occur in the following order:      1.  MouseEnter      2.  <xref:System.Windows.Forms.Control.MouseMove>      3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>      4.  <xref:System.Windows.Forms.Control.MouseUp>      5.  <xref:System.Windows.Forms.Control.MouseLeave>      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, MouseEnter, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_2_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_2_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_2_1.vb)]"
  syntax:
    content: public event EventHandler MouseEnter;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseHover
  id: MouseHover
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseHover
  nameWithType: Control.MouseHover
  fullName: System.Windows.Forms.Control.MouseHover
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse pointer rests on the control."
  remarks: "A typical use of MouseHover is to display a tool tip when the mouse pauses on a control within a specified area around the control (the &quot;hover rectangle&quot;). The pause required for this event to be raised is specified in milliseconds by the <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> property.       The MouseHover event is defined and detected in connection with the <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> and <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> properties.       Mouse events occur in the following order:      1.  <xref:System.Windows.Forms.Control.MouseEnter>      2.  <xref:System.Windows.Forms.Control.MouseMove>      3.  MouseHover / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>      4.  <xref:System.Windows.Forms.Control.MouseUp>      5.  <xref:System.Windows.Forms.Control.MouseLeave>      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, MouseHover, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like MouseHover, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_53_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_53_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_53_1.vb)]"
  syntax:
    content: public event EventHandler MouseHover;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseLeave
  nameWithType: Control.MouseLeave
  fullName: System.Windows.Forms.Control.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse pointer leaves the control."
  remarks: "Mouse events occur in the following order:      1.  <xref:System.Windows.Forms.Control.MouseEnter>      2.  <xref:System.Windows.Forms.Control.MouseMove>      3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>      4.  <xref:System.Windows.Forms.Control.MouseUp>      5.  MouseLeave      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, MouseLeave and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_27_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_27_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_27_1.vb)]"
  syntax:
    content: public event EventHandler MouseLeave;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseMove
  nameWithType: Control.MouseMove
  fullName: System.Windows.Forms.Control.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse pointer is moved over the control."
  remarks: "Typical uses of MouseMove are to change the control&quot;s color or to paint a raised rectangle around the control.       Mouse events occur in the following order:      1.  <xref:System.Windows.Forms.Control.MouseEnter>      2.  MouseMove      3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>      4.  <xref:System.Windows.Forms.Control.MouseUp>      5.  <xref:System.Windows.Forms.Control.MouseLeave>      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and MouseMove. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each MouseMove and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_80_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_80_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_80_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MousePosition
  id: MousePosition
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MousePosition
  nameWithType: Control.MousePosition
  fullName: System.Windows.Forms.Control.MousePosition
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the position of the mouse cursor in screen coordinates."
  remarks: "The MousePosition property returns a <xref:System.Drawing.Point> that represents the mouse cursor position at the time the property was referenced. The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control. The coordinates of the upper-left corner of the screen are 0,0.       The MousePosition property is identical to the <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=fullName> property."
  example:
  - "The following code example puts a <xref:System.Windows.Forms.TreeNode> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node. After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again. This example requires that you have a <xref:System.Windows.Forms.TreeView> on a <xref:System.Windows.Forms.Form>. The tree view should also have at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeView.Nodes%2A> collection.  \n  \n [!code-cs[Windows.Forms.Control Members4#3](~/add/codesnippet/csharp/p-system.windows.forms.c_64_1.cs)]\n [!code-vb[Windows.Forms.Control Members4#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_64_1.vb)]\n [!code-cpp[Windows.Forms.Control Members4#3](~/add/codesnippet/cpp/p-system.windows.forms.c_64_1.cpp)]"
  syntax:
    content: public static System.Drawing.Point MousePosition { get; }
    return:
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen."
  overload: System.Windows.Forms.Control.MousePosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseUp
  nameWithType: Control.MouseUp
  fullName: System.Windows.Forms.Control.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse pointer is over the control and a mouse button is released."
  remarks: "Mouse events occur in the following order:      1.  <xref:System.Windows.Forms.Control.MouseEnter>      2.  <xref:System.Windows.Forms.Control.MouseMove>      3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>      4.  MouseUp      5.  <xref:System.Windows.Forms.Control.MouseLeave>      > [!NOTE] >  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, MouseUp, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control&quot;s header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_42_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_42_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_42_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseUp;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.MouseWheel
  id: MouseWheel
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: MouseWheel
  nameWithType: Control.MouseWheel
  fullName: System.Windows.Forms.Control.MouseWheel
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse wheel moves while the control has focus."
  remarks: "When handling the MouseWheel event it is important to follow the user interface (UI) standards associated with the mouse wheel. The <xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=fullName> property value indicates the amount the mouse wheel has been moved. The UI should scroll when the accumulated delta is plus or minus 120. The UI should scroll the number of logical lines returned by the <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName> property for every delta value reached. You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName> lines scrolled per 120 delta units of wheel movement.  \n  \n For more information about handling mouse wheel messages, see the[WM_MOUSEWHEEL](http://msdn.microsoft.com/library/windows/desktop/ms645617\\(v=vs.85\\).aspx)topic.  \n  \n Mouse events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.MouseEnter>  \n  \n2.  <xref:System.Windows.Forms.Control.MouseMove>  \n  \n3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / MouseWheel  \n  \n4.  <xref:System.Windows.Forms.Control.MouseUp>  \n  \n5.  <xref:System.Windows.Forms.Control.MouseLeave>  \n  \n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>. A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur. To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event. In addition, the graphic path is scrolled up or down when the MouseWheel event occurs. Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.  \n  \n [!code-cpp[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/cpp/e-system.windows.forms.c_38_1.cpp)]\n [!code-cs[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/csharp/e-system.windows.forms.c_38_1.cs)]\n [!code-vb[System.Windows.Forms.MouseEvent#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_38_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseWheel;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Move
  id: Move
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Move
  nameWithType: Control.Move
  fullName: System.Windows.Forms.Control.Move
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is moved."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the Move event to display the location of the form in screen coordinates on the caption bar of the form.  \n  \n [!code-cpp[Control.Move#1](~/add/codesnippet/cpp/e-system.windows.forms.c_23_1.cpp)]\n [!code-vb[Control.Move#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_23_1.vb)]\n [!code-cs[Control.Move#1](~/add/codesnippet/csharp/e-system.windows.forms.c_23_1.cs)]"
  syntax:
    content: public event EventHandler Move;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Name
  id: Name
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Name
  nameWithType: Control.Name
  fullName: System.Windows.Forms.Control.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the name of the control."
  remarks: "The Name property can be used at run time to evaluate the object by name rather than type and programmatic name. Because the Name property returns a <xref:System.String> type, it can be evaluated in case-style logic statements (`Select` statement in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], `switch` statement in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] and [!INCLUDE[vcprvc](~/add/includes/vcprvc-md.md)])."
  example:
  - "The following code example displays the Name of a control in a <xref:System.Windows.Forms.MessageBox> when the control is added or removed from a form.  \n  \n [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/p-system.windows.forms.c_14_1.cpp)]\n [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_14_1.vb)]\n [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/p-system.windows.forms.c_14_1.cs)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "The name of the control. The default is an empty string (&quot;&quot;)."
  overload: System.Windows.Forms.Control.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)
  id: NotifyInvalidate(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: NotifyInvalidate(Rectangle)
  nameWithType: Control.NotifyInvalidate(Rectangle)
  fullName: System.Windows.Forms.Control.NotifyInvalidate(Rectangle)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Invalidated&quot;></xref> event with a specified region of the control to invalidate."
  syntax:
    content: protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);
    parameters:
    - id: invalidatedArea
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> representing the area to invalidate."
  overload: System.Windows.Forms.Control.NotifyInvalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)
  id: OnAutoSizeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnAutoSizeChanged(EventArgs)
  nameWithType: Control.OnAutoSizeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnAutoSizeChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.AutoSizeChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnAutoSizeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnAutoSizeChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnAutoSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)
  id: OnBackColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnBackColorChanged(EventArgs)
  nameWithType: Control.OnBackColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBackColorChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BackColorChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnBackColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_30_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_30_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_30_1.vb)]"
  syntax:
    content: protected virtual void OnBackColorChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnBackColorChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)
  id: OnBackgroundImageChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnBackgroundImageChanged(EventArgs)
  nameWithType: Control.OnBackgroundImageChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBackgroundImageChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BackgroundImageChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnBackgroundImageChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_60_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_60_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_60_1.vb)]"
  syntax:
    content: protected virtual void OnBackgroundImageChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnBackgroundImageChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)
  id: OnBackgroundImageLayoutChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnBackgroundImageLayoutChanged(EventArgs)
  nameWithType: Control.OnBackgroundImageLayoutChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BackgroundImageLayoutChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnBackgroundImageLayoutChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnBackgroundImageLayoutChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)
  id: OnBindingContextChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnBindingContextChanged(EventArgs)
  nameWithType: Control.OnBindingContextChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBindingContextChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BindingContextChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnBindingContextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnBindingContextChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnBindingContextChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)
  id: OnCausesValidationChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnCausesValidationChanged(EventArgs)
  nameWithType: Control.OnCausesValidationChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnCausesValidationChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.CausesValidationChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnCausesValidationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_17_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_17_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_17_1.vb)]"
  syntax:
    content: protected virtual void OnCausesValidationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnCausesValidationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)
  id: OnChangeUICues(System.Windows.Forms.UICuesEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnChangeUICues(UICuesEventArgs)
  nameWithType: Control.OnChangeUICues(UICuesEventArgs)
  fullName: System.Windows.Forms.Control.OnChangeUICues(UICuesEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ChangeUICues&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnChangeUICues method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.UICuesEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.UICuesEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnChangeUICues*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnClick(System.EventArgs)
  id: OnClick(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnClick(EventArgs)
  nameWithType: Control.OnClick(EventArgs)
  fullName: System.Windows.Forms.Control.OnClick(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Click&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates overriding the OnClick method in a derived class. To run the example, paste the following code after a form class, in the same file. Add a textbox of type `SingleClickTextBox` to the form.  \n  \n [!code-cs[System.Windows.Forms.ControlOnClick#1](~/add/codesnippet/csharp/m-system.windows.forms.c_15_1.cs)]\n [!code-vb[System.Windows.Forms.ControlOnClick#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_15_1.vb)]\n [!code-cpp[System.Windows.Forms.ControlOnClick#1](~/add/codesnippet/cpp/m-system.windows.forms.c_15_1.cpp)]  \n  \n The following code example shows one of the many uses of the <xref:System.Windows.Forms.Control.Click> event and event handler.  \n  \n [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/m-system.windows.forms.c_15_2.cpp)]\n [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_15_2.vb)]\n [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/m-system.windows.forms.c_15_2.cs)]"
  syntax:
    content: protected virtual void OnClick (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)
  id: OnClientSizeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnClientSizeChanged(EventArgs)
  nameWithType: Control.OnClientSizeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnClientSizeChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ClientSizeChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnClientSizeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnClientSizeChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnClientSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)
  id: OnContextMenuChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnContextMenuChanged(EventArgs)
  nameWithType: Control.OnContextMenuChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnContextMenuChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ContextMenuChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnContextMenuChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_6_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_6_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_6_1.vb)]"
  syntax:
    content: protected virtual void OnContextMenuChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnContextMenuChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)
  id: OnContextMenuStripChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnContextMenuStripChanged(EventArgs)
  nameWithType: Control.OnContextMenuStripChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnContextMenuStripChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ContextMenuStripChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnContextMenuStripChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnContextMenuStripChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnContextMenuStripChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)
  id: OnControlAdded(System.Windows.Forms.ControlEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnControlAdded(ControlEventArgs)
  nameWithType: Control.OnControlAdded(ControlEventArgs)
  fullName: System.Windows.Forms.Control.OnControlAdded(ControlEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ControlAdded&quot;></xref> event."
  remarks: "Called when a child control is added to the control.       Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnControlAdded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.  \n  \n [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/0fc8c7fb-6974-4f10-8201-_1.cpp)]\n [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/0fc8c7fb-6974-4f10-8201-_1.vb)]\n [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/0fc8c7fb-6974-4f10-8201-_1.cs)]"
  syntax:
    content: protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.ControlEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.ControlEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnControlAdded*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)
  id: OnControlRemoved(System.Windows.Forms.ControlEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnControlRemoved(ControlEventArgs)
  nameWithType: Control.OnControlRemoved(ControlEventArgs)
  fullName: System.Windows.Forms.Control.OnControlRemoved(ControlEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ControlRemoved&quot;></xref> event."
  remarks: "Called when a child control is removed from the control.       Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnControlRemoved method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.  \n  \n [!code-cpp[Control.ControlRemoved#1](~/add/codesnippet/cpp/ab705c0a-755a-4539-b414-_1.cpp)]\n [!code-vb[Control.ControlRemoved#1](~/add/codesnippet/visualbasic/ab705c0a-755a-4539-b414-_1.vb)]\n [!code-cs[Control.ControlRemoved#1](~/add/codesnippet/csharp/ab705c0a-755a-4539-b414-_1.cs)]"
  syntax:
    content: protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.ControlEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.ControlEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnControlRemoved*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnCreateControl
  id: OnCreateControl
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnCreateControl()
  nameWithType: Control.OnCreateControl()
  fullName: System.Windows.Forms.Control.OnCreateControl()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref:System.Windows.Forms.Control.CreateControl*> method."
  remarks: "The OnCreateControl method is called when the control is first created.       The OnCreateControl method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnCreateControl ();
    parameters: []
  overload: System.Windows.Forms.Control.OnCreateControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)
  id: OnCursorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnCursorChanged(EventArgs)
  nameWithType: Control.OnCursorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnCursorChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.CursorChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_103_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_103_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_103_1.vb)]"
  syntax:
    content: protected virtual void OnCursorChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnCursorChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnDockChanged(System.EventArgs)
  id: OnDockChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnDockChanged(EventArgs)
  nameWithType: Control.OnDockChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnDockChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DockChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnDockChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_25_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_25_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_25_1.vb)]"
  syntax:
    content: protected virtual void OnDockChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnDockChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)
  id: OnDoubleClick(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnDoubleClick(EventArgs)
  nameWithType: Control.OnDoubleClick(EventArgs)
  fullName: System.Windows.Forms.Control.OnDoubleClick(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DoubleClick&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.  \n  \n [!code-cs[Control.DoubleClick#1](~/add/codesnippet/csharp/m-system.windows.forms.c_63_1.cs)]\n [!code-vb[Control.DoubleClick#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_63_1.vb)]\n [!code-cpp[Control.DoubleClick#1](~/add/codesnippet/cpp/m-system.windows.forms.c_63_1.cpp)]"
  syntax:
    content: protected virtual void OnDoubleClick (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnDoubleClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)
  id: OnDragDrop(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnDragDrop(DragEventArgs)
  nameWithType: Control.OnDragDrop(DragEventArgs)
  fullName: System.Windows.Forms.Control.OnDragDrop(DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragDrop&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnDragDrop method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);
    parameters:
    - id: drgevent
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnDragDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)
  id: OnDragEnter(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: Control.OnDragEnter(DragEventArgs)
  fullName: System.Windows.Forms.Control.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragEnter&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnDragEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);
    parameters:
    - id: drgevent
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnDragLeave(System.EventArgs)
  id: OnDragLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnDragLeave(EventArgs)
  nameWithType: Control.OnDragLeave(EventArgs)
  fullName: System.Windows.Forms.Control.OnDragLeave(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragLeave&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnDragLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnDragLeave (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)
  id: OnDragOver(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: Control.OnDragOver(DragEventArgs)
  fullName: System.Windows.Forms.Control.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragOver&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnDragOver method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);
    parameters:
    - id: drgevent
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)
  id: OnEnabledChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnEnabledChanged(EventArgs)
  nameWithType: Control.OnEnabledChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnEnabledChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.EnabledChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnEnabledChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnEnabledChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnEnabledChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnEnter(System.EventArgs)
  id: OnEnter(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnEnter(EventArgs)
  nameWithType: Control.OnEnter(EventArgs)
  fullName: System.Windows.Forms.Control.OnEnter(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Enter&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.  \n  \n [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/m-system.windows.forms.c_46_1.cs)]\n [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/m-system.windows.forms.c_46_1.cpp)]\n [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_46_1.vb)]"
  syntax:
    content: protected virtual void OnEnter (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnFontChanged(System.EventArgs)
  id: OnFontChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnFontChanged(EventArgs)
  nameWithType: Control.OnFontChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnFontChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.FontChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnFontChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_104_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_104_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_104_1.vb)]"
  syntax:
    content: protected virtual void OnFontChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnFontChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)
  id: OnForeColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnForeColorChanged(EventArgs)
  nameWithType: Control.OnForeColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnForeColorChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ForeColorChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnForeColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_23_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_23_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_23_1.vb)]"
  syntax:
    content: protected virtual void OnForeColorChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnForeColorChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: Control.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.Forms.Control.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.GiveFeedback&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnGiveFeedback method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);
    parameters:
    - id: gfbevent
      type: System.Windows.Forms.GiveFeedbackEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.GiveFeedbackEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnGotFocus(System.EventArgs)
  id: OnGotFocus(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnGotFocus(EventArgs)
  nameWithType: Control.OnGotFocus(EventArgs)
  fullName: System.Windows.Forms.Control.OnGotFocus(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.GotFocus&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnGotFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnGotFocus (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)
  id: OnHandleCreated(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnHandleCreated(EventArgs)
  nameWithType: Control.OnHandleCreated(EventArgs)
  fullName: System.Windows.Forms.Control.OnHandleCreated(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.HandleCreated&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnHandleCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnHandleCreated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnHandleCreated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)
  id: OnHandleDestroyed(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnHandleDestroyed(EventArgs)
  nameWithType: Control.OnHandleDestroyed(EventArgs)
  fullName: System.Windows.Forms.Control.OnHandleDestroyed(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.HandleDestroyed&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnHandleDestroyed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnHandleDestroyed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnHandleDestroyed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)
  id: OnHelpRequested(System.Windows.Forms.HelpEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnHelpRequested(HelpEventArgs)
  nameWithType: Control.OnHelpRequested(HelpEventArgs)
  fullName: System.Windows.Forms.Control.OnHelpRequested(HelpEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.HelpRequested&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnHelpRequested method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);
    parameters:
    - id: hevent
      type: System.Windows.Forms.HelpEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.HelpEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnHelpRequested*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)
  id: OnImeModeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnImeModeChanged(EventArgs)
  nameWithType: Control.OnImeModeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnImeModeChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ImeModeChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnImeModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_49_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_49_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_49_1.vb)]"
  syntax:
    content: protected virtual void OnImeModeChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnImeModeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)
  id: OnInvalidated(System.Windows.Forms.InvalidateEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnInvalidated(InvalidateEventArgs)
  nameWithType: Control.OnInvalidated(InvalidateEventArgs)
  fullName: System.Windows.Forms.Control.OnInvalidated(InvalidateEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Invalidated&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnInvalidated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.InvalidateEventArgs
      description: "An <xref href=&quot;System.Windows.Forms.InvalidateEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnInvalidated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)
  id: OnKeyDown(System.Windows.Forms.KeyEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: Control.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.Forms.Control.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_108_1.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/m-system.windows.forms.c_108_1.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/m-system.windows.forms.c_108_1.cs)]"
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.KeyEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)
  id: OnKeyPress(System.Windows.Forms.KeyPressEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnKeyPress(KeyPressEventArgs)
  nameWithType: Control.OnKeyPress(KeyPressEventArgs)
  fullName: System.Windows.Forms.Control.OnKeyPress(KeyPressEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.KeyPress&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnKeyPress method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/5902b2b7-dc18-40a0-9d7e-_1.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/5902b2b7-dc18-40a0-9d7e-_1.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/5902b2b7-dc18-40a0-9d7e-_1.cs)]"
  syntax:
    content: protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.KeyPressEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.KeyPressEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnKeyPress*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)
  id: OnKeyUp(System.Windows.Forms.KeyEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: Control.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.Forms.Control.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.KeyUp&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnKeyUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.  \n  \n [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/m-system.windows.forms.c_112_1.cpp)]\n [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_112_1.vb)]\n [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/m-system.windows.forms.c_112_1.cs)]"
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.KeyEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)
  id: OnLayout(System.Windows.Forms.LayoutEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnLayout(LayoutEventArgs)
  nameWithType: Control.OnLayout(LayoutEventArgs)
  fullName: System.Windows.Forms.Control.OnLayout(LayoutEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Layout&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnLayout method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);
    parameters:
    - id: levent
      type: System.Windows.Forms.LayoutEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.LayoutEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnLeave(System.EventArgs)
  id: OnLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnLeave(EventArgs)
  nameWithType: Control.OnLeave(EventArgs)
  fullName: System.Windows.Forms.Control.OnLeave(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Leave&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.  \n  \n [!code-cs[Control.Enter#1](~/add/codesnippet/csharp/m-system.windows.forms.c_21_1.cs)]\n [!code-cpp[Control.Enter#1](~/add/codesnippet/cpp/m-system.windows.forms.c_21_1.cpp)]\n [!code-vb[Control.Enter#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_21_1.vb)]"
  syntax:
    content: protected virtual void OnLeave (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)
  id: OnLocationChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnLocationChanged(EventArgs)
  nameWithType: Control.OnLocationChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnLocationChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.LocationChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnLocationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName* `Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_36_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_36_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_36_1.vb)]"
  syntax:
    content: protected virtual void OnLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnLostFocus(System.EventArgs)
  id: OnLostFocus(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnLostFocus(EventArgs)
  nameWithType: Control.OnLostFocus(EventArgs)
  fullName: System.Windows.Forms.Control.OnLostFocus(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.LostFocus&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnLostFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnLostFocus (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)
  id: OnMarginChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMarginChanged(EventArgs)
  nameWithType: Control.OnMarginChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnMarginChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MarginChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMarginChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMarginChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "A <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnMarginChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)
  id: OnMouseCaptureChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseCaptureChanged(EventArgs)
  nameWithType: Control.OnMouseCaptureChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseCaptureChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseCaptureChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseCaptureChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseCaptureChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseCaptureChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)
  id: OnMouseClick(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseClick(MouseEventArgs)
  nameWithType: Control.OnMouseClick(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseClick(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseClick&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "An <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)
  id: OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseDoubleClick(MouseEventArgs)
  nameWithType: Control.OnMouseDoubleClick(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseDoubleClick(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseDoubleClick&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "An <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseDoubleClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)
  id: OnMouseDown(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseDown(MouseEventArgs)
  nameWithType: Control.OnMouseDown(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseDown(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseDown&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)
  id: OnMouseEnter(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseEnter(EventArgs)
  nameWithType: Control.OnMouseEnter(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseEnter(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseEnter&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseEnter (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseHover(System.EventArgs)
  id: OnMouseHover(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseHover(EventArgs)
  nameWithType: Control.OnMouseHover(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseHover(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseHover&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to override the OnMouseHover and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class. To run the example, paste the following code in a new form and paste this class, forming the same file, after the form. Add a button of type `FunButton` to the form.  \n  \n [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/cpp/m-system.windows.forms.c_74_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/csharp/m-system.windows.forms.c_74_1.cs)]\n [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_74_1.vb)]"
  syntax:
    content: protected virtual void OnMouseHover (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseHover*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)
  id: OnMouseLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseLeave(EventArgs)
  nameWithType: Control.OnMouseLeave(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseLeave(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseLeave&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseLeave (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)
  id: OnMouseMove(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: Control.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseMove&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and OnMouseMove methods in a derived class. To run the example, paste the following code in a new form and paste this class, forming the same file, after the form. Add a button of type `FunButton` to the form.  \n  \n [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/cpp/m-system.windows.forms.c_107_1.cpp)]\n [!code-cs[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/csharp/m-system.windows.forms.c_107_1.cs)]\n [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_107_1.vb)]"
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)
  id: OnMouseUp(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseUp(MouseEventArgs)
  nameWithType: Control.OnMouseUp(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseUp(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseUp&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)
  id: OnMouseWheel(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMouseWheel(MouseEventArgs)
  nameWithType: Control.OnMouseWheel(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseWheel(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseWheel&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMouseWheel method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnMove(System.EventArgs)
  id: OnMove(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnMove(EventArgs)
  nameWithType: Control.OnMove(EventArgs)
  fullName: System.Windows.Forms.Control.OnMove(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Move&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.  \n  \n [!code-cpp[Control.Move#1](~/add/codesnippet/cpp/m-system.windows.forms.c_73_1.cpp)]\n [!code-vb[Control.Move#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_73_1.vb)]\n [!code-cs[Control.Move#1](~/add/codesnippet/csharp/m-system.windows.forms.c_73_1.cs)]"
  syntax:
    content: protected virtual void OnMove (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)
  id: OnNotifyMessage(System.Windows.Forms.Message)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnNotifyMessage(Message)
  nameWithType: Control.OnNotifyMessage(Message)
  fullName: System.Windows.Forms.Control.OnNotifyMessage(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Notifies the control of Windows messages."
  remarks: "The OnNotifyMessage method is called if the control&quot;s `EnableNotifyMessage` style bit is set in <xref:System.Windows.Forms.ControlStyles>. The `EnableNotifyMessage` style in <xref:System.Windows.Forms.ControlStyles> enables the control to be notified when the <xref:System.Windows.Forms.Control.WndProc%2A> method receives a Windows message. With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message."
  syntax:
    content: protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref> that represents the Windows message."
  overload: System.Windows.Forms.Control.OnNotifyMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)
  id: OnPaddingChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnPaddingChanged(EventArgs)
  nameWithType: Control.OnPaddingChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnPaddingChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.PaddingChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnPaddingChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnPaddingChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "A <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnPaddingChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)
  id: OnPaint(System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnPaint(PaintEventArgs)
  nameWithType: Control.OnPaint(PaintEventArgs)
  fullName: System.Windows.Forms.Control.OnPaint(PaintEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Paint&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnPaint method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped. The OnPaint method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.  \n  \n [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/m-system.windows.forms.c_57_1.cs)]\n [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/m-system.windows.forms.c_57_1.cpp)]\n [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_57_1.vb)]  \n  \n [!code-cs[Control.Paint#1](~/add/codesnippet/csharp/m-system.windows.forms.c_57_2.cs)]\n [!code-cpp[Control.Paint#1](~/add/codesnippet/cpp/m-system.windows.forms.c_57_2.cpp)]\n [!code-vb[Control.Paint#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_57_2.vb)]"
  syntax:
    content: protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.PaintEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.PaintEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnPaint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)
  id: OnPaintBackground(System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnPaintBackground(PaintEventArgs)
  nameWithType: Control.OnPaintBackground(PaintEventArgs)
  fullName: System.Windows.Forms.Control.OnPaintBackground(PaintEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Paints the background of the control."
  remarks: "The OnPaintBackground method enables derived classes to handle Windows background erase requests."
  syntax:
    content: protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);
    parameters:
    - id: pevent
      type: System.Windows.Forms.PaintEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.PaintEventArgs&quot;></xref> that contains information about the control to paint."
  overload: System.Windows.Forms.Control.OnPaintBackground*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)
  id: OnParentBackColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentBackColorChanged(EventArgs)
  nameWithType: Control.OnParentBackColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentBackColorChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BackColorChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.BackColor*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentBackColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_5_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_5_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_5_1.vb)]"
  syntax:
    content: protected virtual void OnParentBackColorChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentBackColorChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)
  id: OnParentBackgroundImageChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentBackgroundImageChanged(EventArgs)
  nameWithType: Control.OnParentBackgroundImageChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentBackgroundImageChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BackgroundImageChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.BackgroundImage*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentBackgroundImageChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed`that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_44_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_44_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_44_1.vb)]"
  syntax:
    content: protected virtual void OnParentBackgroundImageChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentBackgroundImageChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)
  id: OnParentBindingContextChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentBindingContextChanged(EventArgs)
  nameWithType: Control.OnParentBindingContextChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentBindingContextChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.BindingContextChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.BindingContext*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentBindingContextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed`that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_26_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_26_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_26_1.vb)]"
  syntax:
    content: protected virtual void OnParentBindingContextChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentBindingContextChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentChanged(System.EventArgs)
  id: OnParentChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentChanged(EventArgs)
  nameWithType: Control.OnParentChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ParentChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_38_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_38_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_38_1.vb)]"
  syntax:
    content: protected virtual void OnParentChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)
  id: OnParentCursorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentCursorChanged(EventArgs)
  nameWithType: Control.OnParentCursorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentCursorChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.CursorChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnParentCursorChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentCursorChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)
  id: OnParentEnabledChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentEnabledChanged(EventArgs)
  nameWithType: Control.OnParentEnabledChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentEnabledChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.EnabledChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.Enabled*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentEnabledChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_93_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_93_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_93_1.vb)]"
  syntax:
    content: protected virtual void OnParentEnabledChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentEnabledChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)
  id: OnParentFontChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentFontChanged(EventArgs)
  nameWithType: Control.OnParentFontChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentFontChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.FontChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.Font*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentFontChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_48_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_48_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_48_1.vb)]"
  syntax:
    content: protected virtual void OnParentFontChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentFontChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)
  id: OnParentForeColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentForeColorChanged(EventArgs)
  nameWithType: Control.OnParentForeColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentForeColorChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.ForeColorChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.ForeColor*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentForeColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_113_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_113_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_113_1.vb)]"
  syntax:
    content: protected virtual void OnParentForeColorChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentForeColorChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)
  id: OnParentRightToLeftChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentRightToLeftChanged(EventArgs)
  nameWithType: Control.OnParentRightToLeftChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentRightToLeftChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.RightToLeftChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.RightToLeft*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentRightToLeftChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_62_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_62_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_62_1.vb)]"
  syntax:
    content: protected virtual void OnParentRightToLeftChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentRightToLeftChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)
  id: OnParentVisibleChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnParentVisibleChanged(EventArgs)
  nameWithType: Control.OnParentVisibleChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentVisibleChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.VisibleChanged&quot;></xref> event when the <xref:System.Windows.Forms.Control.Visible*> property value of the control&quot;s container changes."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnParentVisibleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_41_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_41_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_41_1.vb)]"
  syntax:
    content: protected virtual void OnParentVisibleChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnParentVisibleChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)
  id: OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnPreviewKeyDown(PreviewKeyDownEventArgs)
  nameWithType: Control.OnPreviewKeyDown(PreviewKeyDownEventArgs)
  fullName: System.Windows.Forms.Control.OnPreviewKeyDown(PreviewKeyDownEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.PreviewKeyDown&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnPreviewKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.PreviewKeyDownEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.PreviewKeyDownEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)
  id: OnPrint(System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnPrint(PaintEventArgs)
  nameWithType: Control.OnPrint(PaintEventArgs)
  fullName: System.Windows.Forms.Control.OnPrint(PaintEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Paint&quot;></xref> event."
  remarks: "If the `UserPaint` bit of the <xref:System.Windows.Forms.ControlStyles> is set, you can override OnPrint to do layered painting. See <xref:System.Windows.Forms.Control.SetStyle%2A> for more information."
  syntax:
    content: protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.PaintEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.PaintEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnPrint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>e</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: Control.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.Forms.Control.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.QueryContinueDrag&quot;></xref> event."
  remarks: "After dragging has begun, this method is called repeatedly by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] until the drag operation is either canceled or completed.      > [!NOTE] >  Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.       Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnQueryContinueDrag method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);
    parameters:
    - id: qcdevent
      type: System.Windows.Forms.QueryContinueDragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.QueryContinueDragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)
  id: OnRegionChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnRegionChanged(EventArgs)
  nameWithType: Control.OnRegionChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnRegionChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.RegionChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnRegionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnRegionChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnRegionChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnResize(System.EventArgs)
  id: OnResize(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnResize(EventArgs)
  nameWithType: Control.OnResize(EventArgs)
  fullName: System.Windows.Forms.Control.OnResize(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Resize&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnResize method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnResize (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnResize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)
  id: OnRightToLeftChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnRightToLeftChanged(EventArgs)
  nameWithType: Control.OnRightToLeftChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnRightToLeftChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.RightToLeftChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnRightToLeftChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_52_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_52_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_52_1.vb)]"
  syntax:
    content: protected virtual void OnRightToLeftChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnRightToLeftChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)
  id: OnSizeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnSizeChanged(EventArgs)
  nameWithType: Control.OnSizeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnSizeChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.SizeChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnSizeChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnSizeChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)
  id: OnStyleChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnStyleChanged(EventArgs)
  nameWithType: Control.OnStyleChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnStyleChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.StyleChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnStyleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnStyleChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnStyleChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)
  id: OnSystemColorsChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnSystemColorsChanged(EventArgs)
  nameWithType: Control.OnSystemColorsChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnSystemColorsChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.SystemColorsChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnSystemColorsChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnSystemColorsChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnSystemColorsChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)
  id: OnTabIndexChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnTabIndexChanged(EventArgs)
  nameWithType: Control.OnTabIndexChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnTabIndexChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.TabIndexChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnTabIndexChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnTabIndexChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnTabIndexChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)
  id: OnTabStopChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnTabStopChanged(EventArgs)
  nameWithType: Control.OnTabStopChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnTabStopChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.TabStopChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnTabStopChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_13_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_13_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_13_1.vb)]"
  syntax:
    content: protected virtual void OnTabStopChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnTabStopChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnTextChanged(System.EventArgs)
  id: OnTextChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnTextChanged(EventArgs)
  nameWithType: Control.OnTextChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnTextChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.TextChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnTextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_88_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_88_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_88_1.vb)]"
  syntax:
    content: protected virtual void OnTextChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnTextChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnValidated(System.EventArgs)
  id: OnValidated(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnValidated(EventArgs)
  nameWithType: Control.OnValidated(EventArgs)
  fullName: System.Windows.Forms.Control.OnValidated(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Validated&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnValidated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnValidated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnValidated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)
  id: OnValidating(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnValidating(CancelEventArgs)
  nameWithType: Control.OnValidating(CancelEventArgs)
  fullName: System.Windows.Forms.Control.OnValidating(CancelEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.Validating&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnValidating method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "A <xref:System.ComponentModel.CancelEventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnValidating*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)
  id: OnVisibleChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: OnVisibleChanged(EventArgs)
  nameWithType: Control.OnVisibleChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnVisibleChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.VisibleChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).       The OnVisibleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.  \n  \n [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/cpp/m-system.windows.forms.c_11_1.cpp)]\n [!code-cs[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/csharp/m-system.windows.forms.c_11_1.cs)]\n [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_11_1.vb)]"
  syntax:
    content: protected virtual void OnVisibleChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.OnVisibleChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Padding
  id: Padding
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Padding
  nameWithType: Control.Padding
  fullName: System.Windows.Forms.Control.Padding
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets padding within the control."
  remarks: "For containers such as <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TabControl>, the Padding property gets or sets their respective <xref:System.Windows.Forms.Control.DisplayRectangle%2A> properties. The <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=fullName> property is equal to its Padding property.       Controls receive default values for Padding that are reasonably close to Windows user interface guidelines. Some adjustments might still be necessary for particular applications.       All controls that implement <xref:System.Windows.Forms.Control.GetPreferredSize%2A> are enlarged by the amount in Padding when <xref:System.Windows.Forms.Control.AutoSize%2A> is `true`.       The following controls do not use Padding:      -   Controls that do not implement <xref:System.Windows.Forms.Control.AutoSize%2A> through <xref:System.Windows.Forms.Control.GetPreferredSize%2A>      -   Custom controls that directly inherit from <xref:System.Windows.Forms.Control>      -   <xref:System.Windows.Forms.AxHost>      -   <xref:System.Windows.Forms.ComboBox>      -   <xref:System.Windows.Forms.DataGridView>      -   <xref:System.Windows.Forms.DateTimePicker>      -   <xref:System.Windows.Forms.HScrollBar>      -   <xref:System.Windows.Forms.ListView>      -   <xref:System.Windows.Forms.MaskedTextBox>      -   <xref:System.Windows.Forms.MonthCalendar>      -   <xref:System.Windows.Forms.ProgressBar>      -   <xref:System.Windows.Forms.PropertyGrid>      -   <xref:System.Windows.Forms.RichTextBox>      -   <xref:System.Windows.Forms.SplitContainer>      -   <xref:System.Windows.Forms.TextBox>      -   <xref:System.Windows.Forms.TextBoxBase>      -   <xref:System.Windows.Forms.TreeView>      -   <xref:System.Windows.Forms.VScrollBar>      -   <xref:System.Windows.Forms.WebBrowser>"
  syntax:
    content: public System.Windows.Forms.Padding Padding { get; set; }
    return:
      type: System.Windows.Forms.Padding
      description: "A <xref href=&quot;System.Windows.Forms.Padding&quot;></xref> representing the control&quot;s internal spacing characteristics."
  overload: System.Windows.Forms.Control.Padding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PaddingChanged
  id: PaddingChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PaddingChanged
  nameWithType: Control.PaddingChanged
  fullName: System.Windows.Forms.Control.PaddingChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control&quot;s padding changes."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the PaddingChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the PaddingChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#41](~/add/codesnippet/csharp/e-system.windows.forms.c_29_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#41](~/add/codesnippet/visualbasic/e-system.windows.forms.c_29_1.vb)]"
  syntax:
    content: public event EventHandler PaddingChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Paint
  id: Paint
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Paint
  nameWithType: Control.Paint
  fullName: System.Windows.Forms.Control.Paint
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is redrawn."
  remarks: "The Paint event is raised when the control is redrawn. It passes an instance of <xref:System.Windows.Forms.PaintEventArgs> to the method(s) that handles the Paint event.       When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method. For more information, see [Overriding the OnPaint Method](~/add/includes/ajax-current-ext-md.md) and [Custom Control Painting and Rendering](~/add/includes/ajax-current-ext-md.md).       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a <xref:System.Windows.Forms.PictureBox> control on the form and uses the Paint event to draw to it.  \n  \n [!code-cs[Control.Paint#1](~/add/codesnippet/csharp/e-system.windows.forms.c_26_1.cs)]\n [!code-cpp[Control.Paint#1](~/add/codesnippet/cpp/e-system.windows.forms.c_26_1.cpp)]\n [!code-vb[Control.Paint#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_26_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.PaintEventHandler Paint;
    return:
      type: System.Windows.Forms.PaintEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Parent
  id: Parent
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Parent
  nameWithType: Control.Parent
  fullName: System.Windows.Forms.Control.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the parent container of the control."
  remarks: "Setting the Parent property value to `null` removes the control from the <xref:System.Windows.Forms.Control.ControlCollection> of its current parent control."
  example:
  - "The following code example uses the Parent property and the <xref:System.Windows.Forms.Control.FindForm%2A> method to set properties on the parent control of a button and its form.  \n  \n [!code-cpp[Control.FindForm#1](~/add/codesnippet/cpp/p-system.windows.forms.c_75_1.cpp)]\n [!code-vb[Control.FindForm#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_75_1.vb)]\n [!code-cs[Control.FindForm#1](~/add/codesnippet/csharp/p-system.windows.forms.c_75_1.cs)]"
  syntax:
    content: public System.Windows.Forms.Control Parent { get; set; }
    return:
      type: System.Windows.Forms.Control
      description: "A <xref href=&quot;System.Windows.Forms.Control&quot;></xref> that represents the parent or container control of the control."
  overload: System.Windows.Forms.Control.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ParentChanged
  id: ParentChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ParentChanged
  nameWithType: Control.ParentChanged
  fullName: System.Windows.Forms.Control.ParentChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Parent*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Parent%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event EventHandler ParentChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PerformLayout
  id: PerformLayout
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PerformLayout()
  nameWithType: Control.PerformLayout()
  fullName: System.Windows.Forms.Control.PerformLayout()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Forces the control to apply layout logic to all its child controls."
  remarks: "If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the PerformLayout method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.       The <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created are set to `null` if no values were provided when the PerformLayout method was called."
  example:
  - "The following code example demonstrates how to use the PerformLayout method. It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised. In this example, the `Click` event handler for `Button1` explicitly calls PerformLayout. The `Click` event handler for `Button2` implicitly calls PerformLayout. PerformLayout is also called when the form is loaded. `Button3` returns the control to the state it was in when loaded. In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.  \n  \n This is a complete example. To run the example, paste the following code in a blank form.  \n  \n [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/cpp/m-system.windows.forms.c_101_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_101_1.vb)]\n [!code-cs[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/csharp/m-system.windows.forms.c_101_1.cs)]"
  syntax:
    content: public void PerformLayout ();
    parameters: []
  overload: System.Windows.Forms.Control.PerformLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)
  id: PerformLayout(System.Windows.Forms.Control,System.String)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PerformLayout(Control,String)
  nameWithType: Control.PerformLayout(Control,String)
  fullName: System.Windows.Forms.Control.PerformLayout(Control,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Forces the control to apply layout logic to all its child controls."
  remarks: "If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.       The `affectedControl` and `affectedProperty` parameters can both be set to `null`. Doing so causes the <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created to be set to `null`."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method. It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised. In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>. The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>. <xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded. `Button3` returns the control to the state it was in when loaded. In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.  \n  \n This is a complete example. To run the example, paste the following code in a blank form.  \n  \n [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/cpp/dd503f2e-2328-4789-9d52-_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/visualbasic/dd503f2e-2328-4789-9d52-_1.vb)]\n [!code-cs[System.Windows.Forms.Control.PerformLayout#1](~/add/codesnippet/csharp/dd503f2e-2328-4789-9d52-_1.cs)]"
  syntax:
    content: public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);
    parameters:
    - id: affectedControl
      type: System.Windows.Forms.Control
      description: "A <xref href=&quot;System.Windows.Forms.Control&quot;></xref> that represents the most recently changed control."
    - id: affectedProperty
      type: System.String
      description: "The name of the most recently changed property on the control."
  overload: System.Windows.Forms.Control.PerformLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PointToClient(System.Drawing.Point)
  id: PointToClient(System.Drawing.Point)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PointToClient(Point)
  nameWithType: Control.PointToClient(Point)
  fullName: System.Windows.Forms.Control.PointToClient(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Computes the location of the specified screen point into client coordinates."
  remarks: ''
  example:
  - "The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data. Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> values are screen coordinates, the example uses the PointToClient method to convert them to client coordinates.  \n  \n [!code-cs[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/csharp/m-system.windows.forms.c_84_1.cs)]\n [!code-cpp[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/cpp/m-system.windows.forms.c_84_1.cpp)]\n [!code-vb[Windows.Forms.Control.DragOperations#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_84_1.vb)]"
  syntax:
    content: public System.Drawing.Point PointToClient (System.Drawing.Point p);
    parameters:
    - id: p
      type: System.Drawing.Point
      description: "The screen coordinate <xref href=&quot;System.Drawing.Point&quot;></xref> to convert."
    return:
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> that represents the converted <xref href=&quot;System.Drawing.Point&quot;></xref>, <code>p</code>, in client coordinates."
  overload: System.Windows.Forms.Control.PointToClient*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)
  id: PointToScreen(System.Drawing.Point)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PointToScreen(Point)
  nameWithType: Control.PointToScreen(Point)
  fullName: System.Windows.Forms.Control.PointToScreen(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Computes the location of the specified client point into screen coordinates."
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, PointToScreen, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> members. To run the example, paste the following code in a form called Form1 containing several controls. This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.  \n  \n [!code-cs[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/csharp/m-system.windows.forms.c_35_1.cs)]\n [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/cpp/m-system.windows.forms.c_35_1.cpp)]\n [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_35_1.vb)]"
  syntax:
    content: public System.Drawing.Point PointToScreen (System.Drawing.Point p);
    parameters:
    - id: p
      type: System.Drawing.Point
      description: "The client coordinate <xref href=&quot;System.Drawing.Point&quot;></xref> to convert."
    return:
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> that represents the converted <xref href=&quot;System.Drawing.Point&quot;></xref>, <code>p</code>, in screen coordinates."
  overload: System.Windows.Forms.Control.PointToScreen*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PreferredSize
  id: PreferredSize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PreferredSize
  nameWithType: Control.PreferredSize
  fullName: System.Windows.Forms.Control.PreferredSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the size of a rectangular area into which the control can fit."
  syntax:
    content: public System.Drawing.Size PreferredSize { get; }
    return:
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;></xref> containing the height and width, in pixels."
  overload: System.Windows.Forms.Control.PreferredSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)
  id: PreProcessControlMessage(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PreProcessControlMessage(Message)
  nameWithType: Control.PreProcessControlMessage(Message)
  fullName: System.Windows.Forms.Control.PreProcessControlMessage(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Preprocesses keyboard or input messages within the message loop before they are dispatched."
  syntax:
    content: public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);
    parameters:
    - id: msg
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref> that represents the message to process."
    return:
      type: System.Windows.Forms.PreProcessControlState
      description: "One of the <xref href=&quot;System.Windows.Forms.PreProcessControlState&quot;></xref> values, depending on whether <xref:System.Windows.Forms.Control.PreProcessMessage*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> and whether <xref:System.Windows.Forms.Control.IsInputKey*> or <xref:System.Windows.Forms.Control.IsInputChar*> are <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.PreProcessControlMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)
  id: PreProcessMessage(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PreProcessMessage(Message)
  nameWithType: Control.PreProcessMessage(Message)
  fullName: System.Windows.Forms.Control.PreProcessMessage(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Preprocesses keyboard or input messages within the message loop before they are dispatched."
  remarks: "PreProcessMessage is called by the application&quot;s message loop to preprocess input messages before they are dispatched. Possible values for the `msg` parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.       When overriding PreProcessMessage, a control should return `true` to indicate that it has processed the message. For messages that are not processed by the control, the result of `base.PreProcessMessage` should be returned. Controls will typically override one of the more specialized methods such as <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, or <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> instead of overriding PreProcessMessage."
  syntax:
    content: public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);
    parameters:
    - id: msg
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref>, passed by reference, that represents the message to process. The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the message was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.PreProcessMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: Control.PreviewKeyDown
  fullName: System.Windows.Forms.Control.PreviewKeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs before the <xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref> event when a key is pressed while focus is on this control."
  remarks: "Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses. For example, by default, a <xref:System.Windows.Controls.Button> control ignores the arrow keys. Pressing the arrow keys typically causes the focus to move to the previous or next control. The arrow keys are considered navigation keys and pressing these keys typically do not raise the <xref:System.Windows.Forms.Control.KeyDown> event for a<xref:System.Windows.Controls.Button>. However, pressing the arrow keys for a <xref:System.Windows.Controls.Button> does raise the PreviewKeyDown event. By handling the PreviewKeyDown event for a <xref:System.Windows.Controls.Button> and setting the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`, you can raise the <xref:System.Windows.Forms.Control.KeyDown> event when the arrow keys are pressed. However, if you handle the arrow keys, the focus will no longer move to the previous or next control.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a <xref:System.Windows.Forms.Button> that includes a <xref:System.Windows.Forms.ContextMenuStrip>. When the <xref:System.Windows.Forms.Button> has the focus and you press the UP ARROW or DOWN ARROW keys, the <xref:System.Windows.Forms.ContextMenuStrip> appears. The PreviewKeyDown event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`. This raises the <xref:System.Windows.Forms.Control.KeyDown> event so that you can display the <xref:System.Windows.Forms.ContextMenuStrip>. You should not put any logic in the PreviewKeyDown event handler, other than to set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property. Instead, you should put your logic in the <xref:System.Windows.Forms.Control.KeyDown> event handler.  \n  \n [!code-cs[System.Windows.Forms.Control.PreviewKeyDown#1](~/add/codesnippet/csharp/e-system.windows.forms.c_64_1.cs)]\n [!code-vb[System.Windows.Forms.Control.PreviewKeyDown#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_64_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Forms.PreviewKeyDownEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  id: ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessCmdKey(Message,Keys)
  nameWithType: Control.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.Control.ProcessCmdKey(Message,Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a command key."
  remarks: "This method is called during message preprocessing to handle command keys. Command keys are keys that always take precedence over regular input keys. Examples of command keys include accelerators and menu shortcuts. The method must return `true` to indicate that it has processed the command key, or `false` to indicate that the key is not a command key. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.       The ProcessCmdKey method first determines whether the control has a <xref:System.Windows.Forms.ContextMenu>, and if so, enables the <xref:System.Windows.Forms.ContextMenu> to process the command key. If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent&quot;s ProcessCmdKey method. The net effect is that command keys are &quot;bubbled&quot; up the control hierarchy. In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key. Modifier keys include the SHIFT, CTRL, and ALT keys."
  syntax:
    content: protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);
    parameters:
    - id: msg
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref>, passed by reference, that represents the window message to process."
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "One of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> values that represents the key to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessCmdKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessDialogChar(System.Char)
  id: ProcessDialogChar(System.Char)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessDialogChar(Char)
  nameWithType: Control.ProcessDialogChar(Char)
  fullName: System.Windows.Forms.Control.ProcessDialogChar(Char)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a dialog character."
  remarks: "This method is called during message preprocessing to handle dialog characters, such as control mnemonics. This method is called only if the <xref:System.Windows.Forms.Control.IsInputChar%2A> method indicates that the control is not processing the character. The ProcessDialogChar method simply sends the character to the parent&quot;s ProcessDialogChar method, or returns `false` if the control has no parent. The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog characters. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control."
  syntax:
    content: protected virtual bool ProcessDialogChar (char charCode);
    parameters:
    - id: charCode
      type: System.Char
      description: "The character to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessDialogChar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)
  id: ProcessDialogKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessDialogKey(Keys)
  nameWithType: Control.ProcessDialogKey(Keys)
  fullName: System.Windows.Forms.Control.ProcessDialogKey(Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a dialog key."
  remarks: "This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys. This method is called only if the <xref:System.Windows.Forms.Control.IsInputKey%2A> method indicates that the control is not processing the key. The ProcessDialogKey simply sends the character to the parent&quot;s ProcessDialogKey method, or returns `false`if the control has no parent. The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control."
  syntax:
    content: protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);
    parameters:
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "One of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> values that represents the key to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the key was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessDialogKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)
  id: ProcessKeyEventArgs(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessKeyEventArgs(Message)
  nameWithType: Control.ProcessKeyEventArgs(Message)
  fullName: System.Windows.Forms.Control.ProcessKeyEventArgs(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a key message and generates the appropriate control events."
  remarks: "This method is called when a control receives a keyboard message. The method is responsible for generating the appropriate key events for the message by calling the <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, or <xref:System.Windows.Forms.Control.OnKeyUp%2A> methods. The `m` parameter contains the window message that must be processed. Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR."
  syntax:
    content: protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref>, passed by reference, that represents the window message to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the message was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessKeyEventArgs*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)
  id: ProcessKeyMessage(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessKeyMessage(Message)
  nameWithType: Control.ProcessKeyMessage(Message)
  fullName: System.Windows.Forms.Control.ProcessKeyMessage(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a keyboard message."
  remarks: "This method is called when a control receives a keyboard message. The method first determines whether the control has a parent; if so, it calls the parent&quot;s <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method. If the parent&quot;s <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method does not process the message then the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> method is called to generate the appropriate keyboard events. The `m` parameter contains the window message that must be processed. Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP."
  syntax:
    content: protected virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref>, passed by reference, that represents the window message to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the message was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessKeyMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)
  id: ProcessKeyPreview(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessKeyPreview(Message)
  nameWithType: Control.ProcessKeyPreview(Message)
  fullName: System.Windows.Forms.Control.ProcessKeyPreview(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Previews a keyboard message."
  remarks: "This method is called by a child control when the child control receives a keyboard message. The child control calls this method before generating any keyboard events for the message. If this method returns `true`, the child control considers the message processed and does not generate any keyboard events. The `m` parameter contains the window message to preview. Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP. The ProcessKeyPreview method simply sends the character to the parent&quot;s ProcessKeyPreview method, or returns `false` if the control has no parent. The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys."
  syntax:
    content: protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref>, passed by reference, that represents the window message to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the message was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessKeyPreview*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProcessMnemonic(System.Char)
  id: ProcessMnemonic(System.Char)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProcessMnemonic(Char)
  nameWithType: Control.ProcessMnemonic(Char)
  fullName: System.Windows.Forms.Control.ProcessMnemonic(Char)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a mnemonic character."
  remarks: "This method is called to give a control the opportunity to process a mnemonic character. The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic. If so, the method should perform the action associated with the mnemonic and return `true`. If not, the method should return `false`. Implementations of this method often use the <xref:System.Windows.Forms.Control.IsMnemonic%2A> method to determine whether the given character matches a mnemonic in the control&quot;s text.       For example:      ```c#   if (CanSelect && IsMnemonic(charCode, MyControl.Text) {         // Perform action associated with mnemonic.          }   ```       This default implementation of the ProcessMnemonic method simply returns `false` to indicate that the control has no mnemonic."
  example:
  - "The following code example demonstrates an extension of the button class that overrides the ProcessMnemonic method to exhibit custom behavior. The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties. To run this example paste the following code after a form class, in the same file. Add a button of type `MnemonicButton` to the form.  \n  \n [!code-cs[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/csharp/m-system.windows.forms.c_47_1.cs)]\n [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/cpp/m-system.windows.forms.c_47_1.cpp)]\n [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_47_1.vb)]"
  syntax:
    content: protected virtual bool ProcessMnemonic (char charCode);
    parameters:
    - id: charCode
      type: System.Char
      description: "The character to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was processed as a mnemonic by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ProcessMnemonic*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProductName
  id: ProductName
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProductName
  nameWithType: Control.ProductName
  fullName: System.Windows.Forms.Control.ProductName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the product name of the assembly containing the control."
  remarks: "The ProductName property is a read-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyProductAttribute.Product%2A> property value of the <xref:System.Reflection.AssemblyProductAttribute>. The following line of C# code sets the ProductName property.      ```   [assembly: AssemblyProduct(&quot;MyApplication&quot;)]   ```      > [!NOTE] >  It is strongly recommended that you provide the company name, product name, and product version. Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName> that make it easier to write applications that comply with the &quot;Certified for Windows&quot; program. For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification."
  example:
  - "The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, ProductName and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.  \n  \n [!code-cs[Windows.Forms.Control Properties3#1](~/add/codesnippet/csharp/p-system.windows.forms.c_78_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties3#1](~/add/codesnippet/cpp/p-system.windows.forms.c_78_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties3#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_78_1.vb)]"
  syntax:
    content: public string ProductName { get; }
    return:
      type: System.String
      description: "The product name of the assembly containing the control."
  overload: System.Windows.Forms.Control.ProductName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ProductVersion
  id: ProductVersion
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ProductVersion
  nameWithType: Control.ProductVersion
  fullName: System.Windows.Forms.Control.ProductVersion
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the version of the assembly containing the control."
  remarks: "The ProductVersion property is a read-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> property value of the <xref:System.Reflection.AssemblyVersionAttribute>. The following line of C# code sets the ProductVersion property.      ```   [assembly: AssemblyVersion(&quot;1.0.1&quot;)]   ```      > [!NOTE] >  It is strongly recommended that you provide the company name, product name, and product version. Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName> that make it easier to write applications that comply with the &quot;Certified for Windows&quot; program. For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification."
  example:
  - "The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and ProductVersion have been set.  \n  \n [!code-cs[Windows.Forms.Control Properties3#1](~/add/codesnippet/csharp/p-system.windows.forms.c_45_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties3#1](~/add/codesnippet/cpp/p-system.windows.forms.c_45_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties3#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_45_1.vb)]"
  syntax:
    content: public string ProductVersion { get; }
    return:
      type: System.String
      description: "The file version of the assembly containing the control."
  overload: System.Windows.Forms.Control.ProductVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.PropagatingImeMode
  id: PropagatingImeMode
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: PropagatingImeMode
  nameWithType: Control.PropagatingImeMode
  fullName: System.Windows.Forms.Control.PropagatingImeMode
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an object that represents a propagating IME mode."
  syntax:
    content: protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }
    return:
      type: System.Windows.Forms.ImeMode
      description: "An object that represents a propagating IME mode."
  overload: System.Windows.Forms.Control.PropagatingImeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.QueryAccessibilityHelp
  id: QueryAccessibilityHelp
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: QueryAccessibilityHelp
  nameWithType: Control.QueryAccessibilityHelp
  fullName: System.Windows.Forms.Control.QueryAccessibilityHelp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when <xref href=&quot;System.Windows.Forms.AccessibleObject&quot;></xref> is providing help to accessibility applications."
  remarks: "You should use the <xref:System.Windows.Forms.HelpProvider> class to enable users to invoke help on your accessible object by pressing the F1 key. Using the <xref:System.Windows.Forms.HelpProvider> provides you with complete information in the <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>. For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  \n  \n This code excerpt demonstrates handling the QueryAccessibilityHelp event. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  \n  \n [!code-vb[System.Windows.Forms.AccessibleObject#3](~/add/codesnippet/visualbasic/e-system.windows.forms.c_11_1.vb)]\n [!code-cs[System.Windows.Forms.AccessibleObject#3](~/add/codesnippet/csharp/e-system.windows.forms.c_11_1.cs)]\n [!code-cpp[System.Windows.Forms.AccessibleObject#3](~/add/codesnippet/cpp/e-system.windows.forms.c_11_1.cpp)]"
  syntax:
    content: public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;
    return:
      type: System.Windows.Forms.QueryAccessibilityHelpEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: Control.QueryContinueDrag
  fullName: System.Windows.Forms.Control.QueryContinueDrag
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled."
  remarks: "The QueryContinueDrag event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation. The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.       The following describes how and when events related to drag-and-drop operations are raised.       The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.       If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.       Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.      -   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.      -   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.      -   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.       If there is a change in the keyboard or mouse button state, theQueryContinueDrag event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event&quot;s <xref:System.Windows.Forms.QueryContinueDragEventArgs>.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.          > [!NOTE]     >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&quot;s position.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.      -   If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.       By default, the QueryContinueDrag event sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Cancel` in <xref:System.Windows.Forms.DragAction> if the ESC key was pressed and sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Drop` in <xref:System.Windows.Forms.DragAction> if the left, middle, or right mouse button is pressed.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files,`3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the QueryContinueDrag event handler.  \n  \n This code excerpt demonstrates using the QueryContinueDrag event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/add/codesnippet/cpp/e-system.windows.forms.c_75_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/add/codesnippet/visualbasic/e-system.windows.forms.c_75_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#6](~/add/codesnippet/csharp/e-system.windows.forms.c_75_1.cs)]"
  syntax:
    content: public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.Forms.QueryContinueDragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)
  id: RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RaiseDragEvent(Object,DragEventArgs)
  nameWithType: Control.RaiseDragEvent(Object,DragEventArgs)
  fullName: System.Windows.Forms.Control.RaiseDragEvent(Object,DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the appropriate drag event."
  syntax:
    content: protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);
    parameters:
    - id: key
      type: System.Object
      description: "The event to raise."
    - id: e
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.RaiseDragEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)
  id: RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RaiseKeyEvent(Object,KeyEventArgs)
  nameWithType: Control.RaiseKeyEvent(Object,KeyEventArgs)
  fullName: System.Windows.Forms.Control.RaiseKeyEvent(Object,KeyEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the appropriate key event."
  syntax:
    content: protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);
    parameters:
    - id: key
      type: System.Object
      description: "The event to raise."
    - id: e
      type: System.Windows.Forms.KeyEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.RaiseKeyEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)
  id: RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RaiseMouseEvent(Object,MouseEventArgs)
  nameWithType: Control.RaiseMouseEvent(Object,MouseEventArgs)
  fullName: System.Windows.Forms.Control.RaiseMouseEvent(Object,MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the appropriate mouse event."
  syntax:
    content: protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);
    parameters:
    - id: key
      type: System.Object
      description: "The event to raise."
    - id: e
      type: System.Windows.Forms.MouseEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.RaiseMouseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)
  id: RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RaisePaintEvent(Object,PaintEventArgs)
  nameWithType: Control.RaisePaintEvent(Object,PaintEventArgs)
  fullName: System.Windows.Forms.Control.RaisePaintEvent(Object,PaintEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the appropriate paint event."
  syntax:
    content: protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);
    parameters:
    - id: key
      type: System.Object
      description: "The event to raise."
    - id: e
      type: System.Windows.Forms.PaintEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.PaintEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.RaisePaintEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RecreateHandle
  id: RecreateHandle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RecreateHandle()
  nameWithType: Control.RecreateHandle()
  fullName: System.Windows.Forms.Control.RecreateHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Forces the re-creation of the handle for the control."
  remarks: "The RecreateHandle method is called whenever parameters are needed for a new control, but using a call from <xref:System.Windows.Forms.Control.UpdateStyles%2A> to <xref:System.Windows.Forms.Control.CreateParams%2A> is insufficient. This method also calls <xref:System.Windows.Forms.Control.DestroyHandle%2A> and<xref:System.Windows.Forms.Control.CreateHandle%2A> and sets <xref:System.Windows.Forms.Control.RecreatingHandle%2A> to `true`."
  syntax:
    content: protected void RecreateHandle ();
    parameters: []
  overload: System.Windows.Forms.Control.RecreateHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RecreatingHandle
  id: RecreatingHandle
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RecreatingHandle
  nameWithType: Control.RecreatingHandle
  fullName: System.Windows.Forms.Control.RecreatingHandle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control is currently re-creating its handle."
  remarks: "The RecreatingHandle property returns `true` if the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is still running on the control."
  syntax:
    content: public bool RecreatingHandle { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is currently re-creating its handle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.RecreatingHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)
  id: RectangleToClient(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RectangleToClient(Rectangle)
  nameWithType: Control.RectangleToClient(Rectangle)
  fullName: System.Windows.Forms.Control.RectangleToClient(Rectangle)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Computes the size and location of the specified screen rectangle in client coordinates."
  syntax:
    content: public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);
    parameters:
    - id: r
      type: System.Drawing.Rectangle
      description: "The screen coordinate <xref href=&quot;System.Drawing.Rectangle&quot;></xref> to convert."
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that represents the converted <xref href=&quot;System.Drawing.Rectangle&quot;></xref>, <code>r</code>, in client coordinates."
  overload: System.Windows.Forms.Control.RectangleToClient*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)
  id: RectangleToScreen(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RectangleToScreen(Rectangle)
  nameWithType: Control.RectangleToScreen(Rectangle)
  fullName: System.Windows.Forms.Control.RectangleToScreen(Rectangle)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Computes the size and location of the specified client rectangle in screen coordinates."
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, RectangleToScreen, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> members. To run the example, paste the following code in a form called **Form1** containing several controls. This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.  \n  \n [!code-cs[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/csharp/m-system.windows.forms.c_86_1.cs)]\n [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/cpp/m-system.windows.forms.c_86_1.cpp)]\n [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_86_1.vb)]"
  syntax:
    content: public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);
    parameters:
    - id: r
      type: System.Drawing.Rectangle
      description: "The client coordinate <xref href=&quot;System.Drawing.Rectangle&quot;></xref> to convert."
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> that represents the converted <xref href=&quot;System.Drawing.Rectangle&quot;></xref>, <code>p</code>, in screen coordinates."
  overload: System.Windows.Forms.Control.RectangleToScreen*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)
  id: ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ReflectMessage(IntPtr,Message)
  nameWithType: Control.ReflectMessage(IntPtr,Message)
  fullName: System.Windows.Forms.Control.ReflectMessage(IntPtr,Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Reflects the specified message to the control that is bound to the specified handle."
  remarks: "The ReflectMessage method is an infrastructure method and typically should not be called from your code.       If the `hWnd` parameter does not represent a valid control, the ReflectMessage method returns `false`.       Because Windows messages are returned to the top-level window, the ReflectMessage method is used to propagate the return message to the control that sent the message."
  syntax:
    content: protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);
    parameters:
    - id: hWnd
      type: System.IntPtr
      description: "An <xref:System.IntPtr> representing the handle of the control to reflect the message to."
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref> representing the Windows message to reflect."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the message was reflected; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ReflectMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Refresh
  id: Refresh
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Refresh()
  nameWithType: Control.Refresh()
  fullName: System.Windows.Forms.Control.Refresh()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Forces the control to invalidate its client area and immediately redraw itself and any child controls."
  syntax:
    content: public virtual void Refresh ();
    parameters: []
  overload: System.Windows.Forms.Control.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Region
  id: Region
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Region
  nameWithType: Control.Region
  fullName: System.Windows.Forms.Control.Region
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the window region associated with the control."
  remarks: "The window region is a collection of pixels within the window where the operating system permits drawing. The operating system does not display any portion of a window that lies outside of the window region. The coordinates of a control&quot;s region are relative to the upper-left corner of the control, not the client area of the control.      > [!NOTE] >  The collection of pixels contained with the region can be noncontiguous."
  example:
  - "The following code example demonstrates how to use the Region property by creating a round button. To run the example, paste the following code in a form containing a button called `roundButton`. This example requires that the <xref:System.Windows.Forms.Control.Paint> event is connected to the event handler defined in the example.  \n  \n [!code-cs[System.Windows.Forms.Control.Region#1](~/add/codesnippet/csharp/p-system.windows.forms.c_106_1.cs)]\n [!code-cpp[System.Windows.Forms.Control.Region#1](~/add/codesnippet/cpp/p-system.windows.forms.c_106_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.Region#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_106_1.vb)]"
  syntax:
    content: public System.Drawing.Region Region { get; set; }
    return:
      type: System.Drawing.Region
      description: "The window <xref href=&quot;System.Drawing.Region&quot;></xref> associated with the control."
  overload: System.Windows.Forms.Control.Region*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RegionChanged
  id: RegionChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RegionChanged
  nameWithType: Control.RegionChanged
  fullName: System.Windows.Forms.Control.RegionChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.Control.Region*> property changes."
  remarks: "For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RegionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the RegionChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#22](~/add/codesnippet/csharp/e-system.windows.forms.c_18_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#22](~/add/codesnippet/visualbasic/e-system.windows.forms.c_18_1.vb)]"
  syntax:
    content: public event EventHandler RegionChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RenderRightToLeft
  id: RenderRightToLeft
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RenderRightToLeft
  nameWithType: Control.RenderRightToLeft
  fullName: System.Windows.Forms.Control.RenderRightToLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This property is now obsolete."
  syntax:
    content: protected bool RenderRightToLeft { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is rendered from right to left; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.RenderRightToLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetBackColor
  id: ResetBackColor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetBackColor()
  nameWithType: Control.ResetBackColor()
  fullName: System.Windows.Forms.Control.ResetBackColor()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.BackColor*> property to its default value."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public virtual void ResetBackColor ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetBackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetBindings
  id: ResetBindings
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetBindings()
  nameWithType: Control.ResetBindings()
  fullName: System.Windows.Forms.Control.ResetBindings()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Causes a control bound to the <xref href=&quot;System.Windows.Forms.BindingSource&quot;></xref> to reread all the items in the list and refresh their displayed values."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public void ResetBindings ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetCursor
  id: ResetCursor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetCursor()
  nameWithType: Control.ResetCursor()
  fullName: System.Windows.Forms.Control.ResetCursor()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.Cursor*> property to its default value."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public virtual void ResetCursor ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetFont
  id: ResetFont
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetFont()
  nameWithType: Control.ResetFont()
  fullName: System.Windows.Forms.Control.ResetFont()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.Font*> property to its default value."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public virtual void ResetFont ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetFont*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetForeColor
  id: ResetForeColor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetForeColor()
  nameWithType: Control.ResetForeColor()
  fullName: System.Windows.Forms.Control.ResetForeColor()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.ForeColor*> property to its default value."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public virtual void ResetForeColor ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetImeMode
  id: ResetImeMode
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetImeMode()
  nameWithType: Control.ResetImeMode()
  fullName: System.Windows.Forms.Control.ResetImeMode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.ImeMode*> property to its default value."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public void ResetImeMode ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetImeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetMouseEventArgs
  id: ResetMouseEventArgs
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetMouseEventArgs()
  nameWithType: Control.ResetMouseEventArgs()
  fullName: System.Windows.Forms.Control.ResetMouseEventArgs()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the control to handle the <xref href=&quot;System.Windows.Forms.Control.MouseLeave&quot;></xref> event."
  syntax:
    content: protected void ResetMouseEventArgs ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetMouseEventArgs*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetRightToLeft
  id: ResetRightToLeft
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetRightToLeft()
  nameWithType: Control.ResetRightToLeft()
  fullName: System.Windows.Forms.Control.ResetRightToLeft()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.RightToLeft*> property to its default value."
  remarks: "This method is not relevant for this class."
  syntax:
    content: public virtual void ResetRightToLeft ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetRightToLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResetText
  id: ResetText
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResetText()
  nameWithType: Control.ResetText()
  fullName: System.Windows.Forms.Control.ResetText()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets the <xref:System.Windows.Forms.Control.Text*> property to its default value."
  remarks: "You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.Control> or creating your own control incorporating the <xref:System.Windows.Forms.Control>."
  syntax:
    content: public virtual void ResetText ();
    parameters: []
  overload: System.Windows.Forms.Control.ResetText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Resize
  id: Resize
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Resize
  nameWithType: Control.Resize
  fullName: System.Windows.Forms.Control.Resize
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is resized."
  remarks: "To determine the <xref:System.Windows.Forms.Control.Size%2A> of the resized control, you can cast the `sender` parameter of the registered <xref:System.Windows.Forms.ControlEventHandler> method  to a <xref:System.Windows.Forms.Control> and get its <xref:System.Windows.Forms.Control.Size%2A> property (or <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> properties individually).       To handle custom layouts, use the <xref:System.Windows.Forms.Control.Layout> event instead of the Resize event. The <xref:System.Windows.Forms.Control.Layout> event is raised in response to a Resize event, but also in response to other changes that affect the layout of the control.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example handles the Resize event of a <xref:System.Windows.Forms.Form>. When the form is resized, the event handler ensures that the form stays square (its <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> remain equal). To run this example, make sure and associate this event-handling method with the form’s Resize event.  \n  \n [!code-vb[WinForms.Control.Resize#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_12_1.vb)]\n [!code-cpp[WinForms.Control.Resize#1](~/add/codesnippet/cpp/e-system.windows.forms.c_12_1.cpp)]\n [!code-cs[WinForms.Control.Resize#1](~/add/codesnippet/csharp/e-system.windows.forms.c_12_1.cs)]"
  syntax:
    content: public event EventHandler Resize;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResizeRedraw
  id: ResizeRedraw
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResizeRedraw
  nameWithType: Control.ResizeRedraw
  fullName: System.Windows.Forms.Control.ResizeRedraw
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control redraws itself when resized."
  remarks: "The ResizeRedraw property value is equivalent to the return value of the <xref:System.Windows.Forms.Control.GetStyle%2A> method when passing in the <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> value as a parameter."
  syntax:
    content: protected bool ResizeRedraw { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control redraws itself when resized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ResizeRedraw*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResumeLayout
  id: ResumeLayout
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResumeLayout()
  nameWithType: Control.ResumeLayout()
  fullName: System.Windows.Forms.Control.ResumeLayout()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resumes usual layout logic."
  remarks: "Calling the ResumeLayout method forces an immediate layout if there are any pending layout requests.       The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and ResumeLayout methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control. For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the ResumeLayout method to enable the changes to take effect.       There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for ResumeLayout to be successfully called."
  example:
  - "The following code example adds two buttons to a form. The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and ResumeLayout methods.  \n  \n [!code-cs[Windows.Forms.Control Members2#2](~/add/codesnippet/csharp/m-system.windows.forms.c_34_1.cs)]\n [!code-cpp[Windows.Forms.Control Members2#2](~/add/codesnippet/cpp/m-system.windows.forms.c_34_1.cpp)]\n [!code-vb[Windows.Forms.Control Members2#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_34_1.vb)]"
  syntax:
    content: public void ResumeLayout ();
    parameters: []
  overload: System.Windows.Forms.Control.ResumeLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ResumeLayout(System.Boolean)
  id: ResumeLayout(System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ResumeLayout(Boolean)
  nameWithType: Control.ResumeLayout(Boolean)
  fullName: System.Windows.Forms.Control.ResumeLayout(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests."
  remarks: "Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests. When the `performLayout` parameter is set to `true`, an immediate layout occurs if there are any pending layout requests.       The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control. For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.       There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.      > [!NOTE] >  When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added. After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method. This will increase the performance of applications with many controls."
  syntax:
    content: public void ResumeLayout (bool performLayout);
    parameters:
    - id: performLayout
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to execute pending layout requests; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ResumeLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Right
  id: Right
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Right
  nameWithType: Control.Right
  fullName: System.Windows.Forms.Control.Right
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the distance, in pixels, between the right edge of the control and the left edge of its container&quot;s client area."
  remarks: "The value of the Right property is equal to the sum of the <xref:System.Windows.Forms.Control.Left%2A> property value and the <xref:System.Windows.Forms.Control.Width%2A> property value.       The Right property is read-only. You can change this property value indirectly by changing the value of the <xref:System.Windows.Forms.Control.Left%2A> or <xref:System.Windows.Forms.Control.Width%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods."
  example:
  - "The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  \n  \n [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_70_1.cs)]\n [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_70_1.cpp)]\n [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_70_1.vb)]  \n  \n [!code-cpp[Control.KeyUp#1](~/add/codesnippet/cpp/p-system.windows.forms.c_70_2.cpp)]\n [!code-vb[Control.KeyUp#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_70_2.vb)]\n [!code-cs[Control.KeyUp#1](~/add/codesnippet/csharp/p-system.windows.forms.c_70_2.cs)]"
  syntax:
    content: public int Right { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> representing the distance, in pixels, between the right edge of the control and the left edge of its container&quot;s client area."
  overload: System.Windows.Forms.Control.Right*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RightToLeft
  id: RightToLeft
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RightToLeft
  nameWithType: Control.RightToLeft
  fullName: System.Windows.Forms.Control.RightToLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether control&quot;s elements are aligned to support locales using right-to-left fonts."
  remarks: "The RightToLeft property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.       The RightToLeft property is used for international applications where the language is written from right to left, such as Hebrew or Arabic. When this property is set to <xref:System.Windows.Forms.RightToLeft?displayProperty=fullName>, control elements that include text are displayed from right to left.      > [!NOTE] >  If the value of the RightToLeft property is changed at run time, only raw text without formatting is preserved.       The following are a few examples of how control elements are affected by the RightToLeft property value of <xref:System.Windows.Forms.RightToLeft?displayProperty=fullName> :      -   Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, multiline <xref:System.Windows.Forms.TextBox>, and <xref:System.Windows.Forms.RichTextBox>).      -   Horizontal scroll bars start with the scroll box (thumb) right-aligned.      -   The check box element alignment, controlled by the `CheckAlign` property, is reversed for <xref:System.Windows.Forms.CheckBox> and <xref:System.Windows.Forms.RadioButton> controls.      -   Items in list box, combo box, and up-down controls are right aligned.      -   Up and down buttons are left-aligned on <xref:System.Windows.Forms.NumericUpDown> and <xref:System.Windows.Forms.DomainUpDown> controls.      -   Menus (<xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, and <xref:System.Windows.Forms.ContextMenu>) are displayed right-aligned.      -   The alignment of toolbar buttons on a <xref:System.Windows.Forms.ToolBar> control or the alignment of text on a <xref:System.Windows.Forms.ToolBarButton> is not affected by the RightToLeft property.      -   <xref:System.Windows.Forms.AxHost> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display."
  syntax:
    content: public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }
    return:
      type: System.Windows.Forms.RightToLeft
      description: "One of the <xref href=&quot;System.Windows.Forms.RightToLeft&quot;></xref> values. The default is <xref href=&quot;System.Windows.Forms.RightToLeft&quot;></xref>."
  overload: System.Windows.Forms.Control.RightToLeft*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The assigned value is not one of the <xref href=&quot;System.Windows.Forms.RightToLeft&quot;></xref> values."
  platform:
  - net462
- uid: System.Windows.Forms.Control.RightToLeftChanged
  id: RightToLeftChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RightToLeftChanged
  nameWithType: Control.RightToLeftChanged
  fullName: System.Windows.Forms.Control.RightToLeftChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.RightToLeft*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).  \n  \n The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_63_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_63_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_63_1.cpp)]"
  syntax:
    content: public event EventHandler RightToLeftChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)
  id: RtlTranslateAlignment(System.Drawing.ContentAlignment)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RtlTranslateAlignment(ContentAlignment)
  nameWithType: Control.RtlTranslateAlignment(ContentAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateAlignment(ContentAlignment)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Converts the specified <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> to the appropriate <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> to support right-to-left text."
  remarks: "If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in."
  syntax:
    content: protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);
    parameters:
    - id: align
      type: System.Drawing.ContentAlignment
      description: "One of the <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> values."
    return:
      type: System.Drawing.ContentAlignment
      description: "One of the <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> values."
  overload: System.Windows.Forms.Control.RtlTranslateAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)
  id: RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RtlTranslateAlignment(HorizontalAlignment)
  nameWithType: Control.RtlTranslateAlignment(HorizontalAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateAlignment(HorizontalAlignment)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Converts the specified <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> to the appropriate <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> to support right-to-left text."
  remarks: "If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in."
  syntax:
    content: protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);
    parameters:
    - id: align
      type: System.Windows.Forms.HorizontalAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> values."
    return:
      type: System.Windows.Forms.HorizontalAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> values."
  overload: System.Windows.Forms.Control.RtlTranslateAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)
  id: RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RtlTranslateAlignment(LeftRightAlignment)
  nameWithType: Control.RtlTranslateAlignment(LeftRightAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateAlignment(LeftRightAlignment)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Converts the specified <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> to the appropriate <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> to support right-to-left text."
  remarks: "If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in."
  syntax:
    content: protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);
    parameters:
    - id: align
      type: System.Windows.Forms.LeftRightAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> values."
    return:
      type: System.Windows.Forms.LeftRightAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> values."
  overload: System.Windows.Forms.Control.RtlTranslateAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)
  id: RtlTranslateContent(System.Drawing.ContentAlignment)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RtlTranslateContent(ContentAlignment)
  nameWithType: Control.RtlTranslateContent(ContentAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateContent(ContentAlignment)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Converts the specified <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> to the appropriate <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> to support right-to-left text."
  remarks: "If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in."
  syntax:
    content: protected System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);
    parameters:
    - id: align
      type: System.Drawing.ContentAlignment
      description: "One of the <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> values."
    return:
      type: System.Drawing.ContentAlignment
      description: "One of the <xref href=&quot;System.Drawing.ContentAlignment&quot;></xref> values."
  overload: System.Windows.Forms.Control.RtlTranslateContent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)
  id: RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RtlTranslateHorizontal(HorizontalAlignment)
  nameWithType: Control.RtlTranslateHorizontal(HorizontalAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateHorizontal(HorizontalAlignment)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Converts the specified <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> to the appropriate <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> to support right-to-left text."
  remarks: "If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in."
  syntax:
    content: protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);
    parameters:
    - id: align
      type: System.Windows.Forms.HorizontalAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> values."
    return:
      type: System.Windows.Forms.HorizontalAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.HorizontalAlignment&quot;></xref> values."
  overload: System.Windows.Forms.Control.RtlTranslateHorizontal*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)
  id: RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: RtlTranslateLeftRight(LeftRightAlignment)
  nameWithType: Control.RtlTranslateLeftRight(LeftRightAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateLeftRight(LeftRightAlignment)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Converts the specified <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> to the appropriate <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> to support right-to-left text."
  remarks: "If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in."
  syntax:
    content: protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);
    parameters:
    - id: align
      type: System.Windows.Forms.LeftRightAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> values."
    return:
      type: System.Windows.Forms.LeftRightAlignment
      description: "One of the <xref href=&quot;System.Windows.Forms.LeftRightAlignment&quot;></xref> values."
  overload: System.Windows.Forms.Control.RtlTranslateLeftRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Scale(System.Drawing.SizeF)
  id: Scale(System.Drawing.SizeF)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Scale(SizeF)
  nameWithType: Control.Scale(SizeF)
  fullName: System.Windows.Forms.Control.Scale(SizeF)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scales the control and all child controls by the specified scaling factor."
  remarks: "The Scale method scales the control by the specified scaling `factor`. It also recursively scales all child controls if the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`. Internally, this method calls <xref:System.Windows.Forms.Control.ScaleControl%2A> to scale each control."
  syntax:
    content: public void Scale (System.Drawing.SizeF factor);
    parameters:
    - id: factor
      type: System.Drawing.SizeF
      description: "A <xref href=&quot;System.Drawing.SizeF&quot;></xref> containing the horizontal and vertical scaling factors."
  overload: System.Windows.Forms.Control.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Scale(System.Single)
  id: Scale(System.Single)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Scale(Single)
  nameWithType: Control.Scale(Single)
  fullName: System.Windows.Forms.Control.Scale(Single)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scales the control and any child controls."
  syntax:
    content: public void Scale (float ratio);
    parameters:
    - id: ratio
      type: System.Single
      description: "The ratio to use for scaling."
  overload: System.Windows.Forms.Control.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Scale(System.Single,System.Single)
  id: Scale(System.Single,System.Single)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Scale(Single,Single)
  nameWithType: Control.Scale(Single,Single)
  fullName: System.Windows.Forms.Control.Scale(Single,Single)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scales the entire control and any child controls."
  syntax:
    content: public void Scale (float dx, float dy);
    parameters:
    - id: dx
      type: System.Single
      description: "The horizontal scaling factor."
    - id: dy
      type: System.Single
      description: "The vertical scaling factor."
  overload: System.Windows.Forms.Control.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ScaleChildren
  id: ScaleChildren
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ScaleChildren
  nameWithType: Control.ScaleChildren
  fullName: System.Windows.Forms.Control.ScaleChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value that determines the scaling of child controls."
  remarks: "If the ScaleChildren property is `true`, then the <xref:System.Windows.Forms.Control.Scale%2A> method will recursively call the <xref:System.Windows.Forms.Control.ScaleControl%2A> method of each of its child controls.       The default implementation of ScaleChildren always returns `true`. Derived classes can override ScaleChildren to return `false` to indicate that scaling should not be performed on their children."
  syntax:
    content: protected virtual bool ScaleChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if child controls will be scaled when the <xref:System.Windows.Forms.Control.Scale*> method on this control is called; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ScaleChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  id: ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ScaleControl(SizeF,BoundsSpecified)
  nameWithType: Control.ScaleControl(SizeF,BoundsSpecified)
  fullName: System.Windows.Forms.Control.ScaleControl(SizeF,BoundsSpecified)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scales a control&quot;s location, size, padding and margin."
  remarks: "If the control is top level, this will not scale the control&quot;s location. This does not scale children or the size of automatically sized controls. You can omit scaling in any direction by changing the value of the `specified` parameter."
  example:
  - "<xref:System.Windows.Forms.BoundsSpecified>  \n  \n <xref:System.Windows.Forms.Control.Scale%2A>  \n  \n <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  \n  \n <xref:System.Windows.Forms.Control.SetBoundsCore%2A>"
  syntax:
    content: protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);
    parameters:
    - id: factor
      type: System.Drawing.SizeF
      description: "The factor by which the height and width of the control will be scaled."
    - id: specified
      type: System.Windows.Forms.BoundsSpecified
      description: "A <xref href=&quot;System.Windows.Forms.BoundsSpecified&quot;></xref> value that specifies the bounds of the control to use when defining its size and position."
  overload: System.Windows.Forms.Control.ScaleControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)
  id: ScaleCore(System.Single,System.Single)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ScaleCore(Single,Single)
  nameWithType: Control.ScaleCore(Single,Single)
  fullName: System.Windows.Forms.Control.ScaleCore(Single,Single)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This method is not relevant for this class."
  remarks: "This method is not relevant for this class."
  syntax:
    content: protected virtual void ScaleCore (float dx, float dy);
    parameters:
    - id: dx
      type: System.Single
      description: "The horizontal scaling factor."
    - id: dy
      type: System.Single
      description: "The vertical scaling factor."
  overload: System.Windows.Forms.Control.ScaleCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Select
  id: Select
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Select()
  nameWithType: Control.Select()
  fullName: System.Windows.Forms.Control.Select()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Activates the control."
  remarks: "The Select method activates the control if the control&quot;s `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.       The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.      -   <xref:System.Windows.Forms.Label>      -   <xref:System.Windows.Forms.Panel>      -   <xref:System.Windows.Forms.GroupBox>      -   <xref:System.Windows.Forms.PictureBox>      -   <xref:System.Windows.Forms.ProgressBar>      -   <xref:System.Windows.Forms.Splitter>      -   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)"
  example:
  - "The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#2](~/add/codesnippet/cpp/m-system.windows.forms.c_92_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#2](~/add/codesnippet/csharp/m-system.windows.forms.c_92_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_92_1.vb)]"
  syntax:
    content: public void Select ();
    parameters: []
  overload: System.Windows.Forms.Control.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)
  id: Select(System.Boolean,System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Select(Boolean,Boolean)
  nameWithType: Control.Select(Boolean,Boolean)
  fullName: System.Windows.Forms.Control.Select(Boolean,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Activates a child control. Optionally specifies the direction in the tab order to select the control from."
  remarks: "The `directed` and `forward` parameters are used by container-style controls. When the `directed` parameter is set to `true`, the `forward` parameter is evaluated to determine which control to select. When `forward` is set to `true`, the next control in the tab order is selected; when `false`, the previous control in the tab order is selected.       The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control&quot;s `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.       The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.      -   <xref:System.Windows.Forms.Label>      -   <xref:System.Windows.Forms.Panel>      -   <xref:System.Windows.Forms.GroupBox>      -   <xref:System.Windows.Forms.PictureBox>      -   <xref:System.Windows.Forms.ProgressBar>      -   <xref:System.Windows.Forms.Splitter>      -   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)"
  syntax:
    content: protected virtual void Select (bool directed, bool forward);
    parameters:
    - id: directed
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to specify the direction of the control to select; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: forward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to move forward in the tab order; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to move backward in the tab order."
  overload: System.Windows.Forms.Control.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)
  nameWithType: Control.SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)
  fullName: System.Windows.Forms.Control.SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Activates the next control."
  remarks: "The SelectNextControl method activates the next control in the tab order if the control&quot;s `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.       The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.      -   <xref:System.Windows.Forms.Label>      -   <xref:System.Windows.Forms.Panel>      -   <xref:System.Windows.Forms.GroupBox>      -   <xref:System.Windows.Forms.PictureBox>      -   <xref:System.Windows.Forms.ProgressBar>      -   <xref:System.Windows.Forms.Splitter>      -   <xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)       When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or SelectNextControl methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:      1.  <xref:System.Windows.Forms.Control.Enter>      2.  <xref:System.Windows.Forms.Control.GotFocus>      3.  <xref:System.Windows.Forms.Control.Leave>      4.  <xref:System.Windows.Forms.Control.Validating>      5.  <xref:System.Windows.Forms.Control.Validated>      6.  <xref:System.Windows.Forms.Control.LostFocus>       If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed."
  example:
  - "The following code exampleshows theSelectNextControl method being used in a form that has some controls. Each time that you click the form, the next control is activated. The <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property gets the currently active control in the container control.  \n  \n [!code-cs[System.Windows.Forms.Control.SelectNextControl#1](~/add/codesnippet/csharp/b0a604e4-0b0f-4d7f-842c-_1.cs)]\n [!code-vb[System.Windows.Forms.Control.SelectNextControl#1](~/add/codesnippet/visualbasic/b0a604e4-0b0f-4d7f-842c-_1.vb)]  \n  \n The following code example shows the SelectNextControl method being used in a form that has a <xref:System.Windows.Forms.Button> and some other controls. When you click the <xref:System.Windows.Forms.Button>, the next control after the <xref:System.Windows.Forms.Button> is activated. Notice that you have to get the parent of the <xref:System.Windows.Forms.Button> control. Since <xref:System.Windows.Forms.Button> is not a container, calling SelectNextControl directly on the <xref:System.Windows.Forms.Button> would not change the activation.  \n  \n [!code-cs[System.Windows.Forms.Control.SelectNextControl#2](~/add/codesnippet/csharp/b0a604e4-0b0f-4d7f-842c-_2.cs)]\n [!code-vb[System.Windows.Forms.Control.SelectNextControl#2](~/add/codesnippet/visualbasic/b0a604e4-0b0f-4d7f-842c-_2.vb)]"
  syntax:
    content: public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    parameters:
    - id: ctl
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> at which to start the search."
    - id: forward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to move forward in the tab order; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to move backward in the tab order."
    - id: tabStopOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to ignore the controls with the <xref:System.Windows.Forms.Control.TabStop*> property set to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: nested
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include nested (children of child controls) child controls; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: wrap
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a control was activated; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.SelectNextControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SendToBack
  id: SendToBack
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SendToBack()
  nameWithType: Control.SendToBack()
  fullName: System.Windows.Forms.Control.SendToBack()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sends the control to the back of the z-order."
  remarks: "The control is moved to the back of the z-order. If the control is a child of another control, the child control is moved to the back of the z-order. If the control is a top-level control, this method will not work correctly unless the control is active. A top-level control is a control, such as a <xref:System.Windows.Forms.Form>, that is not a child of another control. An active control is a visible control that has input focus. To use the SendToBack method with an inactive, top-level control, first call the <xref:System.Windows.Forms.Control.BringToFront%2A> method on the control."
  syntax:
    content: public void SendToBack ();
    parameters: []
  overload: System.Windows.Forms.Control.SendToBack*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)
  id: SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetAutoSizeMode(AutoSizeMode)
  nameWithType: Control.SetAutoSizeMode(AutoSizeMode)
  fullName: System.Windows.Forms.Control.SetAutoSizeMode(AutoSizeMode)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets a value indicating how a control will behave when its <xref:System.Windows.Forms.Control.AutoSize*> property is enabled."
  syntax:
    content: protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);
    parameters:
    - id: mode
      type: System.Windows.Forms.AutoSizeMode
      description: "One of the <xref href=&quot;System.Windows.Forms.AutoSizeMode&quot;></xref> values."
  overload: System.Windows.Forms.Control.SetAutoSizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  id: SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetBounds(Int32,Int32,Int32,Int32)
  nameWithType: Control.SetBounds(Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.SetBounds(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the bounds of the control to the specified location and size."
  syntax:
    content: public void SetBounds (int x, int y, int width, int height);
    parameters:
    - id: x
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Left*> property value of the control."
    - id: y
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Top*> property value of the control."
    - id: width
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Width*> property value of the control."
    - id: height
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Height*> property value of the control."
  overload: System.Windows.Forms.Control.SetBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  id: SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)
  nameWithType: Control.SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)
  fullName: System.Windows.Forms.Control.SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the specified bounds of the control to the specified location and size."
  remarks: ''
  example:
  - "The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event. This will keep the form centered as the user resizes it. This example requires that you have created a <xref:System.Windows.Forms.Form> control.  \n  \n [!code-cs[Control.Layout#1](~/add/codesnippet/csharp/f057e785-da4d-4281-b958-_1.cs)]\n [!code-vb[Control.Layout#1](~/add/codesnippet/visualbasic/f057e785-da4d-4281-b958-_1.vb)]\n [!code-cpp[Control.Layout#1](~/add/codesnippet/cpp/f057e785-da4d-4281-b958-_1.cpp)]"
  syntax:
    content: public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);
    parameters:
    - id: x
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Left*> property value of the control."
    - id: y
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Top*> property value of the control."
    - id: width
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Width*> property value of the control."
    - id: height
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Height*> property value of the control."
    - id: specified
      type: System.Windows.Forms.BoundsSpecified
      description: "A bitwise combination of the <xref href=&quot;System.Windows.Forms.BoundsSpecified&quot;></xref> values. For any parameter not specified, the current value will be used."
  overload: System.Windows.Forms.Control.SetBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  id: SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  nameWithType: Control.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  fullName: System.Windows.Forms.Control.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Performs the work of setting the specified bounds of this control."
  remarks: "Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values. For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control. However all values passed in are honored and applied to the control.       The `boundsSpecified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application. For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `boundsSpecified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>. However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `boundsSpecified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>.      > [!NOTE] >  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor."
  example:
  - "The following code example overrides the SetBoundsCore method to ensure that the control remains a fixed size. This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.  \n  \n [!code-cs[Windows.Forms.Control_Methods#1](~/add/codesnippet/csharp/603eafb5-3583-44bd-962b-_1.cs)]\n [!code-cpp[Windows.Forms.Control_Methods#1](~/add/codesnippet/cpp/603eafb5-3583-44bd-962b-_1.cpp)]\n [!code-vb[Windows.Forms.Control_Methods#1](~/add/codesnippet/visualbasic/603eafb5-3583-44bd-962b-_1.vb)]"
  syntax:
    content: protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);
    parameters:
    - id: x
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Left*> property value of the control."
    - id: y
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Top*> property value of the control."
    - id: width
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Width*> property value of the control."
    - id: height
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Height*> property value of the control."
    - id: specified
      type: System.Windows.Forms.BoundsSpecified
      description: "A bitwise combination of the <xref href=&quot;System.Windows.Forms.BoundsSpecified&quot;></xref> values."
  overload: System.Windows.Forms.Control.SetBoundsCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)
  id: SetClientSizeCore(System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetClientSizeCore(Int32,Int32)
  nameWithType: Control.SetClientSizeCore(Int32,Int32)
  fullName: System.Windows.Forms.Control.SetClientSizeCore(Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the size of the client area of the control."
  remarks: "The client area starts at the (0, 0) location and extends to the (`x`, `y`) location.       Typically, you should not set the <xref:System.Windows.Forms.Control.ClientSize%2A> of the control."
  example:
  - "The following code example overrides the SetClientSizeCore method to ensure that the control remains square. This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.  \n  \n [!code-cs[Windows.Forms.Control_Methods#2](~/add/codesnippet/csharp/m-system.windows.forms.c_54_1.cs)]\n [!code-cpp[Windows.Forms.Control_Methods#2](~/add/codesnippet/cpp/m-system.windows.forms.c_54_1.cpp)]\n [!code-vb[Windows.Forms.Control_Methods#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_54_1.vb)]"
  syntax:
    content: protected virtual void SetClientSizeCore (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: "The client area width, in pixels."
    - id: y
      type: System.Int32
      description: "The client area height, in pixels."
  overload: System.Windows.Forms.Control.SetClientSizeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)
  id: SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetStyle(ControlStyles,Boolean)
  nameWithType: Control.SetStyle(ControlStyles,Boolean)
  fullName: System.Windows.Forms.Control.SetStyle(ControlStyles,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets a specified <xref href=&quot;System.Windows.Forms.ControlStyles&quot;></xref> flag to either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  remarks: "Control style bit flags are used to categorize supported behavior. A control can enable a style by calling the SetStyle method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to. To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.      > [!CAUTION] >  Setting the control style bits can substantially change the behavior of the control. Review the <xref:System.Windows.Forms.ControlStyles> enumeration documentation to understand the effects of changing the control style bits before calling the SetStyle method."
  example:
  - "The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#3](~/add/codesnippet/cpp/2751760d-2ebd-4c65-9243-_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#3](~/add/codesnippet/csharp/2751760d-2ebd-4c65-9243-_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#3](~/add/codesnippet/visualbasic/2751760d-2ebd-4c65-9243-_1.vb)]"
  syntax:
    content: protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);
    parameters:
    - id: flag
      type: System.Windows.Forms.ControlStyles
      description: "The <xref href=&quot;System.Windows.Forms.ControlStyles&quot;></xref> bit to set."
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to apply the specified style to the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.SetStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetTopLevel(System.Boolean)
  id: SetTopLevel(System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetTopLevel(Boolean)
  nameWithType: Control.SetTopLevel(Boolean)
  fullName: System.Windows.Forms.Control.SetTopLevel(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the control as the top-level control."
  remarks: "If you call the SetTopLevel method of a <xref:System.Windows.Forms.Form> and pass in a value of `false`, the form will not be visible until you call SetTopLevelagain, passing in a value of `true`."
  syntax:
    content: protected void SetTopLevel (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to set the control as the top-level control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.SetTopLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>value</code> parameter is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> and the control is an ActiveX control."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The <xref:System.Windows.Forms.Control.GetTopLevel*> return value is not equal to the <code>value</code> parameter and the <xref:System.Windows.Forms.Control.Parent*> property is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.Control.SetVisibleCore(System.Boolean)
  id: SetVisibleCore(System.Boolean)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SetVisibleCore(Boolean)
  nameWithType: Control.SetVisibleCore(Boolean)
  fullName: System.Windows.Forms.Control.SetVisibleCore(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the control to the specified visible state."
  remarks: "You would typically override this method to change the visibility behavior of the control."
  syntax:
    content: protected virtual void SetVisibleCore (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to make the control visible; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.SetVisibleCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Show
  id: Show
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Show()
  nameWithType: Control.Show()
  fullName: System.Windows.Forms.Control.Show()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Displays the control to the user."
  remarks: "Showing the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `true`. After the Show method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `true` until the <xref:System.Windows.Forms.Control.Hide%2A> method is called."
  example:
  - "The following code example displays an about dialog box and temporarily draws a blue square on its surface. This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `AboutDialog`.  \n  \n [!code-cs[Windows.Forms.Control Members2#1](~/add/codesnippet/csharp/m-system.windows.forms.c_27_1.cs)]\n [!code-cpp[Windows.Forms.Control Members2#1](~/add/codesnippet/cpp/m-system.windows.forms.c_27_1.cpp)]\n [!code-vb[Windows.Forms.Control Members2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_27_1.vb)]"
  syntax:
    content: public void Show ();
    parameters: []
  overload: System.Windows.Forms.Control.Show*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ShowFocusCues
  id: ShowFocusCues
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ShowFocusCues
  nameWithType: Control.ShowFocusCues
  fullName: System.Windows.Forms.Control.ShowFocusCues
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the control should display focus rectangles."
  remarks: "For more information about this feature, see the[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\\(v=vs.85\\).aspx),[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\\(v=vs.85\\).aspx), and the [WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\\(v=vs.85\\).aspx)topics."
  syntax:
    content: protected virtual bool ShowFocusCues { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control should display focus rectangles; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ShowFocusCues*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.ShowKeyboardCues
  id: ShowKeyboardCues
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: ShowKeyboardCues
  nameWithType: Control.ShowKeyboardCues
  fullName: System.Windows.Forms.Control.ShowKeyboardCues
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators."
  remarks: "In controls created in the Windows Forms designer, keyboard accelerators are visible by default.  \n  \n For more information about this feature, see the[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\\(v=vs.85\\).aspx),[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\\(v=vs.85\\).aspx), and the [WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\\(v=vs.85\\).aspx)topics."
  syntax:
    content: protected virtual bool ShowKeyboardCues { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the keyboard accelerators are visible; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.ShowKeyboardCues*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Site
  id: Site
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Site
  nameWithType: Control.Site
  fullName: System.Windows.Forms.Control.Site
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the site of the control."
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "The <xref href=&quot;System.ComponentModel.ISite&quot;></xref> associated with the <xref href=&quot;System.Windows.Forms.Control&quot;></xref>, if any."
  overload: System.Windows.Forms.Control.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Size
  id: Size
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Size
  nameWithType: Control.Size
  fullName: System.Windows.Forms.Control.Size
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the height and width of the control."
  remarks: "Because the <xref:System.Drawing.Size> class is a value type (`Structure` in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], `struct` in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)]), it is returned by value, meaning accessing the property returns a copy of the size of the control. So, adjusting the <xref:System.Drawing.Size.Width%2A> or <xref:System.Drawing.Size.Height%2A> properties of the <xref:System.Drawing.Size> returned from this property will not affect the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control. To adjust the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control, you must set the control&quot;s <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> property, or set the Size property with a new <xref:System.Drawing.Size>.      > [!NOTE] >  To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.      > [!NOTE] >  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor."
  example:
  - "The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the<xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  \n  \n [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_76_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_76_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_76_1.vb)]"
  syntax:
    content: public System.Drawing.Size Size { get; set; }
    return:
      type: System.Drawing.Size
      description: "The <xref href=&quot;System.Drawing.Size&quot;></xref> that represents the height and width of the control in pixels."
  overload: System.Windows.Forms.Control.Size*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SizeChanged
  id: SizeChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SizeChanged
  nameWithType: Control.SizeChanged
  fullName: System.Windows.Forms.Control.SizeChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Size*> property value changes."
  remarks: "It is preferable to use the <xref:System.Windows.Forms.Control.Layout> event to handle custom layouts. The <xref:System.Windows.Forms.Control.Layout> event is raised in response to <xref:System.Windows.Forms.Control.Resize> events, but also in other conditions when layout might need to be applied.       This event is raised if the <xref:System.Windows.Forms.Control.Size%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the SizeChanged event. An instance of a <xref:System.Windows.Forms.Button> control has been provided that can be scaled both horizontally and vertically. A <xref:System.Windows.Forms.NumericUpDown> instance provides the horizontal and vertical scale value. The <xref:System.Windows.Forms.Button> instance named **OK** is used to set the scale values for the <xref:System.Windows.Forms.Button> control instance. Whenever the size of the control changes, the event handler associated with the SizeChanged event of the control is called. This event handler displays a message box indicating that the size of the control has changed.  \n  \n [!code-cs[Control_Scale1#2](~/add/codesnippet/csharp/e-system.windows.forms.c_24_1.cs)]\n [!code-cpp[Control_Scale1#2](~/add/codesnippet/cpp/e-system.windows.forms.c_24_1.cpp)]\n [!code-vb[Control_Scale1#2](~/add/codesnippet/visualbasic/e-system.windows.forms.c_24_1.vb)]"
  syntax:
    content: public event EventHandler SizeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)
  id: SizeFromClientSize(System.Drawing.Size)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SizeFromClientSize(Size)
  nameWithType: Control.SizeFromClientSize(Size)
  fullName: System.Windows.Forms.Control.SizeFromClientSize(Size)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines the size of the entire control from the height and width of its client area."
  syntax:
    content: protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);
    parameters:
    - id: clientSize
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;></xref> value representing the height and width of the control&quot;s client area."
    return:
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;></xref> value representing the height and width of the entire control."
  overload: System.Windows.Forms.Control.SizeFromClientSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.StyleChanged
  id: StyleChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: StyleChanged
  nameWithType: Control.StyleChanged
  fullName: System.Windows.Forms.Control.StyleChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control style changes."
  remarks: "The StyleChanged event occurs when <xref:System.Windows.Forms.ControlStyles> flags have been added or changed.       This event is raised if the control style is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the StyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the StyleChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#68](~/add/codesnippet/csharp/e-system.windows.forms.c_25_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#68](~/add/codesnippet/visualbasic/e-system.windows.forms.c_25_1.vb)]"
  syntax:
    content: public event EventHandler StyleChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SuspendLayout
  id: SuspendLayout
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SuspendLayout()
  nameWithType: Control.SuspendLayout()
  fullName: System.Windows.Forms.Control.SuspendLayout()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Temporarily suspends the layout logic for the control."
  remarks: "The layout logic of the control is suspended until the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method is called.       The SuspendLayout and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control. For example, you would typically call the SuspendLayout method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.       There must be no pending calls to SuspendLayout for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.      > [!NOTE] >  When adding several controls to a parent control, it is recommended that you call the SuspendLayout method before initializing the controls to be added. After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method. This will increase the performance of applications with many controls."
  example:
  - "The following code example adds two buttons to a form. The example transactions the addition of the buttons by using the SuspendLayout and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.  \n  \n [!code-cs[Windows.Forms.Control Members2#2](~/add/codesnippet/csharp/m-system.windows.forms.c_14_1.cs)]\n [!code-cpp[Windows.Forms.Control Members2#2](~/add/codesnippet/cpp/m-system.windows.forms.c_14_1.cpp)]\n [!code-vb[Windows.Forms.Control Members2#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_14_1.vb)]"
  syntax:
    content: public void SuspendLayout ();
    parameters: []
  overload: System.Windows.Forms.Control.SuspendLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)
  id: System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)
  isEii: true
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragDrop&quot;></xref> event."
  syntax:
    content: void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);
    parameters:
    - id: drgEvent
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)
  id: System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)
  isEii: true
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragEnter&quot;></xref> event."
  syntax:
    content: void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);
    parameters:
    - id: drgEvent
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)
  id: System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)
  isEii: true
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragLeave&quot;></xref> event."
  syntax:
    content: void IDropTarget.OnDragLeave (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "A <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)
  id: System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)
  isEii: true
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.DragOver&quot;></xref> event."
  syntax:
    content: void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);
    parameters:
    - id: drgEvent
      type: System.Windows.Forms.DragEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.SystemColorsChanged
  id: SystemColorsChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: SystemColorsChanged
  nameWithType: Control.SystemColorsChanged
  fullName: System.Windows.Forms.Control.SystemColorsChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the system colors change."
  remarks: "This event is raised if the <xref:System.Drawing.SystemColors> is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the SystemColorsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the SystemColorsChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#69](~/add/codesnippet/csharp/e-system.windows.forms.c_57_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#69](~/add/codesnippet/visualbasic/e-system.windows.forms.c_57_1.vb)]"
  syntax:
    content: public event EventHandler SystemColorsChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.TabIndex
  id: TabIndex
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: TabIndex
  nameWithType: Control.TabIndex
  fullName: System.Windows.Forms.Control.TabIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the tab order of the control within its container."
  remarks: "A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order. If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.       For a control to be included in the tab order, its <xref:System.Windows.Forms.Control.TabStop%2A> property must be set to `true`."
  example:
  - "The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the TabIndex property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  \n  \n [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_102_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_102_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_102_1.vb)]"
  syntax:
    content: public int TabIndex { get; set; }
    return:
      type: System.Int32
      description: "The index value of the control within the set of controls within its container. The controls in the container are included in the tab order."
  overload: System.Windows.Forms.Control.TabIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.TabIndexChanged
  id: TabIndexChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: TabIndexChanged
  nameWithType: Control.TabIndexChanged
  fullName: System.Windows.Forms.Control.TabIndexChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.TabIndex*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.TabIndex%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the TabIndexChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the TabIndexChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#25](~/add/codesnippet/csharp/e-system.windows.forms.c_79_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#25](~/add/codesnippet/visualbasic/e-system.windows.forms.c_79_1.vb)]"
  syntax:
    content: public event EventHandler TabIndexChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.TabStop
  id: TabStop
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: TabStop
  nameWithType: Control.TabStop
  fullName: System.Windows.Forms.Control.TabStop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the user can give the focus to this control using the TAB key."
  remarks: "When the user presses the TAB key, the input focus is set to the next control in the tab order. Controls with the TabStop property value of `false` are not included in the collection of controls in the tab order. The tab order can be manipulated by setting the control&quot;s <xref:System.Windows.Forms.Control.TabIndex%2A> property value."
  example:
  - "The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the TabStop to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  \n  \n [!code-cs[Windows.Forms.Control Properties#3](~/add/codesnippet/csharp/p-system.windows.forms.c_74_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#3](~/add/codesnippet/cpp/p-system.windows.forms.c_74_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_74_1.vb)]"
  syntax:
    content: public bool TabStop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the user can give the focus to the control using the TAB key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.       <div class=&quot;alert NOTE&quot;>    This property will always return <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> for an instance of the <xref href=&quot;System.Windows.Forms.Form&quot;></xref> class.      </div>"
  overload: System.Windows.Forms.Control.TabStop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.TabStopChanged
  id: TabStopChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: TabStopChanged
  nameWithType: Control.TabStopChanged
  fullName: System.Windows.Forms.Control.TabStopChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.TabStop*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.TabStop%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the TabStopChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the TabStopChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#26](~/add/codesnippet/csharp/e-system.windows.forms.c_83_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#26](~/add/codesnippet/visualbasic/e-system.windows.forms.c_83_1.vb)]"
  syntax:
    content: public event EventHandler TabStopChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Tag
  id: Tag
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Tag
  nameWithType: Control.Tag
  fullName: System.Windows.Forms.Control.Tag
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the object that contains data about the control."
  remarks: "Any type derived from the <xref:System.Object> class can be assigned to this property. If the Tag property is set through the Windows Forms designer, only text can be assigned.       A common use for the Tag property is to store data that is closely associated with the control. For example, if you have a control that displays information about a customer, you might store a <xref:System.Data.DataSet> that contains the customer&quot;s order history in that control&quot;s Tag property so the data can be accessed quickly."
  example:
  - "The following code example displays a form and stores a `Customer` in its Tag property. This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `CustomerForm` and that you have defined a `Customer`.  \n  \n [!code-cs[Windows.Forms.Control Members2#3](~/add/codesnippet/csharp/p-system.windows.forms.c_59_1.cs)]\n [!code-cpp[Windows.Forms.Control Members2#3](~/add/codesnippet/cpp/p-system.windows.forms.c_59_1.cpp)]\n [!code-vb[Windows.Forms.Control Members2#3](~/add/codesnippet/visualbasic/p-system.windows.forms.c_59_1.vb)]"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "An <xref:System.Object> that contains data about the control. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Text
  id: Text
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Text
  nameWithType: Control.Text
  fullName: System.Windows.Forms.Control.Text
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the text associated with this control."
  remarks: "The Text property of the control is used differently by each derived class. For example the Text property of a <xref:System.Windows.Forms.Form> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name. However, the Text property of a <xref:System.Windows.Forms.RichTextBox> can be large and can include numerous nonvisual characters used to format the text. For example, the text displayed in a <xref:System.Windows.Forms.RichTextBox> can be formatted by adjusting the <xref:System.Drawing.Font> properties, or by the addition of spaces or tab characters to align the text."
  example:
  - "The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the Text property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.  \n  \n [!code-cs[Windows.Forms.Control Properties#2](~/add/codesnippet/csharp/p-system.windows.forms.c_89_1.cs)]\n [!code-cpp[Windows.Forms.Control Properties#2](~/add/codesnippet/cpp/p-system.windows.forms.c_89_1.cpp)]\n [!code-vb[Windows.Forms.Control Properties#2](~/add/codesnippet/visualbasic/p-system.windows.forms.c_89_1.vb)]"
  syntax:
    content: public virtual string Text { get; set; }
    return:
      type: System.String
      description: "The text associated with this control."
  overload: System.Windows.Forms.Control.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.TextChanged
  id: TextChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: TextChanged
  nameWithType: Control.TextChanged
  fullName: System.Windows.Forms.Control.TextChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Text*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Text%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  \n  \n [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_19_1.vb)]\n [!code-cs[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/csharp/e-system.windows.forms.c_19_1.cs)]\n [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/add/codesnippet/cpp/e-system.windows.forms.c_19_1.cpp)]"
  syntax:
    content: public event EventHandler TextChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Top
  id: Top
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Top
  nameWithType: Control.Top
  fullName: System.Windows.Forms.Control.Top
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container&quot;s client area."
  remarks: "The Top property value is equivalent to the <xref:System.Drawing.Point.Y%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.       Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and Top property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change."
  example:
  - "The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  \n  \n [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_77_1.cs)]\n [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_77_1.cpp)]\n [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_77_1.vb)]"
  syntax:
    content: public int Top { get; set; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container&quot;s client area."
  overload: System.Windows.Forms.Control.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.TopLevelControl
  id: TopLevelControl
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: TopLevelControl
  nameWithType: Control.TopLevelControl
  fullName: System.Windows.Forms.Control.TopLevelControl
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <xref href=&quot;System.Windows.Forms.Form&quot;></xref> that the control is contained in."
  remarks: "The top-level control is defined as the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <xref:System.Windows.Forms.Form> that the control is contained in. For example, if the control is contained on an MDI child <xref:System.Windows.Forms.Form>, then the top-level control is the Multiple Document Interface (MDI) parent <xref:System.Windows.Forms.Form>. If the control is not parented on a <xref:System.Windows.Forms.Form>, this property will return `null`."
  syntax:
    content: public System.Windows.Forms.Control TopLevelControl { get; }
    return:
      type: System.Windows.Forms.Control
      description: "The <xref href=&quot;System.Windows.Forms.Control&quot;></xref> that represents the top-level control that contains the current control."
  overload: System.Windows.Forms.Control.TopLevelControl*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Update
  id: Update
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Update()
  nameWithType: Control.Update()
  fullName: System.Windows.Forms.Control.Update()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Causes the control to redraw the invalidated regions within its client area."
  remarks: "Executes any pending requests for painting.  \n  \n There are two ways to repaint a form and its contents:  \n  \n-   You can use one of the overloads of the <xref:System.Windows.Forms.Control.Invalidate%2A> method with the Update method.  \n  \n-   You can call the <xref:System.Windows.Forms.Control.Refresh%2A> method, which forces the control to redraw itself and all its children. This is equivalent to setting the <xref:System.Windows.Forms.Control.Invalidate%2A> method to `true` and using it with Update.  \n  \n The <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted or repainted. The Update method governs when the painting or repainting occurs. If you use the <xref:System.Windows.Forms.Control.Invalidate%2A> and Update methods together rather than calling <xref:System.Windows.Forms.Control.Refresh%2A>, what gets repainted depends on which overload of <xref:System.Windows.Forms.Control.Invalidate%2A> you use. The Update method just forces the control to be painted immediately, but the <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted when you call the Update method.  \n  \n For more information, see the[WM_PAINT](http://msdn.microsoft.com/library/dd145213\\(v=vs.85\\).aspx)topic."
  syntax:
    content: public void Update ();
    parameters: []
  overload: System.Windows.Forms.Control.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.UpdateBounds
  id: UpdateBounds
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: UpdateBounds()
  nameWithType: Control.UpdateBounds()
  fullName: System.Windows.Forms.Control.UpdateBounds()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Updates the bounds of the control with the current size and location."
  remarks: "If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised. Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised."
  syntax:
    content: protected void UpdateBounds ();
    parameters: []
  overload: System.Windows.Forms.Control.UpdateBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  id: UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: UpdateBounds(Int32,Int32,Int32,Int32)
  nameWithType: Control.UpdateBounds(Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.UpdateBounds(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Updates the bounds of the control with the specified size and location."
  remarks: "If the new <xref:System.Windows.Forms.Control.Size%2A> of the control if different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised. Likewise, is the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised."
  syntax:
    content: protected void UpdateBounds (int x, int y, int width, int height);
    parameters:
    - id: x
      type: System.Int32
      description: "The <xref:System.Drawing.Point.X*> coordinate of the control."
    - id: y
      type: System.Int32
      description: "The <xref:System.Drawing.Point.Y*> coordinate of the control."
    - id: width
      type: System.Int32
      description: "The <xref:System.Drawing.Size.Width*> of the control."
    - id: height
      type: System.Int32
      description: "The <xref:System.Drawing.Size.Height*> of the control."
  overload: System.Windows.Forms.Control.UpdateBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Control.UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Updates the bounds of the control with the specified size, location, and client size."
  remarks: "If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised. Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised."
  syntax:
    content: protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);
    parameters:
    - id: x
      type: System.Int32
      description: "The <xref:System.Drawing.Point.X*> coordinate of the control."
    - id: y
      type: System.Int32
      description: "The <xref:System.Drawing.Point.Y*> coordinate of the control."
    - id: width
      type: System.Int32
      description: "The <xref:System.Drawing.Size.Width*> of the control."
    - id: height
      type: System.Int32
      description: "The <xref:System.Drawing.Size.Height*> of the control."
    - id: clientWidth
      type: System.Int32
      description: "The client <xref:System.Drawing.Size.Width*> of the control."
    - id: clientHeight
      type: System.Int32
      description: "The client <xref:System.Drawing.Size.Height*> of the control."
  overload: System.Windows.Forms.Control.UpdateBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.UpdateStyles
  id: UpdateStyles
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: UpdateStyles()
  nameWithType: Control.UpdateStyles()
  fullName: System.Windows.Forms.Control.UpdateStyles()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Forces the assigned styles to be reapplied to the control."
  remarks: "This method calls the <xref:System.Windows.Forms.Control.CreateParams%2A> method to get the styles to apply. The styles assigned to the <xref:System.Windows.Forms.CreateParams.Style%2A> and <xref:System.Windows.Forms.CreateParams.ExStyle%2A> properties of the <xref:System.Windows.Forms.CreateParams> assigned to the control&quot;s <xref:System.Windows.Forms.Control.CreateParams%2A> property are reapplied. The control is repainted to reflect the style changes if necessary.       The UpdateStyles method has no effect if the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property value is `false`."
  example:
  - "The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.  \n  \n [!code-cpp[Windows.Forms.ControlMembers6#3](~/add/codesnippet/cpp/m-system.windows.forms.c_39_1.cpp)]\n [!code-cs[Windows.Forms.ControlMembers6#3](~/add/codesnippet/csharp/m-system.windows.forms.c_39_1.cs)]\n [!code-vb[Windows.Forms.ControlMembers6#3](~/add/codesnippet/visualbasic/m-system.windows.forms.c_39_1.vb)]"
  syntax:
    content: protected void UpdateStyles ();
    parameters: []
  overload: System.Windows.Forms.Control.UpdateStyles*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.UpdateZOrder
  id: UpdateZOrder
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: UpdateZOrder()
  nameWithType: Control.UpdateZOrder()
  fullName: System.Windows.Forms.Control.UpdateZOrder()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Updates the control in its parent&quot;s z-order."
  remarks: "The UpdateZOrder method updates the position of the control in its parent control&quot;s z-order. For example, if this control is a newly created control that was added to a <xref:System.Windows.Forms.Control.ControlCollection>, the z-order is updated with the new control added to the back."
  syntax:
    content: protected void UpdateZOrder ();
    parameters: []
  overload: System.Windows.Forms.Control.UpdateZOrder*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.UseWaitCursor
  id: UseWaitCursor
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: UseWaitCursor
  nameWithType: Control.UseWaitCursor
  fullName: System.Windows.Forms.Control.UseWaitCursor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls."
  remarks: "Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.However, note that operations that block the UI thread will also block acursor change.Therefore, this property should only be used when performing time-consuming operations in another thread. To change the cursor globally and immediately, seethe <xref:System.Windows.Forms.Cursor.Current%2A> property."
  syntax:
    content: public bool UseWaitCursor { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to use the wait cursor for the current control and all child controls; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.UseWaitCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Validated
  id: Validated
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Validated
  nameWithType: Control.Validated
  fullName: System.Windows.Forms.Control.Validated
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is finished validating."
  remarks: "When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  <xref:System.Windows.Forms.Control.Leave>  \n  \n4.  <xref:System.Windows.Forms.Control.Validating>  \n  \n5.  Validated  \n  \n6.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  \n  \n1.  <xref:System.Windows.Forms.Control.Enter>  \n  \n2.  <xref:System.Windows.Forms.Control.GotFocus>  \n  \n3.  <xref:System.Windows.Forms.Control.LostFocus>  \n  \n4.  <xref:System.Windows.Forms.Control.Leave>  \n  \n5.  <xref:System.Windows.Forms.Control.Validating>  \n  \n6.  Validated  \n  \n If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and Validated events are suppressed.  \n  \n If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.  \n  \n> [!CAUTION]\n>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or Validated event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms632614\\(v=vs.85\\).aspx)topic, and the \"Message Deadlocks\" section of the [About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\\(v=vs.85\\).aspx) topic.  \n  \n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing \"@\" and \".\"), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled. This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.  \n  \n [!code-cs[Control.Validating#1](~/add/codesnippet/csharp/e-system.windows.forms.c_81_1.cs)]\n [!code-cpp[Control.Validating#1](~/add/codesnippet/cpp/e-system.windows.forms.c_81_1.cpp)]\n [!code-vb[Control.Validating#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_81_1.vb)]"
  syntax:
    content: public event EventHandler Validated;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Validating
  id: Validating
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Validating
  nameWithType: Control.Validating
  fullName: System.Windows.Forms.Control.Validating
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is validating."
  remarks: "When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A>or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:      1.  <xref:System.Windows.Forms.Control.Enter>      2.  <xref:System.Windows.Forms.Control.GotFocus>      3.  <xref:System.Windows.Forms.Control.Leave>      4.  Validating      5.  <xref:System.Windows.Forms.Control.Validated>      6.  <xref:System.Windows.Forms.Control.LostFocus>       When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:      1.  <xref:System.Windows.Forms.Control.Enter>      2.  <xref:System.Windows.Forms.Control.GotFocus>      3.  <xref:System.Windows.Forms.Control.LostFocus>      4.  <xref:System.Windows.Forms.Control.Leave>      5.  Validating      6.  <xref:System.Windows.Forms.Control.Validated>       If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the Validating and <xref:System.Windows.Forms.Control.Validated> events are suppressed.       If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the Validating event delegate, all events that would usually occur after the Validating event are suppressed.      > [!CAUTION] >  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, Validating, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the `WM_KILLFOCUS` topic in the &quot;Keyboard Input Reference&quot; section, and the &quot;Message Deadlocks&quot; section of the &quot;About Messages and Message Queues&quot; topic in the MSDN library at http://msdn.microsoft.com/library.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing \"@\" and \".\"), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled. This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.  \n  \n [!code-cs[Control.Validating#1](~/add/codesnippet/csharp/e-system.windows.forms.c_41_1.cs)]\n [!code-cpp[Control.Validating#1](~/add/codesnippet/cpp/e-system.windows.forms.c_41_1.cpp)]\n [!code-vb[Control.Validating#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_41_1.vb)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler Validating;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Visible
  id: Visible
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Visible
  nameWithType: Control.Visible
  fullName: System.Windows.Forms.Control.Visible
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the control and all its child controls are displayed."
  remarks: "Note that even if `Visible` is set to `true`, the control might not be visible to the user if it is obscured behind other controls."
  example:
  - "The following code example uses the derived classes <xref:System.Windows.Forms.VScrollBar> and <xref:System.Windows.Forms.HScrollBar> and sets their Visible property values, based on the size of an <xref:System.Drawing.Image> being displayed in a <xref:System.Windows.Forms.PictureBox> control. This example requires that a <xref:System.Windows.Forms.PictureBox> has been created on a form and that <xref:System.Windows.Forms.HScrollBar> and <xref:System.Windows.Forms.VScrollBar> controls have been created on the <xref:System.Windows.Forms.PictureBox>. This code should be called when the image is loaded into the picture box and by the <xref:System.Windows.Forms.Control.Resize> event of the form.  \n  \n [!code-cpp[Classic Control.Visible Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_101_1.cpp)]\n [!code-vb[Classic Control.Visible Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_101_1.vb)]\n [!code-cs[Classic Control.Visible Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_101_1.cs)]"
  syntax:
    content: public bool Visible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control and all its child controls are displayed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.Control.Visible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.VisibleChanged
  id: VisibleChanged
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: VisibleChanged
  nameWithType: Control.VisibleChanged
  fullName: System.Windows.Forms.Control.VisibleChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the <xref:System.Windows.Forms.Control.Visible*> property value changes."
  remarks: "This event is raised if the <xref:System.Windows.Forms.Control.Visible%2A> property is changed by either a programmatic modification or user interaction.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example raises the VisibleChanged event when the <xref:System.Windows.Forms.Control.Visible%2A> property value of the <xref:System.Windows.Forms.Label> control has changed.  \n  \n [!code-vb[Control_VisibleChanged#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_58_1.vb)]\n [!code-cpp[Control_VisibleChanged#1](~/add/codesnippet/cpp/e-system.windows.forms.c_58_1.cpp)]\n [!code-cs[Control_VisibleChanged#1](~/add/codesnippet/csharp/e-system.windows.forms.c_58_1.cs)]"
  syntax:
    content: public event EventHandler VisibleChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.Width
  id: Width
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: Width
  nameWithType: Control.Width
  fullName: System.Windows.Forms.Control.Width
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the width of the control."
  remarks: "Changes made to the Width and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change."
  example:
  - "The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.  \n  \n [!code-cs[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/csharp/p-system.windows.forms.c_100_1.cs)]\n [!code-cpp[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/cpp/p-system.windows.forms.c_100_1.cpp)]\n [!code-vb[Windows.Forms.Control SizeLocation#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_100_1.vb)]"
  syntax:
    content: public int Width { get; set; }
    return:
      type: System.Int32
      description: "The width of the control in pixels."
  overload: System.Windows.Forms.Control.Width*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.WindowTarget
  id: WindowTarget
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: WindowTarget
  nameWithType: Control.WindowTarget
  fullName: System.Windows.Forms.Control.WindowTarget
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This property is not relevant for this class."
  remarks: "This property is not relevant for this class."
  syntax:
    content: public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }
    return:
      type: System.Windows.Forms.IWindowTarget
      description: "The NativeWindow contained within the control."
  overload: System.Windows.Forms.Control.WindowTarget*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: Control.WndProc(Message)
  fullName: System.Windows.Forms.Control.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes Windows messages."
  remarks: "All messages are sent to the WndProc method after getting filtered through the <xref:System.Windows.Forms.Control.PreProcessMessage%2A> method.       The WndProc method corresponds exactly to the Windows `WindowProc` function. For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565)."
  example:
  - "The following code example demonstrates overriding the WndProc method to handle operating system messages identified in the <xref:System.Windows.Forms.Message> structure. The[WM_ACTIVATEAPP](http://msdn.microsoft.com/en-us/library/windows/desktop/ms632614\\(v=vs.85\\).aspx)operating system message is handled in this example to know when another application is becoming active. See the following topics to understand the available <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=fullName> values. Actual constant values can be found in the Windows.h header file.  \n  \n [!code-cs[System.Windows.Forms.Control.WndProc#1](~/add/codesnippet/csharp/m-system.windows.forms.c_79_1.cs)]\n [!code-vb[System.Windows.Forms.Control.WndProc#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_79_1.vb)]\n [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/add/codesnippet/cpp/m-system.windows.forms.c_79_1.cpp)]"
  syntax:
    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "The Windows <xref href=&quot;System.Windows.Forms.Message&quot;></xref> to process."
  overload: System.Windows.Forms.Control.WndProc*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Windows.Forms.Control.#ctor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Control()
  nameWithType: Control.Control()
  fullName: System.Windows.Forms.Control.Control()
- uid: System.Windows.Forms.Control.#ctor(System.String)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Control(String)
  nameWithType: Control.Control(String)
  fullName: System.Windows.Forms.Control.Control(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Control(Control,String)
  nameWithType: Control.Control(Control,String)
  fullName: System.Windows.Forms.Control.Control(Control,String)
- uid: System.Windows.Forms.Control
  parent: System.Windows.Forms
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Windows.Forms.Control
- uid: System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Control(String,Int32,Int32,Int32,Int32)
  nameWithType: Control.Control(String,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.Control(String,Int32,Int32,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Control(Control,String,Int32,Int32,Int32,Int32)
  nameWithType: Control.Control(Control,String,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.Control(Control,String,Int32,Int32,Int32,Int32)
- uid: System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibilityNotifyClients(AccessibleEvents,Int32)
  nameWithType: Control.AccessibilityNotifyClients(AccessibleEvents,Int32)
  fullName: System.Windows.Forms.Control.AccessibilityNotifyClients(AccessibleEvents,Int32)
- uid: System.Windows.Forms.AccessibleEvents
  parent: System.Windows.Forms
  isExternal: false
  name: AccessibleEvents
  nameWithType: AccessibleEvents
  fullName: System.Windows.Forms.AccessibleEvents
- uid: System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)
  nameWithType: Control.AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)
  fullName: System.Windows.Forms.Control.AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)
- uid: System.Windows.Forms.Control.AccessibilityObject
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibilityObject
  nameWithType: Control.AccessibilityObject
  fullName: System.Windows.Forms.Control.AccessibilityObject
- uid: System.Windows.Forms.AccessibleObject
  parent: System.Windows.Forms
  isExternal: false
  name: AccessibleObject
  nameWithType: AccessibleObject
  fullName: System.Windows.Forms.AccessibleObject
- uid: System.Windows.Forms.Control.AccessibleDefaultActionDescription
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleDefaultActionDescription
  nameWithType: Control.AccessibleDefaultActionDescription
  fullName: System.Windows.Forms.Control.AccessibleDefaultActionDescription
- uid: System.Windows.Forms.Control.AccessibleDescription
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleDescription
  nameWithType: Control.AccessibleDescription
  fullName: System.Windows.Forms.Control.AccessibleDescription
- uid: System.Windows.Forms.Control.AccessibleName
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleName
  nameWithType: Control.AccessibleName
  fullName: System.Windows.Forms.Control.AccessibleName
- uid: System.Windows.Forms.Control.AccessibleRole
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleRole
  nameWithType: Control.AccessibleRole
  fullName: System.Windows.Forms.Control.AccessibleRole
- uid: System.Windows.Forms.AccessibleRole
  parent: System.Windows.Forms
  isExternal: false
  name: AccessibleRole
  nameWithType: AccessibleRole
  fullName: System.Windows.Forms.AccessibleRole
- uid: System.Windows.Forms.Control.AllowDrop
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AllowDrop
  nameWithType: Control.AllowDrop
  fullName: System.Windows.Forms.Control.AllowDrop
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.Control.Anchor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Anchor
  nameWithType: Control.Anchor
  fullName: System.Windows.Forms.Control.Anchor
- uid: System.Windows.Forms.AnchorStyles
  parent: System.Windows.Forms
  isExternal: false
  name: AnchorStyles
  nameWithType: AnchorStyles
  fullName: System.Windows.Forms.AnchorStyles
- uid: System.Windows.Forms.Control.AutoScrollOffset
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AutoScrollOffset
  nameWithType: Control.AutoScrollOffset
  fullName: System.Windows.Forms.Control.AutoScrollOffset
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Windows.Forms.Control.AutoSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AutoSize
  nameWithType: Control.AutoSize
  fullName: System.Windows.Forms.Control.AutoSize
- uid: System.Windows.Forms.Control.AutoSizeChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AutoSizeChanged
  nameWithType: Control.AutoSizeChanged
  fullName: System.Windows.Forms.Control.AutoSizeChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.Control.BackColor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackColor
  nameWithType: Control.BackColor
  fullName: System.Windows.Forms.Control.BackColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Windows.Forms.Control.BackColorChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackColorChanged
  nameWithType: Control.BackColorChanged
  fullName: System.Windows.Forms.Control.BackColorChanged
- uid: System.Windows.Forms.Control.BackgroundImage
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackgroundImage
  nameWithType: Control.BackgroundImage
  fullName: System.Windows.Forms.Control.BackgroundImage
- uid: System.Drawing.Image
  parent: System.Drawing
  isExternal: false
  name: Image
  nameWithType: Image
  fullName: System.Drawing.Image
- uid: System.Windows.Forms.Control.BackgroundImageChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackgroundImageChanged
  nameWithType: Control.BackgroundImageChanged
  fullName: System.Windows.Forms.Control.BackgroundImageChanged
- uid: System.Windows.Forms.Control.BackgroundImageLayout
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackgroundImageLayout
  nameWithType: Control.BackgroundImageLayout
  fullName: System.Windows.Forms.Control.BackgroundImageLayout
- uid: System.Windows.Forms.ImageLayout
  parent: System.Windows.Forms
  isExternal: false
  name: ImageLayout
  nameWithType: ImageLayout
  fullName: System.Windows.Forms.ImageLayout
- uid: System.Windows.Forms.Control.BackgroundImageLayoutChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackgroundImageLayoutChanged
  nameWithType: Control.BackgroundImageLayoutChanged
  fullName: System.Windows.Forms.Control.BackgroundImageLayoutChanged
- uid: System.Windows.Forms.Control.BeginInvoke(System.Delegate)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BeginInvoke(Delegate)
  nameWithType: Control.BeginInvoke(Delegate)
  fullName: System.Windows.Forms.Control.BeginInvoke(Delegate)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BeginInvoke(Delegate,Object[])
  nameWithType: Control.BeginInvoke(Delegate,Object[])
  fullName: System.Windows.Forms.Control.BeginInvoke(Delegate,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.Control.BindingContext
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BindingContext
  nameWithType: Control.BindingContext
  fullName: System.Windows.Forms.Control.BindingContext
- uid: System.Windows.Forms.BindingContext
  parent: System.Windows.Forms
  isExternal: false
  name: BindingContext
  nameWithType: BindingContext
  fullName: System.Windows.Forms.BindingContext
- uid: System.Windows.Forms.Control.BindingContextChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BindingContextChanged
  nameWithType: Control.BindingContextChanged
  fullName: System.Windows.Forms.Control.BindingContextChanged
- uid: System.Windows.Forms.Control.Bottom
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Bottom
  nameWithType: Control.Bottom
  fullName: System.Windows.Forms.Control.Bottom
- uid: System.Windows.Forms.Control.Bounds
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Bounds
  nameWithType: Control.Bounds
  fullName: System.Windows.Forms.Control.Bounds
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.Control.BringToFront
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BringToFront()
  nameWithType: Control.BringToFront()
  fullName: System.Windows.Forms.Control.BringToFront()
- uid: System.Windows.Forms.Control.CanEnableIme
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanEnableIme
  nameWithType: Control.CanEnableIme
  fullName: System.Windows.Forms.Control.CanEnableIme
- uid: System.Windows.Forms.Control.CanFocus
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanFocus
  nameWithType: Control.CanFocus
  fullName: System.Windows.Forms.Control.CanFocus
- uid: System.Windows.Forms.Control.CanRaiseEvents
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Control.CanRaiseEvents
  fullName: System.Windows.Forms.Control.CanRaiseEvents
- uid: System.Windows.Forms.Control.CanSelect
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanSelect
  nameWithType: Control.CanSelect
  fullName: System.Windows.Forms.Control.CanSelect
- uid: System.Windows.Forms.Control.Capture
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Capture
  nameWithType: Control.Capture
  fullName: System.Windows.Forms.Control.Capture
- uid: System.Windows.Forms.Control.CausesValidation
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CausesValidation
  nameWithType: Control.CausesValidation
  fullName: System.Windows.Forms.Control.CausesValidation
- uid: System.Windows.Forms.Control.CausesValidationChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CausesValidationChanged
  nameWithType: Control.CausesValidationChanged
  fullName: System.Windows.Forms.Control.CausesValidationChanged
- uid: System.Windows.Forms.Control.ChangeUICues
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ChangeUICues
  nameWithType: Control.ChangeUICues
  fullName: System.Windows.Forms.Control.ChangeUICues
- uid: System.Windows.Forms.UICuesEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: UICuesEventHandler
  nameWithType: UICuesEventHandler
  fullName: System.Windows.Forms.UICuesEventHandler
- uid: System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CheckForIllegalCrossThreadCalls
  nameWithType: Control.CheckForIllegalCrossThreadCalls
  fullName: System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls
- uid: System.Windows.Forms.Control.Click
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Click
  nameWithType: Control.Click
  fullName: System.Windows.Forms.Control.Click
- uid: System.Windows.Forms.Control.ClientRectangle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ClientRectangle
  nameWithType: Control.ClientRectangle
  fullName: System.Windows.Forms.Control.ClientRectangle
- uid: System.Windows.Forms.Control.ClientSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ClientSize
  nameWithType: Control.ClientSize
  fullName: System.Windows.Forms.Control.ClientSize
- uid: System.Drawing.Size
  parent: System.Drawing
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Windows.Forms.Control.ClientSizeChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ClientSizeChanged
  nameWithType: Control.ClientSizeChanged
  fullName: System.Windows.Forms.Control.ClientSizeChanged
- uid: System.Windows.Forms.Control.CompanyName
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CompanyName
  nameWithType: Control.CompanyName
  fullName: System.Windows.Forms.Control.CompanyName
- uid: System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Contains(Control)
  nameWithType: Control.Contains(Control)
  fullName: System.Windows.Forms.Control.Contains(Control)
- uid: System.Windows.Forms.Control.ContainsFocus
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContainsFocus
  nameWithType: Control.ContainsFocus
  fullName: System.Windows.Forms.Control.ContainsFocus
- uid: System.Windows.Forms.Control.ContextMenu
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContextMenu
  nameWithType: Control.ContextMenu
  fullName: System.Windows.Forms.Control.ContextMenu
- uid: System.Windows.Forms.ContextMenu
  parent: System.Windows.Forms
  isExternal: false
  name: ContextMenu
  nameWithType: ContextMenu
  fullName: System.Windows.Forms.ContextMenu
- uid: System.Windows.Forms.Control.ContextMenuChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContextMenuChanged
  nameWithType: Control.ContextMenuChanged
  fullName: System.Windows.Forms.Control.ContextMenuChanged
- uid: System.Windows.Forms.Control.ContextMenuStrip
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContextMenuStrip
  nameWithType: Control.ContextMenuStrip
  fullName: System.Windows.Forms.Control.ContextMenuStrip
- uid: System.Windows.Forms.ContextMenuStrip
  parent: System.Windows.Forms
  isExternal: false
  name: ContextMenuStrip
  nameWithType: ContextMenuStrip
  fullName: System.Windows.Forms.ContextMenuStrip
- uid: System.Windows.Forms.Control.ContextMenuStripChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContextMenuStripChanged
  nameWithType: Control.ContextMenuStripChanged
  fullName: System.Windows.Forms.Control.ContextMenuStripChanged
- uid: System.Windows.Forms.Control.ControlAdded
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ControlAdded
  nameWithType: Control.ControlAdded
  fullName: System.Windows.Forms.Control.ControlAdded
- uid: System.Windows.Forms.ControlEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: ControlEventHandler
  nameWithType: ControlEventHandler
  fullName: System.Windows.Forms.ControlEventHandler
- uid: System.Windows.Forms.Control.ControlRemoved
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ControlRemoved
  nameWithType: Control.ControlRemoved
  fullName: System.Windows.Forms.Control.ControlRemoved
- uid: System.Windows.Forms.Control.Controls
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Controls
  nameWithType: Control.Controls
  fullName: System.Windows.Forms.Control.Controls
- uid: System.Windows.Forms.Control.ControlCollection
  parent: System.Windows.Forms
  isExternal: false
  name: Control+ControlCollection
  nameWithType: Control+ControlCollection
  fullName: System.Windows.Forms.Control+ControlCollection
- uid: System.Windows.Forms.Control.CreateAccessibilityInstance
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateAccessibilityInstance()
  nameWithType: Control.CreateAccessibilityInstance()
  fullName: System.Windows.Forms.Control.CreateAccessibilityInstance()
- uid: System.Windows.Forms.Control.CreateControl
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateControl()
  nameWithType: Control.CreateControl()
  fullName: System.Windows.Forms.Control.CreateControl()
- uid: System.Windows.Forms.Control.CreateControlsInstance
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateControlsInstance()
  nameWithType: Control.CreateControlsInstance()
  fullName: System.Windows.Forms.Control.CreateControlsInstance()
- uid: System.Windows.Forms.Control.Created
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Created
  nameWithType: Control.Created
  fullName: System.Windows.Forms.Control.Created
- uid: System.Windows.Forms.Control.CreateGraphics
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateGraphics()
  nameWithType: Control.CreateGraphics()
  fullName: System.Windows.Forms.Control.CreateGraphics()
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Windows.Forms.Control.CreateHandle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateHandle()
  nameWithType: Control.CreateHandle()
  fullName: System.Windows.Forms.Control.CreateHandle()
- uid: System.Windows.Forms.Control.CreateParams
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateParams
  nameWithType: Control.CreateParams
  fullName: System.Windows.Forms.Control.CreateParams
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.Control.Cursor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Cursor
  nameWithType: Control.Cursor
  fullName: System.Windows.Forms.Control.Cursor
- uid: System.Windows.Forms.Cursor
  parent: System.Windows.Forms
  isExternal: false
  name: Cursor
  nameWithType: Cursor
  fullName: System.Windows.Forms.Cursor
- uid: System.Windows.Forms.Control.CursorChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CursorChanged
  nameWithType: Control.CursorChanged
  fullName: System.Windows.Forms.Control.CursorChanged
- uid: System.Windows.Forms.Control.DataBindings
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DataBindings
  nameWithType: Control.DataBindings
  fullName: System.Windows.Forms.Control.DataBindings
- uid: System.Windows.Forms.ControlBindingsCollection
  parent: System.Windows.Forms
  isExternal: false
  name: ControlBindingsCollection
  nameWithType: ControlBindingsCollection
  fullName: System.Windows.Forms.ControlBindingsCollection
- uid: System.Windows.Forms.Control.DefaultBackColor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultBackColor
  nameWithType: Control.DefaultBackColor
  fullName: System.Windows.Forms.Control.DefaultBackColor
- uid: System.Windows.Forms.Control.DefaultCursor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultCursor
  nameWithType: Control.DefaultCursor
  fullName: System.Windows.Forms.Control.DefaultCursor
- uid: System.Windows.Forms.Control.DefaultFont
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultFont
  nameWithType: Control.DefaultFont
  fullName: System.Windows.Forms.Control.DefaultFont
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Windows.Forms.Control.DefaultForeColor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultForeColor
  nameWithType: Control.DefaultForeColor
  fullName: System.Windows.Forms.Control.DefaultForeColor
- uid: System.Windows.Forms.Control.DefaultImeMode
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultImeMode
  nameWithType: Control.DefaultImeMode
  fullName: System.Windows.Forms.Control.DefaultImeMode
- uid: System.Windows.Forms.ImeMode
  parent: System.Windows.Forms
  isExternal: false
  name: ImeMode
  nameWithType: ImeMode
  fullName: System.Windows.Forms.ImeMode
- uid: System.Windows.Forms.Control.DefaultMargin
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultMargin
  nameWithType: Control.DefaultMargin
  fullName: System.Windows.Forms.Control.DefaultMargin
- uid: System.Windows.Forms.Padding
  parent: System.Windows.Forms
  isExternal: false
  name: Padding
  nameWithType: Padding
  fullName: System.Windows.Forms.Padding
- uid: System.Windows.Forms.Control.DefaultMaximumSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultMaximumSize
  nameWithType: Control.DefaultMaximumSize
  fullName: System.Windows.Forms.Control.DefaultMaximumSize
- uid: System.Windows.Forms.Control.DefaultMinimumSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultMinimumSize
  nameWithType: Control.DefaultMinimumSize
  fullName: System.Windows.Forms.Control.DefaultMinimumSize
- uid: System.Windows.Forms.Control.DefaultPadding
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultPadding
  nameWithType: Control.DefaultPadding
  fullName: System.Windows.Forms.Control.DefaultPadding
- uid: System.Windows.Forms.Control.DefaultSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultSize
  nameWithType: Control.DefaultSize
  fullName: System.Windows.Forms.Control.DefaultSize
- uid: System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefWndProc(Message)
  nameWithType: Control.DefWndProc(Message)
  fullName: System.Windows.Forms.Control.DefWndProc(Message)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.Control.DestroyHandle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DestroyHandle()
  nameWithType: Control.DestroyHandle()
  fullName: System.Windows.Forms.Control.DestroyHandle()
- uid: System.Windows.Forms.Control.DisplayRectangle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DisplayRectangle
  nameWithType: Control.DisplayRectangle
  fullName: System.Windows.Forms.Control.DisplayRectangle
- uid: System.Windows.Forms.Control.Dispose(System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Control.Dispose(Boolean)
  fullName: System.Windows.Forms.Control.Dispose(Boolean)
- uid: System.Windows.Forms.Control.Disposing
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Disposing
  nameWithType: Control.Disposing
  fullName: System.Windows.Forms.Control.Disposing
- uid: System.Windows.Forms.Control.Dock
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Dock
  nameWithType: Control.Dock
  fullName: System.Windows.Forms.Control.Dock
- uid: System.Windows.Forms.DockStyle
  parent: System.Windows.Forms
  isExternal: false
  name: DockStyle
  nameWithType: DockStyle
  fullName: System.Windows.Forms.DockStyle
- uid: System.Windows.Forms.Control.DockChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DockChanged
  nameWithType: Control.DockChanged
  fullName: System.Windows.Forms.Control.DockChanged
- uid: System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DoDragDrop(Object,DragDropEffects)
  nameWithType: Control.DoDragDrop(Object,DragDropEffects)
  fullName: System.Windows.Forms.Control.DoDragDrop(Object,DragDropEffects)
- uid: System.Windows.Forms.DragDropEffects
  parent: System.Windows.Forms
  isExternal: false
  name: DragDropEffects
  nameWithType: DragDropEffects
  fullName: System.Windows.Forms.DragDropEffects
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.Control.DoubleBuffered
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DoubleBuffered
  nameWithType: Control.DoubleBuffered
  fullName: System.Windows.Forms.Control.DoubleBuffered
- uid: System.Windows.Forms.Control.DoubleClick
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DoubleClick
  nameWithType: Control.DoubleClick
  fullName: System.Windows.Forms.Control.DoubleClick
- uid: System.Windows.Forms.Control.DragDrop
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DragDrop
  nameWithType: Control.DragDrop
  fullName: System.Windows.Forms.Control.DragDrop
- uid: System.Windows.Forms.DragEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.Forms.DragEventHandler
- uid: System.Windows.Forms.Control.DragEnter
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DragEnter
  nameWithType: Control.DragEnter
  fullName: System.Windows.Forms.Control.DragEnter
- uid: System.Windows.Forms.Control.DragLeave
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DragLeave
  nameWithType: Control.DragLeave
  fullName: System.Windows.Forms.Control.DragLeave
- uid: System.Windows.Forms.Control.DragOver
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DragOver
  nameWithType: Control.DragOver
  fullName: System.Windows.Forms.Control.DragOver
- uid: System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DrawToBitmap(Bitmap,Rectangle)
  nameWithType: Control.DrawToBitmap(Bitmap,Rectangle)
  fullName: System.Windows.Forms.Control.DrawToBitmap(Bitmap,Rectangle)
- uid: System.Drawing.Bitmap
  parent: System.Drawing
  isExternal: false
  name: Bitmap
  nameWithType: Bitmap
  fullName: System.Drawing.Bitmap
- uid: System.Windows.Forms.Control.Enabled
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Enabled
  nameWithType: Control.Enabled
  fullName: System.Windows.Forms.Control.Enabled
- uid: System.Windows.Forms.Control.EnabledChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: EnabledChanged
  nameWithType: Control.EnabledChanged
  fullName: System.Windows.Forms.Control.EnabledChanged
- uid: System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: Control.EndInvoke(IAsyncResult)
  fullName: System.Windows.Forms.Control.EndInvoke(IAsyncResult)
- uid: System.Windows.Forms.Control.Enter
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Enter
  nameWithType: Control.Enter
  fullName: System.Windows.Forms.Control.Enter
- uid: System.Windows.Forms.Control.FindForm
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FindForm()
  nameWithType: Control.FindForm()
  fullName: System.Windows.Forms.Control.FindForm()
- uid: System.Windows.Forms.Form
  parent: System.Windows.Forms
  isExternal: false
  name: Form
  nameWithType: Form
  fullName: System.Windows.Forms.Form
- uid: System.Windows.Forms.Control.Focus
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Focus()
  nameWithType: Control.Focus()
  fullName: System.Windows.Forms.Control.Focus()
- uid: System.Windows.Forms.Control.Focused
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Focused
  nameWithType: Control.Focused
  fullName: System.Windows.Forms.Control.Focused
- uid: System.Windows.Forms.Control.Font
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Font
  nameWithType: Control.Font
  fullName: System.Windows.Forms.Control.Font
- uid: System.Windows.Forms.Control.FontChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FontChanged
  nameWithType: Control.FontChanged
  fullName: System.Windows.Forms.Control.FontChanged
- uid: System.Windows.Forms.Control.FontHeight
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FontHeight
  nameWithType: Control.FontHeight
  fullName: System.Windows.Forms.Control.FontHeight
- uid: System.Windows.Forms.Control.ForeColor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ForeColor
  nameWithType: Control.ForeColor
  fullName: System.Windows.Forms.Control.ForeColor
- uid: System.Windows.Forms.Control.ForeColorChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ForeColorChanged
  nameWithType: Control.ForeColorChanged
  fullName: System.Windows.Forms.Control.ForeColorChanged
- uid: System.Windows.Forms.Control.FromChildHandle(System.IntPtr)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FromChildHandle(IntPtr)
  nameWithType: Control.FromChildHandle(IntPtr)
  fullName: System.Windows.Forms.Control.FromChildHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.Control.FromHandle(System.IntPtr)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FromHandle(IntPtr)
  nameWithType: Control.FromHandle(IntPtr)
  fullName: System.Windows.Forms.Control.FromHandle(IntPtr)
- uid: System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetAccessibilityObjectById(Int32)
  nameWithType: Control.GetAccessibilityObjectById(Int32)
  fullName: System.Windows.Forms.Control.GetAccessibilityObjectById(Int32)
- uid: System.Windows.Forms.Control.GetAutoSizeMode
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetAutoSizeMode()
  nameWithType: Control.GetAutoSizeMode()
  fullName: System.Windows.Forms.Control.GetAutoSizeMode()
- uid: System.Windows.Forms.AutoSizeMode
  parent: System.Windows.Forms
  isExternal: false
  name: AutoSizeMode
  nameWithType: AutoSizeMode
  fullName: System.Windows.Forms.AutoSizeMode
- uid: System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetChildAtPoint(Point)
  nameWithType: Control.GetChildAtPoint(Point)
  fullName: System.Windows.Forms.Control.GetChildAtPoint(Point)
- uid: System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetChildAtPoint(Point,GetChildAtPointSkip)
  nameWithType: Control.GetChildAtPoint(Point,GetChildAtPointSkip)
  fullName: System.Windows.Forms.Control.GetChildAtPoint(Point,GetChildAtPointSkip)
- uid: System.Windows.Forms.GetChildAtPointSkip
  parent: System.Windows.Forms
  isExternal: false
  name: GetChildAtPointSkip
  nameWithType: GetChildAtPointSkip
  fullName: System.Windows.Forms.GetChildAtPointSkip
- uid: System.Windows.Forms.Control.GetContainerControl
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetContainerControl()
  nameWithType: Control.GetContainerControl()
  fullName: System.Windows.Forms.Control.GetContainerControl()
- uid: System.Windows.Forms.IContainerControl
  parent: System.Windows.Forms
  isExternal: false
  name: IContainerControl
  nameWithType: IContainerControl
  fullName: System.Windows.Forms.IContainerControl
- uid: System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetNextControl(Control,Boolean)
  nameWithType: Control.GetNextControl(Control,Boolean)
  fullName: System.Windows.Forms.Control.GetNextControl(Control,Boolean)
- uid: System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetPreferredSize(Size)
  nameWithType: Control.GetPreferredSize(Size)
  fullName: System.Windows.Forms.Control.GetPreferredSize(Size)
- uid: System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetScaledBounds(Rectangle,SizeF,BoundsSpecified)
  nameWithType: Control.GetScaledBounds(Rectangle,SizeF,BoundsSpecified)
  fullName: System.Windows.Forms.Control.GetScaledBounds(Rectangle,SizeF,BoundsSpecified)
- uid: System.Drawing.SizeF
  parent: System.Drawing
  isExternal: false
  name: SizeF
  nameWithType: SizeF
  fullName: System.Drawing.SizeF
- uid: System.Windows.Forms.BoundsSpecified
  parent: System.Windows.Forms
  isExternal: false
  name: BoundsSpecified
  nameWithType: BoundsSpecified
  fullName: System.Windows.Forms.BoundsSpecified
- uid: System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetStyle(ControlStyles)
  nameWithType: Control.GetStyle(ControlStyles)
  fullName: System.Windows.Forms.Control.GetStyle(ControlStyles)
- uid: System.Windows.Forms.ControlStyles
  parent: System.Windows.Forms
  isExternal: false
  name: ControlStyles
  nameWithType: ControlStyles
  fullName: System.Windows.Forms.ControlStyles
- uid: System.Windows.Forms.Control.GetTopLevel
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetTopLevel()
  nameWithType: Control.GetTopLevel()
  fullName: System.Windows.Forms.Control.GetTopLevel()
- uid: System.Windows.Forms.Control.GiveFeedback
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GiveFeedback
  nameWithType: Control.GiveFeedback
  fullName: System.Windows.Forms.Control.GiveFeedback
- uid: System.Windows.Forms.GiveFeedbackEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.Forms.GiveFeedbackEventHandler
- uid: System.Windows.Forms.Control.GotFocus
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GotFocus
  nameWithType: Control.GotFocus
  fullName: System.Windows.Forms.Control.GotFocus
- uid: System.Windows.Forms.Control.Handle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Handle
  nameWithType: Control.Handle
  fullName: System.Windows.Forms.Control.Handle
- uid: System.Windows.Forms.Control.HandleCreated
  parent: System.Windows.Forms.Control
  isExternal: false
  name: HandleCreated
  nameWithType: Control.HandleCreated
  fullName: System.Windows.Forms.Control.HandleCreated
- uid: System.Windows.Forms.Control.HandleDestroyed
  parent: System.Windows.Forms.Control
  isExternal: false
  name: HandleDestroyed
  nameWithType: Control.HandleDestroyed
  fullName: System.Windows.Forms.Control.HandleDestroyed
- uid: System.Windows.Forms.Control.HasChildren
  parent: System.Windows.Forms.Control
  isExternal: false
  name: HasChildren
  nameWithType: Control.HasChildren
  fullName: System.Windows.Forms.Control.HasChildren
- uid: System.Windows.Forms.Control.Height
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Height
  nameWithType: Control.Height
  fullName: System.Windows.Forms.Control.Height
- uid: System.Windows.Forms.Control.HelpRequested
  parent: System.Windows.Forms.Control
  isExternal: false
  name: HelpRequested
  nameWithType: Control.HelpRequested
  fullName: System.Windows.Forms.Control.HelpRequested
- uid: System.Windows.Forms.HelpEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HelpEventHandler
  nameWithType: HelpEventHandler
  fullName: System.Windows.Forms.HelpEventHandler
- uid: System.Windows.Forms.Control.Hide
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Hide()
  nameWithType: Control.Hide()
  fullName: System.Windows.Forms.Control.Hide()
- uid: System.Windows.Forms.Control.ImeMode
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ImeMode
  nameWithType: Control.ImeMode
  fullName: System.Windows.Forms.Control.ImeMode
- uid: System.Windows.Forms.Control.ImeModeBase
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ImeModeBase
  nameWithType: Control.ImeModeBase
  fullName: System.Windows.Forms.Control.ImeModeBase
- uid: System.Windows.Forms.Control.ImeModeChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ImeModeChanged
  nameWithType: Control.ImeModeChanged
  fullName: System.Windows.Forms.Control.ImeModeChanged
- uid: System.Windows.Forms.Control.InitLayout
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InitLayout()
  nameWithType: Control.InitLayout()
  fullName: System.Windows.Forms.Control.InitLayout()
- uid: System.Windows.Forms.Control.Invalidate
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate()
  nameWithType: Control.Invalidate()
  fullName: System.Windows.Forms.Control.Invalidate()
- uid: System.Windows.Forms.Control.Invalidate(System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate(Boolean)
  nameWithType: Control.Invalidate(Boolean)
  fullName: System.Windows.Forms.Control.Invalidate(Boolean)
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate(Rectangle)
  nameWithType: Control.Invalidate(Rectangle)
  fullName: System.Windows.Forms.Control.Invalidate(Rectangle)
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Region)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate(Region)
  nameWithType: Control.Invalidate(Region)
  fullName: System.Windows.Forms.Control.Invalidate(Region)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate(Rectangle,Boolean)
  nameWithType: Control.Invalidate(Rectangle,Boolean)
  fullName: System.Windows.Forms.Control.Invalidate(Rectangle,Boolean)
- uid: System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate(Region,Boolean)
  nameWithType: Control.Invalidate(Region,Boolean)
  fullName: System.Windows.Forms.Control.Invalidate(Region,Boolean)
- uid: System.Windows.Forms.Control.Invalidated
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidated
  nameWithType: Control.Invalidated
  fullName: System.Windows.Forms.Control.Invalidated
- uid: System.Windows.Forms.InvalidateEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: InvalidateEventHandler
  nameWithType: InvalidateEventHandler
  fullName: System.Windows.Forms.InvalidateEventHandler
- uid: System.Windows.Forms.Control.Invoke(System.Delegate)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invoke(Delegate)
  nameWithType: Control.Invoke(Delegate)
  fullName: System.Windows.Forms.Control.Invoke(Delegate)
- uid: System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invoke(Delegate,Object[])
  nameWithType: Control.Invoke(Delegate,Object[])
  fullName: System.Windows.Forms.Control.Invoke(Delegate,Object[])
- uid: System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeGotFocus(Control,EventArgs)
  nameWithType: Control.InvokeGotFocus(Control,EventArgs)
  fullName: System.Windows.Forms.Control.InvokeGotFocus(Control,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeLostFocus(Control,EventArgs)
  nameWithType: Control.InvokeLostFocus(Control,EventArgs)
  fullName: System.Windows.Forms.Control.InvokeLostFocus(Control,EventArgs)
- uid: System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeOnClick(Control,EventArgs)
  nameWithType: Control.InvokeOnClick(Control,EventArgs)
  fullName: System.Windows.Forms.Control.InvokeOnClick(Control,EventArgs)
- uid: System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokePaint(Control,PaintEventArgs)
  nameWithType: Control.InvokePaint(Control,PaintEventArgs)
  fullName: System.Windows.Forms.Control.InvokePaint(Control,PaintEventArgs)
- uid: System.Windows.Forms.PaintEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: PaintEventArgs
  nameWithType: PaintEventArgs
  fullName: System.Windows.Forms.PaintEventArgs
- uid: System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokePaintBackground(Control,PaintEventArgs)
  nameWithType: Control.InvokePaintBackground(Control,PaintEventArgs)
  fullName: System.Windows.Forms.Control.InvokePaintBackground(Control,PaintEventArgs)
- uid: System.Windows.Forms.Control.InvokeRequired
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeRequired
  nameWithType: Control.InvokeRequired
  fullName: System.Windows.Forms.Control.InvokeRequired
- uid: System.Windows.Forms.Control.IsAccessible
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsAccessible
  nameWithType: Control.IsAccessible
  fullName: System.Windows.Forms.Control.IsAccessible
- uid: System.Windows.Forms.Control.IsDisposed
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsDisposed
  nameWithType: Control.IsDisposed
  fullName: System.Windows.Forms.Control.IsDisposed
- uid: System.Windows.Forms.Control.IsHandleCreated
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsHandleCreated
  nameWithType: Control.IsHandleCreated
  fullName: System.Windows.Forms.Control.IsHandleCreated
- uid: System.Windows.Forms.Control.IsInputChar(System.Char)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsInputChar(Char)
  nameWithType: Control.IsInputChar(Char)
  fullName: System.Windows.Forms.Control.IsInputChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsInputKey(Keys)
  nameWithType: Control.IsInputKey(Keys)
  fullName: System.Windows.Forms.Control.IsInputKey(Keys)
- uid: System.Windows.Forms.Keys
  parent: System.Windows.Forms
  isExternal: false
  name: Keys
  nameWithType: Keys
  fullName: System.Windows.Forms.Keys
- uid: System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsKeyLocked(Keys)
  nameWithType: Control.IsKeyLocked(Keys)
  fullName: System.Windows.Forms.Control.IsKeyLocked(Keys)
- uid: System.Windows.Forms.Control.IsMirrored
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsMirrored
  nameWithType: Control.IsMirrored
  fullName: System.Windows.Forms.Control.IsMirrored
- uid: System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsMnemonic(Char,String)
  nameWithType: Control.IsMnemonic(Char,String)
  fullName: System.Windows.Forms.Control.IsMnemonic(Char,String)
- uid: System.Windows.Forms.Control.KeyDown
  parent: System.Windows.Forms.Control
  isExternal: false
  name: KeyDown
  nameWithType: Control.KeyDown
  fullName: System.Windows.Forms.Control.KeyDown
- uid: System.Windows.Forms.KeyEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Forms.KeyEventHandler
- uid: System.Windows.Forms.Control.KeyPress
  parent: System.Windows.Forms.Control
  isExternal: false
  name: KeyPress
  nameWithType: Control.KeyPress
  fullName: System.Windows.Forms.Control.KeyPress
- uid: System.Windows.Forms.KeyPressEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: KeyPressEventHandler
  nameWithType: KeyPressEventHandler
  fullName: System.Windows.Forms.KeyPressEventHandler
- uid: System.Windows.Forms.Control.KeyUp
  parent: System.Windows.Forms.Control
  isExternal: false
  name: KeyUp
  nameWithType: Control.KeyUp
  fullName: System.Windows.Forms.Control.KeyUp
- uid: System.Windows.Forms.Control.Layout
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Layout
  nameWithType: Control.Layout
  fullName: System.Windows.Forms.Control.Layout
- uid: System.Windows.Forms.LayoutEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: LayoutEventHandler
  nameWithType: LayoutEventHandler
  fullName: System.Windows.Forms.LayoutEventHandler
- uid: System.Windows.Forms.Control.LayoutEngine
  parent: System.Windows.Forms.Control
  isExternal: false
  name: LayoutEngine
  nameWithType: Control.LayoutEngine
  fullName: System.Windows.Forms.Control.LayoutEngine
- uid: System.Windows.Forms.Layout.LayoutEngine
  parent: System.Windows.Forms.Layout
  isExternal: false
  name: LayoutEngine
  nameWithType: LayoutEngine
  fullName: System.Windows.Forms.Layout.LayoutEngine
- uid: System.Windows.Forms.Control.Leave
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Leave
  nameWithType: Control.Leave
  fullName: System.Windows.Forms.Control.Leave
- uid: System.Windows.Forms.Control.Left
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Left
  nameWithType: Control.Left
  fullName: System.Windows.Forms.Control.Left
- uid: System.Windows.Forms.Control.Location
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Location
  nameWithType: Control.Location
  fullName: System.Windows.Forms.Control.Location
- uid: System.Windows.Forms.Control.LocationChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: LocationChanged
  nameWithType: Control.LocationChanged
  fullName: System.Windows.Forms.Control.LocationChanged
- uid: System.Windows.Forms.Control.LostFocus
  parent: System.Windows.Forms.Control
  isExternal: false
  name: LostFocus
  nameWithType: Control.LostFocus
  fullName: System.Windows.Forms.Control.LostFocus
- uid: System.Windows.Forms.Control.Margin
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Margin
  nameWithType: Control.Margin
  fullName: System.Windows.Forms.Control.Margin
- uid: System.Windows.Forms.Control.MarginChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MarginChanged
  nameWithType: Control.MarginChanged
  fullName: System.Windows.Forms.Control.MarginChanged
- uid: System.Windows.Forms.Control.MaximumSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MaximumSize
  nameWithType: Control.MaximumSize
  fullName: System.Windows.Forms.Control.MaximumSize
- uid: System.Windows.Forms.Control.MinimumSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MinimumSize
  nameWithType: Control.MinimumSize
  fullName: System.Windows.Forms.Control.MinimumSize
- uid: System.Windows.Forms.Control.ModifierKeys
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ModifierKeys
  nameWithType: Control.ModifierKeys
  fullName: System.Windows.Forms.Control.ModifierKeys
- uid: System.Windows.Forms.Control.MouseButtons
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseButtons
  nameWithType: Control.MouseButtons
  fullName: System.Windows.Forms.Control.MouseButtons
- uid: System.Windows.Forms.MouseButtons
  parent: System.Windows.Forms
  isExternal: false
  name: MouseButtons
  nameWithType: MouseButtons
  fullName: System.Windows.Forms.MouseButtons
- uid: System.Windows.Forms.Control.MouseCaptureChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseCaptureChanged
  nameWithType: Control.MouseCaptureChanged
  fullName: System.Windows.Forms.Control.MouseCaptureChanged
- uid: System.Windows.Forms.Control.MouseClick
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseClick
  nameWithType: Control.MouseClick
  fullName: System.Windows.Forms.Control.MouseClick
- uid: System.Windows.Forms.MouseEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Forms.MouseEventHandler
- uid: System.Windows.Forms.Control.MouseDoubleClick
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseDoubleClick
  nameWithType: Control.MouseDoubleClick
  fullName: System.Windows.Forms.Control.MouseDoubleClick
- uid: System.Windows.Forms.Control.MouseDown
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseDown
  nameWithType: Control.MouseDown
  fullName: System.Windows.Forms.Control.MouseDown
- uid: System.Windows.Forms.Control.MouseEnter
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseEnter
  nameWithType: Control.MouseEnter
  fullName: System.Windows.Forms.Control.MouseEnter
- uid: System.Windows.Forms.Control.MouseHover
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseHover
  nameWithType: Control.MouseHover
  fullName: System.Windows.Forms.Control.MouseHover
- uid: System.Windows.Forms.Control.MouseLeave
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseLeave
  nameWithType: Control.MouseLeave
  fullName: System.Windows.Forms.Control.MouseLeave
- uid: System.Windows.Forms.Control.MouseMove
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseMove
  nameWithType: Control.MouseMove
  fullName: System.Windows.Forms.Control.MouseMove
- uid: System.Windows.Forms.Control.MousePosition
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MousePosition
  nameWithType: Control.MousePosition
  fullName: System.Windows.Forms.Control.MousePosition
- uid: System.Windows.Forms.Control.MouseUp
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseUp
  nameWithType: Control.MouseUp
  fullName: System.Windows.Forms.Control.MouseUp
- uid: System.Windows.Forms.Control.MouseWheel
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseWheel
  nameWithType: Control.MouseWheel
  fullName: System.Windows.Forms.Control.MouseWheel
- uid: System.Windows.Forms.Control.Move
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Move
  nameWithType: Control.Move
  fullName: System.Windows.Forms.Control.Move
- uid: System.Windows.Forms.Control.Name
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Name
  nameWithType: Control.Name
  fullName: System.Windows.Forms.Control.Name
- uid: System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: NotifyInvalidate(Rectangle)
  nameWithType: Control.NotifyInvalidate(Rectangle)
  fullName: System.Windows.Forms.Control.NotifyInvalidate(Rectangle)
- uid: System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnAutoSizeChanged(EventArgs)
  nameWithType: Control.OnAutoSizeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnAutoSizeChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBackColorChanged(EventArgs)
  nameWithType: Control.OnBackColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBackColorChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBackgroundImageChanged(EventArgs)
  nameWithType: Control.OnBackgroundImageChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBackgroundImageChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBackgroundImageLayoutChanged(EventArgs)
  nameWithType: Control.OnBackgroundImageLayoutChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBindingContextChanged(EventArgs)
  nameWithType: Control.OnBindingContextChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnBindingContextChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnCausesValidationChanged(EventArgs)
  nameWithType: Control.OnCausesValidationChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnCausesValidationChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnChangeUICues(UICuesEventArgs)
  nameWithType: Control.OnChangeUICues(UICuesEventArgs)
  fullName: System.Windows.Forms.Control.OnChangeUICues(UICuesEventArgs)
- uid: System.Windows.Forms.UICuesEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: UICuesEventArgs
  nameWithType: UICuesEventArgs
  fullName: System.Windows.Forms.UICuesEventArgs
- uid: System.Windows.Forms.Control.OnClick(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnClick(EventArgs)
  nameWithType: Control.OnClick(EventArgs)
  fullName: System.Windows.Forms.Control.OnClick(EventArgs)
- uid: System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnClientSizeChanged(EventArgs)
  nameWithType: Control.OnClientSizeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnClientSizeChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnContextMenuChanged(EventArgs)
  nameWithType: Control.OnContextMenuChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnContextMenuChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnContextMenuStripChanged(EventArgs)
  nameWithType: Control.OnContextMenuStripChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnContextMenuStripChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnControlAdded(ControlEventArgs)
  nameWithType: Control.OnControlAdded(ControlEventArgs)
  fullName: System.Windows.Forms.Control.OnControlAdded(ControlEventArgs)
- uid: System.Windows.Forms.ControlEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: ControlEventArgs
  nameWithType: ControlEventArgs
  fullName: System.Windows.Forms.ControlEventArgs
- uid: System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnControlRemoved(ControlEventArgs)
  nameWithType: Control.OnControlRemoved(ControlEventArgs)
  fullName: System.Windows.Forms.Control.OnControlRemoved(ControlEventArgs)
- uid: System.Windows.Forms.Control.OnCreateControl
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnCreateControl()
  nameWithType: Control.OnCreateControl()
  fullName: System.Windows.Forms.Control.OnCreateControl()
- uid: System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnCursorChanged(EventArgs)
  nameWithType: Control.OnCursorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnCursorChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnDockChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDockChanged(EventArgs)
  nameWithType: Control.OnDockChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnDockChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDoubleClick(EventArgs)
  nameWithType: Control.OnDoubleClick(EventArgs)
  fullName: System.Windows.Forms.Control.OnDoubleClick(EventArgs)
- uid: System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragDrop(DragEventArgs)
  nameWithType: Control.OnDragDrop(DragEventArgs)
  fullName: System.Windows.Forms.Control.OnDragDrop(DragEventArgs)
- uid: System.Windows.Forms.DragEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.Forms.DragEventArgs
- uid: System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: Control.OnDragEnter(DragEventArgs)
  fullName: System.Windows.Forms.Control.OnDragEnter(DragEventArgs)
- uid: System.Windows.Forms.Control.OnDragLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragLeave(EventArgs)
  nameWithType: Control.OnDragLeave(EventArgs)
  fullName: System.Windows.Forms.Control.OnDragLeave(EventArgs)
- uid: System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: Control.OnDragOver(DragEventArgs)
  fullName: System.Windows.Forms.Control.OnDragOver(DragEventArgs)
- uid: System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnEnabledChanged(EventArgs)
  nameWithType: Control.OnEnabledChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnEnabledChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnEnter(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnEnter(EventArgs)
  nameWithType: Control.OnEnter(EventArgs)
  fullName: System.Windows.Forms.Control.OnEnter(EventArgs)
- uid: System.Windows.Forms.Control.OnFontChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnFontChanged(EventArgs)
  nameWithType: Control.OnFontChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnFontChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnForeColorChanged(EventArgs)
  nameWithType: Control.OnForeColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnForeColorChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: Control.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.Forms.Control.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.Forms.GiveFeedbackEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.Forms.GiveFeedbackEventArgs
- uid: System.Windows.Forms.Control.OnGotFocus(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnGotFocus(EventArgs)
  nameWithType: Control.OnGotFocus(EventArgs)
  fullName: System.Windows.Forms.Control.OnGotFocus(EventArgs)
- uid: System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnHandleCreated(EventArgs)
  nameWithType: Control.OnHandleCreated(EventArgs)
  fullName: System.Windows.Forms.Control.OnHandleCreated(EventArgs)
- uid: System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnHandleDestroyed(EventArgs)
  nameWithType: Control.OnHandleDestroyed(EventArgs)
  fullName: System.Windows.Forms.Control.OnHandleDestroyed(EventArgs)
- uid: System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnHelpRequested(HelpEventArgs)
  nameWithType: Control.OnHelpRequested(HelpEventArgs)
  fullName: System.Windows.Forms.Control.OnHelpRequested(HelpEventArgs)
- uid: System.Windows.Forms.HelpEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: HelpEventArgs
  nameWithType: HelpEventArgs
  fullName: System.Windows.Forms.HelpEventArgs
- uid: System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnImeModeChanged(EventArgs)
  nameWithType: Control.OnImeModeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnImeModeChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnInvalidated(InvalidateEventArgs)
  nameWithType: Control.OnInvalidated(InvalidateEventArgs)
  fullName: System.Windows.Forms.Control.OnInvalidated(InvalidateEventArgs)
- uid: System.Windows.Forms.InvalidateEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: InvalidateEventArgs
  nameWithType: InvalidateEventArgs
  fullName: System.Windows.Forms.InvalidateEventArgs
- uid: System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: Control.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.Forms.Control.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Forms.KeyEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Forms.KeyEventArgs
- uid: System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnKeyPress(KeyPressEventArgs)
  nameWithType: Control.OnKeyPress(KeyPressEventArgs)
  fullName: System.Windows.Forms.Control.OnKeyPress(KeyPressEventArgs)
- uid: System.Windows.Forms.KeyPressEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: KeyPressEventArgs
  nameWithType: KeyPressEventArgs
  fullName: System.Windows.Forms.KeyPressEventArgs
- uid: System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: Control.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.Forms.Control.OnKeyUp(KeyEventArgs)
- uid: System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLayout(LayoutEventArgs)
  nameWithType: Control.OnLayout(LayoutEventArgs)
  fullName: System.Windows.Forms.Control.OnLayout(LayoutEventArgs)
- uid: System.Windows.Forms.LayoutEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: LayoutEventArgs
  nameWithType: LayoutEventArgs
  fullName: System.Windows.Forms.LayoutEventArgs
- uid: System.Windows.Forms.Control.OnLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLeave(EventArgs)
  nameWithType: Control.OnLeave(EventArgs)
  fullName: System.Windows.Forms.Control.OnLeave(EventArgs)
- uid: System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLocationChanged(EventArgs)
  nameWithType: Control.OnLocationChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnLocationChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnLostFocus(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLostFocus(EventArgs)
  nameWithType: Control.OnLostFocus(EventArgs)
  fullName: System.Windows.Forms.Control.OnLostFocus(EventArgs)
- uid: System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMarginChanged(EventArgs)
  nameWithType: Control.OnMarginChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnMarginChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseCaptureChanged(EventArgs)
  nameWithType: Control.OnMouseCaptureChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseCaptureChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseClick(MouseEventArgs)
  nameWithType: Control.OnMouseClick(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseClick(MouseEventArgs)
- uid: System.Windows.Forms.MouseEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Forms.MouseEventArgs
- uid: System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseDoubleClick(MouseEventArgs)
  nameWithType: Control.OnMouseDoubleClick(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseDoubleClick(MouseEventArgs)
- uid: System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseDown(MouseEventArgs)
  nameWithType: Control.OnMouseDown(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseDown(MouseEventArgs)
- uid: System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseEnter(EventArgs)
  nameWithType: Control.OnMouseEnter(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseEnter(EventArgs)
- uid: System.Windows.Forms.Control.OnMouseHover(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseHover(EventArgs)
  nameWithType: Control.OnMouseHover(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseHover(EventArgs)
- uid: System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseLeave(EventArgs)
  nameWithType: Control.OnMouseLeave(EventArgs)
  fullName: System.Windows.Forms.Control.OnMouseLeave(EventArgs)
- uid: System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: Control.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseMove(MouseEventArgs)
- uid: System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseUp(MouseEventArgs)
  nameWithType: Control.OnMouseUp(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseUp(MouseEventArgs)
- uid: System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseWheel(MouseEventArgs)
  nameWithType: Control.OnMouseWheel(MouseEventArgs)
  fullName: System.Windows.Forms.Control.OnMouseWheel(MouseEventArgs)
- uid: System.Windows.Forms.Control.OnMove(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMove(EventArgs)
  nameWithType: Control.OnMove(EventArgs)
  fullName: System.Windows.Forms.Control.OnMove(EventArgs)
- uid: System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnNotifyMessage(Message)
  nameWithType: Control.OnNotifyMessage(Message)
  fullName: System.Windows.Forms.Control.OnNotifyMessage(Message)
- uid: System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPaddingChanged(EventArgs)
  nameWithType: Control.OnPaddingChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnPaddingChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPaint(PaintEventArgs)
  nameWithType: Control.OnPaint(PaintEventArgs)
  fullName: System.Windows.Forms.Control.OnPaint(PaintEventArgs)
- uid: System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPaintBackground(PaintEventArgs)
  nameWithType: Control.OnPaintBackground(PaintEventArgs)
  fullName: System.Windows.Forms.Control.OnPaintBackground(PaintEventArgs)
- uid: System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentBackColorChanged(EventArgs)
  nameWithType: Control.OnParentBackColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentBackColorChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentBackgroundImageChanged(EventArgs)
  nameWithType: Control.OnParentBackgroundImageChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentBackgroundImageChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentBindingContextChanged(EventArgs)
  nameWithType: Control.OnParentBindingContextChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentBindingContextChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentChanged(EventArgs)
  nameWithType: Control.OnParentChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentCursorChanged(EventArgs)
  nameWithType: Control.OnParentCursorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentCursorChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentEnabledChanged(EventArgs)
  nameWithType: Control.OnParentEnabledChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentEnabledChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentFontChanged(EventArgs)
  nameWithType: Control.OnParentFontChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentFontChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentForeColorChanged(EventArgs)
  nameWithType: Control.OnParentForeColorChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentForeColorChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentRightToLeftChanged(EventArgs)
  nameWithType: Control.OnParentRightToLeftChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentRightToLeftChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentVisibleChanged(EventArgs)
  nameWithType: Control.OnParentVisibleChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnParentVisibleChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPreviewKeyDown(PreviewKeyDownEventArgs)
  nameWithType: Control.OnPreviewKeyDown(PreviewKeyDownEventArgs)
  fullName: System.Windows.Forms.Control.OnPreviewKeyDown(PreviewKeyDownEventArgs)
- uid: System.Windows.Forms.PreviewKeyDownEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: PreviewKeyDownEventArgs
  nameWithType: PreviewKeyDownEventArgs
  fullName: System.Windows.Forms.PreviewKeyDownEventArgs
- uid: System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPrint(PaintEventArgs)
  nameWithType: Control.OnPrint(PaintEventArgs)
  fullName: System.Windows.Forms.Control.OnPrint(PaintEventArgs)
- uid: System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: Control.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.Forms.Control.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.Forms.QueryContinueDragEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.Forms.QueryContinueDragEventArgs
- uid: System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnRegionChanged(EventArgs)
  nameWithType: Control.OnRegionChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnRegionChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnResize(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnResize(EventArgs)
  nameWithType: Control.OnResize(EventArgs)
  fullName: System.Windows.Forms.Control.OnResize(EventArgs)
- uid: System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnRightToLeftChanged(EventArgs)
  nameWithType: Control.OnRightToLeftChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnRightToLeftChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnSizeChanged(EventArgs)
  nameWithType: Control.OnSizeChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnSizeChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnStyleChanged(EventArgs)
  nameWithType: Control.OnStyleChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnStyleChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnSystemColorsChanged(EventArgs)
  nameWithType: Control.OnSystemColorsChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnSystemColorsChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnTabIndexChanged(EventArgs)
  nameWithType: Control.OnTabIndexChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnTabIndexChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnTabStopChanged(EventArgs)
  nameWithType: Control.OnTabStopChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnTabStopChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnTextChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnTextChanged(EventArgs)
  nameWithType: Control.OnTextChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnTextChanged(EventArgs)
- uid: System.Windows.Forms.Control.OnValidated(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnValidated(EventArgs)
  nameWithType: Control.OnValidated(EventArgs)
  fullName: System.Windows.Forms.Control.OnValidated(EventArgs)
- uid: System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnValidating(CancelEventArgs)
  nameWithType: Control.OnValidating(CancelEventArgs)
  fullName: System.Windows.Forms.Control.OnValidating(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnVisibleChanged(EventArgs)
  nameWithType: Control.OnVisibleChanged(EventArgs)
  fullName: System.Windows.Forms.Control.OnVisibleChanged(EventArgs)
- uid: System.Windows.Forms.Control.Padding
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Padding
  nameWithType: Control.Padding
  fullName: System.Windows.Forms.Control.Padding
- uid: System.Windows.Forms.Control.PaddingChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PaddingChanged
  nameWithType: Control.PaddingChanged
  fullName: System.Windows.Forms.Control.PaddingChanged
- uid: System.Windows.Forms.Control.Paint
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Paint
  nameWithType: Control.Paint
  fullName: System.Windows.Forms.Control.Paint
- uid: System.Windows.Forms.PaintEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: PaintEventHandler
  nameWithType: PaintEventHandler
  fullName: System.Windows.Forms.PaintEventHandler
- uid: System.Windows.Forms.Control.Parent
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Parent
  nameWithType: Control.Parent
  fullName: System.Windows.Forms.Control.Parent
- uid: System.Windows.Forms.Control.ParentChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ParentChanged
  nameWithType: Control.ParentChanged
  fullName: System.Windows.Forms.Control.ParentChanged
- uid: System.Windows.Forms.Control.PerformLayout
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PerformLayout()
  nameWithType: Control.PerformLayout()
  fullName: System.Windows.Forms.Control.PerformLayout()
- uid: System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PerformLayout(Control,String)
  nameWithType: Control.PerformLayout(Control,String)
  fullName: System.Windows.Forms.Control.PerformLayout(Control,String)
- uid: System.Windows.Forms.Control.PointToClient(System.Drawing.Point)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PointToClient(Point)
  nameWithType: Control.PointToClient(Point)
  fullName: System.Windows.Forms.Control.PointToClient(Point)
- uid: System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PointToScreen(Point)
  nameWithType: Control.PointToScreen(Point)
  fullName: System.Windows.Forms.Control.PointToScreen(Point)
- uid: System.Windows.Forms.Control.PreferredSize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreferredSize
  nameWithType: Control.PreferredSize
  fullName: System.Windows.Forms.Control.PreferredSize
- uid: System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreProcessControlMessage(Message)
  nameWithType: Control.PreProcessControlMessage(Message)
  fullName: System.Windows.Forms.Control.PreProcessControlMessage(Message)
- uid: System.Windows.Forms.PreProcessControlState
  parent: System.Windows.Forms
  isExternal: false
  name: PreProcessControlState
  nameWithType: PreProcessControlState
  fullName: System.Windows.Forms.PreProcessControlState
- uid: System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreProcessMessage(Message)
  nameWithType: Control.PreProcessMessage(Message)
  fullName: System.Windows.Forms.Control.PreProcessMessage(Message)
- uid: System.Windows.Forms.Control.PreviewKeyDown
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreviewKeyDown
  nameWithType: Control.PreviewKeyDown
  fullName: System.Windows.Forms.Control.PreviewKeyDown
- uid: System.Windows.Forms.PreviewKeyDownEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: PreviewKeyDownEventHandler
  nameWithType: PreviewKeyDownEventHandler
  fullName: System.Windows.Forms.PreviewKeyDownEventHandler
- uid: System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessCmdKey(Message,Keys)
  nameWithType: Control.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.Control.ProcessCmdKey(Message,Keys)
- uid: System.Windows.Forms.Control.ProcessDialogChar(System.Char)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessDialogChar(Char)
  nameWithType: Control.ProcessDialogChar(Char)
  fullName: System.Windows.Forms.Control.ProcessDialogChar(Char)
- uid: System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessDialogKey(Keys)
  nameWithType: Control.ProcessDialogKey(Keys)
  fullName: System.Windows.Forms.Control.ProcessDialogKey(Keys)
- uid: System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessKeyEventArgs(Message)
  nameWithType: Control.ProcessKeyEventArgs(Message)
  fullName: System.Windows.Forms.Control.ProcessKeyEventArgs(Message)
- uid: System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessKeyMessage(Message)
  nameWithType: Control.ProcessKeyMessage(Message)
  fullName: System.Windows.Forms.Control.ProcessKeyMessage(Message)
- uid: System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessKeyPreview(Message)
  nameWithType: Control.ProcessKeyPreview(Message)
  fullName: System.Windows.Forms.Control.ProcessKeyPreview(Message)
- uid: System.Windows.Forms.Control.ProcessMnemonic(System.Char)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessMnemonic(Char)
  nameWithType: Control.ProcessMnemonic(Char)
  fullName: System.Windows.Forms.Control.ProcessMnemonic(Char)
- uid: System.Windows.Forms.Control.ProductName
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProductName
  nameWithType: Control.ProductName
  fullName: System.Windows.Forms.Control.ProductName
- uid: System.Windows.Forms.Control.ProductVersion
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProductVersion
  nameWithType: Control.ProductVersion
  fullName: System.Windows.Forms.Control.ProductVersion
- uid: System.Windows.Forms.Control.PropagatingImeMode
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PropagatingImeMode
  nameWithType: Control.PropagatingImeMode
  fullName: System.Windows.Forms.Control.PropagatingImeMode
- uid: System.Windows.Forms.Control.QueryAccessibilityHelp
  parent: System.Windows.Forms.Control
  isExternal: false
  name: QueryAccessibilityHelp
  nameWithType: Control.QueryAccessibilityHelp
  fullName: System.Windows.Forms.Control.QueryAccessibilityHelp
- uid: System.Windows.Forms.QueryAccessibilityHelpEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: QueryAccessibilityHelpEventHandler
  nameWithType: QueryAccessibilityHelpEventHandler
  fullName: System.Windows.Forms.QueryAccessibilityHelpEventHandler
- uid: System.Windows.Forms.Control.QueryContinueDrag
  parent: System.Windows.Forms.Control
  isExternal: false
  name: QueryContinueDrag
  nameWithType: Control.QueryContinueDrag
  fullName: System.Windows.Forms.Control.QueryContinueDrag
- uid: System.Windows.Forms.QueryContinueDragEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.Forms.QueryContinueDragEventHandler
- uid: System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaiseDragEvent(Object,DragEventArgs)
  nameWithType: Control.RaiseDragEvent(Object,DragEventArgs)
  fullName: System.Windows.Forms.Control.RaiseDragEvent(Object,DragEventArgs)
- uid: System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaiseKeyEvent(Object,KeyEventArgs)
  nameWithType: Control.RaiseKeyEvent(Object,KeyEventArgs)
  fullName: System.Windows.Forms.Control.RaiseKeyEvent(Object,KeyEventArgs)
- uid: System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaiseMouseEvent(Object,MouseEventArgs)
  nameWithType: Control.RaiseMouseEvent(Object,MouseEventArgs)
  fullName: System.Windows.Forms.Control.RaiseMouseEvent(Object,MouseEventArgs)
- uid: System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaisePaintEvent(Object,PaintEventArgs)
  nameWithType: Control.RaisePaintEvent(Object,PaintEventArgs)
  fullName: System.Windows.Forms.Control.RaisePaintEvent(Object,PaintEventArgs)
- uid: System.Windows.Forms.Control.RecreateHandle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RecreateHandle()
  nameWithType: Control.RecreateHandle()
  fullName: System.Windows.Forms.Control.RecreateHandle()
- uid: System.Windows.Forms.Control.RecreatingHandle
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RecreatingHandle
  nameWithType: Control.RecreatingHandle
  fullName: System.Windows.Forms.Control.RecreatingHandle
- uid: System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RectangleToClient(Rectangle)
  nameWithType: Control.RectangleToClient(Rectangle)
  fullName: System.Windows.Forms.Control.RectangleToClient(Rectangle)
- uid: System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RectangleToScreen(Rectangle)
  nameWithType: Control.RectangleToScreen(Rectangle)
  fullName: System.Windows.Forms.Control.RectangleToScreen(Rectangle)
- uid: System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ReflectMessage(IntPtr,Message)
  nameWithType: Control.ReflectMessage(IntPtr,Message)
  fullName: System.Windows.Forms.Control.ReflectMessage(IntPtr,Message)
- uid: System.Windows.Forms.Control.Refresh
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Refresh()
  nameWithType: Control.Refresh()
  fullName: System.Windows.Forms.Control.Refresh()
- uid: System.Windows.Forms.Control.Region
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Region
  nameWithType: Control.Region
  fullName: System.Windows.Forms.Control.Region
- uid: System.Windows.Forms.Control.RegionChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RegionChanged
  nameWithType: Control.RegionChanged
  fullName: System.Windows.Forms.Control.RegionChanged
- uid: System.Windows.Forms.Control.RenderRightToLeft
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RenderRightToLeft
  nameWithType: Control.RenderRightToLeft
  fullName: System.Windows.Forms.Control.RenderRightToLeft
- uid: System.Windows.Forms.Control.ResetBackColor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetBackColor()
  nameWithType: Control.ResetBackColor()
  fullName: System.Windows.Forms.Control.ResetBackColor()
- uid: System.Windows.Forms.Control.ResetBindings
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetBindings()
  nameWithType: Control.ResetBindings()
  fullName: System.Windows.Forms.Control.ResetBindings()
- uid: System.Windows.Forms.Control.ResetCursor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetCursor()
  nameWithType: Control.ResetCursor()
  fullName: System.Windows.Forms.Control.ResetCursor()
- uid: System.Windows.Forms.Control.ResetFont
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetFont()
  nameWithType: Control.ResetFont()
  fullName: System.Windows.Forms.Control.ResetFont()
- uid: System.Windows.Forms.Control.ResetForeColor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetForeColor()
  nameWithType: Control.ResetForeColor()
  fullName: System.Windows.Forms.Control.ResetForeColor()
- uid: System.Windows.Forms.Control.ResetImeMode
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetImeMode()
  nameWithType: Control.ResetImeMode()
  fullName: System.Windows.Forms.Control.ResetImeMode()
- uid: System.Windows.Forms.Control.ResetMouseEventArgs
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetMouseEventArgs()
  nameWithType: Control.ResetMouseEventArgs()
  fullName: System.Windows.Forms.Control.ResetMouseEventArgs()
- uid: System.Windows.Forms.Control.ResetRightToLeft
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetRightToLeft()
  nameWithType: Control.ResetRightToLeft()
  fullName: System.Windows.Forms.Control.ResetRightToLeft()
- uid: System.Windows.Forms.Control.ResetText
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetText()
  nameWithType: Control.ResetText()
  fullName: System.Windows.Forms.Control.ResetText()
- uid: System.Windows.Forms.Control.Resize
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Resize
  nameWithType: Control.Resize
  fullName: System.Windows.Forms.Control.Resize
- uid: System.Windows.Forms.Control.ResizeRedraw
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResizeRedraw
  nameWithType: Control.ResizeRedraw
  fullName: System.Windows.Forms.Control.ResizeRedraw
- uid: System.Windows.Forms.Control.ResumeLayout
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResumeLayout()
  nameWithType: Control.ResumeLayout()
  fullName: System.Windows.Forms.Control.ResumeLayout()
- uid: System.Windows.Forms.Control.ResumeLayout(System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResumeLayout(Boolean)
  nameWithType: Control.ResumeLayout(Boolean)
  fullName: System.Windows.Forms.Control.ResumeLayout(Boolean)
- uid: System.Windows.Forms.Control.Right
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Right
  nameWithType: Control.Right
  fullName: System.Windows.Forms.Control.Right
- uid: System.Windows.Forms.Control.RightToLeft
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RightToLeft
  nameWithType: Control.RightToLeft
  fullName: System.Windows.Forms.Control.RightToLeft
- uid: System.Windows.Forms.RightToLeft
  parent: System.Windows.Forms
  isExternal: false
  name: RightToLeft
  nameWithType: RightToLeft
  fullName: System.Windows.Forms.RightToLeft
- uid: System.Windows.Forms.Control.RightToLeftChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RightToLeftChanged
  nameWithType: Control.RightToLeftChanged
  fullName: System.Windows.Forms.Control.RightToLeftChanged
- uid: System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateAlignment(ContentAlignment)
  nameWithType: Control.RtlTranslateAlignment(ContentAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateAlignment(ContentAlignment)
- uid: System.Drawing.ContentAlignment
  parent: System.Drawing
  isExternal: false
  name: ContentAlignment
  nameWithType: ContentAlignment
  fullName: System.Drawing.ContentAlignment
- uid: System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateAlignment(HorizontalAlignment)
  nameWithType: Control.RtlTranslateAlignment(HorizontalAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateAlignment(HorizontalAlignment)
- uid: System.Windows.Forms.HorizontalAlignment
  parent: System.Windows.Forms
  isExternal: false
  name: HorizontalAlignment
  nameWithType: HorizontalAlignment
  fullName: System.Windows.Forms.HorizontalAlignment
- uid: System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateAlignment(LeftRightAlignment)
  nameWithType: Control.RtlTranslateAlignment(LeftRightAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateAlignment(LeftRightAlignment)
- uid: System.Windows.Forms.LeftRightAlignment
  parent: System.Windows.Forms
  isExternal: false
  name: LeftRightAlignment
  nameWithType: LeftRightAlignment
  fullName: System.Windows.Forms.LeftRightAlignment
- uid: System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateContent(ContentAlignment)
  nameWithType: Control.RtlTranslateContent(ContentAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateContent(ContentAlignment)
- uid: System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateHorizontal(HorizontalAlignment)
  nameWithType: Control.RtlTranslateHorizontal(HorizontalAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateHorizontal(HorizontalAlignment)
- uid: System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateLeftRight(LeftRightAlignment)
  nameWithType: Control.RtlTranslateLeftRight(LeftRightAlignment)
  fullName: System.Windows.Forms.Control.RtlTranslateLeftRight(LeftRightAlignment)
- uid: System.Windows.Forms.Control.Scale(System.Drawing.SizeF)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Scale(SizeF)
  nameWithType: Control.Scale(SizeF)
  fullName: System.Windows.Forms.Control.Scale(SizeF)
- uid: System.Windows.Forms.Control.Scale(System.Single)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Scale(Single)
  nameWithType: Control.Scale(Single)
  fullName: System.Windows.Forms.Control.Scale(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Windows.Forms.Control.Scale(System.Single,System.Single)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Scale(Single,Single)
  nameWithType: Control.Scale(Single,Single)
  fullName: System.Windows.Forms.Control.Scale(Single,Single)
- uid: System.Windows.Forms.Control.ScaleChildren
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ScaleChildren
  nameWithType: Control.ScaleChildren
  fullName: System.Windows.Forms.Control.ScaleChildren
- uid: System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ScaleControl(SizeF,BoundsSpecified)
  nameWithType: Control.ScaleControl(SizeF,BoundsSpecified)
  fullName: System.Windows.Forms.Control.ScaleControl(SizeF,BoundsSpecified)
- uid: System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ScaleCore(Single,Single)
  nameWithType: Control.ScaleCore(Single,Single)
  fullName: System.Windows.Forms.Control.ScaleCore(Single,Single)
- uid: System.Windows.Forms.Control.Select
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Select()
  nameWithType: Control.Select()
  fullName: System.Windows.Forms.Control.Select()
- uid: System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Select(Boolean,Boolean)
  nameWithType: Control.Select(Boolean,Boolean)
  fullName: System.Windows.Forms.Control.Select(Boolean,Boolean)
- uid: System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)
  nameWithType: Control.SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)
  fullName: System.Windows.Forms.Control.SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)
- uid: System.Windows.Forms.Control.SendToBack
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SendToBack()
  nameWithType: Control.SendToBack()
  fullName: System.Windows.Forms.Control.SendToBack()
- uid: System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetAutoSizeMode(AutoSizeMode)
  nameWithType: Control.SetAutoSizeMode(AutoSizeMode)
  fullName: System.Windows.Forms.Control.SetAutoSizeMode(AutoSizeMode)
- uid: System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetBounds(Int32,Int32,Int32,Int32)
  nameWithType: Control.SetBounds(Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.SetBounds(Int32,Int32,Int32,Int32)
- uid: System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)
  nameWithType: Control.SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)
  fullName: System.Windows.Forms.Control.SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)
- uid: System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  nameWithType: Control.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  fullName: System.Windows.Forms.Control.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
- uid: System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetClientSizeCore(Int32,Int32)
  nameWithType: Control.SetClientSizeCore(Int32,Int32)
  fullName: System.Windows.Forms.Control.SetClientSizeCore(Int32,Int32)
- uid: System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetStyle(ControlStyles,Boolean)
  nameWithType: Control.SetStyle(ControlStyles,Boolean)
  fullName: System.Windows.Forms.Control.SetStyle(ControlStyles,Boolean)
- uid: System.Windows.Forms.Control.SetTopLevel(System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetTopLevel(Boolean)
  nameWithType: Control.SetTopLevel(Boolean)
  fullName: System.Windows.Forms.Control.SetTopLevel(Boolean)
- uid: System.Windows.Forms.Control.SetVisibleCore(System.Boolean)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetVisibleCore(Boolean)
  nameWithType: Control.SetVisibleCore(Boolean)
  fullName: System.Windows.Forms.Control.SetVisibleCore(Boolean)
- uid: System.Windows.Forms.Control.Show
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Show()
  nameWithType: Control.Show()
  fullName: System.Windows.Forms.Control.Show()
- uid: System.Windows.Forms.Control.ShowFocusCues
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ShowFocusCues
  nameWithType: Control.ShowFocusCues
  fullName: System.Windows.Forms.Control.ShowFocusCues
- uid: System.Windows.Forms.Control.ShowKeyboardCues
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ShowKeyboardCues
  nameWithType: Control.ShowKeyboardCues
  fullName: System.Windows.Forms.Control.ShowKeyboardCues
- uid: System.Windows.Forms.Control.Site
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Site
  nameWithType: Control.Site
  fullName: System.Windows.Forms.Control.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Windows.Forms.Control.Size
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Size
  nameWithType: Control.Size
  fullName: System.Windows.Forms.Control.Size
- uid: System.Windows.Forms.Control.SizeChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SizeChanged
  nameWithType: Control.SizeChanged
  fullName: System.Windows.Forms.Control.SizeChanged
- uid: System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SizeFromClientSize(Size)
  nameWithType: Control.SizeFromClientSize(Size)
  fullName: System.Windows.Forms.Control.SizeFromClientSize(Size)
- uid: System.Windows.Forms.Control.StyleChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: StyleChanged
  nameWithType: Control.StyleChanged
  fullName: System.Windows.Forms.Control.StyleChanged
- uid: System.Windows.Forms.Control.SuspendLayout
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SuspendLayout()
  nameWithType: Control.SuspendLayout()
  fullName: System.Windows.Forms.Control.SuspendLayout()
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs)
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs)
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs)
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs)
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs)
  fullName: System.Windows.Forms.Control.System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs)
- uid: System.Windows.Forms.Control.SystemColorsChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SystemColorsChanged
  nameWithType: Control.SystemColorsChanged
  fullName: System.Windows.Forms.Control.SystemColorsChanged
- uid: System.Windows.Forms.Control.TabIndex
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TabIndex
  nameWithType: Control.TabIndex
  fullName: System.Windows.Forms.Control.TabIndex
- uid: System.Windows.Forms.Control.TabIndexChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TabIndexChanged
  nameWithType: Control.TabIndexChanged
  fullName: System.Windows.Forms.Control.TabIndexChanged
- uid: System.Windows.Forms.Control.TabStop
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TabStop
  nameWithType: Control.TabStop
  fullName: System.Windows.Forms.Control.TabStop
- uid: System.Windows.Forms.Control.TabStopChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TabStopChanged
  nameWithType: Control.TabStopChanged
  fullName: System.Windows.Forms.Control.TabStopChanged
- uid: System.Windows.Forms.Control.Tag
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Tag
  nameWithType: Control.Tag
  fullName: System.Windows.Forms.Control.Tag
- uid: System.Windows.Forms.Control.Text
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Text
  nameWithType: Control.Text
  fullName: System.Windows.Forms.Control.Text
- uid: System.Windows.Forms.Control.TextChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TextChanged
  nameWithType: Control.TextChanged
  fullName: System.Windows.Forms.Control.TextChanged
- uid: System.Windows.Forms.Control.Top
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Top
  nameWithType: Control.Top
  fullName: System.Windows.Forms.Control.Top
- uid: System.Windows.Forms.Control.TopLevelControl
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TopLevelControl
  nameWithType: Control.TopLevelControl
  fullName: System.Windows.Forms.Control.TopLevelControl
- uid: System.Windows.Forms.Control.Update
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Update()
  nameWithType: Control.Update()
  fullName: System.Windows.Forms.Control.Update()
- uid: System.Windows.Forms.Control.UpdateBounds
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateBounds()
  nameWithType: Control.UpdateBounds()
  fullName: System.Windows.Forms.Control.UpdateBounds()
- uid: System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateBounds(Int32,Int32,Int32,Int32)
  nameWithType: Control.UpdateBounds(Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.UpdateBounds(Int32,Int32,Int32,Int32)
- uid: System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Control.UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Forms.Control.UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Windows.Forms.Control.UpdateStyles
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateStyles()
  nameWithType: Control.UpdateStyles()
  fullName: System.Windows.Forms.Control.UpdateStyles()
- uid: System.Windows.Forms.Control.UpdateZOrder
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateZOrder()
  nameWithType: Control.UpdateZOrder()
  fullName: System.Windows.Forms.Control.UpdateZOrder()
- uid: System.Windows.Forms.Control.UseWaitCursor
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UseWaitCursor
  nameWithType: Control.UseWaitCursor
  fullName: System.Windows.Forms.Control.UseWaitCursor
- uid: System.Windows.Forms.Control.Validated
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Validated
  nameWithType: Control.Validated
  fullName: System.Windows.Forms.Control.Validated
- uid: System.Windows.Forms.Control.Validating
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Validating
  nameWithType: Control.Validating
  fullName: System.Windows.Forms.Control.Validating
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Forms.Control.Visible
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Visible
  nameWithType: Control.Visible
  fullName: System.Windows.Forms.Control.Visible
- uid: System.Windows.Forms.Control.VisibleChanged
  parent: System.Windows.Forms.Control
  isExternal: false
  name: VisibleChanged
  nameWithType: Control.VisibleChanged
  fullName: System.Windows.Forms.Control.VisibleChanged
- uid: System.Windows.Forms.Control.Width
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Width
  nameWithType: Control.Width
  fullName: System.Windows.Forms.Control.Width
- uid: System.Windows.Forms.Control.WindowTarget
  parent: System.Windows.Forms.Control
  isExternal: false
  name: WindowTarget
  nameWithType: Control.WindowTarget
  fullName: System.Windows.Forms.Control.WindowTarget
- uid: System.Windows.Forms.IWindowTarget
  parent: System.Windows.Forms
  isExternal: false
  name: IWindowTarget
  nameWithType: IWindowTarget
  fullName: System.Windows.Forms.IWindowTarget
- uid: System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.Control
  isExternal: false
  name: WndProc(Message)
  nameWithType: Control.WndProc(Message)
  fullName: System.Windows.Forms.Control.WndProc(Message)
- uid: System.Windows.Forms.Control.#ctor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Control
  nameWithType: Control.Control
- uid: System.Windows.Forms.Control.AccessibilityNotifyClients*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibilityNotifyClients
  nameWithType: Control.AccessibilityNotifyClients
- uid: System.Windows.Forms.Control.AccessibilityObject*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibilityObject
  nameWithType: Control.AccessibilityObject
- uid: System.Windows.Forms.Control.AccessibleDefaultActionDescription*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleDefaultActionDescription
  nameWithType: Control.AccessibleDefaultActionDescription
- uid: System.Windows.Forms.Control.AccessibleDescription*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleDescription
  nameWithType: Control.AccessibleDescription
- uid: System.Windows.Forms.Control.AccessibleName*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleName
  nameWithType: Control.AccessibleName
- uid: System.Windows.Forms.Control.AccessibleRole*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AccessibleRole
  nameWithType: Control.AccessibleRole
- uid: System.Windows.Forms.Control.AllowDrop*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AllowDrop
  nameWithType: Control.AllowDrop
- uid: System.Windows.Forms.Control.Anchor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Anchor
  nameWithType: Control.Anchor
- uid: System.Windows.Forms.Control.AutoScrollOffset*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AutoScrollOffset
  nameWithType: Control.AutoScrollOffset
- uid: System.Windows.Forms.Control.AutoSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: AutoSize
  nameWithType: Control.AutoSize
- uid: System.Windows.Forms.Control.BackColor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackColor
  nameWithType: Control.BackColor
- uid: System.Windows.Forms.Control.BackgroundImage*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackgroundImage
  nameWithType: Control.BackgroundImage
- uid: System.Windows.Forms.Control.BackgroundImageLayout*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BackgroundImageLayout
  nameWithType: Control.BackgroundImageLayout
- uid: System.Windows.Forms.Control.BeginInvoke*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BeginInvoke
  nameWithType: Control.BeginInvoke
- uid: System.Windows.Forms.Control.BindingContext*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BindingContext
  nameWithType: Control.BindingContext
- uid: System.Windows.Forms.Control.Bottom*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Bottom
  nameWithType: Control.Bottom
- uid: System.Windows.Forms.Control.Bounds*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Bounds
  nameWithType: Control.Bounds
- uid: System.Windows.Forms.Control.BringToFront*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: BringToFront
  nameWithType: Control.BringToFront
- uid: System.Windows.Forms.Control.CanEnableIme*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanEnableIme
  nameWithType: Control.CanEnableIme
- uid: System.Windows.Forms.Control.CanFocus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanFocus
  nameWithType: Control.CanFocus
- uid: System.Windows.Forms.Control.CanRaiseEvents*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Control.CanRaiseEvents
- uid: System.Windows.Forms.Control.CanSelect*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CanSelect
  nameWithType: Control.CanSelect
- uid: System.Windows.Forms.Control.Capture*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Capture
  nameWithType: Control.Capture
- uid: System.Windows.Forms.Control.CausesValidation*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CausesValidation
  nameWithType: Control.CausesValidation
- uid: System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CheckForIllegalCrossThreadCalls
  nameWithType: Control.CheckForIllegalCrossThreadCalls
- uid: System.Windows.Forms.Control.ClientRectangle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ClientRectangle
  nameWithType: Control.ClientRectangle
- uid: System.Windows.Forms.Control.ClientSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ClientSize
  nameWithType: Control.ClientSize
- uid: System.Windows.Forms.Control.CompanyName*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CompanyName
  nameWithType: Control.CompanyName
- uid: System.Windows.Forms.Control.Contains*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Contains
  nameWithType: Control.Contains
- uid: System.Windows.Forms.Control.ContainsFocus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContainsFocus
  nameWithType: Control.ContainsFocus
- uid: System.Windows.Forms.Control.ContextMenu*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContextMenu
  nameWithType: Control.ContextMenu
- uid: System.Windows.Forms.Control.ContextMenuStrip*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ContextMenuStrip
  nameWithType: Control.ContextMenuStrip
- uid: System.Windows.Forms.Control.Controls*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Controls
  nameWithType: Control.Controls
- uid: System.Windows.Forms.Control.CreateAccessibilityInstance*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateAccessibilityInstance
  nameWithType: Control.CreateAccessibilityInstance
- uid: System.Windows.Forms.Control.CreateControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateControl
  nameWithType: Control.CreateControl
- uid: System.Windows.Forms.Control.CreateControlsInstance*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateControlsInstance
  nameWithType: Control.CreateControlsInstance
- uid: System.Windows.Forms.Control.Created*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Created
  nameWithType: Control.Created
- uid: System.Windows.Forms.Control.CreateGraphics*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateGraphics
  nameWithType: Control.CreateGraphics
- uid: System.Windows.Forms.Control.CreateHandle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateHandle
  nameWithType: Control.CreateHandle
- uid: System.Windows.Forms.Control.CreateParams*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: CreateParams
  nameWithType: Control.CreateParams
- uid: System.Windows.Forms.Control.Cursor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Cursor
  nameWithType: Control.Cursor
- uid: System.Windows.Forms.Control.DataBindings*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DataBindings
  nameWithType: Control.DataBindings
- uid: System.Windows.Forms.Control.DefaultBackColor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultBackColor
  nameWithType: Control.DefaultBackColor
- uid: System.Windows.Forms.Control.DefaultCursor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultCursor
  nameWithType: Control.DefaultCursor
- uid: System.Windows.Forms.Control.DefaultFont*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultFont
  nameWithType: Control.DefaultFont
- uid: System.Windows.Forms.Control.DefaultForeColor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultForeColor
  nameWithType: Control.DefaultForeColor
- uid: System.Windows.Forms.Control.DefaultImeMode*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultImeMode
  nameWithType: Control.DefaultImeMode
- uid: System.Windows.Forms.Control.DefaultMargin*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultMargin
  nameWithType: Control.DefaultMargin
- uid: System.Windows.Forms.Control.DefaultMaximumSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultMaximumSize
  nameWithType: Control.DefaultMaximumSize
- uid: System.Windows.Forms.Control.DefaultMinimumSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultMinimumSize
  nameWithType: Control.DefaultMinimumSize
- uid: System.Windows.Forms.Control.DefaultPadding*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultPadding
  nameWithType: Control.DefaultPadding
- uid: System.Windows.Forms.Control.DefaultSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefaultSize
  nameWithType: Control.DefaultSize
- uid: System.Windows.Forms.Control.DefWndProc*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DefWndProc
  nameWithType: Control.DefWndProc
- uid: System.Windows.Forms.Control.DestroyHandle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DestroyHandle
  nameWithType: Control.DestroyHandle
- uid: System.Windows.Forms.Control.DisplayRectangle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DisplayRectangle
  nameWithType: Control.DisplayRectangle
- uid: System.Windows.Forms.Control.Dispose*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Dispose
  nameWithType: Control.Dispose
- uid: System.Windows.Forms.Control.Disposing*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Disposing
  nameWithType: Control.Disposing
- uid: System.Windows.Forms.Control.Dock*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Dock
  nameWithType: Control.Dock
- uid: System.Windows.Forms.Control.DoDragDrop*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DoDragDrop
  nameWithType: Control.DoDragDrop
- uid: System.Windows.Forms.Control.DoubleBuffered*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DoubleBuffered
  nameWithType: Control.DoubleBuffered
- uid: System.Windows.Forms.Control.DrawToBitmap*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: DrawToBitmap
  nameWithType: Control.DrawToBitmap
- uid: System.Windows.Forms.Control.Enabled*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Enabled
  nameWithType: Control.Enabled
- uid: System.Windows.Forms.Control.EndInvoke*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: EndInvoke
  nameWithType: Control.EndInvoke
- uid: System.Windows.Forms.Control.FindForm*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FindForm
  nameWithType: Control.FindForm
- uid: System.Windows.Forms.Control.Focus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Focus
  nameWithType: Control.Focus
- uid: System.Windows.Forms.Control.Focused*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Focused
  nameWithType: Control.Focused
- uid: System.Windows.Forms.Control.Font*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Font
  nameWithType: Control.Font
- uid: System.Windows.Forms.Control.FontHeight*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FontHeight
  nameWithType: Control.FontHeight
- uid: System.Windows.Forms.Control.ForeColor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ForeColor
  nameWithType: Control.ForeColor
- uid: System.Windows.Forms.Control.FromChildHandle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FromChildHandle
  nameWithType: Control.FromChildHandle
- uid: System.Windows.Forms.Control.FromHandle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: FromHandle
  nameWithType: Control.FromHandle
- uid: System.Windows.Forms.Control.GetAccessibilityObjectById*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetAccessibilityObjectById
  nameWithType: Control.GetAccessibilityObjectById
- uid: System.Windows.Forms.Control.GetAutoSizeMode*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetAutoSizeMode
  nameWithType: Control.GetAutoSizeMode
- uid: System.Windows.Forms.Control.GetChildAtPoint*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetChildAtPoint
  nameWithType: Control.GetChildAtPoint
- uid: System.Windows.Forms.Control.GetContainerControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetContainerControl
  nameWithType: Control.GetContainerControl
- uid: System.Windows.Forms.Control.GetNextControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetNextControl
  nameWithType: Control.GetNextControl
- uid: System.Windows.Forms.Control.GetPreferredSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetPreferredSize
  nameWithType: Control.GetPreferredSize
- uid: System.Windows.Forms.Control.GetScaledBounds*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetScaledBounds
  nameWithType: Control.GetScaledBounds
- uid: System.Windows.Forms.Control.GetStyle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetStyle
  nameWithType: Control.GetStyle
- uid: System.Windows.Forms.Control.GetTopLevel*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: GetTopLevel
  nameWithType: Control.GetTopLevel
- uid: System.Windows.Forms.Control.Handle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Handle
  nameWithType: Control.Handle
- uid: System.Windows.Forms.Control.HasChildren*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: HasChildren
  nameWithType: Control.HasChildren
- uid: System.Windows.Forms.Control.Height*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Height
  nameWithType: Control.Height
- uid: System.Windows.Forms.Control.Hide*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Hide
  nameWithType: Control.Hide
- uid: System.Windows.Forms.Control.ImeMode*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ImeMode
  nameWithType: Control.ImeMode
- uid: System.Windows.Forms.Control.ImeModeBase*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ImeModeBase
  nameWithType: Control.ImeModeBase
- uid: System.Windows.Forms.Control.InitLayout*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InitLayout
  nameWithType: Control.InitLayout
- uid: System.Windows.Forms.Control.Invalidate*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invalidate
  nameWithType: Control.Invalidate
- uid: System.Windows.Forms.Control.Invoke*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Invoke
  nameWithType: Control.Invoke
- uid: System.Windows.Forms.Control.InvokeGotFocus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeGotFocus
  nameWithType: Control.InvokeGotFocus
- uid: System.Windows.Forms.Control.InvokeLostFocus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeLostFocus
  nameWithType: Control.InvokeLostFocus
- uid: System.Windows.Forms.Control.InvokeOnClick*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeOnClick
  nameWithType: Control.InvokeOnClick
- uid: System.Windows.Forms.Control.InvokePaint*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokePaint
  nameWithType: Control.InvokePaint
- uid: System.Windows.Forms.Control.InvokePaintBackground*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokePaintBackground
  nameWithType: Control.InvokePaintBackground
- uid: System.Windows.Forms.Control.InvokeRequired*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: InvokeRequired
  nameWithType: Control.InvokeRequired
- uid: System.Windows.Forms.Control.IsAccessible*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsAccessible
  nameWithType: Control.IsAccessible
- uid: System.Windows.Forms.Control.IsDisposed*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsDisposed
  nameWithType: Control.IsDisposed
- uid: System.Windows.Forms.Control.IsHandleCreated*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsHandleCreated
  nameWithType: Control.IsHandleCreated
- uid: System.Windows.Forms.Control.IsInputChar*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsInputChar
  nameWithType: Control.IsInputChar
- uid: System.Windows.Forms.Control.IsInputKey*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsInputKey
  nameWithType: Control.IsInputKey
- uid: System.Windows.Forms.Control.IsKeyLocked*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsKeyLocked
  nameWithType: Control.IsKeyLocked
- uid: System.Windows.Forms.Control.IsMirrored*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsMirrored
  nameWithType: Control.IsMirrored
- uid: System.Windows.Forms.Control.IsMnemonic*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: IsMnemonic
  nameWithType: Control.IsMnemonic
- uid: System.Windows.Forms.Control.LayoutEngine*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: LayoutEngine
  nameWithType: Control.LayoutEngine
- uid: System.Windows.Forms.Control.Left*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Left
  nameWithType: Control.Left
- uid: System.Windows.Forms.Control.Location*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Location
  nameWithType: Control.Location
- uid: System.Windows.Forms.Control.Margin*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Margin
  nameWithType: Control.Margin
- uid: System.Windows.Forms.Control.MaximumSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MaximumSize
  nameWithType: Control.MaximumSize
- uid: System.Windows.Forms.Control.MinimumSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MinimumSize
  nameWithType: Control.MinimumSize
- uid: System.Windows.Forms.Control.ModifierKeys*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ModifierKeys
  nameWithType: Control.ModifierKeys
- uid: System.Windows.Forms.Control.MouseButtons*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MouseButtons
  nameWithType: Control.MouseButtons
- uid: System.Windows.Forms.Control.MousePosition*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: MousePosition
  nameWithType: Control.MousePosition
- uid: System.Windows.Forms.Control.Name*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Name
  nameWithType: Control.Name
- uid: System.Windows.Forms.Control.NotifyInvalidate*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: NotifyInvalidate
  nameWithType: Control.NotifyInvalidate
- uid: System.Windows.Forms.Control.OnAutoSizeChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnAutoSizeChanged
  nameWithType: Control.OnAutoSizeChanged
- uid: System.Windows.Forms.Control.OnBackColorChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBackColorChanged
  nameWithType: Control.OnBackColorChanged
- uid: System.Windows.Forms.Control.OnBackgroundImageChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBackgroundImageChanged
  nameWithType: Control.OnBackgroundImageChanged
- uid: System.Windows.Forms.Control.OnBackgroundImageLayoutChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBackgroundImageLayoutChanged
  nameWithType: Control.OnBackgroundImageLayoutChanged
- uid: System.Windows.Forms.Control.OnBindingContextChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnBindingContextChanged
  nameWithType: Control.OnBindingContextChanged
- uid: System.Windows.Forms.Control.OnCausesValidationChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnCausesValidationChanged
  nameWithType: Control.OnCausesValidationChanged
- uid: System.Windows.Forms.Control.OnChangeUICues*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnChangeUICues
  nameWithType: Control.OnChangeUICues
- uid: System.Windows.Forms.Control.OnClick*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnClick
  nameWithType: Control.OnClick
- uid: System.Windows.Forms.Control.OnClientSizeChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnClientSizeChanged
  nameWithType: Control.OnClientSizeChanged
- uid: System.Windows.Forms.Control.OnContextMenuChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnContextMenuChanged
  nameWithType: Control.OnContextMenuChanged
- uid: System.Windows.Forms.Control.OnContextMenuStripChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnContextMenuStripChanged
  nameWithType: Control.OnContextMenuStripChanged
- uid: System.Windows.Forms.Control.OnControlAdded*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnControlAdded
  nameWithType: Control.OnControlAdded
- uid: System.Windows.Forms.Control.OnControlRemoved*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnControlRemoved
  nameWithType: Control.OnControlRemoved
- uid: System.Windows.Forms.Control.OnCreateControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnCreateControl
  nameWithType: Control.OnCreateControl
- uid: System.Windows.Forms.Control.OnCursorChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnCursorChanged
  nameWithType: Control.OnCursorChanged
- uid: System.Windows.Forms.Control.OnDockChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDockChanged
  nameWithType: Control.OnDockChanged
- uid: System.Windows.Forms.Control.OnDoubleClick*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDoubleClick
  nameWithType: Control.OnDoubleClick
- uid: System.Windows.Forms.Control.OnDragDrop*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragDrop
  nameWithType: Control.OnDragDrop
- uid: System.Windows.Forms.Control.OnDragEnter*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragEnter
  nameWithType: Control.OnDragEnter
- uid: System.Windows.Forms.Control.OnDragLeave*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragLeave
  nameWithType: Control.OnDragLeave
- uid: System.Windows.Forms.Control.OnDragOver*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnDragOver
  nameWithType: Control.OnDragOver
- uid: System.Windows.Forms.Control.OnEnabledChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnEnabledChanged
  nameWithType: Control.OnEnabledChanged
- uid: System.Windows.Forms.Control.OnEnter*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnEnter
  nameWithType: Control.OnEnter
- uid: System.Windows.Forms.Control.OnFontChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnFontChanged
  nameWithType: Control.OnFontChanged
- uid: System.Windows.Forms.Control.OnForeColorChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnForeColorChanged
  nameWithType: Control.OnForeColorChanged
- uid: System.Windows.Forms.Control.OnGiveFeedback*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnGiveFeedback
  nameWithType: Control.OnGiveFeedback
- uid: System.Windows.Forms.Control.OnGotFocus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnGotFocus
  nameWithType: Control.OnGotFocus
- uid: System.Windows.Forms.Control.OnHandleCreated*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnHandleCreated
  nameWithType: Control.OnHandleCreated
- uid: System.Windows.Forms.Control.OnHandleDestroyed*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnHandleDestroyed
  nameWithType: Control.OnHandleDestroyed
- uid: System.Windows.Forms.Control.OnHelpRequested*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnHelpRequested
  nameWithType: Control.OnHelpRequested
- uid: System.Windows.Forms.Control.OnImeModeChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnImeModeChanged
  nameWithType: Control.OnImeModeChanged
- uid: System.Windows.Forms.Control.OnInvalidated*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnInvalidated
  nameWithType: Control.OnInvalidated
- uid: System.Windows.Forms.Control.OnKeyDown*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnKeyDown
  nameWithType: Control.OnKeyDown
- uid: System.Windows.Forms.Control.OnKeyPress*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnKeyPress
  nameWithType: Control.OnKeyPress
- uid: System.Windows.Forms.Control.OnKeyUp*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnKeyUp
  nameWithType: Control.OnKeyUp
- uid: System.Windows.Forms.Control.OnLayout*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLayout
  nameWithType: Control.OnLayout
- uid: System.Windows.Forms.Control.OnLeave*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLeave
  nameWithType: Control.OnLeave
- uid: System.Windows.Forms.Control.OnLocationChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLocationChanged
  nameWithType: Control.OnLocationChanged
- uid: System.Windows.Forms.Control.OnLostFocus*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnLostFocus
  nameWithType: Control.OnLostFocus
- uid: System.Windows.Forms.Control.OnMarginChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMarginChanged
  nameWithType: Control.OnMarginChanged
- uid: System.Windows.Forms.Control.OnMouseCaptureChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseCaptureChanged
  nameWithType: Control.OnMouseCaptureChanged
- uid: System.Windows.Forms.Control.OnMouseClick*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseClick
  nameWithType: Control.OnMouseClick
- uid: System.Windows.Forms.Control.OnMouseDoubleClick*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseDoubleClick
  nameWithType: Control.OnMouseDoubleClick
- uid: System.Windows.Forms.Control.OnMouseDown*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseDown
  nameWithType: Control.OnMouseDown
- uid: System.Windows.Forms.Control.OnMouseEnter*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseEnter
  nameWithType: Control.OnMouseEnter
- uid: System.Windows.Forms.Control.OnMouseHover*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseHover
  nameWithType: Control.OnMouseHover
- uid: System.Windows.Forms.Control.OnMouseLeave*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseLeave
  nameWithType: Control.OnMouseLeave
- uid: System.Windows.Forms.Control.OnMouseMove*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseMove
  nameWithType: Control.OnMouseMove
- uid: System.Windows.Forms.Control.OnMouseUp*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseUp
  nameWithType: Control.OnMouseUp
- uid: System.Windows.Forms.Control.OnMouseWheel*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMouseWheel
  nameWithType: Control.OnMouseWheel
- uid: System.Windows.Forms.Control.OnMove*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnMove
  nameWithType: Control.OnMove
- uid: System.Windows.Forms.Control.OnNotifyMessage*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnNotifyMessage
  nameWithType: Control.OnNotifyMessage
- uid: System.Windows.Forms.Control.OnPaddingChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPaddingChanged
  nameWithType: Control.OnPaddingChanged
- uid: System.Windows.Forms.Control.OnPaint*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPaint
  nameWithType: Control.OnPaint
- uid: System.Windows.Forms.Control.OnPaintBackground*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPaintBackground
  nameWithType: Control.OnPaintBackground
- uid: System.Windows.Forms.Control.OnParentBackColorChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentBackColorChanged
  nameWithType: Control.OnParentBackColorChanged
- uid: System.Windows.Forms.Control.OnParentBackgroundImageChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentBackgroundImageChanged
  nameWithType: Control.OnParentBackgroundImageChanged
- uid: System.Windows.Forms.Control.OnParentBindingContextChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentBindingContextChanged
  nameWithType: Control.OnParentBindingContextChanged
- uid: System.Windows.Forms.Control.OnParentChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentChanged
  nameWithType: Control.OnParentChanged
- uid: System.Windows.Forms.Control.OnParentCursorChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentCursorChanged
  nameWithType: Control.OnParentCursorChanged
- uid: System.Windows.Forms.Control.OnParentEnabledChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentEnabledChanged
  nameWithType: Control.OnParentEnabledChanged
- uid: System.Windows.Forms.Control.OnParentFontChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentFontChanged
  nameWithType: Control.OnParentFontChanged
- uid: System.Windows.Forms.Control.OnParentForeColorChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentForeColorChanged
  nameWithType: Control.OnParentForeColorChanged
- uid: System.Windows.Forms.Control.OnParentRightToLeftChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentRightToLeftChanged
  nameWithType: Control.OnParentRightToLeftChanged
- uid: System.Windows.Forms.Control.OnParentVisibleChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnParentVisibleChanged
  nameWithType: Control.OnParentVisibleChanged
- uid: System.Windows.Forms.Control.OnPreviewKeyDown*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: Control.OnPreviewKeyDown
- uid: System.Windows.Forms.Control.OnPrint*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnPrint
  nameWithType: Control.OnPrint
- uid: System.Windows.Forms.Control.OnQueryContinueDrag*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: Control.OnQueryContinueDrag
- uid: System.Windows.Forms.Control.OnRegionChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnRegionChanged
  nameWithType: Control.OnRegionChanged
- uid: System.Windows.Forms.Control.OnResize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnResize
  nameWithType: Control.OnResize
- uid: System.Windows.Forms.Control.OnRightToLeftChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnRightToLeftChanged
  nameWithType: Control.OnRightToLeftChanged
- uid: System.Windows.Forms.Control.OnSizeChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnSizeChanged
  nameWithType: Control.OnSizeChanged
- uid: System.Windows.Forms.Control.OnStyleChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnStyleChanged
  nameWithType: Control.OnStyleChanged
- uid: System.Windows.Forms.Control.OnSystemColorsChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnSystemColorsChanged
  nameWithType: Control.OnSystemColorsChanged
- uid: System.Windows.Forms.Control.OnTabIndexChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnTabIndexChanged
  nameWithType: Control.OnTabIndexChanged
- uid: System.Windows.Forms.Control.OnTabStopChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnTabStopChanged
  nameWithType: Control.OnTabStopChanged
- uid: System.Windows.Forms.Control.OnTextChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnTextChanged
  nameWithType: Control.OnTextChanged
- uid: System.Windows.Forms.Control.OnValidated*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnValidated
  nameWithType: Control.OnValidated
- uid: System.Windows.Forms.Control.OnValidating*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnValidating
  nameWithType: Control.OnValidating
- uid: System.Windows.Forms.Control.OnVisibleChanged*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: OnVisibleChanged
  nameWithType: Control.OnVisibleChanged
- uid: System.Windows.Forms.Control.Padding*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Padding
  nameWithType: Control.Padding
- uid: System.Windows.Forms.Control.Parent*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Parent
  nameWithType: Control.Parent
- uid: System.Windows.Forms.Control.PerformLayout*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PerformLayout
  nameWithType: Control.PerformLayout
- uid: System.Windows.Forms.Control.PointToClient*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PointToClient
  nameWithType: Control.PointToClient
- uid: System.Windows.Forms.Control.PointToScreen*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PointToScreen
  nameWithType: Control.PointToScreen
- uid: System.Windows.Forms.Control.PreferredSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreferredSize
  nameWithType: Control.PreferredSize
- uid: System.Windows.Forms.Control.PreProcessControlMessage*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreProcessControlMessage
  nameWithType: Control.PreProcessControlMessage
- uid: System.Windows.Forms.Control.PreProcessMessage*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PreProcessMessage
  nameWithType: Control.PreProcessMessage
- uid: System.Windows.Forms.Control.ProcessCmdKey*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessCmdKey
  nameWithType: Control.ProcessCmdKey
- uid: System.Windows.Forms.Control.ProcessDialogChar*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessDialogChar
  nameWithType: Control.ProcessDialogChar
- uid: System.Windows.Forms.Control.ProcessDialogKey*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessDialogKey
  nameWithType: Control.ProcessDialogKey
- uid: System.Windows.Forms.Control.ProcessKeyEventArgs*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessKeyEventArgs
  nameWithType: Control.ProcessKeyEventArgs
- uid: System.Windows.Forms.Control.ProcessKeyMessage*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessKeyMessage
  nameWithType: Control.ProcessKeyMessage
- uid: System.Windows.Forms.Control.ProcessKeyPreview*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessKeyPreview
  nameWithType: Control.ProcessKeyPreview
- uid: System.Windows.Forms.Control.ProcessMnemonic*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProcessMnemonic
  nameWithType: Control.ProcessMnemonic
- uid: System.Windows.Forms.Control.ProductName*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProductName
  nameWithType: Control.ProductName
- uid: System.Windows.Forms.Control.ProductVersion*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ProductVersion
  nameWithType: Control.ProductVersion
- uid: System.Windows.Forms.Control.PropagatingImeMode*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: PropagatingImeMode
  nameWithType: Control.PropagatingImeMode
- uid: System.Windows.Forms.Control.RaiseDragEvent*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaiseDragEvent
  nameWithType: Control.RaiseDragEvent
- uid: System.Windows.Forms.Control.RaiseKeyEvent*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaiseKeyEvent
  nameWithType: Control.RaiseKeyEvent
- uid: System.Windows.Forms.Control.RaiseMouseEvent*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaiseMouseEvent
  nameWithType: Control.RaiseMouseEvent
- uid: System.Windows.Forms.Control.RaisePaintEvent*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RaisePaintEvent
  nameWithType: Control.RaisePaintEvent
- uid: System.Windows.Forms.Control.RecreateHandle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RecreateHandle
  nameWithType: Control.RecreateHandle
- uid: System.Windows.Forms.Control.RecreatingHandle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RecreatingHandle
  nameWithType: Control.RecreatingHandle
- uid: System.Windows.Forms.Control.RectangleToClient*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RectangleToClient
  nameWithType: Control.RectangleToClient
- uid: System.Windows.Forms.Control.RectangleToScreen*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RectangleToScreen
  nameWithType: Control.RectangleToScreen
- uid: System.Windows.Forms.Control.ReflectMessage*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ReflectMessage
  nameWithType: Control.ReflectMessage
- uid: System.Windows.Forms.Control.Refresh*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Refresh
  nameWithType: Control.Refresh
- uid: System.Windows.Forms.Control.Region*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Region
  nameWithType: Control.Region
- uid: System.Windows.Forms.Control.RenderRightToLeft*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RenderRightToLeft
  nameWithType: Control.RenderRightToLeft
- uid: System.Windows.Forms.Control.ResetBackColor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetBackColor
  nameWithType: Control.ResetBackColor
- uid: System.Windows.Forms.Control.ResetBindings*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetBindings
  nameWithType: Control.ResetBindings
- uid: System.Windows.Forms.Control.ResetCursor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetCursor
  nameWithType: Control.ResetCursor
- uid: System.Windows.Forms.Control.ResetFont*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetFont
  nameWithType: Control.ResetFont
- uid: System.Windows.Forms.Control.ResetForeColor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetForeColor
  nameWithType: Control.ResetForeColor
- uid: System.Windows.Forms.Control.ResetImeMode*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetImeMode
  nameWithType: Control.ResetImeMode
- uid: System.Windows.Forms.Control.ResetMouseEventArgs*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetMouseEventArgs
  nameWithType: Control.ResetMouseEventArgs
- uid: System.Windows.Forms.Control.ResetRightToLeft*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetRightToLeft
  nameWithType: Control.ResetRightToLeft
- uid: System.Windows.Forms.Control.ResetText*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResetText
  nameWithType: Control.ResetText
- uid: System.Windows.Forms.Control.ResizeRedraw*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResizeRedraw
  nameWithType: Control.ResizeRedraw
- uid: System.Windows.Forms.Control.ResumeLayout*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ResumeLayout
  nameWithType: Control.ResumeLayout
- uid: System.Windows.Forms.Control.Right*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Right
  nameWithType: Control.Right
- uid: System.Windows.Forms.Control.RightToLeft*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RightToLeft
  nameWithType: Control.RightToLeft
- uid: System.Windows.Forms.Control.RtlTranslateAlignment*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateAlignment
  nameWithType: Control.RtlTranslateAlignment
- uid: System.Windows.Forms.Control.RtlTranslateContent*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateContent
  nameWithType: Control.RtlTranslateContent
- uid: System.Windows.Forms.Control.RtlTranslateHorizontal*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateHorizontal
  nameWithType: Control.RtlTranslateHorizontal
- uid: System.Windows.Forms.Control.RtlTranslateLeftRight*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: RtlTranslateLeftRight
  nameWithType: Control.RtlTranslateLeftRight
- uid: System.Windows.Forms.Control.Scale*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Scale
  nameWithType: Control.Scale
- uid: System.Windows.Forms.Control.ScaleChildren*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ScaleChildren
  nameWithType: Control.ScaleChildren
- uid: System.Windows.Forms.Control.ScaleControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ScaleControl
  nameWithType: Control.ScaleControl
- uid: System.Windows.Forms.Control.ScaleCore*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ScaleCore
  nameWithType: Control.ScaleCore
- uid: System.Windows.Forms.Control.Select*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Select
  nameWithType: Control.Select
- uid: System.Windows.Forms.Control.SelectNextControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SelectNextControl
  nameWithType: Control.SelectNextControl
- uid: System.Windows.Forms.Control.SendToBack*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SendToBack
  nameWithType: Control.SendToBack
- uid: System.Windows.Forms.Control.SetAutoSizeMode*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetAutoSizeMode
  nameWithType: Control.SetAutoSizeMode
- uid: System.Windows.Forms.Control.SetBounds*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetBounds
  nameWithType: Control.SetBounds
- uid: System.Windows.Forms.Control.SetBoundsCore*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetBoundsCore
  nameWithType: Control.SetBoundsCore
- uid: System.Windows.Forms.Control.SetClientSizeCore*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetClientSizeCore
  nameWithType: Control.SetClientSizeCore
- uid: System.Windows.Forms.Control.SetStyle*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetStyle
  nameWithType: Control.SetStyle
- uid: System.Windows.Forms.Control.SetTopLevel*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetTopLevel
  nameWithType: Control.SetTopLevel
- uid: System.Windows.Forms.Control.SetVisibleCore*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SetVisibleCore
  nameWithType: Control.SetVisibleCore
- uid: System.Windows.Forms.Control.Show*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Show
  nameWithType: Control.Show
- uid: System.Windows.Forms.Control.ShowFocusCues*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ShowFocusCues
  nameWithType: Control.ShowFocusCues
- uid: System.Windows.Forms.Control.ShowKeyboardCues*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: ShowKeyboardCues
  nameWithType: Control.ShowKeyboardCues
- uid: System.Windows.Forms.Control.Site*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Site
  nameWithType: Control.Site
- uid: System.Windows.Forms.Control.Size*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Size
  nameWithType: Control.Size
- uid: System.Windows.Forms.Control.SizeFromClientSize*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SizeFromClientSize
  nameWithType: Control.SizeFromClientSize
- uid: System.Windows.Forms.Control.SuspendLayout*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: SuspendLayout
  nameWithType: Control.SuspendLayout
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragDrop
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragDrop
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragEnter
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragEnter
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragLeave
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragLeave
- uid: System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.IDropTarget.OnDragOver
  nameWithType: Control.System.Windows.Forms.IDropTarget.OnDragOver
- uid: System.Windows.Forms.Control.TabIndex*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TabIndex
  nameWithType: Control.TabIndex
- uid: System.Windows.Forms.Control.TabStop*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TabStop
  nameWithType: Control.TabStop
- uid: System.Windows.Forms.Control.Tag*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Tag
  nameWithType: Control.Tag
- uid: System.Windows.Forms.Control.Text*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Text
  nameWithType: Control.Text
- uid: System.Windows.Forms.Control.Top*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Top
  nameWithType: Control.Top
- uid: System.Windows.Forms.Control.TopLevelControl*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: TopLevelControl
  nameWithType: Control.TopLevelControl
- uid: System.Windows.Forms.Control.Update*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Update
  nameWithType: Control.Update
- uid: System.Windows.Forms.Control.UpdateBounds*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateBounds
  nameWithType: Control.UpdateBounds
- uid: System.Windows.Forms.Control.UpdateStyles*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateStyles
  nameWithType: Control.UpdateStyles
- uid: System.Windows.Forms.Control.UpdateZOrder*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UpdateZOrder
  nameWithType: Control.UpdateZOrder
- uid: System.Windows.Forms.Control.UseWaitCursor*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: UseWaitCursor
  nameWithType: Control.UseWaitCursor
- uid: System.Windows.Forms.Control.Visible*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Visible
  nameWithType: Control.Visible
- uid: System.Windows.Forms.Control.Width*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: Width
  nameWithType: Control.Width
- uid: System.Windows.Forms.Control.WindowTarget*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: WindowTarget
  nameWithType: Control.WindowTarget
- uid: System.Windows.Forms.Control.WndProc*
  parent: System.Windows.Forms.Control
  isExternal: false
  name: WndProc
  nameWithType: Control.WndProc
