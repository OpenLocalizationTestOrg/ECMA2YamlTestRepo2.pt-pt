### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.Expressions.RangeExpression
  id: RangeExpression
  children:
  - System.Web.UI.WebControls.Expressions.RangeExpression.#ctor
  - System.Web.UI.WebControls.Expressions.RangeExpression.DataField
  - System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable(System.Linq.IQueryable)
  - System.Web.UI.WebControls.Expressions.RangeExpression.MaxType
  - System.Web.UI.WebControls.Expressions.RangeExpression.MinType
  langs:
  - csharp
  name: RangeExpression
  nameWithType: RangeExpression
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression
  type: Class
  summary: "Provides a way to determine whether a value is greater than or less than a specified value, or whether a value is between two specified values."
  remarks: "The <xref:System.Web.UI.WebControls.QueryExtender> control provides the ability to filter data in a Web page by using classes in the <xref:System.Web.UI.WebControls.Expressions> namespace. These classes include the RangeExpression class.       The RangeExpression class searches a data column using a pair of values that define the range. You use the <xref:System.Web.UI.WebControls.Expressions.RangeExpression.DataField%2A> property to specify the column to search. You use the <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MinType%2A> property to specify whether to include or exclude the minimum in the search results, and you use the <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType%2A> property to specify whether to include or exclude the maximum value. The maximum and minimum values can be specified in [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] controls and the values can then be passed to the <xref:System.Web.UI.WebControls.QueryExtender> control as parameters in <xref:System.Web.UI.WebControls.ControlParameter> controls. The results are typically displayed in a data-bound control."
  example:
  - "The following example shows how to search the ListPrice column in the Products table of the AdventureWorks database for products that have a list price in the range that is specified in the `FromTextBox` and `ToTextBox` text boxes. The filter includes the minimum value but excludes the maximum value in the results. The results are displayed in a <xref:System.Web.UI.WebControls.Label> control.  \n  \n This code example is part of a larger example provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public class RangeExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.Expressions.DataSourceExpression
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Context
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.DataSource
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Owner
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SetDirty
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.ViewState
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.Parameters
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SaveViewState
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.TrackViewState
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  langs:
  - csharp
  name: RangeExpression()
  nameWithType: RangeExpression.RangeExpression()
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.RangeExpression()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.Expressions.RangeExpression&quot;></xref> class."
  syntax:
    content: public RangeExpression ();
    parameters: []
  overload: System.Web.UI.WebControls.Expressions.RangeExpression.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.DataField
  id: DataField
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  langs:
  - csharp
  name: DataField
  nameWithType: RangeExpression.DataField
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.DataField
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Gets or sets the field to use for the comparison."
  remarks: "The range expression searches data field for the specified range."
  example:
  - "The following example shows how to search the List Price column in the Products table of the AdventureWorks database for products that have a list price in the range that is specified in the `FromTextBox` and `ToTextBox` text boxes.  \n  \n This code example is part of a larger example provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \n  \n```  \n<asp:RangeExpression DataField=\"ListPrice\"    \n    MinType=\"Inclusive\" MaxType=\"Exclusive\">  \n  <asp:ControlParameter ControlID=\"FromTextBox\" />  \n  <asp:ControlParameter ControlID=\"ToTextBox\" />  \n</asp:RangeExpression>  \n```"
  syntax:
    content: public string DataField { get; set; }
    return:
      type: System.String
      description: "The field to use for the comparison."
  overload: System.Web.UI.WebControls.Expressions.RangeExpression.DataField*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable(System.Linq.IQueryable)
  id: GetQueryable(System.Linq.IQueryable)
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  langs:
  - csharp
  name: GetQueryable(IQueryable)
  nameWithType: RangeExpression.GetQueryable(IQueryable)
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable(IQueryable)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Gets the <xref:System.Linq.IQueryable> object that the range comparison was performed on."
  remarks: "This method uses the specified <xref:System.Linq.IQueryable> object to resolve the expression."
  syntax:
    content: public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "The object to use for the comparison."
    return:
      type: System.Linq.IQueryable
      description: "An instance of the <xref:System.Linq.IQueryable> object that the expression was applied to."
  overload: System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Web.UI.WebControls.Expressions.RangeExpression.DataField*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MinType*> and the <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType*> properties are set to <xref href=&quot;System.Web.UI.WebControls.Expressions.RangeType&quot;></xref>.       -or-       The <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MinType*> or <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType*> property is not set to <xref href=&quot;System.Web.UI.WebControls.Expressions.RangeType&quot;></xref> and the parameter collection is empty."
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.MaxType
  id: MaxType
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  langs:
  - csharp
  name: MaxType
  nameWithType: RangeExpression.MaxType
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.MaxType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Gets or sets the maximum value of the range."
  remarks: "Possible values for this property are <xref:System.Web.UI.WebControls.Expressions.RangeType>, <xref:System.Web.UI.WebControls.Expressions.RangeType>, and <xref:System.Web.UI.WebControls.Expressions.RangeType>.       When the MaxType is set to <xref:System.Web.UI.WebControls.Expressions.RangeType>, the maximum value of the range is included in the search results. This is equivalent to performing a >= operation. If you set the property to <xref:System.Web.UI.WebControls.Expressions.RangeType> field, it is equivalent to specifying a > or < operation. If you set the property to <xref:System.Web.UI.WebControls.Expressions.RangeType>, no limit is imposed on the range."
  example:
  - "The following example shows how to include the minimum value that is specified in the range and how to exclude the maximum value. The maximum and minimum values are entered into text boxes. This code example is part of a larger example provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \n  \n```  \n<asp:RangeExpression DataField=\"ListPrice\"    \n    MinType=\"Inclusive\" MaxType=\"Exclusive\">  \n  <asp:ControlParameter ControlID=\"FromTextBox\" />  \n  <asp:ControlParameter ControlID=\"ToTextBox\" />  \n</asp:RangeExpression>  \n```"
  syntax:
    content: public System.Web.UI.WebControls.Expressions.RangeType MaxType { get; set; }
    return:
      type: System.Web.UI.WebControls.Expressions.RangeType
      description: "The type of comparison to use for the maximum value. The default is <xref href=&quot;System.Web.UI.WebControls.Expressions.RangeType&quot;></xref>, which indicates that the maximum comparison is not performed."
  overload: System.Web.UI.WebControls.Expressions.RangeExpression.MaxType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.MinType
  id: MinType
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  langs:
  - csharp
  name: MinType
  nameWithType: RangeExpression.MinType
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.MinType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Gets or sets the minimum value of the range."
  remarks: "Possible values for this property are <xref:System.Web.UI.WebControls.Expressions.RangeType>, <xref:System.Web.UI.WebControls.Expressions.RangeType>, and <xref:System.Web.UI.WebControls.Expressions.RangeType>.  \n  \n When the MinType or <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType%2A> property is set to <xref:System.Web.UI.WebControls.Expressions.RangeType>, the minimum and maximum value of the range is included in the search results. This is equivalent to performing a >= or \\<= operation. The <xref:System.Web.UI.WebControls.Expressions.RangeType> field is equivalent to the > or < operation and <xref:System.Web.UI.WebControls.Expressions.RangeType> imposes no limit on the range."
  example:
  - "The following example shows how to include the minimum value that is specified in the range and how to exclude the maximum value. The maximum and minimum values are entered into text boxes. This code example is part of a larger example provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \n  \n```  \n<asp:RangeExpression DataField=\"ListPrice\"    \n    MinType=\"Inclusive\" MaxType=\"Exclusive\">  \n  <asp:ControlParameter ControlID=\"FromTextBox\" />  \n  <asp:ControlParameter ControlID=\"ToTextBox\" />  \n</asp:RangeExpression>  \n```"
  syntax:
    content: public System.Web.UI.WebControls.Expressions.RangeType MinType { get; set; }
    return:
      type: System.Web.UI.WebControls.Expressions.RangeType
      description: "The type of comparison to use for the minimum value. The default is <xref href=&quot;System.Web.UI.WebControls.Expressions.RangeType&quot;></xref>, which indicates that the minimum comparison is not performed."
  overload: System.Web.UI.WebControls.Expressions.RangeExpression.MinType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression
  isExternal: false
  name: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.#ctor
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: RangeExpression()
  nameWithType: RangeExpression.RangeExpression()
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.RangeExpression()
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.DataField
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: DataField
  nameWithType: RangeExpression.DataField
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.DataField
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable(System.Linq.IQueryable)
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: GetQueryable(IQueryable)
  nameWithType: RangeExpression.GetQueryable(IQueryable)
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable(IQueryable)
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.MaxType
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: MaxType
  nameWithType: RangeExpression.MaxType
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.MaxType
- uid: System.Web.UI.WebControls.Expressions.RangeType
  parent: System.Web.UI.WebControls.Expressions
  isExternal: false
  name: RangeType
  nameWithType: RangeType
  fullName: System.Web.UI.WebControls.Expressions.RangeType
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.MinType
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: MinType
  nameWithType: RangeExpression.MinType
  fullName: System.Web.UI.WebControls.Expressions.RangeExpression.MinType
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.#ctor*
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: RangeExpression
  nameWithType: RangeExpression.RangeExpression
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.DataField*
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: DataField
  nameWithType: RangeExpression.DataField
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable*
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: GetQueryable
  nameWithType: RangeExpression.GetQueryable
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.MaxType*
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: MaxType
  nameWithType: RangeExpression.MaxType
- uid: System.Web.UI.WebControls.Expressions.RangeExpression.MinType*
  parent: System.Web.UI.WebControls.Expressions.RangeExpression
  isExternal: false
  name: MinType
  nameWithType: RangeExpression.MinType
