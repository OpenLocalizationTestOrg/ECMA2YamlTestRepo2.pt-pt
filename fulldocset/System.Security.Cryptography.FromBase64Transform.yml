### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.FromBase64Transform
  id: FromBase64Transform
  children:
  - System.Security.Cryptography.FromBase64Transform.#ctor
  - System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
  - System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  - System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  - System.Security.Cryptography.FromBase64Transform.Clear
  - System.Security.Cryptography.FromBase64Transform.Dispose
  - System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)
  - System.Security.Cryptography.FromBase64Transform.Finalize
  - System.Security.Cryptography.FromBase64Transform.InputBlockSize
  - System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  - System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: FromBase64Transform
  nameWithType: FromBase64Transform
  fullName: System.Security.Cryptography.FromBase64Transform
  type: Class
  summary: "Converts a <see cref=&quot;T:System.Security.Cryptography.CryptoStream&quot;></see> from base 64."
  remarks: "Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable."
  example:
  - "The following example decodes a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CPP/t-system.security.crypto_20_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/VisualBasic/t-system.security.crypto_20_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CSharp/t-system.security.crypto_20_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class FromBase64Transform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: FromBase64Transform()
  nameWithType: FromBase64Transform.FromBase64Transform()
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Security.Cryptography.FromBase64Transform&quot;></see> class."
  remarks: "In the default configuration, white spaces are ignored. See <xref:System.Security.Cryptography.FromBase64TransformMode> for more details."
  syntax:
    content: public FromBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
  id: '#ctor(System.Security.Cryptography.FromBase64TransformMode)'
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: FromBase64Transform(FromBase64TransformMode)
  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Security.Cryptography.FromBase64Transform&quot;></see> class with the specified transformation mode."
  remarks: ''
  example:
  - "The following example decodes a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CPP/6e8f7a21-5a5f-4a36-9e3b-_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/VisualBasic/6e8f7a21-5a5f-4a36-9e3b-_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CSharp/6e8f7a21-5a5f-4a36-9e3b-_1.cs)]"
  syntax:
    content: public FromBase64Transform (System.Security.Cryptography.FromBase64TransformMode whitespaces);
    parameters:
    - id: whitespaces
      type: System.Security.Cryptography.FromBase64TransformMode
      description: "One of the  values."
  overload: System.Security.Cryptography.FromBase64Transform.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: FromBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets a value indicating whether the current transform can be reused."
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.FromBase64Transform.CanReuseTransform*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: FromBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets a value that indicates whether multiple blocks can be transformed."
  remarks: "In the current implementation, only one block can be transformed at a time, so this property is always `false`."
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.Clear
  id: Clear
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Clear()
  nameWithType: FromBase64Transform.Clear()
  fullName: System.Security.Cryptography.FromBase64Transform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases all resources used by the <see cref=&quot;T:System.Security.Cryptography.FromBase64Transform&quot;></see>."
  remarks: "This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.FromBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md)."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.Clear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Dispose()
  nameWithType: FromBase64Transform.Dispose()
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases all resources used by the current instance of the <see cref=&quot;T:System.Security.Cryptography.FromBase64Transform&quot;></see> class."
  remarks: "Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.FromBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.FromBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.FromBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.FromBase64Transform> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.FromBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.FromBase64Transform> object&quot;s `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FromBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases the unmanaged resources used by the <see cref=&quot;T:System.Security.Cryptography.FromBase64Transform&quot;></see> and optionally releases the managed resources."
  remarks: "This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.FromBase64Transform> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n     to release both managed and unmanaged resources;  to release only unmanaged resources."
  overload: System.Security.Cryptography.FromBase64Transform.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.Finalize
  id: Finalize
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: Finalize()
  nameWithType: FromBase64Transform.Finalize()
  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases the unmanaged resources used by the <see cref=&quot;T:System.Security.Cryptography.FromBase64Transform&quot;></see>."
  syntax:
    content: ~FromBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.FromBase64Transform.Finalize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: FromBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the input block size."
  remarks: "The input block size for this transformation is one byte."
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "The size of the input data blocks in bytes."
  overload: System.Security.Cryptography.FromBase64Transform.InputBlockSize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: FromBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the output block size."
  remarks: "The output block size for this transformation is 3 bytes."
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "The size of the output data blocks in bytes."
  overload: System.Security.Cryptography.FromBase64Transform.OutputBlockSize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Converts the specified region of the input byte array from base 64 and copies the result to the specified region of the output byte array."
  remarks: ''
  example:
  - "The following example decrypts a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CPP/89d8dcd5-d4bc-45bd-bddf-_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/VisualBasic/89d8dcd5-d4bc-45bd-bddf-_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CSharp/89d8dcd5-d4bc-45bd-bddf-_1.cs)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "The input to compute from base 64."
    - id: inputOffset
      type: System.Int32
      description: "The offset into the input byte array from which to begin using data."
    - id: inputCount
      type: System.Int32
      description: "The number of bytes in the input byte array to use as data."
    - id: outputBuffer
      type: System.Byte[]
      description: "The output to which to write the result."
    - id: outputOffset
      type: System.Int32
      description: "The offset into the output byte array from which to begin writing data."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Security.Cryptography.FromBase64Transform.TransformBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current  object has already been disposed."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    inputCount uses an invalid value.  \n  \n -or-  \n  \n inputBuffer has an invalid offset length."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    inputOffset is out of range. This parameter requires a non-negative number."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    inputBuffer is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Converts the specified region of the specified byte array from base 64."
  remarks: ''
  example:
  - "The following example decrypts a base 64-encoded file to an output text file.  \n  \n [!code-cpp[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CPP/77c58bc9-6ff0-4b4a-ba5b-_1.cpp)]\n [!code-vb[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/VisualBasic/77c58bc9-6ff0-4b4a-ba5b-_1.vb)]\n [!code-cs[System.Security.Cryptography.FromBase64Transform Example#1](~/add/codesnippet/CSharp/77c58bc9-6ff0-4b4a-ba5b-_1.cs)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "The input to convert from base 64."
    - id: inputOffset
      type: System.Int32
      description: "The offset into the byte array from which to begin using data."
    - id: inputCount
      type: System.Int32
      description: "The number of bytes in the byte array to use as data."
    return:
      type: System.Byte[]
      description: "To be added."
  overload: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current  object has already been disposed."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    inputBuffer has an invalid offset length.  \n  \n -or-  \n  \n inputCount has an invalid value."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    inputOffset is out of range. This parameter requires a non-negative number."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    inputBuffer is ."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.FromBase64Transform.#ctor
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: FromBase64Transform()
  nameWithType: FromBase64Transform.FromBase64Transform()
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()
- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: FromBase64Transform(FromBase64TransformMode)
  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)
- uid: System.Security.Cryptography.FromBase64TransformMode
  parent: System.Security.Cryptography
  isExternal: false
  name: FromBase64TransformMode
  nameWithType: FromBase64TransformMode
  fullName: System.Security.Cryptography.FromBase64TransformMode
- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: FromBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: FromBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.FromBase64Transform.Clear
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Clear()
  nameWithType: FromBase64Transform.Clear()
  fullName: System.Security.Cryptography.FromBase64Transform.Clear()
- uid: System.Security.Cryptography.FromBase64Transform.Dispose
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Dispose()
  nameWithType: FromBase64Transform.Dispose()
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()
- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FromBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)
- uid: System.Security.Cryptography.FromBase64Transform.Finalize
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Finalize()
  nameWithType: FromBase64Transform.Finalize()
  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()
- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: FromBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: FromBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.FromBase64Transform.#ctor*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: FromBase64Transform
  nameWithType: FromBase64Transform.FromBase64Transform
- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: FromBase64Transform.CanReuseTransform
- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: FromBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.FromBase64Transform.Clear*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Clear
  nameWithType: FromBase64Transform.Clear
- uid: System.Security.Cryptography.FromBase64Transform.Dispose*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Dispose
  nameWithType: FromBase64Transform.Dispose
- uid: System.Security.Cryptography.FromBase64Transform.Finalize*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: Finalize
  nameWithType: FromBase64Transform.Finalize
- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: FromBase64Transform.InputBlockSize
- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: FromBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformBlock
  nameWithType: FromBase64Transform.TransformBlock
- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock*
  parent: System.Security.Cryptography.FromBase64Transform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: FromBase64Transform.TransformFinalBlock
