### YamlMime:ManagedReference
items:
- uid: System.Configuration.SectionInformation
  id: SectionInformation
  children:
  - System.Configuration.SectionInformation.AllowDefinition
  - System.Configuration.SectionInformation.AllowExeDefinition
  - System.Configuration.SectionInformation.AllowLocation
  - System.Configuration.SectionInformation.AllowOverride
  - System.Configuration.SectionInformation.ConfigSource
  - System.Configuration.SectionInformation.ForceDeclaration
  - System.Configuration.SectionInformation.ForceDeclaration(System.Boolean)
  - System.Configuration.SectionInformation.ForceSave
  - System.Configuration.SectionInformation.GetParentSection
  - System.Configuration.SectionInformation.GetRawXml
  - System.Configuration.SectionInformation.InheritInChildApplications
  - System.Configuration.SectionInformation.IsDeclarationRequired
  - System.Configuration.SectionInformation.IsDeclared
  - System.Configuration.SectionInformation.IsLocked
  - System.Configuration.SectionInformation.IsProtected
  - System.Configuration.SectionInformation.Name
  - System.Configuration.SectionInformation.OverrideMode
  - System.Configuration.SectionInformation.OverrideModeDefault
  - System.Configuration.SectionInformation.OverrideModeEffective
  - System.Configuration.SectionInformation.ProtectionProvider
  - System.Configuration.SectionInformation.ProtectSection(System.String)
  - System.Configuration.SectionInformation.RequirePermission
  - System.Configuration.SectionInformation.RestartOnExternalChanges
  - System.Configuration.SectionInformation.RevertToParent
  - System.Configuration.SectionInformation.SectionName
  - System.Configuration.SectionInformation.SetRawXml(System.String)
  - System.Configuration.SectionInformation.Type
  - System.Configuration.SectionInformation.UnprotectSection
  langs:
  - csharp
  name: SectionInformation
  nameWithType: SectionInformation
  fullName: System.Configuration.SectionInformation
  type: Class
  summary: "Contains metadata about an individual section within the configuration hierarchy. This class cannot be inherited."
  remarks: "The SectionInformation object contains the metadata about an individual section within the configuration hierarchy. This object can be used in order to validate and change the properties of an individual section."
  example:
  - "The following example shows how to get the SectionInformation metadata that is associated with a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#91](~/add/codesnippet/visualbasic/t-system.configuration.s_2_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#91](~/add/codesnippet/csharp/t-system.configuration.s_2_1.cs)]  \n  \n The following example is an excerpt of the configuration file that is used by the previous example.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<configuration>  \n  <configSections>  \n    <section name=\"MyUrls\" type=\"Samples.AspNet.UrlsSection,  \n      ConfigurationElement, Version=1.0.0.0, Culture=neutral,  \n      PublicKeyToken=null\" allowDefinition=\"Everywhere\"  \n      allowExeDefinition=\"MachineToApplication\"  \n      restartOnExternalChanges=\"true\" />  \n  </configSections>  \n  <MyUrls name=\"MyFavorites\">  \n    <simple name=\"Contoso\" url=\"http://www.contoso.com\" port=\"8080\" />  \n    <urls>  \n      <clear />  \n      <add name=\"Microsoft\" url=\"http://www.microsoft.com\" port=\"0\" />  \n    </urls>  \n  </MyUrls>  \n</configuration>  \n```"
  syntax:
    content: public sealed class SectionInformation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.AllowDefinition
  id: AllowDefinition
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: AllowDefinition
  nameWithType: SectionInformation.AllowDefinition
  fullName: System.Configuration.SectionInformation.AllowDefinition
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be defined."
  remarks: "AllowDefinition applies only to configuration files of Web applications. For client applications, you must use <xref:System.Configuration.SectionInformation.AllowExeDefinition%2A>."
  example:
  - "The examples in this section show how to get the AllowDefinition property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#95](~/add/codesnippet/visualbasic/p-system.configuration.s_17_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#95](~/add/codesnippet/csharp/p-system.configuration.s_17_1.cs)]  \n  \n The following example gets the AllowDefinition value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#96](~/add/codesnippet/visualbasic/p-system.configuration.s_17_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#96](~/add/codesnippet/csharp/p-system.configuration.s_17_2.cs)]"
  syntax:
    content: public System.Configuration.ConfigurationAllowDefinition AllowDefinition { get; set; }
    return:
      type: System.Configuration.ConfigurationAllowDefinition
      description: "A value that indicates where in the configuration file hierarchy the associated <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object can be declared."
  overload: System.Configuration.SectionInformation.AllowDefinition*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The selected value conflicts with a value that is already defined."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.AllowExeDefinition
  id: AllowExeDefinition
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: AllowExeDefinition
  nameWithType: SectionInformation.AllowExeDefinition
  fullName: System.Configuration.SectionInformation.AllowExeDefinition
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be declared."
  remarks: "AllowExeDefinition applies only to configuration files of client applications. For Web applications, you must use <xref:System.Configuration.SectionInformation.AllowDefinition%2A>."
  example:
  - "The examples in this section show how to get the AllowExeDefinition property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#95](~/add/codesnippet/visualbasic/p-system.configuration.s_18_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#95](~/add/codesnippet/csharp/p-system.configuration.s_18_1.cs)]  \n  \n The following example gets the AllowExeDefinition value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#97](~/add/codesnippet/visualbasic/p-system.configuration.s_18_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#97](~/add/codesnippet/csharp/p-system.configuration.s_18_2.cs)]"
  syntax:
    content: public System.Configuration.ConfigurationAllowExeDefinition AllowExeDefinition { get; set; }
    return:
      type: System.Configuration.ConfigurationAllowExeDefinition
      description: "A value that indicates where in the configuration file hierarchy the associated <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object can be declared for .exe files."
  overload: System.Configuration.SectionInformation.AllowExeDefinition*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The selected value conflicts with a value that is already defined."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.AllowLocation
  id: AllowLocation
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: AllowLocation
  nameWithType: SectionInformation.AllowLocation
  fullName: System.Configuration.SectionInformation.AllowLocation
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that indicates whether the configuration section allows the <xref uid=&quot;langword_csharp_location&quot; name=&quot;location&quot; href=&quot;&quot;></xref> attribute."
  remarks: "When set to `false`, the AllowLocation property indicates that the section is accessed by native-code readers. Therefore, the use of the `location` attribute is not allowed, because the native-code readers do not support the concept of `location`."
  example:
  - "The examples in this section show how to get the AllowLocation property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#95](~/add/codesnippet/visualbasic/p-system.configuration.s_6_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#95](~/add/codesnippet/csharp/p-system.configuration.s_6_1.cs)]  \n  \n The following example gets the AllowLocation value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#98](~/add/codesnippet/visualbasic/p-system.configuration.s_6_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#98](~/add/codesnippet/csharp/p-system.configuration.s_6_2.cs)]"
  syntax:
    content: public bool AllowLocation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref uid=&quot;langword_csharp_location&quot; name=&quot;location&quot; href=&quot;&quot;></xref> attribute is allowed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.AllowLocation*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The selected value conflicts with a value that is already defined."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.AllowOverride
  id: AllowOverride
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: AllowOverride
  nameWithType: SectionInformation.AllowOverride
  fullName: System.Configuration.SectionInformation.AllowOverride
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that indicates whether the associated configuration section can be overridden by lower-level configuration files."
  remarks: ''
  example:
  - "The examples in this section show how to get the AllowOverride property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#95](~/add/codesnippet/visualbasic/p-system.configuration.s_16_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#95](~/add/codesnippet/csharp/p-system.configuration.s_16_1.cs)]  \n  \n The following example gets the AllowOverride value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#99](~/add/codesnippet/visualbasic/p-system.configuration.s_16_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#99](~/add/codesnippet/csharp/p-system.configuration.s_16_2.cs)]"
  syntax:
    content: public bool AllowOverride { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the section can be overridden; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.AllowOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.ConfigSource
  id: ConfigSource
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: ConfigSource
  nameWithType: SectionInformation.ConfigSource
  fullName: System.Configuration.SectionInformation.ConfigSource
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets the name of the include file in which the associated configuration section is defined, if such a file exists."
  remarks: "The ConfigSource property represents the value of the `configSource` attribute that is specified for a <xref:System.Configuration.ConfigurationSection> object that is associated with the <xref:System.Configuration.SectionInformation> object.       A <xref:System.Configuration.ConfigurationSection> implementation can optionally specify a separate file in which the configuration settings for that section are defined. This can be useful in multiple ways:      -   Using include files can result in a more logical and modular structure for configuration files.      -   File-access security and permissions can be used to restrict access to sections of configuration settings.      -   Settings in an include file that are not used during application initialization can be modified and reloaded without requiring an application restart.       The following example shows how this attribute is used in a configuration file to specify that the `pages` section is defined in an external include file:       `<pages configSource=&quot;pages.config&quot;/>`       If any of the settings in a configuration include file require the application to restart when they are modified, set the <xref:System.Configuration.SectionInformation.RestartOnExternalChanges%2A> property to `true`.       In ASP.NET applications, at run time you can assign to the ConfigSource property the name of an alternative configuration file. In that case, the contents of the file are overwritten by the default connection string information that is contained in the Web.config file. This occurs also when the alternative file does not exist and it is created at run time. If the Web.config file does not contain any connection string information, an empty  section is added to the alternative file."
  syntax:
    content: public string ConfigSource { get; set; }
    return:
      type: System.String
      description: "The name of the include file in which the associated <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> is defined, if such a file exists; otherwise, an empty string (&quot;&quot;)."
  overload: System.Configuration.SectionInformation.ConfigSource*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.ForceDeclaration
  id: ForceDeclaration
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: ForceDeclaration()
  nameWithType: SectionInformation.ForceDeclaration()
  fullName: System.Configuration.SectionInformation.ForceDeclaration()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Forces the associated configuration section to appear in the configuration file."
  remarks: "The ForceDeclaration method forces this <xref:System.Configuration.SectionInformation> declaration to be written to the configuration file.      > [!NOTE] >  The ForceDeclaration method can force a <xref:System.Configuration.SectionInformation> declaration to be written to a configuration file, even if the section is not required because it is already declared in a parent file. Using the ForceDeclaration method can make a configuration file more portable from one computer to another. It enables you to make sure that the section exists even when you do not have control over parent configuration files."
  syntax:
    content: public void ForceDeclaration ();
    parameters: []
  overload: System.Configuration.SectionInformation.ForceDeclaration*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.ForceDeclaration(System.Boolean)
  id: ForceDeclaration(System.Boolean)
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: ForceDeclaration(Boolean)
  nameWithType: SectionInformation.ForceDeclaration(Boolean)
  fullName: System.Configuration.SectionInformation.ForceDeclaration(Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Forces the associated configuration section to appear in the configuration file, or removes an existing section from the configuration file."
  remarks: "The ForceDeclaration method forces this <xref:System.Configuration.SectionInformation> declaration to be written to the configuration file if `force` is `true`. If `force` is `false`, this action might be ignored if the <xref:System.Configuration.SectionInformation> declaration is required by the system.      > [!NOTE] >  The ForceDeclaration method can force a <xref:System.Configuration.SectionInformation> declaration to be written to a configuration file, even if this section is not required because it is already declared in a parent file. Using the <xref:System.Configuration.SectionInformation.ForceDeclaration%2A> method can make a configuration file more portable from one computer to another. This also lets you make sure that the section exists even if you do not have control over parent configuration files."
  example:
  - "The following example shows how to use the ForceDeclaration method.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#113](~/add/codesnippet/visualbasic/m-system.configuration.s_0_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#113](~/add/codesnippet/csharp/m-system.configuration.s_0_1.cs)]"
  syntax:
    content: public void ForceDeclaration (bool force);
    parameters:
    - id: force
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the associated section should be written in the configuration file; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.ForceDeclaration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>force</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> and the associated section cannot be exported to the child configuration file, or it is undeclared."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.ForceSave
  id: ForceSave
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: ForceSave
  nameWithType: SectionInformation.ForceSave
  fullName: System.Configuration.SectionInformation.ForceSave
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that indicates whether the associated configuration section will be saved even if it has not been modified."
  remarks: ''
  example:
  - "The following example shows how to use the ForceSave property of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#1](~/add/codesnippet/csharp/p-system.configuration.s_7_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#1](~/add/codesnippet/visualbasic/p-system.configuration.s_7_1.vb)]"
  syntax:
    content: public bool ForceSave { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the associated <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object will be saved even if it has not been modified; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.       <div class=&quot;alert NOTE&quot;>    If the configuration file is saved (even if there are no modifications), ASP.NET restarts the application.      </div>"
  overload: System.Configuration.SectionInformation.ForceSave*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.GetParentSection
  id: GetParentSection
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: GetParentSection()
  nameWithType: SectionInformation.GetParentSection()
  fullName: System.Configuration.SectionInformation.GetParentSection()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets the configuration section that contains the configuration section associated with this object."
  remarks: "If this <xref:System.Configuration.ConfigurationSection> object has no parent sections, the GetParentSection method returns the same value as the <xref:System.Configuration.SectionInformation.Name%2A> property."
  example:
  - "The following example shows how to use the GetParentSection method.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#92](~/add/codesnippet/visualbasic/m-system.configuration.s_5_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#92](~/add/codesnippet/csharp/m-system.configuration.s_5_1.cs)]"
  syntax:
    content: public System.Configuration.ConfigurationSection GetParentSection ();
    parameters: []
    return:
      type: System.Configuration.ConfigurationSection
      description: "The configuration section that contains the <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> that is associated with this <xref href=&quot;System.Configuration.SectionInformation&quot;></xref> object."
  overload: System.Configuration.SectionInformation.GetParentSection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is invoked from a parent section."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.GetRawXml
  id: GetRawXml
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: GetRawXml()
  nameWithType: SectionInformation.GetRawXml()
  fullName: System.Configuration.SectionInformation.GetRawXml()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Returns an XML node object that represents the associated configuration-section object."
  remarks: ''
  example:
  - "The following example shows how to use the GetRawXml method.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#93](~/add/codesnippet/visualbasic/m-system.configuration.s_4_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#93](~/add/codesnippet/csharp/m-system.configuration.s_4_1.cs)]"
  syntax:
    content: public string GetRawXml ();
    parameters: []
    return:
      type: System.String
      description: "The XML representation for this configuration section."
  overload: System.Configuration.SectionInformation.GetRawXml*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This configuration object is locked and cannot be edited."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.InheritInChildApplications
  id: InheritInChildApplications
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: InheritInChildApplications
  nameWithType: SectionInformation.InheritInChildApplications
  fullName: System.Configuration.SectionInformation.InheritInChildApplications
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that indicates whether the settings that are specified in the associated configuration section are inherited by applications that reside in a subdirectory of the relevant application."
  remarks: "The InheritInChildApplications property represents the `inheritInChildApplications`attribute of a `location` element in a configuration file.       Set InheritInChildApplications to `false` to prevent settings that are specific to a certain location (such as the root directory of a Web site) from being inherited by applications that exist in subdirectories.       The following example shows how to use this attribute in a configuration file to specify that the settings defined in the location element for the root of a Web site should not be inherited by child applications:       `<location path=&quot;.&quot; inheritInChildApplications=&quot;false&quot;>`       The InheritInChildApplications property applies only to location-specific configuration settings."
  example:
  - "The following example shows how to get the InheritInChildApplications value of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#100](~/add/codesnippet/visualbasic/p-system.configuration.s_13_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#100](~/add/codesnippet/csharp/p-system.configuration.s_13_1.cs)]"
  syntax:
    content: public bool InheritInChildApplications { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the settings specified in this <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object are inherited by child applications; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.InheritInChildApplications*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.IsDeclarationRequired
  id: IsDeclarationRequired
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: IsDeclarationRequired
  nameWithType: SectionInformation.IsDeclarationRequired
  fullName: System.Configuration.SectionInformation.IsDeclarationRequired
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets a value that indicates whether the configuration section must be declared in the configuration file."
  remarks: ''
  example:
  - "The examples in this section show how to get the IsDeclarationRequired property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#102](~/add/codesnippet/visualbasic/p-system.configuration.s_0_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#102](~/add/codesnippet/csharp/p-system.configuration.s_0_1.cs)]  \n  \n The following example gets the IsDeclarationRequired value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#103](~/add/codesnippet/visualbasic/p-system.configuration.s_0_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#103](~/add/codesnippet/csharp/p-system.configuration.s_0_2.cs)]"
  syntax:
    content: public bool IsDeclarationRequired { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the associated <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object must be declared in the configuration file; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.IsDeclarationRequired*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.IsDeclared
  id: IsDeclared
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: IsDeclared
  nameWithType: SectionInformation.IsDeclared
  fullName: System.Configuration.SectionInformation.IsDeclared
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets a value that indicates whether the associated configuration section is declared in the configuration file."
  remarks: ''
  example:
  - "The examples in this section show how to get the IsDeclared property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#102](~/add/codesnippet/visualbasic/p-system.configuration.s_2_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#102](~/add/codesnippet/csharp/p-system.configuration.s_2_1.cs)]  \n  \n The following example gets the IsDeclared value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#104](~/add/codesnippet/visualbasic/p-system.configuration.s_2_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#104](~/add/codesnippet/csharp/p-system.configuration.s_2_2.cs)]"
  syntax:
    content: public bool IsDeclared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> is declared in the configuration file; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.IsDeclared*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.IsLocked
  id: IsLocked
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: IsLocked
  nameWithType: SectionInformation.IsLocked
  fullName: System.Configuration.SectionInformation.IsLocked
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets a value that indicates whether the associated configuration section is locked."
  remarks: "The IsLocked property returns `true` when the related section is locked by the <xref:System.Configuration.SectionInformation.AllowOverride%2A> or the <xref:System.Configuration.SectionInformation.AllowDefinition%2A> property. A section is locked if it cannot be overridden or defined in the current configuration file."
  example:
  - "The examples in this section show how to get the IsLocked property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#102](~/add/codesnippet/visualbasic/p-system.configuration.s_5_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#102](~/add/codesnippet/csharp/p-system.configuration.s_5_1.cs)]  \n  \n The following example gets the IsLocked value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#105](~/add/codesnippet/visualbasic/p-system.configuration.s_5_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#105](~/add/codesnippet/csharp/p-system.configuration.s_5_2.cs)]"
  syntax:
    content: public bool IsLocked { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the section is locked; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.IsLocked*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.IsProtected
  id: IsProtected
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: IsProtected
  nameWithType: SectionInformation.IsProtected
  fullName: System.Configuration.SectionInformation.IsProtected
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets a value that indicates whether the associated configuration section is protected."
  remarks: "Protected configuration sections are encrypted and read-only.       For more information about protected configuration sections, see [Encrypting Configuration Information Using Protected Configuration](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The examples in this section show how to get the IsProtected property value after accessing the related section information in the configuration file.  \n  \n The following example gets the <xref:System.Configuration.SectionInformation> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#102](~/add/codesnippet/visualbasic/p-system.configuration.s_14_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#102](~/add/codesnippet/csharp/p-system.configuration.s_14_1.cs)]  \n  \n The following example gets the IsProtected value.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#106](~/add/codesnippet/visualbasic/p-system.configuration.s_14_2.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#106](~/add/codesnippet/csharp/p-system.configuration.s_14_2.cs)]"
  syntax:
    content: public bool IsProtected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> is protected; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.IsProtected*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.Name
  id: Name
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: Name
  nameWithType: SectionInformation.Name
  fullName: System.Configuration.SectionInformation.Name
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets the name of the associated configuration section."
  remarks: "The Name is the name of the section without the path."
  example:
  - "The following example shows how to get the Name value of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#107](~/add/codesnippet/visualbasic/p-system.configuration.s_9_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#107](~/add/codesnippet/csharp/p-system.configuration.s_9_1.cs)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "The complete name of the configuration section."
  overload: System.Configuration.SectionInformation.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.OverrideMode
  id: OverrideMode
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: OverrideMode
  nameWithType: SectionInformation.OverrideMode
  fullName: System.Configuration.SectionInformation.OverrideMode
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets the <xref href=&quot;System.Configuration.OverrideMode&quot;></xref> enumeration value that specifies whether the associated configuration section can be overridden by child configuration files."
  remarks: "The <xref:System.Configuration.SectionInformation.AllowOverride%2A> property gets or sets a value that indicates whether resources declared inside a `location` element can be overridden by child configuration files. The OverrideMode property gets or sets a value that specifies similar behavior, but does so for a specific configuration element or group, and uses one of the <xref:System.Configuration.OverrideMode> enumeration values. The OverrideMode property enables behavior to be inherited from a parent element.       You cannot programmatically set both the <xref:System.Configuration.SectionInformation.AllowOverride%2A> and OverrideMode property. Setting the <xref:System.Configuration.SectionInformation.AllowOverride%2A> property to `true` sets the OverrideMode property to <xref:System.Configuration.OverrideMode>. Setting the <xref:System.Configuration.SectionInformation.AllowOverride%2A> property to `false` sets the OverrideMode property to `false`."
  syntax:
    content: public System.Configuration.OverrideMode OverrideMode { get; set; }
    return:
      type: System.Configuration.OverrideMode
      description: "One of the <xref href=&quot;System.Configuration.OverrideMode&quot;></xref> enumeration values."
  overload: System.Configuration.SectionInformation.OverrideMode*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "An attempt was made to change both the <xref:System.Configuration.SectionInformation.AllowOverride*> and OverrideMode properties, which is not supported for compatibility reasons."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.OverrideModeDefault
  id: OverrideModeDefault
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: OverrideModeDefault
  nameWithType: SectionInformation.OverrideModeDefault
  fullName: System.Configuration.SectionInformation.OverrideModeDefault
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that specifies the default override behavior of a configuration section by child configuration files."
  remarks: "The OverrideModeDefault property of a configuration section can only be set to the <xref:System.Configuration.OverrideMode> or <xref:System.Configuration.OverrideMode> value of the <xref:System.Configuration.OverrideMode> enumeration. Setting the OverrideModeDefault property to <xref:System.Configuration.OverrideMode> is equivalent to setting the value to <xref:System.Configuration.OverrideMode>."
  syntax:
    content: public System.Configuration.OverrideMode OverrideModeDefault { get; set; }
    return:
      type: System.Configuration.OverrideMode
      description: "One of the <xref href=&quot;System.Configuration.OverrideMode&quot;></xref> enumeration values."
  overload: System.Configuration.SectionInformation.OverrideModeDefault*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The override behavior is specified in a parent configuration section."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.OverrideModeEffective
  id: OverrideModeEffective
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: OverrideModeEffective
  nameWithType: SectionInformation.OverrideModeEffective
  fullName: System.Configuration.SectionInformation.OverrideModeEffective
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets the override behavior of a configuration section that is in turn based on whether child configuration files can lock the configuration section."
  remarks: "This property returns either <xref:System.Configuration.OverrideMode> or <xref:System.Configuration.OverrideMode>."
  syntax:
    content: public System.Configuration.OverrideMode OverrideModeEffective { get; }
    return:
      type: System.Configuration.OverrideMode
      description: "One of the <xref href=&quot;System.Configuration.OverrideMode&quot;></xref> enumeration values."
  overload: System.Configuration.SectionInformation.OverrideModeEffective*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.ProtectionProvider
  id: ProtectionProvider
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: ProtectionProvider
  nameWithType: SectionInformation.ProtectionProvider
  fullName: System.Configuration.SectionInformation.ProtectionProvider
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets the protected configuration provider for the associated configuration section."
  remarks: "For unprotected sections, the ProtectionProvider property is `null`.       For more information about protected configuration sections, see [Encrypting Configuration Information Using Protected Configuration](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to get the <xref:System.Configuration.SectionInformation.ProtectSection%2A> value of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#108](~/add/codesnippet/visualbasic/p-system.configuration.s_11_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#108](~/add/codesnippet/csharp/p-system.configuration.s_11_1.cs)]"
  syntax:
    content: public System.Configuration.ProtectedConfigurationProvider ProtectionProvider { get; }
    return:
      type: System.Configuration.ProtectedConfigurationProvider
      description: "The protected configuration provider for this <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object."
  overload: System.Configuration.SectionInformation.ProtectionProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.ProtectSection(System.String)
  id: ProtectSection(System.String)
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: ProtectSection(String)
  nameWithType: SectionInformation.ProtectSection(String)
  fullName: System.Configuration.SectionInformation.ProtectSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Marks a configuration section for protection."
  remarks: "The ProtectSection method marks the section for encryption so it will be written in encrypted form on disk.       The following protection providers are included by default:       <xref:System.Configuration.DpapiProtectedConfigurationProvider>       <xref:System.Configuration.RsaProtectedConfigurationProvider>      > [!NOTE] >  If you call the ProtectSection method with a `null` parameter or an empty string, the <xref:System.Configuration.RsaProtectedConfigurationProvider> class is used as the protection provider.       For more information about protected configuration sections, see [Encrypting Configuration Information Using Protected Configuration](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to use the ProtectSection method.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#94](~/add/codesnippet/visualbasic/m-system.configuration.s_3_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#94](~/add/codesnippet/csharp/m-system.configuration.s_3_1.cs)]"
  syntax:
    content: public void ProtectSection (string protectionProvider);
    parameters:
    - id: protectionProvider
      type: System.String
      description: "The name of the protection provider to use."
  overload: System.Configuration.SectionInformation.ProtectSection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Configuration.SectionInformation.AllowLocation*> property is set to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The target section is already a protected data section."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.RequirePermission
  id: RequirePermission
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: RequirePermission
  nameWithType: SectionInformation.RequirePermission
  fullName: System.Configuration.SectionInformation.RequirePermission
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets a value that indicates whether the associated configuration section requires access permissions."
  remarks: "When RequirePermission is set to `true`, the `GetSection` methods are restricted by the trust level setting of the application. This means that methods or properties that allow access to configuration section handlers are restricted by the trust level set for the Web application.      > [!NOTE] >  Because high and full trust are the only levels that allow access to files outside the current application domain, an application can use configuration section handlers only at these trust levels.       When RequirePermission is set to `false`, the access to the configuration data is not restricted by the application&quot;s trust level settings.      > [!NOTE] >  The appropriate file ACL (Access Control List) permissions are still required, regardless of the RequirePermission setting. ACL permissions determine who can access the configuration file."
  example:
  - "The following example shows two possible trust levels for a Web application when the RequirePermission property of the `appSettings` section is `true`.  \n  \n```  \n<system.web>  \n   // With the following trust value   \n   // the code below works.  \n  <trust level=\"Full\" />  \n</system.web>  \n  \n<system.web>  \n  // With the following trust value   \n  // the code below does not work.  \n  <trust level=\"Medium\" />  \n</system.web>  \n```  \n  \n The following example shows code that runs without errors when the trust level is set to full. Otherwise, the code results in an error.  \n  \n```c#  \nAppSettingsSection apSection =   \n  ConfigurationManager.GetSection(\"appSettings\") as AppSettingsSection;  \n  \nNameValueCollection apSectionCollection =  \n  ConfigurationManager.AppSettings;  \n```  \n  \n```vb#  \nDim apSection As AppSettingsSection = _   \n  TryCast(ConfigurationManager.GetSection(\"appSettings\"),   \n    AppSettingsSection)  \n  \n  Dim apSectionCollection As NameValueCollection = _   \n    ConfigurationManager.AppSettings  \n```"
  syntax:
    content: public bool RequirePermission { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref uid=&quot;langword_csharp_requirePermission&quot; name=&quot;requirePermission&quot; href=&quot;&quot;></xref> attribute is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.RequirePermission*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The selected value conflicts with a value that is already defined."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.RestartOnExternalChanges
  id: RestartOnExternalChanges
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: RestartOnExternalChanges
  nameWithType: SectionInformation.RestartOnExternalChanges
  fullName: System.Configuration.SectionInformation.RestartOnExternalChanges
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets a value that specifies whether a change in an external configuration include file requires an application restart."
  remarks: "Set the RestartOnExternalChanges property to `false` to prevent an application restart when configuration settings in the external include file are modified for this <xref:System.Configuration.ConfigurationSection> object."
  example:
  - "The following example shows how to get the RestartOnExternalChanges property value of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#109](~/add/codesnippet/visualbasic/p-system.configuration.s_1_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#109](~/add/codesnippet/csharp/p-system.configuration.s_1_1.cs)]"
  syntax:
    content: public bool RestartOnExternalChanges { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a change in an external configuration include file requires an application restart; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SectionInformation.RestartOnExternalChanges*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The selected value conflicts with a value that is already defined."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.RevertToParent
  id: RevertToParent
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: RevertToParent()
  nameWithType: SectionInformation.RevertToParent()
  fullName: System.Configuration.SectionInformation.RevertToParent()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Causes the associated configuration section to inherit all its values from the parent section."
  syntax:
    content: public void RevertToParent ();
    parameters: []
  overload: System.Configuration.SectionInformation.RevertToParent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This method cannot be called outside editing mode."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.SectionName
  id: SectionName
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: SectionName
  nameWithType: SectionInformation.SectionName
  fullName: System.Configuration.SectionInformation.SectionName
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets the name of the associated configuration section."
  remarks: "The SectionName property value is the complete section name, which includes the configuration inheritance hierarchy."
  example:
  - "The following example shows how to get the SectionName value of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#110](~/add/codesnippet/visualbasic/p-system.configuration.s_10_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#110](~/add/codesnippet/csharp/p-system.configuration.s_10_1.cs)]"
  syntax:
    content: public string SectionName { get; }
    return:
      type: System.String
      description: "The name of the associated <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> object."
  overload: System.Configuration.SectionInformation.SectionName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SectionInformation.SetRawXml(System.String)
  id: SetRawXml(System.String)
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: SetRawXml(String)
  nameWithType: SectionInformation.SetRawXml(String)
  fullName: System.Configuration.SectionInformation.SetRawXml(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Sets the object to an XML representation of the associated configuration section within the configuration file."
  syntax:
    content: public void SetRawXml (string rawXml);
    parameters:
    - id: rawXml
      type: System.String
      description: "The XML to use."
  overload: System.Configuration.SectionInformation.SetRawXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>rawXml</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.Type
  id: Type
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: Type
  nameWithType: SectionInformation.Type
  fullName: System.Configuration.SectionInformation.Type
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Gets or sets the section class name."
  remarks: "The Type property returns the name of the section class that handles this instance of the <xref:System.Configuration.ConfigurationSection> class."
  example:
  - "The following example shows how to get the Type value of a <xref:System.Configuration.ConfigurationSection> object.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#111](~/add/codesnippet/visualbasic/p-system.configuration.s_3_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#111](~/add/codesnippet/csharp/p-system.configuration.s_3_1.cs)]"
  syntax:
    content: public string Type { get; set; }
    return:
      type: System.String
      description: "The name of the class that is associated with this <xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref> section."
  overload: System.Configuration.SectionInformation.Type*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The selected value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty string (&quot;&quot;)."
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The selected value conflicts with a value that is already defined."
  platform:
  - net462
- uid: System.Configuration.SectionInformation.UnprotectSection
  id: UnprotectSection
  parent: System.Configuration.SectionInformation
  langs:
  - csharp
  name: UnprotectSection()
  nameWithType: SectionInformation.UnprotectSection()
  fullName: System.Configuration.SectionInformation.UnprotectSection()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Removes the protected configuration encryption from the associated configuration section."
  remarks: "For more information about protected configuration sections, see [Encrypting Configuration Information Using Protected Configuration](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to use this method.  \n  \n [!code-vb[System.Configuration.ConfigurationElement#112](~/add/codesnippet/visualbasic/m-system.configuration.s_6_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#112](~/add/codesnippet/csharp/m-system.configuration.s_6_1.cs)]"
  syntax:
    content: public void UnprotectSection ();
    parameters: []
  overload: System.Configuration.SectionInformation.UnprotectSection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.SectionInformation.AllowDefinition
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowDefinition
  nameWithType: SectionInformation.AllowDefinition
  fullName: System.Configuration.SectionInformation.AllowDefinition
- uid: System.Configuration.ConfigurationAllowDefinition
  parent: System.Configuration
  isExternal: false
  name: ConfigurationAllowDefinition
  nameWithType: ConfigurationAllowDefinition
  fullName: System.Configuration.ConfigurationAllowDefinition
- uid: System.Configuration.SectionInformation.AllowExeDefinition
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowExeDefinition
  nameWithType: SectionInformation.AllowExeDefinition
  fullName: System.Configuration.SectionInformation.AllowExeDefinition
- uid: System.Configuration.ConfigurationAllowExeDefinition
  parent: System.Configuration
  isExternal: false
  name: ConfigurationAllowExeDefinition
  nameWithType: ConfigurationAllowExeDefinition
  fullName: System.Configuration.ConfigurationAllowExeDefinition
- uid: System.Configuration.SectionInformation.AllowLocation
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowLocation
  nameWithType: SectionInformation.AllowLocation
  fullName: System.Configuration.SectionInformation.AllowLocation
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.SectionInformation.AllowOverride
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowOverride
  nameWithType: SectionInformation.AllowOverride
  fullName: System.Configuration.SectionInformation.AllowOverride
- uid: System.Configuration.SectionInformation.ConfigSource
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ConfigSource
  nameWithType: SectionInformation.ConfigSource
  fullName: System.Configuration.SectionInformation.ConfigSource
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SectionInformation.ForceDeclaration
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ForceDeclaration()
  nameWithType: SectionInformation.ForceDeclaration()
  fullName: System.Configuration.SectionInformation.ForceDeclaration()
- uid: System.Configuration.SectionInformation.ForceDeclaration(System.Boolean)
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ForceDeclaration(Boolean)
  nameWithType: SectionInformation.ForceDeclaration(Boolean)
  fullName: System.Configuration.SectionInformation.ForceDeclaration(Boolean)
- uid: System.Configuration.SectionInformation.ForceSave
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ForceSave
  nameWithType: SectionInformation.ForceSave
  fullName: System.Configuration.SectionInformation.ForceSave
- uid: System.Configuration.SectionInformation.GetParentSection
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: GetParentSection()
  nameWithType: SectionInformation.GetParentSection()
  fullName: System.Configuration.SectionInformation.GetParentSection()
- uid: System.Configuration.ConfigurationSection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationSection
  nameWithType: ConfigurationSection
  fullName: System.Configuration.ConfigurationSection
- uid: System.Configuration.SectionInformation.GetRawXml
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: GetRawXml()
  nameWithType: SectionInformation.GetRawXml()
  fullName: System.Configuration.SectionInformation.GetRawXml()
- uid: System.Configuration.SectionInformation.InheritInChildApplications
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: InheritInChildApplications
  nameWithType: SectionInformation.InheritInChildApplications
  fullName: System.Configuration.SectionInformation.InheritInChildApplications
- uid: System.Configuration.SectionInformation.IsDeclarationRequired
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsDeclarationRequired
  nameWithType: SectionInformation.IsDeclarationRequired
  fullName: System.Configuration.SectionInformation.IsDeclarationRequired
- uid: System.Configuration.SectionInformation.IsDeclared
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsDeclared
  nameWithType: SectionInformation.IsDeclared
  fullName: System.Configuration.SectionInformation.IsDeclared
- uid: System.Configuration.SectionInformation.IsLocked
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsLocked
  nameWithType: SectionInformation.IsLocked
  fullName: System.Configuration.SectionInformation.IsLocked
- uid: System.Configuration.SectionInformation.IsProtected
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsProtected
  nameWithType: SectionInformation.IsProtected
  fullName: System.Configuration.SectionInformation.IsProtected
- uid: System.Configuration.SectionInformation.Name
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: Name
  nameWithType: SectionInformation.Name
  fullName: System.Configuration.SectionInformation.Name
- uid: System.Configuration.SectionInformation.OverrideMode
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: OverrideMode
  nameWithType: SectionInformation.OverrideMode
  fullName: System.Configuration.SectionInformation.OverrideMode
- uid: System.Configuration.OverrideMode
  parent: System.Configuration
  isExternal: false
  name: OverrideMode
  nameWithType: OverrideMode
  fullName: System.Configuration.OverrideMode
- uid: System.Configuration.SectionInformation.OverrideModeDefault
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: OverrideModeDefault
  nameWithType: SectionInformation.OverrideModeDefault
  fullName: System.Configuration.SectionInformation.OverrideModeDefault
- uid: System.Configuration.SectionInformation.OverrideModeEffective
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: OverrideModeEffective
  nameWithType: SectionInformation.OverrideModeEffective
  fullName: System.Configuration.SectionInformation.OverrideModeEffective
- uid: System.Configuration.SectionInformation.ProtectionProvider
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ProtectionProvider
  nameWithType: SectionInformation.ProtectionProvider
  fullName: System.Configuration.SectionInformation.ProtectionProvider
- uid: System.Configuration.ProtectedConfigurationProvider
  parent: System.Configuration
  isExternal: false
  name: ProtectedConfigurationProvider
  nameWithType: ProtectedConfigurationProvider
  fullName: System.Configuration.ProtectedConfigurationProvider
- uid: System.Configuration.SectionInformation.ProtectSection(System.String)
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ProtectSection(String)
  nameWithType: SectionInformation.ProtectSection(String)
  fullName: System.Configuration.SectionInformation.ProtectSection(String)
- uid: System.Configuration.SectionInformation.RequirePermission
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: RequirePermission
  nameWithType: SectionInformation.RequirePermission
  fullName: System.Configuration.SectionInformation.RequirePermission
- uid: System.Configuration.SectionInformation.RestartOnExternalChanges
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: RestartOnExternalChanges
  nameWithType: SectionInformation.RestartOnExternalChanges
  fullName: System.Configuration.SectionInformation.RestartOnExternalChanges
- uid: System.Configuration.SectionInformation.RevertToParent
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: RevertToParent()
  nameWithType: SectionInformation.RevertToParent()
  fullName: System.Configuration.SectionInformation.RevertToParent()
- uid: System.Configuration.SectionInformation.SectionName
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: SectionName
  nameWithType: SectionInformation.SectionName
  fullName: System.Configuration.SectionInformation.SectionName
- uid: System.Configuration.SectionInformation.SetRawXml(System.String)
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: SetRawXml(String)
  nameWithType: SectionInformation.SetRawXml(String)
  fullName: System.Configuration.SectionInformation.SetRawXml(String)
- uid: System.Configuration.SectionInformation.Type
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: Type
  nameWithType: SectionInformation.Type
  fullName: System.Configuration.SectionInformation.Type
- uid: System.Configuration.SectionInformation.UnprotectSection
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: UnprotectSection()
  nameWithType: SectionInformation.UnprotectSection()
  fullName: System.Configuration.SectionInformation.UnprotectSection()
- uid: System.Configuration.SectionInformation.AllowDefinition*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowDefinition
  nameWithType: SectionInformation.AllowDefinition
- uid: System.Configuration.SectionInformation.AllowExeDefinition*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowExeDefinition
  nameWithType: SectionInformation.AllowExeDefinition
- uid: System.Configuration.SectionInformation.AllowLocation*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowLocation
  nameWithType: SectionInformation.AllowLocation
- uid: System.Configuration.SectionInformation.AllowOverride*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: AllowOverride
  nameWithType: SectionInformation.AllowOverride
- uid: System.Configuration.SectionInformation.ConfigSource*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ConfigSource
  nameWithType: SectionInformation.ConfigSource
- uid: System.Configuration.SectionInformation.ForceDeclaration*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ForceDeclaration
  nameWithType: SectionInformation.ForceDeclaration
- uid: System.Configuration.SectionInformation.ForceSave*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ForceSave
  nameWithType: SectionInformation.ForceSave
- uid: System.Configuration.SectionInformation.GetParentSection*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: GetParentSection
  nameWithType: SectionInformation.GetParentSection
- uid: System.Configuration.SectionInformation.GetRawXml*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: GetRawXml
  nameWithType: SectionInformation.GetRawXml
- uid: System.Configuration.SectionInformation.InheritInChildApplications*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: InheritInChildApplications
  nameWithType: SectionInformation.InheritInChildApplications
- uid: System.Configuration.SectionInformation.IsDeclarationRequired*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsDeclarationRequired
  nameWithType: SectionInformation.IsDeclarationRequired
- uid: System.Configuration.SectionInformation.IsDeclared*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsDeclared
  nameWithType: SectionInformation.IsDeclared
- uid: System.Configuration.SectionInformation.IsLocked*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsLocked
  nameWithType: SectionInformation.IsLocked
- uid: System.Configuration.SectionInformation.IsProtected*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: IsProtected
  nameWithType: SectionInformation.IsProtected
- uid: System.Configuration.SectionInformation.Name*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: Name
  nameWithType: SectionInformation.Name
- uid: System.Configuration.SectionInformation.OverrideMode*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: OverrideMode
  nameWithType: SectionInformation.OverrideMode
- uid: System.Configuration.SectionInformation.OverrideModeDefault*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: OverrideModeDefault
  nameWithType: SectionInformation.OverrideModeDefault
- uid: System.Configuration.SectionInformation.OverrideModeEffective*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: OverrideModeEffective
  nameWithType: SectionInformation.OverrideModeEffective
- uid: System.Configuration.SectionInformation.ProtectionProvider*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ProtectionProvider
  nameWithType: SectionInformation.ProtectionProvider
- uid: System.Configuration.SectionInformation.ProtectSection*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: ProtectSection
  nameWithType: SectionInformation.ProtectSection
- uid: System.Configuration.SectionInformation.RequirePermission*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: RequirePermission
  nameWithType: SectionInformation.RequirePermission
- uid: System.Configuration.SectionInformation.RestartOnExternalChanges*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: RestartOnExternalChanges
  nameWithType: SectionInformation.RestartOnExternalChanges
- uid: System.Configuration.SectionInformation.RevertToParent*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: RevertToParent
  nameWithType: SectionInformation.RevertToParent
- uid: System.Configuration.SectionInformation.SectionName*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: SectionName
  nameWithType: SectionInformation.SectionName
- uid: System.Configuration.SectionInformation.SetRawXml*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: SetRawXml
  nameWithType: SectionInformation.SetRawXml
- uid: System.Configuration.SectionInformation.Type*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: Type
  nameWithType: SectionInformation.Type
- uid: System.Configuration.SectionInformation.UnprotectSection*
  parent: System.Configuration.SectionInformation
  isExternal: false
  name: UnprotectSection
  nameWithType: SectionInformation.UnprotectSection
