### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "Represents an object that participates in the dependency property system."
  remarks: "The DependencyObject class enables [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] property system services on its many derived classes.       The property system&quot;s primary function is to compute the values of properties, and to provide system notification about values that have changed. Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>. <xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas DependencyObject as a base class enables objects to use the dependency properties.       DependencyObject services and characteristics include the following:      -   Dependency property hosting support. You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method&quot;s return value as a public static field in your class.      -   Attached property hosting support. You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method&quot;s return value as a public static read-only field in your class. (There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties. For details, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).) Your attached property can then be set on any class that derives from DependencyObject.      -   Get, set, and clear utility methods for values of any dependency properties that exist on the DependencyObject.      -   Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties. Also, the DependencyObject class facilitates the per-owner property metadata for a dependency property.      -   A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>. (<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.DependencyObject&quot;></xref> class."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Clears the local value of a property. The property to be cleared is specified by a <xref href=&quot;System.Windows.DependencyProperty&quot;></xref> identifier."
  remarks: "Clearing the property value by calling ClearValue does not necessarily give a dependency property the default value that is specified in the dependency property metadata. Clearing the property only specifically clears whatever local value may have been applied. For more information, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The dependency property to be cleared, identified by a <xref href=&quot;System.Windows.DependencyProperty&quot;></xref> object reference."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Attempted to call ClearValue on a sealed <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Clears the local value of a read-only property. The property to be cleared is specified by a <xref href=&quot;System.Windows.DependencyPropertyKey&quot;></xref>."
  remarks: "A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations. Classes that define read-only dependency properties should not expose this key with public access. A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.       Clearing the property value by calling ClearValue does not necessarily give a dependency property the default value that is specified in the dependency property metadata. Clearing the value only specifically clears whatever local value may have been applied. For more information, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "The key for the dependency property to be cleared."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Attempted to call <xref:System.Windows.DependencyObject.ClearValue*> on a sealed <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Coerces the value of the specified dependency property. This is accomplished by invoking any <xref href=&quot;System.Windows.CoerceValueCallback&quot;></xref> function specified in property metadata for the dependency property as it exists on the calling <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  remarks: "In addition to being explicitly invoked through calling CoerceValue, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] property system.       When you invoke the CoerceValue method, you are ultimately invoking the coerce value callback for the property that you specify. Typically you will invoke CoerceValue only if you know that a coerce value callback exists, and if you know the callback&quot;s criteria for coercion.       The most common scenario for calling CoerceValue is within class handling or property change callbacks of related properties that influence each other&quot;s values in a dependent way. For more information, see [Dependency Property Callbacks and Validation](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The identifier for the dependency property to coerce."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The specified <code>dp</code> or its value were invalid or do not exist."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the <xref href=&quot;System.Windows.DependencyObjectType&quot;></xref> that wraps the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] type of this instance."
  remarks: "This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type. For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] type. <xref:System.Windows.DependencyObjectType> facilitates faster lookup."
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;></xref> that wraps the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] type of this instance."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Determines whether a provided <xref href=&quot;System.Windows.DependencyObject&quot;></xref> is equivalent to the current <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  remarks: "This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The <xref href=&quot;System.Windows.DependencyObject&quot;></xref> to compare to the current instance."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two instances are the same; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets a hash code for this <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A signed 32-bit integer hash code."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a specialized enumerator for determining which dependency properties have locally set values on this <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  remarks: "A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.       The <xref:System.Windows.LocalValueEnumerator> obtained by calling GetLocalValueEnumerator can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance. Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values. This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.      > [!IMPORTANT] >  The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system. For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>. If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "A specialized local value enumerator."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns the current effective value of a dependency property on this instance of a <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  remarks: "The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value. The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence. This includes coercion and animation. For more information, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md).       This method will never return <xref:System.Windows.DependencyProperty>. The <xref:System.Windows.DependencyProperty> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.       If you are not sure what the property&quot;s type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to."
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The <xref href=&quot;System.Windows.DependencyProperty&quot;></xref> identifier of the property to retrieve the value for."
    return:
      type: System.Object
      description: "Returns the current effective value."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The specified <code>dp</code> or its value was invalid, or the specified <code>dp</code> does not exist."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Re-evaluates the effective value for the specified dependency property"
  remarks: "When you call InvalidateProperty, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.       Calling InvalidateProperty on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations. However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call InvalidateProperty. For more information, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md).       Calling InvalidateProperty is not necessarily applicable for many dependency property scenarios. If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically. However, there are still some appropriate scenarios where InvalidateProperty is useful. In particular, you can use InvalidateProperty inside the coerce value or property changed callback for a different dependency property. You can also use InvalidateProperty to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member)."
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The <xref href=&quot;System.Windows.DependencyProperty&quot;></xref> identifier of the property to invalidate."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets a value that indicates whether this instance is currently sealed (read-only)."
  remarks: "This value is set internally."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this instance is sealed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Invoked whenever the effective value of any dependency property on this <xref href=&quot;System.Windows.DependencyObject&quot;></xref> has been updated. The specific dependency property that changed is reported in the event data."
  remarks: "This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis. OnPropertyChanged is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties. For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references. The <xref:System.Windows.Freezable> override implementation of OnPropertyChanged uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.       OnPropertyChanged is potentially invoked many times during the life of an object. Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties. However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations."
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns the local value of a dependency property, if it exists."
  remarks: "You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical &quot;get&quot; operations for a dependency property. ReadLocalValue does not return the effective value for a variety of circumstances where the value was not locally set.       Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values. However, bindings and other expressions are considered to be local values, after they have been evaluated.       When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.       If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to."
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The <xref href=&quot;System.Windows.DependencyProperty&quot;></xref> identifier of the property to retrieve the value for."
    return:
      type: System.Object
      description: "Returns the local value, or returns the sentinel value <xref href=&quot;System.Windows.DependencyProperty&quot;></xref> if no local value is set."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Sets the value of a dependency property without changing its value source."
  remarks: "This method is used by a component that programmatically sets the value of one of its own properties without disabling an application&quot;s declared use of the property. The SetCurrentValue method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The identifier of the dependency property to set."
    - id: value
      type: System.Object
      description: "The new local value."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Attempted to modify a read-only dependency property, or a property on a sealed <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code> was not the correct type as registered for the <code>dp</code> property."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Sets the local value of a dependency property, specified by its dependency property identifier."
  remarks: "If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown. The `value` parameter should always be provided as the appropriate type.       The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set. Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double)."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The identifier of the dependency property to set."
    - id: value
      type: System.Object
      description: "The new local value."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Attempted to modify a read-only dependency property, or a property on a sealed <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code> was not the correct type as registered for the <code>dp</code> property."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Sets the local value of a read-only dependency property, specified by the <xref href=&quot;System.Windows.DependencyPropertyKey&quot;></xref> identifier of the dependency property."
  remarks: "This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes. Generally, SetValue is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property. For more information, see [Read-Only Dependency Properties](~/add/includes/ajax-current-ext-md.md).       If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown. The `value` parameter should always be provided as the appropriate type. The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set."
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "The <xref href=&quot;System.Windows.DependencyPropertyKey&quot;></xref> identifier of the property to set."
    - id: value
      type: System.Object
      description: "The new local value."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property."
  remarks: "The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>."
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The identifier for the dependency property that should be serialized."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dependency property that is supplied should be value-serialized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
