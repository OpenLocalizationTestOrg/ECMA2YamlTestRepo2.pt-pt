### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "Representa um objeto que participa no sistema de propriedade de dependência."
  remarks: "Permite de classe DependencyObject [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] serviços do sistema de propriedade no respetivos muitas classes derivadas.       Função principal do sistema de propriedade é para os valores das propriedades de computação e para fornecer a notificação do sistema sobre os valores que foram alterados. Outra classe chave que participa no sistema de propriedade é <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>Ativa o registo das propriedades de dependência para o sistema de propriedade e fornece informações sobre cada propriedade de dependência e identificação enquanto DependencyObject como classe base permite utilizar as propriedades de dependência de objetos.</xref:System.Windows.DependencyProperty>       Serviços de DependencyObject e características incluem o seguinte:-suporte de alojamento de propriedade de dependência. Registar uma propriedade de dependência chamando o <xref:System.Windows.DependencyProperty.Register%2A>método e armazenar o valor de retorno do método como um campo estático público na sua classe.</xref:System.Windows.DependencyProperty.Register%2A>      -A propriedade ligada que aloja o suporte. Registar uma propriedade anexada ao chamar o <xref:System.Windows.DependencyProperty.RegisterAttached%2A>método e armazenar o valor de retorno do método como um público estático campo só de leitura na sua classe.</xref:System.Windows.DependencyProperty.RegisterAttached%2A> (Existem requisitos de membro adicional; tenha em atenção que isto representa um [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] implementação específica para propriedades anexadas. Para obter mais informações, consulte [ligado descrição geral de propriedades](~/add/includes/ajax-current-ext-md.md).) A propriedade anexada, em seguida, pode ser definida em qualquer classe que deriva de um DependencyObject.      -Obter, definir e desmarque os métodos de utilitário para valores de quaisquer propriedades de dependência que existem em DependencyObject.      -Metadados, coerce suporte de valor, a propriedade alterada notificação e as chamadas de retorno de substituição para propriedades de dependência ou propriedades anexadas. Além disso, a classe de DependencyObject facilita os metadados de propriedade por proprietário para uma propriedade de dependência.      -Uma classe base comum para as classes derivadas de <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, ou <xref:System.Windows.Media.Visual>.</xref:System.Windows.Media.Visual> </xref:System.Windows.Freezable> </xref:System.Windows.ContentElement> (<xref:System.Windows.UIElement>, outra classe base do elemento, tem uma hierarquia de classes que inclui <xref:System.Windows.Media.Visual>.)</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement>"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> classe."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Limpa o valor de uma propriedade local. A propriedade ser limpo é especificada por uma <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificador."
  remarks: "Limpar o valor da propriedade chamando ClearValue não necessariamente dê uma propriedade de dependência o valor predefinido especificado nos metadados da propriedade de dependência. Limpar a propriedade só especificamente limpa qualquer valor local poderá ter sido aplicado. Para obter mais informações, consulte [precedência de valor de propriedade de dependência](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade de dependência ser limpo, identificado por um <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> referência de objeto."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Foi efectuada uma tentativa de chamar ClearValue um selado <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Limpa o valor local de uma propriedade só de leitura. A propriedade ser limpo é especificada por uma <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref>."
  remarks: "A <xref:System.Windows.DependencyPropertyKey>identifica uma propriedade de dependência só de leitura para operações de sistema de propriedade.</xref:System.Windows.DependencyPropertyKey> As classes que definem propriedades de dependência só de leitura não exponha, esta chave com o acesso público. Uma chave publicamente exposta iria fornecer um caminho de código pública negated o caráter de só de leitura da propriedade, se métodos, tais como <xref:System.Windows.DependencyObject.ClearValue%2A>ou <xref:System.Windows.DependencyObject.SetValue%2A>foi chamada fora da classe ou a assemblagem, referência a chave.</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.ClearValue%2A>       Limpar o valor da propriedade chamando ClearValue não necessariamente dê uma propriedade de dependência o valor predefinido especificado nos metadados da propriedade de dependência. Limpar o valor só especificamente limpa qualquer valor local poderá ter sido aplicado. Para obter mais informações, consulte [precedência de valor de propriedade de dependência](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "A chave para a propriedade de dependência ser limpa."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentou chamar <xref:System.Windows.DependencyObject.ClearValue*>num selado <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>.</xref:System.Windows.DependencyObject.ClearValue*>"
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Coerces o valor da propriedade de dependência especificado. Isto é conseguido ao invocar qualquer <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> especificada na propriedade de metadados para a propriedade de dependência, tal como existe na chamar a função <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Para além das que está a ser invocado explicitamente através de CoerceValue, ao chamar o <xref:System.Windows.CoerceValueCallback>para uma dependência de propriedade é também invocada internamente sempre que o valor da propriedade de dependência que está a ser avaliado novamente pelo [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] sistema de propriedade.</xref:System.Windows.CoerceValueCallback>       Quando invocar o método CoerceValue, que está a invocar basicamente a chamada de retorno de valor coerce para a propriedade que especificar. Normalmente, serão invocados CoerceValue apenas se souber que uma chamada de retorno de valor coerce existe e se tem conhecimentos de critérios da chamada de retorno de adesão.       O cenário mais comum para chamar CoerceValue está dentro do processamento de classe ou chamadas de retorno de alteração de propriedade de propriedades relacionadas que influenciam uns dos outros valores de uma forma dependente. Para obter mais informações, consulte [chamadas de retorno de propriedade de dependência e validação](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O identificador para a propriedade de dependência para coerce."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <code> dp </code> ou o respetivo valor eram inválido ou não existe."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém o <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> que encapsula num wrapper a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] tipo desta instância."
  remarks: "Esta propriedade é útil se um objeto que é devolvido a partir de um método tem um tipo de valor de retorno de <xref:System.Windows.DependencyObject>e de que pretende efetuar a propriedade específico operações do sistema no mesmo, consoante o respetivo tipo.</xref:System.Windows.DependencyObject> Por exemplo é mais eficiente para chamar <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>utilizando o <xref:System.Windows.DependencyObjectType>em vez do [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] tipo.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType>facilita a pesquisa mais rápida.</xref:System.Windows.DependencyObjectType>"
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> que encapsula num wrapper a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] tipo desta instância."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Determina se um fornecido <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> é equivalente à atual <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Esta implementação está apenas a igualdade de referência e não tenta avaliar a igualdade de valor das propriedades nele contidos."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> a comparação para a instância atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se duas instâncias são os mesmos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém um código hash para este <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash de número inteiro de 32 bits com sinal."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cria um enumerador especializado para determinar que propriedades de dependência localmente definiu os valores neste <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "A *valor local* é qualquer valor de propriedade de dependência que foi definido pelo <xref:System.Windows.DependencyObject.SetValue%2A>, como opposed para outros aspetos do sistema de propriedade.</xref:System.Windows.DependencyObject.SetValue%2A>       O <xref:System.Windows.LocalValueEnumerator>obtido através da chamar GetLocalValueEnumerator pode ser utilizado para enumerar as propriedades que têm um localmente definir valor num <xref:System.Windows.DependencyObject>instância.</xref:System.Windows.DependencyObject> </xref:System.Windows.LocalValueEnumerator> Cada essa propriedade é representada na enumerador por um <xref:System.Windows.LocalValueEntry>objeto, que tem as propriedades que fazem referência o específicos <xref:System.Windows.DependencyProperty>e os respetivos valores.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> Esta técnica de enumerar através de localmente definir valores podem ser utilizados para a otimização de ou para outro tratamento dos valores locais, tal como para determinar os valores de propriedade de um <xref:System.Windows.DependencyObject>alteraria se que eram limpos.</xref:System.Windows.DependencyObject>      > [!IMPORTANT] > O devolvido <xref:System.Windows.LocalValueEnumerator>poderá conter <xref:System.Windows.LocalValueEntry>registos para propriedades de dependência são só de leitura ou propriedades de dependência onde os valores são calculados pelo sistema de propriedade.</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEnumerator> Por exemplo, um elemento visual framework que tenha uma largura estabelecida através de esquema irão reportar um valor local para <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</xref:System.Windows.FrameworkElement.ActualWidth%2A> Se está a obter valores locais para repor-los, verifique o <xref:System.Windows.DependencyProperty.ReadOnly%2A>valor do identificador de propriedade de cada <xref:System.Windows.LocalValueEntry>para verificar se o <xref:System.Windows.DependencyProperty>em questão não é só de leitura.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.DependencyProperty.ReadOnly%2A>"
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "Um enumerador de valor local especializado."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Devolve o valor Efetivo atual de uma propriedade de dependência nesta instância de um <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "O *valor Efetivo* é o valor da propriedade que é devolvido pelo sistema de propriedade para qualquer emissor que está a pedir o valor. O valor Efetivo é o resultado do sistema de propriedade ter avaliado todas as entradas de possíveis que participam na precedência de valor de sistema de propriedade. Isto inclui adesão e animação. Para obter mais informações, consulte [precedência de valor de propriedade de dependência](~/add/includes/ajax-current-ext-md.md).       Este método nunca irá devolver <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> O <xref:System.Windows.DependencyProperty>é um valor de sentinel para o sistema de propriedade que é utilizado em várias as capacidades internamente e ocasionalmente também expostas através de chamadas de retorno de adesão.</xref:System.Windows.DependencyProperty>       Se não tem a certeza de que deve ser o tipo da propriedade, pode consultar o identificador da propriedade de dependência solicitados para determinar se há mais específico <xref:System.Windows.DependencyProperty.PropertyType%2A>que o valor de retorno pode ser convertido em.</xref:System.Windows.DependencyProperty.PropertyType%2A>"
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificador da propriedade para obter o valor para."
    return:
      type: System.Object
      description: "Devolve o valor Efetivo atual."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <code> dp </code> ou o valor era inválido ou especificado <code> dp </code> não existe."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Reavalia o valor Efetivo para a propriedade de dependência especificado"
  remarks: "Quando chamar InvalidateProperty, qualquer aplicável e associado <xref:System.Windows.CoerceValueCallback>ou <xref:System.Windows.PropertyChangedCallback>funções registado para essa propriedade de dependência pode ser invocada.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Chamar InvalidateProperty numa propriedade com o respetivo valor local definido não terá qualquer efeito, porque o valor local tem precedência sobre outras entradas de sistema de propriedade, exceto animações. No entanto, pode chamar <xref:System.Windows.DependencyObject.ClearValue%2A>, em seguida, chame InvalidateProperty.</xref:System.Windows.DependencyObject.ClearValue%2A> Para obter mais informações, consulte [precedência de valor de propriedade de dependência](~/add/includes/ajax-current-ext-md.md).       Chamar InvalidateProperty não é necessariamente aplicável para vários cenários de propriedade de dependência. Se uma propriedade de dependência fica invalidada devido a alterações de valor em nenhum dos constituents, o sistema de propriedade invalida e reavalia automaticamente a propriedade de dependência. No entanto, ainda existem alguns cenários adequados onde InvalidateProperty é útil. Em particular, pode utilizar InvalidateProperty dentro de coerce valor ou a propriedade alterada chamada de retorno para uma propriedade de diferentes de dependência. Também pode utilizar InvalidateProperty para forçar a reavaliação de um vínculo de uma origem de dados que não é possível implementar o recomendada <xref:System.ComponentModel.INotifyPropertyChanged>mecanismo de notificação (talvez se consumir classes de dados que não é possível derivar de ou onde os dados são um membro estático).</xref:System.ComponentModel.INotifyPropertyChanged>"
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificador da propriedade para invalidar."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém um valor que indica se esta instância atualmente está selada (só de leitura)."
  remarks: "Este valor é definido internamente."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta instância está selada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Invocar sempre que o valor Efetivo de qualquer propriedade de dependência neste <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> foi atualizada. A propriedade de dependência específico que foram alterados é reportada nos dados do evento."
  remarks: "Este método destina-se não, geralmente, detetar alterações de propriedades individuais ou executar invalidations das propriedades numa base por caso. OnPropertyChanged em vez disso, foi concebida para modificações do padrão invalidação geral, se for conhecidas determinadas informações sobre classificações de wide das propriedades. Por exemplo, alterações num <xref:System.Windows.Freezable>poderá ser alterações os tipos de valor da <xref:System.Windows.Freezable>, ou poderá ser subproperties, onde as alterações são dentro de outra <xref:System.Windows.Freezable>referências.</xref:System.Windows.Freezable> </xref:System.Windows.Freezable> </xref:System.Windows.Freezable> O <xref:System.Windows.Freezable>implementação de substituição de OnPropertyChanged utiliza informações internas para determinar se as propriedades são subproperties e fornece a lógica de classe base adequada para ambos os casos.</xref:System.Windows.Freezable>       OnPropertyChanged potencialmente é invocado demasiadas vezes durante a vigência de um objeto. Por conseguinte, pode obter um melhor desempenho para o sistema de propriedade global se substituir os metadados de propriedades específicas e, em seguida, anexar <xref:System.Windows.CoerceValueCallback>ou <xref:System.Windows.PropertyChangedCallback>funções para as propriedades individuais.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> No entanto, utilizaria este método se um <xref:System.Windows.DependencyObject>inclui um número significativo de propriedades de dependência interligados de valor, ou se inclui lógica, tais como o comportamento de composição que deve ser executada novamente para vários relacionados com casos de invalidations de propriedade.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Dados do evento que irão conter o identificador de propriedade de dependência de interesse, os metadados de propriedade para o tipo e valores antigos e novos."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Devolve o valor local de uma propriedade de dependência, se existir."
  remarks: "Deve utilizar <xref:System.Windows.DependencyObject.GetValue%2A>para operações de &quot;get&quot; mais comuns para uma propriedade de dependência.</xref:System.Windows.DependencyObject.GetValue%2A> ReadLocalValue não devolve o valor Efetivo diversas circunstâncias onde o valor não foi localmente definido.       Os valores que são definidos pelo estilos de temas, modelos, o valor predefinido de metadados ou herança de valor de propriedade não são consideradas como sendo valores locais. No entanto, enlaces e outras expressões são consideradas como sendo valores locais, depois de foram avaliadas.       Quando não for definido nenhum valor local, este método devolve <xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue>       Se o valor devolvido é diferente de <xref:System.Windows.DependencyProperty.UnsetValue>, pode consultar os metadados da propriedade de dependência solicitados para determinar se existe um tipo específico mais que o valor de retorno pode ser convertido em.</xref:System.Windows.DependencyProperty.UnsetValue>"
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificador da propriedade para obter o valor para."
    return:
      type: System.Object
      description: "Devolve o valor local ou devolve o valor de sentinel <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> não se for definido nenhum valor local."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Define o valor de uma propriedade de dependência sem alterar a respetiva origem de valor."
  remarks: "Este método é utilizado por um componente que programaticamente define o valor de uma das propriedades do seus próprio sem desativar a utilização de declarado de uma aplicação da propriedade. O método SetCurrentValue altera o valor Efetivo do propriedade, mas os acionadores existentes, enlaces de dados, e estilos continuarão a funcionar."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O identificador de definir a propriedade de dependência."
    - id: value
      type: System.Object
      description: "O novo valor local."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentou modificar uma propriedade de dependência só de leitura ou uma propriedade de um selado <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>não era do tipo correto como registado para o <code>dp</code> propriedade."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Define o valor local de uma propriedade de dependência, especificado pelo respetivo identificador de propriedade de dependência."
  remarks: "Se o tipo fornecido não corresponde ao tipo que está declarado para a propriedade de dependência, que foi originalmente registada, é emitida uma exceção. O `value` sempre deve ser fornecido o parâmetro como o tipo apropriado.       As condições de exceção são potencialmente deve influenciadas pelo <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>chamada de retorno que existe no identificador de propriedade de dependência da propriedade de dependência a ser definida.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> Caso contrário, o valor fornecido pode ser falhar gerais condições da verificar o tipo de mensagens em fila (por exemplo, passar uma cadeia quando o tipo nativo for Double)."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O identificador de definir a propriedade de dependência."
    - id: value
      type: System.Object
      description: "O novo valor local."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentou modificar uma propriedade de dependência só de leitura ou uma propriedade de um selado <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>não era do tipo correto como registado para o <code>dp</code> propriedade."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Define o valor de uma propriedade de dependência só de leitura, especificado pelo local de <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> identificador de propriedade de dependência."
  remarks: "Esta assinatura é geralmente utilizada quando definir os valores das propriedades de dependência só de leitura que são definidos pelo seu classes personalizadas. Geralmente, SetValue denomina-se apenas a partir do tipo registado essa propriedade de dependência, que implementa a lógica interna que fornece o determinado valor da propriedade de dependência. Para obter mais informações, consulte [propriedades de dependência só de leitura](~/add/includes/ajax-current-ext-md.md).       Se o tipo fornecido não corresponde ao tipo que está declarado para a propriedade de dependência, que foi originalmente registada, é emitida uma exceção. O `value` sempre deve ser fornecido o parâmetro como o tipo apropriado. As condições de exceção são potencialmente deve influenciadas pelo <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>chamada de retorno que existe no identificador de propriedade de dependência da propriedade de dependência a ser definida.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>"
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "O <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> identificador da propriedade a definir."
    - id: value
      type: System.Object
      description: "O novo valor local."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Devolve um valor que indica se os processos de serialização devem serializar o valor para a propriedade de dependência fornecida."
  remarks: "Devolve a implementação predefinida `true` para todos os casos em que uma propriedade de dependência tinha um valor local estabelecido no <xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O identificador para a propriedade de dependência que deverá ser serializado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a propriedade de dependência fornecida deve ser serializado valor; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
