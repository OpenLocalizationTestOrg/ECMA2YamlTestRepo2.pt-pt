### YamlMime:ManagedReference
items:
- uid: System.Transactions.DistributedTransactionPermission
  id: DistributedTransactionPermission
  children:
  - System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Transactions.DistributedTransactionPermission.Copy
  - System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)
  - System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)
  - System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)
  - System.Transactions.DistributedTransactionPermission.IsUnrestricted
  - System.Transactions.DistributedTransactionPermission.ToXml
  - System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: DistributedTransactionPermission
  nameWithType: DistributedTransactionPermission
  fullName: System.Transactions.DistributedTransactionPermission
  type: Class
  summary: "The permission that is demanded by <xref href=&quot;System.Transactions&quot;></xref> when management of a transaction is escalated to MSDTC. This class cannot be inherited."
  remarks: "A local transaction only consumes resources from a single durable source or mutilple volatitle sources. A distributed transaction, on the other hand, has to interact with multiple durable resources, potentially across the network. When management of a transaction is escalated to MSDTC, the code that initiated the escalation is verified to have this permission. For more information on security levels, see [Security Trust Levels in Accessing Resources](http://msdn.microsoft.com/en-us/8e45acbc-0d81-4f64-9da7-8f766aebff51). For more information on transaction management escalation, see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). The security demand affects the code that initiated the escalation, not necessarily the code that originally created the local transaction."
  syntax:
    content: 'public sealed class DistributedTransactionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: DistributedTransactionPermission(PermissionState)
  nameWithType: DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)
  fullName: System.Transactions.DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initializes a new instance of the <xref href=&quot;System.Transactions.DistributedTransactionPermission&quot;></xref> class."
  syntax:
    content: public DistributedTransactionPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> values."
  overload: System.Transactions.DistributedTransactionPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.Copy
  id: Copy
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: DistributedTransactionPermission.Copy()
  fullName: System.Transactions.DistributedTransactionPermission.Copy()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Creates and returns an identical copy of the current permission."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A copy of the current permission."
  overload: System.Transactions.DistributedTransactionPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: DistributedTransactionPermission.FromXml(SecurityElement)
  fullName: System.Transactions.DistributedTransactionPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Reconstructs a permission with a specified state from an XML encoding."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement securityElement);
    parameters:
    - id: securityElement
      type: System.Security.SecurityElement
      description: "The XML encoding used to reconstruct the permission."
  overload: System.Transactions.DistributedTransactionPermission.FromXml*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: DistributedTransactionPermission.Intersect(IPermission)
  fullName: System.Transactions.DistributedTransactionPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Creates and returns a permission that is the intersection of the current permission and the specified permission."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to intersect with the current permission. It must be the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the intersection is empty."
  overload: System.Transactions.DistributedTransactionPermission.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: DistributedTransactionPermission.IsSubsetOf(IPermission)
  fullName: System.Transactions.DistributedTransactionPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Returns a value that indicates whether the current permission is a subset of the specified permission."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to test for the subset relationship. This permission must be the same type as the current permission."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current <xref href=&quot;System.Security.IPermission&quot;></xref> is a subset of the specified <xref href=&quot;System.Security.IPermission&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Transactions.DistributedTransactionPermission.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: DistributedTransactionPermission.IsUnrestricted()
  fullName: System.Transactions.DistributedTransactionPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if unrestricted use of the resource protected by the permission is allowed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Transactions.DistributedTransactionPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.ToXml
  id: ToXml
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: DistributedTransactionPermission.ToXml()
  fullName: System.Transactions.DistributedTransactionPermission.ToXml()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Creates an XML encoding of the security object and its current state."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;></xref> that contains the XML encoding of the security object, including any state information."
  overload: System.Transactions.DistributedTransactionPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Transactions.DistributedTransactionPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: DistributedTransactionPermission.Union(IPermission)
  fullName: System.Transactions.DistributedTransactionPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Creates a permission that is the union of the current permission and the specified permission."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to combine with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "An <xref href=&quot;System.Security.IPermission&quot;></xref> that represents the union of the current permission and the specified permission."
  overload: System.Transactions.DistributedTransactionPermission.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: DistributedTransactionPermission(PermissionState)
  nameWithType: DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)
  fullName: System.Transactions.DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Transactions.DistributedTransactionPermission.Copy
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: Copy()
  nameWithType: DistributedTransactionPermission.Copy()
  fullName: System.Transactions.DistributedTransactionPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: DistributedTransactionPermission.FromXml(SecurityElement)
  fullName: System.Transactions.DistributedTransactionPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: DistributedTransactionPermission.Intersect(IPermission)
  fullName: System.Transactions.DistributedTransactionPermission.Intersect(IPermission)
- uid: System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: DistributedTransactionPermission.IsSubsetOf(IPermission)
  fullName: System.Transactions.DistributedTransactionPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.DistributedTransactionPermission.IsUnrestricted
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: DistributedTransactionPermission.IsUnrestricted()
  fullName: System.Transactions.DistributedTransactionPermission.IsUnrestricted()
- uid: System.Transactions.DistributedTransactionPermission.ToXml
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: ToXml()
  nameWithType: DistributedTransactionPermission.ToXml()
  fullName: System.Transactions.DistributedTransactionPermission.ToXml()
- uid: System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: DistributedTransactionPermission.Union(IPermission)
  fullName: System.Transactions.DistributedTransactionPermission.Union(IPermission)
- uid: System.Transactions.DistributedTransactionPermission.#ctor*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: DistributedTransactionPermission
  nameWithType: DistributedTransactionPermission.DistributedTransactionPermission
- uid: System.Transactions.DistributedTransactionPermission.Copy*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: Copy
  nameWithType: DistributedTransactionPermission.Copy
- uid: System.Transactions.DistributedTransactionPermission.FromXml*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: FromXml
  nameWithType: DistributedTransactionPermission.FromXml
- uid: System.Transactions.DistributedTransactionPermission.Intersect*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: Intersect
  nameWithType: DistributedTransactionPermission.Intersect
- uid: System.Transactions.DistributedTransactionPermission.IsSubsetOf*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: DistributedTransactionPermission.IsSubsetOf
- uid: System.Transactions.DistributedTransactionPermission.IsUnrestricted*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: DistributedTransactionPermission.IsUnrestricted
- uid: System.Transactions.DistributedTransactionPermission.ToXml*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: ToXml
  nameWithType: DistributedTransactionPermission.ToXml
- uid: System.Transactions.DistributedTransactionPermission.Union*
  parent: System.Transactions.DistributedTransactionPermission
  isExternal: false
  name: Union
  nameWithType: DistributedTransactionPermission.Union
