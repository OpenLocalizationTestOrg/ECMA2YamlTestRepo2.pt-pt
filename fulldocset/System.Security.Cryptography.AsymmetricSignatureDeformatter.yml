### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter
  id: AsymmetricSignatureDeformatter
  children:
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  langs:
  - csharp
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter
  type: Class
  summary: "Represents the abstract base class from which all implementations of asymmetric signature deformatters derive."
  remarks: "Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricSignatureDeformatter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: AsymmetricSignatureDeformatter()
  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of <xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;></xref>."
  remarks: "You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."
  syntax:
    content: protected AsymmetricSignatureDeformatter ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  id: SetHashAlgorithm(System.String)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: SetHashAlgorithm(String)
  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, sets the hash algorithm to use for verifying the signature."
  remarks: "You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."
  syntax:
    content: public abstract void SetHashAlgorithm (string strName);
    parameters:
    - id: strName
      type: System.String
      description: "The name of the hash algorithm to use for verifying the signature."
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, sets the public key to use for verifying the signature."
  remarks: "You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."
  syntax:
    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "The instance of an implementation of <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> that holds the public key."
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, verifies the signature for the specified data."
  remarks: "You must specify a public key and a hash algorithm before calling this method."
  syntax:
    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "The data signed with `rgbSignature`."
    - id: rgbSignature
      type: System.Byte[]
      description: "The signature to be verified for `rgbHash`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  id: VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: VerifySignature(HashAlgorithm,Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifies the signature from the specified hash value."
  remarks: "This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value."
  syntax:
    content: public virtual bool VerifySignature (System.Security.Cryptography.HashAlgorithm hash, byte[] rgbSignature);
    parameters:
    - id: hash
      type: System.Security.Cryptography.HashAlgorithm
      description: "The hash algorithm to use to verify the signature."
    - id: rgbSignature
      type: System.Byte[]
      description: "The signature to be verified."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the signature is valid for the hash; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>hash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: AsymmetricSignatureDeformatter()
  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetHashAlgorithm(String)
  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(Byte[],Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: VerifySignature(HashAlgorithm,Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm,Byte[])
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetHashAlgorithm
  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetKey
  nameWithType: AsymmetricSignatureDeformatter.SetKey
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: VerifySignature
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature
