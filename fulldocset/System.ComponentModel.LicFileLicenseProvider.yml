### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicFileLicenseProvider
  id: LicFileLicenseProvider
  children:
  - System.ComponentModel.LicFileLicenseProvider.#ctor
  - System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  - System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  - System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  langs:
  - csharp
  name: LicFileLicenseProvider
  nameWithType: LicFileLicenseProvider
  fullName: System.ComponentModel.LicFileLicenseProvider
  type: Class
  summary: "Provides an implementation of a <see cref=&quot;T:System.ComponentModel.LicenseProvider&quot;></see>. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model."
  remarks: "The LicFileLicenseProvider offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods. The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid. When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.       This class exists to provide similar licensing functionality to COM licensing and uses text license files.       For more information on licensing, see [How to: License Components and Controls](../Topic/How%20to:%20License%20Components%20and%20Controls.md)."
  example:
  - "The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses LicFileLicenseProvider for the license manager.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/CSharp/t-system.componentmodel._155_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/VisualBasic/t-system.componentmodel._155_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/CPP/t-system.componentmodel._155_1.cpp)]"
  syntax:
    content: 'public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider'
  inheritance:
  - System.Object
  - System.ComponentModel.LicenseProvider
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: LicFileLicenseProvider()
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()
  fullName: System.ComponentModel.LicFileLicenseProvider.LicFileLicenseProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot;></see> class."
  syntax:
    content: public LicFileLicenseProvider ();
    parameters: []
  overload: System.ComponentModel.LicFileLicenseProvider.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  id: GetKey(System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: GetKey(Type)
  nameWithType: LicFileLicenseProvider.GetKey(Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetKey(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns a key for the specified type."
  syntax:
    content: protected virtual string GetKey (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The object type to return the key."
    return:
      type: System.String
      description: "To be added."
  overload: System.ComponentModel.LicFileLicenseProvider.GetKey*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns a license for the instance of the component, if one is available."
  remarks: "At design time, the GetLicense method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create. This file must be in the same directory as the .dll file that contains the component.       Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method. If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>."
  syntax:
    content: public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);
    parameters:
    - id: context
      type: System.ComponentModel.LicenseContext
      description: "A  that specifies where you can use the licensed object."
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the component requesting the ."
    - id: instance
      type: System.Object
      description: "An object that requests the ."
    - id: allowExceptions
      type: System.Boolean
      description: "\n     if a  should be thrown when a component cannot be granted a license; otherwise, ."
    return:
      type: System.ComponentModel.License
      description: "To be added."
  overload: System.ComponentModel.LicFileLicenseProvider.GetLicense*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  id: IsKeyValid(System.String,System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: IsKeyValid(String,Type)
  nameWithType: LicFileLicenseProvider.IsKeyValid(String,Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(String,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the key that the &lt;xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A&gt; method retrieves is valid for the specified type."
  remarks: 'This method checks the key against the phrase: &quot; `myClassName is a licensed component.` &quot;, where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.'
  syntax:
    content: protected virtual bool IsKeyValid (string key, Type type);
    parameters:
    - id: key
      type: System.String
      description: "The <xref:System.ComponentModel.License.LicenseKey%2A> to check."
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the component requesting the ."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ComponentModel.LicenseProvider
  isExternal: false
  name: System.ComponentModel.LicenseProvider
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: LicFileLicenseProvider()
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()
  fullName: System.ComponentModel.LicFileLicenseProvider.LicFileLicenseProvider()
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetKey(Type)
  nameWithType: LicFileLicenseProvider.GetKey(Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetKey(Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: IsKeyValid(String,Type)
  nameWithType: LicFileLicenseProvider.IsKeyValid(String,Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(String,Type)
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: LicFileLicenseProvider
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetKey
  nameWithType: LicFileLicenseProvider.GetKey
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetLicense
  nameWithType: LicFileLicenseProvider.GetLicense
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: IsKeyValid
  nameWithType: LicFileLicenseProvider.IsKeyValid
