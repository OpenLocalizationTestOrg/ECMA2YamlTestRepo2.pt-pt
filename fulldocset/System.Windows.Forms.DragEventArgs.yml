### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.DragEventArgs
  id: DragEventArgs
  children:
  - System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  - System.Windows.Forms.DragEventArgs.AllowedEffect
  - System.Windows.Forms.DragEventArgs.Data
  - System.Windows.Forms.DragEventArgs.Effect
  - System.Windows.Forms.DragEventArgs.KeyState
  - System.Windows.Forms.DragEventArgs.X
  - System.Windows.Forms.DragEventArgs.Y
  langs:
  - csharp
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.Forms.DragEventArgs
  type: Class
  summary: "Disponibiliza dados para o <xref href=&quot;System.Windows.Forms.Control.DragDrop&quot;> </xref>, <xref href=&quot;System.Windows.Forms.Control.DragEnter&quot;> </xref>, ou <xref href=&quot;System.Windows.Forms.Control.DragOver&quot;> </xref> eventos."
  remarks: "O <xref:System.Windows.Forms.Control.DragDrop>evento ocorre quando o utilizador concluir uma operação de arrastar e largar um objeto sobre o controlo e largue-lo para o controlo ao libertar o botão do rato.</xref:System.Windows.Forms.Control.DragDrop> O <xref:System.Windows.Forms.Control.DragEnter>evento ocorre quando o utilizador move o ponteiro do rato no controlo ao arrastar um objeto com o rato.</xref:System.Windows.Forms.Control.DragEnter> O <xref:System.Windows.Forms.Control.DragOver>evento ocorre quando o utilizador move o ponteiro do rato sobre o controlo ao arrastar um objeto com o rato.</xref:System.Windows.Forms.Control.DragOver>       Um objeto de DragEventArgs Especifica os dados associados a este evento; o estado atual do SHIFT, teclas CTRL e ALT; a localização do ponteiro do rato; e os efeitos de arrastar e largar permitidos pela origem e destino do evento de arrastar.       Para obter informações sobre o modelo de evento, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragEventArgs class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/t-system.windows.forms.d_17_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/t-system.windows.forms.d_17_1.cs)]  \n  \n The following example illustrates how DragEventArgs are passed between the source and target of a drag-and-drop operation. In this example, a <xref:System.Windows.Forms.ListBox> control is the source of the data, and the <xref:System.Windows.Forms.RichTextBox> control is the target. The example assumes that the <xref:System.Windows.Forms.ListBox> control has been populated with a list of valid filenames. When the user drags one of the displayed filenames from the <xref:System.Windows.Forms.ListBox> control onto the <xref:System.Windows.Forms.RichTextBox> control, the file referenced in the filename is opened.  \n  \n The operation is initiated in the <xref:System.Windows.Forms.ListBox> control's MouseDown event. In the <xref:System.Windows.Forms.RichTextBox.DragEnter> event handler, the example uses the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to verify that the data is in a format that the <xref:System.Windows.Forms.RichTextBox> control can display and then sets the <xref:System.Windows.Forms.DragDropEffects> property to specify that data should be copied from the source control to the target control. Finally, the <xref:System.Windows.Forms.RichTextBox> control's DragDrop event handler uses the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the filename to open.  \n  \n [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/t-system.windows.forms.d_17_2.cs)]\n [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_2.vb)]\n [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/t-system.windows.forms.d_17_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DragEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  id: '#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)'
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Forms.DragEventArgs&quot;> </xref> classe."
  syntax:
    content: public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);
    parameters:
    - id: data
      type: System.Windows.Forms.IDataObject
      description: "Os dados associados este evento."
    - id: keyState
      type: System.Int32
      description: "O estado atual das chaves SHIFT, CTRL e ALT."
    - id: x
      type: System.Int32
      description: "A coordenada x do cursor do rato em pixéis."
    - id: y
      type: System.Int32
      description: "A coordenada y do cursor do rato em pixéis."
    - id: allowedEffect
      type: System.Windows.Forms.DragDropEffects
      description: "Um do <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> valores."
    - id: effect
      type: System.Windows.Forms.DragDropEffects
      description: "Um do <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> valores."
  overload: System.Windows.Forms.DragEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  id: AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém as operações de arrastar e largar são permitidas pelo originador (ou origem) do evento de arrastar."
  remarks: "Quando um controlo inicia uma operação de arrastar e largar ao chamar o <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName>método, especifica os efeitos da operação permitidos.</xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> Por exemplo, quando arraste um ficheiro de uma origem, se o ficheiro é só de leitura (ou a partir de um meio de armazenamento só de leitura, como um CD), a origem irá indicar que o ficheiro pode ser copiado, mas não transferir para o destino.       Antes de tentar efetuar uma operação nos dados dragged, deve examinar esta propriedade para se certificar de que a operação é permitida."
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_303_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_303_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_303_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects AllowedEffect { get; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "Um do <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> valores."
  overload: System.Windows.Forms.DragEventArgs.AllowedEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Data
  id: Data
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o <xref href=&quot;System.Windows.Forms.IDataObject&quot;> </xref> que contém os dados associados este evento."
  remarks: "No corpo do processador de eventos, pode utilizar o <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>método para determinar se os dados satisfaça os requisitos de formato do controlo em que os dados estão a ser arrastados.</xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Também pode especificar se pretende tentar converter os dados para satisfazer os seus requisitos de formato. Se os dados dragged aos seus requisitos de formato, utilize o <xref:System.Windows.Forms.IDataObject.GetData%2A>método para obter os dados.</xref:System.Windows.Forms.IDataObject.GetData%2A>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_79_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_79_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_79_1.cs)]"
  syntax:
    content: public System.Windows.Forms.IDataObject Data { get; }
    return:
      type: System.Windows.Forms.IDataObject
      description: "Os dados associados este evento."
  overload: System.Windows.Forms.DragEventArgs.Data*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Effect
  id: Effect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define o efeito de entrega de destino numa operação de arrastar e largar."
  remarks: "Por predefinição, o efeito aplicado determina o cursor do rato para o destino de uma operação de arrastar e largar. Isto é útil para fornecer comentários para o utilizador sobre a operação que irá ocorrer. Por exemplo, se premir a tecla CTRL quando arraste um ficheiro a partir de uma origem, especifique <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>para indicar o destino irá tentar efetuar uma operação de cópia.</xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>       Para utilizar cursores personalizados para uma operação de arrastamento, consulte <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.</xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the Effect is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_330_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_330_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_330_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects Effect { get; set; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "Um do <xref href=&quot;System.Windows.Forms.DragDropEffects&quot;> </xref> valores."
  overload: System.Windows.Forms.DragEventArgs.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.KeyState
  id: KeyState
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o estado atual do SHIFT, teclas CTRL e ALT, bem como o estado dos botões de rato."
  remarks: "Pode efetuar o efeito de uma operação de arrastar e largar dependa do Estado de uma chave específica. Por exemplo, pode optar por copiar ou mover dados dependendo se são premidas as teclas CTRL ou SHIFT durante a operação de arrastar e largar.       O bits que é definido na propriedade KeyState identifique os chaves ou os botões de rato que foram premidos durante a operação. Por exemplo, se o botão esquerdo do rato é premido, o bit primeiro na propriedade KeyState está definido. Pode utilizar o operador AND bit a bit para testar um chave no Estado indicado.       A tabela seguinte lista os valores que são utilizados para um evento especificado.      | Valor | Chave |   |-----------|---------|   | 1 (bit 0) | O botão esquerdo do rato. |   | 2 (bit 1) | O botão direito do rato. |   | 4 (bit 2) | A tecla SHIFT. |   | 8 (bit 3) | A tecla CTRL. |   | 16 (bit 4) | O botão do rato média. |   | 32 (bit 5) | A tecla ALT. |"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_339_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_339_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_339_1.cs)]"
  syntax:
    content: public int KeyState { get; }
    return:
      type: System.Int32
      description: "O estado atual das chaves SHIFT, CTRL e ALT e dos botões de rato."
  overload: System.Windows.Forms.DragEventArgs.KeyState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.X
  id: X
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém a coordenada x do ponteiro do rato, em coordenadas do ecrã."
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_210_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_210_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_210_1.cs)]"
  syntax:
    content: public int X { get; }
    return:
      type: System.Int32
      description: "A coordenada x do ponteiro do rato em pixéis."
  overload: System.Windows.Forms.DragEventArgs.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Y
  id: Y
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém a coordenada y do ponteiro do rato, em coordenadas do ecrã."
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_56_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_56_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_56_1.cs)]"
  syntax:
    content: public int Y { get; }
    return:
      type: System.Int32
      description: "A coordenada y do ponteiro do rato em pixéis."
  overload: System.Windows.Forms.DragEventArgs.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
- uid: System.Windows.Forms.IDataObject
  parent: System.Windows.Forms
  isExternal: false
  name: IDataObject
  nameWithType: IDataObject
  fullName: System.Windows.Forms.IDataObject
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.DragDropEffects
  parent: System.Windows.Forms
  isExternal: false
  name: DragDropEffects
  nameWithType: DragDropEffects
  fullName: System.Windows.Forms.DragDropEffects
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
- uid: System.Windows.Forms.DragEventArgs.#ctor*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs.DragEventArgs
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
