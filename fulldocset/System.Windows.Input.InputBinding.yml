### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.InputBinding
  id: InputBinding
  children:
  - System.Windows.Input.InputBinding.#ctor
  - System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.CreateInstanceCore
  - System.Windows.Input.InputBinding.Gesture
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  langs:
  - csharp
  name: InputBinding
  nameWithType: InputBinding
  fullName: System.Windows.Input.InputBinding
  type: Class
  summary: "Represents a binding between an <xref href=&quot;System.Windows.Input.InputGesture&quot;></xref> and a command. The command is potentially a <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>."
  remarks: "You can specify that user input invokes a command by creating a InputBinding. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \n  \n You can specify that the InputBinding invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \n  \n An InputBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \n  \n The InputBinding class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from InputBinding with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing InputBinding-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and takes one or more InputBinding objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \n  \n<a name=\"xamlObjectElementUsage_InputBinding\"></a>   \n## XAML Object Element Usage  \n \\<*inputBindingDerivedClassâ€¦/*>  \n  \n<a name=\"xamlValues_InputBinding\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of InputBinding that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n The following examples show how to bind a custom command to InputBinding objects. These examples create an application that enables the user to change the background color by performing one of the following actions:  \n  \n-   Clicking a button.  \n  \n-   Pressing CTRL+C.  \n  \n-   Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).  \n  \n The first example creates a class named `SimpleDelegateCommand`. This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes. `SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command. `GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.  \n  \n [!code-cs[InputCommandBinding#DelegateCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#delegatecommand)]\n [!code-vb[InputCommandBinding#DelegateCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#delegatecommand)]  \n  \n The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`. The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties. An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.  \n  \n [!code-cs[InputCommandBinding#InitializeCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#initializecommand)]\n [!code-vb[InputCommandBinding#InitializeCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#initializecommand)]  \n  \n Finally, the following example creates the user interface. The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>. When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color. In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`. The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=fullName>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=fullName>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=fullName> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.  \n  \n [!code-xml[InputCommandBinding#UI](~/add/codesnippet/xaml/inputcommandbinding/mainwindow.xaml#ui)]"
  syntax:
    content: 'public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Input.ICommandSource
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Provides base initialization for classes derived from <xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>."
  remarks: "<xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access. This has the effect of making <xref:System.Windows.Input.InputBinding> an &quot;abstract&quot; class for [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."
  syntax:
    content: protected InputBinding ();
    parameters: []
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.InputBinding&quot;></xref> class with the specified command and input gesture."
  remarks: "If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific."
  example:
  - "The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#inputbindingaddingcomand)]\n [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#inputbindingaddingcomand)]"
  syntax:
    content: public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "The command to associate with `gesture`."
    - id: gesture
      type: System.Windows.Input.InputGesture
      description: "The input gesture to associate with `command`."
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code> or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  id: CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Copies the base (non-animated) values of the properties of the specified object."
  syntax:
    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "The object to clone."
  overload: System.Windows.Input.InputBinding.CloneCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  id: CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Copies the current values of the properties of the specified object."
  syntax:
    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "The object to clone."
  overload: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Command
  id: Command
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the <xref:System.Windows.Input.ICommand> associated with this input binding."
  remarks: "The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.       <xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the Command, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.      <a name=&quot;xamlAttributeUsage_Command&quot;></a>    ## XAML Attribute Usage    <`inputBindingDerivedClass` `Command`=&quot;<xref:System.Windows.Input.ICommand>&quot;/>      <a name=&quot;xamlPropertyElementUsage_Command&quot;></a>    ## XAML Property Element Usage      ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.Command>       <iCommandImplementation/>     </inputBindingDerivedClass.Command>   </inputBindingDerivedClass>   ```      <a name=&quot;xamlValues_Command&quot;></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.       `iCommandImplementation`    An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor)."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=fullName> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewkeybinding)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewkeybinding)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "The associated command."
  overload: System.Windows.Input.InputBinding.Command*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The Command value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the command-specific data for a particular command."
  remarks: "The CommandParameter property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.       If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the CommandParameter of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.       The data type and purpose of the command parameter are defined differently for each command and can be `null`. You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, CommandParameter, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.       The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.      <a name=&quot;xamlAttributeUsage_CommandParameter&quot;></a>    ## XAML Attribute Usage      ```   <inputBindingDerivedClassÂ CommandParameter=&quot;commandParameterString&quot;/>   ```      <a name=&quot;xamlPropertyElementUsage_CommandParameter&quot;></a>    ## XAML Property Element Usage      ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.CommandParameter>       <commandParameterObject/>     </inputBindingDerivedClass.CommandParameter>   </inputBindingDerivedClass>   ```      <a name=&quot;xamlValues_CommandParameter&quot;></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.       `commandParameterString`    A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.       `commandParameterObject`    An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor)."
  syntax:
    content: public object CommandParameter { get; set; }
    return:
      type: System.Object
      description: "The command-specific data. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.InputBinding.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  id: CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.InputBinding.CommandParameter*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandParameterProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandProperty
  id: CommandProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.InputBinding.Command*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the target element of the command."
  remarks: "In the [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] commanding system, the CommandTarget property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>. If the CommandTarget is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.       When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the CommandTarget property is not set, the element with keyboard focus is used as the target.       The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.      <a name=&quot;xamlAttributeUsage_CommandTarget&quot;></a>    ## XAML Attribute Usage      ```   <inputBindingDerivedClassÂ CommandTarget=&quot;bindingToTarget&quot;/>   ```      <a name=&quot;xamlValues_CommandTarget&quot;></a>    ## XAML Values    `inputBindingDerivedClass`    A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.       `bindingToTarget`    A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks."
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; set; }
    return:
      type: System.Windows.IInputElement
      description: "The target of the command. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.InputBinding.CommandTarget*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  id: CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.InputBinding.CommandTarget*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandTargetProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Creates an instance of an <xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>."
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "The new object."
  overload: System.Windows.Input.InputBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the <xref href=&quot;System.Windows.Input.InputGesture&quot;></xref> associated with this input binding."
  remarks: "The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_gesture\"></a>   \n## XAML Attribute Usage  \n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\"<xref:System.Windows.Input.KeyGesture>\"/>  \n  \n \\- or -  \n  \n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\"<xref:System.Windows.Input.MouseGesture>\"/>  \n  \n \\- or -  \n  \n <`inputBindingDerivedClass` `Gesture`=\"<xref:System.Windows.Input.InputGesture>\"/>  \n  \n<a name=\"xamlPropertyElementUsage_gesture\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.Gesture>  \n    <inputGestureImplementation/>  \n  </inputBindingDerivedClass.Gesture>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_gesture\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `inputGestureImplementation`  \n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>. When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.  \n  \n [!code-xml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/add/codesnippet/xaml/CommandLibarySnippets/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public virtual System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "The associated gesture. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.InputBinding.Gesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  id: GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Makes the instance a frozen clone of the specified <xref href=&quot;System.Windows.Freezable&quot;></xref> by using base (non-animated) property values."
  syntax:
    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "The object to clone."
  overload: System.Windows.Input.InputBinding.GetAsFrozenCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Makes the current instance a frozen clone of the specified <xref href=&quot;System.Windows.Freezable&quot;></xref>. If the object has animated dependency properties, their current animated values are copied."
  syntax:
    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "The object to clone."
  overload: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.InputBinding.#ctor
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
- uid: System.Windows.Input.InputBinding.Command
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.InputBinding.CommandProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
- uid: System.Windows.Input.InputBinding.CommandTarget
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
- uid: System.Windows.Input.InputBinding.Gesture
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.#ctor*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding
  nameWithType: InputBinding.InputBinding
- uid: System.Windows.Input.InputBinding.CloneCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore
  nameWithType: InputBinding.CloneCore
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore
  nameWithType: InputBinding.CloneCurrentValueCore
- uid: System.Windows.Input.InputBinding.Command*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
- uid: System.Windows.Input.InputBinding.CommandTarget*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
- uid: System.Windows.Input.InputBinding.CreateInstanceCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: InputBinding.CreateInstanceCore
- uid: System.Windows.Input.InputBinding.Gesture*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore
  nameWithType: InputBinding.GetAsFrozenCore
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore
