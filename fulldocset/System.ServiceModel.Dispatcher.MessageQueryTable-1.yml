### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1
  id: MessageQueryTable`1
  children:
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Count
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)
  - System.ServiceModel.Dispatcher.MessageQueryTable`1.Values
  langs:
  - csharp
  name: MessageQueryTable<TItem>
  nameWithType: MessageQueryTable<TItem>
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>
  type: Class
  syntax:
    content: 'public class MessageQueryTable<TItem> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageQuery,TItem>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>'
    typeParameters:
    - id: TItem
      description: "To be added."
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>
  - System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageQuery,TItem>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: MessageQueryTable()
  nameWithType: MessageQueryTable<TItem>.MessageQueryTable()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.MessageQueryTable()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public MessageQueryTable ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  id: Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Add(KeyValuePair<MessageQuery,TItem>)
  nameWithType: MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Add (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)
  id: Add(System.ServiceModel.Dispatcher.MessageQuery,`0)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Add(MessageQuery,TItem)
  nameWithType: MessageQueryTable<TItem>.Add(MessageQuery,TItem)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(MessageQuery,TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Add (System.ServiceModel.Dispatcher.MessageQuery key, TItem value);
    parameters:
    - id: key
      type: System.ServiceModel.Dispatcher.MessageQuery
      description: "To be added."
    - id: value
      type: TItem
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear
  id: Clear
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Clear()
  nameWithType: MessageQueryTable<TItem>.Clear()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  id: Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Contains(KeyValuePair<MessageQuery,TItem>)
  nameWithType: MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool Contains (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)
  id: ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: ContainsKey(MessageQuery)
  nameWithType: MessageQueryTable<TItem>.ContainsKey(MessageQuery)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.ContainsKey(MessageQuery)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool ContainsKey (System.ServiceModel.Dispatcher.MessageQuery key);
    parameters:
    - id: key
      type: System.ServiceModel.Dispatcher.MessageQuery
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)
  nameWithType: MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void CopyTo (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}[]
      description: "To be added."
    - id: arrayIndex
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count
  id: Count
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Count
  nameWithType: MessageQueryTable<TItem>.Count
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Count
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)
  id: Evaluate``1(System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Evaluate(Message)
  nameWithType: MessageQueryTable<TItem>.Evaluate(Message)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>> Evaluate<TResult> (System.ServiceModel.Channels.Message message);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "To be added."
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TResult}}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)
  id: Evaluate``1(System.ServiceModel.Channels.MessageBuffer)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Evaluate(MessageBuffer)
  nameWithType: MessageQueryTable<TItem>.Evaluate(MessageBuffer)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(MessageBuffer)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>> Evaluate<TResult> (System.ServiceModel.Channels.MessageBuffer buffer);
    parameters:
    - id: buffer
      type: System.ServiceModel.Channels.MessageBuffer
      description: "To be added."
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TResult}}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator
  id: GetEnumerator
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: MessageQueryTable<TItem>.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly
  id: IsReadOnly
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: MessageQueryTable<TItem>.IsReadOnly
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)
  id: Item(System.ServiceModel.Dispatcher.MessageQuery)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Item(MessageQuery)
  nameWithType: MessageQueryTable<TItem>.Item(MessageQuery)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Item(MessageQuery)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public TItem this[System.ServiceModel.Dispatcher.MessageQuery key] { get; set; }
    parameters:
    - id: key
      type: System.ServiceModel.Dispatcher.MessageQuery
      description: "To be added."
    return:
      type: TItem
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys
  id: Keys
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Keys
  nameWithType: MessageQueryTable<TItem>.Keys
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Keys
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageQuery> Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageQuery}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  id: Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Remove(KeyValuePair<MessageQuery,TItem>)
  nameWithType: MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool Remove (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)
  id: Remove(System.ServiceModel.Dispatcher.MessageQuery)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Remove(MessageQuery)
  nameWithType: MessageQueryTable<TItem>.Remove(MessageQuery)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(MessageQuery)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool Remove (System.ServiceModel.Dispatcher.MessageQuery key);
    parameters:
    - id: key
      type: System.ServiceModel.Dispatcher.MessageQuery
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)
  id: TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: TryGetValue(MessageQuery,TItem)
  nameWithType: MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool TryGetValue (System.ServiceModel.Dispatcher.MessageQuery key, out TItem value);
    parameters:
    - id: key
      type: System.ServiceModel.Dispatcher.MessageQuery
      description: "To be added."
    - id: value
      type: TItem
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values
  id: Values
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  langs:
  - csharp
  name: Values
  nameWithType: MessageQueryTable<TItem>.Values
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Values
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.ICollection<TItem> Values { get; }
    return:
      type: System.Collections.Generic.ICollection{TItem}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: MessageQueryTable()
  nameWithType: MessageQueryTable<TItem>.MessageQueryTable()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.MessageQueryTable()
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Add(KeyValuePair<MessageQuery,TItem>)
  nameWithType: MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(KeyValuePair<MessageQuery,TItem>)
- uid: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<MessageQuery,TItem>
  nameWithType: KeyValuePair<MessageQuery,TItem>
  fullName: System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageQuery
    name: MessageQuery
    nameWithType: MessageQuery
    fullName: MessageQuery
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add(System.ServiceModel.Dispatcher.MessageQuery,`0)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Add(MessageQuery,TItem)
  nameWithType: MessageQueryTable<TItem>.Add(MessageQuery,TItem)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Add(MessageQuery,TItem)
- uid: System.ServiceModel.Dispatcher.MessageQuery
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: MessageQuery
  nameWithType: MessageQuery
  fullName: System.ServiceModel.Dispatcher.MessageQuery
- uid: TItem
  isExternal: true
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Clear()
  nameWithType: MessageQueryTable<TItem>.Clear()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Clear()
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Contains(KeyValuePair<MessageQuery,TItem>)
  nameWithType: MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Contains(KeyValuePair<MessageQuery,TItem>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageQuery)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: ContainsKey(MessageQuery)
  nameWithType: MessageQueryTable<TItem>.ContainsKey(MessageQuery)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.ContainsKey(MessageQuery)
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0}[],System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)
  nameWithType: MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.CopyTo(KeyValuePair<MessageQuery,TItem>,Int32)
- uid: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}[]
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<MessageQuery,TItem>
  nameWithType: KeyValuePair<MessageQuery,TItem>
  fullName: System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>[]
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageQuery
    name: MessageQuery
    nameWithType: MessageQuery
    fullName: MessageQuery
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Count
  nameWithType: MessageQueryTable<TItem>.Count
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Count
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Evaluate(Message)
  nameWithType: MessageQueryTable<TItem>.Evaluate(Message)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(Message)
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TResult}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<MessageQuery,TResult>>
  nameWithType: IEnumerable<KeyValuePair<MessageQuery,TResult>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageQuery
    name: MessageQuery
    nameWithType: MessageQuery
    fullName: MessageQuery
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Evaluate(MessageBuffer)
  nameWithType: MessageQueryTable<TItem>.Evaluate(MessageBuffer)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Evaluate(MessageBuffer)
- uid: System.ServiceModel.Channels.MessageBuffer
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageBuffer
  nameWithType: MessageBuffer
  fullName: System.ServiceModel.Channels.MessageBuffer
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: MessageQueryTable<TItem>.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,TItem}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<KeyValuePair<MessageQuery,TItem>>
  nameWithType: IEnumerator<KeyValuePair<MessageQuery,TItem>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageQuery,TItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageQuery
    name: MessageQuery
    nameWithType: MessageQuery
    fullName: MessageQuery
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: IsReadOnly
  nameWithType: MessageQueryTable<TItem>.IsReadOnly
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.IsReadOnly
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item(System.ServiceModel.Dispatcher.MessageQuery)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Item(MessageQuery)
  nameWithType: MessageQueryTable<TItem>.Item(MessageQuery)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Item(MessageQuery)
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Keys
  nameWithType: MessageQueryTable<TItem>.Keys
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Keys
- uid: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageQuery}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<MessageQuery>
  nameWithType: ICollection<MessageQuery>
  fullName: System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageQuery>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.ServiceModel.Dispatcher.MessageQuery>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageQuery
    name: MessageQuery
    nameWithType: MessageQuery
    fullName: MessageQuery
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageQuery,`0})
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Remove(KeyValuePair<MessageQuery,TItem>)
  nameWithType: MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(KeyValuePair<MessageQuery,TItem>)
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove(System.ServiceModel.Dispatcher.MessageQuery)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Remove(MessageQuery)
  nameWithType: MessageQueryTable<TItem>.Remove(MessageQuery)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Remove(MessageQuery)
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageQuery,`0@)
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: TryGetValue(MessageQuery,TItem)
  nameWithType: MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.TryGetValue(MessageQuery,TItem)
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Values
  nameWithType: MessageQueryTable<TItem>.Values
  fullName: System.ServiceModel.Dispatcher.MessageQueryTable<TItem>.Values
- uid: System.Collections.Generic.ICollection{TItem}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<TItem>
  nameWithType: ICollection<TItem>
  fullName: System.Collections.Generic.ICollection<TItem>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.#ctor*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: MessageQueryTable<TItem>
  nameWithType: MessageQueryTable<TItem>.MessageQueryTable<TItem>
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Add*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Add
  nameWithType: MessageQueryTable<TItem>.Add
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Clear*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Clear
  nameWithType: MessageQueryTable<TItem>.Clear
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Contains*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Contains
  nameWithType: MessageQueryTable<TItem>.Contains
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.ContainsKey*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: ContainsKey
  nameWithType: MessageQueryTable<TItem>.ContainsKey
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.CopyTo*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: CopyTo
  nameWithType: MessageQueryTable<TItem>.CopyTo
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Count*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Count
  nameWithType: MessageQueryTable<TItem>.Count
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Evaluate<TResult>*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Evaluate<TResult>
  nameWithType: MessageQueryTable<TItem>.Evaluate<TResult>
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.GetEnumerator*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: GetEnumerator
  nameWithType: MessageQueryTable<TItem>.GetEnumerator
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.IsReadOnly*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: IsReadOnly
  nameWithType: MessageQueryTable<TItem>.IsReadOnly
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Item*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Item
  nameWithType: MessageQueryTable<TItem>.Item
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Keys*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Keys
  nameWithType: MessageQueryTable<TItem>.Keys
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Remove*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Remove
  nameWithType: MessageQueryTable<TItem>.Remove
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: MessageQueryTable<TItem>.System.Collections.IEnumerable.GetEnumerator
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.TryGetValue*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: TryGetValue
  nameWithType: MessageQueryTable<TItem>.TryGetValue
- uid: System.ServiceModel.Dispatcher.MessageQueryTable`1.Values*
  parent: System.ServiceModel.Dispatcher.MessageQueryTable`1
  isExternal: false
  name: Values
  nameWithType: MessageQueryTable<TItem>.Values
