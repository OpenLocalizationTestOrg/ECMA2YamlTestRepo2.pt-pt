### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.EventDescriptor
  id: EventDescriptor
  children:
  - System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  - System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  - System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])
  - System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
  - System.ComponentModel.EventDescriptor.ComponentType
  - System.ComponentModel.EventDescriptor.EventType
  - System.ComponentModel.EventDescriptor.IsMulticast
  - System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
  langs:
  - csharp
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
  type: Class
  summary: "Fornece informações sobre um evento."
  remarks: "Um EventDescriptor é composta por um nome, os respetivos atributos, o componente que o evento está vinculado a, o delegado do evento, o tipo de delegado, e se o delegado é transferida por multicast.       EventDescriptor fornece o seguinte `abstract` propriedades e métodos:- <xref:System.ComponentModel.EventDescriptor.ComponentType%2A>contém o tipo de componente este evento está declarado.</xref:System.ComponentModel.EventDescriptor.ComponentType%2A>      - <xref:System.ComponentModel.EventDescriptor.EventType%2A>contém o tipo de delegado para o evento.</xref:System.ComponentModel.EventDescriptor.EventType%2A>      - <xref:System.ComponentModel.EventDescriptor.IsMulticast%2A>contém um valor que indica se o delegado do evento é um delegado de multicast.</xref:System.ComponentModel.EventDescriptor.IsMulticast%2A>      - <xref:System.ComponentModel.EventDescriptor.AddEventHandler%2A>vincula o evento para um componente.</xref:System.ComponentModel.EventDescriptor.AddEventHandler%2A>      - <xref:System.ComponentModel.EventDescriptor.RemoveEventHandler%2A>desvincula o delegado do componente de modo a que o delegado deixará de receber eventos do componente de.</xref:System.ComponentModel.EventDescriptor.RemoveEventHandler%2A>       Para obter mais informações sobre eventos, consulte [NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2). Para obter mais informações sobre reflexão, consulte os tópicos [reflexão](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is built upon the example in the <xref:System.ComponentModel.EventDescriptorCollection> class. It prints the information (category, description, and display name) of each event on a button in a text box. It requires that `button1` and `textbox1` have been instantiated on a form.  \n  \n [!code-cpp[EventDescriptor#1](~/add/codesnippet/cpp/t-system.componentmodel._26_1.cpp)]\n [!code-cs[EventDescriptor#1](~/add/codesnippet/csharp/t-system.componentmodel._26_1.cs)]\n [!code-vb[EventDescriptor#1](~/add/codesnippet/visualbasic/t-system.componentmodel._26_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class EventDescriptor : System.ComponentModel.MemberDescriptor
  inheritance:
  - System.Object
  - System.ComponentModel.MemberDescriptor
  implements: []
  inheritedMembers:
  - System.ComponentModel.MemberDescriptor.AttributeArray
  - System.ComponentModel.MemberDescriptor.Attributes
  - System.ComponentModel.MemberDescriptor.Category
  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  - System.ComponentModel.MemberDescriptor.Description
  - System.ComponentModel.MemberDescriptor.DesignTimeOnly
  - System.ComponentModel.MemberDescriptor.DisplayName
  - System.ComponentModel.MemberDescriptor.Equals(System.Object)
  - System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  - System.ComponentModel.MemberDescriptor.GetHashCode
  - System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  - System.ComponentModel.MemberDescriptor.IsBrowsable
  - System.ComponentModel.MemberDescriptor.Name
  - System.ComponentModel.MemberDescriptor.NameHashCode
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  id: '#ctor(System.ComponentModel.MemberDescriptor)'
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventDescriptor(MemberDescriptor)
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> classe com o nome e a atributos em especificado <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>."
  syntax:
    content: protected EventDescriptor (System.ComponentModel.MemberDescriptor descr);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> que contém o nome do evento e os respetivos atributos."
  overload: System.ComponentModel.EventDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventDescriptor(MemberDescriptor,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> classe com o nome especificado no <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> e os atributos em ambos os <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> e o <xref:System.Attribute>matriz.</xref:System.Attribute>"
  remarks: "Este construtor acrescenta os atributos na <xref:System.Attribute>matriz de atributos na <xref:System.ComponentModel.MemberDescriptor>.</xref:System.ComponentModel.MemberDescriptor> </xref:System.Attribute>"
  syntax:
    content: protected EventDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> que tem o nome do membro e os respetivos atributos."
    - id: attrs
      type: System.Attribute[]
      description: "Um <xref:System.Attribute>matriz com os atributos que pretende adicionar a esta descrição do evento.</xref:System.Attribute>"
  overload: System.ComponentModel.EventDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])
  id: '#ctor(System.String,System.Attribute[])'
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventDescriptor(String,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(String,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(String,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> classe com o nome e atributo a matriz especificada."
  syntax:
    content: protected EventDescriptor (string name, Attribute[] attrs);
    parameters:
    - id: name
      type: System.String
      description: "O nome do evento."
    - id: attrs
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que contém os atributos de evento.</xref:System.Attribute>"
  overload: System.ComponentModel.EventDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
  id: AddEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: AddEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.AddEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.AddEventHandler(Object,Delegate)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Quando substituí-lo de uma classe derivada, vincula o evento para o componente."
  remarks: "Normalmente, este método é implementado através de reflexão. Para obter mais informações sobre reflexão, consulte os tópicos [reflexão](~/add/includes/ajax-current-ext-md.md).       Para obter mais informações sobre os delegados, consulte [NIB: eventos e delegados](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  syntax:
    content: public abstract void AddEventHandler (object component, Delegate value);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente que fornece eventos para o delegado."
    - id: value
      type: System.Delegate
      description: "Um delegado que representa o método que processa o evento."
  overload: System.ComponentModel.EventDescriptor.AddEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.ComponentType
  id: ComponentType
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: ComponentType
  nameWithType: EventDescriptor.ComponentType
  fullName: System.ComponentModel.EventDescriptor.ComponentType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Quando substituí-lo de uma classe derivada, obtém o tipo de componente que este evento está vinculado a."
  remarks: "Normalmente, esta propriedade é implementada através de reflexão."
  syntax:
    content: public abstract Type ComponentType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de componente de eventos está vinculado ao.</xref:System.Type>"
  overload: System.ComponentModel.EventDescriptor.ComponentType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.EventType
  id: EventType
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventType
  nameWithType: EventDescriptor.EventType
  fullName: System.ComponentModel.EventDescriptor.EventType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Quando substituí-lo de uma classe derivada, obtém o tipo de delegado para o evento."
  remarks: "Normalmente, esta propriedade é implementada através de reflexão."
  syntax:
    content: public abstract Type EventType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de delegado para o evento.</xref:System.Type>"
  overload: System.ComponentModel.EventDescriptor.EventType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.IsMulticast
  id: IsMulticast
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: IsMulticast
  nameWithType: EventDescriptor.IsMulticast
  fullName: System.ComponentModel.EventDescriptor.IsMulticast
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Quando substituí-lo de uma classe derivada, obtém um valor que indica se o delegado do evento é um delegado de multicast."
  remarks: "Normalmente, esta propriedade é implementada através de reflexão.       Um delegado multicast é diferente de um delegado regular pode conter referências a mais do que apenas um método. Métodos de um delegado multicast são executados de forma síncrona quando o delegado é invocado, pela ordem em que aparecem. Se um dos métodos chamados emite uma exceção, o delegado ceases e a exceção é propagada para o chamador de delegado."
  syntax:
    content: public abstract bool IsMulticast { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o delegado do evento é transferida por multicast; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.EventDescriptor.IsMulticast*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
  id: RemoveEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: RemoveEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.RemoveEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.RemoveEventHandler(Object,Delegate)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Quando substituí-lo de uma classe derivada, desvincula o delegado do componente de modo a que o delegado deixará de receber eventos do componente do."
  remarks: "Normalmente, este método é implementado através de reflexão. Para obter mais informações, consulte os tópicos [reflexão](~/add/includes/ajax-current-ext-md.md).       Para obter mais informações sobre os delegados, consulte [NIB: eventos e delegados](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  syntax:
    content: public abstract void RemoveEventHandler (object component, Delegate value);
    parameters:
    - id: component
      type: System.Object
      description: "O componente que o delegado está vinculado ao."
    - id: value
      type: System.Delegate
      description: "O delegado para desvincular de componente."
  overload: System.ComponentModel.EventDescriptor.RemoveEventHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: System.ComponentModel.MemberDescriptor
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor(MemberDescriptor)
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor)
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor(MemberDescriptor,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor(String,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(String,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(String,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: AddEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.AddEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.AddEventHandler(Object,Delegate)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.ComponentModel.EventDescriptor.ComponentType
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: EventDescriptor.ComponentType
  fullName: System.ComponentModel.EventDescriptor.ComponentType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.EventDescriptor.EventType
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventType
  nameWithType: EventDescriptor.EventType
  fullName: System.ComponentModel.EventDescriptor.EventType
- uid: System.ComponentModel.EventDescriptor.IsMulticast
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: IsMulticast
  nameWithType: EventDescriptor.IsMulticast
  fullName: System.ComponentModel.EventDescriptor.IsMulticast
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: RemoveEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.RemoveEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.RemoveEventHandler(Object,Delegate)
- uid: System.ComponentModel.EventDescriptor.#ctor*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor.EventDescriptor
- uid: System.ComponentModel.EventDescriptor.AddEventHandler*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: AddEventHandler
  nameWithType: EventDescriptor.AddEventHandler
- uid: System.ComponentModel.EventDescriptor.ComponentType*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: EventDescriptor.ComponentType
- uid: System.ComponentModel.EventDescriptor.EventType*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventType
  nameWithType: EventDescriptor.EventType
- uid: System.ComponentModel.EventDescriptor.IsMulticast*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: IsMulticast
  nameWithType: EventDescriptor.IsMulticast
- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: RemoveEventHandler
  nameWithType: EventDescriptor.RemoveEventHandler
