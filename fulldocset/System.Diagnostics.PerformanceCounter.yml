### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.PerformanceCounter
  id: PerformanceCounter
  children:
  - System.Diagnostics.PerformanceCounter.#ctor
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounter.BeginInit
  - System.Diagnostics.PerformanceCounter.CategoryName
  - System.Diagnostics.PerformanceCounter.Close
  - System.Diagnostics.PerformanceCounter.CloseSharedResources
  - System.Diagnostics.PerformanceCounter.CounterHelp
  - System.Diagnostics.PerformanceCounter.CounterName
  - System.Diagnostics.PerformanceCounter.CounterType
  - System.Diagnostics.PerformanceCounter.Decrement
  - System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  - System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)
  - System.Diagnostics.PerformanceCounter.EndInit
  - System.Diagnostics.PerformanceCounter.Increment
  - System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  - System.Diagnostics.PerformanceCounter.InstanceLifetime
  - System.Diagnostics.PerformanceCounter.InstanceName
  - System.Diagnostics.PerformanceCounter.MachineName
  - System.Diagnostics.PerformanceCounter.NextSample
  - System.Diagnostics.PerformanceCounter.NextValue
  - System.Diagnostics.PerformanceCounter.RawValue
  - System.Diagnostics.PerformanceCounter.ReadOnly
  - System.Diagnostics.PerformanceCounter.RemoveInstance
  langs:
  - csharp
  name: PerformanceCounter
  nameWithType: PerformanceCounter
  fullName: System.Diagnostics.PerformanceCounter
  type: Class
  summary: "Represents a Windows NT performance counter component."
  remarks: "The PerformanceCounter component can be used for both reading existing predefined or custom counters and publishing (writing) performance data to custom counters.  \n  \n There are numerous predefined counters listed in the Windows Performance Monitor's [Add Counters dialog box](http://go.microsoft.com/fwlink/p/?LinkId=257854). To learn about the .NET Framework performance counters, see [Performance Counters](~/add/includes/ajax-current-ext-md.md).  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n> [!IMPORTANT]\n>  In versions 1.0 and 1.1 of the .NET Framework, this class requires immediate callers to be fully trusted. Starting with the .NET Framework version 2.0, this class requires <xref:System.Diagnostics.PerformanceCounterPermission> for specific actions. It is strongly recommended that <xref:System.Diagnostics.PerformanceCounterPermission> not be granted to semi-trusted code.  The ability to read and write performance counters allows code to perform actions such as enumerating executing processes and obtaining information about them.  \n>   \n>  In addition, passing a PerformanceCounter object to less-trusted code can create a security issue. Never pass performance counter objects, such as a <xref:System.Diagnostics.PerformanceCounterCategory> or PerformanceCounter, to less trusted code.  \n  \n To read from a performance counter, create an instance of the PerformanceCounter class, set the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and, optionally, the <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> or <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties, and then call the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method to take a performance counter reading.  \n  \n To publish performance counter data, create one or more custom counters using the <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=fullName> method, create an instance of the PerformanceCounter class, set the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> and, optionally, <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> or <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties, and then call the <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, or <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods, or set the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property to change the value of your custom counter.  \n  \n> [!NOTE]\n>  The <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, and <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods use interlocks to update the counter value. This helps keep the counter value accurate in multithreaded or multiprocess scenarios, but also results in a performance penalty. If you do not need the accuracy that interlocked operations provide, you can update the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property directly for up to a 5 times performance improvement.  However, in multithreaded scenarios, some updates to the counter value might be ignored, resulting in inaccurate data.  \n  \n The counter is the mechanism by which performance data is collected. The registry stores the names of all the counters, each of which is related to a specific area of system functionality. Examples include a processor's busy time, memory usage, or the number of bytes received over a network connection.  \n  \n Each counter is uniquely identified through its name and its location. In the same way that a file path includes a drive, a directory, one or more subdirectories, and a file name, counter information consists of four elements: the computer, the category, the category instance, and the counter name.  \n  \n The counter information must include the category, or performance object, that the counter measures data for. A computer's categories include physical components, such as processors, disks, and memory. There are also system categories, such as processes and threads. Each category is related to a functional element within the computer and has a set of standard counters assigned to it. These objects are listed in the Performance object drop-down list of the Add Counters dialog box within the Windows 2000 System Monitor, and you must include them in the counter path. Performance data is grouped by the category to which is it related.  \n  \n In certain cases, several copies of the same category can exist. For example, several processes and threads run simultaneously, and some computers contain more than one processor. The category copies are called category instances, and each instance has a set of standard counters assigned to it. If a category can have more than one instance, an instance specification must be included in the counter information.  \n  \n To obtain performance data for counters that required an initial or previous value for performing the necessary calculation, call the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method twice and use the information returned as your application requires.  \n  \n> [!NOTE]\n>  Performance counter categories installed with the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] use separate shared memory, with each performance counter category having its own memory. You can specify the size of separate shared memory by creating a DWORD named FileMappingSize in the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<category name>*\\Performance. The FileMappingSize value is set to the shared memory size of the category. The default size is 131072 decimal. If the FileMappingSize value is not present, the `fileMappingSize` attribute value for the `performanceCounters` element specified in the Machine.config file is used, causing additional overhead for configuration file processing. You can realize a performance improvement for application startup by setting the file mapping size in the registry. For more information about the file mapping size, see [\\&lt;performanceCounters\\&gt;](../Topic/%3CperformanceCounters%3E%20Element.md)."
  example:
  - "The following code example demonstrates the use of the PerformanceCounter class to create and use an <xref:System.Diagnostics.PerformanceCounterType> counter type. The example creates categories, sets up counters, collects data from the counters, and calls the <xref:System.Diagnostics.CounterSampleCalculator> class to interpret the performance counter data. The intermediate and final results are displayed in the console window. For additional examples of other performance counter types, see the <xref:System.Diagnostics.PerformanceCounterType> enumeration.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/cpp/t-system.diagnostics.per_0_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/csharp/t-system.diagnostics.per_0_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/visualbasic/t-system.diagnostics.per_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.InstallerType("System.Diagnostics.PerformanceCounterInstaller,System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class PerformanceCounter : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor
  id: '#ctor'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter()
  nameWithType: PerformanceCounter.PerformanceCounter()
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new, read-only instance of the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> class, without associating the instance with any system or custom performance counter."
  remarks: "This overload of the constructor sets the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> properties to empty strings (&quot;&quot;), and sets the <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> property to the local computer, (&quot;.&quot;).       This constructor does not initialize the performance counter, so it does not associate the instance with an existing counter on the local computer. To point to a specific performance counter, set the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and, optionally, the <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> and <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties before reading any other properties or attempting to read from a counter. To write to a performance counter, set the <xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A> property to `false`.      > [!NOTE] >  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this member has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource> &#124; <xref:System.Security.Permissions.HostProtectionResource>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a default instance of the <xref:System.Diagnostics.PerformanceCounter> class. After the instance is created, the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> property values are set, and the results of a call to the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method are displayed.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/m-system.diagnostics.per_15_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/m-system.diagnostics.per_15_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/m-system.diagnostics.per_15_1.vb)]"
  syntax:
    content: public PerformanceCounter ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new, read-only instance of the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category have a single instance."
  remarks: "The parameter strings are not case-sensitive.       Use this overload to access a counter on the local computer that belongs to a category containing a single performance counter category instance. If you attempt to use this constructor to point this <xref:System.Diagnostics.PerformanceCounter> instance to a category that contains multiple instances, the constructor throws an exception. This overload can access any read-only or read/write counter, but does so in a read-only mode. A <xref:System.Diagnostics.PerformanceCounter> instance created using this overload cannot write to the counter, even if the counter itself is read/write.       This overload of the constructor sets the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> and <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> properties to the values you pass in, sets the <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> property to the local computer, &quot;.&quot;, and sets the <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> property to an empty string (&quot;&quot;).       This constructor initializes the performance counter and associates the instance with an existing counter (either a system or a custom counter) on the local computer. The values that you pass in for the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> and <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> properties must point to an existing performance counter on the local computer.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category (performance object) with which this performance counter is associated."
    - id: counterName
      type: System.String
      description: "The name of the performance counter."
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code> is an empty string (&quot;&quot;).       -or-       <code>counterName</code> is an empty string (&quot;&quot;).       -or-       The category specified does not exist.       -or-       The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.       -or-       <code>categoryName</code> and <code>counterName</code> have been localized into different languages."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new, read-only or read/write instance of the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category contain a single instance."
  remarks: "The parameter strings are not case-sensitive.       Use this overload to access a read-only or read/write counter on the local computer that belongs to a category containing a single performance counter category instance. If you attempt to use this constructor to point this <xref:System.Diagnostics.PerformanceCounter> instance to a category that contains multiple instances, the constructor throws an exception.       This overload of the constructor sets the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A> properties to the values you pass in, sets the <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> property to the local computer, &quot;.&quot;, and sets the <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> property to an empty string (&quot;&quot;).       This constructor initializes the performance counter and associates the instance with an existing counter (either a system or a custom counter) on the local computer. The values that you pass in for the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> and <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> properties must point to an existing performance counter on the local computer. If the performance counter instance that you point to is not valid, calling the constructor throws an exception.      > [!NOTE] >  You can use this overload to connect to a system counter, but you cannot write to a system counter. Therefore, setting `readOnly` to `false` when connecting to a system counter causes the constructor to throw an exception.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example creates an instance of the <xref:System.Diagnostics.PerformanceCounter> class. The example passes in category names, counter names, and a flag value indicating that the counter is not read-only. This code example is part of a larger example for the <xref:System.Diagnostics.PerformanceCounter> class.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#2](~/add/codesnippet/cpp/edd71a17-4ee7-4e9f-af30-_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#2](~/add/codesnippet/csharp/edd71a17-4ee7-4e9f-af30-_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#2](~/add/codesnippet/visualbasic/edd71a17-4ee7-4e9f-af30-_1.vb)]"
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, bool readOnly);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category (performance object) with which this performance counter is associated."
    - id: counterName
      type: System.String
      description: "The name of the performance counter."
    - id: readOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to access the counter in read-only mode (although the counter itself could be read/write); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to access the counter in read/write mode."
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>categoryName</code> is an empty string (&quot;&quot;).       -or-       The <code>counterName</code> is an empty string (&quot;&quot;).       -or-       The category specified does not exist. (if <code>readOnly</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>).       -or-       The category specified is not a .NET Framework custom category (if <code>readOnly</code> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>).       -or-       The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.       -or-       <code>categoryName</code> and <code>counterName</code> have been localized into different languages."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new, read-only instance of the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> class and associates it with the specified system or custom performance counter and category instance on the local computer."
  remarks: "The parameter strings are not case-sensitive.       This overload of the constructor sets the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> properties to the values you pass in, and sets the <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> property to the local computer, &quot;.&quot;.       This constructor initializes the performance counter and associates the instance with an existing counter (either a system or a custom counter) on the local computer. The values that you pass in for the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> properties must point to an existing performance counter on the local computer. If the performance counter instance you point to is not valid, calling the constructor throws an exception.       This overload can access any read-only or read/write counter, but does so in a read-only mode. A <xref:System.Diagnostics.PerformanceCounter> instance created using this overload cannot write to the counter, even if the counter itself is read/write.       To create a performance category instance, specify an `instanceName` on the <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> constructor. If the category instance specified by `instanceName` already exists the new object will reference the existing category instance.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, string instanceName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category (performance object) with which this performance counter is associated."
    - id: counterName
      type: System.String
      description: "The name of the performance counter."
    - id: instanceName
      type: System.String
      description: "The name of the performance counter category instance, or an empty string (&quot;&quot;), if the category contains a single instance."
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code> is an empty string (&quot;&quot;).       -or-       <code>counterName</code> is an empty string (&quot;&quot;).       -or-       The category specified is not valid.       -or-       The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.       -or-       <code>instanceName</code> is longer than 127 characters.       -or-       <code>categoryName</code> and <code>counterName</code> have been localized into different languages."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new, read-only or read/write instance of the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> class and associates it with the specified system or custom performance counter and category instance on the local computer."
  remarks: "The parameter strings are not case-sensitive.       Use this overload to access a performance counter in either read-only or read/write mode.       This overload of the constructor sets the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> properties to the values you pass in, it and sets the <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> property to the local computer, &quot;.&quot;.       This constructor initializes the performance counter and associates the instance with an existing counter (either a system or a custom counter) on the local computer. The values that you pass in for the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> properties must point to an existing performance counter on the local computer. If the performance counter instance that you point to is not valid, calling the constructor throws an exception.      > [!NOTE] >  You can use this overload to connect to a system counter, but you cannot write to a system counter. Therefore, setting `readOnly` to `false` when connecting to a system counter causes the constructor to throw an exception.       To create a performance category instance, specify an `instanceName` on the <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> constructor. If the category instance specified by `instanceName` already exists the new object will reference the existing category instance.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, string instanceName, bool readOnly);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category (performance object) with which this performance counter is associated."
    - id: counterName
      type: System.String
      description: "The name of the performance counter."
    - id: instanceName
      type: System.String
      description: "The name of the performance counter category instance, or an empty string (&quot;&quot;), if the category contains a single instance."
    - id: readOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to access a counter in read-only mode; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to access a counter in read/write mode."
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code> is an empty string (&quot;&quot;).       -or-       <code>counterName</code> is an empty string (&quot;&quot;).       -or-       The read/write permission setting requested is invalid for this counter.       -or-       The category specified does not exist (if <code>readOnly</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>).       -or-       The category specified is not a .NET Framework custom category (if <code>readOnly</code> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>).       -or-       The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.       -or-       <code>instanceName</code> is longer than 127 characters.       -or-       <code>categoryName</code> and <code>counterName</code> have been localized into different languages."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new, read-only instance of the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> class and associates it with the specified system or custom performance counter and category instance, on the specified computer."
  remarks: "The parameter strings are not case-sensitive.       This overload of the constructor sets the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>, and <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties to the values you pass in.       This constructor initializes the performance counter and associates the instance with an existing counter (either a system or a custom counter) on the specified computer. The values that you pass in for the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> and <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties must point to an existing performance counter. If the performance counter instance you point to is not valid, calling the constructor throws an exception. This overload can access any read-only or read/write counter, but does so in a read-only mode. A <xref:System.Diagnostics.PerformanceCounter> instance created using this overload cannot write to the counter, even if the counter itself is read/write.      > [!NOTE] >  You cannot write to remote performance counters. There is no overload that allows you to specify a read/write instance of the <xref:System.Diagnostics.PerformanceCounter> class that connects to a remote computer.       To create a performance category instance, specify an `instanceName` on the <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> constructor. If the category instance specified by `instanceName` already exists the new object will reference the existing category instance.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.      > [!NOTE] >  In Windows Vista, when the remote computer is a member of a workgroup, you may need to disable UAC so that the local user account is not filtered and can be elevated to an administrator account. For security reasons, disabling UAC should be a last resort. For information on disabling UAC, see [User Account Control and WMI](http://go.microsoft.com/fwlink/?LinkId=91617)."
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, string instanceName, string machineName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category (performance object) with which this performance counter is associated."
    - id: counterName
      type: System.String
      description: "The name of the performance counter."
    - id: instanceName
      type: System.String
      description: "The name of the performance counter category instance, or an empty string (&quot;&quot;), if the category contains a single instance."
    - id: machineName
      type: System.String
      description: "The computer on which the performance counter and its associated category exist."
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code> is an empty string (&quot;&quot;).       -or-       <code>counterName</code> is an empty string (&quot;&quot;).       -or-       The read/write permission setting requested is invalid for this counter.       -or-       The counter does not exist on the specified computer.       -or-       The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.       -or-       <code>instanceName</code> is longer than 127 characters.       -or-       <code>categoryName</code> and <code>counterName</code> have been localized into different languages."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> parameter is not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.BeginInit
  id: BeginInit
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: BeginInit()
  nameWithType: PerformanceCounter.BeginInit()
  fullName: System.Diagnostics.PerformanceCounter.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Begins the initialization of a <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> instance used on a form or by another component. The initialization occurs at runtime."
  remarks: "The [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component. The <xref:System.Diagnostics.PerformanceCounter.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Diagnostics.PerformanceCounter.EndInit%2A> methods prevents the component from being used before it is fully initialized."
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CategoryName
  id: CategoryName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
  fullName: System.Diagnostics.PerformanceCounter.CategoryName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the name of the performance counter category for this performance counter."
  remarks: "The CategoryName is displayed in the `Performance Object` field of Performance Counter Manager MMC snap in&quot;s `Add Counter` dialog box.       A performance counter monitors the behavior of a category, or performance object, on a computer. Categories include physical components (such as processors, disks, and memory) and system objects (such as processes and threads). System counters that are related to the same performance object are grouped into a category that indicates their common focus. When you create an instance of the <xref:System.Diagnostics.PerformanceCounter> class, you first indicate the category with which the component will interact, and then you choose a counter from that category.       For example, one Windows counter category is the Memory category. System counters within this category track memory data such as the number of bytes available and the number of bytes cached. If you wanted to work with the bytes cached in your application, you would create an instance of the <xref:System.Diagnostics.PerformanceCounter> component, connect it to the Memory category, and then pick the appropriate counter (in this case, Cached Bytes) from that category.       Although your system makes many more counter categories available, the categories that you will probably interact with most frequently are the Cache, Memory, Objects, PhysicalDisk, Process, Processor, Server, System, and Thread categories."
  example:
  - "The following code example creates a default instance of the <xref:System.Diagnostics.PerformanceCounter> class. After the instance is created, the CategoryName, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> property values are set, and the results of a call to the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method are displayed.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/p-system.diagnostics.per_6_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/p-system.diagnostics.per_6_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_6_1.vb)]"
  syntax:
    content: public string CategoryName { get; set; }
    return:
      type: System.String
      description: "The name of the performance counter category (performance object) with which this performance counter is associated."
  overload: System.Diagnostics.PerformanceCounter.CategoryName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The CategoryName is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Close
  id: Close
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Close()
  nameWithType: PerformanceCounter.Close()
  fullName: System.Diagnostics.PerformanceCounter.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Closes the performance counter and frees all the resources allocated by this performance counter instance."
  remarks: "When you associate this <xref:System.Diagnostics.PerformanceCounter> instance with a performance counter that resides on the server, the system initializes the instance and allocates memory to contain counter sample information. The Close method frees the resources allocated by the object."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CloseSharedResources
  id: CloseSharedResources
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CloseSharedResources()
  nameWithType: PerformanceCounter.CloseSharedResources()
  fullName: System.Diagnostics.PerformanceCounter.CloseSharedResources()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Frees the performance counter library shared state allocated by the counters."
  syntax:
    content: public static void CloseSharedResources ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.CloseSharedResources*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CounterHelp
  id: CounterHelp
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
  fullName: System.Diagnostics.PerformanceCounter.CounterHelp
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the description for this performance counter."
  remarks: "The Add Counters dialog box of the Performance Counter Manager MMC snap in displays the CounterHelp text when a user selects a counter from the counters list and clicks the Explain button.       When you create a new counter, use the CounterHelp text to describe what the counter monitors do so the user can determine whether to add the counter to the System Monitor&quot;s display.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  syntax:
    content: public string CounterHelp { get; }
    return:
      type: System.String
      description: "A description of the item or quantity that this performance counter measures."
  overload: System.Diagnostics.PerformanceCounter.CounterHelp*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> instance is not associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CounterName
  id: CounterName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
  fullName: System.Diagnostics.PerformanceCounter.CounterName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the name of the performance counter that is associated with this <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> instance."
  remarks: "You can get a list of available pre-existing counters from the Windows Performance Manager’s [Add Counters dialog box](http://go.microsoft.com/fwlink/p/?LinkId=257854)."
  example:
  - "The following code example shows how to set the CounterName property to a typical counter name.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/p-system.diagnostics.per_4_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/p-system.diagnostics.per_4_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_4_1.vb)]"
  syntax:
    content: public string CounterName { get; set; }
    return:
      type: System.String
      description: "The name of the counter, which generally describes the quantity being counted. This name is displayed in the list of counters of the Performance Counter Manager MMC snap in&quot;s Add Counters dialog box."
  overload: System.Diagnostics.PerformanceCounter.CounterName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The CounterName is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CounterType
  id: CounterType
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
  fullName: System.Diagnostics.PerformanceCounter.CounterType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the counter type of the associated performance counter."
  remarks: "The <xref:System.Diagnostics.PerformanceCounterType> enumeration contains the types of performance counters that you can interact with. Some of the counter types represent calculated values, such as the average of the counter measurements the system has taken. Other types represent raw, or uncalculated, values. The following table shows the counter types that you will interact with most frequently.      |Counter&quot;s Responsibility|PerformanceCounterType Value|Example|   |------------------------------|----------------------------------|-------------|   |Maintain a simple count of items or operations.|`NumberOfItems32`|Tracking the number of orders received as a 32-bit integer.|   |Maintain a higher-capacity simple count.|`NumberOfItems64`|Tracking the number of orders for a site with very high volume, stored as a 64-bit integer.|   |Track the number of items or operations per second.|`RateOfCountsPerSecond32`|Tracking orders received per second on a site.|   |Track a higher-capacity number of items or operations per second.|`RateOfCountsPerSecond64`|Tracking orders received per second on a site with very high volume.|   |Calculate the average time to perform a process or to process an item|`AverageTimer32`|Calculate the average time an order takes to be processed.|       When you create a counter whose type requires the use of a corresponding base counter, you must declare the counter and the base in the <xref:System.Diagnostics.CounterCreationDataCollection> you pass into the <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=fullName> method.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  syntax:
    content: public System.Diagnostics.PerformanceCounterType CounterType { get; }
    return:
      type: System.Diagnostics.PerformanceCounterType
      description: "A <xref href=&quot;System.Diagnostics.PerformanceCounterType&quot;></xref> that describes both how the counter interacts with a monitoring application and the nature of the values it contains (for example, calculated or uncalculated)."
  overload: System.Diagnostics.PerformanceCounter.CounterType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Decrement
  id: Decrement
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Decrement()
  nameWithType: PerformanceCounter.Decrement()
  fullName: System.Diagnostics.PerformanceCounter.Decrement()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Decrements the associated performance counter by one through an efficient atomic operation."
  remarks: "You can write only to custom counters. All system counters are read-only.      > [!NOTE] >  The <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, and Decrement methods use interlocks to update the counter value. This helps keep the counter value accurate in multithreaded or multiprocess scenarios, but also results in a performance penalty. If you do not need the accuracy that interlocked operations provide, you can update the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property directly for up to a 5 times performance improvement.  However, in multithreaded scenarios, some updates to the counter value might be ignored, resulting in inaccurate data.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category."
  syntax:
    content: public long Decrement ();
    parameters: []
    return:
      type: System.Int64
      description: "The decremented counter value."
  overload: System.Diagnostics.PerformanceCounter.Decrement*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The counter is read-only, so the application cannot decrement it.       -or-       The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  id: DefaultFileMappingSize
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: DefaultFileMappingSize
  nameWithType: PerformanceCounter.DefaultFileMappingSize
  fullName: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  type: Field
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Specifies the size, in bytes, of the global memory shared by performance counters. The default size is 524,288 bytes."
  syntax:
    content: public static int DefaultFileMappingSize;
    return:
      type: System.Int32
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PerformanceCounter.Dispose(Boolean)
  fullName: System.Diagnostics.PerformanceCounter.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "To be added."
  overload: System.Diagnostics.PerformanceCounter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.EndInit
  id: EndInit
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: EndInit()
  nameWithType: PerformanceCounter.EndInit()
  fullName: System.Diagnostics.PerformanceCounter.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ends the initialization of a <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> instance that is used on a form or by another component. The initialization occurs at runtime."
  remarks: "The [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component. The <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A> method starts the initialization. Using the <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A> and EndInit methods prevents the component from being used before it is fully initialized."
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Increment
  id: Increment
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Increment()
  nameWithType: PerformanceCounter.Increment()
  fullName: System.Diagnostics.PerformanceCounter.Increment()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Increments the associated performance counter by one through an efficient atomic operation."
  remarks: "You can write only to custom counters. All system counters are read-only.      > [!NOTE] >  The Increment, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, and <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods use interlocks to update the counter value. This helps keep the counter value accurate in multithreaded or multiprocess scenarios, but also results in a performance penalty. If you do not need the accuracy that interlocked operations provide, you can update the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property directly for up to a 5 times performance improvement.  However, in multithreaded scenarios, some updates to the counter value might be ignored, resulting in inaccurate data.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category."
  syntax:
    content: public long Increment ();
    parameters: []
    return:
      type: System.Int64
      description: "The incremented counter value."
  overload: System.Diagnostics.PerformanceCounter.Increment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The counter is read-only, so the application cannot increment it.       -or-       The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  id: IncrementBy(System.Int64)
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: IncrementBy(Int64)
  nameWithType: PerformanceCounter.IncrementBy(Int64)
  fullName: System.Diagnostics.PerformanceCounter.IncrementBy(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Increments or decrements the value of the associated performance counter by a specified amount through an efficient atomic operation."
  remarks: "You can write only to custom counters. All system counters are read-only.      > [!NOTE] >  The <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, IncrementBy, and <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods use interlocks to update the counter value. This helps keep the counter value accurate in multithreaded or multiprocess scenarios, but also results in a performance penalty. If you do not need the accuracy that interlocked operations provide, you can update the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property directly for up to a 5 times performance improvement.  However, in multithreaded scenarios, some updates to the counter value might be ignored, resulting in inaccurate data.      > [!NOTE] >  If the value forthe <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category."
  example:
  - "The following code example demonstrates how to use the IncrementBy method to add increments to a counter. This code example is part of a larger example for the <xref:System.Diagnostics.PerformanceCounter> class.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/cpp/m-system.diagnostics.per_2_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/csharp/m-system.diagnostics.per_2_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/visualbasic/m-system.diagnostics.per_2_1.vb)]"
  syntax:
    content: public long IncrementBy (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "The value to increment by. (A negative value decrements the counter.)"
    return:
      type: System.Int64
      description: "The new counter value."
  overload: System.Diagnostics.PerformanceCounter.IncrementBy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The counter is read-only, so the application cannot increment it.       -or-       The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime
  id: InstanceLifetime
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
  fullName: System.Diagnostics.PerformanceCounter.InstanceLifetime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the lifetime of a process."
  remarks: "If the performance counter category is created with the .NET Framework version 1.0 or 1.1, it uses global shared memory, and the value for InstanceLifetime must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category.      > [!NOTE] >  If the value of the <xref:System.Diagnostics.PerformanceCounter.CounterType%2A> property is <xref:System.Diagnostics.PerformanceCounterCategoryType>, the InstanceLifetime value for the performance counter must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>."
  syntax:
    content: public System.Diagnostics.PerformanceCounterInstanceLifetime InstanceLifetime { get; set; }
    return:
      type: System.Diagnostics.PerformanceCounterInstanceLifetime
      description: "One of the <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> values. The default is <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounter.InstanceLifetime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value set is not a member of the <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> enumeration."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "InstanceLifetime is set after the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> has been initialized."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.InstanceName
  id: InstanceName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
  fullName: System.Diagnostics.PerformanceCounter.InstanceName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets an instance name for this performance counter."
  remarks: "> [!NOTE]\n>  Instance names must be shorter than 128 characters in length.  \n  \n In some situations, categories are subdivided into instances, which track data about multiple occurrences of the object that a category relates to. Instances apply to the category as whole, rather than to individual counters. Every counter within a category has each instance defined for the category. For example, the Process category contains instances named Idle and System. Every counter within the Process category thus contains data for each instance, showing information about either idle processes or system processes.  \n  \n Many categories do not contain multiple instances, so you can leave this property empty to indicate that no instance is associated with the category.  \n  \n If this <xref:System.Diagnostics.PerformanceCounter> instance points to a noncustom category, you can choose from only the existing category instances. You can create new category instances only in custom categories, which allow you to define as many counters and category instances as you need.  \n  \n To create a performance category instance, specify an `instanceName` on the <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> constructor. If the category instance specified by `instanceName` already exists the new object will reference the existing category instance.  \n  \n> [!NOTE]\n>  Do not use the characters \"(\", \")\", \"#\", \"\\\\\", or \"/\" in the instance name. If any of these characters are used, the Performance Console (see [Runtime Profiling](~/add/includes/ajax-current-ext-md.md)) may not correctly display the instance values.  \n  \n If the instance name is automatically generated and might contain the characters \"(\", \")\", \"#\", \"\\\\\", or \"/\", use the character mapping in the following table.  \n  \n|Character|Mapped character|  \n|---------------|----------------------|  \n|(|[|  \n|)|]|  \n|#|_|  \n|\\|_|  \n|/|_|  \n  \n The <xref:System.AppDomain.FriendlyName%2A> property of the <xref:System.AppDomain> object obtained from the <xref:System.AppDomain.CurrentDomain%2A?displayProperty=fullName> property is a common source of instance names that can contain invalid characters."
  example:
  - "The following code example creates a default instance of the <xref:System.Diagnostics.PerformanceCounter> class. After the instance is created, the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and InstanceName property values are set, and the results of a call to the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method are displayed.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/p-system.diagnostics.per_0_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/p-system.diagnostics.per_0_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_0_1.vb)]"
  syntax:
    content: public string InstanceName { get; set; }
    return:
      type: System.String
      description: "The name of the performance counter category instance, or an empty string (&quot;&quot;), if the counter is a single-instance counter."
  overload: System.Diagnostics.PerformanceCounter.InstanceName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.MachineName
  id: MachineName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
  fullName: System.Diagnostics.PerformanceCounter.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the computer name for this performance counter"
  remarks: "You can write values only to counters that reside on the local computer. However, you can read counter values from any computer in the enterprise for which you have access privileges.       When you set the MachineName property to point to a remote computer, the <xref:System.Diagnostics.PerformanceCounter> instance attempts to open the counter on that computer. If the counter does not exist, setting this property throws an exception."
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "The server on which the performance counter and its associated category reside."
  overload: System.Diagnostics.PerformanceCounter.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The MachineName format is invalid."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.NextSample
  id: NextSample
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: NextSample()
  nameWithType: PerformanceCounter.NextSample()
  fullName: System.Diagnostics.PerformanceCounter.NextSample()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtains a counter sample, and returns the raw, or uncalculated, value for it."
  remarks: "This method is generally used for counters that contain uncalculated values.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example demonstrates how to use the NextSample method to obtain the next uncalculated value of a counter. This code example is part of a larger example for the <xref:System.Diagnostics.PerformanceCounter> class.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/cpp/m-system.diagnostics.per_13_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/csharp/m-system.diagnostics.per_13_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/visualbasic/m-system.diagnostics.per_13_1.vb)]"
  syntax:
    content: public System.Diagnostics.CounterSample NextSample ();
    parameters: []
    return:
      type: System.Diagnostics.CounterSample
      description: "A <xref href=&quot;System.Diagnostics.CounterSample&quot;></xref> that represents the next raw value that the system obtains for this counter."
  overload: System.Diagnostics.PerformanceCounter.NextSample*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.NextValue
  id: NextValue
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: NextValue()
  nameWithType: PerformanceCounter.NextValue()
  fullName: System.Diagnostics.PerformanceCounter.NextValue()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtains a counter sample and returns the calculated value for it."
  remarks: "> [!NOTE] >  If the calculated value of a counter depends on two counter reads, the first read operation returns 0.0. Resetting the performance counter properties to specify a different counter is equivalent to creating a new performance counter, and the first read operation using the new properties returns 0.0. The recommended delay time between calls to the NextValue method is one second, to allow the counter to perform the next incremental read.      > [!NOTE] >  To read performance counters, you must have administrative privileges. In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example creates an <xref:System.Diagnostics.PerformanceCounterType> counter and uses the NextValue method to display the counter's values over a time period.  \n  \n [!code-cs[PerformanceCounterType.ElapsedTime#2](~/add/codesnippet/csharp/m-system.diagnostics.per_12_1.cs)]\n [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/add/codesnippet/cpp/m-system.diagnostics.per_12_1.cpp)]\n [!code-vb[PerformanceCounterType.ElapsedTime#2](~/add/codesnippet/visualbasic/m-system.diagnostics.per_12_1.vb)]"
  syntax:
    content: public float NextValue ();
    parameters: []
    return:
      type: System.Single
      description: "The next calculated value that the system obtains for this counter."
  overload: System.Diagnostics.PerformanceCounter.NextValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The instance is not correctly associated with a performance counter."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.RawValue
  id: RawValue
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
  fullName: System.Diagnostics.PerformanceCounter.RawValue
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the raw, or uncalculated, value of this counter."
  remarks: "If the counter type is a 32-bit size and you attempt to set this property to a value that is too large to fit, the property truncates the value to 32 bits. When reading custom counters on the local computer, using the RawValue property rather than a calculated value can produce significantly better performance in scenarios where the raw value is sufficient.       If the counter that you are reading is read-only, getting the RawValue property samples the counter at the time that the property is called. This action is equivalent to making an initial call to the <xref:System.Diagnostics.PerformanceCounter.NextSample%2A> method. If you subsequently call <xref:System.Diagnostics.PerformanceCounter.NextSample%2A>, you can perform calculations on the values that both calls returned.       Because system counters are read-only, you can get but not set their raw values.      > [!NOTE] >  The <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, and <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods use interlocks to update the counter value. This helps keep the counter value accurate in multithreaded or multiprocess scenarios, but also results in a performance penalty. If you do not need the accuracy that interlocked operations provide, you can update the RawValue property directly for up to a 5 times performance improvement.  However, in multithreaded scenarios, some updates to the counter value might be ignored, resulting in inaccurate data.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category.      > [!NOTE] >  To read performance counters in Windows Vista, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following example uses the <xref:System.Diagnostics.CounterSample> class to display the value of the RawValue property for a counter.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/cpp/p-system.diagnostics.per_2_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/csharp/p-system.diagnostics.per_2_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_2_1.vb)]"
  syntax:
    content: public long RawValue { get; set; }
    return:
      type: System.Int64
      description: "The raw value of the counter."
  overload: System.Diagnostics.PerformanceCounter.RawValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "You are trying to set the counter&quot;s raw value, but the counter is read-only.       -or-       The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.ReadOnly
  id: ReadOnly
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
  fullName: System.Diagnostics.PerformanceCounter.ReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets a value indicating whether this <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> instance is in read-only mode."
  remarks: "For a system counter, ReadOnly should always `true`. You cannot write to a system counter."
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> instance is in read-only mode (even if the counter itself is a custom .NET Framework counter); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it is in read/write mode. The default is the value set by the constructor."
  overload: System.Diagnostics.PerformanceCounter.ReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance
  id: RemoveInstance
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: RemoveInstance()
  nameWithType: PerformanceCounter.RemoveInstance()
  fullName: System.Diagnostics.PerformanceCounter.RemoveInstance()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Deletes the category instance specified by the <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> object <xref:System.Diagnostics.PerformanceCounter.InstanceName*> property."
  remarks: "You can remove an instance only for a custom counter. All system counters are read-only, so attempting to remove one of them throws an exception.      > [!NOTE] >  To avoid a possible race condition when the performance counter shared memory is released, it is recommended that the RemoveInstance method be called from the <xref:System.AppDomain.DomainUnload> event handler.       To create a performance category instance, specify an `instanceName` on the <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> constructor. If the category instance specified by `instanceName` already exists the new object will reference the existing category instance.      > [!NOTE] >  If the value for the <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> property is <xref:System.Diagnostics.PerformanceCounterInstanceLifetime> and the performance counter category was created with .NET Framework version 1.0 or 1.1, an <xref:System.InvalidOperationException> is thrown. Performance counter categories created with earlier versions use global shared memory, and the value for <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A> must be <xref:System.Diagnostics.PerformanceCounterInstanceLifetime>. If the category is not used by applications running on versions 1.0 or 1.1 of the .NET Framework, delete and recreate the category."
  syntax:
    content: public void RemoveInstance ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.RemoveInstance*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This counter is read-only, so any instance that is associated with the category cannot be removed.       -or-       The instance is not correctly associated with a performance counter.       -or-       The <xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*> property is set to <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref> when using global shared memory."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error occurred when accessing a system API."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.PerformanceCounter.#ctor
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter()
  nameWithType: PerformanceCounter.PerformanceCounter()
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter()
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String)
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,String)
- uid: System.Diagnostics.PerformanceCounter.BeginInit
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: BeginInit()
  nameWithType: PerformanceCounter.BeginInit()
  fullName: System.Diagnostics.PerformanceCounter.BeginInit()
- uid: System.Diagnostics.PerformanceCounter.CategoryName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
  fullName: System.Diagnostics.PerformanceCounter.CategoryName
- uid: System.Diagnostics.PerformanceCounter.Close
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Close()
  nameWithType: PerformanceCounter.Close()
  fullName: System.Diagnostics.PerformanceCounter.Close()
- uid: System.Diagnostics.PerformanceCounter.CloseSharedResources
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CloseSharedResources()
  nameWithType: PerformanceCounter.CloseSharedResources()
  fullName: System.Diagnostics.PerformanceCounter.CloseSharedResources()
- uid: System.Diagnostics.PerformanceCounter.CounterHelp
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
  fullName: System.Diagnostics.PerformanceCounter.CounterHelp
- uid: System.Diagnostics.PerformanceCounter.CounterName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
  fullName: System.Diagnostics.PerformanceCounter.CounterName
- uid: System.Diagnostics.PerformanceCounter.CounterType
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
  fullName: System.Diagnostics.PerformanceCounter.CounterType
- uid: System.Diagnostics.PerformanceCounterType
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterType
  nameWithType: PerformanceCounterType
  fullName: System.Diagnostics.PerformanceCounterType
- uid: System.Diagnostics.PerformanceCounter.Decrement
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Decrement()
  nameWithType: PerformanceCounter.Decrement()
  fullName: System.Diagnostics.PerformanceCounter.Decrement()
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: DefaultFileMappingSize
  nameWithType: PerformanceCounter.DefaultFileMappingSize
  fullName: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PerformanceCounter.Dispose(Boolean)
  fullName: System.Diagnostics.PerformanceCounter.Dispose(Boolean)
- uid: System.Diagnostics.PerformanceCounter.EndInit
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: EndInit()
  nameWithType: PerformanceCounter.EndInit()
  fullName: System.Diagnostics.PerformanceCounter.EndInit()
- uid: System.Diagnostics.PerformanceCounter.Increment
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Increment()
  nameWithType: PerformanceCounter.Increment()
  fullName: System.Diagnostics.PerformanceCounter.Increment()
- uid: System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: IncrementBy(Int64)
  nameWithType: PerformanceCounter.IncrementBy(Int64)
  fullName: System.Diagnostics.PerformanceCounter.IncrementBy(Int64)
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
  fullName: System.Diagnostics.PerformanceCounter.InstanceLifetime
- uid: System.Diagnostics.PerformanceCounterInstanceLifetime
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterInstanceLifetime
  nameWithType: PerformanceCounterInstanceLifetime
  fullName: System.Diagnostics.PerformanceCounterInstanceLifetime
- uid: System.Diagnostics.PerformanceCounter.InstanceName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
  fullName: System.Diagnostics.PerformanceCounter.InstanceName
- uid: System.Diagnostics.PerformanceCounter.MachineName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
  fullName: System.Diagnostics.PerformanceCounter.MachineName
- uid: System.Diagnostics.PerformanceCounter.NextSample
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextSample()
  nameWithType: PerformanceCounter.NextSample()
  fullName: System.Diagnostics.PerformanceCounter.NextSample()
- uid: System.Diagnostics.CounterSample
  parent: System.Diagnostics
  isExternal: false
  name: CounterSample
  nameWithType: CounterSample
  fullName: System.Diagnostics.CounterSample
- uid: System.Diagnostics.PerformanceCounter.NextValue
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextValue()
  nameWithType: PerformanceCounter.NextValue()
  fullName: System.Diagnostics.PerformanceCounter.NextValue()
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Diagnostics.PerformanceCounter.RawValue
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
  fullName: System.Diagnostics.PerformanceCounter.RawValue
- uid: System.Diagnostics.PerformanceCounter.ReadOnly
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
  fullName: System.Diagnostics.PerformanceCounter.ReadOnly
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RemoveInstance()
  nameWithType: PerformanceCounter.RemoveInstance()
  fullName: System.Diagnostics.PerformanceCounter.RemoveInstance()
- uid: System.Diagnostics.PerformanceCounter.#ctor*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter
  nameWithType: PerformanceCounter.PerformanceCounter
- uid: System.Diagnostics.PerformanceCounter.BeginInit*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: BeginInit
  nameWithType: PerformanceCounter.BeginInit
- uid: System.Diagnostics.PerformanceCounter.CategoryName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
- uid: System.Diagnostics.PerformanceCounter.Close*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Close
  nameWithType: PerformanceCounter.Close
- uid: System.Diagnostics.PerformanceCounter.CloseSharedResources*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CloseSharedResources
  nameWithType: PerformanceCounter.CloseSharedResources
- uid: System.Diagnostics.PerformanceCounter.CounterHelp*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
- uid: System.Diagnostics.PerformanceCounter.CounterName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
- uid: System.Diagnostics.PerformanceCounter.CounterType*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
- uid: System.Diagnostics.PerformanceCounter.Decrement*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Decrement
  nameWithType: PerformanceCounter.Decrement
- uid: System.Diagnostics.PerformanceCounter.Dispose*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Dispose
  nameWithType: PerformanceCounter.Dispose
- uid: System.Diagnostics.PerformanceCounter.EndInit*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: EndInit
  nameWithType: PerformanceCounter.EndInit
- uid: System.Diagnostics.PerformanceCounter.Increment*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Increment
  nameWithType: PerformanceCounter.Increment
- uid: System.Diagnostics.PerformanceCounter.IncrementBy*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: IncrementBy
  nameWithType: PerformanceCounter.IncrementBy
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
- uid: System.Diagnostics.PerformanceCounter.InstanceName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
- uid: System.Diagnostics.PerformanceCounter.MachineName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
- uid: System.Diagnostics.PerformanceCounter.NextSample*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextSample
  nameWithType: PerformanceCounter.NextSample
- uid: System.Diagnostics.PerformanceCounter.NextValue*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextValue
  nameWithType: PerformanceCounter.NextValue
- uid: System.Diagnostics.PerformanceCounter.RawValue*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
- uid: System.Diagnostics.PerformanceCounter.ReadOnly*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RemoveInstance
  nameWithType: PerformanceCounter.RemoveInstance
