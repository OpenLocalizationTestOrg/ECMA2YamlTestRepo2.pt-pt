### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoAPITransform
  id: CryptoAPITransform
  children:
  - System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  - System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.CryptoAPITransform.Clear
  - System.Security.Cryptography.CryptoAPITransform.Dispose
  - System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  - System.Security.Cryptography.CryptoAPITransform.KeyHandle
  - System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  - System.Security.Cryptography.CryptoAPITransform.Reset
  - System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: CryptoAPITransform
  nameWithType: CryptoAPITransform
  fullName: System.Security.Cryptography.CryptoAPITransform
  type: Class
  summary: "Performs a cryptographic transformation of data. This class cannot be inherited."
  remarks: ''
  example:
  - "The following code example demonstrates how to use members of the CryptoAPITransform class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/CSharp/t-system.security.crypto_128_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/VisualBasic/t-system.security.crypto_128_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/CPP/t-system.security.crypto_128_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CryptoAPITransform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets a value indicating whether the current transform can be reused."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/CSharp/p-system.security.crypto_33_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/VisualBasic/p-system.security.crypto_33_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/CPP/p-system.security.crypto_33_1.cpp)]"
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets a value indicating whether multiple blocks can be transformed."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanTransformMultipleBlocks property to determine if multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/CSharp/p-system.security.crypto_68_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/VisualBasic/p-system.security.crypto_68_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/CPP/p-system.security.crypto_68_1.cpp)]"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if multiple blocks can be transformed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoAPITransform.Clear()
  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases all resources used by the <see cref=&quot;T:System.Security.Cryptography.CryptoAPITransform&quot;></see> method."
  remarks: "This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.CryptoAPITransform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md)."
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources used by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/CSharp/m-system.security.crypto_94_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/VisualBasic/m-system.security.crypto_94_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/CPP/m-system.security.crypto_94_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Clear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Dispose()
  nameWithType: CryptoAPITransform.Dispose()
  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases all resources used by the current instance of the <see cref=&quot;T:System.Security.Cryptography.CryptoAPITransform&quot;></see> class."
  remarks: "Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.CryptoAPITransform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.CryptoAPITransform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.CryptoAPITransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.CryptoAPITransform> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.CryptoAPITransform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.CryptoAPITransform> object&quot;s `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the input block size."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/CSharp/p-system.security.crypto_98_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/VisualBasic/p-system.security.crypto_98_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/CPP/p-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "The input block size in bytes."
  overload: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  id: KeyHandle
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the key handle."
  syntax:
    content: public IntPtr KeyHandle { get; }
    return:
      type: System.IntPtr
      description: "The key handle."
  overload: System.Security.Cryptography.CryptoAPITransform.KeyHandle*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the output block size."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the OutputBlockSize property to retrieve the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/CSharp/p-system.security.crypto_55_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/VisualBasic/p-system.security.crypto_55_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/CPP/p-system.security.crypto_55_1.cpp)]"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "The output block size in bytes."
  overload: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.Reset
  id: Reset
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Reset()
  nameWithType: CryptoAPITransform.Reset()
  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Resets the internal state of <see cref=&quot;T:System.Security.Cryptography.CryptoAPITransform&quot;></see> so that it can be used again to do a different encryption or decryption."
  remarks: "The Reset method is called automatically when you call TransformFinalBlock. The `Reset` method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and `Reset` is not called. You can choose to manually call the `Reset` method in this case."
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Reset*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformBlock method to transform the bytes from `currentPosition` in the `sourceBytes` array, writing the bytes to the `targetBytes` array. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/CSharp/cb78acec-9bf8-4488-8243-_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/VisualBasic/cb78acec-9bf8-4488-8243-_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/CPP/cb78acec-9bf8-4488-8243-_1.cpp)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "The input on which to perform the operation on."
    - id: inputOffset
      type: System.Int32
      description: "The offset into the input byte array from which to begin using data from."
    - id: inputCount
      type: System.Int32
      description: "The number of bytes in the input byte array to use as data."
    - id: outputBuffer
      type: System.Byte[]
      description: "The output to which to write the data to."
    - id: outputOffset
      type: System.Int32
      description: "The offset into the output byte array from which to begin writing data from."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Security.Cryptography.CryptoAPITransform.TransformBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The inputBuffer parameter is .       -or-       The outputBuffer parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The length of the input buffer is less than the sum of the input offset and the input count."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    inputOffset is out of range. This parameter requires a non-negative number."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Computes the transformation for the specified region of the specified byte array."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of bytes. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/CSharp/58c95bd3-abbd-4afc-91d8-_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/VisualBasic/58c95bd3-abbd-4afc-91d8-_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/CPP/58c95bd3-abbd-4afc-91d8-_1.cpp)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "The input on which to perform the operation on."
    - id: inputOffset
      type: System.Int32
      description: "The offset into the byte array from which to begin using data from."
    - id: inputCount
      type: System.Int32
      description: "The number of bytes in the byte array to use as data."
    return:
      type: System.Byte[]
      description: "To be added."
  overload: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The inputBuffer parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The inputOffset parameter is less than zero.       -or-       The inputCount parameter is less than zero.       -or-       The length of the input buffer is less than the sum of the input offset and the input count."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The  padding is invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The inputOffset parameter is out of range. This parameter requires a non-negative number."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.CryptoAPITransform.Clear
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Clear()
  nameWithType: CryptoAPITransform.Clear()
  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Dispose()
  nameWithType: CryptoAPITransform.Dispose()
  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.Reset
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Reset()
  nameWithType: CryptoAPITransform.Reset()
  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.CryptoAPITransform.Clear*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Clear
  nameWithType: CryptoAPITransform.Clear
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Dispose
  nameWithType: CryptoAPITransform.Dispose
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.Reset*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Reset
  nameWithType: CryptoAPITransform.Reset
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformBlock
  nameWithType: CryptoAPITransform.TransformBlock
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: CryptoAPITransform.TransformFinalBlock
