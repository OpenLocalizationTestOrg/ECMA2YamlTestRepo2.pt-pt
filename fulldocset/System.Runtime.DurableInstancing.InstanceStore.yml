### YamlMime:ManagedReference
items:
- uid: System.Runtime.DurableInstancing.InstanceStore
  id: InstanceStore
  children:
  - System.Runtime.DurableInstancing.InstanceStore.#ctor
  - System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  - System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  - System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)
  - System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)
  - System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)
  - System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  - System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners
  - System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  - System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  - System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  - System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  - System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  langs:
  - csharp
  name: InstanceStore
  nameWithType: InstanceStore
  fullName: System.Runtime.DurableInstancing.InstanceStore
  type: Class
  summary: "Representa um arquivo de instância."
  remarks: "Um fornecedor de persistência fornece acesso a um arquivo de instância através de uma implementação concreta da classe InstanceStore.       Fornecedores de persistência podem chamar InstanceHandle.Free identificadores transmitidos a TryCommand, mesmo depois do comando terminou a execução. Mas persistência fornecedores não devem conter fortes referencia a InstanceHandle ou InstanceOwner objetos, como isto pode impedir InstanceStore que está a ser recolhidos.      > [!WARNING] > Não não possível alterar as definições de fluxo de trabalho para fluxos de trabalho persistentes. Se uma definição de fluxo de trabalho for alterada após é persistente, o tempo de execução do fluxo de trabalho irá falhar quando o fluxo de trabalho é recarregar."
  syntax:
    content: public abstract class InstanceStore
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor
  id: '#ctor'
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: InstanceStore()
  nameWithType: InstanceStore.InstanceStore()
  fullName: System.Runtime.DurableInstancing.InstanceStore.InstanceStore()
  type: Constructor
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Inicializa uma instância do <xref href=&quot;System.Runtime.DurableInstancing.InstanceStore&quot;> </xref> classe."
  syntax:
    content: protected InstanceStore ();
    parameters: []
  overload: System.Runtime.DurableInstancing.InstanceStore.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "No modo assíncrono, tais como a executa comandos de persistência <xref href=&quot;System.Activities.DurableInstancing.LoadWorkflowCommand&quot;> </xref> e <xref href=&quot;System.Activities.DurableInstancing.SaveWorkflowCommand&quot;> </xref>."
  remarks: "Um anfitrião chama o método de BeginExecute para executar um comando de persistência em relação a um identificador de instância no modo assíncrono. O anfitrião obtém o identificador de instância ao invocar o <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>método.</xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> O identificador de instância pode ser vinculado a entidades que representam o contexto e assunto do comando, como uma instância, o proprietário de instância ou o bloqueio da instância.  Apenas um comando pode ser emitido contra um identificador de instância de cada vez."
  syntax:
    content: public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "Um identificador de instância."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "O comando para ser executada."
    - id: timeout
      type: System.TimeSpan
      description: "O valor de tempo limite para a execução do comando."
    - id: callback
      type: System.AsyncCallback
      description: "O delegado de chamada de retorno assíncrona que recebe a notificação da conclusão da operação assíncrona."
    - id: state
      type: System.Object
      description: "As informações de estado."
    return:
      type: System.IAsyncResult
      description: "O estado da operação assíncrona."
  overload: System.Runtime.DurableInstancing.InstanceStore.BeginExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Um fornecedor de persistência implementa este método, que determina se pode ser executado um comando de persistência específico. Se o comando pode ser executado, executa o comando de forma assíncrona."
  remarks: "Se o comando pode ser executado, o fornecedor de persistência métodos de chamadas relevantes no InstancePersistenceContext para fornecer os resultados do comando.      > [!WARNING] >, Apesar deste método está declarado como `virtual` vez `abstract`, não há nenhuma implementação. Este método tem de ser substituído para fornecer a funcionalidade."
  syntax:
    content: protected virtual IAsyncResult BeginTryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: context
      type: System.Runtime.DurableInstancing.InstancePersistenceContext
      description: "O contexto de instância."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "O comando de persistência para ser executada."
    - id: timeout
      type: System.TimeSpan
      description: "O valor de tempo limite para a execução do comando."
    - id: callback
      type: System.AsyncCallback
      description: "O delegado de chamada de retorno assíncrona que recebe a notificação da conclusão da operação assíncrona."
    - id: state
      type: System.Object
      description: "As informações de estado."
    return:
      type: System.IAsyncResult
      description: "O estado da operação assíncrona."
  overload: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Começa uma operação assíncrona para escutar os eventos gerados pelo arquivo de instância para um identificador de instância específica."
  syntax:
    content: public IAsyncResult BeginWaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "Um identificador de instância."
    - id: timeout
      type: System.TimeSpan
      description: "O período após o qual a operação exceder o tempo limite."
    - id: callback
      type: System.AsyncCallback
      description: "O método a chamar depois de concluída a operação assíncrona."
    - id: state
      type: System.Object
      description: "Um objeto que contém as informações de estado associadas a operação assíncrona."
    return:
      type: System.IAsyncResult
      description: "Devolve um <xref:System.IAsyncResult>objeto..</xref:System.IAsyncResult>"
  overload: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle
  id: CreateInstanceHandle
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle()
  nameWithType: InstanceStore.CreateInstanceHandle()
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle()
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Cria um identificador de instância."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle ();
    parameters: []
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "O identificador de instância."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)
  id: CreateInstanceHandle(System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle(Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(Guid)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Cria um identificador de instância.  Se o DefaultInstanceOwner estiver definido, o valor é automaticamente vinculado como proprietário de instância do identificador de novo.  O identificador de instância transmitido como um parâmetro automaticamente se encontra vinculado como instância o identificador de novo."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (Guid instanceId);
    parameters:
    - id: instanceId
      type: System.Guid
      description: "Um identificador de instância. Não pode ser GUID. Empty."
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "O identificador de instância."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  id: CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle(InstanceOwner)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Cria um identificador de instância. Se o proprietário de instância transmitido como um parâmetro não for nulo, o valor é automaticamente vinculado como proprietário de instância do identificador de novo.  (Caso contrário, não existe nenhum proprietário de instância está vinculado, mesmo se DefaultInstanceOwner está definido.)"
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "O proprietário de uma instância."
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "O identificador de instância. Um valor nulo indica que o identificador de nova deve não ser automaticamente vinculado a um proprietário de instância."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  id: CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: CreateInstanceHandle(InstanceOwner,Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Cria um identificador de instância. Se o proprietário de instância transmitido como um parâmetro não for nulo, o valor é automaticamente vinculado como proprietário de instância do identificador de novo.  (Caso contrário, não existe nenhum proprietário de instância está vinculado, mesmo se DefaultInstanceOwner está definido.) O identificador de instância transmitido como um parâmetro automaticamente se encontra vinculado como instância o identificador de novo."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner, Guid instanceId);
    parameters:
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "Um objeto InstanceOwner que representa o proprietário de uma instância. Transmita um valor nulo como valor para este parâmetro indicar que o identificador de nova deve não ser automaticamente vinculado a um proprietário de instância."
    - id: instanceId
      type: System.Guid
      description: "Um identificador de instância. Não pode ser GUID. Empty."
    return:
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "O identificador de instância."
  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  id: DefaultInstanceOwner
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: DefaultInstanceOwner
  nameWithType: InstanceStore.DefaultInstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  type: Property
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Obtém ou define o proprietário de instância predefinido."
  remarks: "Alguns anfitriões inferir o proprietário de instância para utilizar o lendo esta propriedade. WorkflowApplication pode utilizar esta propriedade. WorkflowServiceHost não utiliza esta propriedade.       O propery DefaultInstanceOwner tem de ser definido como nulo quando já não é necessário. Objetos de InstanceStore poderão não estar libertados se DefaultInstanceOwner não seja nulo.      > [!WARNING] >, Apesar deste método está declarado como `virtual` vez `abstract`, não há nenhuma implementação. Este método tem de ser substituído para fornecer a funcionalidade."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner { get; set; }
    return:
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "O proprietário de instância predefinido."
  overload: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)
  id: EndExecute(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: EndExecute(IAsyncResult)
  nameWithType: InstanceStore.EndExecute(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndExecute(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Termina a operação assíncrona."
  remarks: "Se BeginExecute foi chamado com uma transação, este estado pode incluir dados não consolidados. Depois da transação está consolidada com êxito, os dados no InstanceView objeto pode ser considerado consolidada."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceView EndExecute (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "O resultado da operação."
    return:
      type: System.Runtime.DurableInstancing.InstanceView
      description: "Um objeto de InstanceView que representa o estado da instância conhecido após a conclusão com êxito do comando."
  overload: System.Runtime.DurableInstancing.InstanceStore.EndExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)
  id: EndTryCommand(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: EndTryCommand(IAsyncResult)
  nameWithType: InstanceStore.EndTryCommand(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Termina uma operação assíncrona."
  remarks: >-
    > [!WARNING]

    >  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.
  syntax:
    content: protected virtual bool EndTryCommand (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "O resultado da operação."
    return:
      type: System.Boolean
      description: "Uma implementação de fornecedor de persistência deve ser devolvido false Se não suporta o comando transmitido ao método BeginTryCommand. Caso contrário, deve devolver VERDADEIRO ou acionar uma excepção."
  overload: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)
  id: EndWaitForEvents(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: EndWaitForEvents(IAsyncResult)
  nameWithType: InstanceStore.EndWaitForEvents(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(IAsyncResult)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Termina a operação assíncrona iniciada pelo <xref:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*>método.</xref:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*>"
  syntax:
    content: public System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent> EndWaitForEvents (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Um objeto de IAsyncResult que foi passado para o cliente pelo método Begin."
    return:
      type: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}
      description: "Devolve uma lista de <xref href=&quot;System.Runtime.DurableInstancing.InstancePersistenceEvent&quot;> </xref> objetos..."
  overload: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  id: Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: 'Executa um comando de persistência de forma síncrona. Os exemplos de comandos de persistência: <xref href=&quot;System.Activities.DurableInstancing.LoadWorkflowCommand&quot;> </xref> e <xref href=&quot;System.Activities.DurableInstancing.SaveWorkflowCommand&quot;> </xref>.'
  remarks: "Um anfitrião chama o método de execução para executar um comando de persistência em relação a um identificador de instância, que obtém o anfitrião ao invocar o <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>método.</xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> O identificador de instância pode ser vinculado a entidades que representam o contexto e assunto do comando, como uma instância, o proprietário de instância ou o bloqueio da instância.  Apenas um comando pode ser emitido contra um identificador de instância de cada vez.      > [!WARNING] > Se este método é executado com uma <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, irá criar um <xref:System.Runtime.DurableInstancing.InstanceOwner>e vinculá-lo para a instância.</xref:System.Runtime.DurableInstancing.InstanceOwner> </xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> Isto significa que nenhum outro processo será capaz de aceder esse fluxo de trabalho; Se o processo termina, o fluxo de trabalho não é possível recuperado ou executado. Se um fluxo de trabalho é executado novamente, uma <xref:System.Runtime.DurableInstancing.InstanceLockedException>será emitida.</xref:System.Runtime.DurableInstancing.InstanceLockedException>   >> Se <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>não é utilizado, o arquivo de instância irá criar um temporário <xref:System.Runtime.DurableInstancing.InstanceOwner>que serão eliminados no final do processo.</xref:System.Runtime.DurableInstancing.InstanceOwner> </xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> No entanto, se o processo termina antes de ponto de final persistência do fluxo de trabalho, esta exceção será emitida, a menos que o período de tempo especificado no **HostLockRenewalPeriod** parâmetro expirou."
  syntax:
    content: public System.Runtime.DurableInstancing.InstanceView Execute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "Um identificador de instância."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "O comando para ser executada."
    - id: timeout
      type: System.TimeSpan
      description: "O valor de tempo limite para a operação."
    return:
      type: System.Runtime.DurableInstancing.InstanceView
      description: "Um objeto de InstanceView que representa o estado da instância conhecido após a conclusão com êxito do comando.  Se executar foi chamado com uma transação, este estado pode incluir dados não consolidados. Depois da transação está consolidada com êxito, os dados no InstanceView objeto pode ser considerado consolidada"
  overload: System.Runtime.DurableInstancing.InstanceStore.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  id: GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: GetEvents(InstanceOwner)
  nameWithType: InstanceStore.GetEvents(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetEvents(InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Obtém todos os eventos assinalados vinculados a um <xref href=&quot;System.Runtime.DurableInstancing.InstanceOwner&quot;> </xref> objeto."
  syntax:
    content: protected System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents (System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "Um <xref href=&quot;System.Runtime.DurableInstancing.InstanceOwner&quot;> </xref> objeto que representa o proprietário de uma instância."
    return:
      type: System.Runtime.DurableInstancing.InstancePersistenceEvent[]
      description: "Devolve uma matriz de <xref href=&quot;System.Runtime.DurableInstancing.InstancePersistenceEvent&quot;> </xref> objetos..."
  overload: System.Runtime.DurableInstancing.InstanceStore.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners
  id: GetInstanceOwners
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: GetInstanceOwners()
  nameWithType: InstanceStore.GetInstanceOwners()
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners()
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Obtém a cada objeto InstanceOwner que está vinculado a um identificador de instância válido ou não tiver sido recolhidos."
  remarks: "Devolve uma matriz de objetos de InstanceOwner."
  syntax:
    content: protected System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners ();
    parameters: []
    return:
      type: System.Runtime.DurableInstancing.InstanceOwner[]
      description: "O proprietário da instância."
  overload: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  id: OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: OnFreeInstanceHandle(InstanceHandle,Object)
  nameWithType: InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Invocada quando existe um identificador de instância é libertado."
  syntax:
    content: protected virtual void OnFreeInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext);
    parameters:
    - id: instanceHandle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "O identificador de instância que foi libertado."
    - id: userContext
      type: System.Object
      description: "Contexto informações de utilizador o fornecedor de persistência que foi devolvidas de onnewinstancehandle estiver ou nulo se onnewinstancehandle estiver não seja substituída."
  overload: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  id: OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: OnNewInstanceHandle(InstanceHandle)
  nameWithType: InstanceStore.OnNewInstanceHandle(InstanceHandle)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(InstanceHandle)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Invocada quando é criado um novo identificador de instância."
  syntax:
    content: protected virtual object OnNewInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle);
    parameters:
    - id: instanceHandle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "Um identificador de instância."
    return:
      type: System.Object
      description: "Um objeto.  Este objeto de contexto de utilizador estará disponível para o fornecedor de persistência quando os comandos são executados utilizando o identificador e quando o identificador é libertado."
  overload: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  id: ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: ResetEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Repõe o evento assinalado e remove o evento na lista de eventos assinalado mantida pelo proprietário de instância."
  syntax:
    content: protected void ResetEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: persistenceEvent
      type: System.Runtime.DurableInstancing.InstancePersistenceEvent
      description: "O evento de persistência que foi indicado anteriormente e a reposição."
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "O proprietário de instância associado o eventos de persistência."
  overload: System.Runtime.DurableInstancing.InstanceStore.ResetEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  id: SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: SignalEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Um arquivo de instância invoca este método para assinalar um evento. Um anfitrião de fluxo de trabalho que subscreve para este evento de persistência recebe-lo e executa uma ação adequada."
  syntax:
    content: protected void SignalEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);
    parameters:
    - id: persistenceEvent
      type: System.Runtime.DurableInstancing.InstancePersistenceEvent
      description: "O evento de persistência para ser indicado."
    - id: owner
      type: System.Runtime.DurableInstancing.InstanceOwner
      description: "O proprietário de instância."
  overload: System.Runtime.DurableInstancing.InstanceStore.SignalEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  id: TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Um fornecedor de persistência implementa este método, o qual determina se um comando de persistência específico pode ser executado e se pode ser executado o comando executa-o no modo assíncrono."
  remarks: "Se o comando pode ser executado, o fornecedor de persistência chama os métodos relevantes no <xref:System.Runtime.DurableInstancing.InstancePersistenceContext>para fornecer os resultados do comando.</xref:System.Runtime.DurableInstancing.InstancePersistenceContext>"
  syntax:
    content: protected virtual bool TryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);
    parameters:
    - id: context
      type: System.Runtime.DurableInstancing.InstancePersistenceContext
      description: "O contexto de instância."
    - id: command
      type: System.Runtime.DurableInstancing.InstancePersistenceCommand
      description: "O comando para ser executada."
    - id: timeout
      type: System.TimeSpan
      description: "Valor de tempo limite para a operação."
    return:
      type: System.Boolean
      description: "Deve devolver uma implementação de fornecedor de persistência <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não suporta o comando transmitido como um parâmetro; caso contrário, deverá devolver <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> ou acionar uma excepção."
  overload: System.Runtime.DurableInstancing.InstanceStore.TryCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  id: WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  langs:
  - csharp
  name: WaitForEvents(InstanceHandle,TimeSpan)
  nameWithType: InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
  type: Method
  assemblies:
  - System.Runtime.DurableInstancing
  namespace: System.Runtime.DurableInstancing
  summary: "Um anfitrião de fluxo de trabalho invoca, normalmente, este método à espera que um evento ser indicado."
  syntax:
    content: public System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent> WaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout);
    parameters:
    - id: handle
      type: System.Runtime.DurableInstancing.InstanceHandle
      description: "O identificador de instância que está vinculado ao evento."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo de tempo após o qual a operação espera exceder o tempo limite."
    return:
      type: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}
      description: "Uma lista de <xref href=&quot;System.Runtime.DurableInstancing.InstancePersistenceEvent&quot;> </xref> objetos."
  overload: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: InstanceStore()
  nameWithType: InstanceStore.InstanceStore()
  fullName: System.Runtime.DurableInstancing.InstanceStore.InstanceStore()
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(InstanceHandle,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Runtime.DurableInstancing.InstanceHandle
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceHandle
  nameWithType: InstanceHandle
  fullName: System.Runtime.DurableInstancing.InstanceHandle
- uid: System.Runtime.DurableInstancing.InstancePersistenceCommand
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceCommand
  nameWithType: InstancePersistenceCommand
  fullName: System.Runtime.DurableInstancing.InstancePersistenceCommand
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan,AsyncCallback,Object)
- uid: System.Runtime.DurableInstancing.InstancePersistenceContext
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceContext
  nameWithType: InstancePersistenceContext
  fullName: System.Runtime.DurableInstancing.InstancePersistenceContext
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  nameWithType: InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(InstanceHandle,TimeSpan,AsyncCallback,Object)
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle()
  nameWithType: InstanceStore.CreateInstanceHandle()
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle()
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle(Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle(InstanceOwner)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstanceOwner
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceOwner
  nameWithType: InstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceOwner
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle(InstanceOwner,Guid)
  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
  fullName: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(InstanceOwner,Guid)
- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: DefaultInstanceOwner
  nameWithType: InstanceStore.DefaultInstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner
- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndExecute(IAsyncResult)
  nameWithType: InstanceStore.EndExecute(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndExecute(IAsyncResult)
- uid: System.Runtime.DurableInstancing.InstanceView
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceView
  nameWithType: InstanceView
  fullName: System.Runtime.DurableInstancing.InstanceView
- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndTryCommand(IAsyncResult)
  nameWithType: InstanceStore.EndTryCommand(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(IAsyncResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndWaitForEvents(IAsyncResult)
  nameWithType: InstanceStore.EndWaitForEvents(IAsyncResult)
  fullName: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(IAsyncResult)
- uid: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}
  parent: System.Collections.Generic
  isExternal: true
  name: List<InstancePersistenceEvent>
  nameWithType: List<InstancePersistenceEvent>
  fullName: System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.Runtime.DurableInstancing.InstancePersistenceEvent>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Runtime.DurableInstancing.InstancePersistenceEvent
    name: InstancePersistenceEvent
    nameWithType: InstancePersistenceEvent
    fullName: InstancePersistenceEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.Execute(InstanceHandle,InstancePersistenceCommand,TimeSpan)
- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetEvents(InstanceOwner)
  nameWithType: InstanceStore.GetEvents(InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetEvents(InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent[]
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceEvent
  nameWithType: InstancePersistenceEvent
  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent[]
  spec.csharp:
  - uid: System.Runtime.DurableInstancing.InstancePersistenceEvent
    name: InstancePersistenceEvent
    nameWithType: InstancePersistenceEvent
    fullName: InstancePersistenceEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetInstanceOwners()
  nameWithType: InstanceStore.GetInstanceOwners()
  fullName: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners()
- uid: System.Runtime.DurableInstancing.InstanceOwner[]
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstanceOwner
  nameWithType: InstanceOwner
  fullName: System.Runtime.DurableInstancing.InstanceOwner[]
  spec.csharp:
  - uid: System.Runtime.DurableInstancing.InstanceOwner
    name: InstanceOwner
    nameWithType: InstanceOwner
    fullName: InstanceOwner[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnFreeInstanceHandle(InstanceHandle,Object)
  nameWithType: InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(InstanceHandle,Object)
- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnNewInstanceHandle(InstanceHandle)
  nameWithType: InstanceStore.OnNewInstanceHandle(InstanceHandle)
  fullName: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(InstanceHandle)
- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: ResetEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(InstancePersistenceEvent,InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent
  parent: System.Runtime.DurableInstancing
  isExternal: false
  name: InstancePersistenceEvent
  nameWithType: InstancePersistenceEvent
  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent
- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: SignalEvent(InstancePersistenceEvent,InstanceOwner)
  nameWithType: InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
  fullName: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(InstancePersistenceEvent,InstanceOwner)
- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  nameWithType: InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.TryCommand(InstancePersistenceContext,InstancePersistenceCommand,TimeSpan)
- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: WaitForEvents(InstanceHandle,TimeSpan)
  nameWithType: InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
  fullName: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(InstanceHandle,TimeSpan)
- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: InstanceStore
  nameWithType: InstanceStore.InstanceStore
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginExecute
  nameWithType: InstanceStore.BeginExecute
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginTryCommand
  nameWithType: InstanceStore.BeginTryCommand
- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: BeginWaitForEvents
  nameWithType: InstanceStore.BeginWaitForEvents
- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: CreateInstanceHandle
  nameWithType: InstanceStore.CreateInstanceHandle
- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: DefaultInstanceOwner
  nameWithType: InstanceStore.DefaultInstanceOwner
- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndExecute
  nameWithType: InstanceStore.EndExecute
- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndTryCommand
  nameWithType: InstanceStore.EndTryCommand
- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: EndWaitForEvents
  nameWithType: InstanceStore.EndWaitForEvents
- uid: System.Runtime.DurableInstancing.InstanceStore.Execute*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: Execute
  nameWithType: InstanceStore.Execute
- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetEvents
  nameWithType: InstanceStore.GetEvents
- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: GetInstanceOwners
  nameWithType: InstanceStore.GetInstanceOwners
- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnFreeInstanceHandle
  nameWithType: InstanceStore.OnFreeInstanceHandle
- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: OnNewInstanceHandle
  nameWithType: InstanceStore.OnNewInstanceHandle
- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: ResetEvent
  nameWithType: InstanceStore.ResetEvent
- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: SignalEvent
  nameWithType: InstanceStore.SignalEvent
- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: TryCommand
  nameWithType: InstanceStore.TryCommand
- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents*
  parent: System.Runtime.DurableInstancing.InstanceStore
  isExternal: false
  name: WaitForEvents
  nameWithType: InstanceStore.WaitForEvents
