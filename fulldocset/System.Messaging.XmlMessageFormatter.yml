### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "Serializa e deserializes objetos de ou para o corpo da mensagem, utilizando o formato XML com base na definição de esquema XSD."
  remarks: "O XmlMessageFormatter é o formatador de predefinido que uma instância de <xref:System.Messaging.MessageQueue>utiliza para serialização de mensagens escritas para a fila.</xref:System.Messaging.MessageQueue> Quando cria uma instância de <xref:System.Messaging.MessageQueue>uma instância de XmlMessageFormatter é criada para si e associada <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue> Pode especificar um formatador diferente, criando-lo no seu código e atribuição do mesmo para a <xref:System.Messaging.MessageQueue.Formatter%2A>propriedade da sua <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Formatter%2A>       Instância de XmlMessageFormatter predefinida de uma fila pode ser utilizada para escrever para a fila, mas não pode ser utilizado para ler a partir da fila até que defina um o <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>propriedade no formatador.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Pode definir se um ou ambos estes valores na instância predefinida formatador ou pode criar uma nova instância do formatador e definir os valores automaticamente transferindo-los como argumentos as adequadas para <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>construtor.</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>       Quando especificar <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>vez <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, a existência de tipo é verificada em tempo de compilação em vez de tempo de leitura, reduzir a possibilidade de erros.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>requer que cada entrada ser completamente qualificado, especificando o respetivo nome de assemblagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Além disso, ao trabalhar com várias versões em simultâneo, o número de versão tem também acrescentado ao, bem como o nome de tipo de destino.       O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades dizer o formatador que esquemas para tentar efetuar a correspondência quando anular a serialização de uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isto permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar em conformidade com um dos esquemas representados na matriz de tipo. Ao ler a mensagem com o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem no mesmo.</xref:System.Messaging.MessageQueue.Receive%2A>       Apenas um das duas propriedades tem de ser definido durante a leitura da fila, mas pode definir ambos. O conjunto de tipos é o conjunto combinado das duas propriedades. A decisão de cuja propriedade a utilizar é específica da aplicação. Se o corpo da mensagem contém um tipo cuja esquema não corresponde a nenhum dos tipos de matriz para a propriedade, será emitida uma exceção ao ler a mensagem.       O XmlMessageFormatter é um componente fundamental de aproximadamente ligado conjugados baseado em XML de mensagens. As utilizações do utilitário de XSD.exe que o formato XML é utilizado para gerar o esquema XML, como quando a utilização do utilitário de serialização de uma classe utilizada pela sua aplicação. A classe tem de ter um construtor predefinido.       É utilizado o formato novamente no processo de inverso quando o utilitário gera uma classe com base no esquema distribuir para descrever os dados da classe. A utilização do utilitário e o esquema XML gera permite-lhe evitar redistributing.dll ficheiros sempre recompilar uma classe, após a implementação da sua classe foi alterada. Desde que esta não altera o esquema no cliente ou no servidor, outras alterações em ambos os lados não afetar outros."
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> conjunto de tipos de classe, sem destino."
  remarks: "Esta sobrecarga do construtor é utilizada mais frequentemente ao escrever para a fila, como tipos de destino não são necessários quando escrever.       Ler uma mensagem numa fila utilizando uma instância de <xref:System.Messaging.XmlMessageFormatter>criado com este construtor, tem de definir o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades para o formatador confie que tipos de tentativa de anular a serialização.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter>       Quando cria um novo <xref:System.Messaging.MessageQueue>, uma predefinição <xref:System.Messaging.XmlMessageFormatter>é criada a instância, sem o conjunto de tipos de destino.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue> Tal como acontece com um formatador criado com este construtor, tem de definir os tipos de destino para essa instância formatador se pretender ler a partir da fila."
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> classe, definir tipos de destino transmitidos como uma matriz de valores de cadeia (completamente qualificado)."
  remarks: "Os construtores com parâmetros de tipo de destino são utilizados com mais frequência durante a leitura da fila. Quando a escrever, não é necessário especificar os tipos de destino.       Esta sobrecarga do <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>conjuntos de construtor o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>propriedade para os valores de matriz transmitido através do `targetTypeNames` parâmetro.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Definição desta propriedade permite um <xref:System.Messaging.MessageQueue>utilizando este <xref:System.Messaging.XmlMessageFormatter>instância permite ler mensagens que contêm objetos de fornecido tipos.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades dizer o formatador que esquemas para tentar efetuar a correspondência quando anular a serialização de uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isto permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar em conformidade com um dos esquemas representados na matriz de tipo. Ao ler a mensagem com o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem no mesmo.</xref:System.Messaging.MessageQueue.Receive%2A>       Apenas um das duas propriedades tem de ser definido durante a leitura da fila, mas pode definir ambos. O conjunto de tipos é o conjunto combinado das duas propriedades. A decisão de qual um para utilizar é específico da aplicação. Se o corpo da mensagem contém um tipo cuja esquema não corresponde a nenhum dos tipos de matriz para a propriedade, será emitida uma exceção durante a leitura."
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "Uma matriz do tipo <xref:System.String>que especifica o conjunto de tipos possíveis cuja serialização irá ser anulada pelo formatador a partir da mensagem fornecida.</xref:System.String> Estes valores têm de ser totalmente qualificados, por exemplo, &quot;MyNamespace.MyOrders, MyOrdersAssemblyName&quot;."
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> classe, definir tipos de destino transmitidos como uma matriz de tipos de objeto."
  remarks: "Os construtores com parâmetros de tipo de destino são utilizados com mais frequência durante a leitura da fila. Quando a escrever, não é necessário especificar os tipos de destino.       Esta sobrecarga do <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>conjuntos de construtor o <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedade para os valores de matriz transmitido através do `targetTypes` parâmetro.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Definição desta propriedade permite um <xref:System.Messaging.MessageQueue>utilizando este <xref:System.Messaging.XmlMessageFormatter>instância permite ler mensagens que contêm objetos dos tipos de determinado.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades dizer o formatador que esquemas para tentar efetuar a correspondência quando anular a serialização de uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isto permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar em conformidade com um dos esquemas representados na matriz de tipo. Ao ler a mensagem com o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem no mesmo.</xref:System.Messaging.MessageQueue.Receive%2A>       Apenas um das duas propriedades tem de ser definido durante a leitura da fila, mas pode definir ambos. O conjunto de tipos é o conjunto combinado das duas propriedades. A decisão de qual um para utilizar é específico da aplicação. Se o corpo da mensagem contém um tipo cuja esquema não corresponde a nenhum dos tipos de matriz para a propriedade, será emitida uma exceção durante a leitura.       Quando especificar <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>vez <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, a existência de tipo é verificada em tempo de compilação em vez de tempo de leitura, reduzir a possibilidade de erros.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>requer que cada entrada ser completamente qualificado, especificando o respetivo nome de assemblagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Além disso, ao trabalhar com várias versões em simultâneo, o número de versão tem também acrescentado ao, bem como o nome de tipo de destino.       Quando utilizar <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, pode adicionar cada objeto (por exemplo, `MyClass`) à lista de forma demonstrada pelo seguinte código c#.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "Uma matriz do tipo <xref:System.Type>que especifica o conjunto de tipos possíveis cuja serialização irá ser anulada pelo formatador a partir da mensagem fornecida.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Determina se o formatador pode anular a serialização da mensagem."
  remarks: "Quando é chamado CanRead, o formatador tenta determinar se o conteúdo da mensagem é algo que pode anular a serialização. O formatador pode só anular a serialização da mensagem se o tipo no corpo da mensagem tem o mesmo esquema como um dos tipos na matriz representada pelo <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> CanRead devolve `false` nas seguintes duas circunstâncias:-a mensagem não foi formatada utilizando o <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      -O esquema do corpo da mensagem não faz parte dos indicados no <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedade.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades dizer o formatador que tipos de objetos deve ser capaz de anular a serialização.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Se qualquer tipo está em falta na lista, ainda se encontra dentro da mensagem, CanRead devolve `false`."
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "O <xref href=&quot;System.Messaging.Message&quot;> </xref> inspecionar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o formatador XML pode anular a serialização da mensagem; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem o <> </> *> nem <> </> *> propriedade foi definida."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Cria uma instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> classe cuja leitura/escrita propriedades (os conjuntos de tipos de destino) são os mesmos que atual <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> instância."
  remarks: "Este método cria uma cópia da formatador e inicializa a todas as suas propriedades para os valores desta <xref:System.Messaging.XmlMessageFormatter>objeto.</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Um objeto cujas propriedades são idênticas deste <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> instância, mas cujo metadados não especifica que seja uma instância de classe formatador."
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Lê o conteúdo da mensagem especificada e cria um objeto que contém a mensagem de serialização anulada."
  remarks: "Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades dizer o formatador que esquemas para tentar efetuar a correspondência quando anular a serialização de uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Uma destas propriedades tem de ser definida antes da mensagem pode ser anulada.       A instância serializada no corpo da mensagem deve estar em conformidade com um dos esquemas representados na matriz de tipo. Ao ler a mensagem com o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem no mesmo.</xref:System.Messaging.MessageQueue.Receive%2A>       Os tipos de destino não tem de ser especificado para escrever para a fila."
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "O <xref href=&quot;System.Messaging.Message&quot;> </xref>, no formato XML, anular a serialização."
    return:
      type: System.Object
      description: "A mensagem de serialização anulada."
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem o <> </> *> nem <> </> *> propriedade foi definida.       - ou - a instância serializada no corpo da mensagem não está em conformidade com qualquer um dos esquemas representados por tipos do <> </> *> e <> </> *> propriedades."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Especifica o conjunto de tipos possíveis cuja serialização irá ser anulada pelo formatador a partir da mensagem fornecida."
  remarks: "Tanto os TargetTypeNames e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades dizer o formatador que esquemas para tentar efetuar a correspondência quando anular a serialização de uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Isto permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar em conformidade com um dos esquemas representados na matriz de tipo. Ao ler a mensagem com o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem no mesmo.</xref:System.Messaging.MessageQueue.Receive%2A>       Apenas um das duas propriedades tem de ser definido durante a leitura da fila, mas pode definir ambos. O conjunto de tipos é o conjunto combinado das duas propriedades. A decisão de cuja propriedade a utilizar é específica da aplicação. Se o corpo da mensagem contém um tipo cuja esquema não corresponde a nenhum dos tipos de matriz para a propriedade, será emitida uma exceção ao ler a mensagem.       TargetTypeNames cada entrada obrigatória ser completamente qualificado, especificando o respetivo nome de assemblagem. Além disso, ao trabalhar com várias versões em simultâneo, o número de versão tem também acrescentado ao, bem como o nome de tipo de destino.       Os tipos de destino são apenas necessários durante a leitura da fila. O TargetTypeNames e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades não precisam de ser definido como escrever para a fila.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "Uma matriz do tipo <xref:System.String>que especifica os tipos de objetos para anular a serialização do corpo da mensagem ao ler a mensagem.</xref:System.String>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A propriedade TargetTypeNames é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Especifica o conjunto de tipos possíveis cuja serialização irá ser anulada pelo formatador a partir da mensagem fornecida."
  remarks: "Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e propriedades de TargetTypes informe o formatador que esquemas para tentar efetuar a correspondência quando anular a serialização de uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isto permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar em conformidade com um dos esquemas representados na matriz de tipo. Ao ler a mensagem com o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem no mesmo.</xref:System.Messaging.MessageQueue.Receive%2A>       Apenas um das duas propriedades tem de ser definido durante a leitura da fila, mas pode definir ambos. O conjunto de tipos é o conjunto combinado das duas propriedades. A decisão de cuja propriedade a utilizar é específica da aplicação. Se o corpo da mensagem contém um tipo cuja esquema não corresponde a nenhum dos tipos de matriz para a propriedade, será emitida uma exceção ao ler a mensagem.       Os tipos de destino são apenas necessários durante a leitura da fila. O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e propriedades de TargetTypes não precisam de ser definido como escrever para a fila.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Quando especificar TargetTypes vez <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, a existência de tipo é verificada em tempo de compilação em vez de tempo de leitura, reduzir a possibilidade de erros.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Quando utilizar TargetTypes, pode adicionar cada objeto (por exemplo, `MyClass`) à lista de forma demonstrada por código c# `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "Uma matriz do tipo <xref:System.Type>que especifica os tipos de objetos para anular a serialização do corpo da mensagem ao ler a mensagem.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A propriedade TargetTypes é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Serializa um objeto para o corpo da mensagem."
  remarks: "Os tipos de destino não tem de ser especificados ao escrever para a fila, conforme necessário durante a leitura. O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedade é utilizada pelo formatador apenas quando uma mensagem ao anular a serialização.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       O <xref:System.Messaging.XmlMessageFormatter>utilizam o <xref:System.Xml.Serialization.XmlSerializer>classe, que define o que pode ser serializado.</xref:System.Xml.Serialization.XmlSerializer> </xref:System.Messaging.XmlMessageFormatter> Apenas os campos públicos e propriedades públicas podem ser serializadas. Estruturas, estruturas com matrizes e as matrizes de estruturas estão todos os serializável, desde que não utilizam o estilo codificado com o protocolo SOAP."
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "O <xref href=&quot;System.Messaging.Message&quot;> </xref> cujo <xref:System.Messaging.Message.Body*>propriedade irá conter o objeto serializado.</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "O <xref:System.Object>para ser serializado para o corpo da mensagem.</xref:System.Object>"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
