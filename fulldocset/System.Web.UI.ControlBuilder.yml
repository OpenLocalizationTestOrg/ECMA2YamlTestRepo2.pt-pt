### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ControlBuilder
  id: ControlBuilder
  children:
  - System.Web.UI.ControlBuilder.#ctor
  - System.Web.UI.ControlBuilder.AllowWhitespaceLiterals
  - System.Web.UI.ControlBuilder.AppendLiteralString(System.String)
  - System.Web.UI.ControlBuilder.AppendSubBuilder(System.Web.UI.ControlBuilder)
  - System.Web.UI.ControlBuilder.BindingContainerBuilder
  - System.Web.UI.ControlBuilder.BindingContainerType
  - System.Web.UI.ControlBuilder.BuildObject
  - System.Web.UI.ControlBuilder.CloseControl
  - System.Web.UI.ControlBuilder.ComplexPropertyEntries
  - System.Web.UI.ControlBuilder.ControlType
  - System.Web.UI.ControlBuilder.CreateBuilderFromType(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary,System.Int32,System.String)
  - System.Web.UI.ControlBuilder.CurrentFilterResolutionService
  - System.Web.UI.ControlBuilder.DeclareType
  - System.Web.UI.ControlBuilder.DesignerFilter
  - System.Web.UI.ControlBuilder.FChildrenAsProperties
  - System.Web.UI.ControlBuilder.FIsNonParserAccessor
  - System.Web.UI.ControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)
  - System.Web.UI.ControlBuilder.GetObjectPersistData
  - System.Web.UI.ControlBuilder.GetResourceKey
  - System.Web.UI.ControlBuilder.HasAspCode
  - System.Web.UI.ControlBuilder.HasBody
  - System.Web.UI.ControlBuilder.HtmlDecodeLiterals
  - System.Web.UI.ControlBuilder.ID
  - System.Web.UI.ControlBuilder.InDesigner
  - System.Web.UI.ControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)
  - System.Web.UI.ControlBuilder.InPageTheme
  - System.Web.UI.ControlBuilder.ItemType
  - System.Web.UI.ControlBuilder.Localize
  - System.Web.UI.ControlBuilder.NamingContainerType
  - System.Web.UI.ControlBuilder.NeedsTagInnerText
  - System.Web.UI.ControlBuilder.OnAppendToParentBuilder(System.Web.UI.ControlBuilder)
  - System.Web.UI.ControlBuilder.PageVirtualPath
  - System.Web.UI.ControlBuilder.Parser
  - System.Web.UI.ControlBuilder.ProcessGeneratedCode(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)
  - System.Web.UI.ControlBuilder.ServiceProvider
  - System.Web.UI.ControlBuilder.SetResourceKey(System.String)
  - System.Web.UI.ControlBuilder.SetServiceProvider(System.IServiceProvider)
  - System.Web.UI.ControlBuilder.SetTagInnerText(System.String)
  - System.Web.UI.ControlBuilder.SubBuilders
  - System.Web.UI.ControlBuilder.TagName
  - System.Web.UI.ControlBuilder.TemplatePropertyEntries
  - System.Web.UI.ControlBuilder.ThemeResolutionService
  langs:
  - csharp
  name: ControlBuilder
  nameWithType: ControlBuilder
  fullName: System.Web.UI.ControlBuilder
  type: Class
  summary: "Supports the page parser in building a control and the child controls it contains."
  remarks: "By default, every control on a page is associated with a default ControlBuilder class. During parsing, the ASP.NET page framework builds a tree of ControlBuilder objects corresponding to the tree of controls for the page. The ControlBuilder tree is then used to generate page code to create the control tree. In addition to child controls, the ControlBuilder defines the behavior of how the content within control tags is parsed. You can override this default behavior by defining your own custom control builder class. This is done by applying a <xref:System.Web.UI.ControlBuilderAttribute> attribute to your control builder class as follows:       `[ControlBuilderAttribute(typeof(ControlBuilderType))]`"
  example:
  - "The following code example creates a <xref:System.Web.UI.WebControls.Table> control whose attributes and content are defined at the time the table is built. The following is the command line to use to build the executable.  \n  \n [Visual Basic]  \n  \n```  \nvbc /r:System.dll /r:System.Web.dll /r:System.Drawing.dll /t:library /out:myWebAppPath/Bin/vb_mycontrolbuilder.dll myControlBuilder.vb  \n```  \n  \n [C#]  \n  \n```  \ncsc /t:library /out:myWebAppPath/Bin/cs_mycontrolbuilder.dll myControlBuilder.cs  \n```  \n  \n [!code-cs[SystemWebUI_ControlBuilder_2#1](~/add/codesnippet/csharp/t-system.web.ui.controlb_1_1.cs)]\n [!code-vb[SystemWebUI_ControlBuilder_2#1](~/add/codesnippet/visualbasic/t-system.web.ui.controlb_1_1.vb)]  \n  \n The following code example uses the previous custom control. In particular, it builds a table whose attributes and content are defined at run time. Notice that the values shown in the  directive reflect the previous command line.  \n  \n [!code-cs[SystemWebUI_ControlBuilder_2#2](~/add/codesnippet/csharp/t-system.web.ui.controlb_1_2.aspx)]\n [!code-vb[SystemWebUI_ControlBuilder_2#2](~/add/codesnippet/visualbasic/t-system.web.ui.controlb_1_2.aspx)]"
  syntax:
    content: public class ControlBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.#ctor
  id: '#ctor'
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ControlBuilder()
  nameWithType: ControlBuilder.ControlBuilder()
  fullName: System.Web.UI.ControlBuilder.ControlBuilder()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> class."
  remarks: "Use this constructor to create a new instance the <xref:System.Web.UI.ControlBuilder> class.      > [!NOTE] >  This constructor is generally used by ASP.NET when parsing the page and creating the control hierarchy. It is not intended for use in your code."
  syntax:
    content: public ControlBuilder ();
    parameters: []
  overload: System.Web.UI.ControlBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.AllowWhitespaceLiterals
  id: AllowWhitespaceLiterals
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: AllowWhitespaceLiterals()
  nameWithType: ControlBuilder.AllowWhitespaceLiterals()
  fullName: System.Web.UI.ControlBuilder.AllowWhitespaceLiterals()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines whether white space literals are permitted in the content between a control&quot;s opening and closing tags. This method is called by the ASP.NET page framework."
  remarks: "The AllowWhitespaceLiterals method is used to determine whether white space literals are permitted in the content between the opening and closing tags of a control. When this method returns `false`, the white space literals are trimmed from the content before the content is processed by the page parser. When this method returns `true`, the white space literals not removed.       This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code."
  example:
  - >-
    [!code-cs[ControlBuilderSamples_1#4](~/add/codesnippet/csharp/m-system.web.ui.controlb_4_1.cs)]
     [!code-vb[ControlBuilderSamples_1#4](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_4_1.vb)]
  syntax:
    content: public virtual bool AllowWhitespaceLiterals ();
    parameters: []
    return:
      type: System.Boolean
      description: "Always returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.AllowWhitespaceLiterals*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.AppendLiteralString(System.String)
  id: AppendLiteralString(System.String)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: AppendLiteralString(String)
  nameWithType: ControlBuilder.AppendLiteralString(String)
  fullName: System.Web.UI.ControlBuilder.AppendLiteralString(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Adds the specified literal content to a control. This method is called by the ASP.NET page framework."
  remarks: "Override the AppendLiteralString method to control how literal content between the control&quot;s opening and closing tags is processed. Literal content can be any text that is passed by the browser to the server control. For example, any HTML elements and text, between their opening and closing tags, are literal content."
  example:
  - >-
    [!code-cs[ControlBuilderSamples_1#3](~/add/codesnippet/csharp/m-system.web.ui.controlb_3_1.cs)]
     [!code-vb[ControlBuilderSamples_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_3_1.vb)]
  syntax:
    content: public virtual void AppendLiteralString (string s);
    parameters:
    - id: s
      type: System.String
      description: "The content to add to the control."
  overload: System.Web.UI.ControlBuilder.AppendLiteralString*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The string literal is not well formed."
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.AppendSubBuilder(System.Web.UI.ControlBuilder)
  id: AppendSubBuilder(System.Web.UI.ControlBuilder)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: AppendSubBuilder(ControlBuilder)
  nameWithType: ControlBuilder.AppendSubBuilder(ControlBuilder)
  fullName: System.Web.UI.ControlBuilder.AppendSubBuilder(ControlBuilder)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Adds builders to the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object for any child controls that belong to the container control."
  remarks: ''
  example:
  - "The following example overrides the AppendSubBuilder method to throw an <xref:System.Exception> if the control this control builder is applied to tries to include controls in its instance of <xref:System.Web.UI.ControlCollection> class.  \n  \n [!code-vb[ControlBuilderSamples_2#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_5_1.vb)]\n [!code-cs[ControlBuilderSamples_2#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_5_1.cs)]"
  syntax:
    content: public virtual void AppendSubBuilder (System.Web.UI.ControlBuilder subBuilder);
    parameters:
    - id: subBuilder
      type: System.Web.UI.ControlBuilder
      description: "The <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object assigned to the child control."
  overload: System.Web.UI.ControlBuilder.AppendSubBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.BindingContainerBuilder
  id: BindingContainerBuilder
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: BindingContainerBuilder
  nameWithType: ControlBuilder.BindingContainerBuilder
  fullName: System.Web.UI.ControlBuilder.BindingContainerBuilder
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the control builder that corresponds to the binding container for the control that this builder creates."
  syntax:
    content: public virtual System.Web.UI.ControlBuilder BindingContainerBuilder { get; }
    return:
      type: System.Web.UI.ControlBuilder
      description: "The control builder that corresponds to the binding container for the control."
  overload: System.Web.UI.ControlBuilder.BindingContainerBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.BindingContainerType
  id: BindingContainerType
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: BindingContainerType
  nameWithType: ControlBuilder.BindingContainerType
  fullName: System.Web.UI.ControlBuilder.BindingContainerType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the type of the binding container for the control that this builder creates."
  syntax:
    content: public virtual Type BindingContainerType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type> that represent the type of the binding container for the control that this builder creates."
  overload: System.Web.UI.ControlBuilder.BindingContainerType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.BuildObject
  id: BuildObject
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: BuildObject()
  nameWithType: ControlBuilder.BuildObject()
  fullName: System.Web.UI.ControlBuilder.BuildObject()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Builds a design-time instance of the control that is referred to by this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public virtual object BuildObject ();
    parameters: []
    return:
      type: System.Object
      description: "The resulting built control."
  overload: System.Web.UI.ControlBuilder.BuildObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.CloseControl
  id: CloseControl
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: CloseControl()
  nameWithType: ControlBuilder.CloseControl()
  fullName: System.Web.UI.ControlBuilder.CloseControl()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Called by the parser to inform the builder that the parsing of the control&quot;s opening and closing tags is complete."
  remarks: "The CloseControl method is used by the parser to indicate to the builder that it has finished parsing the control."
  syntax:
    content: public virtual void CloseControl ();
    parameters: []
  overload: System.Web.UI.ControlBuilder.CloseControl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ComplexPropertyEntries
  id: ComplexPropertyEntries
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ComplexPropertyEntries
  nameWithType: ControlBuilder.ComplexPropertyEntries
  fullName: System.Web.UI.ControlBuilder.ComplexPropertyEntries
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a collection of complex property entries."
  remarks: "If there are no entries, a static empty collection is returned."
  syntax:
    content: public System.Collections.ICollection ComplexPropertyEntries { get; }
    return:
      type: System.Collections.ICollection
      description: "A collection of complex property entries."
  overload: System.Web.UI.ControlBuilder.ComplexPropertyEntries*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ControlType
  id: ControlType
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ControlType
  nameWithType: ControlBuilder.ControlType
  fullName: System.Web.UI.ControlBuilder.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the <xref:System.Type> for the control to be created."
  remarks: ''
  example:
  - "This example overrides the <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> method to check the ControlType property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> property is included in the control. If so, an exception is thrown, if not the <xref:System.Web.UI.ControlBuilder.HasBody%2A> method is called.  \n  \n [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.controlb_1_1.vb)]\n [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/p-system.web.ui.controlb_1_1.cs)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "The <xref:System.Type> for the control to be created."
  overload: System.Web.UI.ControlBuilder.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.CreateBuilderFromType(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary,System.Int32,System.String)
  id: CreateBuilderFromType(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary,System.Int32,System.String)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: CreateBuilderFromType(TemplateParser,ControlBuilder,Type,String,String,IDictionary,Int32,String)
  nameWithType: ControlBuilder.CreateBuilderFromType(TemplateParser,ControlBuilder,Type,String,String,IDictionary,Int32,String)
  fullName: System.Web.UI.ControlBuilder.CreateBuilderFromType(TemplateParser,ControlBuilder,Type,String,String,IDictionary,Int32,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Creates a <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object from the specified tag name and object type, as well as other parameters defining the builder."
  syntax:
    content: public static System.Web.UI.ControlBuilder CreateBuilderFromType (System.Web.UI.TemplateParser parser, System.Web.UI.ControlBuilder parentBuilder, Type type, string tagName, string id, System.Collections.IDictionary attribs, int line, string sourceFileName);
    parameters:
    - id: parser
      type: System.Web.UI.TemplateParser
      description: "The <xref href=&quot;System.Web.UI.TemplateParser&quot;></xref> object responsible for parsing the control."
    - id: parentBuilder
      type: System.Web.UI.ControlBuilder
      description: "The <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object responsible for building the parent control."
    - id: type
      type: System.Type
      description: "The <xref:System.Type> of the object that the builder will create."
    - id: tagName
      type: System.String
      description: "The name of the tag to be built. This allows the builder to support multiple tag types."
    - id: id
      type: System.String
      description: "The <xref:System.Web.UI.ControlBuilder.ID*> attribute assigned to the control."
    - id: attribs
      type: System.Collections.IDictionary
      description: "The <xref:System.Collections.IDictionary> object that holds all the specified tag attributes."
    - id: line
      type: System.Int32
      description: "The source file line number for the specified control."
    - id: sourceFileName
      type: System.String
      description: "The name of the source file from which the control is to be created."
    return:
      type: System.Web.UI.ControlBuilder
      description: "The builder that is responsible for creating the control."
  overload: System.Web.UI.ControlBuilder.CreateBuilderFromType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.CurrentFilterResolutionService
  id: CurrentFilterResolutionService
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: CurrentFilterResolutionService
  nameWithType: ControlBuilder.CurrentFilterResolutionService
  fullName: System.Web.UI.ControlBuilder.CurrentFilterResolutionService
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets an <xref href=&quot;System.Web.UI.IFilterResolutionService&quot;></xref> object that is used to manage device-filter related services when parsing and persisting controls in the designer."
  remarks: "The <xref:System.Web.UI.IFilterResolutionService> interface is an interface that is specific to how a control uses device filters in a designer. When controls are parsed or persisted in the designer outside the context of a browser request, the <xref:System.Web.UI.IFilterResolutionService> provides a way to determine whether the current control is affected by a named filter and whether a named filter is part of a specific device-filter hierarchy."
  syntax:
    content: public System.Web.UI.IFilterResolutionService CurrentFilterResolutionService { get; }
    return:
      type: System.Web.UI.IFilterResolutionService
      description: "An <xref href=&quot;System.Web.UI.IFilterResolutionService&quot;></xref> object that is used to manage device filter related services when parsing and persisting controls in the designer."
  overload: System.Web.UI.ControlBuilder.CurrentFilterResolutionService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.DeclareType
  id: DeclareType
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: DeclareType
  nameWithType: ControlBuilder.DeclareType
  fullName: System.Web.UI.ControlBuilder.DeclareType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the type that will be used by code generation to declare the control."
  syntax:
    content: public virtual Type DeclareType { get; }
    return:
      type: System.Type
      description: "The <xref:System.Type> of the control used by code generation to declare the control."
  overload: System.Web.UI.ControlBuilder.DeclareType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.DesignerFilter
  id: DesignerFilter
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: DesignerFilter
  nameWithType: ControlBuilder.DesignerFilter
  fullName: System.Web.UI.ControlBuilder.DesignerFilter
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Represents the `&quot;__designer&quot;` literal string."
  syntax:
    content: public static readonly string DesignerFilter;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.FChildrenAsProperties
  id: FChildrenAsProperties
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: FChildrenAsProperties
  nameWithType: ControlBuilder.FChildrenAsProperties
  fullName: System.Web.UI.ControlBuilder.FChildrenAsProperties
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value that determines whether the control has a <xref href=&quot;System.Web.UI.ParseChildrenAttribute&quot;></xref> with <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties*> set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  syntax:
    content: protected bool FChildrenAsProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control has a <xref href=&quot;System.Web.UI.ParseChildrenAttribute&quot;></xref> with <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties*> set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.FChildrenAsProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.FIsNonParserAccessor
  id: FIsNonParserAccessor
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: FIsNonParserAccessor
  nameWithType: ControlBuilder.FIsNonParserAccessor
  fullName: System.Web.UI.ControlBuilder.FIsNonParserAccessor
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value that determines whether the control implements the <xref href=&quot;System.Web.UI.IParserAccessor&quot;></xref> interface."
  syntax:
    content: protected bool FIsNonParserAccessor { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the control implements the <xref href=&quot;System.Web.UI.IParserAccessor&quot;></xref> interface, otherwise <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.FIsNonParserAccessor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)
  id: GetChildControlType(System.String,System.Collections.IDictionary)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: GetChildControlType(String,IDictionary)
  nameWithType: ControlBuilder.GetChildControlType(String,IDictionary)
  fullName: System.Web.UI.ControlBuilder.GetChildControlType(String,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtains the <xref:System.Type> of the control type corresponding to a child tag. This method is called by the ASP.NET page framework."
  remarks: "This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code."
  example:
  - >-
    [!code-cs[ControlBuilderSamples_1#2](~/add/codesnippet/csharp/1e17c7c0-caef-4f64-90f8-_1.cs)]
     [!code-vb[ControlBuilderSamples_1#2](~/add/codesnippet/visualbasic/1e17c7c0-caef-4f64-90f8-_1.vb)]
  syntax:
    content: public virtual Type GetChildControlType (string tagName, System.Collections.IDictionary attribs);
    parameters:
    - id: tagName
      type: System.String
      description: "The tag name of the child."
    - id: attribs
      type: System.Collections.IDictionary
      description: "An array of attributes contained in the child control."
    return:
      type: System.Type
      description: "The <xref:System.Type> of the specified control&quot;s child."
  overload: System.Web.UI.ControlBuilder.GetChildControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.GetObjectPersistData
  id: GetObjectPersistData
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: GetObjectPersistData()
  nameWithType: ControlBuilder.GetObjectPersistData()
  fullName: System.Web.UI.ControlBuilder.GetObjectPersistData()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Creates the <xref href=&quot;System.Web.UI.ObjectPersistData&quot;></xref> object for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public System.Web.UI.ObjectPersistData GetObjectPersistData ();
    parameters: []
    return:
      type: System.Web.UI.ObjectPersistData
      description: "The <xref href=&quot;System.Web.UI.ObjectPersistData&quot;></xref> for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.GetObjectPersistData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.GetResourceKey
  id: GetResourceKey
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: GetResourceKey()
  nameWithType: ControlBuilder.GetResourceKey()
  fullName: System.Web.UI.ControlBuilder.GetResourceKey()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Retrieves the resource key for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public string GetResourceKey ();
    parameters: []
    return:
      type: System.String
      description: "The resource key for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.GetResourceKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.HasAspCode
  id: HasAspCode
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: HasAspCode
  nameWithType: ControlBuilder.HasAspCode
  fullName: System.Web.UI.ControlBuilder.HasAspCode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the control contains any code blocks."
  remarks: ''
  example:
  - "This example overrides the <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> method to check the <xref:System.Web.UI.ControlBuilder.ControlType%2A> property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the HasAspCode property is included in the control. If so, an exception is thrown, if not the <xref:System.Web.UI.ControlBuilder.HasBody%2A> method is called.  \n  \n [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.controlb_3_1.vb)]\n [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/p-system.web.ui.controlb_3_1.cs)]"
  syntax:
    content: public virtual bool HasAspCode { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control contains at least one code block; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.HasAspCode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.HasBody
  id: HasBody
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: HasBody()
  nameWithType: ControlBuilder.HasBody()
  fullName: System.Web.UI.ControlBuilder.HasBody()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines if a control has both an opening and closing tag. This method is called by the ASP.NET page framework."
  remarks: "This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code."
  example:
  - "This example overrides the <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> method to check the <xref:System.Web.UI.ControlBuilder.ControlType%2A> property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> property is included in the control. If so, an exception is thrown, if not the HasBody method is called.  \n  \n [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_1_1.vb)]\n [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_1_1.cs)]"
  syntax:
    content: public virtual bool HasBody ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control has an opening and closing tag; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.HasBody*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.HtmlDecodeLiterals
  id: HtmlDecodeLiterals
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: HtmlDecodeLiterals()
  nameWithType: ControlBuilder.HtmlDecodeLiterals()
  fullName: System.Web.UI.ControlBuilder.HtmlDecodeLiterals()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines whether the literal string of an HTML control must be HTML decoded. This method is called by the ASP.NET page framework."
  remarks: "A literal string refers to the text between the opening and closing tag of an HTML control. HTML encoding is when text is converted into a string representation that the browser will display rather than interpret as HTML. Characters such as the question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers, so those characters must be encoded when they appear in `a` tags or in query strings.       The HtmlDecodeLiterals method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code."
  example:
  - "The following example overrides the HtmlDecodeLiterals method to allow HTML decoding of literal strings in any control this builder is applied to.  \n  \n [!code-vb[ControlBuilderSamples_2#2](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_6_1.vb)]\n [!code-cs[ControlBuilderSamples_2#2](~/add/codesnippet/csharp/m-system.web.ui.controlb_6_1.cs)]"
  syntax:
    content: public virtual bool HtmlDecodeLiterals ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the HTML control literal string is to be decoded; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.HtmlDecodeLiterals*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ID
  id: ID
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ID
  nameWithType: ControlBuilder.ID
  fullName: System.Web.UI.ControlBuilder.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets or sets the identifier property for the control to be built."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "The identifier property for the control."
  overload: System.Web.UI.ControlBuilder.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.InDesigner
  id: InDesigner
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: InDesigner
  nameWithType: ControlBuilder.InDesigner
  fullName: System.Web.UI.ControlBuilder.InDesigner
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Returns whether the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> is running in the designer."
  remarks: ''
  example:
  - "The following example uses the InDesigner property when the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method is called. When a control has this builder attached to it, the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method determines whether the control is being accessed at design-time through a designer. The <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> returns the value of the InDesigner property, and then the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> method is called. If the InDesigner property is set to `false`, an <xref:System.Exception> is thrown. Otherwise, the inner text of the control is returned on the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> call.  \n  \n [!code-vb[ControlBuilderSamples_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.controlb_0_1.vb)]\n [!code-cs[ControlBuilderSamples_3#1](~/add/codesnippet/csharp/p-system.web.ui.controlb_0_1.cs)]"
  syntax:
    content: protected bool InDesigner { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> is running in the designer; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.InDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)
  id: Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: Init(TemplateParser,ControlBuilder,Type,String,String,IDictionary)
  nameWithType: ControlBuilder.Init(TemplateParser,ControlBuilder,Type,String,String,IDictionary)
  fullName: System.Web.UI.ControlBuilder.Init(TemplateParser,ControlBuilder,Type,String,String,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initializes the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> for use after it is instantiated. This method is called by the ASP.NET page framework."
  remarks: "This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code."
  syntax:
    content: public virtual void Init (System.Web.UI.TemplateParser parser, System.Web.UI.ControlBuilder parentBuilder, Type type, string tagName, string id, System.Collections.IDictionary attribs);
    parameters:
    - id: parser
      type: System.Web.UI.TemplateParser
      description: "The <xref href=&quot;System.Web.UI.TemplateParser&quot;></xref> object responsible for parsing the control."
    - id: parentBuilder
      type: System.Web.UI.ControlBuilder
      description: "The <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object responsible for building the parent control."
    - id: type
      type: System.Type
      description: "The <xref:System.Type> assigned to the control that the builder will create."
    - id: tagName
      type: System.String
      description: "The name of the tag to be built. This allows the builder to support multiple tag types."
    - id: id
      type: System.String
      description: "The <xref:System.Web.UI.ControlBuilder.ID*> attribute assigned to the control."
    - id: attribs
      type: System.Collections.IDictionary
      description: "The <xref:System.Collections.IDictionary> object that holds all the specified tag attributes."
  overload: System.Web.UI.ControlBuilder.Init*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.InPageTheme
  id: InPageTheme
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: InPageTheme
  nameWithType: ControlBuilder.InPageTheme
  fullName: System.Web.UI.ControlBuilder.InPageTheme
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a Boolean value indicating whether this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object is used to generate page themes."
  syntax:
    content: protected bool InPageTheme { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to use this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> to generate page themes; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.InPageTheme*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ItemType
  id: ItemType
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ItemType
  nameWithType: ControlBuilder.ItemType
  fullName: System.Web.UI.ControlBuilder.ItemType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the type set on the binding container."
  syntax:
    content: public virtual string ItemType { get; }
    return:
      type: System.String
      description: "The type set on the binding container."
  overload: System.Web.UI.ControlBuilder.ItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.Localize
  id: Localize
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: Localize
  nameWithType: ControlBuilder.Localize
  fullName: System.Web.UI.ControlBuilder.Localize
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a Boolean value indicating whether the control that is created by this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object is localized."
  syntax:
    content: public bool Localize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to indicate that the control created by this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object is localized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.Localize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.NamingContainerType
  id: NamingContainerType
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: NamingContainerType
  nameWithType: ControlBuilder.NamingContainerType
  fullName: System.Web.UI.ControlBuilder.NamingContainerType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the type of the naming container for the control that this builder creates."
  syntax:
    content: public Type NamingContainerType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type> that represent the type of the naming container for the control that this builder creates."
  overload: System.Web.UI.ControlBuilder.NamingContainerType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.NeedsTagInnerText
  id: NeedsTagInnerText
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: NeedsTagInnerText()
  nameWithType: ControlBuilder.NeedsTagInnerText()
  fullName: System.Web.UI.ControlBuilder.NeedsTagInnerText()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines if the control builder needs to get its inner text. If so, the <xref:System.Web.UI.ControlBuilder.SetTagInnerText*> method must be called. This method is called by the ASP.NET page framework."
  remarks: "The inner text is the text between the opening and closing tags of the control.       This method is called by the ASP.NET page framework during parsing and is not intended to be called directly in you code."
  example:
  - "The following example uses the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property when the NeedsTagInnerText method is called. When a control has this builder attached to it, the NeedsTagInnerText determines whether the control is being accessed at design-time through a designer. The NeedsTagInnerText returns the value of the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property, and then the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> method is called. If the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property is set to `false`, an <xref:System.Exception> is thrown. Otherwise, the inner text of the control is returned on the <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> call.  \n  \n [!code-vb[ControlBuilderSamples_3#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_0_1.vb)]\n [!code-cs[ControlBuilderSamples_3#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_0_1.cs)]"
  syntax:
    content: public virtual bool NeedsTagInnerText ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control builder needs to get its inner text. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.NeedsTagInnerText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.OnAppendToParentBuilder(System.Web.UI.ControlBuilder)
  id: OnAppendToParentBuilder(System.Web.UI.ControlBuilder)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: OnAppendToParentBuilder(ControlBuilder)
  nameWithType: ControlBuilder.OnAppendToParentBuilder(ControlBuilder)
  fullName: System.Web.UI.ControlBuilder.OnAppendToParentBuilder(ControlBuilder)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Notifies the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> that it is being added to a parent control builder."
  remarks: ''
  example:
  - "This example overrides the OnAppendToParentBuilder method to check the <xref:System.Web.UI.ControlBuilder.ControlType%2A> property to determine what type of control this builder is applied to. If it is a `CustomTextBox`, the builder checks whether the value of the <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> property is included in the control. If so, an exception is thrown, if not the <xref:System.Web.UI.ControlBuilder.HasBody%2A> method is called.  \n  \n [!code-vb[ControlBuilderSamples_4#1](~/add/codesnippet/visualbasic/6102f4e2-d19f-4c63-97f4-_1.vb)]\n [!code-cs[ControlBuilderSamples_4#1](~/add/codesnippet/csharp/6102f4e2-d19f-4c63-97f4-_1.cs)]"
  syntax:
    content: public virtual void OnAppendToParentBuilder (System.Web.UI.ControlBuilder parentBuilder);
    parameters:
    - id: parentBuilder
      type: System.Web.UI.ControlBuilder
      description: "The <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object to which the current builder is added."
  overload: System.Web.UI.ControlBuilder.OnAppendToParentBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.PageVirtualPath
  id: PageVirtualPath
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: PageVirtualPath
  nameWithType: ControlBuilder.PageVirtualPath
  fullName: System.Web.UI.ControlBuilder.PageVirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the virtual path of a page to be built by this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> instance."
  syntax:
    content: public string PageVirtualPath { get; }
    return:
      type: System.String
      description: "The virtual path of the page to be built."
  overload: System.Web.UI.ControlBuilder.PageVirtualPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.Parser
  id: Parser
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: Parser
  nameWithType: ControlBuilder.Parser
  fullName: System.Web.UI.ControlBuilder.Parser
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the <xref href=&quot;System.Web.UI.TemplateParser&quot;></xref> responsible for parsing the control."
  remarks: "This property retrieves the <xref:System.Web.UI.TemplateParser> responsible for parsing the control."
  syntax:
    content: protected System.Web.UI.TemplateParser Parser { get; }
    return:
      type: System.Web.UI.TemplateParser
      description: "The <xref href=&quot;System.Web.UI.TemplateParser&quot;></xref> used to parse the control."
  overload: System.Web.UI.ControlBuilder.Parser*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ProcessGeneratedCode(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)
  id: ProcessGeneratedCode(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ProcessGeneratedCode(CodeCompileUnit,CodeTypeDeclaration,CodeTypeDeclaration,CodeMemberMethod,CodeMemberMethod)
  nameWithType: ControlBuilder.ProcessGeneratedCode(CodeCompileUnit,CodeTypeDeclaration,CodeTypeDeclaration,CodeMemberMethod,CodeMemberMethod)
  fullName: System.Web.UI.ControlBuilder.ProcessGeneratedCode(CodeCompileUnit,CodeTypeDeclaration,CodeTypeDeclaration,CodeMemberMethod,CodeMemberMethod)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Enables custom control builders to access the generated Code Document Object Model (CodeDom) and insert and modify code during the process of parsing and building controls."
  remarks: "In the single-file page model, the `baseType` and `derivedType` parameters are the same <xref:System.CodeDom.CodeTypeDeclaration> type, which typically derives from the <xref:System.Web.UI.Page> class.       In the code-behind page model, `baseType` is the <xref:System.CodeDom.CodeTypeDeclaration> type that represents the partial code-behind class, which is typically derived from the <xref:System.Web.UI.Page> class. The `derivedType` parameter is the class that derives from the partial class that contains the markup.       For more information about ASP.NET Web page models, see [ASP.NET Web Forms Page Syntax Overview](~/add/includes/ajax-current-ext-md.md).       For more information about how to use the CodeDOM to represent and generate source code, see [Dynamic Source Code Generation and Compilation](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void ProcessGeneratedCode (System.CodeDom.CodeCompileUnit codeCompileUnit, System.CodeDom.CodeTypeDeclaration baseType, System.CodeDom.CodeTypeDeclaration derivedType, System.CodeDom.CodeMemberMethod buildMethod, System.CodeDom.CodeMemberMethod dataBindingMethod);
    parameters:
    - id: codeCompileUnit
      type: System.CodeDom.CodeCompileUnit
      description: "The root container of a CodeDOM graph of the control that is being built."
    - id: baseType
      type: System.CodeDom.CodeTypeDeclaration
      description: "The base type of the page or user control that contains the control that is being built."
    - id: derivedType
      type: System.CodeDom.CodeTypeDeclaration
      description: "The derived type of the page or user control that contains the control that is being built."
    - id: buildMethod
      type: System.CodeDom.CodeMemberMethod
      description: "The code that is used to build the control."
    - id: dataBindingMethod
      type: System.CodeDom.CodeMemberMethod
      description: "The code that is used to build the data-binding method of the control."
  overload: System.Web.UI.ControlBuilder.ProcessGeneratedCode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ServiceProvider
  id: ServiceProvider
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ServiceProvider
  nameWithType: ControlBuilder.ServiceProvider
  fullName: System.Web.UI.ControlBuilder.ServiceProvider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the service object for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public IServiceProvider ServiceProvider { get; }
    return:
      type: System.IServiceProvider
      description: "An <xref:System.IServiceProvider> that represents the service object for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.ServiceProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.SetResourceKey(System.String)
  id: SetResourceKey(System.String)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: SetResourceKey(String)
  nameWithType: ControlBuilder.SetResourceKey(String)
  fullName: System.Web.UI.ControlBuilder.SetResourceKey(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Sets the resource key for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public void SetResourceKey (string resourceKey);
    parameters:
    - id: resourceKey
      type: System.String
      description: "The resource key for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.SetResourceKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.SetServiceProvider(System.IServiceProvider)
  id: SetServiceProvider(System.IServiceProvider)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: SetServiceProvider(IServiceProvider)
  nameWithType: ControlBuilder.SetServiceProvider(IServiceProvider)
  fullName: System.Web.UI.ControlBuilder.SetServiceProvider(IServiceProvider)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Sets the service object for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public void SetServiceProvider (IServiceProvider serviceProvider);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "An <xref:System.IServiceProvider> that represents the service object for the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref>."
  overload: System.Web.UI.ControlBuilder.SetServiceProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.SetTagInnerText(System.String)
  id: SetTagInnerText(System.String)
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: SetTagInnerText(String)
  nameWithType: ControlBuilder.SetTagInnerText(String)
  fullName: System.Web.UI.ControlBuilder.SetTagInnerText(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Provides the <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> with the inner text of the control tag."
  remarks: "This method is called only if <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> previously returned `true`."
  example:
  - "The following example uses the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property when the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> method is called. When a control has this builder attached to it, the <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> determines whether the control is being accessed at design-time through a designer. The <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> returns the value of the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property, and then the SetTagInnerText method is called. If the <xref:System.Web.UI.ControlBuilder.InDesigner%2A> property is set to `false`, an <xref:System.Exception> is thrown. Otherwise, the inner text of the control is returned on the SetTagInnerText call.  \n  \n [!code-vb[ControlBuilderSamples_3#1](~/add/codesnippet/visualbasic/m-system.web.ui.controlb_2_1.vb)]\n [!code-cs[ControlBuilderSamples_3#1](~/add/codesnippet/csharp/m-system.web.ui.controlb_2_1.cs)]"
  syntax:
    content: public virtual void SetTagInnerText (string text);
    parameters:
    - id: text
      type: System.String
      description: "The text to be provided."
  overload: System.Web.UI.ControlBuilder.SetTagInnerText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.SubBuilders
  id: SubBuilders
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: SubBuilders
  nameWithType: ControlBuilder.SubBuilders
  fullName: System.Web.UI.ControlBuilder.SubBuilders
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a list of child <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> objects for this <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> object."
  syntax:
    content: public System.Collections.ArrayList SubBuilders { get; }
    return:
      type: System.Collections.ArrayList
      description: "A list of child <xref href=&quot;System.Web.UI.ControlBuilder&quot;></xref> objects."
  overload: System.Web.UI.ControlBuilder.SubBuilders*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.TagName
  id: TagName
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: TagName
  nameWithType: ControlBuilder.TagName
  fullName: System.Web.UI.ControlBuilder.TagName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the tag name for the control to be built."
  syntax:
    content: public string TagName { get; }
    return:
      type: System.String
      description: "The tag name for the control."
  overload: System.Web.UI.ControlBuilder.TagName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.TemplatePropertyEntries
  id: TemplatePropertyEntries
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: TemplatePropertyEntries
  nameWithType: ControlBuilder.TemplatePropertyEntries
  fullName: System.Web.UI.ControlBuilder.TemplatePropertyEntries
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a collection of template property entries."
  remarks: "If there are no entries, a static empty collection is returned."
  syntax:
    content: public System.Collections.ICollection TemplatePropertyEntries { get; }
    return:
      type: System.Collections.ICollection
      description: "A collection of template property entries."
  overload: System.Web.UI.ControlBuilder.TemplatePropertyEntries*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ControlBuilder.ThemeResolutionService
  id: ThemeResolutionService
  parent: System.Web.UI.ControlBuilder
  langs:
  - csharp
  name: ThemeResolutionService
  nameWithType: ControlBuilder.ThemeResolutionService
  fullName: System.Web.UI.ControlBuilder.ThemeResolutionService
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets an <xref href=&quot;System.Web.UI.IThemeResolutionService&quot;></xref> object that is used in design time to manage control themes and skins."
  remarks: "The <xref:System.Web.UI.IThemeResolutionService> interface is a container for one or more <xref:System.Web.UI.ThemeProvider> objects, which in turn supply the <xref:System.Web.UI.SkinBuilder> objects that apply themes and control skins to controls when they are created in a designer."
  syntax:
    content: public System.Web.UI.IThemeResolutionService ThemeResolutionService { get; }
    return:
      type: System.Web.UI.IThemeResolutionService
      description: "An <xref href=&quot;System.Web.UI.IThemeResolutionService&quot;></xref> object that is used in design time to manage control themes and skins."
  overload: System.Web.UI.ControlBuilder.ThemeResolutionService*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.UI.ControlBuilder.#ctor
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ControlBuilder()
  nameWithType: ControlBuilder.ControlBuilder()
  fullName: System.Web.UI.ControlBuilder.ControlBuilder()
- uid: System.Web.UI.ControlBuilder.AllowWhitespaceLiterals
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: AllowWhitespaceLiterals()
  nameWithType: ControlBuilder.AllowWhitespaceLiterals()
  fullName: System.Web.UI.ControlBuilder.AllowWhitespaceLiterals()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.ControlBuilder.AppendLiteralString(System.String)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: AppendLiteralString(String)
  nameWithType: ControlBuilder.AppendLiteralString(String)
  fullName: System.Web.UI.ControlBuilder.AppendLiteralString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.ControlBuilder.AppendSubBuilder(System.Web.UI.ControlBuilder)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: AppendSubBuilder(ControlBuilder)
  nameWithType: ControlBuilder.AppendSubBuilder(ControlBuilder)
  fullName: System.Web.UI.ControlBuilder.AppendSubBuilder(ControlBuilder)
- uid: System.Web.UI.ControlBuilder
  parent: System.Web.UI
  isExternal: false
  name: ControlBuilder
  nameWithType: ControlBuilder
  fullName: System.Web.UI.ControlBuilder
- uid: System.Web.UI.ControlBuilder.BindingContainerBuilder
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: BindingContainerBuilder
  nameWithType: ControlBuilder.BindingContainerBuilder
  fullName: System.Web.UI.ControlBuilder.BindingContainerBuilder
- uid: System.Web.UI.ControlBuilder.BindingContainerType
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: BindingContainerType
  nameWithType: ControlBuilder.BindingContainerType
  fullName: System.Web.UI.ControlBuilder.BindingContainerType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.ControlBuilder.BuildObject
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: BuildObject()
  nameWithType: ControlBuilder.BuildObject()
  fullName: System.Web.UI.ControlBuilder.BuildObject()
- uid: System.Web.UI.ControlBuilder.CloseControl
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: CloseControl()
  nameWithType: ControlBuilder.CloseControl()
  fullName: System.Web.UI.ControlBuilder.CloseControl()
- uid: System.Web.UI.ControlBuilder.ComplexPropertyEntries
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ComplexPropertyEntries
  nameWithType: ControlBuilder.ComplexPropertyEntries
  fullName: System.Web.UI.ControlBuilder.ComplexPropertyEntries
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.ControlBuilder.ControlType
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ControlType
  nameWithType: ControlBuilder.ControlType
  fullName: System.Web.UI.ControlBuilder.ControlType
- uid: System.Web.UI.ControlBuilder.CreateBuilderFromType(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary,System.Int32,System.String)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: CreateBuilderFromType(TemplateParser,ControlBuilder,Type,String,String,IDictionary,Int32,String)
  nameWithType: ControlBuilder.CreateBuilderFromType(TemplateParser,ControlBuilder,Type,String,String,IDictionary,Int32,String)
  fullName: System.Web.UI.ControlBuilder.CreateBuilderFromType(TemplateParser,ControlBuilder,Type,String,String,IDictionary,Int32,String)
- uid: System.Web.UI.TemplateParser
  parent: System.Web.UI
  isExternal: false
  name: TemplateParser
  nameWithType: TemplateParser
  fullName: System.Web.UI.TemplateParser
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.ControlBuilder.CurrentFilterResolutionService
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: CurrentFilterResolutionService
  nameWithType: ControlBuilder.CurrentFilterResolutionService
  fullName: System.Web.UI.ControlBuilder.CurrentFilterResolutionService
- uid: System.Web.UI.IFilterResolutionService
  parent: System.Web.UI
  isExternal: false
  name: IFilterResolutionService
  nameWithType: IFilterResolutionService
  fullName: System.Web.UI.IFilterResolutionService
- uid: System.Web.UI.ControlBuilder.DeclareType
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: DeclareType
  nameWithType: ControlBuilder.DeclareType
  fullName: System.Web.UI.ControlBuilder.DeclareType
- uid: System.Web.UI.ControlBuilder.DesignerFilter
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: DesignerFilter
  nameWithType: ControlBuilder.DesignerFilter
  fullName: System.Web.UI.ControlBuilder.DesignerFilter
- uid: System.Web.UI.ControlBuilder.FChildrenAsProperties
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: FChildrenAsProperties
  nameWithType: ControlBuilder.FChildrenAsProperties
  fullName: System.Web.UI.ControlBuilder.FChildrenAsProperties
- uid: System.Web.UI.ControlBuilder.FIsNonParserAccessor
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: FIsNonParserAccessor
  nameWithType: ControlBuilder.FIsNonParserAccessor
  fullName: System.Web.UI.ControlBuilder.FIsNonParserAccessor
- uid: System.Web.UI.ControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: GetChildControlType(String,IDictionary)
  nameWithType: ControlBuilder.GetChildControlType(String,IDictionary)
  fullName: System.Web.UI.ControlBuilder.GetChildControlType(String,IDictionary)
- uid: System.Web.UI.ControlBuilder.GetObjectPersistData
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: GetObjectPersistData()
  nameWithType: ControlBuilder.GetObjectPersistData()
  fullName: System.Web.UI.ControlBuilder.GetObjectPersistData()
- uid: System.Web.UI.ObjectPersistData
  parent: System.Web.UI
  isExternal: false
  name: ObjectPersistData
  nameWithType: ObjectPersistData
  fullName: System.Web.UI.ObjectPersistData
- uid: System.Web.UI.ControlBuilder.GetResourceKey
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: GetResourceKey()
  nameWithType: ControlBuilder.GetResourceKey()
  fullName: System.Web.UI.ControlBuilder.GetResourceKey()
- uid: System.Web.UI.ControlBuilder.HasAspCode
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: HasAspCode
  nameWithType: ControlBuilder.HasAspCode
  fullName: System.Web.UI.ControlBuilder.HasAspCode
- uid: System.Web.UI.ControlBuilder.HasBody
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: HasBody()
  nameWithType: ControlBuilder.HasBody()
  fullName: System.Web.UI.ControlBuilder.HasBody()
- uid: System.Web.UI.ControlBuilder.HtmlDecodeLiterals
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: HtmlDecodeLiterals()
  nameWithType: ControlBuilder.HtmlDecodeLiterals()
  fullName: System.Web.UI.ControlBuilder.HtmlDecodeLiterals()
- uid: System.Web.UI.ControlBuilder.ID
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ID
  nameWithType: ControlBuilder.ID
  fullName: System.Web.UI.ControlBuilder.ID
- uid: System.Web.UI.ControlBuilder.InDesigner
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: InDesigner
  nameWithType: ControlBuilder.InDesigner
  fullName: System.Web.UI.ControlBuilder.InDesigner
- uid: System.Web.UI.ControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: Init(TemplateParser,ControlBuilder,Type,String,String,IDictionary)
  nameWithType: ControlBuilder.Init(TemplateParser,ControlBuilder,Type,String,String,IDictionary)
  fullName: System.Web.UI.ControlBuilder.Init(TemplateParser,ControlBuilder,Type,String,String,IDictionary)
- uid: System.Web.UI.ControlBuilder.InPageTheme
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: InPageTheme
  nameWithType: ControlBuilder.InPageTheme
  fullName: System.Web.UI.ControlBuilder.InPageTheme
- uid: System.Web.UI.ControlBuilder.ItemType
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ItemType
  nameWithType: ControlBuilder.ItemType
  fullName: System.Web.UI.ControlBuilder.ItemType
- uid: System.Web.UI.ControlBuilder.Localize
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: Localize
  nameWithType: ControlBuilder.Localize
  fullName: System.Web.UI.ControlBuilder.Localize
- uid: System.Web.UI.ControlBuilder.NamingContainerType
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: NamingContainerType
  nameWithType: ControlBuilder.NamingContainerType
  fullName: System.Web.UI.ControlBuilder.NamingContainerType
- uid: System.Web.UI.ControlBuilder.NeedsTagInnerText
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: NeedsTagInnerText()
  nameWithType: ControlBuilder.NeedsTagInnerText()
  fullName: System.Web.UI.ControlBuilder.NeedsTagInnerText()
- uid: System.Web.UI.ControlBuilder.OnAppendToParentBuilder(System.Web.UI.ControlBuilder)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: OnAppendToParentBuilder(ControlBuilder)
  nameWithType: ControlBuilder.OnAppendToParentBuilder(ControlBuilder)
  fullName: System.Web.UI.ControlBuilder.OnAppendToParentBuilder(ControlBuilder)
- uid: System.Web.UI.ControlBuilder.PageVirtualPath
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: PageVirtualPath
  nameWithType: ControlBuilder.PageVirtualPath
  fullName: System.Web.UI.ControlBuilder.PageVirtualPath
- uid: System.Web.UI.ControlBuilder.Parser
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: Parser
  nameWithType: ControlBuilder.Parser
  fullName: System.Web.UI.ControlBuilder.Parser
- uid: System.Web.UI.ControlBuilder.ProcessGeneratedCode(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ProcessGeneratedCode(CodeCompileUnit,CodeTypeDeclaration,CodeTypeDeclaration,CodeMemberMethod,CodeMemberMethod)
  nameWithType: ControlBuilder.ProcessGeneratedCode(CodeCompileUnit,CodeTypeDeclaration,CodeTypeDeclaration,CodeMemberMethod,CodeMemberMethod)
  fullName: System.Web.UI.ControlBuilder.ProcessGeneratedCode(CodeCompileUnit,CodeTypeDeclaration,CodeTypeDeclaration,CodeMemberMethod,CodeMemberMethod)
- uid: System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: false
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.CodeDom.CodeTypeDeclaration
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
- uid: System.CodeDom.CodeMemberMethod
  parent: System.CodeDom
  isExternal: false
  name: CodeMemberMethod
  nameWithType: CodeMemberMethod
  fullName: System.CodeDom.CodeMemberMethod
- uid: System.Web.UI.ControlBuilder.ServiceProvider
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ServiceProvider
  nameWithType: ControlBuilder.ServiceProvider
  fullName: System.Web.UI.ControlBuilder.ServiceProvider
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Web.UI.ControlBuilder.SetResourceKey(System.String)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SetResourceKey(String)
  nameWithType: ControlBuilder.SetResourceKey(String)
  fullName: System.Web.UI.ControlBuilder.SetResourceKey(String)
- uid: System.Web.UI.ControlBuilder.SetServiceProvider(System.IServiceProvider)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SetServiceProvider(IServiceProvider)
  nameWithType: ControlBuilder.SetServiceProvider(IServiceProvider)
  fullName: System.Web.UI.ControlBuilder.SetServiceProvider(IServiceProvider)
- uid: System.Web.UI.ControlBuilder.SetTagInnerText(System.String)
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SetTagInnerText(String)
  nameWithType: ControlBuilder.SetTagInnerText(String)
  fullName: System.Web.UI.ControlBuilder.SetTagInnerText(String)
- uid: System.Web.UI.ControlBuilder.SubBuilders
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SubBuilders
  nameWithType: ControlBuilder.SubBuilders
  fullName: System.Web.UI.ControlBuilder.SubBuilders
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Web.UI.ControlBuilder.TagName
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: TagName
  nameWithType: ControlBuilder.TagName
  fullName: System.Web.UI.ControlBuilder.TagName
- uid: System.Web.UI.ControlBuilder.TemplatePropertyEntries
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: TemplatePropertyEntries
  nameWithType: ControlBuilder.TemplatePropertyEntries
  fullName: System.Web.UI.ControlBuilder.TemplatePropertyEntries
- uid: System.Web.UI.ControlBuilder.ThemeResolutionService
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ThemeResolutionService
  nameWithType: ControlBuilder.ThemeResolutionService
  fullName: System.Web.UI.ControlBuilder.ThemeResolutionService
- uid: System.Web.UI.IThemeResolutionService
  parent: System.Web.UI
  isExternal: false
  name: IThemeResolutionService
  nameWithType: IThemeResolutionService
  fullName: System.Web.UI.IThemeResolutionService
- uid: System.Web.UI.ControlBuilder.#ctor*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ControlBuilder
  nameWithType: ControlBuilder.ControlBuilder
- uid: System.Web.UI.ControlBuilder.AllowWhitespaceLiterals*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: AllowWhitespaceLiterals
  nameWithType: ControlBuilder.AllowWhitespaceLiterals
- uid: System.Web.UI.ControlBuilder.AppendLiteralString*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: AppendLiteralString
  nameWithType: ControlBuilder.AppendLiteralString
- uid: System.Web.UI.ControlBuilder.AppendSubBuilder*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: AppendSubBuilder
  nameWithType: ControlBuilder.AppendSubBuilder
- uid: System.Web.UI.ControlBuilder.BindingContainerBuilder*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: BindingContainerBuilder
  nameWithType: ControlBuilder.BindingContainerBuilder
- uid: System.Web.UI.ControlBuilder.BindingContainerType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: BindingContainerType
  nameWithType: ControlBuilder.BindingContainerType
- uid: System.Web.UI.ControlBuilder.BuildObject*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: BuildObject
  nameWithType: ControlBuilder.BuildObject
- uid: System.Web.UI.ControlBuilder.CloseControl*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: CloseControl
  nameWithType: ControlBuilder.CloseControl
- uid: System.Web.UI.ControlBuilder.ComplexPropertyEntries*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ComplexPropertyEntries
  nameWithType: ControlBuilder.ComplexPropertyEntries
- uid: System.Web.UI.ControlBuilder.ControlType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ControlType
  nameWithType: ControlBuilder.ControlType
- uid: System.Web.UI.ControlBuilder.CreateBuilderFromType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: CreateBuilderFromType
  nameWithType: ControlBuilder.CreateBuilderFromType
- uid: System.Web.UI.ControlBuilder.CurrentFilterResolutionService*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: CurrentFilterResolutionService
  nameWithType: ControlBuilder.CurrentFilterResolutionService
- uid: System.Web.UI.ControlBuilder.DeclareType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: DeclareType
  nameWithType: ControlBuilder.DeclareType
- uid: System.Web.UI.ControlBuilder.FChildrenAsProperties*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: FChildrenAsProperties
  nameWithType: ControlBuilder.FChildrenAsProperties
- uid: System.Web.UI.ControlBuilder.FIsNonParserAccessor*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: FIsNonParserAccessor
  nameWithType: ControlBuilder.FIsNonParserAccessor
- uid: System.Web.UI.ControlBuilder.GetChildControlType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: GetChildControlType
  nameWithType: ControlBuilder.GetChildControlType
- uid: System.Web.UI.ControlBuilder.GetObjectPersistData*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: GetObjectPersistData
  nameWithType: ControlBuilder.GetObjectPersistData
- uid: System.Web.UI.ControlBuilder.GetResourceKey*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: GetResourceKey
  nameWithType: ControlBuilder.GetResourceKey
- uid: System.Web.UI.ControlBuilder.HasAspCode*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: HasAspCode
  nameWithType: ControlBuilder.HasAspCode
- uid: System.Web.UI.ControlBuilder.HasBody*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: HasBody
  nameWithType: ControlBuilder.HasBody
- uid: System.Web.UI.ControlBuilder.HtmlDecodeLiterals*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: HtmlDecodeLiterals
  nameWithType: ControlBuilder.HtmlDecodeLiterals
- uid: System.Web.UI.ControlBuilder.ID*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ID
  nameWithType: ControlBuilder.ID
- uid: System.Web.UI.ControlBuilder.InDesigner*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: InDesigner
  nameWithType: ControlBuilder.InDesigner
- uid: System.Web.UI.ControlBuilder.Init*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: Init
  nameWithType: ControlBuilder.Init
- uid: System.Web.UI.ControlBuilder.InPageTheme*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: InPageTheme
  nameWithType: ControlBuilder.InPageTheme
- uid: System.Web.UI.ControlBuilder.ItemType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ItemType
  nameWithType: ControlBuilder.ItemType
- uid: System.Web.UI.ControlBuilder.Localize*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: Localize
  nameWithType: ControlBuilder.Localize
- uid: System.Web.UI.ControlBuilder.NamingContainerType*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: NamingContainerType
  nameWithType: ControlBuilder.NamingContainerType
- uid: System.Web.UI.ControlBuilder.NeedsTagInnerText*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: NeedsTagInnerText
  nameWithType: ControlBuilder.NeedsTagInnerText
- uid: System.Web.UI.ControlBuilder.OnAppendToParentBuilder*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: OnAppendToParentBuilder
  nameWithType: ControlBuilder.OnAppendToParentBuilder
- uid: System.Web.UI.ControlBuilder.PageVirtualPath*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: PageVirtualPath
  nameWithType: ControlBuilder.PageVirtualPath
- uid: System.Web.UI.ControlBuilder.Parser*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: Parser
  nameWithType: ControlBuilder.Parser
- uid: System.Web.UI.ControlBuilder.ProcessGeneratedCode*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ProcessGeneratedCode
  nameWithType: ControlBuilder.ProcessGeneratedCode
- uid: System.Web.UI.ControlBuilder.ServiceProvider*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ServiceProvider
  nameWithType: ControlBuilder.ServiceProvider
- uid: System.Web.UI.ControlBuilder.SetResourceKey*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SetResourceKey
  nameWithType: ControlBuilder.SetResourceKey
- uid: System.Web.UI.ControlBuilder.SetServiceProvider*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SetServiceProvider
  nameWithType: ControlBuilder.SetServiceProvider
- uid: System.Web.UI.ControlBuilder.SetTagInnerText*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SetTagInnerText
  nameWithType: ControlBuilder.SetTagInnerText
- uid: System.Web.UI.ControlBuilder.SubBuilders*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: SubBuilders
  nameWithType: ControlBuilder.SubBuilders
- uid: System.Web.UI.ControlBuilder.TagName*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: TagName
  nameWithType: ControlBuilder.TagName
- uid: System.Web.UI.ControlBuilder.TemplatePropertyEntries*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: TemplatePropertyEntries
  nameWithType: ControlBuilder.TemplatePropertyEntries
- uid: System.Web.UI.ControlBuilder.ThemeResolutionService*
  parent: System.Web.UI.ControlBuilder
  isExternal: false
  name: ThemeResolutionService
  nameWithType: ControlBuilder.ThemeResolutionService
