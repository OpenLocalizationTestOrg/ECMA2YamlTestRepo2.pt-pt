### YamlMime:ManagedReference
items:
- uid: System.Web.UI.IHierarchyData
  id: IHierarchyData
  children:
  - System.Web.UI.IHierarchyData.GetChildren
  - System.Web.UI.IHierarchyData.GetParent
  - System.Web.UI.IHierarchyData.HasChildren
  - System.Web.UI.IHierarchyData.Item
  - System.Web.UI.IHierarchyData.Path
  - System.Web.UI.IHierarchyData.Type
  langs:
  - csharp
  name: IHierarchyData
  nameWithType: IHierarchyData
  fullName: System.Web.UI.IHierarchyData
  type: Interface
  summary: "Exposes a node of a hierarchical data structure, including the node object and some properties that describe characteristics of the node. Objects that implement the IHierarchyData interface can be contained in <xref href=&quot;System.Web.UI.IHierarchicalEnumerable&quot;></xref> collections, and are used by ASP.NET site navigation and data source controls."
  remarks: "The IHierarchyData interface is implemented by classes that represent nodes of a hierarchical structure, and track the hierarchical relationships to their parent and child nodes. Classes that implement the IHierarchyData interface can be contained in collections that implement the <xref:System.Web.UI.IHierarchicalEnumerable> interface."
  example:
  - "The following code example demonstrates how to implement the IHierarchyData interface with a class that wraps a <xref:System.IO.FileSystemInfo> object. The <xref:System.IO.FileSystemInfo> class is a good example of a hierarchical data node, which the IHierarchyData interface represents for ASP.NET hierarchical data source controls. This code example is part of a larger example provided for the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/add/codesnippet/csharp/t-system.web.ui.ihierarc_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/add/codesnippet/visualbasic/t-system.web.ui.ihierarc_0_1.vb)]  \n  \n The following code example demonstrates how to recursively iterate through an <xref:System.Web.UI.IHierarchicalEnumerable> collection, extract the IHierarchyData item from the enumerator using the <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> method, and perform basic work with the data item.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#1](~/add/codesnippet/csharp/t-system.web.ui.ihierarc_0_2.aspx)]\n [!code-vb[System.Web.UI.IHierarchyData_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.ihierarc_0_2.aspx)]"
  syntax:
    content: public interface IHierarchyData
  implements: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.GetChildren
  id: GetChildren
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: GetChildren()
  nameWithType: IHierarchyData.GetChildren()
  fullName: System.Web.UI.IHierarchyData.GetChildren()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets an enumeration object that represents all the child nodes of the current hierarchical node."
  remarks: "You can use the <xref:System.Web.UI.IHierarchyData.HasChildren%2A> property to determine whether the <xref:System.Web.UI.IHierarchyData> node has child nodes."
  example:
  - "The following code example demonstrates how to check the <xref:System.Web.UI.IHierarchyData.HasChildren%2A> property to determine whether the current hierarchical data node has child nodes, and retrieve them using the GetChildren method. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/m-system.web.ui.ihierarc_3_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/m-system.web.ui.ihierarc_3_1.vb)]"
  syntax:
    content: public System.Web.UI.IHierarchicalEnumerable GetChildren ();
    parameters: []
    return:
      type: System.Web.UI.IHierarchicalEnumerable
      description: "An <xref href=&quot;System.Web.UI.IHierarchicalEnumerable&quot;></xref> collection of child nodes of the current hierarchical node."
  overload: System.Web.UI.IHierarchyData.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.GetParent
  id: GetParent
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: GetParent()
  nameWithType: IHierarchyData.GetParent()
  fullName: System.Web.UI.IHierarchyData.GetParent()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets an <xref href=&quot;System.Web.UI.IHierarchyData&quot;></xref> object that represents the parent node of the current hierarchical node."
  remarks: "The <xref:System.Web.UI.IHierarchyData> interface does not define a HasParent convenience property, so callers must check the return value of the GetParent method for `null` to determine whether the current <xref:System.Web.UI.IHierarchyData> node is the root node of the hierarchical data structure to which the node belongs."
  example:
  - "The following code example demonstrates how to implement the GetParent method in a class that implements the <xref:System.Web.UI.IHierarchyData> interface. The `FileSystemHierarchyData` class wraps a <xref:System.IO.FileSystemInfo> object, and the GetParent method implementation checks the type of the <xref:System.IO.FileSystemInfo> object, and returns the appropriate parent object based on the type. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface and the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/add/codesnippet/csharp/m-system.web.ui.ihierarc_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/add/codesnippet/visualbasic/m-system.web.ui.ihierarc_1_1.vb)]"
  syntax:
    content: public System.Web.UI.IHierarchyData GetParent ();
    parameters: []
    return:
      type: System.Web.UI.IHierarchyData
      description: "An <xref href=&quot;System.Web.UI.IHierarchyData&quot;></xref> object that represents the parent node of the current hierarchical node."
  overload: System.Web.UI.IHierarchyData.GetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.HasChildren
  id: HasChildren
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
  fullName: System.Web.UI.IHierarchyData.HasChildren
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Indicates whether the hierarchical data node that the <xref href=&quot;System.Web.UI.IHierarchyData&quot;></xref> object represents has any child nodes."
  remarks: "The HasChildren property is a convenience property that enables callers to avoid checking the return value of the <xref:System.Web.UI.IHierarchyData.GetChildren%2A> method for `null`. If the HasChildren property returns `true`, call the <xref:System.Web.UI.IHierarchyData.GetChildren%2A> method to retrieve an <xref:System.Web.UI.IHierarchicalEnumerable> collection of child nodes."
  example:
  - "The following code example demonstrates how an ASP.NET hierarchical data-bound control uses an <xref:System.Web.UI.IHierarchyData> object in a recursive data-binding method. The items in an <xref:System.Web.UI.IHierarchicalEnumerable> collection are enumerated, and for each an <xref:System.Web.UI.IHierarchyData> object is retrieved using the <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> method. Finally, the HasChildren property is checked to determine whether to recurse. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.HierarchicalDataBoundControl> class.  \n  \n [!code-vb[Samples.AspNet.GeneologyTree#5](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_3_1.vb)]\n [!code-cs[Samples.AspNet.GeneologyTree#5](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_3_1.cs)]"
  syntax:
    content: public bool HasChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current node has child nodes; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.IHierarchyData.HasChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Item
  id: Item
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Item
  nameWithType: IHierarchyData.Item
  fullName: System.Web.UI.IHierarchyData.Item
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the hierarchical data node that the <xref href=&quot;System.Web.UI.IHierarchyData&quot;></xref> object represents."
  remarks: "While many classes that represent hierarchical data nodes, such as the <xref:System.Web.SiteMapNode> class, implement the <xref:System.Web.UI.IHierarchyData> interface directly, other classes only act as a wrapper for a class that does not implement the interface. The Item property is provided for these design situations, when business objects are functionally equivalent to an <xref:System.Web.UI.IHierarchyData> object but cannot be redesigned easily."
  example:
  - "The following code example demonstrates how to access <xref:System.Web.UI.IHierarchyData> properties, check the type of an <xref:System.Web.UI.IHierarchyData> object using the <xref:System.Web.UI.IHierarchyData.Type%2A> property, and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_1_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_1_1.vb)]"
  syntax:
    content: public object Item { get; }
    return:
      type: System.Object
      description: "An <xref:System.Object> hierarchical data node object."
  overload: System.Web.UI.IHierarchyData.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Path
  id: Path
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Path
  nameWithType: IHierarchyData.Path
  fullName: System.Web.UI.IHierarchyData.Path
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the hierarchical path of the node."
  remarks: "The Path property can be passed to the <xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A> method to retrieve the <xref:System.Web.UI.HierarchicalDataSourceView> object that corresponds to the node identified by Path.      > [!CAUTION] >  The Path property should not contain any sensitive information about the host environment, because it might be rendered to the client in a data-bound control."
  example:
  - "The following code example demonstrates how to implement the Path property in a class that implements the <xref:System.Web.UI.IHierarchyData> interface. The `FileSystemHierarchyData` class wraps a <xref:System.IO.FileSystemInfo> object, and the Path property implementation returns its file system path. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface and the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_0_1.vb)]"
  syntax:
    content: public string Path { get; }
    return:
      type: System.String
      description: "A <xref:System.String> that identifies the hierarchical path relative to the current node."
  overload: System.Web.UI.IHierarchyData.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Type
  id: Type
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Type
  nameWithType: IHierarchyData.Type
  fullName: System.Web.UI.IHierarchyData.Type
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the name of the type of <xref:System.Object> contained in the <xref:System.Web.UI.IHierarchyData.Item*> property."
  remarks: "The Type property does not return the <xref:System.Type?displayProperty=fullName> of the object represented in an <xref:System.Web.UI.IHierarchyData> object. It returns a name used by data-bound controls to differentiate between items in a hierarchy that have different bindable properties."
  example:
  - "The following code example demonstrates how to write the basic <xref:System.Web.UI.IHierarchyData> properties to an <xref:System.Web.HttpResponse> stream, then check the type of an <xref:System.Web.UI.IHierarchyData> object using the Type property and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_2_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_2_1.vb)]"
  syntax:
    content: public string Type { get; }
    return:
      type: System.String
      description: "The name of the type of object that the <xref href=&quot;System.Web.UI.IHierarchyData&quot;></xref> object represents."
  overload: System.Web.UI.IHierarchyData.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.IHierarchyData.GetChildren
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetChildren()
  nameWithType: IHierarchyData.GetChildren()
  fullName: System.Web.UI.IHierarchyData.GetChildren()
- uid: System.Web.UI.IHierarchicalEnumerable
  parent: System.Web.UI
  isExternal: false
  name: IHierarchicalEnumerable
  nameWithType: IHierarchicalEnumerable
  fullName: System.Web.UI.IHierarchicalEnumerable
- uid: System.Web.UI.IHierarchyData.GetParent
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetParent()
  nameWithType: IHierarchyData.GetParent()
  fullName: System.Web.UI.IHierarchyData.GetParent()
- uid: System.Web.UI.IHierarchyData
  parent: System.Web.UI
  isExternal: false
  name: IHierarchyData
  nameWithType: IHierarchyData
  fullName: System.Web.UI.IHierarchyData
- uid: System.Web.UI.IHierarchyData.HasChildren
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
  fullName: System.Web.UI.IHierarchyData.HasChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.IHierarchyData.Item
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Item
  nameWithType: IHierarchyData.Item
  fullName: System.Web.UI.IHierarchyData.Item
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.IHierarchyData.Path
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Path
  nameWithType: IHierarchyData.Path
  fullName: System.Web.UI.IHierarchyData.Path
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.IHierarchyData.Type
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Type
  nameWithType: IHierarchyData.Type
  fullName: System.Web.UI.IHierarchyData.Type
- uid: System.Web.UI.IHierarchyData.GetChildren*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetChildren
  nameWithType: IHierarchyData.GetChildren
- uid: System.Web.UI.IHierarchyData.GetParent*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetParent
  nameWithType: IHierarchyData.GetParent
- uid: System.Web.UI.IHierarchyData.HasChildren*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
- uid: System.Web.UI.IHierarchyData.Item*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Item
  nameWithType: IHierarchyData.Item
- uid: System.Web.UI.IHierarchyData.Path*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Path
  nameWithType: IHierarchyData.Path
- uid: System.Web.UI.IHierarchyData.Type*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Type
  nameWithType: IHierarchyData.Type
