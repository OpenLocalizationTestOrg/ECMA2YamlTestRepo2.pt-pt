### YamlMime:ManagedReference
items:
- uid: System.Web.HttpException
  id: HttpException
  children:
  - System.Web.HttpException.#ctor
  - System.Web.HttpException.#ctor(System.String)
  - System.Web.HttpException.#ctor(System.Int32,System.String)
  - System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Web.HttpException.#ctor(System.String,System.Exception)
  - System.Web.HttpException.#ctor(System.String,System.Int32)
  - System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)
  - System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)
  - System.Web.HttpException.CreateFromLastError(System.String)
  - System.Web.HttpException.GetHtmlErrorMessage
  - System.Web.HttpException.GetHttpCode
  - System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Web.HttpException.WebEventCode
  langs:
  - csharp
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
  type: Class
  summary: "Describes an exception that occurred during the processing of HTTP requests."
  remarks: "The HttpException class is an HTTP-specific exception class that enables ASP.NET to generate exception information. For more information about throwing and handling exceptions, see [Exceptions](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the HttpException class to raise customized exceptions. The `Button_Click` method determines which button was clicked, and then calls either the `CheckNumber` or `CheckBoolean` method. If the user-entered value in the text box does not correspond to the expected type, an HttpException exception is created and thrown with a customized message based on the error type.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[HttpException#1](~/add/codesnippet/visualbasic/t-system.web.httpexception_1.aspx)]\n [!code-cs[HttpException#1](~/add/codesnippet/csharp/t-system.web.httpexception_1.aspx)]"
  syntax:
    content: 'public class HttpException : System.Runtime.InteropServices.ExternalException'
  inheritance:
  - System.Exception
  - System.SystemException
  - System.Runtime.InteropServices.ExternalException
  implements: []
  inheritedMembers:
  - System.Runtime.InteropServices.ExternalException.ErrorCode
  - System.Runtime.InteropServices.ExternalException.ToString
  platform:
  - net462
- uid: System.Web.HttpException.#ctor
  id: '#ctor'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException()
  nameWithType: HttpException.HttpException()
  fullName: System.Web.HttpException.HttpException()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class and creates an empty <xref href=&quot;System.Web.HttpException&quot;></xref> object."
  remarks: "When handling exceptions, it can be useful to capture a series of related exceptions with the outer exception being thrown in response to an inner exception.       A reference to the inner exception that caused the outer exception is available from the <xref:System.Exception.InnerException%2A> property of the outer exception. This mechanism preserves the error information that is carried by earlier exceptions, including the original exceptions, while allowing you to create more meaningful outer exceptions. For more information, see <xref:System.Exception.InnerException%2A>."
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The `CheckNumber` method accepts a user-entered value through a text box and checks whether it is an integer. If the value is not an integer, an exception is thrown, and then a new <xref:System.Web.HttpException> object is created and thrown. That exception is caught in the `Button_Click` event handler and the error message is displayed on the browser.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpException_Constructor1#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_2_1.aspx)]\n [!code-vb[HttpException_Constructor1#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_2_1.aspx)]"
  syntax:
    content: public HttpException ();
    parameters: []
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(String)
  nameWithType: HttpException.HttpException(String)
  fullName: System.Web.HttpException.HttpException(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class using a supplied error message."
  remarks: ''
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. An <xref:System.Web.HttpException> is thrown if a user-entered value is 0.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic HttpException.HttpException1 Example#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_0_1.cs)]\n [!code-vb[Classic HttpException.HttpException1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_0_1.vb)]"
  syntax:
    content: public HttpException (string message);
    parameters:
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(Int32,String)
  nameWithType: HttpException.HttpException(Int32,String)
  fullName: System.Web.HttpException.HttpException(Int32,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class using an HTTP response status code and an error message."
  syntax:
    content: public HttpException (int httpCode, string message);
    parameters:
    - id: httpCode
      type: System.Int32
      description: "The HTTP response status code sent to the client corresponding to this error."
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(SerializationInfo,StreamingContext)
  nameWithType: HttpException.HttpException(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.HttpException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class with serialized data."
  remarks: "The HttpException constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream. For more information, see [XML and SOAP Serialization](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected HttpException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> that holds the serialized object data about the exception being thrown."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "The <xref:System.Runtime.Serialization.StreamingContext> that holds the contextual information about the source or destination."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(String,Exception)
  nameWithType: HttpException.HttpException(String,Exception)
  fullName: System.Web.HttpException.HttpException(String,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class using an error message and the <xref:System.Exception.InnerException*> property."
  remarks: "When handling exceptions, it can be useful to capture a series of related exceptions with the outer exception being thrown in response to an inner exception.       A reference to the inner exception that caused the outer exception is available from the <xref:System.Exception.InnerException%2A> property of the outer exception. This mechanism preserves the error information that is carried by earlier exceptions, including the original exceptions, while allowing you to create more meaningful outer exceptions. For more information, see <xref:System.Exception.InnerException%2A>."
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The `CheckNumber` method accepts a user-entered value through a text box and checks whether it is an integer. If the value is not an integer, an exception is thrown, and then in the catch block, a new <xref:System.Web.HttpException> object is created and thrown. That exception is caught in the `Button_Click` event handler and the error message is displayed on the browser.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[HttpException_Constructor2#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_1_1.aspx)]\n [!code-cs[HttpException_Constructor2#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_1_1.aspx)]"
  syntax:
    content: public HttpException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
    - id: innerException
      type: System.Exception
      description: "The <xref:System.Exception.InnerException*>, if any, that threw the current exception."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(String,Int32)
  nameWithType: HttpException.HttpException(String,Int32)
  fullName: System.Web.HttpException.HttpException(String,Int32)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class using an error message and an exception code."
  remarks: ''
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. An <xref:System.Web.HttpException> exception is thrown if a user-entered value is 0.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[Classic HttpException.HttpException2 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_4_1.vb)]\n [!code-cs[Classic HttpException.HttpException2 Example#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_4_1.cs)]"
  syntax:
    content: public HttpException (string message, int hr);
    parameters:
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
    - id: hr
      type: System.Int32
      description: "The exception code that defines the error."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)
  id: '#ctor(System.Int32,System.String,System.Exception)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(Int32,String,Exception)
  nameWithType: HttpException.HttpException(Int32,String,Exception)
  fullName: System.Web.HttpException.HttpException(Int32,String,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class using an HTTP response status code, an error message, and the <xref:System.Exception.InnerException*> property."
  remarks: "When handling exceptions, it can be useful to capture a series of related exceptions with the outer exception being thrown in response to an inner exception.       A reference to the inner exception that caused the outer exception is available from the <xref:System.Exception.InnerException%2A> property of the outer exception. This mechanism preserves the error information that is carried by earlier exceptions, including the original exceptions, while allowing you to create more meaningful outer exceptions. For more information, see <xref:System.Exception.InnerException%2A>."
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The `CheckNumber` method accepts a user-entered value and checks whether it is an integer. If the value is not an integer, an exception is thrown, and then a new <xref:System.Web.HttpException> object containing the HTTP response status code, the exception's message, and any inner exception is created. That exception is caught in the `Button_Click` event handler and the error message, error code, and inner exception are displayed.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpException_Constructor3#1](~/add/codesnippet/csharp/6bc30991-e249-4e7f-addb-_1.aspx)]\n [!code-vb[HttpException_Constructor3#1](~/add/codesnippet/visualbasic/6bc30991-e249-4e7f-addb-_1.aspx)]"
  syntax:
    content: public HttpException (int httpCode, string message, Exception innerException);
    parameters:
    - id: httpCode
      type: System.Int32
      description: "The HTTP response status code displayed on the client."
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
    - id: innerException
      type: System.Exception
      description: "The <xref:System.Exception.InnerException*>, if any, that threw the current exception."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)
  id: '#ctor(System.Int32,System.String,System.Int32)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(Int32,String,Int32)
  nameWithType: HttpException.HttpException(Int32,String,Int32)
  fullName: System.Web.HttpException.HttpException(Int32,String,Int32)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.HttpException&quot;></xref> class using an HTTP response status code, an error message, and an exception code."
  remarks: ''
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The user name and e-mail information are entered by the user in the provided text boxes. If any of the text boxes are left blank, an <xref:System.Web.HttpException> object is created and thrown. The error code of the <xref:System.Web.HttpException> is obtained by the <xref:System.Web.HttpException.GetHttpCode%2A> method and displayed on the Web page.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpException_Constructor#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_3_1.aspx)]\n [!code-vb[HttpException_Constructor#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_3_1.aspx)]"
  syntax:
    content: public HttpException (int httpCode, string message, int hr);
    parameters:
    - id: httpCode
      type: System.Int32
      description: "The HTTP response status code displayed on the client."
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
    - id: hr
      type: System.Int32
      description: "The exception code that defines the error."
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.CreateFromLastError(System.String)
  id: CreateFromLastError(System.String)
  parent: System.Web.HttpException
  langs:
  - csharp
  name: CreateFromLastError(String)
  nameWithType: HttpException.CreateFromLastError(String)
  fullName: System.Web.HttpException.CreateFromLastError(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Creates a new <xref href=&quot;System.Web.HttpException&quot;></xref> exception based on the error code that is returned from the Win32 API <xref uid=&quot;langword_csharp_GetLastError()&quot; name=&quot;GetLastError()&quot; href=&quot;&quot;></xref> method."
  syntax:
    content: public static System.Web.HttpException CreateFromLastError (string message);
    parameters:
    - id: message
      type: System.String
      description: "The error message displayed to the client when the exception is thrown."
    return:
      type: System.Web.HttpException
      description: "An <xref href=&quot;System.Web.HttpException&quot;></xref> based on the error code that is returned from a call to the Win32 API <xref uid=&quot;langword_csharp_GetLastError()&quot; name=&quot;GetLastError()&quot; href=&quot;&quot;></xref> method."
  overload: System.Web.HttpException.CreateFromLastError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.GetHtmlErrorMessage
  id: GetHtmlErrorMessage
  parent: System.Web.HttpException
  langs:
  - csharp
  name: GetHtmlErrorMessage()
  nameWithType: HttpException.GetHtmlErrorMessage()
  fullName: System.Web.HttpException.GetHtmlErrorMessage()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Gets the HTML error message to return to the client."
  syntax:
    content: public string GetHtmlErrorMessage ();
    parameters: []
    return:
      type: System.String
      description: "The HTML error message."
  overload: System.Web.HttpException.GetHtmlErrorMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.GetHttpCode
  id: GetHttpCode
  parent: System.Web.HttpException
  langs:
  - csharp
  name: GetHttpCode()
  nameWithType: HttpException.GetHttpCode()
  fullName: System.Web.HttpException.GetHttpCode()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Gets the HTTP response status code to return to the client."
  remarks: "If there is a non-zero HTTP code, it is returned. Otherwise, the <xref:System.Exception.InnerException%2A> code is returned. If neither an <xref:System.Exception.InnerException%2A> code nor a non-zero HTTP code is available, the HTTP response status code 500 is returned. For more information on HTTP response status codes, see the Status Code Definitions of the Hypertext Transfer Protocol - HTTP/1.1 on the World [Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125)."
  syntax:
    content: public int GetHttpCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A non-zero HTTP code representing the exception or the <xref:System.Exception.InnerException*> code; otherwise, HTTP response status code 500."
  overload: System.Web.HttpException.GetHttpCode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.HttpException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Gets information about the exception and adds it to the <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> object."
  remarks: "The GetObjectData method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> that holds the serialized object data about the exception being thrown."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "The <xref:System.Runtime.Serialization.StreamingContext> that holds the contextual information about the source or destination."
  overload: System.Web.HttpException.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.WebEventCode
  id: WebEventCode
  parent: System.Web.HttpException
  langs:
  - csharp
  name: WebEventCode
  nameWithType: HttpException.WebEventCode
  fullName: System.Web.HttpException.WebEventCode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Gets the event codes that are associated with the HTTP exception."
  syntax:
    content: public int WebEventCode { get; }
    return:
      type: System.Int32
      description: "An integer representing a Web event code."
  overload: System.Web.HttpException.WebEventCode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ExternalException
  isExternal: false
  name: System.Runtime.InteropServices.ExternalException
- uid: System.Web.HttpException.#ctor
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException()
  nameWithType: HttpException.HttpException()
  fullName: System.Web.HttpException.HttpException()
- uid: System.Web.HttpException.#ctor(System.String)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(String)
  nameWithType: HttpException.HttpException(String)
  fullName: System.Web.HttpException.HttpException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpException.#ctor(System.Int32,System.String)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(Int32,String)
  nameWithType: HttpException.HttpException(Int32,String)
  fullName: System.Web.HttpException.HttpException(Int32,String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(SerializationInfo,StreamingContext)
  nameWithType: HttpException.HttpException(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.HttpException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Web.HttpException.#ctor(System.String,System.Exception)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(String,Exception)
  nameWithType: HttpException.HttpException(String,Exception)
  fullName: System.Web.HttpException.HttpException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.HttpException.#ctor(System.String,System.Int32)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(String,Int32)
  nameWithType: HttpException.HttpException(String,Int32)
  fullName: System.Web.HttpException.HttpException(String,Int32)
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(Int32,String,Exception)
  nameWithType: HttpException.HttpException(Int32,String,Exception)
  fullName: System.Web.HttpException.HttpException(Int32,String,Exception)
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(Int32,String,Int32)
  nameWithType: HttpException.HttpException(Int32,String,Int32)
  fullName: System.Web.HttpException.HttpException(Int32,String,Int32)
- uid: System.Web.HttpException.CreateFromLastError(System.String)
  parent: System.Web.HttpException
  isExternal: false
  name: CreateFromLastError(String)
  nameWithType: HttpException.CreateFromLastError(String)
  fullName: System.Web.HttpException.CreateFromLastError(String)
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpException.GetHtmlErrorMessage
  parent: System.Web.HttpException
  isExternal: false
  name: GetHtmlErrorMessage()
  nameWithType: HttpException.GetHtmlErrorMessage()
  fullName: System.Web.HttpException.GetHtmlErrorMessage()
- uid: System.Web.HttpException.GetHttpCode
  parent: System.Web.HttpException
  isExternal: false
  name: GetHttpCode()
  nameWithType: HttpException.GetHttpCode()
  fullName: System.Web.HttpException.GetHttpCode()
- uid: System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.HttpException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Web.HttpException.WebEventCode
  parent: System.Web.HttpException
  isExternal: false
  name: WebEventCode
  nameWithType: HttpException.WebEventCode
  fullName: System.Web.HttpException.WebEventCode
- uid: System.Web.HttpException.#ctor*
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException
  nameWithType: HttpException.HttpException
- uid: System.Web.HttpException.CreateFromLastError*
  parent: System.Web.HttpException
  isExternal: false
  name: CreateFromLastError
  nameWithType: HttpException.CreateFromLastError
- uid: System.Web.HttpException.GetHtmlErrorMessage*
  parent: System.Web.HttpException
  isExternal: false
  name: GetHtmlErrorMessage
  nameWithType: HttpException.GetHtmlErrorMessage
- uid: System.Web.HttpException.GetHttpCode*
  parent: System.Web.HttpException
  isExternal: false
  name: GetHttpCode
  nameWithType: HttpException.GetHttpCode
- uid: System.Web.HttpException.GetObjectData*
  parent: System.Web.HttpException
  isExternal: false
  name: GetObjectData
  nameWithType: HttpException.GetObjectData
- uid: System.Web.HttpException.WebEventCode*
  parent: System.Web.HttpException
  isExternal: false
  name: WebEventCode
  nameWithType: HttpException.WebEventCode
