### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  id: X509Certificate2
  children:
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  langs:
  - csharp
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
  type: Class
  summary: "Represents an X.509 certificate."
  remarks: "The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the X509Certificate2 class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, &quot;[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).&quot;      > [!IMPORTANT] >  Starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.   >    >  For apps that target the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions, the X509Certificate2 class does not implement the <xref:System.IDisposable> interface and therefore does not have a `Dispose` method."
  example:
  - "The following example demonstrates how to use an X509Certificate2 object to encrypt and decrypt a file.  \n  \n [!code-vb[X509Certificate2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_1.vb)]\n [!code-cs[X509Certificate2#1](~/add/codesnippet/csharp/t-system.security.crypto_122_1.cs)]  \n  \n The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/t-system.security.crypto_122_2.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/t-system.security.crypto_122_2.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_2.vb)]"
  syntax:
    content: 'public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate'
  inheritance:
  - System.Object
  - System.Security.Cryptography.X509Certificates.X509Certificate
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.FormatDate(System.DateTime)
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString
  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class."
  remarks: "This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_122_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_122_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_122_1.cpp)]"
  syntax:
    content: public X509Certificate2 ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using information from a byte array."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array containing data from an X.509 certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using an unmanaged handle."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a handle for the Microsoft Cryptographic API certificate context, `PCCERT_CONTEXT`. Note that the immediate caller of this constructor requires unmanaged code permission.      > [!IMPORTANT] >  The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current `PCCERT_CONTEXT` structure from the <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> property, but it is valid only during the lifetime of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object."
  syntax:
    content: public X509Certificate2 (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "A pointer to a certificate context in unmanaged code. The C structure is called <xref uid=&quot;langword_csharp_PCCERT_CONTEXT&quot; name=&quot;PCCERT_CONTEXT&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;></xref> object."
  remarks: "This method creates a new instance of the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class using an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> object."
  syntax:
    content: public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "An <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;></xref> object."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a certificate file name."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  id: '#ctor(System.Byte[],System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a byte array and a password."
  remarks: "This constructor is used with PKCS12 (PFX) files that contain the certificate&quot;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array that contains data from an X.509 certificate."
    - id: password
      type: System.Security.SecureString
      description: "The password required to access the X.509 certificate data."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a byte array and a password."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate&quot;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array containing data from an X.509 certificate."
    - id: password
      type: System.String
      description: "The password required to access the X.509 certificate data."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using the specified serialization and stream context information."
  syntax:
    content: protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The serialization information required to deserialize the new <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Contextual information about the source of the stream to be deserialized."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  id: '#ctor(System.String,System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a certificate file name and a password."
  remarks: "This constructor is used with PKCS12 (PFX) files that contain the certificate&quot;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    - id: password
      type: System.Security.SecureString
      description: "The password required to access the X.509 certificate data."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a certificate file name and a password used to access the certificate."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate&quot;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (string fileName, string password);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    - id: password
      type: System.String
      description: "The password required to access the X.509 certificate data."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a byte array, a password, and a key storage flag."
  remarks: "This constructor is used with PKCS12 (PFX) files that contain the certificate&quot;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array that contains data from an X.509 certificate."
    - id: password
      type: System.Security.SecureString
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a byte array, a password, and a key storage flag."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate&quot;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `rawData`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array containing data from an X.509 certificate."
    - id: password
      type: System.String
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a certificate file name, a password, and a key storage flag."
  remarks: "If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    - id: password
      type: System.Security.SecureString
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class using a certificate file name, a password used to access the certificate, and a key storage flag."
  remarks: "This constructor creates a new <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a certificate file name, a password needed to access the certificate, and a key storage flag.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.       If you create an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> certificate by specifying a PKCS7 signed file store for `fileName`, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> is created for the certificate that signed the store rather than for any of the certificates within the store."
  syntax:
    content: public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    - id: password
      type: System.String
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "An error with the certificate occurs. For example:      -   The certificate file does not exist.      -   The certificate is invalid.      -   The certificate&quot;s password is incorrect."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  id: Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets or sets a value indicating that an X.509 certificate is archived."
  remarks: "This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.       In an X.509 store, archived certificates are not included in the returned <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> object unless the Archived property is set to `true`. No physical archival activity occurs when the Archived value is set or unset."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_26_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_26_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public bool Archived { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the certificate is archived, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the certificate is not archived."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  id: Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets a collection of <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Extension&quot;></xref> objects."
  remarks: "The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, &quot;[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).&quot; Common extensions include information regarding key usage (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), key identifiers (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), certificate policies, revocation information (CRL Distribution Point extension), and other uses."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_97_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_97_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_97_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
      description: "An <xref href=&quot;System.Security.Cryptography.X509Certificates.X509ExtensionCollection&quot;></xref> object."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  id: FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets or sets the associated alias for a certificate."
  remarks: "Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.       If no friendly name exists for the certificate, an empty string (&quot;&quot;) is returned."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_16_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_16_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_16_1.vb)]"
  syntax:
    content: public string FriendlyName { get; set; }
    return:
      type: System.String
      description: "The certificate&quot;s friendly name."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  id: GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Indicates the type of certificate contained in a byte array."
  remarks: "This method enables you to discover the type of certificate in a file."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/a34c0539-d23c-4bd1-9b29-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/a34c0539-d23c-4bd1-9b29-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/a34c0539-d23c-4bd1-9b29-_1.cpp)]"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array containing data from an X.509 certificate."
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "An <xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;></xref> object."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>rawData</code> has a zero length or is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  id: GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Indicates the type of certificate contained in a file."
  remarks: "This method enables you to discover the type of certificate in a file."
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "An <xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;></xref> object."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the subject and issuer names from a certificate."
  remarks: "This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/3126ffa7-3ffc-4612-bfb2-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/3126ffa7-3ffc-4612-bfb2-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/3126ffa7-3ffc-4612-bfb2-_1.cpp)]"
  syntax:
    content: public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);
    parameters:
    - id: nameType
      type: System.Security.Cryptography.X509Certificates.X509NameType
      description: "The <xref href=&quot;System.Security.Cryptography.X509Certificates.X509NameType&quot;></xref> value for the subject."
    - id: forIssuer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include the issuer name; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.String
      description: "The name of the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  id: HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets a value that indicates whether an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object contains a private key."
  syntax:
    content: public bool HasPrivateKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object contains a private key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate context is invalid."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  id: Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Populates an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object with data from a byte array."
  remarks: "This method can be used to take a raw byte array of an X.509 certificate and populate the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with its associated values.       Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used."
  syntax:
    content: public override void Import (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array containing data from an X.509 certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  id: Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Populates an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object with information from a certificate file."
  remarks: "This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with the certificate the file contains.       This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used."
  syntax:
    content: public override void Import (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Populates an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object using data from a byte array, a password, and a key storage flag."
  remarks: "You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."
  syntax:
    content: public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array that contains data from an X.509 certificate."
    - id: password
      type: System.Security.SecureString
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Populates an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object using data from a byte array, a password, and flags for determining how to import the private key."
  remarks: "This method can be used to populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object using a password for the certificate represented by the byte array. The <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value can be used to control where and how to import the private key.       This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/af855297-61a6-47ed-8dcb-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/af855297-61a6-47ed-8dcb-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/af855297-61a6-47ed-8dcb-_1.vb)]"
  syntax:
    content: public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "A byte array containing data from an X.509 certificate."
    - id: password
      type: System.String
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Populates an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object with information from a certificate file, a password, and a key storage flag."
  remarks: '**Security Note** Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.'
  syntax:
    content: public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    - id: password
      type: System.Security.SecureString
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Populates an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object with information from a certificate file, a password, and a <xref href=&quot;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&quot;></xref> value."
  remarks: "This method can be used populate an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object with information from a certificate file, a password, and an <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> value.      > [!IMPORTANT] >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe."
  syntax:
    content: public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of a certificate file."
    - id: password
      type: System.String
      description: "The password required to access the X.509 certificate data."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "A bitwise combination of the enumeration values that control where and how to import the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  id: IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the distinguished name of the certificate issuer."
  remarks: "This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> method.       The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, &quot;CN=MyName, OU=MyOrgUnit, C=US&quot;)."
  example:
  - "The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_20_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_20_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_20_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "An <xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;></xref> object that contains the name of the certificate issuer."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate context is invalid."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  id: NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the date in local time after which a certificate is no longer valid."
  remarks: "This property indicates an expiration date on which the certificate becomes invalid."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_116_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_116_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_116_1.vb)]"
  syntax:
    content: public DateTime NotAfter { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> object that represents the expiration date for the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  id: NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the date in local time on which a certificate becomes valid."
  remarks: "This property indicates the date on which the certificate becomes valid."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_85_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_85_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_85_1.vb)]"
  syntax:
    content: public DateTime NotBefore { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> object that represents the effective date of the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  id: PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets or sets the <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> object that represents the private key associated with a certificate."
  remarks: "Currently this property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object. If no private key is associated with the certificate, it returns `null`.      > [!WARNING] >  If you set this property to `null` or to another key without first deleting it, a private key file is left on the disk.       To properly delete the private key associated with this property, set `PersistKeyInCsp` to `false`, and then call the <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> method."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_115_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_115_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_115_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "An <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> object, which is either an RSA or DSA cryptographic service provider."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The key value is not an RSA or DSA key, or the key is unreadable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The value being set for this property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The key algorithm for this private key is not supported."
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "The X.509 keys do not match."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The cryptographic service provider key is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets a PublicKey object associated with a certificate."
  remarks: "This property returns a PublicKey object, which contains the object identifier (<xref:System.Security.Cryptography.Oid>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.       You can also obtain the key as an <xref:System.Security.Cryptography.AsymmetricAlgorithm> object by referencing the PublicKey property. This property supports only RSA or DSA keys, so it returns either an <xref:System.Security.Cryptography.RSACryptoServiceProvider> or a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object that represents the public key."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_120_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_120_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_120_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.PublicKey
      description: "A PublicKey object."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The key value is not an RSA or DSA key, or the key is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  id: RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the raw data of a certificate."
  remarks: ''
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_59_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_59_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_59_1.cpp)]"
  syntax:
    content: public byte[] RawData { get; }
    return:
      type: System.Byte[]
      description: "The raw data of the certificate as a byte array."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  id: Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Resets the state of an <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> object."
  remarks: "This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate."
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  id: SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the serial number of a certificate."
  remarks: "The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA)."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_114_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_114_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_114_1.vb)]"
  syntax:
    content: public string SerialNumber { get; }
    return:
      type: System.String
      description: "The serial number of the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the algorithm used to create the signature of a certificate."
  remarks: "The object identifier (<xref:System.Security.Cryptography.Oid>) identifies the type of signature algorithm used by the certificate."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/6cab3ad3-94fb-4ecd-9a6c-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/6cab3ad3-94fb-4ecd-9a6c-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/6cab3ad3-94fb-4ecd-9a6c-_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.Oid SignatureAlgorithm { get; }
    return:
      type: System.Security.Cryptography.Oid
      description: "Returns the object identifier (<xref href=&quot;System.Security.Cryptography.Oid&quot;></xref>) of the signature algorithm."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  id: SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the subject distinguished name from a certificate."
  remarks: "The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, &quot;CN=MyName, OU=MyOrgUnit, C=US&quot;."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_80_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_80_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_80_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "An <xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;></xref> object that represents the name of the certificate subject."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate context is invalid."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  id: Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the thumbprint of a certificate."
  remarks: "The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_51_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_51_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_51_1.vb)]"
  syntax:
    content: public string Thumbprint { get; }
    return:
      type: System.String
      description: "The thumbprint of the certificate."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  id: ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Displays an X.509 certificate in text format."
  remarks: "As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information about the content or use the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> method to obtain information about the certificate.       This method displays the certificate in text format."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/m-system.security.crypto_81_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/m-system.security.crypto_81_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/m-system.security.crypto_81_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "The certificate information."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Displays an X.509 certificate in text format."
  remarks: "As with all `ToString` methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to obtain precise information.       This method displays the certificate in text format. If the `verbose` parameter is set to `true`, the text display includes the public key, private key, and extensions. If `verbose` is set to `false`, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information."
  example:
  - "The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/38d69126-bcaf-4cee-a89b-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/38d69126-bcaf-4cee-a89b-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/38d69126-bcaf-4cee-a89b-_1.vb)]"
  syntax:
    content: public override string ToString (bool verbose);
    parameters:
    - id: verbose
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to display the public key, private key, extensions, and so forth; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to display information that is similar to the <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> class, including thumbprint, serial number, subject and issuer names, and so on."
    return:
      type: System.String
      description: "The certificate information."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  id: Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Performs a X.509 chain validation using basic validation policy."
  remarks: "This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <xref:System.Security.Cryptography.X509Certificates.X509Chain> object.       Note that the default chaining engine can be overridden using the <xref:System.Security.Cryptography.CryptoConfig> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, &quot;[Certificate and Certificate Revocation List (CRL) Profile](http://go.microsoft.com/fwlink/?LinkId=45286).&quot;"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_98_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_98_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public bool Verify ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the validation succeeds; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the validation fails."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  id: Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Gets the X.509 format version of a certificate."
  remarks: "There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, &quot;3&quot; is returned for a version 3 certificate."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_37_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_37_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_37_1.vb)]"
  syntax:
    content: public int Version { get; }
    return:
      type: System.Int32
      description: "The certificate format."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The certificate is unreadable."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509KeyStorageFlags
  nameWithType: X509KeyStorageFlags
  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ExtensionCollection
  nameWithType: X509ExtensionCollection
  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509ContentType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ContentType
  nameWithType: X509ContentType
  fullName: System.Security.Cryptography.X509Certificates.X509ContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509NameType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509NameType
  nameWithType: X509NameType
  fullName: System.Security.Cryptography.X509Certificates.X509NameType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X500DistinguishedName
  nameWithType: X500DistinguishedName
  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.PublicKey
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: PublicKey
  nameWithType: PublicKey
  fullName: System.Security.Cryptography.X509Certificates.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.Oid
  parent: System.Security.Cryptography
  isExternal: false
  name: Oid
  nameWithType: Oid
  fullName: System.Security.Cryptography.Oid
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType
  nameWithType: X509Certificate2.GetCertContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo
  nameWithType: X509Certificate2.GetNameInfo
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import
  nameWithType: X509Certificate2.Import
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset
  nameWithType: X509Certificate2.Reset
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString
  nameWithType: X509Certificate2.ToString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify
  nameWithType: X509Certificate2.Verify
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
