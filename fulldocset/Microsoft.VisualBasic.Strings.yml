### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "O <xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref> módulo contém os procedimentos utilizados para executar operações de cadeia."
  remarks: "Este módulo suporta as palavras-chave de linguagem do Visual Basic e membros de biblioteca de tempo de execução que manipular cadeias."
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  remarks: "`Asc`Devolve o *code ponto*, ou o código de carateres para o carácter de entrada. Isto pode ser 0 e 255 carateres de byte único conjunto (SBCS) valores e -32768 e 32767 carateres de byte duplo (DBCS) do conjunto valores.       `AscW`Devolve o ponto de código Unicode para o carácter de entrada. Isto pode ser 0 e 65535. O valor devolvido é independente das definições de idioma e o código de página para o thread actual.      > [!NOTE] > O `AscB` função das versões anteriores do Visual Basic devolve um código para um byte em vez de um caráter. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic 2005 estão em Unicode, e `AscB` já não é suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caráter da cadeia é utilizada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém carateres, uma <xref:System.ArgumentException>erro ocorrer.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  remarks: "`Asc`Devolve o *code ponto*, ou o código de carateres para o carácter de entrada. Isto pode ser 0 e 255 carateres de byte único conjunto (SBCS) valores e -32768 e 32767 carateres de byte duplo (DBCS) do conjunto valores.       `AscW`Devolve o ponto de código Unicode para o carácter de entrada. Isto pode ser 0 e 65535. O valor devolvido é independente das definições de idioma e o código de página para o thread actual.      > [!NOTE] > O `AscB` função das versões anteriores do Visual Basic devolve um código para um byte em vez de um caráter. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic 2005 estão em Unicode, e `AscB` já não é suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caráter da cadeia é utilizada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém carateres, uma <xref:System.ArgumentException>erro ocorrer.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  remarks: "`Asc`Devolve o *code ponto*, ou o código de carateres para o carácter de entrada. Isto pode ser 0 e 255 carateres de byte único conjunto (SBCS) valores e -32768 e 32767 carateres de byte duplo (DBCS) do conjunto valores.       `AscW`Devolve o ponto de código Unicode para o carácter de entrada. Isto pode ser 0 e 65535. O valor devolvido é independente das definições de idioma e o código de página para o thread actual.      > [!NOTE] > O `AscB` função das versões anteriores do Visual Basic devolve um código para um byte em vez de um caráter. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic 2005 estão em Unicode, e `AscB` já não é suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caráter da cadeia é utilizada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém carateres, uma <xref:System.ArgumentException>erro ocorrer.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  remarks: "`Asc`Devolve o *code ponto*, ou o código de carateres para o carácter de entrada. Isto pode ser 0 e 255 carateres de byte único conjunto (SBCS) valores e -32768 e 32767 carateres de byte duplo (DBCS) do conjunto valores.       `AscW`Devolve o ponto de código Unicode para o carácter de entrada. Isto pode ser 0 e 65535. O valor devolvido é independente das definições de idioma e o código de página para o thread actual.      > [!NOTE] > O `AscB` função das versões anteriores do Visual Basic devolve um código para um byte em vez de um caráter. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic 2005 estão em Unicode, e `AscB` já não é suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caráter da cadeia é utilizada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém carateres, uma <xref:System.ArgumentException>erro ocorrer.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> representando o código de carateres correspondente a um caráter."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve o caráter associado ao código de carateres especificado."
  remarks: "O intervalo de assimétrico aceites para `CharCode` compensates para as diferenças de armazenamento entre o `Short` e `Integer`. Por exemplo, é-29183 um `Short` mas +36353 é um `Integer`. Isto também facilita a compatibilidade com o Visual Basic 6.0.       `Chr`utiliza o <xref:System.Text.Encoding>classe no <xref:System.Text?displayProperty=fullName>definir o espaço de nomes para determinar se o thread actual esteja a utilizar um conjunto de carateres de byte único (SBCS) ou um caráter de byte duplo (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Em seguida, demora `CharCode` como um código de ponto no conjunto adequado. O intervalo pode ser 0 e 255 caracteres SBCS e -32768 a 65535 caracteres DBCS.       O valor devolvido depende a página de código para o thread atual, o que faz a <xref:System.Globalization.TextInfo.ANSICodePage%2A>propriedade do <xref:System.Globalization.TextInfo>classe no <xref:System.Globalization>espaço de nomes.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A>especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`demora `CharCode` como um Unicode de ponto de código. O intervalo é independente das definições de idioma e o código de página para o thread actual. Valores entre -32768 através de-1 são tratados da mesma, como os valores no intervalo +32768 através de +65535.       Números de 0 e 31 são os mesmos que nonprintable padrão por códigos ASCII. Por exemplo, `Chr(10)` devolve o caráter de feed de uma linha.      > [!NOTE] > O `ChrB` função em versões anteriores do Visual Basic devolve um byte único. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` já não é suportada."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Necessário. Um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> expressão que representa o `code point`, ou o código de carateres para o carácter."
    return:
      type: System.Char
      description: "Devolve o caráter associado ao código de carateres especificado."
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve o caráter associado ao código de carateres especificado."
  remarks: "O intervalo de assimétrico aceites para `CharCode` compensates para as diferenças de armazenamento entre o `Short` e `Integer`. Por exemplo, é-29183 um `Short` mas +36353 é um `Integer`. Isto também facilita a compatibilidade com o Visual Basic 6.0.       `Chr`utiliza o <xref:System.Text.Encoding>classe no <xref:System.Text?displayProperty=fullName>definir o espaço de nomes para determinar se o thread actual esteja a utilizar um conjunto de carateres de byte único (SBCS) ou um caráter de byte duplo (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Em seguida, demora `CharCode` como um código de ponto no conjunto adequado. O intervalo pode ser 0 e 255 caracteres SBCS e -32768 a 65535 caracteres DBCS.       O valor devolvido depende a página de código para o thread atual, o que faz a <xref:System.Globalization.TextInfo.ANSICodePage%2A>propriedade do <xref:System.Globalization.TextInfo>classe no <xref:System.Globalization>espaço de nomes.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A>especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`demora `CharCode` como um Unicode de ponto de código. O intervalo é independente das definições de idioma e o código de página para o thread actual. Valores entre -32768 através de-1 são tratados da mesma, como os valores no intervalo +32768 através de +65535.       Números de 0 e 31 são os mesmos que nonprintable padrão por códigos ASCII. Por exemplo, `Chr(10)` devolve o caráter de feed de uma linha.      > [!NOTE] > O `ChrB` função em versões anteriores do Visual Basic devolve um byte único. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` já não é suportada."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Necessário. Um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> expressão que representa o `code point`, ou o código de carateres para o carácter."
    return:
      type: System.Char
      description: "Devolve o caráter associado ao código de carateres especificado."
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma matriz baseada em zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base nos critérios de filtro especificados."
  remarks: "Se não existem correspondências de `Match` são encontrados `Source`, a `Filter` função devolve uma matriz vazia. Ocorre um erro se `Source` está definido como `Nothing` ou não é uma matriz unidimensional.       A matriz devolvida pelo `Filter` função contém apenas elementos suficientes para conter o número de itens correspondentes.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `CompareMethod.Binary`| Efetua uma comparação binária |   | `CompareMethod.Text`| Efetua uma comparação textual |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "Necessário. Matriz unidimensional de cadeias para ser procurado."
    - id: Match
      type: System.String
      description: "Necessário. Cadeia a procurar."
    - id: Include
      type: System.Boolean
      description: "Opcional. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>valor que indica se a devolver subcadeias que incluem ou excluir `Match`. Se `Include` é <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função devolve o subconjunto da matriz que contenha `Match` como uma subcadeia. Se `Include` é <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função devolve o subconjunto da matriz que não contenha `Match` como uma subcadeia."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação de cadeias para utilizar. Consulte &quot;Definições&quot; para valores."
    return:
      type: System.String[]
      description: "Devolve uma matriz baseada em zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base nos critérios de filtro especificados."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não é uma matriz unidimensional."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma matriz baseada em zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base nos critérios de filtro especificados."
  remarks: "Se não existem correspondências de `Match` são encontrados `Source`, a `Filter` função devolve uma matriz vazia. Ocorre um erro se `Source` está definido como `Nothing` ou não é uma matriz unidimensional.       A matriz devolvida pelo `Filter` função contém apenas elementos suficientes para conter o número de itens correspondentes.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `CompareMethod.Binary`| Efetua uma comparação binária |   | `CompareMethod.Text`| Efetua uma comparação textual |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "Necessário. Matriz unidimensional de cadeias para ser procurado."
    - id: Match
      type: System.String
      description: "Necessário. Cadeia a procurar."
    - id: Include
      type: System.Boolean
      description: "Opcional. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>valor que indica se a devolver subcadeias que incluem ou excluir `Match`. Se `Include` é <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função devolve o subconjunto da matriz que contenha `Match` como uma subcadeia. Se `Include` é <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função devolve o subconjunto da matriz que não contenha `Match` como uma subcadeia."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação de cadeias para utilizar. Consulte &quot;Definições&quot; para valores."
    return:
      type: System.String[]
      description: "Devolve uma matriz baseada em zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base nos critérios de filtro especificados."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não é uma matriz unidimensional."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia formatada de acordo com as instruções contidas num formato <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. Uma expressão válida."
    - id: Style
      type: System.String
      description: "Opcional. Um formato válido de nomeado ou definido pelo utilizador <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Devolve uma cadeia formatada de acordo com as instruções contidas num formato <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma expressão formatada como um valor de moeda utilizando o símbolo de moeda definido no painel de controlo de sistema."
  remarks: "Quando um ou mais argumentos opcionais são for omitidos, valores de definições regionais correspondentes do computador são utilizados em vez disso.       A posição do símbolo de moeda relativo ao valor de moeda é determinada pelas definições regionais do sistema.      > [!NOTE] > Provém de todas as informações de definições de idioma da aplicação. Por predefinição, que será a região definida no painel de controlo. No entanto, pode ser alterado através de programação utilizando o .NET Framework, exceto zero à esquerda, o que vêm de `Number` separador.       O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos efetuar os seguintes valores de enumeração TriState.      |||   |-|-|   | Valor | Descrição |   | `TriState.True`| VERDADEIRO |   | `TriState.False`| FALSO |   | `TriState.UseDefault`| Definições regionais do computador |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. Expressão a ser formatado."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcional. Valor numérico que indica quantos locais são apresentadas para a direita da vírgula decimal. Valor predefinido é –1, que indica que são utilizadas as definições regionais do computador."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumeração que indica se é ou não um zero à esquerda é apresentada para valores fracional. Consulte &quot;Comentários&quot; para valores."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumeração que indica se deve ou não colocar os valores negativos dentro de parênteses. Consulte &quot;Comentários&quot; para valores."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumeração que indica se é ou não os números são agrupados utilizando o delimitador de grupo especificado nas definições regionais do computador. Consulte &quot;Comentários&quot; para valores."
    return:
      type: System.String
      description: "Devolve uma expressão formatada como um valor de moeda utilizando o símbolo de moeda definido no painel de controlo de sistema."
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número de dígitos após a vírgula decimal é superior a 99."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo não é um valor numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma expressão de cadeia que representa um valor de data/hora."
  remarks: "O `Date` tipo de dados sempre contém informações de data e hora. Para efeitos de conversão de tipo, o Visual Basic considera 1/1/1 (1 de Janeiro do ano 1) para ser um valor neutro para a data e 00:00:00 (meia-noite) para ser um valor independente durante o período de tempo. Se formatar um `Date` valor como uma cadeia de data/hora, `FormatDateTime` não inclui independentes valores na cadeia resultante. Por exemplo, se converter #1/1/0001 e 9:30:&#00; para uma cadeia, o resultado é &quot;09:30:00: 00&quot;; as informações de data são suprimidas. No entanto, as informações de data ainda estão presentes no original `Date` valor e podem ser recuperados com as funções, tais como `DatePart`.      > [!NOTE] > Se passa o `Expression` argumento como uma `String` literal, `FormatDateTime` interpreta-lo de acordo com o <xref:System.Globalization.CultureInfo.CurrentCulture%2A>definição da aplicação.</xref:System.Globalization.CultureInfo.CurrentCulture%2A> No entanto, se passa-o como um `Date` literal, utilize o formato #mm/dd/aaaa # porque `FormatDateTime` interpreta sempre um `Date` literal, de acordo com a cultura inglês (EUA). Isto é necessário uma vez que, se uma aplicação for desenvolvida e coded utilizando `Date` literais a partir de um idioma, mas, em seguida, é executada numa plataforma com um idioma diferente, o `Date` literais foi possível analisar incorretamente.       O `NamedFormat` argument tem as seguintes definições.      |||   |-|-|   | Constante | Descrição |   | `DateFormat.GeneralDate`| Apresente uma data e/ou hora. Apresenta uma peça de data como uma data abreviada. Se existir uma parte do tempo, apresentá-lo como muito tempo. Se estiver presente, ambas as peças apresentam. |   | `DateFormat.LongDate`| Apresentar uma data utilizando o formato de data por extenso especificado nas definições regionais do seu computador. |   | `DateFormat.ShortDate`| Apresentar uma data utilizando o formato de data abreviada especificado nas definições regionais do seu computador. |   | `DateFormat.LongTime`| Apresentar uma vez utilizando o formato de hora especificado nas definições regionais do seu computador. |   | `DateFormat.ShortTime`| Apresentar uma vez utilizando o formato de 24 horas (hh: mm). |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Necessário. <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>expressão a ser formatado."
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "Opcional. Valor numérico que indica o formato de data/hora utilizado. Se for omitido, <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref> é utilizado."
    return:
      type: System.String
      description: "Devolve uma expressão de cadeia que representa um valor de data/hora."
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>definição não é válida."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma expressão formatada como um número."
  remarks: "Quando um ou mais argumentos opcionais estão omitidos os valores para os argumentos omitidos são fornecidos pelas definições de região.      > [!NOTE] > Provém de todas as informações de definições de idioma da aplicação. Por predefinição, que será a região definida no painel de controlo. No entanto, se pode ser alterada através de programação utilizando o .NET Framework.       O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos tem as seguintes definições.      |||   |-|-|   | Constante | Descrição |   | `TriState.True`| VERDADEIRO |   | `TriState.False`| FALSO |   | `TriState.UseDefault`| Definições regionais do computador |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. Expressão a ser formatado."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcional. Valor numérico que indica quantos locais são apresentadas para a direita da vírgula decimal. O valor predefinido é –1, que indica que são utilizadas as definições regionais do computador."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se um 0 à esquerda é apresentada para valores fracional. Consulte &quot;Definições&quot; para valores."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se deve colocar os valores negativos dentro de parênteses. Consulte &quot;Definições&quot; para valores."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se ou não os números são agrupados utilizando o delimitador de grupo especificado nas definições de região. Consulte &quot;Definições&quot; para valores."
    return:
      type: System.String
      description: "Devolve uma expressão formatada como um número."
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo não é um valor numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma expressão formatada como uma percentagem (ou seja, multiplicada por 100) com um caráter % final."
  remarks: "Quando um ou mais argumentos opcionais são for omitidos, os valores para os argumentos omitidos são fornecidos pelas definições de região.      > [!NOTE] > Provém de todas as informações de definições de idioma da aplicação. Por predefinição, que será a região definida no painel de controlo. No entanto, se pode ser alterada através de programação utilizando o .NET Framework.       O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos tem as seguintes definições.      |||   |-|-|   | Constante | Descrição |   | `TriState.True`| VERDADEIRO |   | `TriState.False`| FALSO |   | `TriState.Default`| Definições regionais do computador |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. Expressão a ser formatado."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcional. Valor numérico indicar quantos coloca à direita da vírgula decimal são apresentados. Valor predefinido é –1, que indica que as definições de idioma são utilizadas."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se é ou não um zero à esquerda para valores fracional apresenta. Consulte &quot;Definições&quot; para valores."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se deve ou não colocar os valores negativos dentro de parênteses. Consulte &quot;Definições&quot; para valores."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se ou não os números são agrupados utilizando o delimitador de grupo especificado nas definições de região. Consulte &quot;Definições&quot; para valores."
    return:
      type: System.String
      description: "Devolve uma expressão formatada como uma percentagem (ou seja, multiplicada por 100) com um caráter % final."
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo não é um valor numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> valor representando o caráter do índice especificado na cadeia fornecida."
  remarks: "Se `Index` é inferior a 1 ou maior do que o índice do último caráter no `str`, um `ArgumentException` é emitida."
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    - id: Index
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O índice (base&1;) do caráter em `str` a ser devolvido."
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>valor que representa o caráter do índice especificado na cadeia fornecida."
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <code>Index</code> &lt; 1, ou <code>Index</code> é superior ao índice do último caráter de <code>str</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro especificando a posição inicial da primeira ocorrência de uma cadeia dentro de outra."
  remarks: "Normalmente, o `InStr` função é utilizada durante a análise de cadeias.      > [!NOTE] > O `InStrB` função em versões anteriores do Visual Basic devolve um número de bytes em vez de uma posição de caráter. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic 2005 estão em Unicode, e `InStrB` já não é suportada.       O `Compare` argumento definições são: |||   |-|-|-|   | Constante | Valor | Descrição |   | `Binary`|0| Efetua uma comparação binária |   | `Text`|1| Efetua uma comparação de texto |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a ser procurado."
    - id: String2
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão sought."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Especifica o tipo de comparação de cadeias. Se `Compare` for omitido, o <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> definição determina o tipo de comparação."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> InStr devolve       </td></tr><tr><td>           <code>String1</code>é o comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>é o comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> A posição inicial para a pesquisa, o qual está predefinida para a primeira posição de caráter.       </td></tr><tr><td>           <code>String2</code>Não foi encontrado       </td><td> 0       </td></tr><tr><td>           <code>String2</code>encontra-se no<code>String1</code></td><td> Posição em que começa a correspondência       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro especificando a posição inicial da primeira ocorrência de uma cadeia dentro de outra."
  remarks: "Normalmente, o `InStr` função é utilizada durante a análise de cadeias.      > [!NOTE] > O `InStrB` função em versões anteriores do Visual Basic devolve um número de bytes em vez de uma posição de caráter. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic 2005 estão em Unicode, e `InStrB` já não é suportada.       O `Compare` argumento definições são: |||   |-|-|-|   | Constante | Valor | Descrição |   | `Binary`|0| Efetua uma comparação binária |   | `Text`|1| Efetua uma comparação de texto |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "Opcional. Expressão numérica, que define a posição inicial para cada pesquisa. Se for omitido, pesquisa começa com a primeira posição de caráter. O índice de início é baseada em 1."
    - id: String1
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a ser procurado."
    - id: String2
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão sought."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Especifica o tipo de comparação de cadeias. Se `Compare` for omitido, o <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> definição determina o tipo de comparação."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> InStr devolve       </td></tr><tr><td>           <code>String1</code>é o comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>é o comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>Não foi encontrado       </td><td> 0       </td></tr><tr><td>           <code>String2</code>encontra-se no<code>String1</code></td><td> Posição em que começa a correspondência       </td></tr><tr><td>           <code>Start</code>&gt; comprimento de<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve a posição da primeira ocorrência de uma cadeia dentro de outra, começando pelo lado direito da cadeia."
  remarks: "Tenha em atenção que a sintaxe para o `InStrRev` função não é o mesmo que a sintaxe para o `InStr` função.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `Binary`| Efetua uma comparação binária. |   | `Text`| Efetua uma comparação textual. |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "Necessário. Expressão de cadeia que está a ser procurado."
    - id: StringMatch
      type: System.String
      description: "Necessário. Expressão de cadeia que está a ser procurado."
    - id: Start
      type: System.Int32
      description: "Opcional. Expressão numérica definir a posição inicial baseada num de cada pesquisa, começando pelo lado esquerdo da cadeia. Se `Start` for omitido, –1 é utilizado, o que significa que a pesquisa começa com a última posição do caráter. Em seguida, procede de pesquisa da direita para a esquerda."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação para utilizar durante a avaliação de subcadeias. Se for omitido, é efetuada uma comparação binária. Consulte as definições para os valores."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> Devolve InStrRev       </td></tr><tr><td>           <code>StringCheck</code>é o comprimento de zero       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>é o comprimento de zero       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>Não foi encontrado       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>encontra-se no<code>StringCheck</code></td><td> Posição em que a primeira correspondência for encontrada, começando pelo lado direito da cadeia.       </td></tr><tr><td>           <code>Start</code>é superior ao comprimento de<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia criada ao associar um número de subcadeias contidas numa matriz."
  remarks: "Existe uma paridade entre o `Join` e `Split` funções. O `Join` função assume uma matriz de cadeias e associa-los através de uma cadeia de delimitador para devolver uma cadeia única. O `Split` função assume uma cadeia e separa o delimitador, para devolver uma matriz de cadeias. No entanto, uma principal diferença é que `Join` pode concatenar cadeias com qualquer cadeia de delimitador `Split` só pode separar cadeias utilizando um único caráter delimitador."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "Necessário. Matriz unidimensional contendo subcadeias sejam associados."
    - id: Delimiter
      type: System.String
      description: "Opcional. Qualquer cadeia, utilizada para separar subcadeias na cadeia devolvida. Se for omitido, o caráter de espaço (&quot;&quot;) é utilizado. Se `Delimiter` é uma cadeia de comprimento zero (&quot;&quot;) ou <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, todos os itens na lista são concatenados com nenhuma delimitadores."
    return:
      type: System.String
      description: "Devolve uma cadeia criada ao associar um número de subcadeias contidas numa matriz."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>Não é um dimensional."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia criada ao associar um número de subcadeias contidas numa matriz."
  remarks: "Existe uma paridade entre o `Join` e `Split` funções. O `Join` função assume uma matriz de cadeias e associa-los através de uma cadeia de delimitador para devolver uma cadeia única. O `Split` função assume uma cadeia e separa o delimitador, para devolver uma matriz de cadeias. No entanto, uma principal diferença é que `Join` pode concatenar cadeias com qualquer cadeia de delimitador `Split` só pode separar cadeias utilizando um único caráter delimitador."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "Necessário. Matriz unidimensional contendo subcadeias sejam associados."
    - id: Delimiter
      type: System.String
      description: "Opcional. Qualquer cadeia, utilizada para separar subcadeias na cadeia devolvida. Se for omitido, o caráter de espaço (&quot;&quot;) é utilizado. Se `Delimiter` é uma cadeia de comprimento zero (&quot;&quot;) ou <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, todos os itens na lista são concatenados com nenhuma delimitadores."
    return:
      type: System.String
      description: "Devolve uma cadeia criada ao associar um número de subcadeias contidas numa matriz."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>Não é um dimensional."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou caráter convertida em minúscula."
  remarks: "Apenas letras maiúsculas são convertidas para minúsculas; todas as letras minúsculas e carateres de nonletter permanecem inalterados.       Esta função utiliza informações de cultura da aplicação quando manipular a cadeia de modo a que as alterações às maiúsculas e são adequadas para a região na qual a aplicação está a ser utilizada.      > [!IMPORTANT] > Se a aplicação toma decisões de segurança com base no resultado de uma operação de alteração de maiúsculas e minúsculas ou comparação, em seguida, deve utilizar a operação de <xref:System.String.Compare%2A?displayProperty=fullName>método e passar <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.Char
      description: "Devolve uma cadeia ou caráter convertida em minúscula."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou caráter convertida em minúscula."
  remarks: "Apenas letras maiúsculas são convertidas para minúsculas; todas as letras minúsculas e carateres de nonletter permanecem inalterados.       Esta função utiliza informações de cultura da aplicação quando manipular a cadeia de modo a que as alterações às maiúsculas e são adequadas para a região na qual a aplicação está a ser utilizada.      > [!IMPORTANT] > Se a aplicação toma decisões de segurança com base no resultado de uma operação de alteração de maiúsculas e minúsculas ou comparação, em seguida, deve utilizar a operação de <xref:System.String.Compare%2A?displayProperty=fullName>método e passar <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Devolve uma cadeia ou caráter convertida em minúscula."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia contendo um número especificado de carateres do lado esquerdo de uma cadeia."
  remarks: "Para determinar o número de carateres no `str`, utilize o `Len` função. Se utilizar uma aplicação do Windows Forms ou qualquer outra classe que tem um `Left` propriedade, tem qualificar completamente a função com `Microsoft.VisualBasic.Left`.      > [!NOTE] > O `LeftB` função em versões anteriores do Visual Basic devolve uma cadeia de bytes em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LeftB` já não é suportada."
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a partir da qual são devolvidos os carateres mais à esquerda."
    - id: Length
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Expressão numérica que indica o número de carateres a devolver. Se for 0, uma cadeia de comprimento zero (&quot;&quot;) é devolvido. Se maior que ou igual ao número de carateres de `str`, é devolvida a cadeia completa."
    return:
      type: System.String
      description: "Devolve uma cadeia contendo um número especificado de carateres do lado esquerdo de uma cadeia."
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  remarks: "Com tipos definidos pelo utilizador e `Object` variáveis, a `Len` função devolve o tamanho, tal como será escrito no ficheiro pelo `FilePut` função. Se um `Object` contém um `String`, irá devolver o comprimento da cadeia. Se um `Object` contém qualquer outro tipo, irá devolver o tamanho do objeto que será escrito no ficheiro pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado aos campos de cadeia de objectos para indicar o tamanho da cadeia, em bytes, quando escrito no disco. O `Len` funcionar utiliza o `VBFixedString` atributo, se estiver disponível, ao determinar o tamanho do `Object` variáveis.      > [!NOTE] > O `Len` função não pode ser capaz de determinar o número real de bytes de armazenamento, é necessário quando utilizado com cadeias de comprimento variável em tipos de dados definidos pelo utilizador.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic devolve o número de bytes uma cadeia em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `LenB` já não é suportada.      ## Notas do Programador de dispositivos de smart de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, irá devolver o comprimento do `String`. Se um parâmetro for um valor nulo `Object` referência, a função devolve zero. Se um `Object` contém qualquer outro tipo, é emitida uma exceção."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão ou variável de nome. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, a <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função devolve o tamanho, tal como será escrito no ficheiro pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Devolve um número inteiro contendo o número de carateres existentes numa cadeia ou o número de bytes necessário para armazenar uma variável nominal."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia alinhada à esquerda contendo a cadeia especificada ajustada ao comprimento especificado."
  remarks: "Se a cadeia especificada for superior ao comprimento especificado, a cadeia devolvida é shortened ao comprimento especificado. Se a cadeia especificada for mais curta do que o comprimento especificado, os espaços são adicionados a extremidade direita da cadeia devolvida para produzir o comprimento adequado."
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão. Nome da variável de cadeia."
    - id: Length
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Comprimento da cadeia devolvido."
    return:
      type: System.String
      description: "Devolve uma cadeia alinhada à esquerda contendo a cadeia especificada ajustada ao comprimento especificado."
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia contendo uma cópia de uma cadeia especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), não à direita espaços (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não esquerda ou à direita espaços (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "O `LTrim`, `RTrim`, e `Trim` funções remover espaços as extremidades de cadeias."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Devolve uma cadeia contendo uma cópia de uma cadeia especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), não à direita espaços (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não esquerda ou à direita espaços (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia que contém todos os carateres a partir de uma posição especificada, numa cadeia."
  remarks: "Para determinar o número de carateres no `str`, utilize o `Len` função.       Visual Basic tem um `Mid` função e um `Mid` instrução. Estes elementos ambos operam num número especificado de carateres existentes numa cadeia, mas o `Mid` função devolve os carateres enquanto o `Mid` instrução substitui os carateres. Para obter mais informações, consulte [instrução Mid](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > O `MidB` função em versões anteriores do Visual Basic devolve uma cadeia de bytes em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic estão em Unicode, e `MidB` já não é suportada."
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a partir da qual são devolvidos carateres."
    - id: Start
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Posição inicial de carateres a devolver. Se `Start` é superior ao número de carateres num `str`, a <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> função devolve uma cadeia de comprimento zero (&quot;&quot;). `Start`é baseada num."
    return:
      type: System.String
      description: "Uma cadeia que é composta por todos os carateres iniciados a partir da posição especificada na cadeia."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia que contém um número especificado de carateres a partir de uma posição especificada, numa cadeia."
  remarks: "Para determinar o número de carateres no `str`, utilize o `Len` função.       Visual Basic tem um `Mid` função e um `Mid` instrução. Estes elementos ambos operam num número especificado de carateres existentes numa cadeia, mas o `Mid` função devolve os carateres enquanto o `Mid` instrução substitui os carateres. Para obter mais informações, consulte [instrução Mid](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > O `MidB` função em versões anteriores do Visual Basic devolve uma cadeia de bytes em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic estão em Unicode, e `MidB` já não é suportada."
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a partir da qual são devolvidos carateres."
    - id: Start
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Posição inicial de carateres a devolver. Se `Start` é superior ao número de carateres num `str`, a <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> função devolve uma cadeia de comprimento zero (&quot;&quot;). `Start`um baseia-se."
    - id: Length
      type: System.Int32
      description: "Opcional. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Número de carateres a devolver. Se for omitido ou se existirem menos de `Length` carateres no texto (incluindo o caráter na posição `Start`), são devolvidos todos os carateres da posição de início ao fim da cadeia."
    return:
      type: System.String
      description: "Uma cadeia que consiste o número especificado de carateres a partir da posição especificada na cadeia."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia em que uma subcadeia foi substituída por outra subcadeia um número de vezes especificado."
  remarks: "O valor de retorno do `Replace` função é uma cadeia que começa na posição especificada pelo `Start` e conclui no fim do `Expression` cadeia, com as substituições efetuadas conforme especificado pelo `Find` e `Replace` valores.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `Binary`| Efetua uma comparação binária |   | `Text`| Efetua uma comparação textual |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Necessário. Cadeia de expressão que contém a subcadeia para substituir."
    - id: Find
      type: System.String
      description: "Necessário. Subcadeia que está a ser procurada."
    - id: Replacement
      type: System.String
      description: "Necessário. Subcadeia de substituição."
    - id: Start
      type: System.Int32
      description: "Opcional. Posição dentro `Expression` que inicia uma subcadeia utilizada para a substituição. O valor de retorno de <xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;> </xref> é uma cadeia que começa com o `Start`, com as substituições adequadas. Se for omitido, é assumido 1."
    - id: Count
      type: System.Int32
      description: "Opcional. Número de substituições de subcadeia a efetuar. Se for omitido, o valor predefinido é –1, o que significa &quot;efetuar todas as substituições possíveis&quot;."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação para utilizar durante a avaliação de subcadeias. Consulte as definições para os valores."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>Devolve os seguintes valores.       <table><tbody><tr><td> Se       </td><td> Substituir devolve       </td></tr><tr><td><code>Find</code>é o comprimento de zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Cópia de<code>Expression</code></td></tr><tr><td><code>Replace</code>é o comprimento de zero       </td><td> Copiar do <code> Expression </code> com nenhuma ocorrências do<code>Find</code></td></tr><tr><td><code>Expression</code>é o comprimento de zero ou <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, ou <code> Start </code> é superior ao comprimento de<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>é 0       </td><td> Cópia de<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia contendo um número especificado de carateres do lado direito de uma cadeia."
  remarks: "Para determinar o número de carateres no `str`, utilize o `Len` função. Se a ser utilizado um formulário do Windows ou qualquer outra classe que tem um `Right` propriedade, tem qualificar completamente a função com `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] > O `RightB` função em versões anteriores do Visual Basic devolve uma cadeia em bytes, em vez de carateres. É utilizada principalmente para converter as cadeias de carateres de byte duplo (DBCS) conjunto de aplicações. Todas as cadeias de Visual Basic atuais estão em Unicode, e `RightB` já não é suportada."
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a partir da qual os carateres mais à direita são devolvidos."
    - id: Length
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Expressão numérica que indica o número de carateres a devolver. Se for 0, uma cadeia de comprimento zero (&quot;&quot;) é devolvido. Se maior que ou igual ao número de carateres de `str`, é devolvida a cadeia completa."
    return:
      type: System.String
      description: "Devolve uma cadeia contendo um número especificado de carateres do lado direito de uma cadeia."
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia alinhada à direita contendo a cadeia especificada ajustada ao comprimento especificado."
  remarks: "Se `Source` é maior do que `Length`, `RSet` coloca apenas os carateres mais à esquerda, até o comprimento de `Source`, na cadeia devolvida. Se a cadeia especificada for mais curta do que o comprimento especificado, os espaços são adicionados a extremidade esquerda da cadeia para produzir o comprimento adequado. Se a cadeia especificada for superior ao comprimento especificado, é shortened ao comprimento especificado."
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão. Nome da variável de cadeia."
    - id: Length
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Comprimento da cadeia devolvido."
    return:
      type: System.String
      description: "Devolve uma cadeia alinhada à direita contendo a cadeia especificada ajustada ao comprimento especificado."
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia contendo uma cópia de uma cadeia especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), não à direita espaços (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não esquerda ou à direita espaços (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "O `LTrim`, `RTrim`, e `Trim` funções remover espaços as extremidades de cadeias."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Devolve uma cadeia contendo uma cópia de uma cadeia especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), não à direita espaços (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não esquerda ou à direita espaços (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia consistindo num número especificado de espaços."
  remarks: "O `Space` função é útil para a saída de formatação e limpar dados nas cadeias de comprimento fixo."
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O número de espaços que pretende na cadeia."
    return:
      type: System.String
      description: "Devolve uma cadeia consistindo num número especificado de espaços."
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma matriz unidimensional baseada em zero contendo um número especificado de subcadeias."
  remarks: "Por predefinição, ou quando `Limit` é igual a -1, o `Split` função divide a cadeia de entrada em cada ocorrência da cadeia de delimitador e devolve as subcadeias numa matriz. Quando o `Limit` parâmetro é maior que zero, o `Split` função divide a cadeia no primeiro `Limit`ocorrências de-1 do delimitador e devolve uma matriz com as subcadeias resultantes. Por exemplo, `Split(&quot;a:b:c&quot;, &quot;:&quot;)` devolve matriz `{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`, enquanto `Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)` devolve matriz `{&quot;a&quot;, &quot;b:c&quot;}`.       Quando o `Split` função encontra dois delimitadores numa linha ou um delimitador no início ou fim da cadeia, interpreta-o como envolvente uma cadeia vazia (&quot;&quot;). Por exemplo, `Split(&quot;xx&quot;, &quot;x&quot;)` devolve a matriz de cadeias vazias três: um from between início da cadeia e o primeiro &quot;x&quot;, um from between dois &quot;x&quot; cadeias e um from between último &quot;x&quot; e o fim da cadeia.       Esta tabela demonstra como a opcional `Delimiter`, `Limit`, e `Compare` parâmetros podem alterar o comportamento a `Split` função.      |||   |-|-|   | Dividir chamada | Devolver valor |   | `Split(&quot;42, 12, 19&quot;)`| {&quot;42,&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`| {&quot;42&quot;, &quot;12, 19&quot;} |   | `Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`| {&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`| {&quot;Alice e João&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`| {&quot;Alice&quot;, &quot;Bob&quot;} |   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`| {&quot;someone@example.com&quot;}|   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`| {&quot;alguém&quot;, &quot;example.com&quot;}|       O `Compare` argumento pode ter os seguintes valores.      ||||   |-|-|-|   | Constante | Descrição | Valor |   | `CompareMethod.Binary`| Efetua uma comparação binária |&0; |   | `CompareMethod.Text`| Efetua uma comparação textual |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão que contém subcadeias e delimitadores."
    - id: Delimiter
      type: System.String
      description: "Opcional. Um único caráter utilizado para identificar os limites de substring. Se `Delimiter` for omitido, o caráter de espaço (&quot;&quot;) é pressupõe-se que o delimitador."
    - id: Limit
      type: System.Int32
      description: "Opcional. Número máximo de subcadeias no qual deve ser dividir a cadeia de entrada. A predefinição, –1, indica que a cadeia de entrada deve ser dividida em cada ocorrência da `Delimiter` cadeia."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica a comparação para utilizar durante a avaliação de subcadeias. Consulte &quot;Definições&quot; para valores."
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>matriz. Se <code> Expression </code> é uma cadeia de comprimento zero (&quot;&quot;), <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> devolve uma matriz de elemento único que contém uma cadeia de comprimento zero. Se <code> Delimiter </code> é uma cadeia de comprimento de zero, ou se não aparecer em qualquer local no <code> Expression </code>, <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> devolve uma matriz de elemento único que contém toda <code> Expression </code> cadeia."
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve -1, 0 ou 1, com base no resultado de uma comparação de cadeias."
  remarks: "As cadeias são comparadas pelos valores de ordenação alfanuméricos, começando com o primeiro caráter. Para obter mais informações sobre comparações binárias, comparações textual e ordenação, consulte [opção comparar instrução](~/add/includes/ajax-current-ext-md.md).       O `Compare` argumento definições são: |||   |-|-|   | Constante | Descrição |   | `Binary`| Efetua uma comparação binária, com base numa ordem sort derivada representações binárias internas dos carateres. |   | `Text`| Efetua uma comparação de texto, com base numa ordem sort texto sensível determinada pelo seu sistema `LocaleID` valor. |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    - id: String2
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Especifica o tipo de comparação de cadeias. Se `Compare` for omitido, o <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> definição determina o tipo de comparação."
    return:
      type: System.Int32
      description: "O <xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref> função com os seguintes valores de retorno.       <table><tbody><tr><td> Se       </td><td> Devolve StrComp       </td></tr><tr><td><code>String1</code>Ordena ahead de<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>é igual a<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>Ordena após<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>o valor não é válido."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia convertida conforme especificado."
  remarks: "As constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, e `VbStrConv.Hiragana` podem provocar erros de tempo de execução quando utilizado em regiões onde que não se aplicam, mas nem sempre: constantes `VbStrConv.Katakana` e `VbStrConv.Hiragana` pode ser utilizado num sistema de japonês não com o pacote de idiomas de japonês instalado. Além disso, a utilização de constantes `VbStrConv.Wide` e `VbStrConv.Narrow` é suportado em qualquer sistema com um idioma do leste asiático instalado.       Esta função utiliza informações de cultura da aplicação quando manipular a cadeia de modo a que as alterações às maiúsculas e são adequadas para a região na qual a aplicação está a ser utilizada.      > [!IMPORTANT] > Se a aplicação toma decisões de segurança com base no resultado de uma operação de alteração de maiúsculas e minúsculas ou comparação, em seguida, deve utilizar a operação de <xref:System.String.Compare%2A?displayProperty=fullName>método e passar <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias no Visual Basic](~/add/includes/ajax-current-ext-md.md).       O `Conversion` argumento definições são: |||   |-|-|   | Membro de enumeração | Descrição |   | `VbStrConv.None`| Não efetua nenhuma conversão |   | `VbStrConv.LinguisticCasing`| Utiliza regras linguístico para maiúsculas e minúsculas, em vez de sistema de ficheiros (predefinição). Válido com `VbStrConv.UpperCase` e `VbStrConv.LowerCase` apenas. |   | `VbStrConv.UpperCase`| Converte a cadeia de carateres de maiúsculas. |   | `VbStrConv.LowerCase`| Converte a cadeia de carateres de minúsculas. |   | `VbStrConv.ProperCase`| Converte a primeira letra de cada palavra na cadeia em maiúsculas. |   | `VbStrConv.Wide` <sup>*</sup>| Converte restringir (meio largura) carateres da cadeia de carateres de wide (largura completo). |   | `VbStrConv.Narrow` <sup>*</sup>| Converte carateres wide (largura completo) na cadeia de para restringir os carateres (meio largura). |   | `VbStrConv.Katakana` <sup>**</sup>| Converte carateres Hiragana na cadeia de carateres Katakana. |   | `VbStrConv.Hiragana` <sup>**</sup>| Converte carateres Katakana na cadeia de carateres Hiragana. |   | `VbStrConv.SimplifiedChinese` <sup>*</sup>| Converte carateres chinês tradicionais chinês simplificado. |   | `VbStrConv.TraditionalChinese` <sup>*</sup>| Converte carateres chinês simplificado, chinês tradicional para. |       <sup> * </sup> Aplica-se a Asian regiões.       <sup>**</sup>Aplicável apenas ao Japão.      > [!NOTE] > Estes constantes estão especificadas no .NET Framework language runtime. Como resultado, podem ser utilizadas em qualquer lugar no seu código em vez dos valores reais. Pode ser combinada maioria (por exemplo, `UpperCase + Wide`), exceto quando são mutuamente exclusivos (por exemplo, `VbStrConv.Wide + VbStrConv.Narrow`).       Seguem-se os separadores de word válido para maiúsculas e minúsculas adequada: nulo (`Chr$(0)`), separador horizontal (`Chr$(9)`), linha feed (`Chr$(10)`), separador vertical (`Chr$(11)`), formar feed (`Chr$(12)`), avanço retorno (`Chr$(13)`), espaço (conjunto de carateres de byte único) (`Chr$(32)`). O valor real para um espaço, que pode ser full ou largura meio, varia consoante o país/região do leste asiático culturas."
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a ser convertida."
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "Necessário. <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>Membro. O valor de enumeração especificar o tipo de conversão para executar."
    - id: LocaleID
      type: System.Int32
      description: "Opcional. O <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valor, se for diferente do sistema <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valor. (O sistema <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valor é a predefinição.)"
    return:
      type: System.String
      description: "Devolve uma cadeia convertida conforme especificado."
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Não suportado <code> LocaleID </code>, <code> Conversion </code> &lt; 0 ou &gt; conversão 2048 ou não é suportado para a região especificado."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou objeto consistindo num caráter especificado repetido o número de vezes especificado."
  remarks: "Esta função devolve um `String` constituído por carateres repetidos. O caráter que constitui a cadeia é o primeiro caráter no `Character` argumento e está duplicado `Number` número de vezes."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O comprimento da cadeia a ser devolvido."
    - id: Character
      type: System.Char
      description: "Necessário. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Será utilizado apenas o primeiro caráter da expressão. Se o carácter é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, tem de conter um um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valor."
    return:
      type: System.String
      description: "Devolve uma cadeia ou objeto consistindo num caráter especificado repetido o número de vezes especificado."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é inferior a 0 ou <code>Character</code> tipo não é válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou objeto consistindo num caráter especificado repetido o número de vezes especificado."
  remarks: "Esta função devolve um `String` constituído por carateres repetidos. O caráter que constitui a cadeia é o primeiro caráter no `Character` argumento e está duplicado `Number` número de vezes."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O comprimento da cadeia a ser devolvido."
    - id: Character
      type: System.Object
      description: "Necessário. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Será utilizado apenas o primeiro caráter da expressão. Se o carácter é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, tem de conter um um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valor."
    return:
      type: System.Object
      description: "Devolve uma cadeia ou objeto consistindo num caráter especificado repetido o número de vezes especificado."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é inferior a 0 ou <code>Character</code> tipo não é válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou objeto consistindo num caráter especificado repetido o número de vezes especificado."
  remarks: "Esta função devolve um `String` constituído por carateres repetidos. O caráter que constitui a cadeia é o primeiro caráter no `Character` argumento e está duplicado `Number` número de vezes."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O comprimento da cadeia a ser devolvido."
    - id: Character
      type: System.String
      description: "Necessário. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Será utilizado apenas o primeiro caráter da expressão. Se o carácter é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, tem de conter um um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valor."
    return:
      type: System.String
      description: "Devolve uma cadeia ou objeto consistindo num caráter especificado repetido o número de vezes especificado."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é inferior a 0 ou <code>Character</code> tipo não é válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia na qual a ordem de carateres de uma cadeia especificada está invertida."
  remarks: "O `StrReverse` função devolve uma cadeia que contém os mesmos carateres como `Expression`, mas oposta ordem."
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Necessário. Expressão de cadeia cujos carateres estão a ser invertido. Se `Expression` é uma cadeia de comprimento zero (&quot;&quot;), é devolvida uma cadeia de comprimento zero."
    return:
      type: System.String
      description: "Devolve uma cadeia na qual a ordem de carateres de uma cadeia especificada está invertida."
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia contendo uma cópia de uma cadeia especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), não à direita espaços (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não esquerda ou à direita espaços (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "O `LTrim`, `RTrim`, e `Trim` funções remover espaços as extremidades de cadeias."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Devolve uma cadeia contendo uma cópia de uma cadeia especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), não à direita espaços (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não esquerda ou à direita espaços (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou caráter contendo a cadeia especificada convertida em maiúsculas."
  remarks: "Apenas letras minúsculas são convertidas em maiúsculas; todas as letras maiúsculas e carateres de nonletter permanecem inalterados.       Esta função utiliza informações de cultura da aplicação quando manipular a cadeia de modo a que as alterações às maiúsculas e são adequadas para a região na qual a aplicação está a ser utilizada.      > [!IMPORTANT] > Se a aplicação toma decisões de segurança com base no resultado de uma operação de alteração de maiúsculas e minúsculas ou comparação, em seguida, deve utilizar a operação de <xref:System.String.Compare%2A?displayProperty=fullName>método e passar <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.Char
      description: "Devolve uma cadeia ou caráter contendo a cadeia especificada convertida em maiúsculas."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve uma cadeia ou caráter contendo a cadeia especificada convertida em maiúsculas."
  remarks: "Apenas letras minúsculas são convertidas em maiúsculas; todas as letras maiúsculas e carateres de nonletter permanecem inalterados.       Esta função utiliza informações de cultura da aplicação quando manipular a cadeia de modo a que as alterações às maiúsculas e são adequadas para a região na qual a aplicação está a ser utilizada.      > [!IMPORTANT] > Se a aplicação toma decisões de segurança com base no resultado de uma operação de alteração de maiúsculas e minúsculas ou comparação, em seguida, deve utilizar a operação de <xref:System.String.Compare%2A?displayProperty=fullName>método e passar <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Necessário. Qualquer válido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Devolve uma cadeia ou caráter contendo a cadeia especificada convertida em maiúsculas."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
