### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbConnection
  id: OleDbConnection
  children:
  - System.Data.OleDb.OleDbConnection.#ctor
  - System.Data.OleDb.OleDbConnection.#ctor(System.String)
  - System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.OleDb.OleDbConnection.BeginTransaction
  - System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  - System.Data.OleDb.OleDbConnection.Close
  - System.Data.OleDb.OleDbConnection.ConnectionString
  - System.Data.OleDb.OleDbConnection.ConnectionTimeout
  - System.Data.OleDb.OleDbConnection.CreateCommand
  - System.Data.OleDb.OleDbConnection.CreateDbCommand
  - System.Data.OleDb.OleDbConnection.Database
  - System.Data.OleDb.OleDbConnection.DataSource
  - System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  - System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  - System.Data.OleDb.OleDbConnection.GetSchema
  - System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  - System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  - System.Data.OleDb.OleDbConnection.InfoMessage
  - System.Data.OleDb.OleDbConnection.Open
  - System.Data.OleDb.OleDbConnection.Provider
  - System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  - System.Data.OleDb.OleDbConnection.ResetState
  - System.Data.OleDb.OleDbConnection.ServerVersion
  - System.Data.OleDb.OleDbConnection.State
  - System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  langs:
  - csharp
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
  type: Class
  summary: "Represents an open connection to a data source."
  remarks: "An OleDbConnection object represents a unique connection to a data source. With a client/server database system, it is equivalent to a network connection to the server. Depending on the functionality supported by the native OLE DB provider, some methods or properties of an OleDbConnection object may not be available.       When you create an instance of OleDbConnection, all properties are set to their initial values. For a list of these values, see the OleDbConnection constructor.       You can open more than one DataReader on a single OleDbConnection. If the OLE DB provider you use does not support more than one DataReader on a single connection, the provider implicitly opens an additional connection for each.       If the OleDbConnection goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <xref:System.Data.OleDb.OleDbConnection.Close%2A> or **Dispose**, or by using the OleDbConnection object within a `Using` statement.      > [!NOTE] >  To deploy high-performance applications, you must use connection pooling. When you use the .NET Framework Data Provider for OLE DB, you do not have to enable connection pooling because the provider manages this automatically. For more information about how to use connection pooling with the .NET Framework Data Provider for OLE DB, see [OLE DB, ODBC, and Oracle Connection Pooling](~/add/includes/ajax-current-ext-md.md).       If a fatal <xref:System.Data.OleDb.OleDbException> (for example, a SQL Server severity level of 20 or greater) is generated by the method executing an <xref:System.Data.OleDb.OleDbCommand>, the OleDbConnection might be closed. However, the user can reopen the connection and continue.       An application that creates an instance of the OleDbConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. OleDbConnection makes security demands using the <xref:System.Data.OleDb.OleDbPermission> object. Users can verify that their code has sufficient permissions by using the <xref:System.Data.OleDb.OleDbPermissionAttribute> object. Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md) to modify security policy at the computer, user, and enterprise levels. For more information, see [Code Access Security and ADO.NET](~/add/includes/ajax-current-ext-md.md).       For more information about handling warning and informational messages from the data server, see [Connection Events](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  The OleDbConnection object does not support setting or retrieving dynamic properties specific to an OLE DB provider. Only properties that can be passed in the connection string for the OLE DB provider are supported."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbCommand> and an OleDbConnection. The OleDbConnection is opened and set as the <xref:System.Data.OleDb.OleDbCommand.Connection%2A> for the <xref:System.Data.OleDb.OleDbCommand>. The example then calls <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> and closes the connection. To accomplish this, <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is an SQL INSERT statement.  \n  \n [!code-cs[Classic WebData OleDbConnection Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData OleDbConnection Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class OleDbConnection : System.Data.Common.DbConnection, ICloneable, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: OleDbConnection()
  nameWithType: OleDbConnection.OleDbConnection()
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> class."
  remarks: "When a new instance of <xref:System.Data.OleDb.OleDbConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> property.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|empty string (&quot;&quot;)|   |<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.OleDb.OleDbConnection.Database%2A>|empty string (&quot;&quot;)|   |<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>|empty string (&quot;&quot;)|       You can change the value for these properties only by using the <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> property."
  example:
  - "The following example creates and opens an <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData OleDbConnection.OleDbConnection Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.OleDbConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public OleDbConnection ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: OleDbConnection(String)
  nameWithType: OleDbConnection.OleDbConnection(String)
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> class with the specified connection string."
  remarks: "When a new instance of <xref:System.Data.OleDb.OleDbConnection> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> property.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|`connectionString`|   |<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|15|   |<xref:System.Data.OleDb.OleDbConnection.Database%2A>|empty string (&quot;&quot;)|   |<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>|empty string (&quot;&quot;)|       You can change the value for these properties only by using the <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> property."
  example:
  - "The following example creates and opens an <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public OleDbConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "The connection used to open the database."
  overload: System.Data.OleDb.OleDbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "To be added."
    return:
      type: System.Data.Common.DbTransaction
      description: "To be added."
  overload: System.Data.OleDb.OleDbConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: OleDbConnection.BeginTransaction()
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Starts a database transaction with the current <xref href=&quot;System.Data.IsolationLevel&quot;></xref> value."
  remarks: "You must explicitly commit or roll back the transaction using the <xref:System.Data.OleDb.OleDbTransaction.Commit%2A> or <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> method. To make sure that the .NET Framework Data Provider for OLE DB transaction management model performs correctly, avoid using other transaction management models, such as those provided by the data source."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and an <xref:System.Data.OleDb.OleDbTransaction>. It also demonstrates how to use the BeginTransaction, <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, and <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OleDbConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_23_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_23_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.OleDb.OleDbTransaction
      description: "An object representing the new transaction."
  overload: System.Data.OleDb.OleDbConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Parallel transactions are not supported."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Starts a database transaction with the specified isolation level."
  remarks: "You must explicitly commit or roll back the transaction using the <xref:System.Data.OleDb.OleDbTransaction.Commit%2A> or <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> method. To make sure that the .NET Framework Data Provider for OLE DB transaction management model performs correctly, avoid using other transaction management models, such as those provided by the data source.      > [!NOTE] >  If you do not specify an isolation level, the default isolation level for the underlying provider is used. To specify an isolation level with the BeginTransaction method, use the overload that takes the `isolationLevel` parameter."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and an <xref:System.Data.OleDb.OleDbTransaction>. It also demonstrates how to use the <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>, a <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, and <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_25_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_25_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "The isolation level under which the transaction should run."
    return:
      type: System.Data.OleDb.OleDbTransaction
      description: "An object representing the new transaction."
  overload: System.Data.OleDb.OleDbConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Parallel transactions are not supported."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: OleDbConnection.ChangeDatabase(String)
  fullName: System.Data.OleDb.OleDbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Changes the current database for an open <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>."
  remarks: "The value supplied in the `database` parameter must be a valid database name. The `database` parameter cannot contain a null value, an empty string, or a string with only blank characters."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Database Example#2](~/add/codesnippet/csharp/m-system.data.oledb.oled_20_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Database Example#2](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_20_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string value);
    parameters:
    - id: value
      type: System.String
      description: "The database name."
  overload: System.Data.OleDb.OleDbConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The database name is not valid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The connection is not open."
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "Cannot change the database."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Close
  id: Close
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: OleDbConnection.Close()
  fullName: System.Data.OleDb.OleDbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Closes the connection to the data source."
  remarks: "The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled. If Close is called while handling a <xref:System.Data.Common.DbConnection.StateChange> event, no additional <xref:System.Data.Common.DbConnection.StateChange> events are fired.       An application can call Close more than one time. No exception is generated.      > [!CAUTION] >  Do not call Close or **Dispose** on an <xref:System.Data.OleDb.OleDbConnection>, an <xref:System.Data.OleDb.OleDbDataReader>, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
  fullName: System.Data.OleDb.OleDbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets or sets the string used to open a database."
  remarks: "The ConnectionString is designed to match OLE DB connection string format as closely as possible with the following exceptions:  \n  \n-   The \"Provider = `value` \" clause is required. However, you cannot use \"Provider = MSDASQL\" because the .NET Framework Data Provider for OLE DB does not support the OLE DB Provider for ODBC (MSDASQL). To access ODBC data sources, use the <xref:System.Data.Odbc.OdbcConnection> object that is in the <xref:System.Data.Odbc> namespace.  \n  \n-   Unlike ODBC or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if `Persist Security Info` is set to `false` (default). The .NET Framework Data Provider for OLE DB does not persist or return the password in a connection string unless you set the `Persist Security Info` keyword to `true` (not recommended). To maintain a high level of security, it is strongly recommended that you use the `Integrated Security` keyword with `Persist Security Info` set to `false`.  \n  \n You can use the ConnectionString property to connect to a variety of data sources. The following example illustrates several possible connection strings.  \n  \n```  \n\"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=Yes\"  \n  \n\"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\\bin\\LocalAccess40.mdb\"  \n  \n\"Provider=SQLOLEDB;Data Source=(local);Integrated Security=SSPI\"  \n```  \n  \n If the `Data Source` keyword is not specified in the connection string, the provider will try to connect to the local server if one is available.  \n  \n For more information about connection strings, see [Using Connection String Keywords with SQL Server Native Client](http://go.microsoft.com/fwlink/?LinkId=126696).  \n  \n The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <xref:System.Data.OleDb.OleDbConnection> properties return only those settings that are contained in the ConnectionString.  \n  \n Resetting the ConnectionString on a closed connection resets all connection string values and related properties. This includes the password. For example, if you set a connection string that includes \"Initial Catalog= AdventureWorks\", and then reset the connection string to \"Provider= SQLOLEDB;Data Source= MySQLServer;IntegratedSecurity=SSPI\", the <xref:System.Data.OleDb.OleDbConnection.Database%2A> property is no longer set to AdventureWorks. (The Initial Catalog value of the connection string corresponds to the `Database` property.)  \n  \n A preliminary validation of the connection string is performed when the property is set. If values for the `Provider`, `Connect Timeout`, `Persist Security Info`, or `OLE DB Services` are included in the string, these values are checked. When an application calls the <xref:System.Data.OleDb.OleDbConnection.Open%2A> method, the connection string is fully validated. If the connection string contains invalid or unsupported properties, a run-time exception, such as <xref:System.ArgumentException>, is generated.  \n  \n> [!CAUTION]\n>  It is possible to supply connection information for an <xref:System.Data.OleDb.OleDbConnection> in a Universal Data Link (UDL) file; however you should avoid doing so. UDL files are not encrypted and expose connection string information in clear text. Because a UDL file is an external file-based resource to your application, it cannot be secured using the .NET Framework.  \n  \n The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation-mark character used to enclose the value must be doubled every time it occurs within the value.  \n  \n To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, `Data Source= my'Server` or `Data Source= my\"Server`) unless a quotation-mark character is the first or last character in the value.  \n  \n To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string  \n  \n```  \n\"key==word=value\"  \n```  \n  \n the keyword is \"key=word\" and the value is \"value\".  \n  \n If a specific keyword in a keyword=value pair occurs multiple times in a connection string, the last occurrence listed is used in the value set.  \n  \n Keywords are not case sensitive.  \n  \n> [!CAUTION]\n>  You should use caution when constructing a connection string based on user input, for example, when retrieving user ID and password information from a dialog box and appending it to the connection string. The application should make sure that a user cannot embed additional connection-string parameters in these values, for example, entering a password as \"validpassword;database= somedb\" in an attempt to attach to a different database. If you use the Extended Properties connection string parameter for OLE DB connections, avoid passing user IDs and passwords because you should avoid storing user IDs and passwords in clear text if you can, and because the default setting of `Persist Security Info= false` does not affect the `Extended Properties` parameter."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and sets some of its properties in the connection string.  \n  \n [!code-cs[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_4_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_4_1.vb)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "The OLE DB provider connection string that includes the data source name, and other parameters needed to establish the initial connection. The default value is an empty string."
  overload: System.Data.OleDb.OleDbConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An invalid connection string argument has been supplied or a required connection string argument has not been supplied."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
  fullName: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error."
  remarks: "A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> because an attempt to connect will wait indefinitely."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and sets some of its properties in the connection string.  \n  \n [!code-vb[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_2_1.vb)]\n [!code-cs[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_2_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "The time in seconds to wait for a connection to open. The default value is 15 seconds."
  overload: System.Data.OleDb.OleDbConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value set is less than 0."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: OleDbConnection.CreateCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Creates and returns an <xref href=&quot;System.Data.OleDb.OleDbCommand&quot;></xref> object associated with the <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>."
  syntax:
    content: public System.Data.OleDb.OleDbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "An <xref href=&quot;System.Data.OleDb.OleDbCommand&quot;></xref> object."
  overload: System.Data.OleDb.OleDbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: OleDbConnection.CreateDbCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "To be added."
  overload: System.Data.OleDb.OleDbConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Database
  id: Database
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Database
  nameWithType: OleDbConnection.Database
  fullName: System.Data.OleDb.OleDbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets the name of the current database or the database to be used after a connection is opened."
  remarks: "The Database property updates dynamically. If you change the current database using a SQL statement or the <xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_14_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_14_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string."
  overload: System.Data.OleDb.OleDbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.DataSource
  id: DataSource
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: OleDbConnection.DataSource
  fullName: System.Data.OleDb.OleDbConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets the server name or file name of the data source."
  remarks: "If the connection to the database is closed, the `DataSource` property returns whatever is contained in `ConnectionString` for the data source keyword. If the connection is open and the `ConnectionString` data source keyword&quot;s value starts with &quot;&#124;datadirectory&#124;&quot;, the property returns whatever is contained in `ConnectionString` for the data source keyword only. If the connection to the database is open, the property returns what the native provider returns for the `DBPROP_INIT_DATASOURCE,` and if that is empty, the native provider’s `DBPROP_DATASOURCENAME` is returned."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_26_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_26_1.vb)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "The server name or file name of the data source. The default value is an empty string."
  overload: System.Data.OleDb.OleDbConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OleDbConnection.Dispose(Boolean)
  fullName: System.Data.OleDb.OleDbConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "To be added."
  overload: System.Data.OleDb.OleDbConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OleDbConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Enlists in the specified transaction as a distributed transaction."
  remarks: "New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose. For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).       You can continue to enlist in an existing distributed transaction using the EnlistDistributedTransaction method if auto-enlistment is disabled. Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back. For more information about distributed transactions, see [Distributed Transactions](../Topic/Distributed%20Transactions.md).       EnlistDistributedTransaction returns an exception if the <xref:System.Data.OleDb.OleDbConnection> has already started a transaction using <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.OleDbClient.OleDbCommand> object), EnlistDistributedTransaction rolls back the local transaction and enlists in the existing distributed transaction as requested. You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>."
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "A reference to an existing <xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref> in which to enlist."
  overload: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: OleDbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Enlists in the specified transaction as a distributed transaction."
  remarks: 'New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a <xref:System.EnterpriseServices.ITransaction> object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "A reference to an existing <xref href=&quot;System.Transactions.Transaction&quot;></xref> in which to enlist."
  overload: System.Data.OleDb.OleDbConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  id: GetOleDbSchemaTable(System.Guid,System.Object[])
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetOleDbSchemaTable(Guid,Object[])
  nameWithType: OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  fullName: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Returns schema information from a data source as indicated by a GUID, and after it applies the specified restrictions."
  remarks: "The schema table is returned as a <xref:System.Data.DataTable> that has the same format as the OLE DB schema rowset specified by the `schema` parameter. Use the `restrictions` parameter to filter the rows to be returned in the <xref:System.Data.DataTable> (for example, by specifying restrictions for table name, type, owner, or schema). When you pass values in the array, include empty strings or nulls for array elements that do not contain values. If you pass an empty array to `restrictions`, all rows (one for each table) are returned in default order. Values in the array correspond to the order of the columns in the source table and <xref:System.Data.DataTable>. Each element in the restrictions array is compared with the content of the corresponding column in the schema rowset. For example, the first element in the restrictions array is compared to first column in the rowset. If a restriction element is not null, only rows from the schema rowset that exactly match the value of the restriction are added to the resulting <xref:System.Data.DataTable>.       The <xref:System.Data.OleDb.OleDbConnection> method calls the underlying OLE DB **IDBSchemaRowset::GetRowset** method using standard common language runtime conversion rules. For more information, see [COM Data Types](http://msdn.microsoft.com/en-us/f93ae35d-a416-4218-8700-c8218cc90061).       You can retrieve information about literals by using <xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals>. This provides information equivalent to calling the OLE DB **IDBInfo::GetLiteralInfo** interface, or the ADO **Connection.OpenSchema** method with the `adSchemaDBInfoLiterals` constant."
  example:
  - "The following sample returns a list of tables in a database.  \n  \n [!code-cs[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/add/codesnippet/csharp/da103458-7630-4900-9261-_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/add/codesnippet/visualbasic/da103458-7630-4900-9261-_1.vb)]"
  syntax:
    content: public System.Data.DataTable GetOleDbSchemaTable (Guid schema, object[] restrictions);
    parameters:
    - id: schema
      type: System.Guid
      description: "One of the <xref href=&quot;System.Data.OleDb.OleDbSchemaGuid&quot;></xref> values that specifies the schema table to return."
    - id: restrictions
      type: System.Object[]
      description: "An <xref:System.Object> array of restriction values. These are applied in the order of the restriction columns. That is, the first restriction value applies to the first restriction column, the second restriction value applies to the second restriction column, and so on."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> that contains the requested schema information."
  overload: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable*
  exceptions:
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "The specified set of restrictions is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> is closed."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The specified schema rowset is not supported by the OLE DB provider.       -or-       The <code>schema</code> parameter contains a value of <xref href=&quot;System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals&quot;></xref> and the <code>restrictions</code> parameter contains one or more restrictions."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema
  id: GetSchema
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: OleDbConnection.GetSchema()
  fullName: System.Data.OleDb.OleDbConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Returns schema information for the data source of this <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>."
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> that contains schema information."
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: OleDbConnection.GetSchema(String)
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Returns schema information for the data source of this <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> using the specified string for the schema name."
  remarks: "When `collectionName` is specified as null, the <xref:System.Data.DataTable> will contain information about all the metadata that is available, and its restrictions."
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "Specifies the name of the schema to return."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> that contains schema information."
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: OleDbConnection.GetSchema(String,String[])
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Returns schema information for the data source of this <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> using the specified string for the schema name and the specified string array for the restriction values."
  remarks: "When `collectionName` is specified as null, the <xref:System.Data.DataTable> will contain information about all the metadata that is available, and its restrictions.       The `restrictionValues` parameter can supply *n* depth of values which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.       An example of this is the &quot;Tables&quot; collection. If the &quot;Tables&quot; collection has three restrictions (database, owner, and table name), and you want to get back only the tables associated with the owner &quot;Carl,&quot; you must pass in the following values (at a minimum): null, &quot;Carl&quot;. If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in null, which is different from passing in an empty string for the parameter value. In that case, the empty string (&quot;&quot;) is considered to be the value for the specified parameter."
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "Specifies the name of the schema to return."
    - id: restrictionValues
      type: System.String[]
      description: "Specifies a set of restriction values for the requested schema."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> that contains schema information."
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: OleDbConnection.InfoMessage
  fullName: System.Data.OleDb.OleDbConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Occurs when the provider sends a warning or an informational message."
  remarks: "Clients that want to process warnings or informational messages sent by the server should create an <xref:System.Data.OleDb.OleDbInfoMessageEventHandler> delegate to listen to this event.       The InfoMessage event occurs when a message with low severity is returned from the data source. Low severity messages are those that do not cause an exception. For Microsoft SQL Server, this includes error messages that have a severity of 10 or less       For more information and an example, see [Connection Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.OleDb.OleDbInfoMessageEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Open
  id: Open
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: OleDbConnection.Open()
  fullName: System.Data.OleDb.OleDbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Opens a database connection with the property settings specified by the <xref:System.Data.OleDb.OleDbConnection.ConnectionString*>."
  remarks: "The <xref:System.Data.OleDb.OleDbConnection> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to the data source. You can open more than one DataReader on a single <xref:System.Data.OleDb.OleDbConnection>. If the OLEDB provider you use does not support more than one active DataReader on a single connection, the OLEDB provider implicitly opens an additional connection for each.      > [!NOTE] >  If the <xref:System.Data.OleDb.OleDbConnection> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <xref:System.Data.OleDb.OleDbConnection.Close%2A> or **Dispose**, or using the connection within a `Using` statement."
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The connection is already open."
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "A connection-level error occurred while opening the connection."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Provider
  id: Provider
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Provider
  nameWithType: OleDbConnection.Provider
  fullName: System.Data.OleDb.OleDbConnection.Provider
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets the name of the OLE DB provider specified in the &quot;Provider= &quot; clause of the connection string."
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Provider Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Provider Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public string Provider { get; }
    return:
      type: System.String
      description: "The name of the provider as specified in the &quot;Provider= &quot; clause of the connection string. The default value is an empty string."
  overload: System.Data.OleDb.OleDbConnection.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  id: ReleaseObjectPool
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ReleaseObjectPool()
  nameWithType: OleDbConnection.ReleaseObjectPool()
  fullName: System.Data.OleDb.OleDbConnection.ReleaseObjectPool()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Indicates that the <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> object pool can be released when the last underlying connection is released."
  remarks: "`ReleaseObjectPool` can be called to free resources that would otherwise be reserved for pooled <xref:System.Data.OleDb.OleDbConnection> objects. You might want to call this method if, for example, the connection object will not be used again for the amount of time that OLE DB services ordinarily keeps pooled connections active. Note that calling the method alone does not actually release the active connections that exist in the pool.       The following must occur before the pool is finally disposed:      1.  Call <xref:System.Data.OleDb.OleDbConnection.Close%2A> to return the connection object to the pool.      2.  Allow each connection object to time out of the pool.      3.  Call ReleaseObjectPool.      4.  Invoke garbage collection.       Conversely, if you call <xref:System.Data.OleDb.OleDbConnection.Close%2A> on all active connections, and invoke garbage collection, but do not call ReleaseObjectPool, the resources reserved for the pooled objects will remain available."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection>, opens it, displays some of its properties, closes the connection, and releases the object pool to conserve resources.  \n  \n [!code-cs[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_15_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_15_1.vb)]"
  syntax:
    content: public static void ReleaseObjectPool ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.ReleaseObjectPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ResetState
  id: ResetState
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ResetState()
  nameWithType: OleDbConnection.ResetState()
  fullName: System.Data.OleDb.OleDbConnection.ResetState()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Updates the <xref:System.Data.OleDb.OleDbConnection.State*> property of the <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref> object."
  remarks: "Some OLE DB providers can check the current state of the connection. For example, if the database server has recycled since you opened your <xref:System.Data.OleDb.OleDbConnection>, the <xref:System.Data.OleDb.OleDbConnection.State%2A> property will continue to return `Open`. If you are working with an OLE DB Provider that supports polling for this information on a live connection, calling the ResetState method and then checking the <xref:System.Data.OleDb.OleDbConnection.State%2A> property will tell you that the connection is no longer open. The ResetState method relies on functionality in the OLE DB Provider to verify the current state of the connection. To determine if your OLE DB Provider supports this functionality, check the provider&quot;s documentation for information on DBPROP_CONNECTIONSTATUS."
  syntax:
    content: public void ResetState ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.ResetState*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
  fullName: System.Data.OleDb.OleDbConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets a string that contains the version of the server to which the client is connected."
  remarks: "The ServerVersion property maps to the OLE DB DBPROP_DBMSVER property. If ServerVersion is not supported by the underlying OLE DB provider, an empty string is returned.       The version is of the form *##.##.####*, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The provider must render the product version in this form but can also append the product-specific version—for example, &quot;04.01.0000 Rdb 4.1&quot;. The string is of the form *major.minor.build*, where major and minor are exactly two digits and build is exactly four digits."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData OleDbConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_6_1.vb)]\n [!code-cs[Classic WebData OleDbConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_6_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "The version of the connected server."
  overload: System.Data.OleDb.OleDbConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The connection is closed."
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.State
  id: State
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: State
  nameWithType: OleDbConnection.State
  fullName: System.Data.OleDb.OleDbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "Gets the current state of the connection."
  remarks: "The following are allowed state changes:      -   From `Closed` to `Open`, using the <xref:System.Data.OleDb.OleDbConnection.Open%2A> method of the <xref:System.Data.OleDb.OleDbConnection> object.      -   From `Open` to `Closed`, using either the <xref:System.Data.OleDb.OleDbConnection.Close%2A> method or the **Dispose** method of the <xref:System.Data.OleDb.OleDbConnection> object.      > [!NOTE] >  In previous version of the .NET Framework, calling the State property increased application overhead because each call caused a call to the OLE DB DBPROP_CONNECTIONSTATUS property for an open connection. With the release of the .NET Framework 2.0, this is no longer an issue."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "A bitwise combination of the <xref href=&quot;System.Data.ConnectionState&quot;></xref> values. The default is Closed."
  overload: System.Data.OleDb.OleDbConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbConnection.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "For a description of this member, see &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OleDb.OleDbConnection> instance is cast to an <xref:System.ICloneable> interface."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "A new <xref:System.Object> that is a copy of this instance."
  overload: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.OleDb.OleDbException
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbException
  nameWithType: OleDbException
  fullName: System.Data.OleDb.OleDbException
- uid: System.Data.OleDb.OleDbConnection.#ctor
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection()
  nameWithType: OleDbConnection.OleDbConnection()
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection()
- uid: System.Data.OleDb.OleDbConnection.#ctor(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection(String)
  nameWithType: OleDbConnection.OleDbConnection(String)
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: OleDbConnection.BeginTransaction()
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction()
- uid: System.Data.OleDb.OleDbTransaction
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbTransaction
  nameWithType: OleDbTransaction
  fullName: System.Data.OleDb.OleDbTransaction
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: OleDbConnection.ChangeDatabase(String)
  fullName: System.Data.OleDb.OleDbConnection.ChangeDatabase(String)
- uid: System.Data.OleDb.OleDbConnection.Close
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Close()
  nameWithType: OleDbConnection.Close()
  fullName: System.Data.OleDb.OleDbConnection.Close()
- uid: System.Data.OleDb.OleDbConnection.ConnectionString
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
  fullName: System.Data.OleDb.OleDbConnection.ConnectionString
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
  fullName: System.Data.OleDb.OleDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OleDb.OleDbConnection.CreateCommand
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: OleDbConnection.CreateCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateCommand()
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: OleDbConnection.CreateDbCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.OleDb.OleDbConnection.Database
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Database
  nameWithType: OleDbConnection.Database
  fullName: System.Data.OleDb.OleDbConnection.Database
- uid: System.Data.OleDb.OleDbConnection.DataSource
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnection.DataSource
  fullName: System.Data.OleDb.OleDbConnection.DataSource
- uid: System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OleDbConnection.Dispose(Boolean)
  fullName: System.Data.OleDb.OleDbConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OleDbConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: OleDbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetOleDbSchemaTable(Guid,Object[])
  nameWithType: OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  fullName: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbConnection.GetSchema
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema()
  nameWithType: OleDbConnection.GetSchema()
  fullName: System.Data.OleDb.OleDbConnection.GetSchema()
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: OleDbConnection.GetSchema(String)
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String)
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: OleDbConnection.GetSchema(String,String[])
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbConnection.InfoMessage
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: InfoMessage
  nameWithType: OleDbConnection.InfoMessage
  fullName: System.Data.OleDb.OleDbConnection.InfoMessage
- uid: System.Data.OleDb.OleDbInfoMessageEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbInfoMessageEventHandler
  nameWithType: OleDbInfoMessageEventHandler
  fullName: System.Data.OleDb.OleDbInfoMessageEventHandler
- uid: System.Data.OleDb.OleDbConnection.Open
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Open()
  nameWithType: OleDbConnection.Open()
  fullName: System.Data.OleDb.OleDbConnection.Open()
- uid: System.Data.OleDb.OleDbConnection.Provider
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Provider
  nameWithType: OleDbConnection.Provider
  fullName: System.Data.OleDb.OleDbConnection.Provider
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ReleaseObjectPool()
  nameWithType: OleDbConnection.ReleaseObjectPool()
  fullName: System.Data.OleDb.OleDbConnection.ReleaseObjectPool()
- uid: System.Data.OleDb.OleDbConnection.ResetState
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ResetState()
  nameWithType: OleDbConnection.ResetState()
  fullName: System.Data.OleDb.OleDbConnection.ResetState()
- uid: System.Data.OleDb.OleDbConnection.ServerVersion
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
  fullName: System.Data.OleDb.OleDbConnection.ServerVersion
- uid: System.Data.OleDb.OleDbConnection.State
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: State
  nameWithType: OleDbConnection.State
  fullName: System.Data.OleDb.OleDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbConnection.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbConnection.#ctor*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection.OleDbConnection
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: OleDbConnection.BeginDbTransaction
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: OleDbConnection.BeginTransaction
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: OleDbConnection.ChangeDatabase
- uid: System.Data.OleDb.OleDbConnection.Close*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Close
  nameWithType: OleDbConnection.Close
- uid: System.Data.OleDb.OleDbConnection.ConnectionString*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
- uid: System.Data.OleDb.OleDbConnection.CreateCommand*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: OleDbConnection.CreateCommand
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: OleDbConnection.CreateDbCommand
- uid: System.Data.OleDb.OleDbConnection.Database*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Database
  nameWithType: OleDbConnection.Database
- uid: System.Data.OleDb.OleDbConnection.DataSource*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnection.DataSource
- uid: System.Data.OleDb.OleDbConnection.Dispose*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Dispose
  nameWithType: OleDbConnection.Dispose
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: OleDbConnection.EnlistDistributedTransaction
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: OleDbConnection.EnlistTransaction
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetOleDbSchemaTable
  nameWithType: OleDbConnection.GetOleDbSchemaTable
- uid: System.Data.OleDb.OleDbConnection.GetSchema*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema
  nameWithType: OleDbConnection.GetSchema
- uid: System.Data.OleDb.OleDbConnection.Open*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Open
  nameWithType: OleDbConnection.Open
- uid: System.Data.OleDb.OleDbConnection.Provider*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Provider
  nameWithType: OleDbConnection.Provider
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ReleaseObjectPool
  nameWithType: OleDbConnection.ReleaseObjectPool
- uid: System.Data.OleDb.OleDbConnection.ResetState*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ResetState
  nameWithType: OleDbConnection.ResetState
- uid: System.Data.OleDb.OleDbConnection.ServerVersion*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
- uid: System.Data.OleDb.OleDbConnection.State*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: State
  nameWithType: OleDbConnection.State
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbConnection.System.ICloneable.Clone
