### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.IValueProvider
  id: IValueProvider
  children:
  - System.Windows.Automation.Provider.IValueProvider.IsReadOnly
  - System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)
  - System.Windows.Automation.Provider.IValueProvider.Value
  langs:
  - csharp
  name: IValueProvider
  nameWithType: IValueProvider
  fullName: System.Windows.Automation.Provider.IValueProvider
  type: Interface
  summary: "Exposes methods and properties to support UI Automation client access to controls having an intrinsic value that does not span a range and that can be represented as a string."
  remarks: "The value of the control may or may not be editable depending on the control and its settings.       Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.ValuePattern> control pattern."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("c7935180-6fb3-4201-b174-7df73adbf64a")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IValueProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IValueProvider.IsReadOnly
  id: IsReadOnly
  parent: System.Windows.Automation.Provider.IValueProvider
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: IValueProvider.IsReadOnly
  fullName: System.Windows.Automation.Provider.IValueProvider.IsReadOnly
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Gets a value that specifies whether the value of a control is read-only."
  remarks: "A control should have its <xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> set to `true` and its <xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> set to `false` before allowing a call to <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A>."
  example:
  - "The following example shows an implementation of this method for a control that allows its value to be changed.  \n  \n [!code-vb[UIAIValueProvider_snip#IsReadOnly](~/add/codesnippet/visualbasic/uiaivalueprovider_snip/valuefragment.vb#isreadonly)]\n [!code-cs[UIAIValueProvider_snip#IsReadOnly](~/add/codesnippet/csharp/UIAIValueProvider_snip/ValueFragment.cs#isreadonly)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the value is read-only; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it can be modified."
  overload: System.Windows.Automation.Provider.IValueProvider.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)
  id: SetValue(System.String)
  parent: System.Windows.Automation.Provider.IValueProvider
  langs:
  - csharp
  name: SetValue(String)
  nameWithType: IValueProvider.SetValue(String)
  fullName: System.Windows.Automation.Provider.IValueProvider.SetValue(String)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Sets the value of a control."
  remarks: "Single-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider>. However, multi-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>; instead they provide access to their content by implementing <xref:System.Windows.Automation.Provider.ITextProvider>.       Controls such as <xref:System.Windows.Automation.ControlType.ListItem> and <xref:System.Windows.Automation.ControlType.TreeItem> must implement <xref:System.Windows.Automation.Provider.IValueProvider> if the value of any of the items is editable, regardless of the current edit mode of the control. The parent control must also implement <xref:System.Windows.Automation.Provider.IValueProvider> if the child items are editable.       ![Editable list item.](~/add/media/uia-valuepattern-editable-listitem.PNG &quot;Editable list item.&quot;)   Example of an Editable List Item"
  example:
  - "The following example code demonstrates a custom control that allows its value to be set to a string of limited length.  \n  \n [!code-vb[UIAIValueProvider_snip#SetValue](~/add/codesnippet/visualbasic/uiaivalueprovider_snip/valuefragment.vb#setvalue)]\n [!code-cs[UIAIValueProvider_snip#SetValue](~/add/codesnippet/csharp/UIAIValueProvider_snip/ValueFragment.cs#setvalue)]"
  syntax:
    content: public void SetValue (string value);
    parameters:
    - id: value
      type: System.String
      description: "The value to set. The provider is responsible for converting the value to the appropriate data type."
  overload: System.Windows.Automation.Provider.IValueProvider.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If a new value cannot be converted from a string to a format the control recognizes."
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "When an attempt is made to manipulate a control that is not enabled."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IValueProvider.Value
  id: Value
  parent: System.Windows.Automation.Provider.IValueProvider
  langs:
  - csharp
  name: Value
  nameWithType: IValueProvider.Value
  fullName: System.Windows.Automation.Provider.IValueProvider.Value
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Gets the value of the control."
  remarks: "Single-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider> (in addition to <xref:System.Windows.Automation.Provider.ITextProvider>). However, multi-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>.       To retrieve the textual contents of multi-line edit controls, the controls must implement <xref:System.Windows.Automation.Provider.ITextProvider>. However, <xref:System.Windows.Automation.Provider.ITextProvider> does not support setting the value of a control.       <xref:System.Windows.Automation.Provider.IValueProvider> does not support the retrieval of formatting information or substring values. Implement <xref:System.Windows.Automation.Provider.ITextProvider> in these scenarios."
  example:
  - "The following example shows an implementation of this method for a control that allows its value to be retrieved.  \n  \n [!code-vb[UIAIValueProvider_snip#Value](~/add/codesnippet/visualbasic/uiaivalueprovider_snip/valuefragment.vb#value)]\n [!code-cs[UIAIValueProvider_snip#Value](~/add/codesnippet/csharp/UIAIValueProvider_snip/ValueFragment.cs#value)]"
  syntax:
    content: public string Value { get; }
    return:
      type: System.String
      description: "The value of the control as a string."
  overload: System.Windows.Automation.Provider.IValueProvider.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Automation.ElementNotEnabledException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotEnabledException
  nameWithType: ElementNotEnabledException
  fullName: System.Windows.Automation.ElementNotEnabledException
- uid: System.Windows.Automation.Provider.IValueProvider.IsReadOnly
  parent: System.Windows.Automation.Provider.IValueProvider
  isExternal: false
  name: IsReadOnly
  nameWithType: IValueProvider.IsReadOnly
  fullName: System.Windows.Automation.Provider.IValueProvider.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)
  parent: System.Windows.Automation.Provider.IValueProvider
  isExternal: false
  name: SetValue(String)
  nameWithType: IValueProvider.SetValue(String)
  fullName: System.Windows.Automation.Provider.IValueProvider.SetValue(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Automation.Provider.IValueProvider.Value
  parent: System.Windows.Automation.Provider.IValueProvider
  isExternal: false
  name: Value
  nameWithType: IValueProvider.Value
  fullName: System.Windows.Automation.Provider.IValueProvider.Value
- uid: System.Windows.Automation.Provider.IValueProvider.IsReadOnly*
  parent: System.Windows.Automation.Provider.IValueProvider
  isExternal: false
  name: IsReadOnly
  nameWithType: IValueProvider.IsReadOnly
- uid: System.Windows.Automation.Provider.IValueProvider.SetValue*
  parent: System.Windows.Automation.Provider.IValueProvider
  isExternal: false
  name: SetValue
  nameWithType: IValueProvider.SetValue
- uid: System.Windows.Automation.Provider.IValueProvider.Value*
  parent: System.Windows.Automation.Provider.IValueProvider
  isExternal: false
  name: Value
  nameWithType: IValueProvider.Value
