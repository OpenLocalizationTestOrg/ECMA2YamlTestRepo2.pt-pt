### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA1
  id: HMACSHA1
  children:
  - System.Security.Cryptography.HMACSHA1.#ctor
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  langs:
  - csharp
  name: HMACSHA1
  nameWithType: HMACSHA1
  fullName: System.Security.Cryptography.HMACSHA1
  type: Class
  summary: "Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=&quot;System.Security.Cryptography.SHA1&quot;></xref> hash function."
  remarks: "HMACSHA1 is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.       An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.       Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.       The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government. It produces a 160-bit hash value from an arbitrary length string.       HMACSHA1 accepts keys of any size, and produces a hash sequence that is 160 bits in length."
  example:
  - "The following code example shows how to sign a file by using the HMACSHA1 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA1#1](~/add/codesnippet/csharp/t-system.security.crypto_82_1.cs)]\n [!code-cpp[HMACSHA1#1](~/add/codesnippet/cpp/t-system.security.crypto_82_1.cpp)]\n [!code-vb[HMACSHA1#1](~/add/codesnippet/visualbasic/t-system.security.crypto_82_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA1 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref> class with a randomly generated key."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.       This constructor uses a 64-byte, randomly generated key."
  syntax:
    content: public HMACSHA1 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref> class with the specified key data."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.      > [!NOTE] >  This constructor creates an unmanaged instance of the algorithm by using the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA1> class.
  syntax:
    content: public HMACSHA1 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "The secret key for <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm."
  syntax:
    content: public HMACSHA1 (byte[] key, bool useManagedSha1);
    parameters:
    - id: key
      type: System.Byte[]
      description: "The secret key for <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref> encryption. The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes."
    - id: useManagedSha1
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to use the managed implementation of the SHA1 algorithm (the <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;></xref> class); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to use the unmanaged implementation (the <xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref> class)."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA1.#ctor*
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1
  nameWithType: HMACSHA1.HMACSHA1
