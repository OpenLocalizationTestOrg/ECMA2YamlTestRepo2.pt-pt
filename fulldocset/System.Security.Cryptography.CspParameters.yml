### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CspParameters
  id: CspParameters
  children:
  - System.Security.Cryptography.CspParameters.#ctor
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  - System.Security.Cryptography.CspParameters.CryptoKeySecurity
  - System.Security.Cryptography.CspParameters.Flags
  - System.Security.Cryptography.CspParameters.KeyContainerName
  - System.Security.Cryptography.CspParameters.KeyNumber
  - System.Security.Cryptography.CspParameters.KeyPassword
  - System.Security.Cryptography.CspParameters.ParentWindowHandle
  - System.Security.Cryptography.CspParameters.ProviderName
  - System.Security.Cryptography.CspParameters.ProviderType
  langs:
  - csharp
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
  type: Class
  summary: "Contains parameters that are passed to the cryptographic service provider (CSP) that performs cryptographic computations. This class cannot be inherited."
  remarks: "The CspParameters class represents parameters that you can pass to managed cryptography classes that internally use Microsoft Cryptographic Service Providers (CSPs) from the unmanaged Microsoft Cryptography API (CAPI). Classes with names ending in &quot;CryptoServiceProvider&quot; are managed code wrappers for the corresponding CSP.       Use the CspParameters class to do the following:      -   Specify a particular CSP by passing the provider type to the <xref:System.Security.Cryptography.CspParameters.ProviderType> or <xref:System.Security.Cryptography.CspParameters.ProviderName> property.  You can also specify a CSP using an overload of the constructor.      -   Create a key container where you can store cryptographic keys.  Key containers provide the most secure way to persist cryptographic keys and keep them secret from malicious third parties.  For more information about creating key containers, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md).      -   Specify whether to create an asymmetric signature key or an asymmetric exchange key using the <xref:System.Security.Cryptography.CspParameters.KeyNumber> property."
  example:
  - "The following code example creates a key container using the CspParameters class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/t-system.security.crypto_47_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/t-system.security.crypto_47_1.cs)]  \n  \n The following code example uses the CspParameters class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/t-system.security.crypto_47_2.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/t-system.security.crypto_47_2.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CspParameters
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> class."
  remarks: "This form of CspParameters initializes the <xref:System.Security.Cryptography.CspParameters.ProviderType> field to a value of `24`, which specifies the PROV_RSA_AES provider.  This default provider is compatible with the <xref:System.Security.Cryptography.Aes> algorithm.       For information about other provider types, see the <xref:System.Security.Cryptography.CspParameters.ProviderType> field."
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_108_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_108_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_108_1.cs)]"
  syntax:
    content: public CspParameters ();
    parameters: []
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> class with the specified provider type code."
  remarks: "Use the CspParameters constructor to specify a provider type by passing a numeric value that represents that provider.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:      -   To specify a provider compatible with the <xref:System.Security.Cryptography.RSA> algorithm, pass a value of `1`to the `dwTypeIn` parameter.      -   To specify a provider compatible with the <xref:System.Security.Cryptography.DSA> algorithm, pass a value of `13`to the `dwTypeIn` parameter.       For information about other provider type values, see the <xref:System.Security.Cryptography.CspParameters.ProviderType> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library."
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_129_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_129_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_129_1.cs)]"
  syntax:
    content: public CspParameters (int dwTypeIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "A provider type code that specifies the kind of provider to create."
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> class with the specified provider type code and name."
  remarks: "Use the CspParameters constructor to specify a provider type and name.       Specify a provider type by passing a numeric value that represents the desired provider type.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:      -   To specify a provider compatible with the <xref:System.Security.Cryptography.RSA> algorithm, pass a value of `1`to the `dwTypeIn` parameter.      -   To specify a provider compatible with the <xref:System.Security.Cryptography.DSA> algorithm, pass a value of `13`to the `dwTypeIn` parameter.       For information about other provider type values, see the <xref:System.Security.Cryptography.CspParameters.ProviderType> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library."
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.CspParameters> class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/3115faba-ad85-4109-97d8-_1.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/3115faba-ad85-4109-97d8-_1.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/3115faba-ad85-4109-97d8-_1.vb)]"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "A provider type code that specifies the kind of provider to create."
    - id: strProviderNameIn
      type: System.String
      description: "A provider name."
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.String,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> class with the specified provider type code and name, and the specified container name."
  remarks: "Use the CspParameters constructor to specify a provider type, a provider name, and a container name.       You can use the container name to retrieve a key within that container.       Specify a provider type by passing a numeric value that represents the desired provider type.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:      -   To specify a provider compatible with the <xref:System.Security.Cryptography.RSA> algorithm, pass a value of `1`to the `dwTypeIn` parameter.      -   To specify a provider compatible with the <xref:System.Security.Cryptography.DSA> algorithm, pass a value of `13`to the `dwTypeIn` parameter.       For information about other provider type values, see the <xref:System.Security.Cryptography.CspParameters.ProviderType> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library."
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "The provider type code that specifies the kind of provider to create."
    - id: strProviderNameIn
      type: System.String
      description: "A provider name."
    - id: strContainerNameIn
      type: System.String
      description: "A container name."
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> class using a provider type, a provider name, a container name, access information, and a handle to an unmanaged smart card password dialog."
  remarks: "You can use the container name to retrieve a key within that container.       Specify a provider type by passing a numeric value that represents the desired provider type.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:      -   To specify a provider compatible with the <xref:System.Security.Cryptography.RSA> algorithm, pass a value of `1`to the `dwTypeIn` parameter.      -   To specify a provider compatible with the <xref:System.Security.Cryptography.DSA> algorithm, pass a value of `13`to the `dwTypeIn` parameter.       For information about other provider type values, see the <xref:System.Security.Cryptography.CspParameters.ProviderType> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library."
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle);
    parameters:
    - id: providerType
      type: System.Int32
      description: "The provider type code that specifies the kind of provider to create."
    - id: providerName
      type: System.String
      description: "A provider name."
    - id: keyContainerName
      type: System.String
      description: "A container name."
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "An object that represents access rights and audit rules for the container."
    - id: parentWindowHandle
      type: System.IntPtr
      description: "A handle to the parent window for a smart card password dialog."
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> class using a provider type, a provider name, a container name, access information, and a password associated with a smart card key."
  remarks: "You can use the container name to retrieve a key within that container.       Specify a provider type by passing a numeric value that represents the desired provider type.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:      -   To specify a provider compatible with the <xref:System.Security.Cryptography.RSA> algorithm, pass a value of `1`to the `dwTypeIn` parameter.      -   To specify a provider compatible with the <xref:System.Security.Cryptography.DSA> algorithm, pass a value of `13`to the `dwTypeIn` parameter.       For information about other provider type values, see the <xref:System.Security.Cryptography.CspParameters.ProviderType> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library."
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, System.Security.SecureString keyPassword);
    parameters:
    - id: providerType
      type: System.Int32
      description: "The provider type code that specifies the kind of provider to create."
    - id: providerName
      type: System.String
      description: "A provider name."
    - id: keyContainerName
      type: System.String
      description: "A container name."
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "An object that represents access rights and audit rules for a container."
    - id: keyPassword
      type: System.Security.SecureString
      description: "A password associated with a smart card key."
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  id: CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets a <xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;></xref> object that represents access rights and audit rules for a container."
  remarks: "Use the CryptoKeySecurity property to specify a <xref:System.Security.AccessControl.CryptoKeySecurity> object that manages the creation of discretionary access control lists (DACLS) and system access control lists (SACLS) for a container."
  syntax:
    content: public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; set; }
    return:
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;></xref> object that represents access rights and audit rules for a container."
  overload: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.Flags
  id: Flags
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Represents the flags for <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref> that modify the behavior of the cryptographic service provider (CSP)."
  syntax:
    content: public System.Security.Cryptography.CspProviderFlags Flags { get; set; }
    return:
      type: System.Security.Cryptography.CspProviderFlags
      description: "An enumeration value, or a bitwise combination of enumeration values."
  overload: System.Security.Cryptography.CspParameters.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Value is not a valid enumeration value."
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Represents the key container name for <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>."
  remarks: "Use the KeyContainerName field to specify a name for your key container.  You can use the container name to retrieve the persisted key within that container.       For more information about creating key containers, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/f-system.security.crypto_6_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/f-system.security.crypto_6_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/f-system.security.crypto_6_1.cs)]"
  syntax:
    content: public string KeyContainerName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  id: KeyNumber
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Specifies whether an asymmetric key is created as a signature key or an exchange key."
  remarks: "The KeyNumber field initializes the <xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A> property when you initialize a <xref:System.Security.Cryptography.CspKeyContainerInfo> object with a <xref:System.Security.Cryptography.CspParameters> object.       An exchange key is an asymmetric key pair used to encrypt session keys so that they can be safely stored and exchanged with other users.  You can use the <xref:System.Security.Cryptography.KeyNumber> value (`1`) to specify an exchange key.  This value corresponds to the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).       A signature key is an asymmetric key pair used for authenticating digitally signed messages or files.  You can use the <xref:System.Security.Cryptography.KeyNumber> value (`2`) to specify a signature key.  This value corresponds to the `AT_SIGNATURE` value used in CAPI.       By default, the KeyNumber field specifies an exchange key."
  example:
  - "The following code example demonstrates how to use the <xref:System.Security.Cryptography.KeyNumber> enumeration to specify a key type for an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  \n  \n [!code-cs[Cryptography.KeyNumber#1](~/add/codesnippet/csharp/f-system.security.crypto_8_1.cs)]\n [!code-cpp[Cryptography.KeyNumber#1](~/add/codesnippet/cpp/f-system.security.crypto_8_1.cpp)]\n [!code-vb[Cryptography.KeyNumber#1](~/add/codesnippet/visualbasic/f-system.security.crypto_8_1.vb)]"
  syntax:
    content: public int KeyNumber;
    return:
      type: System.Int32
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  id: KeyPassword
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets a password associated with a smart card key."
  remarks: "Use the KeyPassword property to supply a password for a smart card key.  When you specify a password using this property, a password dialog box will not be presented to the user."
  syntax:
    content: public System.Security.SecureString KeyPassword { get; set; }
    return:
      type: System.Security.SecureString
      description: "A password associated with a smart card key."
  overload: System.Security.Cryptography.CspParameters.KeyPassword*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets a handle to the unmanaged parent window for a smart card password dialog box."
  remarks: "Use the ParentWindowHandle property to specify a handle to the unmanaged parent window for a smart card password dialog box.  When you specify a handle using this property, a smart card password dialog box will be presented to the user.       You can avoid presenting a smart card password dialog box by explicitly specifying a password by using the <xref:System.Security.Cryptography.CspParameters.KeyPassword%2A> property."
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "A handle to the parent window for a smart card password dialog box."
  overload: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderName
  id: ProviderName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Represents the provider name for <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>."
  remarks: "See the Microsoft Cryptography API (CAPI) documentation in the MSDN library for details on provider names."
  syntax:
    content: public string ProviderName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderType
  id: ProviderType
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Represents the provider type code for <xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>."
  remarks: "Use the ProviderType field to specify a provider type by passing a numeric value that represents that provider.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:      -   To specify a provider compatible with the <xref:System.Security.Cryptography.RSA> class, pass a value of `1`.      -   To specify a provider compatible with the <xref:System.Security.Cryptography.DSA> class, pass a value of `13`.       The following table lists the provider types and their corresponding numeric values defined in the WinCrypt.h header file.      |Provider Type|Numeric Value|   |-------------------|-------------------|   |`PROV_RSA_FULL`|1|   |`PROV_RSA_SIG`|2|   |`PROV_DSS`|3|   |`PROV_FORTEZZA`|4|   |`PROV_MS_EXCHANGE`|5|   |`PROV_SSL`|6|   |`PROV_RSA_SCHANNEL`|12|   |`PROV_DSS_DH`|13|   |`PROV_EC_ECDSA_SIG`|14|   |`PROV_EC_ECNRA_SIG`|15|   |`PROV_EC_ECDSA_FULL`|16|   |`PROV_EC_ECNRA_FULL`|17|   |`PROV_DH_SCHANNEL`|18|   |`PROV_SPYRUS_LYNKS`|20|   |`PROV_RNG`|21|   |`PROV_INTEL_SEC`|22|   |`PROV_REPLACE_OWF`|23|   |`PROV_RSA_AES`|24|       For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library."
  syntax:
    content: public int ProviderType;
    return:
      type: System.Int32
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CspParameters.#ctor
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
- uid: System.Security.AccessControl.CryptoKeySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CryptoKeySecurity
  fullName: System.Security.AccessControl.CryptoKeySecurity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
- uid: System.Security.Cryptography.CspProviderFlags
  parent: System.Security.Cryptography
  isExternal: false
  name: CspProviderFlags
  nameWithType: CspProviderFlags
  fullName: System.Security.Cryptography.CspProviderFlags
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
- uid: System.Security.Cryptography.CspParameters.ProviderName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
- uid: System.Security.Cryptography.CspParameters.ProviderType
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
- uid: System.Security.Cryptography.CspParameters.#ctor*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters.CspParameters
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
- uid: System.Security.Cryptography.CspParameters.KeyPassword*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
