### YamlMime:ManagedReference
items:
- uid: System.Management.ManagementObjectCollection
  id: ManagementObjectCollection
  children:
  - System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)
  - System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)
  - System.Management.ManagementObjectCollection.Count
  - System.Management.ManagementObjectCollection.Dispose
  - System.Management.ManagementObjectCollection.Finalize
  - System.Management.ManagementObjectCollection.GetEnumerator
  - System.Management.ManagementObjectCollection.IsSynchronized
  - System.Management.ManagementObjectCollection.SyncRoot
  - System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ManagementObjectCollection
  nameWithType: ManagementObjectCollection
  fullName: System.Management.ManagementObjectCollection
  type: Class
  summary: "Represents different collections of management objects retrieved through WMI. The objects in this collection are of <xref href=&quot;System.Management.ManagementBaseObject&quot;></xref>-derived types, including <xref href=&quot;System.Management.ManagementObject&quot;></xref> and <xref href=&quot;System.Management.ManagementClass&quot;></xref>. The collection can be the result of a WMI query executed through a <xref href=&quot;System.Management.ManagementObjectSearcher&quot;></xref>, or an enumeration of management objects of a specified type retrieved through a <xref href=&quot;System.Management.ManagementClass&quot;></xref> representing that type. In addition, this can be a collection of management objects related in a specified way to a specific management object - in this case the collection would be retrieved through a method such as <xref href=&quot;System.Management.ManagementObject.GetRelated&quot;></xref>. The collection can be walked using the <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator> and objects in it can be inspected or manipulated for various management tasks."
  syntax:
    content: 'public class ManagementObjectCollection : IDisposable, System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ManagementObjectCollection.CopyTo(Array,Int32)
  fullName: System.Management.ManagementObjectCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Copies the collection to an array."
  remarks: "## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "An array to copy to."
    - id: index
      type: System.Int32
      description: "The index to start from."
  overload: System.Management.ManagementObjectCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)
  id: CopyTo(System.Management.ManagementBaseObject[],System.Int32)
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: CopyTo(ManagementBaseObject[],Int32)
  nameWithType: ManagementObjectCollection.CopyTo(ManagementBaseObject[],Int32)
  fullName: System.Management.ManagementObjectCollection.CopyTo(ManagementBaseObject[],Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Copies the items in the collection to a <xref href=&quot;System.Management.ManagementBaseObject&quot;></xref> array."
  remarks: "## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void CopyTo (System.Management.ManagementBaseObject[] objectCollection, int index);
    parameters:
    - id: objectCollection
      type: System.Management.ManagementBaseObject[]
      description: "The target array."
    - id: index
      type: System.Int32
      description: "The index to start from."
  overload: System.Management.ManagementObjectCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.Count
  id: Count
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: Count
  nameWithType: ManagementObjectCollection.Count
  fullName: System.Management.ManagementObjectCollection.Count
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Gets a value indicating the number of objects in the collection."
  remarks: "This property is very expensive - it requires that all members of the collection be enumerated.      ## Property Value    The number of objects in the collection.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Returns an <xref:System.Int32> value indicating the number of objects in the collection."
  overload: System.Management.ManagementObjectCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.Dispose
  id: Dispose
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: Dispose()
  nameWithType: ManagementObjectCollection.Dispose()
  fullName: System.Management.ManagementObjectCollection.Dispose()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Releases resources associated with this object. After this method has been called, an attempt to use this object will result in an <xref:System.ObjectDisposedException> being thrown."
  remarks: "## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Management.ManagementObjectCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.Finalize
  id: Finalize
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: ManagementObjectCollection.Finalize()
  fullName: System.Management.ManagementObjectCollection.Finalize()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Disposes of resources the object is holding. This is the destructor for the object. Finalizers are expressed using destructor syntax."
  remarks: "## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: ~ManagementObjectCollection ();
    parameters: []
  overload: System.Management.ManagementObjectCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ManagementObjectCollection.GetEnumerator()
  fullName: System.Management.ManagementObjectCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Returns the enumerator for the collection."
  remarks: "You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.ManagementObjectCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.       Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to  <xref:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset%2A>.       If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Management.ManagementObjectCollection.ManagementObjectEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Management.ManagementObjectCollection.ManagementObjectEnumerator
      description: "An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection."
  overload: System.Management.ManagementObjectCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ManagementObjectCollection.IsSynchronized
  fullName: System.Management.ManagementObjectCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Gets a value indicating whether the object is synchronized."
  remarks: "## Property Value    `true`, if the object is synchronized, otherwise `false`.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Returns a <xref:System.Boolean> value indicating whether the object is synchronized."
  overload: System.Management.ManagementObjectCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.SyncRoot
  id: SyncRoot
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ManagementObjectCollection.SyncRoot
  fullName: System.Management.ManagementObjectCollection.SyncRoot
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Gets the object to be used for synchronization."
  remarks: "## Property Value    The object to be used for synchronization.      ## .NET Framework Security    Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Returns an <xref:System.Object> value that represents the object to be used for synchronization."
  overload: System.Management.ManagementObjectCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Management.ManagementObjectCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=&quot;System.Management.ManagementObjectCollection&quot;></xref>."
  remarks: "[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Management.ManagementObjectCollection&quot;></xref>."
  overload: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ManagementObjectCollection.CopyTo(Array,Int32)
  fullName: System.Management.ManagementObjectCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: CopyTo(ManagementBaseObject[],Int32)
  nameWithType: ManagementObjectCollection.CopyTo(ManagementBaseObject[],Int32)
  fullName: System.Management.ManagementObjectCollection.CopyTo(ManagementBaseObject[],Int32)
- uid: System.Management.ManagementBaseObject[]
  parent: System.Management
  isExternal: false
  name: ManagementBaseObject
  nameWithType: ManagementBaseObject
  fullName: System.Management.ManagementBaseObject[]
  spec.csharp:
  - uid: System.Management.ManagementBaseObject
    name: ManagementBaseObject
    nameWithType: ManagementBaseObject
    fullName: ManagementBaseObject[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Management.ManagementObjectCollection.Count
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: Count
  nameWithType: ManagementObjectCollection.Count
  fullName: System.Management.ManagementObjectCollection.Count
- uid: System.Management.ManagementObjectCollection.Dispose
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: Dispose()
  nameWithType: ManagementObjectCollection.Dispose()
  fullName: System.Management.ManagementObjectCollection.Dispose()
- uid: System.Management.ManagementObjectCollection.Finalize
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: Finalize()
  nameWithType: ManagementObjectCollection.Finalize()
  fullName: System.Management.ManagementObjectCollection.Finalize()
- uid: System.Management.ManagementObjectCollection.GetEnumerator
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ManagementObjectCollection.GetEnumerator()
  fullName: System.Management.ManagementObjectCollection.GetEnumerator()
- uid: System.Management.ManagementObjectCollection.ManagementObjectEnumerator
  parent: System.Management
  isExternal: false
  name: ManagementObjectCollection+ManagementObjectEnumerator
  nameWithType: ManagementObjectCollection+ManagementObjectEnumerator
  fullName: System.Management.ManagementObjectCollection+ManagementObjectEnumerator
- uid: System.Management.ManagementObjectCollection.IsSynchronized
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ManagementObjectCollection.IsSynchronized
  fullName: System.Management.ManagementObjectCollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Management.ManagementObjectCollection.SyncRoot
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: SyncRoot
  nameWithType: ManagementObjectCollection.SyncRoot
  fullName: System.Management.ManagementObjectCollection.SyncRoot
- uid: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Management.ManagementObjectCollection.CopyTo*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: CopyTo
  nameWithType: ManagementObjectCollection.CopyTo
- uid: System.Management.ManagementObjectCollection.Count*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: Count
  nameWithType: ManagementObjectCollection.Count
- uid: System.Management.ManagementObjectCollection.Dispose*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: Dispose
  nameWithType: ManagementObjectCollection.Dispose
- uid: System.Management.ManagementObjectCollection.Finalize*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: Finalize
  nameWithType: ManagementObjectCollection.Finalize
- uid: System.Management.ManagementObjectCollection.GetEnumerator*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: ManagementObjectCollection.GetEnumerator
- uid: System.Management.ManagementObjectCollection.IsSynchronized*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ManagementObjectCollection.IsSynchronized
- uid: System.Management.ManagementObjectCollection.SyncRoot*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: SyncRoot
  nameWithType: ManagementObjectCollection.SyncRoot
- uid: System.Management.ManagementObjectCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Management.ManagementObjectCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ManagementObjectCollection.System.Collections.IEnumerable.GetEnumerator
