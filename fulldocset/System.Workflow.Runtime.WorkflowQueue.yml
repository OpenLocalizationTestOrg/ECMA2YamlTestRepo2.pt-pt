### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowQueue
  id: WorkflowQueue
  children:
  - System.Workflow.Runtime.WorkflowQueue.Count
  - System.Workflow.Runtime.WorkflowQueue.Dequeue
  - System.Workflow.Runtime.WorkflowQueue.Enabled
  - System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)
  - System.Workflow.Runtime.WorkflowQueue.Peek
  - System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  - System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  - System.Workflow.Runtime.WorkflowQueue.QueueName
  - System.Workflow.Runtime.WorkflowQueue.QueuingService
  - System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  - System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  langs:
  - csharp
  name: WorkflowQueue
  nameWithType: WorkflowQueue
  fullName: System.Workflow.Runtime.WorkflowQueue
  type: Class
  summary: "Represents a workflow queue."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       Workflow queues are used to pass messages between a host or host services and activities in a workflow. Any activity can create a WorkflowQueue by calling <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A?displayProperty=fullName>, and a host, a service, or another activity can call <xref:System.Workflow.Runtime.WorkflowQueue.Enqueue%2A> to add an item to that WorkflowQueue. You can subscribe to the <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> event to be notified when an item arrives on the WorkflowQueue. You can use <xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A> to examine an item at the beginning of the WorkflowQueue and <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> to remove an item from the WorkflowQueue. Each WorkflowQueue is associated with a <xref:System.Workflow.Runtime.WorkflowQueuingService> that you can use to perform other management operations on the WorkflowQueue, such as deleting the queue. <xref:System.Workflow.Runtime.WorkflowQueue.QueuingService%2A> exposes the <xref:System.Workflow.Runtime.WorkflowQueuingService> associated with this WorkflowQueue."
  example:
  - "The following code example demonstrates how you can create a WorkflowQueue by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> property to determine whether any messages exist in the current queue. Finally, the code uses the <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> method to remove and return the first object in the queue.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#227](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#227)]\n [!code-vb[WF_Samples#227](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#227)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public class WorkflowQueue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Count
  id: Count
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Count
  nameWithType: WorkflowQueue.Count
  fullName: System.Workflow.Runtime.WorkflowQueue.Count
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets the number of items contained in the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  remarks: ''
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the Count property to determine whether any messages exist in the current queue. Finally, the code uses the <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> method to remove and return the first object in the queue.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#227](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#227)]\n [!code-vb[WF_Samples#227](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#227)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of items in the workflow queue."
  overload: System.Workflow.Runtime.WorkflowQueue.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Dequeue
  id: Dequeue
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Dequeue()
  nameWithType: WorkflowQueue.Dequeue()
  fullName: System.Workflow.Runtime.WorkflowQueue.Dequeue()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Removes and returns the object at the beginning of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  remarks: "You can check <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> to determine whether the <xref:System.Workflow.Runtime.WorkflowQueue> is empty before you call Dequeue, or you can catch the <xref:System.InvalidOperationException>."
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> property to determine whether any messages exist in the current queue. Finally, the code uses the Dequeue method to remove and return the first object in the queue.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#227](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#227)]\n [!code-vb[WF_Samples#227](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#227)]"
  syntax:
    content: public object Dequeue ();
    parameters: []
    return:
      type: System.Object
      description: "The object that is removed from the beginning of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Dequeue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> is empty."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Enabled
  id: Enabled
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Enabled
  nameWithType: WorkflowQueue.Enabled
  fullName: System.Workflow.Runtime.WorkflowQueue.Enabled
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets or sets a value that specifies whether the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> is enabled."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> is enabled; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)
  id: Enqueue(System.Object)
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Enqueue(Object)
  nameWithType: WorkflowQueue.Enqueue(Object)
  fullName: System.Workflow.Runtime.WorkflowQueue.Enqueue(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Adds an object to the end of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  syntax:
    content: public void Enqueue (object item);
    parameters:
    - id: item
      type: System.Object
      description: "The object to add to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Enqueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> is not enabled."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Peek
  id: Peek
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Peek()
  nameWithType: WorkflowQueue.Peek()
  fullName: System.Workflow.Runtime.WorkflowQueue.Peek()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Returns the object at the beginning of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> without removing it."
  remarks: "This method is similar to the <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> method, but Peek does not modify the <xref:System.Workflow.Runtime.WorkflowQueue>. You can check <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> to determine whether the <xref:System.Workflow.Runtime.WorkflowQueue> is empty before you call <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>, or you can catch the <xref:System.InvalidOperationException>."
  syntax:
    content: public object Peek ();
    parameters: []
    return:
      type: System.Object
      description: "The object at the beginning of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Peek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> is empty."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  id: QueueItemArrived
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueueItemArrived
  nameWithType: WorkflowQueue.QueueItemArrived
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  type: Event
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Occurs when an item is delivered on this <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  remarks: "This event is only used for processing that must occur synchronously with event delivery to the workflow instance. The event handler may execute on a non-workflow thread so access to any shared workflow object, for example, any <xref:System.Workflow.ComponentModel.DependencyObject>, must be protected."
  syntax:
    content: public event EventHandler<System.Workflow.ComponentModel.QueueEventArgs> QueueItemArrived;
    return:
      type: System.EventHandler{System.Workflow.ComponentModel.QueueEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  id: QueueItemAvailable
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueueItemAvailable
  nameWithType: WorkflowQueue.QueueItemAvailable
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  type: Event
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Occurs when an item is available on this <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  remarks: "The QueueItemAvailable event is raised in an asynchronous manner. The sender for the QueueItemAvailable event will be the <xref:System.Workflow.ComponentModel.ActivityExecutionContext> of the subscribing <xref:System.Workflow.ComponentModel.Activity>."
  syntax:
    content: public event EventHandler<System.Workflow.ComponentModel.QueueEventArgs> QueueItemAvailable;
    return:
      type: System.EventHandler{System.Workflow.ComponentModel.QueueEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueueName
  id: QueueName
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueueName
  nameWithType: WorkflowQueue.QueueName
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueName
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets the name of the workflow queue."
  remarks: "The name of the workflow queue is set by the <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> method."
  syntax:
    content: public IComparable QueueName { get; }
    return:
      type: System.IComparable
      description: "The name of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.QueueName*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueuingService
  id: QueuingService
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueuingService
  nameWithType: WorkflowQueue.QueuingService
  fullName: System.Workflow.Runtime.WorkflowQueue.QueuingService
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets the queuing service associated with this <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  syntax:
    content: public System.Workflow.Runtime.WorkflowQueuingService QueuingService { get; }
    return:
      type: System.Workflow.Runtime.WorkflowQueuingService
      description: "A <xref href=&quot;System.Workflow.Runtime.WorkflowQueuingService&quot;></xref> that represents the queuing service associated with this <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.QueuingService*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Registers a subscriber to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemArrived&quot;></xref> event."
  syntax:
    content: public void RegisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "A subscriber for <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;></xref> that implements the &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; interface."
  overload: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Registers a subscriber to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;></xref> event."
  remarks: ''
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the RegisterForQueueItemAvailable to register the specified listener.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#225](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#225)]\n [!code-vb[WF_Samples#225](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#225)]"
  syntax:
    content: public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "A subscriber for <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;></xref> that implements the &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; interface."
  overload: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  id: RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Registers a subscriber to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;></xref> event."
  remarks: "If the qualified name of the subscribing activity is supplied by `subscriberQualifiedName`, it is returned in <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> of <xref:System.Workflow.Runtime.WorkflowQueueInfo> associated with this queue when <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A?displayProperty=fullName> is called."
  syntax:
    content: public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener, string subscriberQualifiedName);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "A subscriber for <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;></xref> that implements the &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; interface."
    - id: subscriberQualifiedName
      type: System.String
      description: "The <xref:System.Workflow.ComponentModel.Activity.QualifiedName*> of the activity that is subscribing to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;></xref> event or a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  overload: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>)."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Unregisters a subscriber to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemArrived&quot;></xref> event."
  remarks: "This method is reserved for internal use only."
  syntax:
    content: public void UnregisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "A subscriber for <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;></xref> that implements the &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; interface."
  overload: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Unregisters a subscriber to the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;></xref> event."
  remarks: ''
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the UnregisterForQueueItemAvailable to unregister the specified listener.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#226](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#226)]\n [!code-vb[WF_Samples#226](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#226)]"
  syntax:
    content: public void UnregisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "A subscriber for <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;></xref> that implements the &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; interface."
  overload: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowQueue.Count
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Count
  nameWithType: WorkflowQueue.Count
  fullName: System.Workflow.Runtime.WorkflowQueue.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowQueue.Dequeue
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Dequeue()
  nameWithType: WorkflowQueue.Dequeue()
  fullName: System.Workflow.Runtime.WorkflowQueue.Dequeue()
- uid: System.Workflow.Runtime.WorkflowQueue.Enabled
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enabled
  nameWithType: WorkflowQueue.Enabled
  fullName: System.Workflow.Runtime.WorkflowQueue.Enabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enqueue(Object)
  nameWithType: WorkflowQueue.Enqueue(Object)
  fullName: System.Workflow.Runtime.WorkflowQueue.Enqueue(Object)
- uid: System.Workflow.Runtime.WorkflowQueue.Peek
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Peek()
  nameWithType: WorkflowQueue.Peek()
  fullName: System.Workflow.Runtime.WorkflowQueue.Peek()
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueItemArrived
  nameWithType: WorkflowQueue.QueueItemArrived
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
- uid: System.EventHandler{System.Workflow.ComponentModel.QueueEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<QueueEventArgs>
  nameWithType: EventHandler<QueueEventArgs>
  fullName: System.EventHandler<System.Workflow.ComponentModel.QueueEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Workflow.ComponentModel.QueueEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.QueueEventArgs
    name: QueueEventArgs
    nameWithType: QueueEventArgs
    fullName: QueueEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueItemAvailable
  nameWithType: WorkflowQueue.QueueItemAvailable
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
- uid: System.Workflow.Runtime.WorkflowQueue.QueueName
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueName
  nameWithType: WorkflowQueue.QueueName
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueName
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.WorkflowQueue.QueuingService
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueuingService
  nameWithType: WorkflowQueue.QueuingService
  fullName: System.Workflow.Runtime.WorkflowQueue.QueuingService
- uid: System.Workflow.Runtime.WorkflowQueuingService
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowQueuingService
  nameWithType: WorkflowQueuingService
  fullName: System.Workflow.Runtime.WorkflowQueuingService
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: IActivityEventListener<QueueEventArgs>
  nameWithType: IActivityEventListener<QueueEventArgs>
  fullName: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  spec.csharp:
  - uid: System.Workflow.ComponentModel.IActivityEventListener`1
    name: IActivityEventListener
    nameWithType: IActivityEventListener
    fullName: IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.QueueEventArgs
    name: QueueEventArgs
    nameWithType: QueueEventArgs
    fullName: QueueEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Runtime.WorkflowQueue.Count*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Count
  nameWithType: WorkflowQueue.Count
- uid: System.Workflow.Runtime.WorkflowQueue.Dequeue*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Dequeue
  nameWithType: WorkflowQueue.Dequeue
- uid: System.Workflow.Runtime.WorkflowQueue.Enabled*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enabled
  nameWithType: WorkflowQueue.Enabled
- uid: System.Workflow.Runtime.WorkflowQueue.Enqueue*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enqueue
  nameWithType: WorkflowQueue.Enqueue
- uid: System.Workflow.Runtime.WorkflowQueue.Peek*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Peek
  nameWithType: WorkflowQueue.Peek
- uid: System.Workflow.Runtime.WorkflowQueue.QueueName*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueName
  nameWithType: WorkflowQueue.QueueName
- uid: System.Workflow.Runtime.WorkflowQueue.QueuingService*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueuingService
  nameWithType: WorkflowQueue.QueuingService
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemArrived
  nameWithType: WorkflowQueue.RegisterForQueueItemArrived
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemAvailable
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemArrived
  nameWithType: WorkflowQueue.UnregisterForQueueItemArrived
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemAvailable
  nameWithType: WorkflowQueue.UnregisterForQueueItemAvailable
