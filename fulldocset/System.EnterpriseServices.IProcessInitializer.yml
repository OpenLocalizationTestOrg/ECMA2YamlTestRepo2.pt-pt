### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.IProcessInitializer
  id: IProcessInitializer
  children:
  - System.EnterpriseServices.IProcessInitializer.Shutdown
  - System.EnterpriseServices.IProcessInitializer.Startup(System.Object)
  langs:
  - csharp
  name: IProcessInitializer
  nameWithType: IProcessInitializer
  fullName: System.EnterpriseServices.IProcessInitializer
  type: Interface
  summary: "Métodos de suporta que podem ser chamados quando um componente COM arranque ou encerramento."
  remarks: "Implemente os métodos de interface IProcessInitializer em componentes executados se de que pretende executar a inicialização ou um código de encerramento quando um processo de servidor (Dllhost.exe) é iniciado ou encerra, respetivamente.       COM+ fornece `Startup` e `Shutdown` eventos quando Dllhost.exe inicia e termina. Esta funcionalidade permite que os componentes COM+ que se encontram instalados numa aplicação de servidor COM+ (referida como componentes de servidor hereafter) para executar a inicialização personalizada e limpar o código. Uma instância de cada componente que implementa a interface IProcessInitializer será criada e armazenada durante o processo e os métodos de interface chamada durante o arranque e encerramento. Quando implementada num <xref:System.EnterpriseServices.ServicedComponent>, durante o registo do componente, o `InitializesServerApplication` parâmetro o `COMAdminCatalogObject` dentro os componentes de coleção está definida para `true`.</xref:System.EnterpriseServices.ServicedComponent>       Utilizar o `Startup` e `Shutdown` eventos, pode inicializar recursos, criar ligações, inicializar partilhado a dados e executar o código de limpeza. No entanto, não tem acesso Estados que são específicos para COM+ porque as instâncias dos componentes de servidor ainda não tem sido criadas. Além disso, o código de `Startup` e `Shutdown` eventos devem devolver mais rapidamente possível, porque o sistema aguarda apenas 90 segundos para o Dllhost.exe para se preparar para aceitar ativações depois do sistema inicia o processo. Se Dllhost.exe não assinalar a que está pronto dentro de 90 segundos, o sistema termina o processo; Assim, todos os inicialização tem de concluir este intervalo de tempo de processamento. Cada componente do servidor que participa no inicialização tem de suportar a interface IProcessInitializer. No arranque DllHost.exe, COM+ cria todos os componentes de servidor que pediu este serviço, chamadas `QueryInterface` para a IProcessInitializer interface e chamadas a <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>função.</xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> Da mesma forma, quando o processo de DllHost.exe é encerrado, aquele invoca o <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>função nessas anteriormente armazenado apontadores de interface.</xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IProcessInitializer
  implements: []
  platform:
  - net462
- uid: System.EnterpriseServices.IProcessInitializer.Shutdown
  id: Shutdown
  parent: System.EnterpriseServices.IProcessInitializer
  langs:
  - csharp
  name: Shutdown()
  nameWithType: IProcessInitializer.Shutdown()
  fullName: System.EnterpriseServices.IProcessInitializer.Shutdown()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "Executa as ações de encerramento. Chamado quando Dllhost.exe é encerrado."
  remarks: "Encerramento não for chamado durante um failfast ou outros eventos de encerramento catastrófica."
  syntax:
    content: public void Shutdown ();
    parameters: []
  overload: System.EnterpriseServices.IProcessInitializer.Shutdown*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.IProcessInitializer.Startup(System.Object)
  id: Startup(System.Object)
  parent: System.EnterpriseServices.IProcessInitializer
  langs:
  - csharp
  name: Startup(Object)
  nameWithType: IProcessInitializer.Startup(Object)
  fullName: System.EnterpriseServices.IProcessInitializer.Startup(Object)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "Efetua inicialização no arranque. Chamado quando é iniciada Dllhost.exe."
  remarks: "O objeto referenciado pelo `punkProcessControl` implementa um <xref:System.EnterpriseServices.IProcessInitControl>interface.</xref:System.EnterpriseServices.IProcessInitControl> <xref:System.EnterpriseServices.IProcessInitControl>suporta o único método <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A></xref:System.EnterpriseServices.IProcessInitControl>       O código de inicialização no arranque pode chamar o <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, com o limite de tempo definido igual ao número de segundos restante antes do arranque de vezes o componente fora.</xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>"
  syntax:
    content: public void Startup (object punkProcessControl);
    parameters:
    - id: punkProcessControl
      type: System.Object
      description: "No Microsoft Windows XP, um ponteiro para o <xref uid=&quot;langword_csharp_IUnknown&quot; name=&quot;IUnknown&quot; href=&quot;&quot;> </xref> interface do componente COM a iniciar. No Microsoft Windows 2000, este argumento é sempre <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.EnterpriseServices.IProcessInitializer.Startup*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EnterpriseServices.IProcessInitializer.Shutdown
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Shutdown()
  nameWithType: IProcessInitializer.Shutdown()
  fullName: System.EnterpriseServices.IProcessInitializer.Shutdown()
- uid: System.EnterpriseServices.IProcessInitializer.Startup(System.Object)
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Startup(Object)
  nameWithType: IProcessInitializer.Startup(Object)
  fullName: System.EnterpriseServices.IProcessInitializer.Startup(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EnterpriseServices.IProcessInitializer.Shutdown*
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Shutdown
  nameWithType: IProcessInitializer.Shutdown
- uid: System.EnterpriseServices.IProcessInitializer.Startup*
  parent: System.EnterpriseServices.IProcessInitializer
  isExternal: false
  name: Startup
  nameWithType: IProcessInitializer.Startup
