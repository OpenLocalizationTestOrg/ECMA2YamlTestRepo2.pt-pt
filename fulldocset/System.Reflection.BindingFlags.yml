### YamlMime:ManagedReference
items:
- uid: System.Reflection.BindingFlags
  id: BindingFlags
  children:
  - System.Reflection.BindingFlags.CreateInstance
  - System.Reflection.BindingFlags.DeclaredOnly
  - System.Reflection.BindingFlags.Default
  - System.Reflection.BindingFlags.ExactBinding
  - System.Reflection.BindingFlags.FlattenHierarchy
  - System.Reflection.BindingFlags.GetField
  - System.Reflection.BindingFlags.GetProperty
  - System.Reflection.BindingFlags.IgnoreCase
  - System.Reflection.BindingFlags.IgnoreReturn
  - System.Reflection.BindingFlags.Instance
  - System.Reflection.BindingFlags.InvokeMethod
  - System.Reflection.BindingFlags.NonPublic
  - System.Reflection.BindingFlags.OptionalParamBinding
  - System.Reflection.BindingFlags.Public
  - System.Reflection.BindingFlags.PutDispProperty
  - System.Reflection.BindingFlags.PutRefDispProperty
  - System.Reflection.BindingFlags.SetField
  - System.Reflection.BindingFlags.SetProperty
  - System.Reflection.BindingFlags.Static
  - System.Reflection.BindingFlags.SuppressChangeType
  langs:
  - csharp
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
  type: Enum
  summary: "Specifies flags that control binding and the way in which the search for members and types is conducted by reflection."
  remarks: "These `BindingFlags` control binding for a great many classes in the `System`, `System.Reflection`, and `System.Runtime` namespaces that invoke, create, get, set, and find members and types.       `BindingFlags` are used in the following <xref:System.Type> methods and other places such as <xref:System.Reflection.MethodBase.Invoke%2A?displayProperty=fullName> :      -   <xref:System.Reflection.MethodBase.Invoke%2A?displayProperty=fullName>      -   <xref:System.Type.GetMembers%2A>      -   <xref:System.Type.GetEvents%2A>      -   <xref:System.Type.InvokeMember%2A>      -   <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>      -   <xref:System.Type.GetConstructor%2A>      -   <xref:System.Type.GetConstructors%2A>      -   <xref:System.Type.GetMethod%2A>      -   <xref:System.Type.GetMethods%2A>      -   <xref:System.Type.GetField%2A>      -   <xref:System.Type.GetFields%2A>      -   <xref:System.Type.GetEvent%2A>      -   <xref:System.Type.GetProperty%2A>      -   <xref:System.Type.GetProperties%2A>      -   <xref:System.Type.GetMember%2A>      -   <xref:System.Type.FindMembers%2A>       `InvokeMember` and `GetMethod` are especially important.       The binding flags can be categorized by how they identify a type member, as listed in the following table.      |Identified by Accessibility|Identified by Binding Argument|Identified by Operation|   |---------------------------------|------------------------------------|-----------------------------|   |DeclaredOnly<br /><br /> FlattenHierarchy<br /><br /> IgnoreCase<br /><br /> IgnoreReturn<br /><br /> Instance<br /><br /> NonPublic<br /><br /> Public<br /><br /> Static|ExactBinding<br /><br /> OptionalParamBinding|CreateInstance<br /><br /> GetField<br /><br /> SetField<br /><br /> GetProperty<br /><br /> SetProperty<br /><br /> InvokeMethod<br /><br /> PutDispProperty<br /><br /> PutRefDispProperty|      > [!NOTE] >  You must specify `Instance` or `Static` along with `Public` or `NonPublic` or no members will be returned.       The following table lists the coercions performed by the default <xref:System.Reflection.Binder.ChangeType%2A?displayProperty=fullName>. This table applies especially to the `ExactBinding` binding flag.      |Source Type|Target Type|   |-----------------|-----------------|   |Any type|Its base type.|   |Any type|The interface it implements.|   |`Char`|`UInt16`, `UInt32`, `Int32`, `UInt64`, `Int64`, `Single`, `Double`|   |`Byte`|`Char`, `UInt16`, `Int16`, `UInt32`, `Int32`, `UInt64`, `Int64`, `Single`, `Double`|   |`SByte`|`Int16`, `Int32`, `Int64`, `Single`, `Double`|   |`UInt16`|`UInt32`, `Int32`, `UInt64`, `Int64`, `Single`, `Double`|   |`Int16`|`Int32`, `Int64`, `Single`, `Double`|   |`UInt32`|`UInt64`, `Int64`, `Single`, `Double`|   |`Int32`|`Int64`, `Single`, `Double`|   |`UInt64`|`Single`, `Double`|   |`Int64`|`Single`, `Double`|   |`Single`|`Double`|   |Non-reference|By-reference.|"
  example:
  - "The following example demonstrates many of the binding flags.  \n  \n [!code-vb[BindingFlags#1](~/add/codesnippet/VisualBasic/t-system.reflection.bind_1.vb)]\n [!code-cs[BindingFlags#1](~/add/codesnippet/CSharp/t-system.reflection.bind_1.cs)]\n [!code-cpp[BindingFlags#1](~/add/codesnippet/CPP/t-system.reflection.bind_1.cpp)]"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum BindingFlags
  inheritance:
  - System.Enum
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.CreateInstance
  id: CreateInstance
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: CreateInstance
  nameWithType: BindingFlags.CreateInstance
  fullName: System.Reflection.BindingFlags.CreateInstance
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.       This flag is passed to an <xref uid=&quot;langword_csharp_InvokeMember&quot; name=&quot;InvokeMember&quot; href=&quot;&quot;></xref> method to invoke a constructor."
  syntax:
    content: CreateInstance
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.DeclaredOnly
  id: DeclaredOnly
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: DeclaredOnly
  nameWithType: BindingFlags.DeclaredOnly
  fullName: System.Reflection.BindingFlags.DeclaredOnly
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that only members declared at the level of the supplied type&quot;s hierarchy should be considered. Inherited members are not considered."
  syntax:
    content: DeclaredOnly
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.Default
  id: Default
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: Default
  nameWithType: BindingFlags.Default
  fullName: System.Reflection.BindingFlags.Default
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that no binding flags are defined."
  syntax:
    content: Default
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.ExactBinding
  id: ExactBinding
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: ExactBinding
  nameWithType: BindingFlags.ExactBinding
  fullName: System.Reflection.BindingFlags.ExactBinding
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null <xref uid=&quot;langword_csharp_Binder&quot; name=&quot;Binder&quot; href=&quot;&quot;></xref> object, since that implies that the caller is supplying <xref uid=&quot;langword_csharp_BindToXXX&quot; name=&quot;BindToXXX&quot; href=&quot;&quot;></xref> implementations that will pick the appropriate method."
  remarks: "Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.       The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.       The default binder ignores this flag, while custom binders can implement the semantics of this flag."
  syntax:
    content: ExactBinding
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.FlattenHierarchy
  id: FlattenHierarchy
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: FlattenHierarchy
  nameWithType: BindingFlags.FlattenHierarchy
  fullName: System.Reflection.BindingFlags.FlattenHierarchy
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned."
  syntax:
    content: FlattenHierarchy
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.GetField
  id: GetField
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: GetField
  nameWithType: BindingFlags.GetField
  fullName: System.Reflection.BindingFlags.GetField
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the value of the specified field should be returned.       This flag is passed to an <xref uid=&quot;langword_csharp_InvokeMember&quot; name=&quot;InvokeMember&quot; href=&quot;&quot;></xref> method to get a field value."
  syntax:
    content: GetField
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.GetProperty
  id: GetProperty
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: GetProperty
  nameWithType: BindingFlags.GetProperty
  fullName: System.Reflection.BindingFlags.GetProperty
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the value of the specified property should be returned.       This flag is passed to an <xref uid=&quot;langword_csharp_InvokeMember&quot; name=&quot;InvokeMember&quot; href=&quot;&quot;></xref> method to invoke a property getter."
  syntax:
    content: GetProperty
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.IgnoreCase
  id: IgnoreCase
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: IgnoreCase
  nameWithType: BindingFlags.IgnoreCase
  fullName: System.Reflection.BindingFlags.IgnoreCase
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the case of the member name should not be considered when binding."
  syntax:
    content: IgnoreCase
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.IgnoreReturn
  id: IgnoreReturn
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: IgnoreReturn
  nameWithType: BindingFlags.IgnoreReturn
  fullName: System.Reflection.BindingFlags.IgnoreReturn
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Used in COM interop to specify that the return value of the member can be ignored."
  syntax:
    content: IgnoreReturn
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.Instance
  id: Instance
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: Instance
  nameWithType: BindingFlags.Instance
  fullName: System.Reflection.BindingFlags.Instance
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that instance members are to be included in the search."
  syntax:
    content: Instance
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.InvokeMethod
  id: InvokeMethod
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: InvokeMethod
  nameWithType: BindingFlags.InvokeMethod
  fullName: System.Reflection.BindingFlags.InvokeMethod
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that a method is to be invoked. This must not be a constructor or a type initializer.       This flag is passed to an <xref uid=&quot;langword_csharp_InvokeMember&quot; name=&quot;InvokeMember&quot; href=&quot;&quot;></xref> method to invoke a method."
  syntax:
    content: InvokeMethod
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.NonPublic
  id: NonPublic
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: NonPublic
  nameWithType: BindingFlags.NonPublic
  fullName: System.Reflection.BindingFlags.NonPublic
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that non-public members are to be included in the search."
  syntax:
    content: NonPublic
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.OptionalParamBinding
  id: OptionalParamBinding
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: OptionalParamBinding
  nameWithType: BindingFlags.OptionalParamBinding
  fullName: System.Reflection.BindingFlags.OptionalParamBinding
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with [System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object\\[\\],System.Reflection.ParameterModifier\\[\\],System.Globalization.CultureInfo,System.String\\[\\])](assetId:///M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])?qualifyHint=True"
  remarks: "Parameters with default values are used only in calls where trailing arguments are omitted. They must be the last arguments."
  syntax:
    content: OptionalParamBinding
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.Public
  id: Public
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: Public
  nameWithType: BindingFlags.Public
  fullName: System.Reflection.BindingFlags.Public
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that public members are to be included in the search."
  syntax:
    content: Public
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.PutDispProperty
  id: PutDispProperty
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: PutDispProperty
  nameWithType: BindingFlags.PutDispProperty
  fullName: System.Reflection.BindingFlags.PutDispProperty
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the <xref uid=&quot;langword_csharp_PROPPUT&quot; name=&quot;PROPPUT&quot; href=&quot;&quot;></xref> member on a COM object should be invoked. <xref uid=&quot;langword_csharp_PROPPUT&quot; name=&quot;PROPPUT&quot; href=&quot;&quot;></xref> specifies a property-setting function that uses a value. Use <xref uid=&quot;langword_csharp_PutDispProperty&quot; name=&quot;PutDispProperty&quot; href=&quot;&quot;></xref> if a property has both <xref uid=&quot;langword_csharp_PROPPUT&quot; name=&quot;PROPPUT&quot; href=&quot;&quot;></xref> and <xref uid=&quot;langword_csharp_PROPPUTREF&quot; name=&quot;PROPPUTREF&quot; href=&quot;&quot;></xref> and you need to distinguish which one is called."
  syntax:
    content: PutDispProperty
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.PutRefDispProperty
  id: PutRefDispProperty
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: PutRefDispProperty
  nameWithType: BindingFlags.PutRefDispProperty
  fullName: System.Reflection.BindingFlags.PutRefDispProperty
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the <xref uid=&quot;langword_csharp_PROPPUTREF&quot; name=&quot;PROPPUTREF&quot; href=&quot;&quot;></xref> member on a COM object should be invoked. <xref uid=&quot;langword_csharp_PROPPUTREF&quot; name=&quot;PROPPUTREF&quot; href=&quot;&quot;></xref> specifies a property-setting function that uses a reference instead of a value. Use <xref uid=&quot;langword_csharp_PutRefDispProperty&quot; name=&quot;PutRefDispProperty&quot; href=&quot;&quot;></xref> if a property has both <xref uid=&quot;langword_csharp_PROPPUT&quot; name=&quot;PROPPUT&quot; href=&quot;&quot;></xref> and <xref uid=&quot;langword_csharp_PROPPUTREF&quot; name=&quot;PROPPUTREF&quot; href=&quot;&quot;></xref> and you need to distinguish which one is called."
  syntax:
    content: PutRefDispProperty
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.SetField
  id: SetField
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: SetField
  nameWithType: BindingFlags.SetField
  fullName: System.Reflection.BindingFlags.SetField
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the value of the specified field should be set.       This flag is passed to an <xref uid=&quot;langword_csharp_InvokeMember&quot; name=&quot;InvokeMember&quot; href=&quot;&quot;></xref> method to set a field value."
  syntax:
    content: SetField
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.SetProperty
  id: SetProperty
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: SetProperty
  nameWithType: BindingFlags.SetProperty
  fullName: System.Reflection.BindingFlags.SetProperty
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying <xref uid=&quot;langword_csharp_PutDispProperty&quot; name=&quot;PutDispProperty&quot; href=&quot;&quot;></xref> and <xref uid=&quot;langword_csharp_PutRefDispProperty&quot; name=&quot;PutRefDispProperty&quot; href=&quot;&quot;></xref>.       This flag is passed to an <xref uid=&quot;langword_csharp_InvokeMember&quot; name=&quot;InvokeMember&quot; href=&quot;&quot;></xref> method to invoke a property setter."
  syntax:
    content: SetProperty
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.Static
  id: Static
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: Static
  nameWithType: BindingFlags.Static
  fullName: System.Reflection.BindingFlags.Static
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Specifies that static members are to be included in the search."
  syntax:
    content: Static
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.BindingFlags.SuppressChangeType
  id: SuppressChangeType
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  name: SuppressChangeType
  nameWithType: BindingFlags.SuppressChangeType
  fullName: System.Reflection.BindingFlags.SuppressChangeType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Not implemented."
  syntax:
    content: SuppressChangeType
    return:
      type: System.Reflection.BindingFlags
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Reflection.BindingFlags.CreateInstance
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: CreateInstance
  nameWithType: BindingFlags.CreateInstance
  fullName: System.Reflection.BindingFlags.CreateInstance
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.BindingFlags.DeclaredOnly
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: DeclaredOnly
  nameWithType: BindingFlags.DeclaredOnly
  fullName: System.Reflection.BindingFlags.DeclaredOnly
- uid: System.Reflection.BindingFlags.Default
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: Default
  nameWithType: BindingFlags.Default
  fullName: System.Reflection.BindingFlags.Default
- uid: System.Reflection.BindingFlags.ExactBinding
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: ExactBinding
  nameWithType: BindingFlags.ExactBinding
  fullName: System.Reflection.BindingFlags.ExactBinding
- uid: System.Reflection.BindingFlags.FlattenHierarchy
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: FlattenHierarchy
  nameWithType: BindingFlags.FlattenHierarchy
  fullName: System.Reflection.BindingFlags.FlattenHierarchy
- uid: System.Reflection.BindingFlags.GetField
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: GetField
  nameWithType: BindingFlags.GetField
  fullName: System.Reflection.BindingFlags.GetField
- uid: System.Reflection.BindingFlags.GetProperty
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: GetProperty
  nameWithType: BindingFlags.GetProperty
  fullName: System.Reflection.BindingFlags.GetProperty
- uid: System.Reflection.BindingFlags.IgnoreCase
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: IgnoreCase
  nameWithType: BindingFlags.IgnoreCase
  fullName: System.Reflection.BindingFlags.IgnoreCase
- uid: System.Reflection.BindingFlags.IgnoreReturn
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: IgnoreReturn
  nameWithType: BindingFlags.IgnoreReturn
  fullName: System.Reflection.BindingFlags.IgnoreReturn
- uid: System.Reflection.BindingFlags.Instance
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: Instance
  nameWithType: BindingFlags.Instance
  fullName: System.Reflection.BindingFlags.Instance
- uid: System.Reflection.BindingFlags.InvokeMethod
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: InvokeMethod
  nameWithType: BindingFlags.InvokeMethod
  fullName: System.Reflection.BindingFlags.InvokeMethod
- uid: System.Reflection.BindingFlags.NonPublic
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: NonPublic
  nameWithType: BindingFlags.NonPublic
  fullName: System.Reflection.BindingFlags.NonPublic
- uid: System.Reflection.BindingFlags.OptionalParamBinding
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: OptionalParamBinding
  nameWithType: BindingFlags.OptionalParamBinding
  fullName: System.Reflection.BindingFlags.OptionalParamBinding
- uid: System.Reflection.BindingFlags.Public
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: Public
  nameWithType: BindingFlags.Public
  fullName: System.Reflection.BindingFlags.Public
- uid: System.Reflection.BindingFlags.PutDispProperty
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: PutDispProperty
  nameWithType: BindingFlags.PutDispProperty
  fullName: System.Reflection.BindingFlags.PutDispProperty
- uid: System.Reflection.BindingFlags.PutRefDispProperty
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: PutRefDispProperty
  nameWithType: BindingFlags.PutRefDispProperty
  fullName: System.Reflection.BindingFlags.PutRefDispProperty
- uid: System.Reflection.BindingFlags.SetField
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: SetField
  nameWithType: BindingFlags.SetField
  fullName: System.Reflection.BindingFlags.SetField
- uid: System.Reflection.BindingFlags.SetProperty
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: SetProperty
  nameWithType: BindingFlags.SetProperty
  fullName: System.Reflection.BindingFlags.SetProperty
- uid: System.Reflection.BindingFlags.Static
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: Static
  nameWithType: BindingFlags.Static
  fullName: System.Reflection.BindingFlags.Static
- uid: System.Reflection.BindingFlags.SuppressChangeType
  parent: System.Reflection.BindingFlags
  isExternal: false
  name: SuppressChangeType
  nameWithType: BindingFlags.SuppressChangeType
  fullName: System.Reflection.BindingFlags.SuppressChangeType
