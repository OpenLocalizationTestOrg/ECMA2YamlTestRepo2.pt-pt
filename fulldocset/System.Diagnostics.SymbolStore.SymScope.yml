### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.SymScope
  id: SymScope
  children:
  - System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)
  - System.Diagnostics.SymbolStore.SymScope.Dispose
  - System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)
  - System.Diagnostics.SymbolStore.SymScope.EndOffset
  - System.Diagnostics.SymbolStore.SymScope.Finalize
  - System.Diagnostics.SymbolStore.SymScope.GetChildren
  - System.Diagnostics.SymbolStore.SymScope.GetLocals
  - System.Diagnostics.SymbolStore.SymScope.GetNamespaces
  - System.Diagnostics.SymbolStore.SymScope.Method
  - System.Diagnostics.SymbolStore.SymScope.Parent
  - System.Diagnostics.SymbolStore.SymScope.StartOffset
  langs:
  - csharp
  name: SymScope
  nameWithType: SymScope
  fullName: System.Diagnostics.SymbolStore.SymScope
  type: Class
  summary: "Represents a lexical scope within <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;></xref>, providing access to the start and end offsets of the scope, as well as its child and parent scopes."
  remarks: "The SymScope class also provides access to all locals defined within the current scope."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SymScope : System.Diagnostics.SymbolStore.SymScopeBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolScope
  inheritance:
  - System.Object
  - System.Diagnostics.SymbolStore.SymScopeBase
  implements:
  - System.Diagnostics.SymbolStore.ISymbolScope
  - System.IDisposable
  inheritedMembers:
  - System.Diagnostics.SymbolStore.SymScopeBase.{dtor}
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)
  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)'
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: SymScope(ISymUnmanagedScope*)
  nameWithType: SymScope.SymScope(ISymUnmanagedScope*)
  fullName: System.Diagnostics.SymbolStore.SymScope.SymScope(ISymUnmanagedScope*)
  type: Constructor
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  syntax:
    content: public SymScope (System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope* pScope);
    parameters:
    - id: pScope
      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*
      description: "To be added."
  overload: System.Diagnostics.SymbolStore.SymScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.Dispose
  id: Dispose
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymScope.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Releases the resources used by the current instance of the <xref href=&quot;System.Diagnostics.SymbolStore.SymScope&quot;></xref> class."
  syntax:
    content: public override sealed void Dispose ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymScope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymScope.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose(Boolean)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Called by the <xref:System.Diagnostics.SymbolStore.SymScope.Dispose*> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize*> methods to release the managed and unmanaged resources used by the current instance of the <xref href=&quot;System.Diagnostics.SymbolStore.SymScope&quot;></xref> class."
  remarks: "This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymScope.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymScope.Finalize%2A> methods; do not call this method directly."
  syntax:
    content: protected virtual void Dispose (bool A_0);
    parameters:
    - id: A_0
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Diagnostics.SymbolStore.SymScope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.EndOffset
  id: EndOffset
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: EndOffset
  nameWithType: SymScope.EndOffset
  fullName: System.Diagnostics.SymbolStore.SymScope.EndOffset
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the end offset of the current lexical scope."
  syntax:
    content: public virtual int EndOffset { get; }
    return:
      type: System.Int32
      description: "The ending Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope."
  overload: System.Diagnostics.SymbolStore.SymScope.EndOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.Finalize
  id: Finalize
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: Finalize()
  nameWithType: SymScope.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymScope.Finalize()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Releases unmanaged resources and performs other cleanup operations before the <xref href=&quot;System.Diagnostics.SymbolStore.SymScope&quot;></xref> is reclaimed by garbage collection."
  remarks: "This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object&quot;s `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method."
  syntax:
    content: ~SymScope ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymScope.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.GetChildren
  id: GetChildren
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: GetChildren()
  nameWithType: SymScope.GetChildren()
  fullName: System.Diagnostics.SymbolStore.SymScope.GetChildren()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the child lexical scopes of the current lexical scope."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope[]
      description: "The lexical scopes enclosed by the current lexical scope."
  overload: System.Diagnostics.SymbolStore.SymScope.GetChildren*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is insufficient memory to satisfy the request."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.GetLocals
  id: GetLocals
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: GetLocals()
  nameWithType: SymScope.GetLocals()
  fullName: System.Diagnostics.SymbolStore.SymScope.GetLocals()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the local variables within the current lexical scope."
  remarks: "The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "The local variables within the current lexical scope."
  overload: System.Diagnostics.SymbolStore.SymScope.GetLocals*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is insufficient memory to satisfy the request."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.GetNamespaces
  id: GetNamespaces
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: GetNamespaces()
  nameWithType: SymScope.GetNamespaces()
  fullName: System.Diagnostics.SymbolStore.SymScope.GetNamespaces()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Throws a <xref:System.NotSupportedException> in all cases."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace[]
      description: "Throws a <xref:System.NotSupportedException> in all cases."
  overload: System.Diagnostics.SymbolStore.SymScope.GetNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.Method
  id: Method
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: Method
  nameWithType: SymScope.Method
  fullName: System.Diagnostics.SymbolStore.SymScope.Method
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the method that contains the current lexical scope."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod Method { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolMethod
      description: "The method that contains the current lexical scope."
  overload: System.Diagnostics.SymbolStore.SymScope.Method*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.Parent
  id: Parent
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: Parent
  nameWithType: SymScope.Parent
  fullName: System.Diagnostics.SymbolStore.SymScope.Parent
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the parent lexical scope of the current scope."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope Parent { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "The enclosing lexical scope of the current scope."
  overload: System.Diagnostics.SymbolStore.SymScope.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymScope.StartOffset
  id: StartOffset
  parent: System.Diagnostics.SymbolStore.SymScope
  langs:
  - csharp
  name: StartOffset
  nameWithType: SymScope.StartOffset
  fullName: System.Diagnostics.SymbolStore.SymScope.StartOffset
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the start offset of the current lexical scope."
  syntax:
    content: public virtual int StartOffset { get; }
    return:
      type: System.Int32
      description: "The starting Microsoft intermediate language (MSIL) offset. The offset is from the beginning of the method of the current lexical scope."
  overload: System.Diagnostics.SymbolStore.SymScope.StartOffset*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.SymScopeBase
  isExternal: false
  name: System.Diagnostics.SymbolStore.SymScopeBase
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.Diagnostics.SymbolStore.SymScope.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope*)
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: SymScope(ISymUnmanagedScope*)
  nameWithType: SymScope.SymScope(ISymUnmanagedScope*)
  fullName: System.Diagnostics.SymbolStore.SymScope.SymScope(ISymUnmanagedScope*)
- uid: System.Diagnostics.SymbolStore.SymScope.Dispose
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Dispose()
  nameWithType: SymScope.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose()
- uid: System.Diagnostics.SymbolStore.SymScope.Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymScope.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymScope.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.SymScope.EndOffset
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: EndOffset
  nameWithType: SymScope.EndOffset
  fullName: System.Diagnostics.SymbolStore.SymScope.EndOffset
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.SymScope.Finalize
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Finalize()
  nameWithType: SymScope.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymScope.Finalize()
- uid: System.Diagnostics.SymbolStore.SymScope.GetChildren
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: GetChildren()
  nameWithType: SymScope.GetChildren()
  fullName: System.Diagnostics.SymbolStore.SymScope.GetChildren()
- uid: System.Diagnostics.SymbolStore.ISymbolScope[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolScope
    name: ISymbolScope
    nameWithType: ISymbolScope
    fullName: ISymbolScope[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymScope.GetLocals
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: GetLocals()
  nameWithType: SymScope.GetLocals()
  fullName: System.Diagnostics.SymbolStore.SymScope.GetLocals()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymScope.GetNamespaces
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: GetNamespaces()
  nameWithType: SymScope.GetNamespaces()
  fullName: System.Diagnostics.SymbolStore.SymScope.GetNamespaces()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolNamespace
    name: ISymbolNamespace
    nameWithType: ISymbolNamespace
    fullName: ISymbolNamespace[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymScope.Method
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Method
  nameWithType: SymScope.Method
  fullName: System.Diagnostics.SymbolStore.SymScope.Method
- uid: System.Diagnostics.SymbolStore.ISymbolMethod
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolMethod
  nameWithType: ISymbolMethod
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod
- uid: System.Diagnostics.SymbolStore.SymScope.Parent
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Parent
  nameWithType: SymScope.Parent
  fullName: System.Diagnostics.SymbolStore.SymScope.Parent
- uid: System.Diagnostics.SymbolStore.ISymbolScope
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope
- uid: System.Diagnostics.SymbolStore.SymScope.StartOffset
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: StartOffset
  nameWithType: SymScope.StartOffset
  fullName: System.Diagnostics.SymbolStore.SymScope.StartOffset
- uid: System.Diagnostics.SymbolStore.SymScope.#ctor*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: SymScope
  nameWithType: SymScope.SymScope
- uid: System.Diagnostics.SymbolStore.SymScope.Dispose*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Dispose
  nameWithType: SymScope.Dispose
- uid: System.Diagnostics.SymbolStore.SymScope.EndOffset*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: EndOffset
  nameWithType: SymScope.EndOffset
- uid: System.Diagnostics.SymbolStore.SymScope.Finalize*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Finalize
  nameWithType: SymScope.Finalize
- uid: System.Diagnostics.SymbolStore.SymScope.GetChildren*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: GetChildren
  nameWithType: SymScope.GetChildren
- uid: System.Diagnostics.SymbolStore.SymScope.GetLocals*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: GetLocals
  nameWithType: SymScope.GetLocals
- uid: System.Diagnostics.SymbolStore.SymScope.GetNamespaces*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: GetNamespaces
  nameWithType: SymScope.GetNamespaces
- uid: System.Diagnostics.SymbolStore.SymScope.Method*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Method
  nameWithType: SymScope.Method
- uid: System.Diagnostics.SymbolStore.SymScope.Parent*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: Parent
  nameWithType: SymScope.Parent
- uid: System.Diagnostics.SymbolStore.SymScope.StartOffset*
  parent: System.Diagnostics.SymbolStore.SymScope
  isExternal: false
  name: StartOffset
  nameWithType: SymScope.StartOffset
