### YamlMime:ManagedReference
items:
- uid: System.Configuration.SettingsBase
  id: SettingsBase
  children:
  - System.Configuration.SettingsBase.#ctor
  - System.Configuration.SettingsBase.Context
  - System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)
  - System.Configuration.SettingsBase.IsSynchronized
  - System.Configuration.SettingsBase.Item(System.String)
  - System.Configuration.SettingsBase.Properties
  - System.Configuration.SettingsBase.PropertyValues
  - System.Configuration.SettingsBase.Providers
  - System.Configuration.SettingsBase.Save
  - System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)
  langs:
  - csharp
  name: SettingsBase
  nameWithType: SettingsBase
  fullName: System.Configuration.SettingsBase
  type: Class
  summary: "Provides the base class used to support user property settings."
  remarks: "ASP.NET Web Forms and Windows Forms both use the same configuration settings infrastructure to support user settings. User settings within ASP.NET are often referred to as ASP.NET Profile. The settings infrastructure includes the SettingsBase base class, the <xref:System.Configuration.SettingsProperty> class, the <xref:System.Configuration.SettingsPropertyValue> class, the <xref:System.Configuration.SettingsContext> class, the <xref:System.Configuration.SettingsProvider> class, and the <xref:System.Configuration.SettingAttribute>       class.       The Settings base classes provide only a common infrastructure for defining and persisting settings properties. Depending on how these base classes are derived and their run-time environment, the settings API can provide different levels of functionality. For example, ASP.NET Profile uses the settings base classes to provide per-user settings that are saved and loaded according to request semantics."
  syntax:
    content: public abstract class SettingsBase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.#ctor
  id: '#ctor'
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: SettingsBase()
  nameWithType: SettingsBase.SettingsBase()
  fullName: System.Configuration.SettingsBase.SettingsBase()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Initializes a new instance of the <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> class."
  syntax:
    content: protected SettingsBase ();
    parameters: []
  overload: System.Configuration.SettingsBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Context
  id: Context
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Context
  nameWithType: SettingsBase.Context
  fullName: System.Configuration.SettingsBase.Context
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets the associated settings context."
  remarks: "A <xref:System.Configuration.SettingsContext> is used by the application to provide contextual information that the provider can use to persist settings.       Each settings class derived from <xref:System.Configuration.SettingsBase> has a context associated with it. The context is passed to the settings provider to identity additional information about the settings information. Context therefore acts as a hint to help the settings provider determine how to persist the associated settings values."
  syntax:
    content: public virtual System.Configuration.SettingsContext Context { get; }
    return:
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;></xref> associated with the settings instance."
  overload: System.Configuration.SettingsBase.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)
  id: Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Initialize(SettingsContext,SettingsPropertyCollection,SettingsProviderCollection)
  nameWithType: SettingsBase.Initialize(SettingsContext,SettingsPropertyCollection,SettingsProviderCollection)
  fullName: System.Configuration.SettingsBase.Initialize(SettingsContext,SettingsPropertyCollection,SettingsProviderCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Initializes internal properties used by <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> object."
  syntax:
    content: public void Initialize (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties, System.Configuration.SettingsProviderCollection providers);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "The settings context related to the settings properties."
    - id: properties
      type: System.Configuration.SettingsPropertyCollection
      description: "The settings properties that will be accessible from the <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> instance."
    - id: providers
      type: System.Configuration.SettingsProviderCollection
      description: "The initialized providers that should be used when loading and saving property values."
  overload: System.Configuration.SettingsBase.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.IsSynchronized
  id: IsSynchronized
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SettingsBase.IsSynchronized
  fullName: System.Configuration.SettingsBase.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets a value indicating whether access to the object is synchronized (thread safe)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access to the <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> is synchronized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.SettingsBase.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Item(System.String)
  id: Item(System.String)
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Item(String)
  nameWithType: SettingsBase.Item(String)
  fullName: System.Configuration.SettingsBase.Item(String)
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets or sets the value of the specified settings property."
  remarks: "The Item property, also known as the indexer, is routinely used in the settings class derived from <xref:System.Configuration.SettingsBase>. The Item property binds the public property of the class to the corresponding settings property.       The first time a property is accessed, the <xref:System.Configuration.SettingsBase> instance will find all other properties that share the same provider as the requested property. The <xref:System.Configuration.SettingsBase> instance will then call the provider, passing it the set of <xref:System.Configuration.SettingsProperty> objects that represent the data the provider should retrieve.       Note that the indexer will get and set property data in a thread-safe manner if <xref:System.Configuration.SettingsBase.IsSynchronized%2A> is `true`. A <xref:System.Configuration.SettingsBase> instance by default is not thread safe. However, you can call <xref:System.Configuration.SettingsBase.Synchronized%2A>, passing in a <xref:System.Configuration.SettingsBase> instance to make the <xref:System.Configuration.SettingsBase> indexer operate in a thread-safe manner."
  syntax:
    content: public virtual object this[string propertyName] { get; set; }
    parameters:
    - id: propertyName
      type: System.String
      description: "A <xref:System.String> containing the name of the property to access."
    return:
      type: System.Object
      description: "If found, the value of the named settings property."
  overload: System.Configuration.SettingsBase.Item*
  exceptions:
  - type: System.Configuration.SettingsPropertyNotFoundException
    commentId: T:System.Configuration.SettingsPropertyNotFoundException
    description: "There are no properties associated with the current object, or the specified property could not be found."
  - type: System.Configuration.SettingsPropertyIsReadOnlyException
    commentId: T:System.Configuration.SettingsPropertyIsReadOnlyException
    description: "An attempt was made to set a read-only property."
  - type: System.Configuration.SettingsPropertyWrongTypeException
    commentId: T:System.Configuration.SettingsPropertyWrongTypeException
    description: "The value supplied is of a type incompatible with the settings property, during a set operation."
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Properties
  id: Properties
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Properties
  nameWithType: SettingsBase.Properties
  fullName: System.Configuration.SettingsBase.Properties
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets the collection of settings properties."
  remarks: "The `get` accessor of the Properties property returns the collection of <xref:System.Configuration.SettingsProperty> instances associated with the properties managed by the <xref:System.Configuration.SettingsBase> instance.       The <xref:System.Configuration.SettingsBase> class natively recognizes certain characteristics of a setting, such as its name, property type, settings provider, default value, and read-only status and a serialization preference. These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class. All other attributes of the <xref:System.Configuration.SettingsProperty> class are just passed through to its associated settings provider as a <xref:System.Configuration.SettingsAttributeDictionary>."
  syntax:
    content: public virtual System.Configuration.SettingsPropertyCollection Properties { get; }
    return:
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;></xref> collection containing all the <xref href=&quot;System.Configuration.SettingsProperty&quot;></xref> objects."
  overload: System.Configuration.SettingsBase.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.PropertyValues
  id: PropertyValues
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: PropertyValues
  nameWithType: SettingsBase.PropertyValues
  fullName: System.Configuration.SettingsBase.PropertyValues
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets a collection of settings property values."
  syntax:
    content: public virtual System.Configuration.SettingsPropertyValueCollection PropertyValues { get; }
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A collection of <xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref> objects representing the actual data values for the properties managed by the <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> instance."
  overload: System.Configuration.SettingsBase.PropertyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Providers
  id: Providers
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Providers
  nameWithType: SettingsBase.Providers
  fullName: System.Configuration.SettingsBase.Providers
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets a collection of settings providers."
  syntax:
    content: public virtual System.Configuration.SettingsProviderCollection Providers { get; }
    return:
      type: System.Configuration.SettingsProviderCollection
      description: "A <xref href=&quot;System.Configuration.SettingsProviderCollection&quot;></xref> containing <xref href=&quot;System.Configuration.SettingsProvider&quot;></xref> objects."
  overload: System.Configuration.SettingsBase.Providers*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Save
  id: Save
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Save()
  nameWithType: SettingsBase.Save()
  fullName: System.Configuration.SettingsBase.Save()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Stores the current values of the settings properties."
  remarks: "The <xref:System.Configuration.SettingsBase> instance groups properties based on the provider that is associated with each property. Each provider is then called in sequence and is passed the set of properties that the provider should save."
  syntax:
    content: public virtual void Save ();
    parameters: []
  overload: System.Configuration.SettingsBase.Save*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)
  id: Synchronized(System.Configuration.SettingsBase)
  parent: System.Configuration.SettingsBase
  langs:
  - csharp
  name: Synchronized(SettingsBase)
  nameWithType: SettingsBase.Synchronized(SettingsBase)
  fullName: System.Configuration.SettingsBase.Synchronized(SettingsBase)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Provides a <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> class that is synchronized (thread safe)."
  remarks: "The indexer will get and set property data in a thread-safe manner if the <xref:System.Configuration.SettingsBase.IsSynchronized%2A> property is set to `true`.  A <xref:System.Configuration.SettingsBase> instance by default is not thread-safe.  However, you can call Synchronized passing in a <xref:System.Configuration.SettingsBase> instance to make the <xref:System.Configuration.SettingsBase> indexer operate in a thread-safe manner."
  syntax:
    content: public static System.Configuration.SettingsBase Synchronized (System.Configuration.SettingsBase settingsBase);
    parameters:
    - id: settingsBase
      type: System.Configuration.SettingsBase
      description: "The class used to support user property settings."
    return:
      type: System.Configuration.SettingsBase
      description: "A <xref href=&quot;System.Configuration.SettingsBase&quot;></xref> class that is synchronized."
  overload: System.Configuration.SettingsBase.Synchronized*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.SettingsPropertyNotFoundException
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyNotFoundException
  nameWithType: SettingsPropertyNotFoundException
  fullName: System.Configuration.SettingsPropertyNotFoundException
- uid: System.Configuration.SettingsPropertyIsReadOnlyException
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyIsReadOnlyException
  nameWithType: SettingsPropertyIsReadOnlyException
  fullName: System.Configuration.SettingsPropertyIsReadOnlyException
- uid: System.Configuration.SettingsPropertyWrongTypeException
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyWrongTypeException
  nameWithType: SettingsPropertyWrongTypeException
  fullName: System.Configuration.SettingsPropertyWrongTypeException
- uid: System.Configuration.SettingsBase.#ctor
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: SettingsBase()
  nameWithType: SettingsBase.SettingsBase()
  fullName: System.Configuration.SettingsBase.SettingsBase()
- uid: System.Configuration.SettingsBase.Context
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Context
  nameWithType: SettingsBase.Context
  fullName: System.Configuration.SettingsBase.Context
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Initialize(SettingsContext,SettingsPropertyCollection,SettingsProviderCollection)
  nameWithType: SettingsBase.Initialize(SettingsContext,SettingsPropertyCollection,SettingsProviderCollection)
  fullName: System.Configuration.SettingsBase.Initialize(SettingsContext,SettingsPropertyCollection,SettingsProviderCollection)
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.SettingsProviderCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsProviderCollection
  nameWithType: SettingsProviderCollection
  fullName: System.Configuration.SettingsProviderCollection
- uid: System.Configuration.SettingsBase.IsSynchronized
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: IsSynchronized
  nameWithType: SettingsBase.IsSynchronized
  fullName: System.Configuration.SettingsBase.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.SettingsBase.Item(System.String)
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Item(String)
  nameWithType: SettingsBase.Item(String)
  fullName: System.Configuration.SettingsBase.Item(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SettingsBase.Properties
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Properties
  nameWithType: SettingsBase.Properties
  fullName: System.Configuration.SettingsBase.Properties
- uid: System.Configuration.SettingsBase.PropertyValues
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: PropertyValues
  nameWithType: SettingsBase.PropertyValues
  fullName: System.Configuration.SettingsBase.PropertyValues
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsBase.Providers
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Providers
  nameWithType: SettingsBase.Providers
  fullName: System.Configuration.SettingsBase.Providers
- uid: System.Configuration.SettingsBase.Save
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Save()
  nameWithType: SettingsBase.Save()
  fullName: System.Configuration.SettingsBase.Save()
- uid: System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Synchronized(SettingsBase)
  nameWithType: SettingsBase.Synchronized(SettingsBase)
  fullName: System.Configuration.SettingsBase.Synchronized(SettingsBase)
- uid: System.Configuration.SettingsBase
  parent: System.Configuration
  isExternal: false
  name: SettingsBase
  nameWithType: SettingsBase
  fullName: System.Configuration.SettingsBase
- uid: System.Configuration.SettingsBase.#ctor*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: SettingsBase
  nameWithType: SettingsBase.SettingsBase
- uid: System.Configuration.SettingsBase.Context*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Context
  nameWithType: SettingsBase.Context
- uid: System.Configuration.SettingsBase.Initialize*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Initialize
  nameWithType: SettingsBase.Initialize
- uid: System.Configuration.SettingsBase.IsSynchronized*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: IsSynchronized
  nameWithType: SettingsBase.IsSynchronized
- uid: System.Configuration.SettingsBase.Item*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Item
  nameWithType: SettingsBase.Item
- uid: System.Configuration.SettingsBase.Properties*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Properties
  nameWithType: SettingsBase.Properties
- uid: System.Configuration.SettingsBase.PropertyValues*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: PropertyValues
  nameWithType: SettingsBase.PropertyValues
- uid: System.Configuration.SettingsBase.Providers*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Providers
  nameWithType: SettingsBase.Providers
- uid: System.Configuration.SettingsBase.Save*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Save
  nameWithType: SettingsBase.Save
- uid: System.Configuration.SettingsBase.Synchronized*
  parent: System.Configuration.SettingsBase
  isExternal: false
  name: Synchronized
  nameWithType: SettingsBase.Synchronized
