### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.TreeNodeCollection
  id: TreeNodeCollection
  children:
  - System.Windows.Forms.TreeNodeCollection.Add(System.String)
  - System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)
  - System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)
  - System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)
  - System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)
  - System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)
  - System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)
  - System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])
  - System.Windows.Forms.TreeNodeCollection.Clear
  - System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)
  - System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)
  - System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)
  - System.Windows.Forms.TreeNodeCollection.Count
  - System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)
  - System.Windows.Forms.TreeNodeCollection.GetEnumerator
  - System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)
  - System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)
  - System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)
  - System.Windows.Forms.TreeNodeCollection.IsReadOnly
  - System.Windows.Forms.TreeNodeCollection.Item(System.Int32)
  - System.Windows.Forms.TreeNodeCollection.Item(System.String)
  - System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)
  - System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)
  - System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)
  - System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized
  - System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)
  - System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: TreeNodeCollection
  nameWithType: TreeNodeCollection
  fullName: System.Windows.Forms.TreeNodeCollection
  type: Class
  summary: "Represents a collection of <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> objects."
  remarks: "The <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, and <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> methods enable you to add and remove individual tree nodes from the collection.      > [!NOTE] >  Enumerating the collection and removing nodes is not supported.       You can also use the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods to add or remove all the tree nodes from the collection.       Classes cannot inherit from the TreeNodeCollection class."
  example:
  - "The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_6_1.vb)]\n [!code-cs[TreeView#1](~/add/codesnippet/csharp/t-system.windows.forms.t_6_1.cs)]\n [!code-cpp[TreeView#1](~/add/codesnippet/cpp/t-system.windows.forms.t_6_1.cpp)]"
  syntax:
    content: >-
      [System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]

      public class TreeNodeCollection : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: TreeNodeCollection.Add(String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds a new tree node with the specified label text to the end of the current tree node collection."
  remarks: "You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.       To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods."
  example:
  - "The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_56_1.vb)]\n [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_56_1.cs)]\n [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_56_1.cpp)]"
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Add (string text);
    parameters:
    - id: text
      type: System.String
      description: "The label text displayed by the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref>."
    return:
      type: System.Windows.Forms.TreeNode
      description: "A <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that represents the tree node being added to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)
  id: Add(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(TreeNode)
  nameWithType: TreeNodeCollection.Add(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(TreeNode)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds a previously created tree node to the end of the tree node collection."
  remarks: "This version of the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> method allows you to add previously created <xref:System.Windows.Forms.TreeNode> objects to the end of the tree node collection.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.       To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.      > [!NOTE] >  A <xref:System.Windows.Forms.TreeNode> can be assigned to only one <xref:System.Windows.Forms.TreeView> control at a time. To add the tree node to a new tree view control, you must remove it from the other tree view first or clone it."
  example:
  - "The following code example displays customer information in a <xref:System.Windows.Forms.TreeView> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <xref:System.Windows.Forms.TreeView> is suppressed by using the <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> and <xref:System.Windows.Forms.TreeView.EndUpdate%2A> methods, and a wait <xref:System.Windows.Forms.Cursor> is displayed while the <xref:System.Windows.Forms.TreeView> creates and paints the <xref:System.Windows.Forms.TreeNode> objects. This example requires that you have a `Customer` object that can hold a collection of `Order` objects. It also requires that you have created an instance of a <xref:System.Windows.Forms.TreeView> control on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-vb[TreeView#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_22_1.vb)]\n [!code-cs[TreeView#1](~/add/codesnippet/csharp/m-system.windows.forms.t_22_1.cs)]\n [!code-cpp[TreeView#1](~/add/codesnippet/cpp/m-system.windows.forms.t_22_1.cpp)]"
  syntax:
    content: public virtual int Add (System.Windows.Forms.TreeNode node);
    parameters:
    - id: node
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to add to the collection."
    return:
      type: System.Int32
      description: "The zero-based index value of the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> added to the tree node collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>node</code> is currently assigned to another <xref href=&quot;System.Windows.Forms.TreeView&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(String,String)
  nameWithType: TreeNodeCollection.Add(String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a new tree node with the specified key and text, and adds it to the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Add (string key, string text);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was added to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)
  id: Add(System.String,System.String,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(String,String,Int32)
  nameWithType: TreeNodeCollection.Add(String,String,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and image, and adds it to the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.       The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageIndex
      type: System.Int32
      description: "The index of the image to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was added to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)
  id: Add(System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(String,String,String)
  nameWithType: TreeNodeCollection.Add(String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and image, and adds it to the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.       The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageKey
      type: System.String
      description: "The image to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was added to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)
  id: Add(System.String,System.String,System.Int32,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(String,String,Int32,Int32)
  nameWithType: TreeNodeCollection.Add(String,String,Int32,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and images, and adds it to the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.       The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.       The `selectedImageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageIndex
      type: System.Int32
      description: "The index of the image to display in the tree node."
    - id: selectedImageIndex
      type: System.Int32
      description: "The index of the image to be displayed in the tree node when it is in a selected state."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The tree node that was added to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)
  id: Add(System.String,System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Add(String,String,String,String)
  nameWithType: TreeNodeCollection.Add(String,String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and images, and adds it to the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The tree node is added to the end of the collection. You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods.       The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.       The `selectedImageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageKey
      type: System.String
      description: "The key of the image to display in the tree node."
    - id: selectedImageKey
      type: System.String
      description: "The key of the image to display when the node is in a selected state."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was added to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])
  id: AddRange(System.Windows.Forms.TreeNode[])
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: AddRange(TreeNode[])
  nameWithType: TreeNodeCollection.AddRange(TreeNode[])
  fullName: System.Windows.Forms.TreeNodeCollection.AddRange(TreeNode[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds an array of previously created tree nodes to the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode> objects contained in the `nodes` array are appended to the end of the collection.       You can use the AddRange method to quickly add a group of previously created <xref:System.Windows.Forms.TreeNode> objects to the collection instead of manually adding each <xref:System.Windows.Forms.TreeNode> to the collection using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> method.       To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods."
  example:
  - "The following code example copies the <xref:System.Windows.Forms.TreeNodeCollection> from a <xref:System.Windows.Forms.TreeView> to a temporary <xref:System.Array>, and then adds the contents of the array to another <xref:System.Windows.Forms.TreeView> using the AddRange method. The <xref:System.Windows.Forms.TreeNodeCollection> from the source <xref:System.Windows.Forms.TreeView> is cleared using the <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> method. This example requires that you have two <xref:System.Windows.Forms.TreeView> controls, one with a collection of <xref:System.Windows.Forms.TreeNode> objects.  \n  \n [!code-cpp[TreeNodeCollection_Clear#1](~/add/codesnippet/cpp/ef635824-b7a0-4e6a-bbd4-_1.cpp)]\n [!code-vb[TreeNodeCollection_Clear#1](~/add/codesnippet/visualbasic/ef635824-b7a0-4e6a-bbd4-_1.vb)]\n [!code-cs[TreeNodeCollection_Clear#1](~/add/codesnippet/csharp/ef635824-b7a0-4e6a-bbd4-_1.cs)]"
  syntax:
    content: public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);
    parameters:
    - id: nodes
      type: System.Windows.Forms.TreeNode[]
      description: "An array of <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> objects representing the tree nodes to add to the collection."
  overload: System.Windows.Forms.TreeNodeCollection.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nodes</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>nodes</code> is the child of another <xref href=&quot;System.Windows.Forms.TreeView&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Clear
  id: Clear
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: TreeNodeCollection.Clear()
  fullName: System.Windows.Forms.TreeNodeCollection.Clear()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes all tree nodes from the collection."
  remarks: "You can use this method to clear the entire collection of tree nodes from a tree view.       To remove an individual tree node from the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> or <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> methods.       To add new <xref:System.Windows.Forms.TreeNode> objects to the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods."
  example:
  - "The following code example copies the <xref:System.Windows.Forms.TreeNodeCollection> from a <xref:System.Windows.Forms.TreeView> to a temporary <xref:System.Array>, and then adds the contents of the array to another <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> method. The <xref:System.Windows.Forms.TreeNodeCollection> from the source <xref:System.Windows.Forms.TreeView> is cleared using the Clear method. This example requires that you have two <xref:System.Windows.Forms.TreeView> controls, one with a collection of <xref:System.Windows.Forms.TreeNode> objects.  \n  \n [!code-cpp[TreeNodeCollection_Clear#1](~/add/codesnippet/cpp/m-system.windows.forms.t_20_1.cpp)]\n [!code-vb[TreeNodeCollection_Clear#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_20_1.vb)]\n [!code-cs[TreeNodeCollection_Clear#1](~/add/codesnippet/csharp/m-system.windows.forms.t_20_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Windows.Forms.TreeNodeCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)
  id: Contains(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Contains(TreeNode)
  nameWithType: TreeNodeCollection.Contains(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Contains(TreeNode)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines whether the specified tree node is a member of the collection."
  remarks: "This method enables you to determine whether a <xref:System.Windows.Forms.TreeNode> is a member of the collection before attempting to perform operations on the <xref:System.Windows.Forms.TreeNode>. You can use this method to confirm that a <xref:System.Windows.Forms.TreeNode> has been added to or is still a member of the collection.       The amount of time this method takes is proportional to the size of the node collection, so you may want to avoid using it with large collections.       This method checks for reference equality only. You cannot use it to determine whether an equivalent but different node is in the collection.      > [!NOTE] >  One implication of the reference-equality requirement is that you cannot customize the behavior of this method for derived <xref:System.Windows.Forms.TreeNode> types by overriding the <xref:System.Object.Equals%2A> method of the <xref:System.Windows.Forms.TreeNode> class."
  example:
  - "The following code example determines if a specified <xref:System.Windows.Forms.TreeNode> is within a <xref:System.Windows.Forms.TreeNodeCollection>, and then enumerates the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains a <xref:System.Windows.Forms.TreeNode> named `myTreeNode2`.  \n  \n [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/cpp/049b6658-8822-4453-9f89-_1.cpp)]\n [!code-cs[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/csharp/049b6658-8822-4453-9f89-_1.cs)]\n [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/visualbasic/049b6658-8822-4453-9f89-_1.vb)]"
  syntax:
    content: public bool Contains (System.Windows.Forms.TreeNode node);
    parameters:
    - id: node
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to locate in the collection."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> is a member of the collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TreeNodeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: ContainsKey(String)
  nameWithType: TreeNodeCollection.ContainsKey(String)
  fullName: System.Windows.Forms.TreeNodeCollection.ContainsKey(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines whether the collection contains a tree node with the specified key."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, the <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> property returns `false`."
  syntax:
    content: public virtual bool ContainsKey (string key);
    parameters:
    - id: key
      type: System.String
      description: "The name of the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to search for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to indicate the collection contains a <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> with the specified key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TreeNodeCollection.ContainsKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: TreeNodeCollection.CopyTo(Array,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Copies the entire collection into an existing array at a specified location within the array."
  remarks: ''
  example:
  - "The following code example displays the number of <xref:System.Windows.Forms.TreeNode> objects in a <xref:System.Windows.Forms.TreeNodeCollection>, copies the contents of the collection to an <xref:System.Object> array, and displays a list of the tree nodes in a <xref:System.Windows.Forms.Label> control. This example requires that you have a <xref:System.Windows.Forms.TreeView> with at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeNodeCollection>, and a <xref:System.Windows.Forms.Label> control on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-cs[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/csharp/m-system.windows.forms.t_31_1.cs)]\n [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_31_1.vb)]\n [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/cpp/m-system.windows.forms.t_31_1.cpp)]"
  syntax:
    content: public void CopyTo (Array dest, int index);
    parameters:
    - id: dest
      type: System.Array
      description: "The destination array."
    - id: index
      type: System.Int32
      description: "The index in the destination array at which storing begins."
  overload: System.Windows.Forms.TreeNodeCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Count
  id: Count
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Count
  nameWithType: TreeNodeCollection.Count
  fullName: System.Windows.Forms.TreeNodeCollection.Count
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the total number of <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> objects in the collection."
  remarks: "The Count property holds the number of <xref:System.Windows.Forms.TreeNode> objects assigned to the collection. You can use the Count property value as the upper bounds of a loop to iterate through a collection.      > [!NOTE] >  Because the index value of a collection is a zero-based index, you must subtract one from the looping variable. If you do not account for this, you will exceed the upper bounds of the collection and throw an <xref:System.IndexOutOfRangeException> exception."
  example:
  - "The following code example displays the number of <xref:System.Windows.Forms.TreeNode> objects in a <xref:System.Windows.Forms.TreeNodeCollection>, copies the contents of the collection to an <xref:System.Object> array, and displays a list of the tree nodes in a <xref:System.Windows.Forms.Label> control. This example requires that you have a <xref:System.Windows.Forms.TreeView> with at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeNodeCollection>, and a <xref:System.Windows.Forms.Label> control on a <xref:System.Windows.Forms.Form>.  \n  \n [!code-cs[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/csharp/p-system.windows.forms.t_28_1.cs)]\n [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_28_1.vb)]\n [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/add/codesnippet/cpp/p-system.windows.forms.t_28_1.cpp)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The total number of <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> objects in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)
  id: Find(System.String,System.Boolean)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Find(String,Boolean)
  nameWithType: TreeNodeCollection.Find(String,Boolean)
  fullName: System.Windows.Forms.TreeNodeCollection.Find(String,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Finds the tree nodes with specified key, optionally searching subnodes."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, or there are no matches, the <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> property returns an empty array`.`"
  syntax:
    content: public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node to search for."
    - id: searchAllChildren
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search child nodes of tree nodes; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Forms.TreeNode[]
      description: "An array of <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> objects whose <xref:System.Windows.Forms.TreeNode.Name*> property matches the specified key."
  overload: System.Windows.Forms.TreeNodeCollection.Find*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: TreeNodeCollection.GetEnumerator()
  fullName: System.Windows.Forms.TreeNodeCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns an enumerator that can be used to iterate through the tree node collection."
  remarks: ''
  example:
  - "The following code example determines if a specified <xref:System.Windows.Forms.TreeNode> is within a <xref:System.Windows.Forms.TreeNodeCollection>, and then enumerates the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains a <xref:System.Windows.Forms.TreeNode> named `myTreeNode2`.  \n  \n [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/cpp/m-system.windows.forms.t_51_1.cpp)]\n [!code-cs[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/csharp/m-system.windows.forms.t_51_1.cs)]\n [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_51_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> that represents the tree node collection."
  overload: System.Windows.Forms.TreeNodeCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)
  id: IndexOf(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: IndexOf(TreeNode)
  nameWithType: TreeNodeCollection.IndexOf(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.IndexOf(TreeNode)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns the index of the specified tree node in the collection."
  remarks: "The amount of time this method takes is proportional to the size of the node collection, so you may want to avoid using it with large collections.       This method checks for reference equality only. You cannot use it to retrieve the index of an equivalent but different node in the collection.      > [!NOTE] >  One implication of the reference-equality requirement is that you cannot customize the behavior of this method for derived <xref:System.Windows.Forms.TreeNode> types by overriding the <xref:System.Object.Equals%2A> method of the <xref:System.Windows.Forms.TreeNode> class."
  example:
  - "The following code example determines if a specified <xref:System.Windows.Forms.TreeNode> is within a <xref:System.Windows.Forms.TreeNodeCollection>, and then enumerates the collection. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> that has a <xref:System.Windows.Forms.TreeNodeCollection> that contains a <xref:System.Windows.Forms.TreeNode> named `myTreeNode2`.  \n  \n [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/add/codesnippet/cpp/m-system.windows.forms.t_27_1.cpp)]\n [!code-cs[TreeNodeCollection_Contains_GetEnumerator#2](~/add/codesnippet/csharp/m-system.windows.forms.t_27_1.cs)]\n [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_27_1.vb)]"
  syntax:
    content: public int IndexOf (System.Windows.Forms.TreeNode node);
    parameters:
    - id: node
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to locate in the collection."
    return:
      type: System.Int32
      description: "The zero-based index of the item found in the tree node collection; otherwise, -1."
  overload: System.Windows.Forms.TreeNodeCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)
  id: IndexOfKey(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: IndexOfKey(String)
  nameWithType: TreeNodeCollection.IndexOfKey(String)
  fullName: System.Windows.Forms.TreeNodeCollection.IndexOfKey(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns the index of the first occurrence of a tree node with the specified key."
  remarks: "If IndexOfKey is called successively, the last returned index will be checked for a key match first, and if there is no match, the search starts at the beginning of the collection.       The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The key comparison is not case-sensitive. If `key` is `null` or an empty string, the <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> property returns -1."
  syntax:
    content: public virtual int IndexOfKey (string key);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node to search for."
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of a tree node with the specified key, if found; otherwise, -1."
  overload: System.Windows.Forms.TreeNodeCollection.IndexOfKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified text and inserts it at the specified index."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Insert (int index, string text);
    parameters:
    - id: index
      type: System.Int32
      description: "The location within the collection to insert the node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was inserted in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)
  id: Insert(System.Int32,System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,TreeNode)
  nameWithType: TreeNodeCollection.Insert(Int32,TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,TreeNode)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inserts an existing tree node into the tree node collection at the specified location."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=fullName> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view, and the <xref:System.Windows.Forms.TreeView> resorted.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.       To remove a <xref:System.Windows.Forms.TreeNode> that you previously added, use the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.      > [!NOTE] >  A <xref:System.Windows.Forms.TreeNode> can be assigned to only one <xref:System.Windows.Forms.TreeView> control at a time. To add the tree node to a new tree view control, you must remove it from the other tree view first or clone it."
  example:
  - "The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property is deleted from one <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> method and added to the other <xref:System.Windows.Forms.TreeView> using the Insert method. This example requires that you have a <xref:System.Windows.Forms.Form> that contains two <xref:System.Windows.Forms.TreeView> controls and a <xref:System.Windows.Forms.Button>. The <xref:System.Windows.Forms.TreeView> controls should be named `treeView1` and `treeView2`.  \n  \n [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/13281f08-0181-4942-9ff8-_1.vb)]\n [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/13281f08-0181-4942-9ff8-_1.cpp)]\n [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/13281f08-0181-4942-9ff8-_1.cs)]"
  syntax:
    content: public virtual void Insert (int index, System.Windows.Forms.TreeNode node);
    parameters:
    - id: index
      type: System.Int32
      description: "The indexed location within the collection to insert the tree node."
    - id: node
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to insert into the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>node</code> is currently assigned to another <xref href=&quot;System.Windows.Forms.TreeView&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)
  id: Insert(System.Int32,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,String,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified text and key, and inserts it into the collection."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.       The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);
    parameters:
    - id: index
      type: System.Int32
      description: "The location within the collection to insert the node."
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was inserted in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)
  id: Insert(System.Int32,System.String,System.String,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,String,String,Int32)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and image, and inserts it into the collection at the specified index."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.       The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);
    parameters:
    - id: index
      type: System.Int32
      description: "The location within the collection to insert the node."
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageIndex
      type: System.Int32
      description: "The index of the image to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was inserted in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)
  id: Insert(System.Int32,System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,String,String,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and image, and inserts it into the collection at the specified index."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.       The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);
    parameters:
    - id: index
      type: System.Int32
      description: "The location within the collection to insert the node."
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageKey
      type: System.String
      description: "The key of the image to display in the tree node."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was inserted in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)
  id: Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,String,String,Int32,Int32)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,Int32,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and images, and inserts it into the collection at the specified index."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.       The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The `imageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.       The `selectedimageIndex` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);
    parameters:
    - id: index
      type: System.Int32
      description: "The location within the collection to insert the node."
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageIndex
      type: System.Int32
      description: "The index of the image to display in the tree node."
    - id: selectedImageIndex
      type: System.Int32
      description: "The index of the image to display in the tree node when it is in a selected state."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was inserted in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)
  id: Insert(System.Int32,System.String,System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Insert(Int32,String,String,String,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a tree node with the specified key, text, and images, and inserts it into the collection at the specified index."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter value is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Windows.Forms.TreeView> is sorted again.       You can also add new <xref:System.Windows.Forms.TreeNode> objects to the collection by using the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> or <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> methods.       The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The `imageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.ImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>.       The `selectedimageKey` parameter refers to an image in the <xref:System.Windows.Forms.TreeView.StateImageList%2A> property of the parent <xref:System.Windows.Forms.TreeView>."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);
    parameters:
    - id: index
      type: System.Int32
      description: "The location within the collection to insert the node."
    - id: key
      type: System.String
      description: "The name of the tree node."
    - id: text
      type: System.String
      description: "The text to display in the tree node."
    - id: imageKey
      type: System.String
      description: "The key of the image to display in the tree node."
    - id: selectedImageKey
      type: System.String
      description: "The key of the image to display in the tree node when it is in a selected state."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was inserted in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: TreeNodeCollection.IsReadOnly
  fullName: System.Windows.Forms.TreeNodeCollection.IsReadOnly
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the collection is read-only."
  remarks: ''
  example:
  - "The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property is deleted from one <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> method and added to the other <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> that contains two <xref:System.Windows.Forms.TreeView> controls and a <xref:System.Windows.Forms.Button>. The <xref:System.Windows.Forms.TreeView> controls should be named `treeView1` and `treeView2`.  \n  \n [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_284_1.vb)]\n [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/p-system.windows.forms.t_284_1.cpp)]\n [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/p-system.windows.forms.t_284_1.cs)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the collection is read-only; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TreeNodeCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: TreeNodeCollection.Item(Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> at the specified indexed location in the collection."
  remarks: "To assign <xref:System.Windows.Forms.TreeNode> objects to a specific location, or to retrieve them from the <xref:System.Windows.Forms.TreeNodeCollection>, you can reference the collection object with a specific index value. The index value of the <xref:System.Windows.Forms.TreeNodeCollection> is a zero-based index."
  example:
  - "The following code example removes the first <xref:System.Windows.Forms.TreeNode> from a <xref:System.Windows.Forms.TreeView> if its <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=fullName> property is set to \"Node0\". When a <xref:System.Windows.Forms.Button> is clicked, the first <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeView> is deleted using the <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> method. This example requires that you have created a <xref:System.Windows.Forms.TreeView> and a <xref:System.Windows.Forms.Button> on a <xref:System.Windows.Forms.Form>. The first <xref:System.Windows.Forms.TreeNode> in your <xref:System.Windows.Forms.TreeView> should have a text property of \"Node0.\"  \n  \n [!code-vb[TreeNodeCollection#2](~/add/codesnippet/visualbasic/p-system.windows.forms.t_118_1.vb)]\n [!code-cpp[TreeNodeCollection#2](~/add/codesnippet/cpp/p-system.windows.forms.t_118_1.cpp)]\n [!code-cs[TreeNodeCollection#2](~/add/codesnippet/csharp/p-system.windows.forms.t_118_1.cs)]"
  syntax:
    content: public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The indexed location of the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> in the collection."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> at the specified indexed location in the collection."
  overload: System.Windows.Forms.TreeNodeCollection.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>index</code> value is less than 0 or is greater than the number of tree nodes in the collection."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: TreeNodeCollection.Item(String)
  fullName: System.Windows.Forms.TreeNodeCollection.Item(String)
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the tree node with the specified key from the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>.       The key comparison is not case-sensitive. If the `key` parameter is `null` or an empty string, the Item property returns `null`."
  syntax:
    content: public virtual System.Windows.Forms.TreeNode this[string key] { get; }
    parameters:
    - id: key
      type: System.String
      description: "The name of the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to retrieve from the collection."
    return:
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> with the specified key."
  overload: System.Windows.Forms.TreeNodeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)
  id: Remove(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: Remove(TreeNode)
  nameWithType: TreeNodeCollection.Remove(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Remove(TreeNode)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes the specified tree node from the tree node collection."
  remarks: "When a <xref:System.Windows.Forms.TreeNode> is removed from the tree node collection, all subsequent tree nodes are moved up one position in the collection.       You can also remove a <xref:System.Windows.Forms.TreeNode> that you previously added by using the <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.      > [!NOTE] >  Enumerating the collection and removing nodes is not supported.       To add new <xref:System.Windows.Forms.TreeNode> objects to the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods."
  example:
  - "The following code example removes the selected tree node from one <xref:System.Windows.Forms.TreeView> and adds it to another if both tree node collections are not read-only. When a <xref:System.Windows.Forms.Button> is clicked, the <xref:System.Windows.Forms.TreeNode> represented by the <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=fullName> property is deleted from one <xref:System.Windows.Forms.TreeView> using the Remove method and added to the other <xref:System.Windows.Forms.TreeView> using the <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> that contains two <xref:System.Windows.Forms.TreeView> controls and a <xref:System.Windows.Forms.Button>. The <xref:System.Windows.Forms.TreeView> controls should be named `treeView1` and `treeView2`.  \n  \n [!code-vb[TreeNodeCollection#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_35_1.vb)]\n [!code-cpp[TreeNodeCollection#1](~/add/codesnippet/cpp/m-system.windows.forms.t_35_1.cpp)]\n [!code-cs[TreeNodeCollection#1](~/add/codesnippet/csharp/m-system.windows.forms.t_35_1.cs)]"
  syntax:
    content: public void Remove (System.Windows.Forms.TreeNode node);
    parameters:
    - id: node
      type: System.Windows.Forms.TreeNode
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to remove."
  overload: System.Windows.Forms.TreeNodeCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: TreeNodeCollection.RemoveAt(Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes a tree node from the tree node collection at a specified index."
  remarks: "When a <xref:System.Windows.Forms.TreeNode> is removed from the tree node collection, all subsequent tree nodes are moved up one position in the collection.       You can also remove a <xref:System.Windows.Forms.TreeNode> that you previously added by using the <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> or <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> methods.      > [!NOTE] >  Enumerating the collection and removing nodes is not supported.       To add new <xref:System.Windows.Forms.TreeNode> objects to the collection, use the <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, or <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> methods."
  example:
  - "The following code example removes the first <xref:System.Windows.Forms.TreeNode> from a <xref:System.Windows.Forms.TreeView> if its <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=fullName> property is set to \"Node0\". When a <xref:System.Windows.Forms.Button> is clicked, the first <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeView> is deleted using the RemoveAt method. This example requires that you have created a <xref:System.Windows.Forms.TreeView> and a <xref:System.Windows.Forms.Button> on a <xref:System.Windows.Forms.Form>. The first <xref:System.Windows.Forms.TreeNode> in your <xref:System.Windows.Forms.TreeView> should have a text property of \"Node0.\"  \n  \n [!code-vb[TreeNodeCollection#2](~/add/codesnippet/visualbasic/m-system.windows.forms.t_69_1.vb)]\n [!code-cpp[TreeNodeCollection#2](~/add/codesnippet/cpp/m-system.windows.forms.t_69_1.cpp)]\n [!code-cs[TreeNodeCollection#2](~/add/codesnippet/csharp/m-system.windows.forms.t_69_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index of the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to remove."
  overload: System.Windows.Forms.TreeNodeCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)
  id: RemoveByKey(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: RemoveByKey(String)
  nameWithType: TreeNodeCollection.RemoveByKey(String)
  fullName: System.Windows.Forms.TreeNodeCollection.RemoveByKey(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes the tree node with the specified key from the collection."
  remarks: "The <xref:System.Windows.Forms.TreeNode.Name%2A> property corresponds to the key for a <xref:System.Windows.Forms.TreeNode> in the <xref:System.Windows.Forms.TreeNodeCollection>."
  syntax:
    content: public virtual void RemoveByKey (string key);
    parameters:
    - id: key
      type: System.String
      description: "The name of the tree node to remove from the collection."
  overload: System.Windows.Forms.TreeNodeCollection.RemoveByKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: TreeNodeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether access to the collection is synchronized (thread safe)."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: TreeNodeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an object that can be used to synchronize access to the collection."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "An object that can be used to synchronize access to the <xref href=&quot;System.Windows.Forms.TreeNodeCollection&quot;></xref>."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Add(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds an object to the end of the tree node collection."
  remarks: "If `node` is not a <xref:System.Windows.Forms.TreeNodeCollection>, the IList.Add method will use the string returned by the <xref:System.Windows.Forms.TreeNode.ToString%2A> method of the <xref:System.Windows.Forms.TreeNode> class."
  syntax:
    content: int IList.Add (object node);
    parameters:
    - id: node
      type: System.Object
      description: "The object to add to the tree node collection."
    return:
      type: System.Int32
      description: "The zero-based index value of the <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> that was added to the tree node collection."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "<code>node</code> is currently assigned to another <xref href=&quot;System.Windows.Forms.TreeView&quot;></xref> control."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>node</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Contains(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines whether the specified tree node is a member of the collection."
  remarks: "If `node` is not a <xref:System.Windows.Forms.TreeNode>, the IList.Contains method returns `false`. Therefore, you cannot pass in a string to determine if the collection contains a node that has the value of the string as its <xref:System.Windows.Forms.TreeNode.Text%2A> property."
  syntax:
    content: bool IList.Contains (object node);
    parameters:
    - id: node
      type: System.Object
      description: "The object to find in the collection."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>node</code> is a member of the collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns the index of the specified tree node in the collection."
  remarks: "If `node` is not a <xref:System.Windows.Forms.TreeNode>, the IList.IndexOf method returns -1. Therefore, you cannot pass in a string to find the node that has the value of the string as its <xref:System.Windows.Forms.TreeNode.Text%2A> property."
  syntax:
    content: int IList.IndexOf (object node);
    parameters:
    - id: node
      type: System.Object
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to locate in the collection."
    return:
      type: System.Int32
      description: "The zero-based index of the item found in the tree node collection; otherwise, -1."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inserts an existing tree node in the tree node collection at the specified location."
  remarks: "If the <xref:System.Windows.Forms.TreeView.Sorted%2A> property is set to `true`, the `index` parameter is ignored. The <xref:System.Windows.Forms.TreeNode> is inserted into the tree view and the <xref:System.Web.UI.WebControls.TreeView> is sorted again."
  syntax:
    content: void IList.Insert (int index, object node);
    parameters:
    - id: index
      type: System.Int32
      description: "The indexed location within the collection to insert the tree node."
    - id: node
      type: System.Object
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to insert into the collection."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>node</code> is currently assigned to another <xref href=&quot;System.Windows.Forms.TreeView&quot;></xref>.       -or-       <code>node</code> is not a <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: TreeNodeCollection.System.Collections.IList.IsFixedSize
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the tree node collection has a fixed size."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: TreeNodeCollection.System.Collections.IList.Item(Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the tree node at the specified index in the collection."
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which to get or set the item."
    return:
      type: System.Object
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> at the specified index in the <xref href=&quot;System.Windows.Forms.TreeNodeCollection&quot;></xref>."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value set is not a <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Windows.Forms.TreeNodeCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Remove(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes the specified tree node from the tree node collection."
  remarks: "You cannot pass in a string to remove the node that has the value of the string as its <xref:System.Windows.Forms.TreeNode.Text%2A> property.       When a <xref:System.Windows.Forms.TreeNode> is removed from the tree node collection, all subsequent tree nodes are moved up one position in the collection."
  syntax:
    content: void IList.Remove (object node);
    parameters:
    - id: node
      type: System.Object
      description: "The <xref href=&quot;System.Windows.Forms.TreeNode&quot;></xref> to remove from the collection."
  overload: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(String)
  nameWithType: TreeNodeCollection.Add(String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String)
- uid: System.Windows.Forms.TreeNode
  parent: System.Windows.Forms
  isExternal: false
  name: TreeNode
  nameWithType: TreeNode
  fullName: System.Windows.Forms.TreeNode
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(TreeNode)
  nameWithType: TreeNodeCollection.Add(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(TreeNode)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(String,String)
  nameWithType: TreeNodeCollection.Add(String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String)
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(String,String,Int32)
  nameWithType: TreeNodeCollection.Add(String,String,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,Int32)
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(String,String,String)
  nameWithType: TreeNodeCollection.Add(String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,String)
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(String,String,Int32,Int32)
  nameWithType: TreeNodeCollection.Add(String,String,Int32,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,Int32,Int32)
- uid: System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add(String,String,String,String)
  nameWithType: TreeNodeCollection.Add(String,String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Add(String,String,String,String)
- uid: System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: AddRange(TreeNode[])
  nameWithType: TreeNodeCollection.AddRange(TreeNode[])
  fullName: System.Windows.Forms.TreeNodeCollection.AddRange(TreeNode[])
- uid: System.Windows.Forms.TreeNode[]
  parent: System.Windows.Forms
  isExternal: false
  name: TreeNode
  nameWithType: TreeNode
  fullName: System.Windows.Forms.TreeNode[]
  spec.csharp:
  - uid: System.Windows.Forms.TreeNode
    name: TreeNode
    nameWithType: TreeNode
    fullName: TreeNode[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.TreeNodeCollection.Clear
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Clear()
  nameWithType: TreeNodeCollection.Clear()
  fullName: System.Windows.Forms.TreeNodeCollection.Clear()
- uid: System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Contains(TreeNode)
  nameWithType: TreeNodeCollection.Contains(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Contains(TreeNode)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: ContainsKey(String)
  nameWithType: TreeNodeCollection.ContainsKey(String)
  fullName: System.Windows.Forms.TreeNodeCollection.ContainsKey(String)
- uid: System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: TreeNodeCollection.CopyTo(Array,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Windows.Forms.TreeNodeCollection.Count
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Count
  nameWithType: TreeNodeCollection.Count
  fullName: System.Windows.Forms.TreeNodeCollection.Count
- uid: System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Find(String,Boolean)
  nameWithType: TreeNodeCollection.Find(String,Boolean)
  fullName: System.Windows.Forms.TreeNodeCollection.Find(String,Boolean)
- uid: System.Windows.Forms.TreeNodeCollection.GetEnumerator
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: TreeNodeCollection.GetEnumerator()
  fullName: System.Windows.Forms.TreeNodeCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: IndexOf(TreeNode)
  nameWithType: TreeNodeCollection.IndexOf(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.IndexOf(TreeNode)
- uid: System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: IndexOfKey(String)
  nameWithType: TreeNodeCollection.IndexOfKey(String)
  fullName: System.Windows.Forms.TreeNodeCollection.IndexOfKey(String)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,TreeNode)
  nameWithType: TreeNodeCollection.Insert(Int32,TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,TreeNode)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,String,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,String,String,Int32)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,Int32)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,String,String,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,String)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,String,String,Int32,Int32)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,Int32,Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,Int32,Int32)
- uid: System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert(Int32,String,String,String,String)
  nameWithType: TreeNodeCollection.Insert(Int32,String,String,String,String)
  fullName: System.Windows.Forms.TreeNodeCollection.Insert(Int32,String,String,String,String)
- uid: System.Windows.Forms.TreeNodeCollection.IsReadOnly
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: TreeNodeCollection.IsReadOnly
  fullName: System.Windows.Forms.TreeNodeCollection.IsReadOnly
- uid: System.Windows.Forms.TreeNodeCollection.Item(System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: TreeNodeCollection.Item(Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.Item(Int32)
- uid: System.Windows.Forms.TreeNodeCollection.Item(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Item(String)
  nameWithType: TreeNodeCollection.Item(String)
  fullName: System.Windows.Forms.TreeNodeCollection.Item(String)
- uid: System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Remove(TreeNode)
  nameWithType: TreeNodeCollection.Remove(TreeNode)
  fullName: System.Windows.Forms.TreeNodeCollection.Remove(TreeNode)
- uid: System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: TreeNodeCollection.RemoveAt(Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.RemoveAt(Int32)
- uid: System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: RemoveByKey(String)
  nameWithType: TreeNodeCollection.RemoveByKey(String)
  fullName: System.Windows.Forms.TreeNodeCollection.RemoveByKey(String)
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: TreeNodeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: TreeNodeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.ICollection.SyncRoot
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Add(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Add(Object)
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Contains(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Contains(Object)
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.IndexOf(Object)
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: TreeNodeCollection.System.Collections.IList.IsFixedSize
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.IsFixedSize
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: TreeNodeCollection.System.Collections.IList.Item(Int32)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Item(Int32)
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: TreeNodeCollection.System.Collections.IList.Remove(Object)
  fullName: System.Windows.Forms.TreeNodeCollection.System.Collections.IList.Remove(Object)
- uid: System.Windows.Forms.TreeNodeCollection.Add*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Add
  nameWithType: TreeNodeCollection.Add
- uid: System.Windows.Forms.TreeNodeCollection.AddRange*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: AddRange
  nameWithType: TreeNodeCollection.AddRange
- uid: System.Windows.Forms.TreeNodeCollection.Clear*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Clear
  nameWithType: TreeNodeCollection.Clear
- uid: System.Windows.Forms.TreeNodeCollection.Contains*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Contains
  nameWithType: TreeNodeCollection.Contains
- uid: System.Windows.Forms.TreeNodeCollection.ContainsKey*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: ContainsKey
  nameWithType: TreeNodeCollection.ContainsKey
- uid: System.Windows.Forms.TreeNodeCollection.CopyTo*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: CopyTo
  nameWithType: TreeNodeCollection.CopyTo
- uid: System.Windows.Forms.TreeNodeCollection.Count*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Count
  nameWithType: TreeNodeCollection.Count
- uid: System.Windows.Forms.TreeNodeCollection.Find*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Find
  nameWithType: TreeNodeCollection.Find
- uid: System.Windows.Forms.TreeNodeCollection.GetEnumerator*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: TreeNodeCollection.GetEnumerator
- uid: System.Windows.Forms.TreeNodeCollection.IndexOf*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: IndexOf
  nameWithType: TreeNodeCollection.IndexOf
- uid: System.Windows.Forms.TreeNodeCollection.IndexOfKey*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: IndexOfKey
  nameWithType: TreeNodeCollection.IndexOfKey
- uid: System.Windows.Forms.TreeNodeCollection.Insert*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Insert
  nameWithType: TreeNodeCollection.Insert
- uid: System.Windows.Forms.TreeNodeCollection.IsReadOnly*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: TreeNodeCollection.IsReadOnly
- uid: System.Windows.Forms.TreeNodeCollection.Item*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Item
  nameWithType: TreeNodeCollection.Item
- uid: System.Windows.Forms.TreeNodeCollection.Remove*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: Remove
  nameWithType: TreeNodeCollection.Remove
- uid: System.Windows.Forms.TreeNodeCollection.RemoveAt*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: RemoveAt
  nameWithType: TreeNodeCollection.RemoveAt
- uid: System.Windows.Forms.TreeNodeCollection.RemoveByKey*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: RemoveByKey
  nameWithType: TreeNodeCollection.RemoveByKey
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: TreeNodeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: TreeNodeCollection.System.Collections.ICollection.SyncRoot
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: TreeNodeCollection.System.Collections.IList.Add
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: TreeNodeCollection.System.Collections.IList.Contains
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: TreeNodeCollection.System.Collections.IList.IndexOf
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: TreeNodeCollection.System.Collections.IList.Insert
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: TreeNodeCollection.System.Collections.IList.IsFixedSize
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: TreeNodeCollection.System.Collections.IList.Item
- uid: System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove*
  parent: System.Windows.Forms.TreeNodeCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: TreeNodeCollection.System.Collections.IList.Remove
