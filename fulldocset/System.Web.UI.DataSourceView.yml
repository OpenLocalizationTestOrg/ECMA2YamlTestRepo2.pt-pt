### YamlMime:ManagedReference
items:
- uid: System.Web.UI.DataSourceView
  id: DataSourceView
  children:
  - System.Web.UI.DataSourceView.#ctor(System.Web.UI.IDataSource,System.String)
  - System.Web.UI.DataSourceView.CanDelete
  - System.Web.UI.DataSourceView.CanExecute(System.String)
  - System.Web.UI.DataSourceView.CanInsert
  - System.Web.UI.DataSourceView.CanPage
  - System.Web.UI.DataSourceView.CanRetrieveTotalRowCount
  - System.Web.UI.DataSourceView.CanSort
  - System.Web.UI.DataSourceView.CanUpdate
  - System.Web.UI.DataSourceView.DataSourceViewChanged
  - System.Web.UI.DataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  - System.Web.UI.DataSourceView.Events
  - System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  - System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)
  - System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.DataSourceView.Insert(System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  - System.Web.UI.DataSourceView.Name
  - System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)
  - System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  - System.Web.UI.DataSourceView.Select(System.Web.UI.DataSourceSelectArguments,System.Web.UI.DataSourceViewSelectCallback)
  - System.Web.UI.DataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  langs:
  - csharp
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
  type: Class
  summary: "Serves as the base class for all data source view classes, which define the capabilities of data source controls."
  remarks: "ASP.NET supports a data-binding architecture that enables Web server controls to bind to data in a consistent fashion. Web server controls that bind to data are referred to as data-bound controls, and the classes that facilitate that binding are called data source controls. Data source controls can represent any data source: a relational database, a file, a stream, a business object, and so on. Data source controls present data in a consistent way to data-bound controls, regardless of the source or format of the underlying data.       You use the data source controls that are provided with ASP.NET, including <xref:System.Web.UI.WebControls.SqlDataSource>, <xref:System.Web.UI.WebControls.AccessDataSource>, and <xref:System.Web.UI.WebControls.XmlDataSource>, to perform most Web development tasks. You use the base <xref:System.Web.UI.DataSourceControl> and DataSourceView classes when you want to implement your own custom data source control.       You can think of a data source control as the combination of the <xref:System.Web.UI.IDataSource> object and its associated lists of data, called data source views. Each list of data is represented by a DataSourceView object. The DataSourceView class is the base class for all data source views, or lists of data, associated with data source controls. Data source views define the capabilities of a data source control. Because the underlying data storage contains one or more lists of data, a data source control is always associated with one or more named data source views. The data source control uses the <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> method to enumerate the data source views currently associated with the data source control and the <xref:System.Web.UI.DataSourceControl.GetView%2A> method to retrieve a specific data source view instance by name.       All DataSourceView objects support data retrieval from the underlying data source using the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> method. All views optionally support a basic set of operations, including operations such as <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A>, <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A>, and <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A>. A data-bound control can discover the capabilities of a data source control by retrieving an associated data source view using the <xref:System.Web.UI.DataSourceControl.GetView%2A> and <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> methods, and by querying the view at design time or run time."
  example:
  - "The following code example demonstrates how to extend the DataSourceView class to create a strongly typed view class for a data source control. The `CsVDataSourceView` class defines the capabilities of the `CsvDataSource` data source control and provides an implementation for data-bound controls to use data stored in comma-separated value (.csv) files. For more information on the `CsvDataSource` data source control, see the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#5](~/add/codesnippet/csharp/t-system.web.ui.datasour_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#5](~/add/codesnippet/visualbasic/t-system.web.ui.datasour_1_1.vb)]"
  syntax:
    content: public abstract class DataSourceView
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.#ctor(System.Web.UI.IDataSource,System.String)
  id: '#ctor(System.Web.UI.IDataSource,System.String)'
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: DataSourceView(IDataSource,String)
  nameWithType: DataSourceView.DataSourceView(IDataSource,String)
  fullName: System.Web.UI.DataSourceView.DataSourceView(IDataSource,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> class."
  syntax:
    content: protected DataSourceView (System.Web.UI.IDataSource owner, string viewName);
    parameters:
    - id: owner
      type: System.Web.UI.IDataSource
      description: "The data source control that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> is associated with."
    - id: viewName
      type: System.String
      description: "The name of the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object."
  overload: System.Web.UI.DataSourceView.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>viewName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanDelete
  id: CanDelete
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanDelete
  nameWithType: DataSourceView.CanDelete
  fullName: System.Web.UI.DataSourceView.CanDelete
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the current <xref href=&quot;System.Web.UI.DataSourceControl&quot;></xref> object supports the <xref:System.Web.UI.DataSourceView.ExecuteDelete*> operation."
  remarks: "The CanDelete property reflects not only a capability of the data source control, but also whether it is currently appropriate to perform an operation. For example, even though a data source view supports the <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> operation in general, if a required property or some other data is not set, the CanDelete property returns `false`, as a delete operation would fail."
  example:
  - "The following code example demonstrates how to override the CanDelete property and the <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> method in a class that extends the <xref:System.Web.UI.DataSourceView> class. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/add/codesnippet/csharp/p-system.web.ui.datasour_3_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/add/codesnippet/visualbasic/p-system.web.ui.datasour_3_1.vb)]"
  syntax:
    content: public virtual bool CanDelete { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation is supported; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The base class implementation returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanExecute(System.String)
  id: CanExecute(System.String)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanExecute(String)
  nameWithType: DataSourceView.CanExecute(String)
  fullName: System.Web.UI.DataSourceView.CanExecute(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines whether the specified command can be executed."
  syntax:
    content: public virtual bool CanExecute (string commandName);
    parameters:
    - id: commandName
      type: System.String
      description: "The name of the command."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the command can be executed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanInsert
  id: CanInsert
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanInsert
  nameWithType: DataSourceView.CanInsert
  fullName: System.Web.UI.DataSourceView.CanInsert
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the current <xref href=&quot;System.Web.UI.DataSourceControl&quot;></xref> object supports the <xref:System.Web.UI.DataSourceView.ExecuteInsert*> operation."
  remarks: "The CanInsert property reflects not only a capability of the data source control, but also whether it is currently appropriate to perform an operation. For example, even though a data source control supports the <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> operation, if a required insert command or some other data is not set, the CanInsert property returns `false`, as an insert operation would fail."
  example:
  - "The following code example demonstrates how to override the CanInsert property and the <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> method in a class that extends the <xref:System.Web.UI.DataSourceView> class. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/add/codesnippet/csharp/p-system.web.ui.datasour_2_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/add/codesnippet/visualbasic/p-system.web.ui.datasour_2_1.vb)]"
  syntax:
    content: public virtual bool CanInsert { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation is supported; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The base class implementation returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanPage
  id: CanPage
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanPage
  nameWithType: DataSourceView.CanPage
  fullName: System.Web.UI.DataSourceView.CanPage
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the current <xref href=&quot;System.Web.UI.DataSourceControl&quot;></xref> object supports paging through the data retrieved by the <xref:System.Web.UI.DataSourceView.ExecuteSelect*> method."
  remarks: "A data-bound control can request paging by adding the <xref:System.Web.UI.DataSourceCapabilities> field to the <xref:System.Web.UI.DataSourceSelectArguments> object passed to the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> method. If a data-bound control requests paging, but the CanPage property returns `false`, the data source view throws an exception."
  syntax:
    content: public virtual bool CanPage { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation is supported; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The base class implementation returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanRetrieveTotalRowCount
  id: CanRetrieveTotalRowCount
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanRetrieveTotalRowCount
  nameWithType: DataSourceView.CanRetrieveTotalRowCount
  fullName: System.Web.UI.DataSourceView.CanRetrieveTotalRowCount
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the current <xref href=&quot;System.Web.UI.DataSourceControl&quot;></xref> object supports retrieving the total number of data rows, instead of the data."
  remarks: "A data-bound control can request a total row count by adding the <xref:System.Web.UI.DataSourceCapabilities?displayProperty=fullName> field to the <xref:System.Web.UI.DataSourceSelectArguments?displayProperty=fullName> object passed to the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> method. If a data-bound control requests a total row count, but the CanRetrieveTotalRowCount property returns `false`, the data source view throws an exception."
  syntax:
    content: public virtual bool CanRetrieveTotalRowCount { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation is supported; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The base class implementation returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanRetrieveTotalRowCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanSort
  id: CanSort
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanSort
  nameWithType: DataSourceView.CanSort
  fullName: System.Web.UI.DataSourceView.CanSort
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the current <xref href=&quot;System.Web.UI.DataSourceControl&quot;></xref> object supports a sorted view on the underlying data source."
  remarks: "A data-bound control can request sorting by adding the <xref:System.Web.UI.DataSourceCapabilities> field to the <xref:System.Web.UI.DataSourceSelectArguments> object passed to the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> method. If a data-bound control requests sorting, but the CanSort property returns `false`, the data source view throws an exception."
  example:
  - "The following code example demonstrates how to override the CanSort property in a class that extends the <xref:System.Web.UI.DataSourceView> class. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#7](~/add/codesnippet/csharp/p-system.web.ui.datasour_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#7](~/add/codesnippet/visualbasic/p-system.web.ui.datasour_1_1.vb)]"
  syntax:
    content: public virtual bool CanSort { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation is supported; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default implementation returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.CanUpdate
  id: CanUpdate
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: CanUpdate
  nameWithType: DataSourceView.CanUpdate
  fullName: System.Web.UI.DataSourceView.CanUpdate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the current <xref href=&quot;System.Web.UI.DataSourceControl&quot;></xref> object supports the <xref:System.Web.UI.DataSourceView.ExecuteUpdate*> operation."
  remarks: "The CanUpdate property reflects not only a capability of the data source control, but also whether it is currently appropriate to perform an operation. For example, even though a data-bound control supports the <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> operation, if a required update command or some other data is not set, the CanUpdate property returns `false`, as an update operation would fail."
  example:
  - "The following code example demonstrates how to override the CanUpdate property and the <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> method in a class that extends the <xref:System.Web.UI.DataSourceView> class. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/add/codesnippet/csharp/p-system.web.ui.datasour_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/add/codesnippet/visualbasic/p-system.web.ui.datasour_0_1.vb)]"
  syntax:
    content: public virtual bool CanUpdate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation is supported; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default implementation returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.DataSourceView.CanUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.DataSourceViewChanged
  id: DataSourceViewChanged
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: DataSourceViewChanged
  nameWithType: DataSourceView.DataSourceViewChanged
  fullName: System.Web.UI.DataSourceView.DataSourceViewChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Occurs when the data source view has changed."
  remarks: "The change to the data source view could be due to a change in the values of its properties, or to a change in the data due to a data operation performed by the data source view.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler DataSourceViewChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.Delete(IDictionary,IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.Delete(IDictionary,IDictionary,DataSourceViewOperationCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Performs an asynchronous delete operation on the list of data that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object represents."
  remarks: "The Delete method is the asynchronous data deletion interface for all data source view objects. The Delete method calls the <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> method using any `keys` and `oldValues` parameter values supplied. The `callback` parameter is a delegate that a data-bound control passes to the data source view, which is used to notify the data-bound control when the <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> operation has completed. The method uses the parameters of the <xref:System.Web.UI.DataSourceViewOperationCallback> delegate to return the number of affected records and any <xref:System.Exception> exception that is thrown by the <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> method."
  syntax:
    content: public virtual void Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues, System.Web.UI.DataSourceViewOperationCallback callback);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of object or row keys to be deleted by the <xref:System.Web.UI.DataSourceView.ExecuteDelete*> operation."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs that represent data elements and their original values."
    - id: callback
      type: System.Web.UI.DataSourceViewOperationCallback
      description: "A <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> delegate that is used to notify a data-bound control when the asynchronous operation is complete."
  overload: System.Web.UI.DataSourceView.Delete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> supplied is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.Events
  id: Events
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: Events
  nameWithType: DataSourceView.Events
  fullName: System.Web.UI.DataSourceView.Events
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a list of event-handler delegates for the data source view."
  remarks: "This property is of type <xref:System.ComponentModel.EventHandlerList>, which uses a linear search algorithm to find entries in the list of delegates. A linear search algorithm is inefficient when working with a large number of entries. Therefore, when you have a large list, finding entries with this property will be slow."
  syntax:
    content: protected System.ComponentModel.EventHandlerList Events { get; }
    return:
      type: System.ComponentModel.EventHandlerList
      description: "The list of event-handler delegates."
  overload: System.Web.UI.DataSourceView.Events*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary)
  id: ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: ExecuteCommand(String,IDictionary,IDictionary)
  nameWithType: DataSourceView.ExecuteCommand(String,IDictionary,IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteCommand(String,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Executes the specified command."
  syntax:
    content: protected virtual int ExecuteCommand (string commandName, System.Collections.IDictionary keys, System.Collections.IDictionary values);
    parameters:
    - id: commandName
      type: System.String
      description: "The name of the command."
    - id: keys
      type: System.Collections.IDictionary
      description: "A dictionary of object keys or row keys to act on."
    - id: values
      type: System.Collections.IDictionary
      description: "A dictionary of name/value pairs that represent data elements and their values."
    return:
      type: System.Int32
      description: "The number of items that were affected by the operation."
  overload: System.Web.UI.DataSourceView.ExecuteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  id: ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: ExecuteCommand(String,IDictionary,IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.ExecuteCommand(String,IDictionary,IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.ExecuteCommand(String,IDictionary,IDictionary,DataSourceViewOperationCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Executes the specified command."
  remarks: "This method does not return a value."
  syntax:
    content: public virtual void ExecuteCommand (string commandName, System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Web.UI.DataSourceViewOperationCallback callback);
    parameters:
    - id: commandName
      type: System.String
      description: "The name of the command."
    - id: keys
      type: System.Collections.IDictionary
      description: "A dictionary of object keys or row keys to act on."
    - id: values
      type: System.Collections.IDictionary
      description: "A dictionary of name/value pairs that represent data elements and their values."
    - id: callback
      type: System.Web.UI.DataSourceViewOperationCallback
      description: "A <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> object."
  overload: System.Web.UI.DataSourceView.ExecuteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: ExecuteDelete(IDictionary,IDictionary)
  nameWithType: DataSourceView.ExecuteDelete(IDictionary,IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteDelete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Performs a delete operation on the list of data that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object represents."
  remarks: "Data-bound controls can determine whether the ExecuteDelete operation is supported by a data source control by retrieving the <xref:System.Web.UI.DataSourceView> object using the <xref:System.Web.UI.DataSourceControl.GetView%2A?displayProperty=fullName> method, and checking the <xref:System.Web.UI.DataSourceView.CanDelete%2A> property.       The `keys` parameter represents the object or row keys of the data to delete. For data sources that represent relational data, such as the <xref:System.Web.UI.WebControls.SqlDataSource> control, the `keys` parameter is a collection of database primary keys. In other scenarios, the `keys` parameter is a collection of name/value pairs and is used to filter a list of data. Any data matching a name/value pair is deleted.      > [!NOTE] >  The <xref:System.Web.UI.DataSourceView> class&quot;s default implementation is to throw a <xref:System.NotSupportedException> exception. If you extend the <xref:System.Web.UI.DataSourceView> class, override the ExecuteDelete method if your class supports deletion from the underlying data storage."
  example:
  - "The following code example demonstrates how a class that extends the <xref:System.Web.UI.DataSourceView> class can override the <xref:System.Web.UI.DataSourceView.CanDelete%2A> property and the ExecuteDelete method. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/add/codesnippet/csharp/84991e4a-bbbd-47a3-bfea-_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#8](~/add/codesnippet/visualbasic/84991e4a-bbbd-47a3-bfea-_1.vb)]"
  syntax:
    content: protected virtual int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of object or row keys to be deleted by the ExecuteDelete operation."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs that represent data elements and their original values."
    return:
      type: System.Int32
      description: "The number of items that were deleted from the underlying data storage."
  overload: System.Web.UI.DataSourceView.ExecuteDelete*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The ExecuteDelete operation is not supported by the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)
  id: ExecuteInsert(System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: ExecuteInsert(IDictionary)
  nameWithType: DataSourceView.ExecuteInsert(IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteInsert(IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Performs an insert operation on the list of data that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object represents."
  remarks: "Data-bound controls can determine whether the ExecuteInsert operation is supported by a data source control by retrieving the <xref:System.Web.UI.DataSourceView> object using the <xref:System.Web.UI.DataSourceControl.GetView%2A> method, and checking the <xref:System.Web.UI.DataSourceView.CanInsert%2A> property.       The `values` parameter is a set of name/value pairs that represents data columns or fields and corresponding values to insert.      > [!NOTE] >  The <xref:System.Web.UI.DataSourceView> class&quot;s default implementation is to throw a <xref:System.NotSupportedException> exception. If you extend the <xref:System.Web.UI.DataSourceView> class, override the ExecuteInsert method if your class supports insertion into the underlying data storage."
  example:
  - "The following code example demonstrates how a class that extends the <xref:System.Web.UI.DataSourceView> class can override the <xref:System.Web.UI.DataSourceView.CanInsert%2A> property and the ExecuteInsert method. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/add/codesnippet/csharp/m-system.web.ui.datasour_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#9](~/add/codesnippet/visualbasic/m-system.web.ui.datasour_0_1.vb)]"
  syntax:
    content: protected virtual int ExecuteInsert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs used during an insert operation."
    return:
      type: System.Int32
      description: "The number of items that were inserted into the underlying data storage."
  overload: System.Web.UI.DataSourceView.ExecuteInsert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The ExecuteInsert operation is not supported by the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  id: ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: ExecuteSelect(DataSourceSelectArguments)
  nameWithType: DataSourceView.ExecuteSelect(DataSourceSelectArguments)
  fullName: System.Web.UI.DataSourceView.ExecuteSelect(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a list of data from the underlying data storage."
  remarks: "The ExecuteSelect method is called to retrieve data from the underlying data store and return it as an <xref:System.Collections.IEnumerable> object. All data source controls support data retrieval from their underlying data storage, even if other operations such as insertion and sorting are not supported. Because a data-bound control can request a list of data at any time as a result of a <xref:System.Web.UI.IDataSource.DataSourceChanged> event or a <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method call, the data retrieval must be performed on demand."
  example:
  - "The following code example demonstrates how to override the ExecuteSelect method in a class that extends the <xref:System.Web.UI.DataSourceView> class. The `CsvDataSourceView` opens a comma-separated value (.csv) file, parses it line by line, and creates a <xref:System.Data.DataTable> object and a <xref:System.Data.DataView> object to hold the data in memory. Finally, a sort expression is applied if one is supplied by the <xref:System.Web.UI.DataSourceSelectArguments> object, and the <xref:System.Data.DataView> object is returned as an <xref:System.Collections.IEnumerable> instance. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#6](~/add/codesnippet/csharp/9907e30e-e760-42a4-aba2-_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#6](~/add/codesnippet/visualbasic/9907e30e-e760-42a4-aba2-_1.vb)]"
  syntax:
    content: protected abstract System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;></xref> that is used to request operations on the data beyond basic data retrieval."
    return:
      type: System.Collections.IEnumerable
      description: "An <xref:System.Collections.IEnumerable> list of data from the underlying data storage."
  overload: System.Web.UI.DataSourceView.ExecuteSelect*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  nameWithType: DataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Performs an update operation on the list of data that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object represents."
  remarks: "Data-bound controls can determine whether the ExecuteUpdate operation is supported by a data source control by using the <xref:System.Web.UI.DataSourceControl.GetView%2A?displayProperty=fullName> method to retrieve the <xref:System.Web.UI.DataSourceView> object and checking the value of the <xref:System.Web.UI.DataSourceView.CanUpdate%2A> property.       The `keys` parameter represents the object or row keys of the data to update. For data sources that represent relational data, such as the <xref:System.Web.UI.WebControls.SqlDataSource> control, the `keys` parameter is a collection of database primary keys. In other scenarios, the `keys` parameter is a collection of name/value pairs and is used to filter a list of data. Any data matching a name/value pair is updated with the values found in the `values` parameter, which is a set of name/value pairs that represents new values for existing fields or columns.      > [!NOTE] >  The <xref:System.Web.UI.DataSourceView> class&quot;s default implementation is to throw a <xref:System.NotSupportedException> exception. If you extend the <xref:System.Web.UI.DataSourceView> class, override the ExecuteUpdate method if your class supports updating data in the underlying data storage."
  example:
  - "The following code example demonstrates how a class that extends the <xref:System.Web.UI.DataSourceView> class can override the <xref:System.Web.UI.DataSourceView.CanUpdate%2A> property and the ExecuteUpdate method. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceView> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/add/codesnippet/csharp/41646def-d513-4cd2-ab48-_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#10](~/add/codesnippet/visualbasic/41646def-d513-4cd2-ab48-_1.vb)]"
  syntax:
    content: protected virtual int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of object or row keys to be updated by the update operation."
    - id: values
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs that represent data elements and their new values."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs that represent data elements and their original values."
    return:
      type: System.Int32
      description: "The number of items that were updated in the underlying data storage."
  overload: System.Web.UI.DataSourceView.ExecuteUpdate*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The ExecuteUpdate operation is not supported by the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.Insert(System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  id: Insert(System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: Insert(IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.Insert(IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.Insert(IDictionary,DataSourceViewOperationCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Performs an asynchronous insert operation on the list of data that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object represents."
  remarks: "The Insert method is the asynchronous data insertion interface for all data source view objects. The Insert method calls the <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> method using any `values` supplied. The `callback` parameter is a delegate that a data-bound control passes to the data source view, which is used to notify the data-bound control when the <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> operation has completed. The method uses the parameters of the <xref:System.Web.UI.DataSourceViewOperationCallback> delegate to return the number of affected records and any <xref:System.Exception> exception that is thrown by the <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> method call."
  syntax:
    content: public virtual void Insert (System.Collections.IDictionary values, System.Web.UI.DataSourceViewOperationCallback callback);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs used during an insert operation."
    - id: callback
      type: System.Web.UI.DataSourceViewOperationCallback
      description: "A <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> delegate that is used to notify a data-bound control when the asynchronous operation is complete."
  overload: System.Web.UI.DataSourceView.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> supplied is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.Name
  id: Name
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: Name
  nameWithType: DataSourceView.Name
  fullName: System.Web.UI.DataSourceView.Name
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the name of the data source view."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "The name of the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref>, if it has one. The default value is &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  overload: System.Web.UI.DataSourceView.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)
  id: OnDataSourceViewChanged(System.EventArgs)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: OnDataSourceViewChanged(EventArgs)
  nameWithType: DataSourceView.OnDataSourceViewChanged(EventArgs)
  fullName: System.Web.UI.DataSourceView.OnDataSourceViewChanged(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Raises the <xref href=&quot;System.Web.UI.DataSourceView.DataSourceViewChanged&quot;></xref> event."
  remarks: "The OnDataSourceViewChanged method notifies a data-bound control that the underlying data source has changed and that the control should rebind and perform any necessary work. Typically, the OnDataSourceViewChanged method is called when a property of the data source view has changed.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnDataSourceViewChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnDataSourceViewChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains event data."
  overload: System.Web.UI.DataSourceView.OnDataSourceViewChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  id: RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  nameWithType: DataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  fullName: System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Called by the <xref:System.Web.UI.DataSourceSelectArguments.RaiseUnsupportedCapabilitiesError*> method to compare the capabilities requested for an <xref:System.Web.UI.DataSourceView.ExecuteSelect*> operation against those that the view supports."
  remarks: "The RaiseUnsupportedCapabilityError method is used by the data source view to examine each of the capabilities requested by a data-bound control, represented by the <xref:System.Web.UI.DataSourceSelectArguments> object passed to the <xref:System.Web.UI.DataSourceView.Select%2A> method, and compare it to the capabilities supported by the data source view."
  syntax:
    content: protected virtual void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);
    parameters:
    - id: capability
      type: System.Web.UI.DataSourceCapabilities
      description: "One of the <xref href=&quot;System.Web.UI.DataSourceCapabilities&quot;></xref> values that is compared against the capabilities that the view supports."
  overload: System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The data source view does not support the data source capability specified."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.Select(System.Web.UI.DataSourceSelectArguments,System.Web.UI.DataSourceViewSelectCallback)
  id: Select(System.Web.UI.DataSourceSelectArguments,System.Web.UI.DataSourceViewSelectCallback)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: Select(DataSourceSelectArguments,DataSourceViewSelectCallback)
  nameWithType: DataSourceView.Select(DataSourceSelectArguments,DataSourceViewSelectCallback)
  fullName: System.Web.UI.DataSourceView.Select(DataSourceSelectArguments,DataSourceViewSelectCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a list of data asynchronously from the underlying data storage."
  remarks: "The Select method is the asynchronous data retrieval interface for all data source view objects. The Select method calls the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> method, passing any <xref:System.Web.UI.DataSourceSelectArguments> supplied. The `callback` parameter is a delegate that a data-bound control passes to the data source view, which is used to notify the data-bound control when the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> operation has completed. The data returned by the <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> call is returned in the parameter of the <xref:System.Web.UI.DataSourceViewSelectCallback> delegate."
  syntax:
    content: public virtual void Select (System.Web.UI.DataSourceSelectArguments arguments, System.Web.UI.DataSourceViewSelectCallback callback);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;></xref> that is used to request operations on the data beyond basic data retrieval."
    - id: callback
      type: System.Web.UI.DataSourceViewSelectCallback
      description: "A <xref href=&quot;System.Web.UI.DataSourceViewSelectCallback&quot;></xref> delegate that is used to notify a data-bound control when the asynchronous operation is complete."
  overload: System.Web.UI.DataSourceView.Select*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.DataSourceViewSelectCallback&quot;></xref> supplied is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.DataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.Update(IDictionary,IDictionary,IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.Update(IDictionary,IDictionary,IDictionary,DataSourceViewOperationCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Performs an asynchronous update operation on the list of data that the <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object represents."
  remarks: "The Update method is the asynchronous data modification interface for all data source view objects. The Update method calls the <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> method using any `keys`, `values`, and `oldValues` parameter values supplied. The `callback` parameter is a delegate that a data-bound control passes to the data source view, which is used to notify the data-bound control when the <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> operation has completed. The method uses the parameters of the <xref:System.Web.UI.DataSourceViewOperationCallback> delegate to return the number of affected records and any <xref:System.Exception> exception that is thrown by the <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> call."
  syntax:
    content: public virtual void Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues, System.Web.UI.DataSourceViewOperationCallback callback);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of object or row keys to be updated by the update operation."
    - id: values
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs that represent data elements and their new values."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> of name/value pairs that represent data elements and their original values."
    - id: callback
      type: System.Web.UI.DataSourceViewOperationCallback
      description: "A <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> delegate that is used to notify a data-bound control when the asynchronous operation is complete."
  overload: System.Web.UI.DataSourceView.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.DataSourceViewOperationCallback&quot;></xref> supplied is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.UI.DataSourceView.#ctor(System.Web.UI.IDataSource,System.String)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: DataSourceView(IDataSource,String)
  nameWithType: DataSourceView.DataSourceView(IDataSource,String)
  fullName: System.Web.UI.DataSourceView.DataSourceView(IDataSource,String)
- uid: System.Web.UI.IDataSource
  parent: System.Web.UI
  isExternal: false
  name: IDataSource
  nameWithType: IDataSource
  fullName: System.Web.UI.IDataSource
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.DataSourceView.CanDelete
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanDelete
  nameWithType: DataSourceView.CanDelete
  fullName: System.Web.UI.DataSourceView.CanDelete
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.DataSourceView.CanExecute(System.String)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanExecute(String)
  nameWithType: DataSourceView.CanExecute(String)
  fullName: System.Web.UI.DataSourceView.CanExecute(String)
- uid: System.Web.UI.DataSourceView.CanInsert
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanInsert
  nameWithType: DataSourceView.CanInsert
  fullName: System.Web.UI.DataSourceView.CanInsert
- uid: System.Web.UI.DataSourceView.CanPage
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanPage
  nameWithType: DataSourceView.CanPage
  fullName: System.Web.UI.DataSourceView.CanPage
- uid: System.Web.UI.DataSourceView.CanRetrieveTotalRowCount
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanRetrieveTotalRowCount
  nameWithType: DataSourceView.CanRetrieveTotalRowCount
  fullName: System.Web.UI.DataSourceView.CanRetrieveTotalRowCount
- uid: System.Web.UI.DataSourceView.CanSort
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanSort
  nameWithType: DataSourceView.CanSort
  fullName: System.Web.UI.DataSourceView.CanSort
- uid: System.Web.UI.DataSourceView.CanUpdate
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanUpdate
  nameWithType: DataSourceView.CanUpdate
  fullName: System.Web.UI.DataSourceView.CanUpdate
- uid: System.Web.UI.DataSourceView.DataSourceViewChanged
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: DataSourceViewChanged
  nameWithType: DataSourceView.DataSourceViewChanged
  fullName: System.Web.UI.DataSourceView.DataSourceViewChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.DataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Delete(IDictionary,IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.Delete(IDictionary,IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.Delete(IDictionary,IDictionary,DataSourceViewOperationCallback)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.DataSourceViewOperationCallback
  parent: System.Web.UI
  isExternal: false
  name: DataSourceViewOperationCallback
  nameWithType: DataSourceViewOperationCallback
  fullName: System.Web.UI.DataSourceViewOperationCallback
- uid: System.Web.UI.DataSourceView.Events
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Events
  nameWithType: DataSourceView.Events
  fullName: System.Web.UI.DataSourceView.Events
- uid: System.ComponentModel.EventHandlerList
  parent: System.ComponentModel
  isExternal: false
  name: EventHandlerList
  nameWithType: EventHandlerList
  fullName: System.ComponentModel.EventHandlerList
- uid: System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteCommand(String,IDictionary,IDictionary)
  nameWithType: DataSourceView.ExecuteCommand(String,IDictionary,IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteCommand(String,IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteCommand(String,IDictionary,IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.ExecuteCommand(String,IDictionary,IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.ExecuteCommand(String,IDictionary,IDictionary,DataSourceViewOperationCallback)
- uid: System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteDelete(IDictionary,IDictionary)
  nameWithType: DataSourceView.ExecuteDelete(IDictionary,IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteDelete(IDictionary,IDictionary)
- uid: System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteInsert(IDictionary)
  nameWithType: DataSourceView.ExecuteInsert(IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteInsert(IDictionary)
- uid: System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteSelect(DataSourceSelectArguments)
  nameWithType: DataSourceView.ExecuteSelect(DataSourceSelectArguments)
  fullName: System.Web.UI.DataSourceView.ExecuteSelect(DataSourceSelectArguments)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  nameWithType: DataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.DataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.DataSourceView.Insert(System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Insert(IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.Insert(IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.Insert(IDictionary,DataSourceViewOperationCallback)
- uid: System.Web.UI.DataSourceView.Name
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Name
  nameWithType: DataSourceView.Name
  fullName: System.Web.UI.DataSourceView.Name
- uid: System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: OnDataSourceViewChanged(EventArgs)
  nameWithType: DataSourceView.OnDataSourceViewChanged(EventArgs)
  fullName: System.Web.UI.DataSourceView.OnDataSourceViewChanged(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  nameWithType: DataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  fullName: System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
- uid: System.Web.UI.DataSourceCapabilities
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCapabilities
  nameWithType: DataSourceCapabilities
  fullName: System.Web.UI.DataSourceCapabilities
- uid: System.Web.UI.DataSourceView.Select(System.Web.UI.DataSourceSelectArguments,System.Web.UI.DataSourceViewSelectCallback)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Select(DataSourceSelectArguments,DataSourceViewSelectCallback)
  nameWithType: DataSourceView.Select(DataSourceSelectArguments,DataSourceViewSelectCallback)
  fullName: System.Web.UI.DataSourceView.Select(DataSourceSelectArguments,DataSourceViewSelectCallback)
- uid: System.Web.UI.DataSourceViewSelectCallback
  parent: System.Web.UI
  isExternal: false
  name: DataSourceViewSelectCallback
  nameWithType: DataSourceViewSelectCallback
  fullName: System.Web.UI.DataSourceViewSelectCallback
- uid: System.Web.UI.DataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary,DataSourceViewOperationCallback)
  nameWithType: DataSourceView.Update(IDictionary,IDictionary,IDictionary,DataSourceViewOperationCallback)
  fullName: System.Web.UI.DataSourceView.Update(IDictionary,IDictionary,IDictionary,DataSourceViewOperationCallback)
- uid: System.Web.UI.DataSourceView.#ctor*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView.DataSourceView
- uid: System.Web.UI.DataSourceView.CanDelete*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanDelete
  nameWithType: DataSourceView.CanDelete
- uid: System.Web.UI.DataSourceView.CanExecute*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanExecute
  nameWithType: DataSourceView.CanExecute
- uid: System.Web.UI.DataSourceView.CanInsert*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanInsert
  nameWithType: DataSourceView.CanInsert
- uid: System.Web.UI.DataSourceView.CanPage*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanPage
  nameWithType: DataSourceView.CanPage
- uid: System.Web.UI.DataSourceView.CanRetrieveTotalRowCount*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanRetrieveTotalRowCount
  nameWithType: DataSourceView.CanRetrieveTotalRowCount
- uid: System.Web.UI.DataSourceView.CanSort*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanSort
  nameWithType: DataSourceView.CanSort
- uid: System.Web.UI.DataSourceView.CanUpdate*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: CanUpdate
  nameWithType: DataSourceView.CanUpdate
- uid: System.Web.UI.DataSourceView.Delete*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Delete
  nameWithType: DataSourceView.Delete
- uid: System.Web.UI.DataSourceView.Events*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Events
  nameWithType: DataSourceView.Events
- uid: System.Web.UI.DataSourceView.ExecuteCommand*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteCommand
  nameWithType: DataSourceView.ExecuteCommand
- uid: System.Web.UI.DataSourceView.ExecuteDelete*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteDelete
  nameWithType: DataSourceView.ExecuteDelete
- uid: System.Web.UI.DataSourceView.ExecuteInsert*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteInsert
  nameWithType: DataSourceView.ExecuteInsert
- uid: System.Web.UI.DataSourceView.ExecuteSelect*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteSelect
  nameWithType: DataSourceView.ExecuteSelect
- uid: System.Web.UI.DataSourceView.ExecuteUpdate*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: ExecuteUpdate
  nameWithType: DataSourceView.ExecuteUpdate
- uid: System.Web.UI.DataSourceView.Insert*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Insert
  nameWithType: DataSourceView.Insert
- uid: System.Web.UI.DataSourceView.Name*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Name
  nameWithType: DataSourceView.Name
- uid: System.Web.UI.DataSourceView.OnDataSourceViewChanged*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: OnDataSourceViewChanged
  nameWithType: DataSourceView.OnDataSourceViewChanged
- uid: System.Web.UI.DataSourceView.RaiseUnsupportedCapabilityError*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: RaiseUnsupportedCapabilityError
  nameWithType: DataSourceView.RaiseUnsupportedCapabilityError
- uid: System.Web.UI.DataSourceView.Select*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Select
  nameWithType: DataSourceView.Select
- uid: System.Web.UI.DataSourceView.Update*
  parent: System.Web.UI.DataSourceView
  isExternal: false
  name: Update
  nameWithType: DataSourceView.Update
