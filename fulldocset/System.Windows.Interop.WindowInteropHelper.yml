### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "Assists interoperation between [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] and [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] code."
  remarks: "Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  The proper security checks are performed by those members.       Use this class whenever you need a more specific object based on its HWND.       An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application. Initialize the WindowInteropHelper with a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object for the dialog box. You can then get the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window&quot;s handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property. The following code example shows how to use WindowInteropHelper when hosting a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application.       [!code-cs[CorePseudocode#WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)]  [!code-vb[CorePseudocode#WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)]       Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object. The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method. By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. Create a WindowInteropHelper with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the WindowInteropHelper to get from HWND to <xref:System.Windows.Interop.HwndSource>."
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;></xref> class for a specified [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window."
  remarks: "The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] application."
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] window object."
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Creates the HWND of the window if the HWND has not been created yet."
  remarks: "Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.       If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.       If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.       Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the EnsureHandle method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.       Calling the EnsureHandle method more than one time does not create new window handles. Calling the EnsureHandle method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the EnsureHandle method is called.       Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting."
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "An <xref:System.IntPtr> that represents the HWND."
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window that is used to create this <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;></xref>."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "The [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] window handle (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] owner window."
  remarks: "You can reparent windows by setting this property. As is true for general [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use."
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "The owner window handle (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
