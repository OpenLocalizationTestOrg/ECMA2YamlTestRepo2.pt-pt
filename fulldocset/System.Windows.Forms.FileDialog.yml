### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.FileDialog
  id: FileDialog
  children:
  - System.Windows.Forms.FileDialog.AddExtension
  - System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  - System.Windows.Forms.FileDialog.CheckFileExists
  - System.Windows.Forms.FileDialog.CheckPathExists
  - System.Windows.Forms.FileDialog.CustomPlaces
  - System.Windows.Forms.FileDialog.DefaultExt
  - System.Windows.Forms.FileDialog.DereferenceLinks
  - System.Windows.Forms.FileDialog.EventFileOk
  - System.Windows.Forms.FileDialog.FileName
  - System.Windows.Forms.FileDialog.FileNames
  - System.Windows.Forms.FileDialog.FileOk
  - System.Windows.Forms.FileDialog.Filter
  - System.Windows.Forms.FileDialog.FilterIndex
  - System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.FileDialog.InitialDirectory
  - System.Windows.Forms.FileDialog.Instance
  - System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  - System.Windows.Forms.FileDialog.Options
  - System.Windows.Forms.FileDialog.Reset
  - System.Windows.Forms.FileDialog.RestoreDirectory
  - System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  - System.Windows.Forms.FileDialog.ShowHelp
  - System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  - System.Windows.Forms.FileDialog.Title
  - System.Windows.Forms.FileDialog.ToString
  - System.Windows.Forms.FileDialog.ValidateNames
  langs:
  - csharp
  name: FileDialog
  nameWithType: FileDialog
  fullName: System.Windows.Forms.FileDialog
  type: Class
  summary: "Displays a dialog box from which the user can select a file."
  remarks: "FileDialog is an abstract class that contains common behavior for the <xref:System.Windows.Forms.OpenFileDialog> and <xref:System.Windows.Forms.SaveFileDialog> classes. It is not intended to be used directly but contains common behavior for those two classes. You cannot create an instance of FileDialog. Although the class is declared public, you cannot inherit from it, as it contains internal abstract methods. To create a dialog box to select or save a file, use <xref:System.Windows.Forms.OpenFileDialog> or <xref:System.Windows.Forms.SaveFileDialog>.       FileDialog is a modal dialog box; therefore, when shown, it blocks the rest of the application until the user has chosen a file. When a dialog box is displayed modally, no input (keyboard or mouse click) can occur except to objects on the dialog box. The program must hide or close the dialog box (usually in response to some user action) before input to the calling program can occur.      > [!CAUTION] >  When you use classes derived from FileDialog, such as <xref:System.Windows.Forms.OpenFileDialog> and <xref:System.Windows.Forms.SaveFileDialog>, avoid using string literals containing absolute paths. Instead, dynamically obtain the path using one or more of the techniques described in the following table.       If you want to enable users to select a folder instead of a file, use the <xref:System.Windows.Forms.FolderBrowserDialog>.       Depending upon the type of application, how data associated with the application is stored, and the reason for accessing the file system, there are many possible ways in which you can create a directory path. The following table shows the techniques for creating paths dynamically.      |Path or program category|Class and members to use|   |------------------------------|------------------------------|   |Standard Windows paths, such as Program Files, MyDocuments, the Desktop and so on|The <xref:System.Environment?displayProperty=fullName> class is the most complete source for these, either through its static methods, such as <xref:System.Environment.SystemDirectory%2A>, or through the <xref:System.Environment.GetFolderPath%2A> method, using one of the <xref:System.Environment.SpecialFolder> enumerated values.|   |Paths related to the current application|The <xref:System.Windows.Forms.Application> class has static members to obtain certain paths, such as <xref:System.Windows.Forms.Application.StartupPath%2A>, <xref:System.Windows.Forms.Application.ExecutablePath%2A>, <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>, and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.<br /><br /> The <xref:System.IO.Path.GetTempPath%2A> method of the <xref:System.IO.Path?displayProperty=fullName> returns the path of the temporary folder.<br /><br /> The <xref:System.IO.Directory.GetCurrentDirectory%2A> method of the <xref:System.IO.Directory?displayProperty=fullName> class returns the application&quot;s current executing directory.<br /><br /> The <xref:System.IO.DriveInfo.RootDirectory%2A> property of the <xref:System.IO.DriveInfo> class represents the specified drive&quot;s root directory.|   |Paths stored as application settings|Access the corresponding applications settings property of the wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. For more information, see [Application Settings for Windows Forms](~/add/includes/ajax-current-ext-md.md).|   |Registry storage|Some applications store directory information in the registry. The <xref:System.Windows.Forms.Application> class has the <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> and <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> properties that resolve to a <xref:Microsoft.Win32.RegistryKey> value.|   |ClickOnce applications|For ClickOnce applications, use <xref:System.Windows.Forms.Application> class members such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A>, which will return a pointer to the ClickOnce data directory. For more information, see [Accessing Local and Remote Data in ClickOnce Applications](~/add/includes/ajax-current-ext-md.md).|   |International applications|For international applications, retrieve the relative path portion from a string resource in your application by using the <xref:System.Resources.ResourceReader?displayProperty=fullName> class. For more information about globalization and localization, see the topic [Globalization and Localization](~/add/includes/ajax-current-ext-md.md).|       Notice that a full path may be built up using one or more of the described techniques. For example, the <xref:System.Environment.GetFolderPath%2A> method might be used to obtain the path to the MyDocuments folder, then an application setting may be used to add a relative subdirectory portion.       The <xref:System.IO.Path?displayProperty=fullName> class contains static members to assist in manipulating absolute and relative path strings, whereas the <xref:System.IO.File?displayProperty=fullName> and <xref:System.IO.Directory?displayProperty=fullName> classes have static members that actually manipulate files and directories, respectively.      > [!IMPORTANT] >  If the user of your application changes the folder in the FileDialog, then the current working directory for your application is set to the location specified in the FileDialog. To prevent this, set the <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> property to `true`."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of FileDialog and illustrates creating, setting of properties, and showing the dialog box. The example uses the <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> method to display the dialog box and return the <xref:System.Windows.Forms.DialogResult>. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/t-system.windows.forms.f_8_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/t-system.windows.forms.f_8_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.f_8_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("FileOk")]

      [System.ComponentModel.DefaultProperty("FileName")]

      public abstract class FileDialog : System.Windows.Forms.CommonDialog
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Windows.Forms.CommonDialog
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Windows.Forms.CommonDialog.HelpRequest
  - System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)
  - System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.CommonDialog.ShowDialog
  - System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)
  - System.Windows.Forms.CommonDialog.Tag
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.AddExtension
  id: AddExtension
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: AddExtension
  nameWithType: FileDialog.AddExtension
  fullName: System.Windows.Forms.FileDialog.AddExtension
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box automatically adds an extension to a file name if the user omits the extension."
  remarks: "The extension added to a file name depends on the currently selected file filter and the value of the <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> property.       If the <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> property is `true`, the dialog box adds the first extension from the current file filter that matches an existing file. If no files match the current file filter, the dialog box adds the extension specified in the <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> property.       If the <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> property is `false`, the dialog box adds the first valid file name extension from the current file filter. If the current file filter contains no valid file name extensions, the dialog box adds the extension specified in the <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> property."
  syntax:
    content: public bool AddExtension { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box adds an extension to a file name if the user omits the extension; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.AddExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  id: AutoUpgradeEnabled
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: AutoUpgradeEnabled
  nameWithType: FileDialog.AutoUpgradeEnabled
  fullName: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether this <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref> instance should automatically upgrade appearance and behavior when running on [!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)]."
  remarks: "If this property is `false`, the <xref:System.Windows.Forms.FileDialog> class will have a [!INCLUDE[winxp](~/add/includes/winxp-md.md)]-style appearance and behavior on [!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)].       On [!INCLUDE[winxp](~/add/includes/winxp-md.md)], this property does not have any effect."
  syntax:
    content: public bool AutoUpgradeEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref> instance should automatically upgrade appearance and behavior when running on [!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)]; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.AutoUpgradeEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.CheckFileExists
  id: CheckFileExists
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: CheckFileExists
  nameWithType: FileDialog.CheckFileExists
  fullName: System.Windows.Forms.FileDialog.CheckFileExists
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist."
  remarks: "The default value is `true` for an inheriting <xref:System.Windows.Forms.OpenFileDialog> and `false` for an inheriting <xref:System.Windows.Forms.SaveFileDialog>."
  syntax:
    content: public virtual bool CheckFileExists { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box displays a warning if the user specifies a file name that does not exist; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.CheckFileExists*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.CheckPathExists
  id: CheckPathExists
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: CheckPathExists
  nameWithType: FileDialog.CheckPathExists
  fullName: System.Windows.Forms.FileDialog.CheckPathExists
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a path that does not exist."
  syntax:
    content: public bool CheckPathExists { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box displays a warning when the user specifies a path that does not exist; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.CheckPathExists*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.CustomPlaces
  id: CustomPlaces
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: CustomPlaces
  nameWithType: FileDialog.CustomPlaces
  fullName: System.Windows.Forms.FileDialog.CustomPlaces
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the custom places collection for this <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref> instance."
  remarks: "On [!INCLUDE[winxp](~/add/includes/winxp-md.md)], this property does not have any effect."
  example:
  - "The following code example demonstrates how to use the CustomPlaces collection. To run this example, paste the following code into a Windows Form and call `InitializeDialogAndButton` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_53_1.vb)]\n [!code-cs[System.Windows.Forms.FileDialogCommonPlaces#1](~/add/codesnippet/csharp/p-system.windows.forms.f_53_1.cs)]"
  syntax:
    content: public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }
    return:
      type: System.Windows.Forms.FileDialogCustomPlacesCollection
      description: "The custom places collection for this <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref> instance."
  overload: System.Windows.Forms.FileDialog.CustomPlaces*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.DefaultExt
  id: DefaultExt
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: DefaultExt
  nameWithType: FileDialog.DefaultExt
  fullName: System.Windows.Forms.FileDialog.DefaultExt
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the default file name extension."
  remarks: "When the user of your application specifies a file name without an extension, the <xref:System.Windows.Forms.FileDialog> appends an extension to the file name. The extension that is used is determined by the <xref:System.Windows.Forms.FileDialog.Filter%2A> and DefaultExt properties. If a filter is selected in the <xref:System.Windows.Forms.FileDialog> and the filter specifies an extension, then that extension is used. If the filter selected uses a wildcard in place of the extension, then the extension specified in the DefaultExt property is used."
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=fullName> and <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=fullName> methods with streams. It also demonstrates using the <xref:System.Windows.Forms.FileDialog.FileName%2A>, DefaultExt, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=fullName> members.  \n  \n This is a complete example that is ready to run when you copy it to your project.  \n  \n [!code-cs[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/csharp/p-system.windows.forms.f_16_1.cs)]\n [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_16_1.vb)]\n [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/cpp/p-system.windows.forms.f_16_1.cpp)]"
  syntax:
    content: public string DefaultExt { get; set; }
    return:
      type: System.String
      description: "The default file name extension. The returned string does not include the period. The default value is an empty string (&quot;&quot;)."
  overload: System.Windows.Forms.FileDialog.DefaultExt*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.DereferenceLinks
  id: DereferenceLinks
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: DereferenceLinks
  nameWithType: FileDialog.DereferenceLinks
  fullName: System.Windows.Forms.FileDialog.DereferenceLinks
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box returns the location of the file referenced by the shortcut or whether it returns the location of the shortcut (.lnk)."
  syntax:
    content: public bool DereferenceLinks { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box returns the location of the file referenced by the shortcut; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.DereferenceLinks*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.EventFileOk
  id: EventFileOk
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: EventFileOk
  nameWithType: FileDialog.EventFileOk
  fullName: System.Windows.Forms.FileDialog.EventFileOk
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Owns the <xref href=&quot;System.Windows.Forms.FileDialog.FileOk&quot;></xref> event."
  syntax:
    content: protected static readonly object EventFileOk;
    return:
      type: System.Object
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FileName
  id: FileName
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FileName
  nameWithType: FileDialog.FileName
  fullName: System.Windows.Forms.FileDialog.FileName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a string containing the file name selected in the file dialog box."
  remarks: "The file name includes both the file path and the extension. If no files are selected, this method returns an empty string (&quot;&quot;).       When used from the <xref:System.Windows.Forms.SaveFileDialog> class, this property represents the file being saved; when used from the <xref:System.Windows.Forms.OpenFileDialog> class, it represents the file being opened.       This property can only be the name of one selected file. If you want to return an array containing the names of all selected files in a multiple-selection dialog box, use <xref:System.Windows.Forms.FileDialog.FileNames%2A>."
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=fullName> and <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=fullName> methods with streams. It also demonstrates using the FileName, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=fullName> members.  \n  \n This is a complete example that is ready to run when you copy it to your project.  \n  \n [!code-cs[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/csharp/p-system.windows.forms.f_44_1.cs)]\n [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_44_1.vb)]\n [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/cpp/p-system.windows.forms.f_44_1.cpp)]"
  syntax:
    content: public string FileName { get; set; }
    return:
      type: System.String
      description: "The file name selected in the file dialog box. The default value is an empty string (&quot;&quot;)."
  overload: System.Windows.Forms.FileDialog.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FileNames
  id: FileNames
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FileNames
  nameWithType: FileDialog.FileNames
  fullName: System.Windows.Forms.FileDialog.FileNames
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the file names of all selected files in the dialog box."
  remarks: "Each file name includes both the file path and the extension. If no files are selected, this method returns an empty array."
  example:
  - "The following code example allows the user to select a number of images and display them in <xref:System.Windows.Forms.PictureBox> controls on a Form. It demonstrates initializing an <xref:System.Windows.Forms.OpenFileDialog>, setting the <xref:System.Windows.Forms.FileDialog.Title%2A> and <xref:System.Windows.Forms.FileDialog.Filter%2A> properties, and allowing the user to select multiple files by setting the <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> property to true. This code example assumes that your form already has an <xref:System.Windows.Forms.OpenFileDialog> control named `openFileDialog1`, a <xref:System.Windows.Forms.Button> named `SelectFileButton`, and a <xref:System.Windows.Forms.FlowLayoutPanel> named `flowLayoutPanel1`.  \n  \n [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/add/codesnippet/visualbasic/TestOpenFileDialogMultiSelectVB/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/add/codesnippet/csharp/TestOpenFileDialogMultiSelect/Form1.cs#1)]"
  syntax:
    content: public string[] FileNames { get; }
    return:
      type: System.String[]
      description: "An array of type <xref:System.String>, containing the file names of all selected files in the dialog box."
  overload: System.Windows.Forms.FileDialog.FileNames*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FileOk
  id: FileOk
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FileOk
  nameWithType: FileDialog.FileOk
  fullName: System.Windows.Forms.FileDialog.FileOk
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user clicks on the **Open** or **Save** button on a file dialog box."
  remarks: "For information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.FileDialog.FileNames%2A> property, handling the FileOk event and using the <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> method. When the example runs, a user can select graphics files from an <xref:System.Windows.Forms.OpenFileDialog> object. The selected files are displayed in the form. The <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> method forces a repaint of the form for each graphics file opened. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.PictureBox> named `PictureBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, and a <xref:System.Windows.Forms.Button> named `fileButton`. Call the `InitializePictureBox` and `InitializeOpenFileDialog` methods from the form's constructor or `Load` method. When the example is running, display the dialog box by clicking the button.  \n  \n [!code-cs[System.Windows.Forms.FileDialog#1](~/add/codesnippet/csharp/e-system.windows.forms.f_1_1.cs)]\n [!code-cpp[System.Windows.Forms.FileDialog#1](~/add/codesnippet/cpp/e-system.windows.forms.f_1_1.cpp)]\n [!code-vb[System.Windows.Forms.FileDialog#1](~/add/codesnippet/visualbasic/e-system.windows.forms.f_1_1.vb)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler FileOk;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Filter
  id: Filter
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Filter
  nameWithType: FileDialog.Filter
  fullName: System.Windows.Forms.FileDialog.Filter
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the current file name filter string, which determines the choices that appear in the &quot;Save as file type&quot; or &quot;Files of type&quot; box in the dialog box."
  remarks: "For each filtering option, the filter string contains a description of the filter, followed by the vertical bar (&#124;) and the filter pattern. The strings for different filtering options are separated by the vertical bar.       The following is an example of a filter string:       `Text files (*.txt)|*.txt|All files (*.*)|*.*`       You can add several filter patterns to a filter by separating the file types with semicolons, for example:       `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`       Use the <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> property to set which filtering option is shown first to the user."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the Filter and <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> properties to provide a list of filters for the user. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_54_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_54_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_54_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "The file filtering options available in the dialog box."
  overload: System.Windows.Forms.FileDialog.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Filter</code> format is invalid."
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FilterIndex
  id: FilterIndex
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FilterIndex
  nameWithType: FileDialog.FilterIndex
  fullName: System.Windows.Forms.FileDialog.FilterIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the index of the filter currently selected in the file dialog box."
  remarks: "Use the FilterIndex property to set which filtering option is shown first to the user. You can also use the value of FilterIndex after showing the file dialog to perform special file operations depending upon the filter chosen.      > [!NOTE] >  The index value of the first filter entry is 1."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the <xref:System.Windows.Forms.FileDialog.Filter%2A> and FilterIndex properties to provide a list of filters for the user. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_0_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_0_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_0_1.vb)]"
  syntax:
    content: public int FilterIndex { get; set; }
    return:
      type: System.Int32
      description: "A value containing the index of the filter currently selected in the file dialog box. The default value is 1."
  overload: System.Windows.Forms.FileDialog.FilterIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  id: HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: HookProc(IntPtr,Int32,IntPtr,IntPtr)
  nameWithType: FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  fullName: System.Windows.Forms.FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Defines the common dialog box hook procedure that is overridden to add specific functionality to the file dialog box."
  remarks: "A hook procedure allows the user to connect or insert other routines into a routine or application for the purpose of debugging or enhancing functionality.       By default, the hook procedure centers the dialog box on the screen in response to a WM_INITDIALOG message."
  syntax:
    content: protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    parameters:
    - id: hWnd
      type: System.IntPtr
      description: "The handle to the dialog box window."
    - id: msg
      type: System.Int32
      description: "The message received by the dialog box."
    - id: wparam
      type: System.IntPtr
      description: "Additional information about the message."
    - id: lparam
      type: System.IntPtr
      description: "Additional information about the message."
    return:
      type: System.IntPtr
      description: "Returns zero if the default dialog box procedure processes the message; returns a nonzero value if the default dialog box procedure ignores the message."
  overload: System.Windows.Forms.FileDialog.HookProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.InitialDirectory
  id: InitialDirectory
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: InitialDirectory
  nameWithType: FileDialog.InitialDirectory
  fullName: System.Windows.Forms.FileDialog.InitialDirectory
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the initial directory displayed by the file dialog box."
  remarks: "The InitialDirectory property is typically set using one of the following sources:      -   A path that was previously used in the program, perhaps retained from the last directory or file operation.      -   A path read from a persistent source, such as an application setting, a <xref:Microsoft.Win32.Registry> or a string resource in the application.      -   Standard Windows system and user paths, such as Program Files, MyDocuments, MyMusic, and so on (which you can obtain using the <xref:System.Environment.GetFolderPath%2A> method)      -   A path related to the current application, such as its startup directory (which you can obtain using properties on the <xref:System.Windows.Forms.Application> object).       For more information about creating dynamic paths, see the <xref:System.Windows.Forms.FileDialog> class overview.       On [!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)], if InitialDirectory is set to a full file name instead of just a directory path, the initial directory will default either to the application path, or to the directory from which the user last selected a file."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the InitialDirectory property to set what the initial directory is when the dialog box is displayed to the user. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_30_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_30_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_30_1.vb)]"
  syntax:
    content: public string InitialDirectory { get; set; }
    return:
      type: System.String
      description: "The initial directory displayed by the file dialog box. The default is an empty string (&quot;&quot;)."
  overload: System.Windows.Forms.FileDialog.InitialDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Instance
  id: Instance
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Instance
  nameWithType: FileDialog.Instance
  fullName: System.Windows.Forms.FileDialog.Instance
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the Win32 instance handle for the application."
  syntax:
    content: protected virtual IntPtr Instance { get; }
    return:
      type: System.IntPtr
      description: "A Win32 instance handle for the application."
  overload: System.Windows.Forms.FileDialog.Instance*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  id: OnFileOk(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: OnFileOk(CancelEventArgs)
  nameWithType: FileDialog.OnFileOk(CancelEventArgs)
  fullName: System.Windows.Forms.FileDialog.OnFileOk(CancelEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.FileDialog.FileOk&quot;></xref> event."
  syntax:
    content: protected void OnFileOk (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "A <xref:System.ComponentModel.CancelEventArgs> that contains the event data."
  overload: System.Windows.Forms.FileDialog.OnFileOk*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Options
  id: Options
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Options
  nameWithType: FileDialog.Options
  fullName: System.Windows.Forms.FileDialog.Options
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets values to initialize the <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>."
  remarks: "The Options property corresponds to the flags used to initialize a file dialog box using Win32. Use the properties of the <xref:System.Windows.Forms.FileDialog> class to get and set the options."
  syntax:
    content: protected int Options { get; }
    return:
      type: System.Int32
      description: "A bitwise combination of internal values that initializes the <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.Options*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Reset
  id: Reset
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Reset()
  nameWithType: FileDialog.Reset()
  fullName: System.Windows.Forms.FileDialog.Reset()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets all properties to their default values."
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Windows.Forms.FileDialog.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.RestoreDirectory
  id: RestoreDirectory
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: RestoreDirectory
  nameWithType: FileDialog.RestoreDirectory
  fullName: System.Windows.Forms.FileDialog.RestoreDirectory
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box restores the directory to the previously selected directory before closing."
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the RestoreDirectory property to ensure that the previously selected directory is restored when the dialog box is closed. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_5_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_5_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_5_1.vb)]"
  syntax:
    content: public bool RestoreDirectory { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box restores the current directory to the previously selected directory if the user changed the directory while searching for files; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.RestoreDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  id: RunDialog(System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: RunDialog(IntPtr)
  nameWithType: FileDialog.RunDialog(IntPtr)
  fullName: System.Windows.Forms.FileDialog.RunDialog(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Specifies a common dialog box."
  remarks: "This method provides an implementation of <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>, and is invoked when the user of a file dialog invokes <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>.       In the derived classes <xref:System.Windows.Forms.OpenFileDialog> and <xref:System.Windows.Forms.SaveFileDialog> an invalid file name <xref:System.Exception> can be raised."
  syntax:
    content: protected override bool RunDialog (IntPtr hWndOwner);
    parameters:
    - id: hWndOwner
      type: System.IntPtr
      description: "A value that represents the window handle of the owner window for the common dialog box."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the file could be opened; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.RunDialog*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.ShowHelp
  id: ShowHelp
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: ShowHelp
  nameWithType: FileDialog.ShowHelp
  fullName: System.Windows.Forms.FileDialog.ShowHelp
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the **Help** button is displayed in the file dialog box."
  remarks: "A <xref:System.Windows.Forms.Control.HelpRequested> event is raised when the user clicks the **Help** button."
  syntax:
    content: public bool ShowHelp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box includes a help button; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.ShowHelp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  id: SupportMultiDottedExtensions
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: SupportMultiDottedExtensions
  nameWithType: FileDialog.SupportMultiDottedExtensions
  fullName: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets whether the dialog box supports displaying and saving files that have multiple file name extensions."
  remarks: "Sometimes users must open and save files that use multiple file name extensions. For example, the application manifest files used by the [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] deployment technology end in the complex file name extension &quot;.exe.manifest&quot;. Setting this property to `true` enables you to set the <xref:System.Windows.Forms.FileDialog.Filter%2A> property to a multi-dotted extension.       If SupportMultiDottedExtensions is `false`, and you assign a multi-dotted extension to <xref:System.Windows.Forms.FileDialog.Filter%2A>, derived controls such as <xref:System.Windows.Forms.SaveFileDialog> will only use the last extension in the string. For example, &quot;.manifest&quot; will be used instead of &quot;.exe.manifest&quot;."
  example:
  - "The following code example saves files with the extension \".data.txt\". This code example requires that your application host a <xref:System.Windows.Forms.SaveFileDialog> named `saveFileDialog1` and a <xref:System.Windows.Forms.Button> named `button1`.  \n  \n [!code-cs[SupportMultiDottedExtensions#1](~/add/codesnippet/csharp/TestSaveFileDialog/Form1.cs#1)]\n [!code-vb[SupportMultiDottedExtensions#1](~/add/codesnippet/visualbasic/TestSaveFileDialogVB/Form1.vb#1)]"
  syntax:
    content: public bool SupportMultiDottedExtensions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box supports multiple file name extensions; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Title
  id: Title
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Title
  nameWithType: FileDialog.Title
  fullName: System.Windows.Forms.FileDialog.Title
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the file dialog box title."
  remarks: "The string is placed in the title bar of the dialog box. If the title is an empty string, the system uses a default title, which is either &quot;Save As&quot; or &quot;Open&quot;."
  example:
  - "The following code example demonstrates initializing an <xref:System.Windows.Forms.OpenFileDialog>, setting the Title and <xref:System.Windows.Forms.FileDialog.Filter%2A> properties, and allowing the user to select multiple files by setting the <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=fullName> property to true. To run this example, paste the following code in a form containing an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1` and a <xref:System.Windows.Forms.Button> named `fileButton`. Call the `InitializeOpenFileDialog` method in the form's constructor or `Load` method. The example also requires that the `Click` event of the `Button` control is connected to the event handler defined in the example.  \n  \n [!code-cs[System.Windows.Forms.FileDialog#6](~/add/codesnippet/csharp/p-system.windows.forms.f_25_1.cs)]\n [!code-cpp[System.Windows.Forms.FileDialog#6](~/add/codesnippet/cpp/p-system.windows.forms.f_25_1.cpp)]\n [!code-vb[System.Windows.Forms.FileDialog#6](~/add/codesnippet/visualbasic/p-system.windows.forms.f_25_1.vb)]"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "The file dialog box title. The default value is an empty string (&quot;&quot;)."
  overload: System.Windows.Forms.FileDialog.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.ToString
  id: ToString
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: ToString()
  nameWithType: FileDialog.ToString()
  fullName: System.Windows.Forms.FileDialog.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Provides a string version of this object."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string version of this object."
  overload: System.Windows.Forms.FileDialog.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.ValidateNames
  id: ValidateNames
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: ValidateNames
  nameWithType: FileDialog.ValidateNames
  fullName: System.Windows.Forms.FileDialog.ValidateNames
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box accepts only valid Win32 file names."
  remarks: "If the edit control contains anything but spaces when the user clicks **OK**, the dialog box returns the file name, whether it is valid or not. No default extension is added to the text."
  syntax:
    content: public bool ValidateNames { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box accepts only valid Win32 file names; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FileDialog.ValidateNames*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.CommonDialog
  isExternal: false
  name: System.Windows.Forms.CommonDialog
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.FileDialog.AddExtension
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AddExtension
  nameWithType: FileDialog.AddExtension
  fullName: System.Windows.Forms.FileDialog.AddExtension
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AutoUpgradeEnabled
  nameWithType: FileDialog.AutoUpgradeEnabled
  fullName: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
- uid: System.Windows.Forms.FileDialog.CheckFileExists
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckFileExists
  nameWithType: FileDialog.CheckFileExists
  fullName: System.Windows.Forms.FileDialog.CheckFileExists
- uid: System.Windows.Forms.FileDialog.CheckPathExists
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckPathExists
  nameWithType: FileDialog.CheckPathExists
  fullName: System.Windows.Forms.FileDialog.CheckPathExists
- uid: System.Windows.Forms.FileDialog.CustomPlaces
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CustomPlaces
  nameWithType: FileDialog.CustomPlaces
  fullName: System.Windows.Forms.FileDialog.CustomPlaces
- uid: System.Windows.Forms.FileDialogCustomPlacesCollection
  parent: System.Windows.Forms
  isExternal: false
  name: FileDialogCustomPlacesCollection
  nameWithType: FileDialogCustomPlacesCollection
  fullName: System.Windows.Forms.FileDialogCustomPlacesCollection
- uid: System.Windows.Forms.FileDialog.DefaultExt
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DefaultExt
  nameWithType: FileDialog.DefaultExt
  fullName: System.Windows.Forms.FileDialog.DefaultExt
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.FileDialog.DereferenceLinks
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DereferenceLinks
  nameWithType: FileDialog.DereferenceLinks
  fullName: System.Windows.Forms.FileDialog.DereferenceLinks
- uid: System.Windows.Forms.FileDialog.EventFileOk
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: EventFileOk
  nameWithType: FileDialog.EventFileOk
  fullName: System.Windows.Forms.FileDialog.EventFileOk
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.FileDialog.FileName
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileName
  nameWithType: FileDialog.FileName
  fullName: System.Windows.Forms.FileDialog.FileName
- uid: System.Windows.Forms.FileDialog.FileNames
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileNames
  nameWithType: FileDialog.FileNames
  fullName: System.Windows.Forms.FileDialog.FileNames
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.FileDialog.FileOk
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileOk
  nameWithType: FileDialog.FileOk
  fullName: System.Windows.Forms.FileDialog.FileOk
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Forms.FileDialog.Filter
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Filter
  nameWithType: FileDialog.Filter
  fullName: System.Windows.Forms.FileDialog.Filter
- uid: System.Windows.Forms.FileDialog.FilterIndex
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FilterIndex
  nameWithType: FileDialog.FilterIndex
  fullName: System.Windows.Forms.FileDialog.FilterIndex
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: HookProc(IntPtr,Int32,IntPtr,IntPtr)
  nameWithType: FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  fullName: System.Windows.Forms.FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.FileDialog.InitialDirectory
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: InitialDirectory
  nameWithType: FileDialog.InitialDirectory
  fullName: System.Windows.Forms.FileDialog.InitialDirectory
- uid: System.Windows.Forms.FileDialog.Instance
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Instance
  nameWithType: FileDialog.Instance
  fullName: System.Windows.Forms.FileDialog.Instance
- uid: System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: OnFileOk(CancelEventArgs)
  nameWithType: FileDialog.OnFileOk(CancelEventArgs)
  fullName: System.Windows.Forms.FileDialog.OnFileOk(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Forms.FileDialog.Options
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Options
  nameWithType: FileDialog.Options
  fullName: System.Windows.Forms.FileDialog.Options
- uid: System.Windows.Forms.FileDialog.Reset
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Reset()
  nameWithType: FileDialog.Reset()
  fullName: System.Windows.Forms.FileDialog.Reset()
- uid: System.Windows.Forms.FileDialog.RestoreDirectory
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RestoreDirectory
  nameWithType: FileDialog.RestoreDirectory
  fullName: System.Windows.Forms.FileDialog.RestoreDirectory
- uid: System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RunDialog(IntPtr)
  nameWithType: FileDialog.RunDialog(IntPtr)
  fullName: System.Windows.Forms.FileDialog.RunDialog(IntPtr)
- uid: System.Windows.Forms.FileDialog.ShowHelp
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ShowHelp
  nameWithType: FileDialog.ShowHelp
  fullName: System.Windows.Forms.FileDialog.ShowHelp
- uid: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: SupportMultiDottedExtensions
  nameWithType: FileDialog.SupportMultiDottedExtensions
  fullName: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
- uid: System.Windows.Forms.FileDialog.Title
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Title
  nameWithType: FileDialog.Title
  fullName: System.Windows.Forms.FileDialog.Title
- uid: System.Windows.Forms.FileDialog.ToString
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ToString()
  nameWithType: FileDialog.ToString()
  fullName: System.Windows.Forms.FileDialog.ToString()
- uid: System.Windows.Forms.FileDialog.ValidateNames
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ValidateNames
  nameWithType: FileDialog.ValidateNames
  fullName: System.Windows.Forms.FileDialog.ValidateNames
- uid: System.Windows.Forms.FileDialog.AddExtension*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AddExtension
  nameWithType: FileDialog.AddExtension
- uid: System.Windows.Forms.FileDialog.AutoUpgradeEnabled*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AutoUpgradeEnabled
  nameWithType: FileDialog.AutoUpgradeEnabled
- uid: System.Windows.Forms.FileDialog.CheckFileExists*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckFileExists
  nameWithType: FileDialog.CheckFileExists
- uid: System.Windows.Forms.FileDialog.CheckPathExists*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckPathExists
  nameWithType: FileDialog.CheckPathExists
- uid: System.Windows.Forms.FileDialog.CustomPlaces*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CustomPlaces
  nameWithType: FileDialog.CustomPlaces
- uid: System.Windows.Forms.FileDialog.DefaultExt*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DefaultExt
  nameWithType: FileDialog.DefaultExt
- uid: System.Windows.Forms.FileDialog.DereferenceLinks*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DereferenceLinks
  nameWithType: FileDialog.DereferenceLinks
- uid: System.Windows.Forms.FileDialog.FileName*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileName
  nameWithType: FileDialog.FileName
- uid: System.Windows.Forms.FileDialog.FileNames*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileNames
  nameWithType: FileDialog.FileNames
- uid: System.Windows.Forms.FileDialog.Filter*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Filter
  nameWithType: FileDialog.Filter
- uid: System.Windows.Forms.FileDialog.FilterIndex*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FilterIndex
  nameWithType: FileDialog.FilterIndex
- uid: System.Windows.Forms.FileDialog.HookProc*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: HookProc
  nameWithType: FileDialog.HookProc
- uid: System.Windows.Forms.FileDialog.InitialDirectory*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: InitialDirectory
  nameWithType: FileDialog.InitialDirectory
- uid: System.Windows.Forms.FileDialog.Instance*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Instance
  nameWithType: FileDialog.Instance
- uid: System.Windows.Forms.FileDialog.OnFileOk*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: OnFileOk
  nameWithType: FileDialog.OnFileOk
- uid: System.Windows.Forms.FileDialog.Options*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Options
  nameWithType: FileDialog.Options
- uid: System.Windows.Forms.FileDialog.Reset*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Reset
  nameWithType: FileDialog.Reset
- uid: System.Windows.Forms.FileDialog.RestoreDirectory*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RestoreDirectory
  nameWithType: FileDialog.RestoreDirectory
- uid: System.Windows.Forms.FileDialog.RunDialog*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RunDialog
  nameWithType: FileDialog.RunDialog
- uid: System.Windows.Forms.FileDialog.ShowHelp*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ShowHelp
  nameWithType: FileDialog.ShowHelp
- uid: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: SupportMultiDottedExtensions
  nameWithType: FileDialog.SupportMultiDottedExtensions
- uid: System.Windows.Forms.FileDialog.Title*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Title
  nameWithType: FileDialog.Title
- uid: System.Windows.Forms.FileDialog.ToString*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ToString
  nameWithType: FileDialog.ToString
- uid: System.Windows.Forms.FileDialog.ValidateNames*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ValidateNames
  nameWithType: FileDialog.ValidateNames
