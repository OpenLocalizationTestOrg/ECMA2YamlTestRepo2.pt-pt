### YamlMime:ManagedReference
items:
- uid: System.TimeZone
  id: TimeZone
  children:
  - System.TimeZone.#ctor
  - System.TimeZone.CurrentTimeZone
  - System.TimeZone.DaylightName
  - System.TimeZone.GetDaylightChanges(System.Int32)
  - System.TimeZone.GetUtcOffset(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  - System.TimeZone.StandardName
  - System.TimeZone.ToLocalTime(System.DateTime)
  - System.TimeZone.ToUniversalTime(System.DateTime)
  langs:
  - csharp
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
  type: Class
  summary: "Represents a time zone."
  remarks: "A time zone is a geographical region in which the same standard time is used.      > [!IMPORTANT] >  Whenever possible, use the <xref:System.TimeZoneInfo> class instead of the TimeZone class.       You can use the TimeZone class to retrieve information about the current time zone, and to convert times from local time to Coordinated Universal Time (UTC) or vice versa. However, you cannot use the TimeZone class to represent time zones other than the local zone or to handle date and time conversions from one time zone to another. For this purpose, use the <xref:System.TimeZoneInfo> class. You can use this class to retrieve information on any time zone defined on the local system, to create custom time zones, and to convert times from one time zone to another.       The TimeZone class supports only a single daylight saving time adjustment rule for the local time zone. As a result, the TimeZone class can accurately report daylight saving time information or convert between UTC and local time only for the period in which the latest adjustment rule is in effect. In contrast, the <xref:System.TimeZoneInfo> class supports multiple adjustment rules, which makes it possible to work with historic time zone data."
  example:
  - "The following example references and displays selected `TimeZone` class elements.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/t-system.timezone_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/t-system.timezone_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/t-system.timezone_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TimeZone
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.TimeZone.#ctor
  id: '#ctor'
  parent: System.TimeZone
  langs:
  - csharp
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Initializes a new instance of the <xref href=&quot;System.TimeZone&quot;></xref> class."
  syntax:
    content: protected TimeZone ();
    parameters: []
  overload: System.TimeZone.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.CurrentTimeZone
  id: CurrentTimeZone
  parent: System.TimeZone
  langs:
  - csharp
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Gets the time zone of the current computer."
  remarks: "The CurrentTimeZone property corresponds to the <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> property. Whenever possible, use the <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> property."
  example:
  - "The following example references the `CurrentTimeZone` property and displays the names for standard time and daylight saving time for the local time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.curren_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.curren_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.curren_1.cs)]"
  syntax:
    content: public static TimeZone CurrentTimeZone { get; }
    return:
      type: System.TimeZone
      description: "A <xref href=&quot;System.TimeZone&quot;></xref> object that represents the current local time zone."
  overload: System.TimeZone.CurrentTimeZone*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.DaylightName
  id: DaylightName
  parent: System.TimeZone
  langs:
  - csharp
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Gets the daylight saving time zone name."
  remarks: "If daylight saving time is not used in the time zone, an empty string (&quot;&quot;) is returned.       The DaylightName property corresponds to the <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName> property. Whenever possible, use the <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName> property."
  example:
  - "The following example references and displays the `DaylightName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.daylig_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.daylig_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.daylig_1.cs)]"
  syntax:
    content: public abstract string DaylightName { get; }
    return:
      type: System.String
      description: "The daylight saving time zone name."
  overload: System.TimeZone.DaylightName*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  id: GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Returns the daylight saving time period for a particular year."
  remarks: "Only one daylight saving time period per year is supported.       If daylight saving time is not used in the current time zone, the return value is a <xref:System.Globalization.DaylightTime> object, where the value of <xref:System.Globalization.DaylightTime.Start%2A> and <xref:System.Globalization.DaylightTime.End%2A> is <xref:System.DateTime.MinValue?displayProperty=fullName>, and the value of <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName> is a <xref:System.TimeSpan> initialized to 0 ticks."
  syntax:
    content: public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "The year that the daylight saving time period applies to."
    return:
      type: System.Globalization.DaylightTime
      description: "A <xref href=&quot;System.Globalization.DaylightTime&quot;></xref> object that contains the start and end date for daylight saving time in <code>year</code>."
  overload: System.TimeZone.GetDaylightChanges*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is less than 1 or greater than 9999."
  platform:
  - net462
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Returns the Coordinated Universal Time (UTC) offset for the specified local time."
  remarks: "This method returns the offset, or difference, between the `time` parameter and Coordinated Universal Time (UTC). That is:       `time` = UTC + offset       The method interprets the time zone of `time` based on its <xref:System.DateTime.Kind%2A> property. If the value of the <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind?displayProperty=fullName> or <xref:System.DateTimeKind?displayProperty=fullName>, the method returns the offset of the local time zone. If the value of the <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind?displayProperty=fullName>, the method returns an offset equal to <xref:System.TimeSpan.Zero?displayProperty=fullName>.       If the local time zone observes daylight saving time, GetUtcOffset applies the current adjustment rule to `time` when determining the offset of the local time zone. That is, the offset returned by GetUtcOffset reflects whether `time` falls in the time zone&quot;s standard time or its daylight saving time.      > [!NOTE] >  The GetUtcOffset method recognizes only the current daylight saving time adjustment rule for the local time zone. As a result, it is guaranteed to accurately return the UTC offset of a local time only during the period in which the latest adjustment rule is in effect. It may return inaccurate results if `time` is a historic date and time value that was subject to a previous adjustment rule.       The GetUtcOffset method corresponds to the <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName> method. Whenever possible, use the <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName> method.       Because the date and time value represented by `time` and this value&quot;s offset from UTC are not tightly coupled, a local or unspecified date and time value can return a different offset value when run on different computers or when run on the same computer under different time zones. If this behavior is undesirable, use a <xref:System.DateTimeOffset> value instead. The <xref:System.DateTimeOffset> data type tightly couples a date and time value with its offset from UTC."
  syntax:
    content: public abstract TimeSpan GetUtcOffset (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "A date and time value."
    return:
      type: System.TimeSpan
      description: "The Coordinated Universal Time (UTC) offset from <code>time</code>."
  overload: System.TimeZone.GetUtcOffset*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Returns a value indicating whether the specified date and time is within a daylight saving time period."
  remarks: "The year to which the daylight saving time period applies is derived from the `time` parameter.       Because the <xref:System.TimeZone> class supports a single daylight saving time adjustment rule, the IsDaylightSavingTime method applies the current adjustment rule to any date, regardless of whether the adjustment rule was in effect on that date. Assuming that the operating system itself has accurate historic daylight saving time data, a more accurate result is available by using the <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> method. Whenever possible, use the <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> method."
  syntax:
    content: public virtual bool IsDaylightSavingTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "A date and time."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>time</code> is in a daylight saving time period; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  id: IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Returns a value indicating whether the specified date and time is within the specified daylight saving time period."
  remarks: "The <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> method provides the same functionality as this overload of the IsDaylightSavingTime method. Whenever possible, use the <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> method."
  syntax:
    content: public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);
    parameters:
    - id: time
      type: System.DateTime
      description: "A date and time."
    - id: daylightTimes
      type: System.Globalization.DaylightTime
      description: "To be added."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>time</code> is in <code>daylightTimes</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>daylightTimes</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.TimeZone.StandardName
  id: StandardName
  parent: System.TimeZone
  langs:
  - csharp
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Gets the standard time zone name."
  remarks: "The StandardName property corresponds to the <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName> property. Whenever possible, use the <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName> property."
  example:
  - "The following example references and displays the `StandardName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.standa_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.standa_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.standa_1.cs)]"
  syntax:
    content: public abstract string StandardName { get; }
    return:
      type: System.String
      description: "The standard time zone name."
  overload: System.TimeZone.StandardName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "An attempt was made to set this property to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  id: ToLocalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Returns the local time that corresponds to a specified date and time value."
  remarks: "The following table shows the relationship between the `time` parameter and the <xref:System.DateTime> value returned by this method.      |`time` parameter|Behavior|Return value|   |----------------------|--------------|------------------|   |A Coordinated Universal Time (UTC) time (<xref:System.DateTimeKind?displayProperty=fullName>).|Converts the time from UTC to the local time.|A <xref:System.DateTime> object whose value is the local time that corresponds to `time`.|   |A local time (<xref:System.DateTimeKind?displayProperty=fullName>).|No conversion necessary.|The same <xref:System.DateTime> value represented by the `time` parameter.|   |An unspecified time (<xref:System.DateTimeKind?displayProperty=fullName>).|Assumes that the time is UTC and converts it from UTC to the local time.|A <xref:System.DateTime> object whose value is the local time that corresponds to `time`.|       If the local time zone observes daylight saving time, ToLocalTime applies the current adjustment rule to `time` when performing the conversion.      > [!NOTE] >  The ToLocalTime method recognizes only the current daylight saving time adjustment rule for the local time zone. As a result, it is guaranteed to accurately return the local time corresponding to a particular UTC time only during the period in which the latest adjustment rule is in effect. It may return inaccurate results if `time` is a historic date and time value that was subject to a previous adjustment rule.       The ToLocalTime method corresponds to the <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName> method with its `destinationTimeZone` parameter set to <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>. Whenever possible, use the <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName> method."
  syntax:
    content: public virtual DateTime ToLocalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "A Coordinated Universal Time (UTC) time."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> object whose value is the local time that corresponds to <code>time</code>."
  overload: System.TimeZone.ToLocalTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  id: ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Returns the Coordinated Universal Time (UTC) that corresponds to a specified time."
  remarks: "If the local time zone observes daylight saving time, ToUniversalTime applies the current adjustment rule to the `time` parameter when performing the conversion.      > [!NOTE] >  The ToUniversalTime method recognizes only the current daylight saving time adjustment rule for the local time zone. As a result, it is guaranteed to accurately return the Coordinated Universal Time (UTC) corresponding to a particular local time only during the period in which the latest adjustment rule is in effect. It may return inaccurate results if `time` is a historic date and time value that was subject to a previous adjustment rule.       If the `time` parameter is an ambiguous time, the method assumes that it is a standard time. (An ambiguous time is one that can map either to a standard time or to a daylight saving time in the local time zone.) If `time` is an invalid time, the method simply subtracts the local time from the local time zone&quot;s UTC offset to return UTC. (An invalid time is one that does not exist because of the application of daylight saving time adjustment rules.)       Because `time` is interpreted in relation to the current time zone on the current system, the date and time returned by this method can differ if an application is run on different computers or on the same computer with different time zones. For cases in which a date and time value must represent a single, unambiguous point in time, use a <xref:System.DateTimeOffset> value to represent the local time.       The ToUniversalTime method corresponds to the <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName> method overload with a <xref:System.DateTime> parameter whose <xref:System.DateTime.Kind%2A> property does not equal <xref:System.DateTimeKind?displayProperty=fullName>. Whenever possible, use the <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName> method overload."
  syntax:
    content: public virtual DateTime ToUniversalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "A date and time."
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime> object whose value is the Coordinated Universal Time (UTC) that corresponds to <code>time</code>."
  overload: System.TimeZone.ToUniversalTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.TimeZone.#ctor
  parent: System.TimeZone
  isExternal: false
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
- uid: System.TimeZone.CurrentTimeZone
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
- uid: System.TimeZone
  parent: System
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
- uid: System.TimeZone.DaylightName
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
- uid: System.Globalization.DaylightTime
  parent: System.Globalization
  isExternal: false
  name: DaylightTime
  nameWithType: DaylightTime
  fullName: System.Globalization.DaylightTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
- uid: System.TimeZone.StandardName
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
- uid: System.TimeZone.#ctor*
  parent: System.TimeZone
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone.TimeZone
- uid: System.TimeZone.CurrentTimeZone*
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
- uid: System.TimeZone.DaylightName*
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
- uid: System.TimeZone.GetDaylightChanges*
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges
  nameWithType: TimeZone.GetDaylightChanges
- uid: System.TimeZone.GetUtcOffset*
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset
  nameWithType: TimeZone.GetUtcOffset
- uid: System.TimeZone.IsDaylightSavingTime*
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime
  nameWithType: TimeZone.IsDaylightSavingTime
- uid: System.TimeZone.StandardName*
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime
  nameWithType: TimeZone.ToLocalTime
- uid: System.TimeZone.ToUniversalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime
  nameWithType: TimeZone.ToUniversalTime
