### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.FormView
  id: FormView
  children:
  - System.Web.UI.WebControls.FormView.#ctor
  - System.Web.UI.WebControls.FormView.AllowPaging
  - System.Web.UI.WebControls.FormView.BackImageUrl
  - System.Web.UI.WebControls.FormView.BottomPagerRow
  - System.Web.UI.WebControls.FormView.Caption
  - System.Web.UI.WebControls.FormView.CaptionAlign
  - System.Web.UI.WebControls.FormView.CellPadding
  - System.Web.UI.WebControls.FormView.CellSpacing
  - System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)
  - System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)
  - System.Web.UI.WebControls.FormView.CreateControlStyle
  - System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments
  - System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)
  - System.Web.UI.WebControls.FormView.CreateTable
  - System.Web.UI.WebControls.FormView.CurrentMode
  - System.Web.UI.WebControls.FormView.DataBind
  - System.Web.UI.WebControls.FormView.DataItem
  - System.Web.UI.WebControls.FormView.DataItemCount
  - System.Web.UI.WebControls.FormView.DataItemIndex
  - System.Web.UI.WebControls.FormView.DataKey
  - System.Web.UI.WebControls.FormView.DataKeyNames
  - System.Web.UI.WebControls.FormView.DefaultMode
  - System.Web.UI.WebControls.FormView.DeleteItem
  - System.Web.UI.WebControls.FormView.DeleteMethod
  - System.Web.UI.WebControls.FormView.EditItemTemplate
  - System.Web.UI.WebControls.FormView.EditRowStyle
  - System.Web.UI.WebControls.FormView.EmptyDataRowStyle
  - System.Web.UI.WebControls.FormView.EmptyDataTemplate
  - System.Web.UI.WebControls.FormView.EmptyDataText
  - System.Web.UI.WebControls.FormView.EnableModelValidation
  - System.Web.UI.WebControls.FormView.EnsureDataBound
  - System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)
  - System.Web.UI.WebControls.FormView.FooterRow
  - System.Web.UI.WebControls.FormView.FooterStyle
  - System.Web.UI.WebControls.FormView.FooterTemplate
  - System.Web.UI.WebControls.FormView.FooterText
  - System.Web.UI.WebControls.FormView.GridLines
  - System.Web.UI.WebControls.FormView.HeaderRow
  - System.Web.UI.WebControls.FormView.HeaderStyle
  - System.Web.UI.WebControls.FormView.HeaderTemplate
  - System.Web.UI.WebControls.FormView.HeaderText
  - System.Web.UI.WebControls.FormView.HorizontalAlign
  - System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)
  - System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)
  - System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)
  - System.Web.UI.WebControls.FormView.InsertItemTemplate
  - System.Web.UI.WebControls.FormView.InsertMethod
  - System.Web.UI.WebControls.FormView.InsertRowStyle
  - System.Web.UI.WebControls.FormView.IsBindableType(System.Type)
  - System.Web.UI.WebControls.FormView.ItemCommand
  - System.Web.UI.WebControls.FormView.ItemCreated
  - System.Web.UI.WebControls.FormView.ItemDeleted
  - System.Web.UI.WebControls.FormView.ItemDeleting
  - System.Web.UI.WebControls.FormView.ItemInserted
  - System.Web.UI.WebControls.FormView.ItemInserting
  - System.Web.UI.WebControls.FormView.ItemTemplate
  - System.Web.UI.WebControls.FormView.ItemUpdated
  - System.Web.UI.WebControls.FormView.ItemUpdating
  - System.Web.UI.WebControls.FormView.LoadControlState(System.Object)
  - System.Web.UI.WebControls.FormView.LoadViewState(System.Object)
  - System.Web.UI.WebControls.FormView.ModeChanged
  - System.Web.UI.WebControls.FormView.ModeChanging
  - System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName
  - System.Web.UI.WebControls.FormView.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)
  - System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)
  - System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)
  - System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)
  - System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)
  - System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)
  - System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)
  - System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)
  - System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)
  - System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)
  - System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)
  - System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)
  - System.Web.UI.WebControls.FormView.PageCount
  - System.Web.UI.WebControls.FormView.PageIndex
  - System.Web.UI.WebControls.FormView.PageIndexChanged
  - System.Web.UI.WebControls.FormView.PageIndexChanging
  - System.Web.UI.WebControls.FormView.PagerSettings
  - System.Web.UI.WebControls.FormView.PagerStyle
  - System.Web.UI.WebControls.FormView.PagerTemplate
  - System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)
  - System.Web.UI.WebControls.FormView.PrepareControlHierarchy
  - System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)
  - System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.FormView.RenderOuterTable
  - System.Web.UI.WebControls.FormView.Row
  - System.Web.UI.WebControls.FormView.RowStyle
  - System.Web.UI.WebControls.FormView.SaveControlState
  - System.Web.UI.WebControls.FormView.SaveViewState
  - System.Web.UI.WebControls.FormView.SelectedValue
  - System.Web.UI.WebControls.FormView.SetPageIndex(System.Int32)
  - System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex
  - System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex
  - System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode
  - System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)
  - System.Web.UI.WebControls.FormView.TagKey
  - System.Web.UI.WebControls.FormView.TopPagerRow
  - System.Web.UI.WebControls.FormView.TrackViewState
  - System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)
  - System.Web.UI.WebControls.FormView.UpdateMethod
  langs:
  - csharp
  name: FormView
  nameWithType: FormView
  fullName: System.Web.UI.WebControls.FormView
  type: Class
  summary: "Displays the values of a single record from a data source using user-defined templates. The FormView control allows you to edit, delete, and insert records."
  remarks: "In this topic:      -   [Introduction](#introduction)      -   [Templates](#templates)      -   [Binding to Data](#binding_to_data)      -   [Data Operations](#data_operations)      -   [Customizing the User Interface](#customizing_the_user_interface)      -   [Events](#events)      -   [Accessibility](#accessibility)      -   [Applying CSS Styles](#applying_styles)      -   [Declarative Syntax](#declarative_syntax)      <a name=&quot;introduction&quot;></a>    ## Introduction    The FormView control is used to display a single record from a data source. It is similar to the <xref:System.Web.UI.WebControls.DetailsView> control, except it displays user-defined templates instead of row fields. Creating your own templates gives you greater flexibility in controlling how the data is displayed. The FormView control supports the following features:      -   Binding to data source controls, such as <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource>.      -   Built-in inserting capabilities.      -   Built-in updating and deleting capabilities.      -   Built-in paging capabilities.      -   Programmatic access to the FormView object model to dynamically set properties, handle events, and so on.      -   Customizable appearance through user-defined templates, themes, and styles.      <a name=&quot;templates&quot;></a>    ## Templates    For the FormView control to display content, you need to create templates for the different parts of the control. Most templates are optional; however, you must create a template for the mode in which the control is configured. For example, a FormView control that supports inserting records must have an insert item template defined. The following table lists the different templates that you can create.      |Template type|Description|   |-------------------|-----------------|   |<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|Defines the content for the data row when the FormView control is in edit mode. This template usually contains input controls and command buttons with which the user can edit an existing record.|   |<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>|Defines the content for the empty data row displayed when the FormView control is bound to a data source that does not contain any records. This template usually contains content to alert the user that the data source does not contain any records.|   |<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>|Defines the content for the footer row. This template usually contains any additional content you would like to display in the footer row. **Note:**  As an alternative, you can simply specify text to display in the footer row by setting the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> property.|   |<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>|Defines the content for the header row. This template usually contains any additional content you would like to display in the header row. **Note:**  As an alternative, you can simply specify text to display in the header row by setting the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> property.|   |<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|Defines the content for the data row when the FormView control is in read-only mode. This template usually contains content to display the values of an existing record.|   |<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|Defines the content for the data row when the FormView control is in insert mode. This template usually contains input controls and command buttons with which the user can add a new record.|   |<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>|Defines the content for the pager row displayed when the paging feature is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`). This template usually contains controls with which the user can navigate to another record. **Note:**  The FormView control has a built-in pager row user interface (UI). You need to create a pager template only if you want to create your own custom pager row.|       To display the value of a field in an item template, use a data binding expression. For more information on data binding expressions, see [Data-Binding Expression Syntax](http://msdn.microsoft.com/en-us/676beb1d-ddfa-4153-bba8-3c86dcb7ceca).       Input controls in the edit item template and insert item template can be bound to the fields of a data source by using a two-way binding expression. This allows the FormView control to automatically extract the values of the input control for an update or insert operation. Two-way binding expressions also allow input controls in an edit item template to automatically display the original field values. For more information on two-way binding expressions, see [Binding to Databases](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742).      <a name=&quot;binding_to_data&quot;></a>    ## Binding to Data    The FormView control can be bound to a data source control (such as <xref:System.Web.UI.WebControls.SqlDataSource>, <xref:System.Web.UI.WebControls.ObjectDataSource>, or <xref:System.Web.UI.WebControls.AccessDataSource>) or to any data source collection that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface, such as <xref:System.Data.DataView?displayProperty=fullName>, <xref:System.Collections.ArrayList?displayProperty=fullName>, <xref:System.Collections.Generic.List%601?displayProperty=fullName>, or other collection types. Use one of the following methods to bind the FormView control to the appropriate data source type:      -   To bind to a data source control, set the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property of the FormView control to the <xref:System.Web.UI.Control.ID%2A> value of the data source control. The FormView control automatically binds to the specified data source control and can take advantage of the data source control&quot;s capabilities to perform inserting, updating, deleting, and paging functionality. This is the preferred method to bind to data.      -   To bind to a data source that implements the <xref:System.Collections.IEnumerable?displayProperty=fullName> interface, programmatically set the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property of the FormView control to the data source and then call the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method. When using this method, the FormView control does not provide built-in inserting, updating, deleting, and paging functionality. You need to provide this functionality by using the appropriate event.       For more information on data binding, see [ASP.NET Data Access Content Map](http://msdn.microsoft.com/en-us/f9219396-a0fa-481f-894d-e3d9c67d64f2).      > [!NOTE] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. Whenever possible, it is strongly recommended that values are HTML-encoded before they are displayed in this control. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see [Introduction to the Validation Controls](http://msdn.microsoft.com/en-us/3c0e7514-cff2-4bed-936d-ee3f7b740190).      <a name=&quot;data_operations&quot;></a>    ## Data Operations    The FormView control provides many built-in capabilities that allow the user to update, delete, insert, and page through items in the control. When the FormView control is bound to a data source control, the FormView control can take advantage of the data source control&quot;s capabilities and provide automatic updating, deleting, inserting, and paging functionality.      > [!NOTE] >  The FormView control can provide support for update, delete, insert, and paging operations with other types of data sources; however, you must provide an appropriate event handler with the implementation for these operations.       Because the FormView control uses templates, it does not provide a way to automatically generate command buttons to perform updating, deleting, or inserting operations. You must manually include these command buttons in the appropriate template. The FormView control recognizes certain buttons that have their `CommandName` properties set to specific values. The following table lists the command buttons that the FormView control recognizes.      |Button|CommandName value|Description|   |------------|-----------------------|-----------------|   |Cancel|&quot;Cancel&quot;|Used in updating or inserting operations to cancel the operation and to discard the values entered by the user. The FormView control then returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property.|   |Delete|&quot;Delete&quot;|Used in deleting operations to delete the displayed record from the data source. Raises the <xref:System.Web.UI.WebControls.FormView.ItemDeleting> and <xref:System.Web.UI.WebControls.FormView.ItemDeleted> events.|   |Edit|&quot;Edit&quot;|Used in updating operations to put the FormView control in edit mode. The content specified in the <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> property is displayed for the data row.|   |Insert|&quot;Insert&quot;|Used in inserting operations to attempt to insert a new record in the data source using the values provided by the user. Raises the <xref:System.Web.UI.WebControls.FormView.ItemInserting> and <xref:System.Web.UI.WebControls.FormView.ItemInserted> events.|   |New|&quot;New&quot;|Used in inserting operations to put the FormView control in insert mode. The content specified in the <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> property is displayed for the data row.|   |Page|&quot;Page&quot;|Used in paging operations to represent a button in the pager row that performs paging. To specify the paging operation, set the `CommandArgument` property of the button to &quot;Next&quot;, &quot;Prev&quot;, &quot;First&quot;, &quot;Last&quot;, or the index of the page to which to navigate. Raises the <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> and <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> events. **Note:**  This type of button is typically used only in the pager template.|   |Update|&quot;Update&quot;|Used in updating operations to attempt to update the displayed record in the data source with the values provided by the user. Raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> and <xref:System.Web.UI.WebControls.FormView.ItemUpdated> events.|       Unlike the Delete button (which deletes the displayed record immediately), when the Edit or New button is clicked, the FormView control goes into edit or insert mode, respectively. In edit mode, the content contained in the <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> property is displayed for the current data item. Typically, the edit item template is defined such that the Edit button is replaced with an Update and a Cancel button. Input controls that are appropriate for the field&quot;s data type (such as a <xref:System.Web.UI.WebControls.TextBox> or a <xref:System.Web.UI.WebControls.CheckBox> control) are also usually displayed with a field&quot;s value for the user to modify. Clicking the Update button updates the record in the data source, while clicking the Cancel button abandons any changes.       Likewise, the content contained in the <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> property is displayed for the data item when the control is in insert mode. The insert item template is typically defined such that the New button is replaced with an Insert and a Cancel button, and empty input controls are displayed for the user to enter the values for the new record. Clicking the Insert button inserts the record in the data source, while clicking the Cancel button abandons any changes.       The FormView control provides a paging feature, which allows the user to navigate to other records in the data source. When enabled, a pager row is displayed in the FormView control that contains the page navigation controls. To enable paging, set the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property to `true`. You can customize the pager row by setting the properties of objects contained in the <xref:System.Web.UI.WebControls.FormView.PagerStyle%2A> and the <xref:System.Web.UI.WebControls.FormView.PagerSettings%2A> property. Instead of using the built-in pager row UI, you can create your own UI by using the <xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A> property.      <a name=&quot;customizing_the_user_interface&quot;></a>    ## Customizing the User Interface    You can customize the appearance of the FormView control by setting the style properties for the different parts of the control. The following table lists the different style properties.      |Style property|Description|   |--------------------|-----------------|   |<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>|The style settings for the data row when the FormView control is in edit mode.|   |<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>|The style settings for the empty data row displayed in the FormView control when the data source does not contain any records.|   |<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>|The style settings for the footer row of the FormView control.|   |<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>|The style settings for the header row of the FormView control.|   |<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>|The style settings for the data row when the FormView control is in insert mode.|   |<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>|The style settings for the pager row displayed in the FormView control when the paging feature is enabled.|   |<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>|The style settings for the data row when the FormView control is in read-only mode.|      <a name=&quot;events&quot;></a>    ## Events    The FormView control provides several events that you can program against. This allows you to run a custom routine whenever an event occurs. The following table lists the events supported by the FormView control.      |Event|Description|   |-----------|-----------------|   |<xref:System.Web.UI.WebControls.FormView.ItemCommand>|Occurs when a button within a FormView control is clicked. This event is often used to perform a task when a button is clicked in the control.|   |<xref:System.Web.UI.WebControls.FormView.ItemCreated>|Occurs after all <xref:System.Web.UI.WebControls.FormViewRow> objects are created in the FormView control. This event is often used to modify the values of a record before it is displayed.|   |<xref:System.Web.UI.WebControls.FormView.ItemDeleted>|Occurs when a Delete button (a button with its `CommandName` property set to &quot;Delete&quot;) is clicked, but after the FormView control deletes the record from the data source. This event is often used to check the results of the delete operation.|   |<xref:System.Web.UI.WebControls.FormView.ItemDeleting>|Occurs when a Delete button is clicked, but before the FormView control deletes the record from the data source. This event is often used to cancel the delete operation.|   |<xref:System.Web.UI.WebControls.FormView.ItemInserted>|Occurs when an Insert button (a button with its `CommandName` property set to &quot;Insert&quot;) is clicked, but after the FormView control inserts the record. This event is often used to check the results of the insert operation.|   |<xref:System.Web.UI.WebControls.FormView.ItemInserting>|Occurs when an Insert button is clicked, but before the FormView control inserts the record. This event is often used to cancel the insert operation.|   |<xref:System.Web.UI.WebControls.FormView.ItemUpdated>|Occurs when an Update button (a button with its `CommandName` property set to &quot;Update&quot;) is clicked, but after the FormView control updates the row. This event is often used to check the results of the update operation.|   |<xref:System.Web.UI.WebControls.FormView.ItemUpdating>|Occurs when an Update button is clicked, but before the FormView control updates the record. This event is often used to cancel the update operation.|   |<xref:System.Web.UI.WebControls.FormView.ModeChanged>|Occurs after the FormView control changes modes (to edit, insert, or read-only mode). This event is often used to perform a task when the FormView control changes modes.|   |<xref:System.Web.UI.WebControls.FormView.ModeChanging>|Occurs before the FormView control changes modes (to edit, insert, or read-only mode). This event is often used to cancel a mode change.|   |<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|Occurs when one of the pager buttons is clicked, but after the FormView control handles the paging operation. This event is commonly used when you need to perform a task after the user navigates to a different record in the control.|   |<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|Occurs when one of the pager buttons is clicked, but before the FormView control handles the paging operation. This event is often used to cancel the paging operation.|      <a name=&quot;accessibility&quot;></a>    ## Accessibility    For information about how to configure this control so that it generates markup that conforms to accessibility standards, see [Accessibility in Visual Studio and ASP.NET](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Controls and Accessibility](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;applying_styles&quot;></a>    ## Applying CSS Styles    The FormView control lets you specify CSS style rules in markup. If you use templates to customize the appearance of the FormView control, you can specify CSS styles in the markup in the templates. In that case, no extra outer table is required. You can prevent the table from being rendered by setting the <xref:System.Web.UI.WebControls.FormView.RenderOuterTable%2A> property to `false`.      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:FormView       AccessKey=&quot;string&quot;       AllowPaging=&quot;True|False&quot;       BackColor=&quot;color name|#dddddd&quot;       BackImageUrl=&quot;uri&quot;       BorderColor=&quot;color name|#dddddd&quot;       BorderStyle=&quot;NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|           Inset|Outset&quot;       BorderWidth=&quot;size&quot;       Caption=&quot;string&quot;       CaptionAlign=&quot;NotSet|Top|Bottom|Left|Right&quot;       CellPadding=&quot;integer&quot;       CellSpacing=&quot;integer&quot;       CssClass=&quot;string&quot;       DataKeyNames=&quot;string&quot;       DataMember=&quot;string&quot;       DataSource=&quot;string&quot;       DataSourceID=&quot;string&quot;       DefaultMode=&quot;ReadOnly|Edit|Insert&quot;       EmptyDataText=&quot;string&quot;       Enabled=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       Font-Bold=&quot;True|False&quot;       Font-Italic=&quot;True|False&quot;       Font-Names=&quot;string&quot;       Font-Overline=&quot;True|False&quot;       Font-Size=&quot;string|Smaller|Larger|XX-Small|X-Small|Small|Medium|           Large|X-Large|XX-Large&quot;       Font-Strikeout=&quot;True|False&quot;       Font-Underline=&quot;True|False&quot;       FooterText=&quot;string&quot;       ForeColor=&quot;color name|#dddddd&quot;       GridLines=&quot;None|Horizontal|Vertical|Both&quot;       HeaderText=&quot;string&quot;       Height=&quot;size&quot;       HorizontalAlign=&quot;NotSet|Left|Center|Right|Justify&quot;       ID=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDataBound=&quot;DataBound event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnInit=&quot;Init event handler&quot;       OnItemCommand=&quot;ItemCommand event handler&quot;       OnItemCreated=&quot;ItemCreated event handler&quot;       OnItemDeleted=&quot;ItemDeleted event handler&quot;       OnItemDeleting=&quot;ItemDeleting event handler&quot;       OnItemInserted=&quot;ItemInserted event handler&quot;       OnItemInserting=&quot;ItemInserting event handler&quot;       OnItemUpdated=&quot;ItemUpdated event handler&quot;       OnItemUpdating=&quot;ItemUpdating event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnModeChanged=&quot;ModeChanged event handler&quot;       OnModeChanging=&quot;ModeChanging event handler&quot;       OnPageIndexChanged=&quot;PageIndexChanged event handler&quot;       OnPageIndexChanging=&quot;PageIndexChanging event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnUnload=&quot;Unload event handler&quot;       PageIndex=&quot;integer&quot;       PagerSettings-FirstPageImageUrl=&quot;uri&quot;       PagerSettings-FirstPageText=&quot;string&quot;       PagerSettings-LastPageImageUrl=&quot;uri&quot;       PagerSettings-LastPageText=&quot;string&quot;       PagerSettings-Mode=&quot;NextPrevious|Numeric|NextPreviousFirstLast|           NumericFirstLast&quot;       PagerSettings-NextPageImageUrl=&quot;uri&quot;       PagerSettings-NextPageText=&quot;string&quot;       PagerSettings-PageButtonCount=&quot;integer&quot;       PagerSettings-Position=&quot;Bottom|Top|TopAndBottom&quot;       PagerSettings-PreviousPageImageUrl=&quot;uri&quot;       PagerSettings-PreviousPageText=&quot;string&quot;       PagerSettings-Visible=&quot;True|False&quot;       RenderTable=&quot;True|False&quot;       runat=&quot;server&quot;       SkinID=&quot;string&quot;       Style=&quot;string&quot;       TabIndex=&quot;integer&quot;       ToolTip=&quot;string&quot;       Visible=&quot;True|False&quot;       Width=&quot;size&quot;   >           <EditItemTemplate>               <!-- child controls -->           </EditItemTemplate>           <EditRowStyle />           <EmptyDataRowStyle />           <EmptyDataTemplate>               <!-- child controls -->           </EmptyDataTemplate>           <FooterStyle />           <FooterTemplate>               <!-- child controls -->           </FooterTemplate>           <HeaderStyle />           <HeaderTemplate>               <!-- child controls -->           </HeaderTemplate>           <InsertItemTemplate>               <!-- child controls -->           </InsertItemTemplate>           <InsertRowStyle />           <ItemTemplate>               <!-- child controls -->           </ItemTemplate>           <PagerSettings               FirstPageImageUrl=&quot;uri&quot;               FirstPageText=&quot;string&quot;               LastPageImageUrl=&quot;uri&quot;               LastPageText=&quot;string&quot;               Mode=&quot;NextPrevious|Numeric|NextPreviousFirstLast|                   NumericFirstLast&quot;               NextPageImageUrl=&quot;uri&quot;               NextPageText=&quot;string&quot;               OnPropertyChanged=&quot;PropertyChanged event handler&quot;               PageButtonCount=&quot;integer&quot;               Position=&quot;Bottom|Top|TopAndBottom&quot;               PreviousPageImageUrl=&quot;uri&quot;               PreviousPageText=&quot;string&quot;               Visible=&quot;True|False&quot;           />           <PagerStyle />           <PagerTemplate>               <!-- child controls -->           </PagerTemplate>           <RowStyle />   </asp:FormView>   ```"
  example:
  - "The following example demonstrates how to use a FormView control to display the values from a <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-vb[FormViewSimple#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_276_1.aspx)]\n [!code-cs[FormViewSimple#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_276_1.aspx)]  \n  \n The following example demonstrates how to use a FormView control to edit existing records.  \n  \n> [!IMPORTANT]\n>  The control in this example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[FormView#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_276_2.aspx)]\n [!code-cs[FormView#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_276_2.aspx)]  \n  \n The following example demonstrates how to use a FormView control to insert new records.  \n  \n> [!IMPORTANT]\n>  The control in this example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-vb[FormViewInsertItemTemplate#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_276_3.aspx)]\n [!code-cs[FormViewInsertItemTemplate#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_276_3.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("PageIndexChanging")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Web.UI.ControlValueProperty("SelectedValue")]

      [System.Web.UI.DataKeyProperty("DataKey")]

      [System.Web.UI.SupportsEventValidation]

      public class FormView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.IDataItemContainer, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IDataBoundItemControl, System.Web.UI.WebControls.IPostBackContainer
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  - System.Web.UI.WebControls.BaseDataBoundControl
  - System.Web.UI.WebControls.DataBoundControl
  - System.Web.UI.WebControls.CompositeDataBoundControl
  implements:
  - System.Web.UI.IDataItemContainer
  - System.Web.UI.IPostBackEventHandler
  - System.Web.UI.WebControls.IDataBoundItemControl
  - System.Web.UI.WebControls.IPostBackContainer
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  - System.Web.UI.WebControls.BaseDataBoundControl.ConfirmInitState
  - System.Web.UI.WebControls.BaseDataBoundControl.DataBound
  - System.Web.UI.WebControls.BaseDataBoundControl.DataSource
  - System.Web.UI.WebControls.BaseDataBoundControl.Initialized
  - System.Web.UI.WebControls.BaseDataBoundControl.IsBoundUsingDataSourceID
  - System.Web.UI.WebControls.BaseDataBoundControl.IsDataBindingAutomatic
  - System.Web.UI.WebControls.BaseDataBoundControl.OnDataBound(System.EventArgs)
  - System.Web.UI.WebControls.BaseDataBoundControl.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.BaseDataBoundControl.RequiresDataBinding
  - System.Web.UI.WebControls.BaseDataBoundControl.SupportsDisabledAttribute
  - System.Web.UI.WebControls.CompositeDataBoundControl.Controls
  - System.Web.UI.WebControls.CompositeDataBoundControl.CreateChildControls
  - System.Web.UI.WebControls.CompositeDataBoundControl.IsUsingModelBinders
  - System.Web.UI.WebControls.DataBoundControl.CallingDataMethods
  - System.Web.UI.WebControls.DataBoundControl.CreatingModelDataSource
  - System.Web.UI.WebControls.DataBoundControl.DataMember
  - System.Web.UI.WebControls.DataBoundControl.DataSourceID
  - System.Web.UI.WebControls.DataBoundControl.DataSourceObject
  - System.Web.UI.WebControls.DataBoundControl.GetData
  - System.Web.UI.WebControls.DataBoundControl.GetDataSource
  - System.Web.UI.WebControls.DataBoundControl.ItemType
  - System.Web.UI.WebControls.DataBoundControl.MarkAsDataBound
  - System.Web.UI.WebControls.DataBoundControl.OnCreatingModelDataSource(System.Web.UI.WebControls.CreatingModelDataSourceEventArgs)
  - System.Web.UI.WebControls.DataBoundControl.OnDataPropertyChanged
  - System.Web.UI.WebControls.DataBoundControl.OnDataSourceViewChanged(System.Object,System.EventArgs)
  - System.Web.UI.WebControls.DataBoundControl.OnLoad(System.EventArgs)
  - System.Web.UI.WebControls.DataBoundControl.OnPagePreLoad(System.Object,System.EventArgs)
  - System.Web.UI.WebControls.DataBoundControl.PerformSelect
  - System.Web.UI.WebControls.DataBoundControl.SelectArguments
  - System.Web.UI.WebControls.DataBoundControl.SelectMethod
  - System.Web.UI.WebControls.DataBoundControl.ValidateDataSource(System.Object)
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.Width
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: FormView()
  nameWithType: FormView.FormView()
  fullName: System.Web.UI.WebControls.FormView.FormView()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> class."
  remarks: "Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormView> class. To dynamically add a <xref:System.Web.UI.WebControls.FormView> control to a page, create a new <xref:System.Web.UI.WebControls.FormView> object, set its properties, and then add it to the <xref:System.Web.UI.Control.Controls%2A?displayProperty=fullName> collection of a container control, such as <xref:System.Web.UI.WebControls.PlaceHolder>."
  example:
  - "The following example demonstrates how to dynamically add a <xref:System.Web.UI.WebControls.FormView> control to a page.  \n  \n [!code-vb[FormViewCtor#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_130_1.aspx)]\n [!code-cs[FormViewCtor#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_130_1.aspx)]"
  syntax:
    content: public FormView ();
    parameters: []
  overload: System.Web.UI.WebControls.FormView.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.AllowPaging
  id: AllowPaging
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: AllowPaging
  nameWithType: FormView.AllowPaging
  fullName: System.Web.UI.WebControls.FormView.AllowPaging
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the paging feature is enabled."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control has built-in paging capabilities, which allow a user to navigate to a different record in the data source. The paging feature can be used with any data source object that supports the <xref:System.Collections.ICollection?displayProperty=fullName> interface or a data source that supports paging capability.       To enable the paging feature, set the AllowPaging property to `true`. You can determine the total number of items in the underlying data source by using the <xref:System.Web.UI.WebControls.FormView.PageCount%2A> property. To determine the index of the currently displayed item, use the <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> property.       When paging is enabled, an additional row called the pager row is automatically displayed in the <xref:System.Web.UI.WebControls.FormView> control. The pager row contains the page navigation controls and can be displayed at the top, bottom, or both the top and bottom of the control. The pager row has four built-in pager display modes. The following table describes the four modes.      |Mode|Description|   |----------|-----------------|   |`PagerButton.NextPrevious`|A set of pagination controls consisting of previous and next buttons.|   |`PagerButton.NextPreviousFirstLast`|A set of pagination controls consisting of previous, next, first, and last buttons.|   |`PagerButton.Numeric`|A set of pagination controls consisting of numbered link buttons to access pages directly. This is the default mode.|   |`PagerButton.NumericFirstLast`|A set of pagination controls consisting of numbered and first and last link buttons.|      > [!NOTE] >  The <xref:System.Web.UI.WebControls.FormView> control automatically hides the pager row when the data source contains fewer than two records.       You can control the settings of the pager row (such as the pager display mode, the number of page links to display at a time, and the pager control&quot;s text label) by using the <xref:System.Web.UI.WebControls.FormView.PagerSettings%2A> property. To control the appearance of the pager row (including its background color and font color), use the <xref:System.Web.UI.WebControls.FormView.PagerStyle%2A> property. The <xref:System.Web.UI.WebControls.FormView> control also allows you to define a custom template for the pager row. For more information on creating a custom pager row template, see <xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>.       The <xref:System.Web.UI.WebControls.FormView> control provides several events that you can use to perform a custom action when paging occurs. The following table lists the available events.      |Event|Description|   |-----------|-----------------|   |<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|Occurs when one of the pager buttons is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control handles the paging operation. This event is commonly used when you need to perform a task after the user navigates to a different record in the control.|   |<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|Occurs when one of the pager buttons is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control handles the paging operation. This event is often used to cancel the paging operation.|      > [!NOTE] >  These events are not raised when you change the <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> property programmatically."
  example:
  - "The following example demonstrates how to use the AllowPaging property to enable the paging feature in a <xref:System.Web.UI.WebControls.FormView> control.  \n  \n [!code-cs[FormViewAllowPaging#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_367_1.aspx)]\n [!code-vb[FormViewAllowPaging#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_367_1.aspx)]"
  syntax:
    content: public virtual bool AllowPaging { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to enable the paging feature; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.AllowPaging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.BackImageUrl
  id: BackImageUrl
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: BackImageUrl
  nameWithType: FormView.BackImageUrl
  fullName: System.Web.UI.WebControls.FormView.BackImageUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the URL to an image to display in the background of a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the BackImageUrl property to specify the URL to an image to display in the background of a <xref:System.Web.UI.WebControls.FormView> control.      > [!NOTE] >  If the specified image is smaller than the <xref:System.Web.UI.WebControls.FormView> control, the image is tiled to fill in the background. If the image is larger than the control, the image is cropped."
  example:
  - "The following example demonstrates how to use the BackImageUrl property to display a custom image in the background of a <xref:System.Web.UI.WebControls.FormView> control.  \n  \n [!code-cs[FormViewBackImageUrl#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_554_1.aspx)]\n [!code-vb[FormViewBackImageUrl#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_554_1.aspx)]"
  syntax:
    content: public virtual string BackImageUrl { get; set; }
    return:
      type: System.String
      description: "The URL to an image to display in the background of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.BackImageUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.BottomPagerRow
  id: BottomPagerRow
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: BottomPagerRow
  nameWithType: FormView.BottomPagerRow
  fullName: System.Web.UI.WebControls.FormView.BottomPagerRow
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object that represents the pager row displayed at the bottom of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "When paging is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`), an additional row called the pager row is automatically displayed in the <xref:System.Web.UI.WebControls.FormView> control. The pager row contains controls that allow the user to navigate to other records, and can be displayed at the top, the bottom, or both the top and bottom of the control. Use the BottomPagerRow property to programmatically access the <xref:System.Web.UI.WebControls.FormViewRow> object that represents the bottom pager row in the <xref:System.Web.UI.WebControls.FormView> control.      > [!NOTE] >  The BottomPagerRow property is available only after the <xref:System.Web.UI.WebControls.FormView> control creates the bottom pager row in the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.       This property is commonly used when you need to programmatically manipulate the bottom pager row, for example when adding custom content. Any modification to the BottomPagerRow property must be performed after the <xref:System.Web.UI.WebControls.FormViewRow> object that represents the bottom pager row has been created; otherwise, the <xref:System.Web.UI.WebControls.FormView> control overwrites any changes."
  example:
  - "The following example demonstrates how to use the BottomPagerRow property to access the pager row displayed at the bottom of a <xref:System.Web.UI.WebControls.FormView> control. The pager row is then updated with additional content.  \n  \n [!code-cs[FormViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_102_1.aspx)]\n [!code-vb[FormViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_102_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.FormViewRow BottomPagerRow { get; }
    return:
      type: System.Web.UI.WebControls.FormViewRow
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object that represents the bottom pager row of a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.BottomPagerRow*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.Caption
  id: Caption
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: Caption
  nameWithType: FormView.Caption
  fullName: System.Web.UI.WebControls.FormView.Caption
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the text to render in an HTML caption element in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control. This property is provided to make the control more accessible to users of assistive technology devices."
  remarks: "Use the Caption property to specify the text to render in an HTML caption element in a <xref:System.Web.UI.WebControls.FormView> control. The text that you specify provides assistive technology devices with a description of the table that can be used to make the control more accessible.       Additional accessibility support for the <xref:System.Web.UI.WebControls.FormView> control is provided by the <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> property. Use the <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> property to specify the alignment of the HTML caption element in a <xref:System.Web.UI.WebControls.FormView> control.       The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the Caption property to specify the text for the HTML caption element rendered in a <xref:System.Web.UI.WebControls.FormView> control.  \n  \n [!code-vb[FormViewCaption#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1078_1.aspx)]\n [!code-cs[FormViewCaption#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1078_1.aspx)]"
  syntax:
    content: public virtual string Caption { get; set; }
    return:
      type: System.String
      description: "A string that represents the text to render in an HTML caption element in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control. The default value is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.FormView.Caption*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CaptionAlign
  id: CaptionAlign
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CaptionAlign
  nameWithType: FormView.CaptionAlign
  fullName: System.Web.UI.WebControls.FormView.CaptionAlign
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the horizontal or vertical position of the HTML caption element in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control. This property is provided to make the control more accessible to users of assistive technology devices."
  remarks: "Use the CaptionAlign property to specify the horizontal or vertical position of the HTML caption element in a <xref:System.Web.UI.WebControls.FormView> control. This property is provided to make the control more accessible to users of assistive technology devices.       This property is set using one of the <xref:System.Web.UI.WebControls.TableCaptionAlign> enumeration values. The following table lists the possible values.      |Value|Description|   |-----------|-----------------|   |`TableCaptionAlign.Bottom`|The caption element is aligned with the bottom of the table.|   |`TableCaptionAlign.Left`|The caption element is aligned with the left side of the table.|   |`TableCaptionAlign.NotSet`|The caption element&quot;s alignment is not set.|   |`TableCaptionAlign.Right`|The caption element is aligned with the right side of the table.|   |`TableCaptionAlign.Top`|The caption element is aligned with the top of the table.|      > [!NOTE] >  When this property is set to `TableCaptionAlign.NotSet`, the default value of the browser is used.       Additional accessibility support for the <xref:System.Web.UI.WebControls.FormView> control is provided by the <xref:System.Web.UI.WebControls.FormView.Caption%2A> property. Use the <xref:System.Web.UI.WebControls.FormView.Caption%2A> property to specify the text to render in an HTML caption element in a <xref:System.Web.UI.WebControls.FormView> control."
  example:
  - "The following example demonstrates how to use the CaptionAlign property to specify that the HTML caption element in a <xref:System.Web.UI.WebControls.FormView> control should be rendered on the left side of the control.  \n  \n [!code-vb[FormViewCaption#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_449_1.aspx)]\n [!code-cs[FormViewCaption#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_449_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableCaptionAlign CaptionAlign { get; set; }
    return:
      type: System.Web.UI.WebControls.TableCaptionAlign
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.TableCaptionAlign&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_TableCaptionAlign.NotSet&quot; name=&quot;TableCaptionAlign.NotSet&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.CaptionAlign*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified value is not one of the <xref href=&quot;System.Web.UI.WebControls.TableCaptionAlign&quot;></xref> enumeration values."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CellPadding
  id: CellPadding
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CellPadding
  nameWithType: FormView.CellPadding
  fullName: System.Web.UI.WebControls.FormView.CellPadding
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the amount of space between the contents of a cell and the cell&quot;s border."
  remarks: "Use the CellPadding property to control the spacing between the contents of a cell and the cell&quot;s border. The padding amount specified is added to all four sides of the cell.       All cells in the same column of a <xref:System.Web.UI.WebControls.FormView> control have the same width. The padding amount is applied to the widest cell and all other cells in the column are adjusted to that cell width. Similarly, all cells in the same row have the same height. The padding amount is applied to the tallest cell in the row and all other cells in the row are adjusted to that cell height. Individual cell sizes cannot be specified.       To adjust the spacing between cells, use the <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A> property.      > [!NOTE] >  When this property is not set, the default value of the browser is used."
  example:
  - "The following example demonstrates how to use the CellPadding property to specify the amount of spacing between the contents of a cell and the cell's border.  \n  \n [!code-cs[FormViewCellPadding#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_693_1.aspx)]\n [!code-vb[FormViewCellPadding#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_693_1.aspx)]"
  syntax:
    content: public virtual int CellPadding { get; set; }
    return:
      type: System.Int32
      description: "The amount of space, in pixels, between the contents of a cell and the cell&quot;s border. The default value is -1, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.CellPadding*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CellSpacing
  id: CellSpacing
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CellSpacing
  nameWithType: FormView.CellSpacing
  fullName: System.Web.UI.WebControls.FormView.CellSpacing
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the amount of space between cells."
  remarks: "Use the CellSpacing property to control the spacing between adjacent cells in the <xref:System.Web.UI.WebControls.FormView> control. This spacing is applied both vertically and horizontally. The cell spacing is uniform for the entire control. Individual cell spacing between rows or columns cannot be specified.      > [!NOTE] >  If you set this property to a value greater than 0, and then set the <xref:System.Web.UI.WebControls.FormView.GridLines%2A> property to a value that displays the cell borders, a gap is displayed between the borders of adjacent cells. In this situation, the CellSpacing property controls the size of the gap.       To adjust the spacing between the contents of a cell and the cell&quot;s border, use the <xref:System.Web.UI.WebControls.FormView.CellPadding%2A> property."
  example:
  - "The following example demonstrates how to use the CellSpacing property to specify the amount of spacing between adjacent cells.  \n  \n [!code-cs[FormViewCellPadding#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_130_1.aspx)]\n [!code-vb[FormViewCellPadding#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_130_1.aspx)]"
  syntax:
    content: public virtual int CellSpacing { get; set; }
    return:
      type: System.Int32
      description: "The amount of space, in pixels, between cells. The default value is 0."
  overload: System.Web.UI.WebControls.FormView.CellSpacing*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)
  id: ChangeMode(System.Web.UI.WebControls.FormViewMode)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ChangeMode(FormViewMode)
  nameWithType: FormView.ChangeMode(FormViewMode)
  fullName: System.Web.UI.WebControls.FormView.ChangeMode(FormViewMode)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Switches the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control to the specified data-entry mode."
  remarks: "Use the ChangeMode method to programmatically switch the <xref:System.Web.UI.WebControls.FormView> control between edit, insert, and read-only modes. This method also updates the <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> property with the specified mode. The following table lists the different mode values.      |Mode|Description|   |----------|-----------------|   |`FormViewMode.Edit`|The <xref:System.Web.UI.WebControls.FormView> control is in edit mode, which allows the user to update the values of a record.|   |`FormViewMode.Insert`|The <xref:System.Web.UI.WebControls.FormView> control is in insert mode, which allows the user to add a new record to the data source.|   |`FormView.ReadOnly`|The <xref:System.Web.UI.WebControls.FormView> control is in read-only mode, which is the normal display mode.|      > [!NOTE] >  The <xref:System.Web.UI.WebControls.FormView.ModeChanged> and <xref:System.Web.UI.WebControls.FormView.ModeChanging> events are not raised when this method is called."
  example:
  - "The following example demonstrates how to use the ChangeMode method to return the <xref:System.Web.UI.WebControls.FormView> control to read-only mode whenever the user navigates to another record.  \n  \n [!code-cs[FormViewChangeMode#1](~/add/codesnippet/csharp/662370c4-5409-4672-aaf8-_1.aspx)]\n [!code-vb[FormViewChangeMode#1](~/add/codesnippet/visualbasic/662370c4-5409-4672-aaf8-_1.aspx)]"
  syntax:
    content: public void ChangeMode (System.Web.UI.WebControls.FormViewMode newMode);
    parameters:
    - id: newMode
      type: System.Web.UI.WebControls.FormViewMode
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.FormViewMode&quot;></xref> enumeration values."
  overload: System.Web.UI.WebControls.FormView.ChangeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)
  id: CreateChildControls(System.Collections.IEnumerable,System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CreateChildControls(IEnumerable,Boolean)
  nameWithType: FormView.CreateChildControls(IEnumerable,Boolean)
  fullName: System.Web.UI.WebControls.FormView.CreateChildControls(IEnumerable,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates the control hierarchy used to render the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control with the specified data source."
  remarks: "The CreateChildControls method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to create the control hierarchy for the <xref:System.Web.UI.WebControls.FormView> control. When the `dataBinding` parameter is `true`, data binding is performed before the control hierarchy is created."
  syntax:
    content: protected override int CreateChildControls (System.Collections.IEnumerable dataSource, bool dataBinding);
    parameters:
    - id: dataSource
      type: System.Collections.IEnumerable
      description: "An <xref:System.Collections.IEnumerable> that represents the data source used to create the control hierarchy."
    - id: dataBinding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to indicate that the control hierarchy is created directly from the data source; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate the control hierarchy is created from the view state."
    return:
      type: System.Int32
      description: "The number of items created from the data source."
  overload: System.Web.UI.WebControls.FormView.CreateChildControls*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> of the <xref href=&quot;System.Web.UI.IDataSource&quot;></xref> to which the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is bound is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CreateControlStyle
  id: CreateControlStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CreateControlStyle()
  nameWithType: FormView.CreateControlStyle()
  fullName: System.Web.UI.WebControls.FormView.CreateControlStyle()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates a default table style object for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The CreateControlStyle method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to create its default table style object. In addition to setting the default style of a <xref:System.Web.UI.WebControls.TableStyle> object, this method also sets the <xref:System.Web.UI.WebControls.FormView.CellPadding%2A> property to 0."
  syntax:
    content: protected override System.Web.UI.WebControls.Style CreateControlStyle ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.Style
      description: "A <xref href=&quot;System.Web.UI.WebControls.Style&quot;></xref> that contains the default table style for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.CreateControlStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments
  id: CreateDataSourceSelectArguments
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CreateDataSourceSelectArguments()
  nameWithType: FormView.CreateDataSourceSelectArguments()
  fullName: System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates the <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;></xref> object that contains the arguments that are passed to the data source for processing."
  remarks: "The CreateDataSourceSelectArguments method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to create the <xref:System.Web.UI.DataSourceSelectArguments> object that contains the arguments passed to the data source. In this implementation, the <xref:System.Web.UI.DataSourceSelectArguments> object contains the arguments for paging operations."
  syntax:
    content: protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();
    parameters: []
    return:
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;></xref> that contains the arguments that are passed to the data source."
  overload: System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)
  id: CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CreateRow(Int32,DataControlRowType,DataControlRowState)
  nameWithType: FormView.CreateRow(Int32,DataControlRowType,DataControlRowState)
  fullName: System.Web.UI.WebControls.FormView.CreateRow(Int32,DataControlRowType,DataControlRowState)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates a <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object using the specified item index, row type, and row state."
  remarks: "The CreateRow method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to create a <xref:System.Web.UI.WebControls.FormViewRow> object used to represent a row within the control."
  syntax:
    content: protected virtual System.Web.UI.WebControls.FormViewRow CreateRow (int itemIndex, System.Web.UI.WebControls.DataControlRowType rowType, System.Web.UI.WebControls.DataControlRowState rowState);
    parameters:
    - id: itemIndex
      type: System.Int32
      description: "The zero-based index of the data item to display."
    - id: rowType
      type: System.Web.UI.WebControls.DataControlRowType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.DataControlRowType&quot;></xref> enumeration values."
    - id: rowState
      type: System.Web.UI.WebControls.DataControlRowState
      description: "A bitwise combination of the <xref href=&quot;System.Web.UI.WebControls.DataControlRowState&quot;></xref> enumeration values."
    return:
      type: System.Web.UI.WebControls.FormViewRow
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> with the specified item index, row type, and row state."
  overload: System.Web.UI.WebControls.FormView.CreateRow*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CreateTable
  id: CreateTable
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CreateTable()
  nameWithType: FormView.CreateTable()
  fullName: System.Web.UI.WebControls.FormView.CreateTable()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates the containing table for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The CreateTable method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to create a table that acts as the container for the control."
  syntax:
    content: protected virtual System.Web.UI.WebControls.Table CreateTable ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.Table
      description: "A <xref href=&quot;System.Web.UI.WebControls.Table&quot;></xref> that represents the containing table for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.CreateTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.CurrentMode
  id: CurrentMode
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: CurrentMode
  nameWithType: FormView.CurrentMode
  fullName: System.Web.UI.WebControls.FormView.CurrentMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the current data-entry mode of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the CurrentMode property to determine whether the <xref:System.Web.UI.WebControls.FormView> control is in edit, insert, or read-only mode. The following table lists the different mode values.      |Mode|Description|   |----------|-----------------|   |`FormViewMode.Edit`|The <xref:System.Web.UI.WebControls.FormView> control is in edit mode, which allows the user to update the values of a record.|   |`FormViewMode.Insert`|The <xref:System.Web.UI.WebControls.FormView> control is in insert mode, which allows the user to add a new record to the data source.|   |`FormView.ReadOnly`|The <xref:System.Web.UI.WebControls.FormView> control is in read-only mode, which is the normal display mode.|       This value is normally set automatically by the <xref:System.Web.UI.WebControls.FormView> control when the New, Update, Insert, Delete, or Cancel command button is clicked. When the <xref:System.Web.UI.WebControls.FormView> control changes modes in response to an action, the events in the following table are raised. This allows you to create a custom event handler that performs the appropriate routine when the event occurs.      |Event|Description|   |-----------|-----------------|   |<xref:System.Web.UI.WebControls.FormView.ModeChanged>|Occurs when the <xref:System.Web.UI.WebControls.FormView> control changes modes, but after the mode changes. This event is commonly used to perform a task whenever the <xref:System.Web.UI.WebControls.FormView> control changes modes.|   |<xref:System.Web.UI.WebControls.FormView.ModeChanging>|Occurs when the <xref:System.Web.UI.WebControls.FormView> control changes modes, but before the mode changes. This event is commonly used to cancel the mode change.|       **Note** These events are not raised when you change the mode programmatically by using the <xref:System.Web.UI.WebControls.FormView.ChangeMode%2A> method."
  example:
  - "The following example demonstrates how to use the CurrentMode property to determine whether the <xref:System.Web.UI.WebControls.FormView> control is in edit, insert, or read-only mode. If the user attempts to navigate to another record while the <xref:System.Web.UI.WebControls.FormView> control is in edit more, the paging operation is canceled.  \n  \n [!code-cs[FormViewCurrentMode#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_817_1.aspx)]\n [!code-vb[FormViewCurrentMode#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_817_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.FormViewMode CurrentMode { get; }
    return:
      type: System.Web.UI.WebControls.FormViewMode
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.FormViewMode&quot;></xref> values."
  overload: System.Web.UI.WebControls.FormView.CurrentMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DataBind
  id: DataBind
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DataBind()
  nameWithType: FormView.DataBind()
  fullName: System.Web.UI.WebControls.FormView.DataBind()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Binds the data source to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the DataBind method to bind data from a data source to the <xref:System.Web.UI.WebControls.FormView> control. This method resolves all data-binding expressions in the active template of the control."
  syntax:
    content: public override sealed void DataBind ();
    parameters: []
  overload: System.Web.UI.WebControls.FormView.DataBind*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DataItem
  id: DataItem
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DataItem
  nameWithType: FormView.DataItem
  fullName: System.Web.UI.WebControls.FormView.DataItem
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the data item bound to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the DataItem property to access the data item bound to the <xref:System.Web.UI.WebControls.FormView> control. The data item is often used to access the field values of the current record directly. The type of the <xref:System.Object> returned by this property varies depending on the data source. For example, when a <xref:System.Web.UI.WebControls.SqlDataSource> control is bound to the <xref:System.Web.UI.WebControls.FormView> control, a <xref:System.Data.DataRowView> object is returned.      > [!NOTE] >  This property is available only after data binding has occurred. Before data binding occurs, this property returns `null`. This property is also not applicable when the <xref:System.Web.UI.WebControls.FormView> control is in insert mode and returns `null`."
  example:
  - "The following example demonstrates how to use the DataItem property to determine the value of a field in the data item.  \n  \n [!code-vb[FormViewCtor#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_191_1.aspx)]\n [!code-cs[FormViewCtor#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_191_1.aspx)]"
  syntax:
    content: public virtual object DataItem { get; }
    return:
      type: System.Object
      description: "An <xref:System.Object> that represents the data item bound to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.DataItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DataItemCount
  id: DataItemCount
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DataItemCount
  nameWithType: FormView.DataItemCount
  fullName: System.Web.UI.WebControls.FormView.DataItemCount
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the number of data items in the data source."
  remarks: "Use the DataItemCount property to determine the number of data items contained in the data source. This property contains the same value as the <xref:System.Web.UI.WebControls.FormView.PageCount%2A> property."
  syntax:
    content: public int DataItemCount { get; }
    return:
      type: System.Int32
      description: "The number of data items in the data source."
  overload: System.Web.UI.WebControls.FormView.DataItemCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DataItemIndex
  id: DataItemIndex
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DataItemIndex
  nameWithType: FormView.DataItemIndex
  fullName: System.Web.UI.WebControls.FormView.DataItemIndex
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the index of the data item bound to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control from the data source."
  remarks: "Use the DataItemIndex property to determine the index of the data item bound to the <xref:System.Web.UI.WebControls.FormView> control from the data source. This property contains the same value as the <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> property.      > [!NOTE] >  This property is not applicable when the <xref:System.Web.UI.WebControls.FormView> control is in insert mode. When the control is in insert mode, the DataItemIndex property returns -1."
  syntax:
    content: public virtual int DataItemIndex { get; }
    return:
      type: System.Int32
      description: "The index of the data item bound to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control from the data source."
  overload: System.Web.UI.WebControls.FormView.DataItemIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DataKey
  id: DataKey
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DataKey
  nameWithType: FormView.DataKey
  fullName: System.Web.UI.WebControls.FormView.DataKey
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a <xref href=&quot;System.Web.UI.WebControls.DataKey&quot;></xref> object that represents the primary key of the displayed record."
  remarks: "When the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property is set, the <xref:System.Web.UI.WebControls.FormView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object that contains the key/value pairs of the field or fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property for the current record. Use the DataKey property to get this <xref:System.Web.UI.WebControls.DataKey> object. This property is commonly used to obtain the keys and their corresponding values for the fields specified in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property.      > [!NOTE] >  As a shortcut, you can also use the <xref:System.Web.UI.WebControls.FormView.SelectedValue%2A> property to determine the value of the first key field listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property."
  example:
  - "The following example demonstrates how to use the DataKey property to determine the value of the key field.  \n  \n [!code-cs[FormViewDataKey#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1171_1.aspx)]\n [!code-vb[FormViewDataKey#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1171_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.DataKey DataKey { get; }
    return:
      type: System.Web.UI.WebControls.DataKey
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataKey&quot;></xref> object that represents the primary key of the displayed record."
  overload: System.Web.UI.WebControls.FormView.DataKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DataKeyNames
  id: DataKeyNames
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DataKeyNames
  nameWithType: FormView.DataKeyNames
  fullName: System.Web.UI.WebControls.FormView.DataKeyNames
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets an array that contains the names of the key fields for the data source."
  remarks: "Use the DataKeyNames property to specify a comma-separated list of field names that represent the primary key of the data source. When the DataKeyNames property is set, the <xref:System.Web.UI.WebControls.FormView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object that contains the key/value pairs of the field or fields listed in the DataKeyNames property for the current record. The <xref:System.Web.UI.WebControls.DataKey> object is then stored in the <xref:System.Web.UI.WebControls.FormView.DataKey%2A> property.      > [!NOTE] >  You must set the DataKeyNames property for the built-in updating, deleting, and inserting features of the <xref:System.Web.UI.WebControls.FormView> control to work."
  example:
  - "The following example demonstrates how to use the DataKeyNames property to specify the key field for the data source bound to the <xref:System.Web.UI.WebControls.FormView> control.  \n  \n [!code-vb[FormViewEditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_97_1.aspx)]\n [!code-cs[FormViewEditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_97_1.aspx)]"
  syntax:
    content: public virtual string[] DataKeyNames { get; set; }
    return:
      type: System.String[]
      description: "An array that contains the names of the key fields for the data source."
  overload: System.Web.UI.WebControls.FormView.DataKeyNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DefaultMode
  id: DefaultMode
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DefaultMode
  nameWithType: FormView.DefaultMode
  fullName: System.Web.UI.WebControls.FormView.DefaultMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the data-entry mode to which the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control returns after an update, insert, or cancel operation."
  remarks: "Use the DefaultMode property to specify whether the <xref:System.Web.UI.WebControls.FormView> control returns to edit, insert, or read-only mode after an update, insert, or cancel operation is performed. By default, the <xref:System.Web.UI.WebControls.FormView> control returns to read-only mode; however, you can keep the <xref:System.Web.UI.WebControls.FormView> control in edit or insert mode by setting this property to the appropriate value. The following table lists the different mode values.      |Mode|Description|   |----------|-----------------|   |`FormViewMode.Edit`|The <xref:System.Web.UI.WebControls.FormView> control is in edit mode, which allows the user to update the values of a record.|   |`FormViewMode.Insert`|The <xref:System.Web.UI.WebControls.FormView> control is in insert mode, which allows the user to add a new record to the data source.|   |`FormViewMode.ReadOnly`|The <xref:System.Web.UI.WebControls.FormView> control is in read-only mode, which is the normal display mode.|       This property is commonly used when the <xref:System.Web.UI.WebControls.FormView> control has a single purpose, such as only to insert or edit records."
  example:
  - "The following example demonstrates how to use the DefaultMode property to keep a <xref:System.Web.UI.WebControls.FormView> control in edit mode after an update operation.  \n  \n [!code-vb[FormViewDefaultMode#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_229_1.aspx)]\n [!code-cs[FormViewDefaultMode#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_229_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.FormViewMode DefaultMode { get; set; }
    return:
      type: System.Web.UI.WebControls.FormViewMode
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.FormViewMode&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_FormViewMode.ReadOnly&quot; name=&quot;FormViewMode.ReadOnly&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.DefaultMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified value is not one of the <xref href=&quot;System.Web.UI.WebControls.FormViewMode&quot;></xref> enumeration values."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DeleteItem
  id: DeleteItem
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DeleteItem()
  nameWithType: FormView.DeleteItem()
  fullName: System.Web.UI.WebControls.FormView.DeleteItem()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Deletes the current record in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control from the data source."
  remarks: "Use the DeleteItem method to programmatically delete the current record in the <xref:System.Web.UI.WebControls.FormView> control from the data source. This method is commonly used when you need to delete the current record from outside of the <xref:System.Web.UI.WebControls.FormView> control, such as from a different control on the page. Calling this method also raises the <xref:System.Web.UI.WebControls.FormView.ItemDeleted> and <xref:System.Web.UI.WebControls.FormView.ItemDeleting> events."
  example:
  - "The following example demonstrates how to use the DeleteItem method to programmatically delete the current record in a <xref:System.Web.UI.WebControls.FormView> control from the data source.  \n  \n [!code-vb[FormViewDeleteItem#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_190_1.aspx)]\n [!code-cs[FormViewDeleteItem#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_190_1.aspx)]"
  syntax:
    content: public virtual void DeleteItem ();
    parameters: []
  overload: System.Web.UI.WebControls.FormView.DeleteItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.DeleteMethod
  id: DeleteMethod
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: DeleteMethod
  nameWithType: FormView.DeleteMethod
  fullName: System.Web.UI.WebControls.FormView.DeleteMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the name of the method on the page that is called when the control performs a delete operation."
  remarks: "For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117)."
  syntax:
    content: public virtual string DeleteMethod { get; set; }
    return:
      type: System.String
      description: "The name of the method on the page that is called when the control performs a delete operation."
  overload: System.Web.UI.WebControls.FormView.DeleteMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EditItemTemplate
  id: EditItemTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EditItemTemplate
  nameWithType: FormView.EditItemTemplate
  fullName: System.Web.UI.WebControls.FormView.EditItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the custom content for an item in edit mode."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control renders a different template for the data row based on the current mode of the control (specified by the <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> property). The following table shows which template is used for each mode.      |Mode|Template rendered|   |----------|-----------------------|   |Edit|EditItemTemplate|   |Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|   |Read-only|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|       Use the EditItemTemplate property to define your own user interface (UI) for the data row when the <xref:System.Web.UI.WebControls.FormView> control is in edit mode. The edit item template usually contains the input controls for the user to update the values of an existing record, as well as command buttons to update the record and to cancel the update operation.       To specify the custom template, first place `<EditItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<EditItemTemplate>` tags. By using a two-way binding expression, you can associate a field with an input control. This allows the <xref:System.Web.UI.WebControls.FormView> control to automatically display the original field value in the associated input control in edit mode. When a record is updated, the <xref:System.Web.UI.WebControls.FormView> control automatically extracts the updated field value from the associated input control. For more information on two-way binding expressions, see [Binding to Databases](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742). To create command buttons that perform the built-in cancel and update operations, add a command button control to the template with its `CommandName` property set to one of the values listed in the following table.      |Command button type|CommandName value|   |-------------------------|-----------------------|   |Cancel|&quot;Cancel&quot;|   |Update|&quot;Update&quot;|       You can control the appearance of the item template by using the <xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A> property."
  example:
  - "The following example demonstrates how to define a custom template for a data row in edit mode.  \n  \n [!code-vb[FormViewEditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_886_1.aspx)]\n [!code-cs[FormViewEditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_886_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the data row when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is in edit mode. The default value is null, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.EditItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EditRowStyle
  id: EditRowStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EditRowStyle
  nameWithType: FormView.EditRowStyle
  fullName: System.Web.UI.WebControls.FormView.EditRowStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the data row when a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is in edit mode."
  remarks: "Use the EditRowStyle property to control the appearance of the data row when a <xref:System.Web.UI.WebControls.FormView> control is in edit mode. When the <xref:System.Web.UI.WebControls.FormView> control is in edit mode, the data row displays the user-defined content specified by the <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> property. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `EditRowStyle-ForeColor`).      -   Nest an `<EditRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `EditRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the EditRowStyle property to specify a custom style for a data row when a <xref:System.Web.UI.WebControls.FormView> control is in edit mode.  \n  \n [!code-vb[FormViewEditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1022_1.aspx)]\n [!code-cs[FormViewEditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1022_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle EditRowStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that represents the style of the data row when a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is in edit mode."
  overload: System.Web.UI.WebControls.FormView.EditRowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EmptyDataRowStyle
  id: EmptyDataRowStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EmptyDataRowStyle
  nameWithType: FormView.EmptyDataRowStyle
  fullName: System.Web.UI.WebControls.FormView.EmptyDataRowStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the empty data row displayed when the data source bound to a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control does not contain any records."
  remarks: "Use the EmptyDataRowStyle property to control the appearance of the empty data row in a <xref:System.Web.UI.WebControls.FormView> control. The empty data row is displayed when the data source that is bound to the control does not contain any records. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `EmptyDataRowStyle-ForeColor`).      -   Nest an `<EmptyDataRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `EmptyDataRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the EmptyDataRowStyle property to specify a custom style for the empty data row displayed when a <xref:System.Web.UI.WebControls.FormView> control is bound to a data source that does not contain any records.  \n  \n [!code-cs[FormViewEmptyDataText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1010_1.aspx)]\n [!code-vb[FormViewEmptyDataText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1010_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that allows you to set the appearance of the empty data row."
  overload: System.Web.UI.WebControls.FormView.EmptyDataRowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EmptyDataTemplate
  id: EmptyDataTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EmptyDataTemplate
  nameWithType: FormView.EmptyDataTemplate
  fullName: System.Web.UI.WebControls.FormView.EmptyDataTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the user-defined content for the empty data row rendered when a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is bound to a data source that does not contain any records."
  remarks: "The empty data row is displayed in a <xref:System.Web.UI.WebControls.FormView> control when the data source that is bound to the control does not contain any records. You can define your own custom user interface (UI) for the empty data row by using the EmptyDataTemplate property. To specify a custom template for the empty data row, first place `<EmptyDataTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<EmptyDataTemplate>` tags. To control the style of the empty data row, use the <xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A> property. Alternatively, you can use the built-in UI for the empty data row by setting the <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> property instead of this property.      > [!NOTE] >  If both the <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> and EmptyDataTemplate properties are set, the EmptyDataTemplate property takes precedence."
  example:
  - "The following example demonstrates how to define a custom template for the empty data row displayed when a <xref:System.Web.UI.WebControls.FormView> control is bound to a data source that does not contain any records.  \n  \n [!code-cs[FormViewEmptyDataTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1213_1.aspx)]\n [!code-vb[FormViewEmptyDataTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1213_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate EmptyDataTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the empty data row. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.EmptyDataTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EmptyDataText
  id: EmptyDataText
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EmptyDataText
  nameWithType: FormView.EmptyDataText
  fullName: System.Web.UI.WebControls.FormView.EmptyDataText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the text to display in the empty data row rendered when a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is bound to a data source that does not contain any records."
  remarks: "The empty data row is displayed in a <xref:System.Web.UI.WebControls.FormView> control when the data source that is bound to the control does not contain any records. Use the EmptyDataText property to specify the text to display in the empty data row. To control the style of the empty data row, use the <xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A> property. Alternatively, you can define your own custom user interface (UI) for the empty data row by setting the <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> property instead of this property.      > [!NOTE] >  If both the EmptyDataText and <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> properties are set, the <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> property takes precedence.       The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the EmptyDataText property to specify the text to display in the empty data row.  \n  \n [!code-cs[FormViewEmptyDataText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1210_1.aspx)]\n [!code-vb[FormViewEmptyDataText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1210_1.aspx)]"
  syntax:
    content: public virtual string EmptyDataText { get; set; }
    return:
      type: System.String
      description: "The text to display in the empty data row. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.EmptyDataText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EnableModelValidation
  id: EnableModelValidation
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EnableModelValidation
  nameWithType: FormView.EnableModelValidation
  fullName: System.Web.UI.WebControls.FormView.EnableModelValidation
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value that indicates whether a validator control will handle exceptions that occur during insert or update operations."
  syntax:
    content: public virtual bool EnableModelValidation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a validator control will handle exceptions that occur during insert or update operations; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.EnableModelValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.EnsureDataBound
  id: EnsureDataBound
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: EnsureDataBound()
  nameWithType: FormView.EnsureDataBound()
  fullName: System.Web.UI.WebControls.FormView.EnsureDataBound()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Makes certain that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is bound to data when appropriate."
  remarks: "The EnsureDataBound method is a helper method used by the <xref:System.Web.UI.WebControls.FormView> class to make certain that the <xref:System.Web.UI.WebControls.FormView> control is bound to data when appropriate. The EnsureDataBound method is usually called during the <xref:System.Web.UI.WebControls.BaseDataBoundControl.OnPreRender%2A> method to bind the control to the data source when the data-bound control is not yet bound, but requires data binding. This version of the method has been overridden to prevent data binding from occurring when the <xref:System.Web.UI.WebControls.FormView> control is in insert mode."
  syntax:
    content: protected override void EnsureDataBound ();
    parameters: []
  overload: System.Web.UI.WebControls.FormView.EnsureDataBound*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)
  id: ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ExtractRowValues(IOrderedDictionary,Boolean)
  nameWithType: FormView.ExtractRowValues(IOrderedDictionary,Boolean)
  fullName: System.Web.UI.WebControls.FormView.ExtractRowValues(IOrderedDictionary,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Retrieves the values of each field declared within the data row and stores them in the specified <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> object."
  remarks: "The ExtractRowValues method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to retrieve the values of each field declared within the data row. Because the data row displays a different template based on the current mode, this method retrieves only the field values declared in the template that corresponds to the current mode. The following table shows the available modes and the corresponding templates.      |Mode|Template|   |----------|--------------|   |Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|   |Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|   |Read-only|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|       You can specify whether the extracted values include the key field or fields by using the `includeKeys` parameter."
  syntax:
    content: protected virtual void ExtractRowValues (System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys);
    parameters:
    - id: fieldValues
      type: System.Collections.Specialized.IOrderedDictionary
      description: "An <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> used to store the field values of the current data item."
    - id: includeKeys
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include key fields; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.ExtractRowValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.FooterRow
  id: FooterRow
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: FooterRow
  nameWithType: FormView.FooterRow
  fullName: System.Web.UI.WebControls.FormView.FooterRow
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object that represents the footer row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The footer row is displayed at the bottom of the <xref:System.Web.UI.WebControls.FormView> control when the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> or <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property is set. Use the FooterRow property to programmatically access the <xref:System.Web.UI.WebControls.FormViewRow> object that represents the footer row.      > [!NOTE] >  The FooterRow property is available only after the <xref:System.Web.UI.WebControls.FormView> control creates the footer row in the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.       This property is commonly used when you need to programmatically manipulate the footer row, for example when adding custom content. Any modification to the FooterRow property must be performed after the <xref:System.Web.UI.WebControls.FormView> control has been rendered; otherwise, the <xref:System.Web.UI.WebControls.FormView> control overwrites any changes.       To control the style of the footer row, use the <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> property."
  example:
  - "The following example demonstrates how to use the FooterRow property to programmatically modify the properties of the footer row during the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.  \n  \n [!code-vb[FormViewFooterTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_364_1.aspx)]\n [!code-cs[FormViewFooterTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_364_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.FormViewRow FooterRow { get; }
    return:
      type: System.Web.UI.WebControls.FormViewRow
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> that represents the footer row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.FooterRow*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.FooterStyle
  id: FooterStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: FooterStyle
  nameWithType: FormView.FooterStyle
  fullName: System.Web.UI.WebControls.FormView.FooterStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the footer row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The footer row is displayed at the bottom of the <xref:System.Web.UI.WebControls.FormView> control when the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> or <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property is set. Use the FooterStyle property to control the appearance of the footer row in a <xref:System.Web.UI.WebControls.FormView> control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `FooterStyle-ForeColor`).      -   Nest a `<FooterStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `FooterStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the FooterStyle property to specify a custom style for the footer row.  \n  \n [!code-cs[FormViewFooterText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1350_1.aspx)]\n [!code-vb[FormViewFooterText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1350_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that represents the style of the footer row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.FooterStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.FooterTemplate
  id: FooterTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: FooterTemplate
  nameWithType: FormView.FooterTemplate
  fullName: System.Web.UI.WebControls.FormView.FooterTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the user-defined content for the footer row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The footer row is displayed at the bottom of the <xref:System.Web.UI.WebControls.FormView> control when the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> or FooterTemplate property is set. You can define your own custom user interface (UI) for the footer row by using the FooterTemplate property. To specify a custom template for the footer row, first place `<FooterTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<FooterTemplate>` tags. To control the style of the footer row, use the <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> property. Alternatively, you can simply display text in the footer row by setting the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> property instead of this property.      > [!NOTE] >  If both the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> and FooterTemplate properties are set, the FooterTemplate property takes precedence."
  example:
  - "The following example demonstrates how to use the FooterTemplate property to define a custom template to render for the footer row.  \n  \n [!code-vb[FormViewFooterTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1258_1.aspx)]\n [!code-cs[FormViewFooterTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1258_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the footer row. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.FooterTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.FooterText
  id: FooterText
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: FooterText
  nameWithType: FormView.FooterText
  fullName: System.Web.UI.WebControls.FormView.FooterText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the text to display in the footer row of a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The footer row is displayed at the bottom of the <xref:System.Web.UI.WebControls.FormView> control when the FooterText or <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property is set. Use the FooterText property to specify the text to display in the footer row. To control the style of the footer row, use the <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> property. Alternatively, you can define your own custom user interface (UI) for the footer row by setting the <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property instead of this property.      > [!NOTE] >  If both the FooterText and <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> properties are set, the <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property takes precedence.       The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the FooterText property to specify the text to display in the footer row.  \n  \n [!code-cs[FormViewFooterText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_904_1.aspx)]\n [!code-vb[FormViewFooterText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_904_1.aspx)]"
  syntax:
    content: public virtual string FooterText { get; set; }
    return:
      type: System.String
      description: "The text to display in the footer row. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.FooterText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.GridLines
  id: GridLines
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: GridLines
  nameWithType: FormView.GridLines
  fullName: System.Web.UI.WebControls.FormView.GridLines
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the gridline style for a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the GridLines property to specify the gridline style for a <xref:System.Web.UI.WebControls.FormView> control. The following table lists the available styles.      |Style|Description|   |-----------|-----------------|   |`GridLines.None`|No gridlines are displayed.|   |`GridLines.Horizontal`|Displays the horizontal gridlines only.|   |`GridLines.Vertical`|Displays the vertical gridlines only.|   |`GridLines.Both`|Displays both the horizontal and vertical gridlines.|"
  example:
  - "The following example demonstrates how to use the GridLines property to display both the vertical and horizontal gridlines.  \n  \n [!code-cs[FormViewCellPadding#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_236_1.aspx)]\n [!code-vb[FormViewCellPadding#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_236_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.GridLines GridLines { get; set; }
    return:
      type: System.Web.UI.WebControls.GridLines
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.GridLines&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_GridLines.None&quot; name=&quot;GridLines.None&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.GridLines*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.HeaderRow
  id: HeaderRow
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: HeaderRow
  nameWithType: FormView.HeaderRow
  fullName: System.Web.UI.WebControls.FormView.HeaderRow
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object that represents the header row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The header row is displayed at the top of the <xref:System.Web.UI.WebControls.FormView> control when the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> or <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property is set. Use the HeaderRow property to programmatically access the <xref:System.Web.UI.WebControls.FormViewRow> object that represents the header row.      > [!NOTE] >  The HeaderRow property is available only after the <xref:System.Web.UI.WebControls.FormView> control creates the header row in the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.       This property is commonly used when you need to programmatically manipulate the header row, for example, when adding custom content. Any modification to the HeaderRow property must be performed after the <xref:System.Web.UI.WebControls.FormView> control has been rendered; otherwise, the <xref:System.Web.UI.WebControls.FormView> control overwrites any changes."
  example:
  - "The following example demonstrates how to use the HeaderRow property to programmatically modify the properties of the header row during the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.  \n  \n [!code-vb[FormViewHeaderTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_518_1.aspx)]\n [!code-cs[FormViewHeaderTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_518_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.FormViewRow HeaderRow { get; }
    return:
      type: System.Web.UI.WebControls.FormViewRow
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> that represents the header row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.HeaderRow*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.HeaderStyle
  id: HeaderStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: HeaderStyle
  nameWithType: FormView.HeaderStyle
  fullName: System.Web.UI.WebControls.FormView.HeaderStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the header row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The header row is displayed at the top of the <xref:System.Web.UI.WebControls.FormView> control when the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> or <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property is set. Use the HeaderStyle property to control the appearance of the header row in a <xref:System.Web.UI.WebControls.FormView> control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `HeaderStyle-ForeColor`).      -   Nest a `<HeaderStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `HeaderStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the HeaderStyle property to specify a custom style for the header row.  \n  \n [!code-vb[FormViewHeaderText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1059_1.aspx)]\n [!code-cs[FormViewHeaderText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1059_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that represents the style of the header row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.HeaderStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.HeaderTemplate
  id: HeaderTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: HeaderTemplate
  nameWithType: FormView.HeaderTemplate
  fullName: System.Web.UI.WebControls.FormView.HeaderTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the user-defined content for the header row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The header row is displayed at the top of the <xref:System.Web.UI.WebControls.FormView> control when the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> or HeaderTemplate property is set. You can define your own custom user interface (UI) for the header row by using the HeaderTemplate property. To specify a custom template for the header row, first place `<HeaderTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<HeaderTemplate>` tags. To control the style of the header row, use the <xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A> property. Alternatively, you can simply display text in the header row by setting the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> property instead of this property.      > [!NOTE] >  If both the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> and HeaderTemplate properties are set, the HeaderTemplate property takes precedence."
  example:
  - "The following example demonstrates how to use the HeaderTemplate property to define a custom template to render for the header row.  \n  \n [!code-vb[FormViewHeaderTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1060_1.aspx)]\n [!code-cs[FormViewHeaderTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1060_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the header row. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.HeaderTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.HeaderText
  id: HeaderText
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: HeaderText
  nameWithType: FormView.HeaderText
  fullName: System.Web.UI.WebControls.FormView.HeaderText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the text to display in the header row of a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The header row is displayed at the top of the <xref:System.Web.UI.WebControls.FormView> control when the HeaderText or <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property is set. Use the HeaderText property to specify the text to display in the header row. To control the style of the header row, use the <xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A> property. Alternatively, you can define your own custom user interface (UI) for the header row by setting the <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property instead of this property.      > [!NOTE] >  If both the HeaderText and <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> properties are set, the <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property takes precedence.       The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the HeaderText property to specify the text to display in the header row.  \n  \n [!code-vb[FormViewHeaderText#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1225_1.aspx)]\n [!code-cs[FormViewHeaderText#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1225_1.aspx)]"
  syntax:
    content: public virtual string HeaderText { get; set; }
    return:
      type: System.String
      description: "The text to display in the header row. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.HeaderText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.HorizontalAlign
  id: HorizontalAlign
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: HorizontalAlign
  nameWithType: FormView.HorizontalAlign
  fullName: System.Web.UI.WebControls.FormView.HorizontalAlign
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the horizontal alignment of a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control on the page."
  remarks: "Use the HorizontalAlign property to specify the horizontal alignment of a <xref:System.Web.UI.WebControls.FormView> control within the page. The following table lists the different horizontal alignment styles.      |HorizontalAlign value|Description|   |---------------------------|-----------------|   |`HorizontalAlign.NotSet`|The horizontal alignment of the <xref:System.Web.UI.WebControls.FormView> control has not been set.|   |`HorizontalAlign.Left`|The <xref:System.Web.UI.WebControls.FormView> control is left-aligned on the page.|   |`HorizontalAlign.Center`|The <xref:System.Web.UI.WebControls.FormView> control is centered on the page.|   |`HorizontalAlign.Right`|The <xref:System.Web.UI.WebControls.FormView> control is right-aligned on the page.|   |`HorizontalAlign.Justify`|The <xref:System.Web.UI.WebControls.FormView> control is aligned with both the left and right margins of the page.|"
  example:
  - "The following example demonstrates how to use the HorizontalAlign property to specify that a <xref:System.Web.UI.WebControls.FormView> control should be centered on the page.  \n  \n [!code-vb[FormViewHorizontalAlign#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1047_1.aspx)]\n [!code-cs[FormViewHorizontalAlign#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1047_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { get; set; }
    return:
      type: System.Web.UI.WebControls.HorizontalAlign
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.HorizontalAlign&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_HorizontalAlign.NotSet&quot; name=&quot;HorizontalAlign.NotSet&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.HorizontalAlign*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)
  id: InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: InitializePager(FormViewRow,PagedDataSource)
  nameWithType: FormView.InitializePager(FormViewRow,PagedDataSource)
  fullName: System.Web.UI.WebControls.FormView.InitializePager(FormViewRow,PagedDataSource)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates the pager row for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The InitializePager method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to create the pager row. It creates a <xref:System.Web.UI.WebControls.TableCell> object that contains the navigation controls using the properties of the <xref:System.Web.UI.WebControls.PagedDataSource> object contained in the `pagedDataSource` parameter. The cell is then added to the row specified by the `row` parameter."
  syntax:
    content: protected virtual void InitializePager (System.Web.UI.WebControls.FormViewRow row, System.Web.UI.WebControls.PagedDataSource pagedDataSource);
    parameters:
    - id: row
      type: System.Web.UI.WebControls.FormViewRow
      description: "The <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> that contains the pager row."
    - id: pagedDataSource
      type: System.Web.UI.WebControls.PagedDataSource
      description: "A <xref href=&quot;System.Web.UI.WebControls.PagedDataSource&quot;></xref> that contains the data for the current page."
  overload: System.Web.UI.WebControls.FormView.InitializePager*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)
  id: InitializeRow(System.Web.UI.WebControls.FormViewRow)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: InitializeRow(FormViewRow)
  nameWithType: FormView.InitializeRow(FormViewRow)
  fullName: System.Web.UI.WebControls.FormView.InitializeRow(FormViewRow)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes the specified <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object."
  remarks: "The InitializeRow method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to initialize the specified <xref:System.Web.UI.WebControls.FormViewRow> object. The <xref:System.Web.UI.WebControls.FormViewRow> object is initialized based on the row type and row state specified by its <xref:System.Web.UI.WebControls.FormViewRow.RowType%2A> and <xref:System.Web.UI.WebControls.FormViewRow.RowState%2A> properties, respectively. The appropriate content is then added to the <xref:System.Web.UI.WebControls.FormViewRow> object. The following table describes how each row type is initialized.      |Row type|Description|   |--------------|-----------------|   |Data row|The contents of the <xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>, <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>, or <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> property are added to the <xref:System.Web.UI.WebControls.FormViewRow> object, depending on the value of the <xref:System.Web.UI.WebControls.FormViewRow.RowState%2A> property.|   |Empty data row|The value of the <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> property or the contents of the <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> property is added to the <xref:System.Web.UI.WebControls.FormViewRow> object, depending on which property is set. If both properties are set, the <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> property takes precedence.|   |Footer row|The value of the <xref:System.Web.UI.WebControls.FormView.FooterText%2A> property or the contents of the <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property is added to the <xref:System.Web.UI.WebControls.FormViewRow> object, depending on which property is set. If both properties are set, the <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> property takes precedence.|   |Header row|The value of the <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> property or the contents of the <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property is added to the <xref:System.Web.UI.WebControls.FormViewRow> object, depending on which property is set. If both properties are set, the <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> property takes precedence.|      > [!NOTE] >  This method does not initialize the pager row. To create the pager row, use the <xref:System.Web.UI.WebControls.FormView.InitializePager%2A> method."
  syntax:
    content: protected virtual void InitializeRow (System.Web.UI.WebControls.FormViewRow row);
    parameters:
    - id: row
      type: System.Web.UI.WebControls.FormViewRow
      description: "The <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> to initialize."
  overload: System.Web.UI.WebControls.FormView.InitializeRow*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)
  id: InsertItem(System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: InsertItem(Boolean)
  nameWithType: FormView.InsertItem(Boolean)
  fullName: System.Web.UI.WebControls.FormView.InsertItem(Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inserts the current record in the data source."
  remarks: "When the <xref:System.Web.UI.WebControls.FormView> control is in insert mode, use the InsertItem method to programmatically insert the current record in the data source. This method is commonly used when you need to insert the current record from outside of the <xref:System.Web.UI.WebControls.FormView> control, such as from a different control on the page.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.FormView> control must be in insert mode when this method is called; otherwise, an <xref:System.Web.HttpException> is thrown.       To specify whether page validation is performed before the insert operation, use the `causesValidation` parameter. Calling this method also raises the <xref:System.Web.UI.WebControls.FormView.ItemInserted> and <xref:System.Web.UI.WebControls.FormView.ItemInserting> events."
  example:
  - "The following example demonstrates how to use the InsertItem method to programmatically insert the current record in a <xref:System.Web.UI.WebControls.FormView> control in the data source.  \n  \n [!code-cs[FormViewInsertItem#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_157_1.aspx)]\n [!code-vb[FormViewInsertItem#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_157_1.aspx)]"
  syntax:
    content: public virtual void InsertItem (bool causesValidation);
    parameters:
    - id: causesValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to perform page validation when the method is called; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.InsertItem*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not in insert mode.       -or-       The <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is null."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.InsertItemTemplate
  id: InsertItemTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: InsertItemTemplate
  nameWithType: FormView.InsertItemTemplate
  fullName: System.Web.UI.WebControls.FormView.InsertItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the custom content for an item in insert mode."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control renders a different template for the data row based on the current mode of the control (specified by the <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> property). The following table shows which template is used for each mode.      |Mode|Template rendered|   |----------|-----------------------|   |Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|   |Insert|InsertItemTemplate|   |Read-only|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|       Use the InsertItemTemplate property to define your own user interface (UI) for the data row when the <xref:System.Web.UI.WebControls.FormView> control is in insert mode. The insert item template usually contains the input controls for the user to enter the values for the new record, as well as command buttons to insert the record and to cancel the insert operation.       To specify the custom template, first place `<InsertItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<InsertItemTemplate>` tags. By using a two-way binding expression, you can associate a field with an input control. When a record is inserted, the <xref:System.Web.UI.WebControls.FormView> control automatically extracts the field value from the associated input control. For more information on two-way binding expressions, see [Binding to Databases](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742). To create command buttons that perform the built-in cancel and insert operations, add a command button control to the template with its `CommandName` property set to one of the values listed in the following table.      |Command button type|CommandName value|   |-------------------------|-----------------------|   |Cancel|&quot;Cancel&quot;|   |Insert|&quot;Insert&quot;|       You can control the appearance of the item template by using the <xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A> property."
  example:
  - "The following example demonstrates how to define a custom template for a data row in insert mode.  \n  \n [!code-vb[FormViewInsertItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_158_1.aspx)]\n [!code-cs[FormViewInsertItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_158_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate InsertItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the data row when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is in insert mode. The default value is null, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.InsertItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.InsertMethod
  id: InsertMethod
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: InsertMethod
  nameWithType: FormView.InsertMethod
  fullName: System.Web.UI.WebControls.FormView.InsertMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the name of the method on the page that is called when the control performs an insert operation."
  remarks: "For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117)."
  syntax:
    content: public virtual string InsertMethod { get; set; }
    return:
      type: System.String
      description: "The name of the method on the page that is called when the control performs an insert operation."
  overload: System.Web.UI.WebControls.FormView.InsertMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.InsertRowStyle
  id: InsertRowStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: InsertRowStyle
  nameWithType: FormView.InsertRowStyle
  fullName: System.Web.UI.WebControls.FormView.InsertRowStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when the control is in insert mode."
  remarks: "Use the InsertRowStyle property to control the appearance of the data row when a <xref:System.Web.UI.WebControls.FormView> control is in insert mode. When the <xref:System.Web.UI.WebControls.FormView> control is in insert mode, the data row displays the user-defined content specified by the <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> property. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns.       The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `InsertRowStyle-ForeColor`).      -   Nest an `<InsertRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `InsertRowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the InsertRowStyle property to specify a custom style for a data row when a <xref:System.Web.UI.WebControls.FormView> control is in insert mode.  \n  \n [!code-vb[FormViewInsertItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1317_1.aspx)]\n [!code-cs[FormViewInsertItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1317_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle InsertRowStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that represents the style of the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when the control is in insert mode."
  overload: System.Web.UI.WebControls.FormView.InsertRowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.IsBindableType(System.Type)
  id: IsBindableType(System.Type)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: IsBindableType(Type)
  nameWithType: FormView.IsBindableType(Type)
  fullName: System.Web.UI.WebControls.FormView.IsBindableType(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determines whether the specified data type can be bound to a field in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The IsBindableType method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to determine whether the specified data type can be bound to a field in the control. The <xref:System.Web.UI.WebControls.FormView> control supports the following data types:      -   All primitive data types, such as <xref:System.Boolean>, <xref:System.Byte>, <xref:System.Int32>, and so on.      -   <xref:System.DateTime>      -   <xref:System.Decimal>      -   <xref:System.Guid>      -   <xref:System.String>"
  syntax:
    content: public virtual bool IsBindableType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the data type to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified data type can be bound to a field in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.IsBindableType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemCommand
  id: ItemCommand
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemCommand
  nameWithType: FormView.ItemCommand
  fullName: System.Web.UI.WebControls.FormView.ItemCommand
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when a button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked."
  remarks: "The ItemCommand event is raised when a button within the <xref:System.Web.UI.WebControls.FormView> control is clicked. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.       Buttons within a <xref:System.Web.UI.WebControls.FormView> control can also invoke some of the built-in functionality of the control. To perform one of these operations, set the `CommandName` property of a button to one of the values in the following table.      |CommandName value|Description|   |-----------------------|-----------------|   |&quot;Cancel&quot;|Cancels an edit or insert operation and returns the <xref:System.Web.UI.WebControls.FormView> control to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property. Raises the <xref:System.Web.UI.WebControls.FormView.ModeChanged> and <xref:System.Web.UI.WebControls.FormView.ModeChanging> events.|   |&quot;Delete&quot;|Deletes the current record. Raises the <xref:System.Web.UI.WebControls.FormView.ItemDeleted> and <xref:System.Web.UI.WebControls.FormView.ItemDeleting> events.|   |&quot;Edit&quot;|Puts the <xref:System.Web.UI.WebControls.FormView> control in edit mode. Raises the <xref:System.Web.UI.WebControls.FormView.ModeChanged> and <xref:System.Web.UI.WebControls.FormView.ModeChanging> events.|   |&quot;Insert&quot;|Inserts the current record in the data source. Raises the <xref:System.Web.UI.WebControls.FormView.ItemInserted> and <xref:System.Web.UI.WebControls.FormView.ItemInserting> events.|   |&quot;New&quot;|Puts the <xref:System.Web.UI.WebControls.FormView> control in insert mode. Raises the <xref:System.Web.UI.WebControls.FormView.ModeChanged> and <xref:System.Web.UI.WebControls.FormView.ModeChanging> events.|   |&quot;Page&quot;|Performs a paging operation. Set the `CommandArgument` property of the button to &quot;First&quot;, &quot;Last&quot;, &quot;Next&quot;, &quot;Prev&quot;, or a page number to specify the type of paging operation to perform. Raises the <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> and <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> events.|   |&quot;Update&quot;|Updates the current record in the data source. Raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> and <xref:System.Web.UI.WebControls.FormView.ItemUpdating> events.|       Although the ItemCommand event is raised when a button listed in the previous table is clicked, it is recommended that you use the events listed in the table for the operation.       A <xref:System.Web.UI.WebControls.FormViewCommandEventArgs> object is passed to the event-handling method, which allows you to determine the command name and command argument of the button clicked. To determine the command name and command argument, use the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> and <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> properties, respectively. You can also access the control that raised the event by using the <xref:System.Web.UI.WebControls.DetailsViewCommandEventArgs.CommandSource%2A> property.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemCommand event to handle a button click in a <xref:System.Web.UI.WebControls.FormView> control. When the user clicks the Add button, the currently displayed item is added to a <xref:System.Web.UI.WebControls.ListBox> control.  \n  \n [!code-cs[FormViewItemCommandEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_135_1.aspx)]\n [!code-vb[FormViewItemCommandEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_135_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand;
    return:
      type: System.Web.UI.WebControls.FormViewCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemCreated
  id: ItemCreated
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemCreated
  nameWithType: FormView.ItemCreated
  fullName: System.Web.UI.WebControls.FormView.ItemCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs after all the rows are created in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The ItemCreated event is raised after all rows are created in a <xref:System.Web.UI.WebControls.FormView> control. This can occur when the control is first rendered, or when the user navigates to another record. You can use this event to provide an event-handling method that performs a custom routine, such as adding to or modifying the contents of a row, whenever this event occurs.      > [!NOTE] >  The ItemCreated event occurs before the <xref:System.Web.UI.WebControls.FormView> control is bound to data. To modify the value of a bound field, use the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBound> event.       You can access the header, footer, and pager rows in the <xref:System.Web.UI.WebControls.FormView> control by using the <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>, <xref:System.Web.UI.WebControls.FormView.FooterRow%2A>, <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>, or <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A> properties, respectively. To access the data row, use the <xref:System.Web.UI.WebControls.FormView.Row%2A> property.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemCreated event to update the text of a <xref:System.Web.UI.WebControls.Label> control contained in the pager row.  \n  \n [!code-vb[FormViewItemCreated#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_13_1.aspx)]\n [!code-cs[FormViewItemCreated#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_13_1.aspx)]"
  syntax:
    content: public event EventHandler ItemCreated;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemDeleted
  id: ItemDeleted
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemDeleted
  nameWithType: FormView.ItemDeleted
  fullName: System.Web.UI.WebControls.FormView.ItemDeleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when a Delete button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked, but after the delete operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the ItemDeleted event when a Delete button (a button with its `CommandName` property set to &quot;Delete&quot;) within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control deletes the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of a delete operation, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the delete operation, use the <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled%2A> property. If you want to access the name/value pairs of the key fields and non-key fields of the deleted record, use the <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys%2A> and <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values%2A> properties, respectively.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemDeleted event to determine whether an exception occurred during a delete operation.  \n  \n [!code-vb[FormViewDeletedEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_35_1.aspx)]\n [!code-cs[FormViewDeletedEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_35_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted;
    return:
      type: System.Web.UI.WebControls.FormViewDeletedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemDeleting
  id: ItemDeleting
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemDeleting
  nameWithType: FormView.ItemDeleting
  fullName: System.Web.UI.WebControls.FormView.ItemDeleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when a Delete button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked, but before the delete operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the ItemDeleting event when a Delete button (a button with its `CommandName` property set to &quot;Delete&quot;) within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control deletes the record. This allows you to provide an event-handling method that performs a custom routine, such as verifying a record before deleting it, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewDeleteEventArgs> object is passed to the event-handling method, which allows you to determine the index of the record being deleted and to indicate that the delete operation should be canceled. To determine the index of a record, use the <xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex%2A> property. To cancel the delete operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. You can also access the key fields and non-key fields by using the <xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys%2A> and <xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values%2A> properties, respectively.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemDeleting event to cancel a delete operation.  \n  \n [!code-cs[FormViewDeleteEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_33_1.aspx)]\n [!code-vb[FormViewDeleteEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_33_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting;
    return:
      type: System.Web.UI.WebControls.FormViewDeleteEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemInserted
  id: ItemInserted
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemInserted
  nameWithType: FormView.ItemInserted
  fullName: System.Web.UI.WebControls.FormView.ItemInserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an Insert button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked, but after the insert operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the ItemInserted event when an Insert button (a button with its `CommandName` property set to &quot;Insert&quot;) within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an insert operation, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the insert operation, use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A> property. If you need to access the values of the inserted record, use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values%2A> property.       By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an insert operation. To keep the <xref:System.Web.UI.WebControls.FormView> control in insert mode, set the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode%2A> property to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemInserted event to determine whether an exception occurred during an insert operation.  \n  \n [!code-cs[FormViewInsertedEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_91_1.aspx)]\n [!code-vb[FormViewInsertedEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_91_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted;
    return:
      type: System.Web.UI.WebControls.FormViewInsertedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemInserting
  id: ItemInserting
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemInserting
  nameWithType: FormView.ItemInserting
  fullName: System.Web.UI.WebControls.FormView.ItemInserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an Insert button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked, but before the insert operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the ItemInserting event when an Insert button (a button with its `CommandName` property set to &quot;Insert&quot;) within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding the values of a record before inserting it in the data source, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewInsertEventArgs> object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate that the insert operation should be canceled. The command argument value corresponds to the `CommandArgument` property of the Insert button. When the `CommandArgument` property of the Insert button is set, use the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property to determine the value of the command argument. To cancel the insert operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. You can also read or modify the field values for the new record by using the <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.Values%2A> property.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemInserting event to cancel an insert operation.  \n  \n [!code-vb[FormViewInsertEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_61_1.aspx)]\n [!code-cs[FormViewInsertEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_61_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting;
    return:
      type: System.Web.UI.WebControls.FormViewInsertEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemTemplate
  id: ItemTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemTemplate
  nameWithType: FormView.ItemTemplate
  fullName: System.Web.UI.WebControls.FormView.ItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the custom content for the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when the control is in read-only mode."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control renders a different template for the data row based on the current mode of the control (specified by the <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> property). The following table shows which template is used for each mode.      |Mode|Template rendered|   |----------|-----------------------|   |Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|   |Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|   |Read-only|ItemTemplate|       Use the ItemTemplate property to define your own user interface (UI) for the data row when the <xref:System.Web.UI.WebControls.FormView> control is in read-only mode. The item template usually contains controls to display the field values of a record, as well as command buttons to edit, insert, and delete a record.       To specify the custom template, first place `<ItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<ItemTemplate>` tags. To display the field values of the data source bound to the control, use a data-binding expression. For more information on data-binding expressions, see [Data-Binding Expression Syntax](http://msdn.microsoft.com/en-us/676beb1d-ddfa-4153-bba8-3c86dcb7ceca). To create command buttons that perform the built-in delete, edit, and new record operations, add a command button control to the template with its `CommandName` property set to one of the values listed in the following table.      |Command button type|CommandName value|   |-------------------------|-----------------------|   |Delete|&quot;Delete&quot;|   |Edit|&quot;Edit&quot;|   |New|&quot;New&quot;|       You can control the appearance of the item template by using the <xref:System.Web.UI.WebControls.FormView.RowStyle%2A> property."
  example:
  - "The following example demonstrates how to define a custom template for a data row in read-only mode.  \n  \n [!code-vb[FormViewEditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_192_1.aspx)]\n [!code-cs[FormViewEditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_192_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the data row when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is in read-only mode. The default value is null, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.ItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemUpdated
  id: ItemUpdated
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemUpdated
  nameWithType: FormView.ItemUpdated
  fullName: System.Web.UI.WebControls.FormView.ItemUpdated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an Update button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked, but after the update operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the ItemUpdated event when an Update button (a button with its `CommandName` property set to &quot;Update&quot;) within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an update operation, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the update operation, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> property. If you need to access the key field values for the updated record, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> property. The original and updated non-key field values can be accessed using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> and <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> properties, respectively.       By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an update operation. To keep the <xref:System.Web.UI.WebControls.FormView> control in edit mode, set the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> property to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemUpdated event to determine whether an exception occurred during an update operation.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_100_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_100_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated;
    return:
      type: System.Web.UI.WebControls.FormViewUpdatedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ItemUpdating
  id: ItemUpdating
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ItemUpdating
  nameWithType: FormView.ItemUpdating
  fullName: System.Web.UI.WebControls.FormView.ItemUpdating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an Update button within a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is clicked, but before the update operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the ItemUpdating event when an Update button (a button with its `CommandName` property set to &quot;Update&quot;) within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding the values of a record before updating it in the data source, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate that the update operation should be canceled. The command argument value corresponds to the `CommandArgument` property of the Update button. When the `CommandArgument` property of the Update button is set, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A> property to determine the value of the command argument. To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. You can also read or modify the new values entered by the user by using the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> and <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> properties. The <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the key fields, while the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property contains the non-key fields. If you need to access the original non-key field values, use the <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> property.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ItemUpdating event to cancel an update operation.  \n  \n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_124_1.aspx)]\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_124_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating;
    return:
      type: System.Web.UI.WebControls.FormViewUpdateEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: FormView.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.FormView.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Loads the state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control properties that need to be persisted, even when the <xref:System.Web.UI.Control.EnableViewState*> property is set to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  remarks: "The LoadControlState method is used to load the state of the <xref:System.Web.UI.WebControls.FormView> control properties that need to be persisted, even when the <xref:System.Web.UI.Control.EnableViewState%2A> property is set to `false`.      > [!NOTE] >  This method is used primarily by control developers when extending the <xref:System.Web.UI.WebControls.FormView> control."
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An <xref:System.Object> that represents the state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.LoadControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: FormView.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.FormView.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Loads the previously saved view state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The LoadViewState method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.FormView> control.      > [!NOTE] >  This method is used primarily by control developers when extending the <xref:System.Web.UI.WebControls.FormView> control."
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An <xref:System.Object> that represents the state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ModeChanged
  id: ModeChanged
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ModeChanged
  nameWithType: FormView.ModeChanged
  fullName: System.Web.UI.WebControls.FormView.ModeChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control switches between edit, insert, and read-only mode, but after the mode has changed."
  remarks: "The ModeChanged event is raised when a <xref:System.Web.UI.WebControls.FormView> control attempts to switch between edit, insert, and read-only mode, but after the mode actually changes. This allows you to provide an event-handling method that performs a custom routine, such as synchronizing the <xref:System.Web.UI.WebControls.FormView> control with another control, whenever this event occurs.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ModeChanged event to display the current mode in the header row of a <xref:System.Web.UI.WebControls.FormView> control.  \n  \n [!code-vb[FormViewModeChanged#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_127_1.aspx)]\n [!code-cs[FormViewModeChanged#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_127_1.aspx)]"
  syntax:
    content: public event EventHandler ModeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ModeChanging
  id: ModeChanging
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ModeChanging
  nameWithType: FormView.ModeChanging
  fullName: System.Web.UI.WebControls.FormView.ModeChanging
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control switches between edit, insert, and read-only mode, but before the mode changes."
  remarks: "The ModeChanging event is raised when a <xref:System.Web.UI.WebControls.FormView> control attempts to switch between edit, insert, and read-only mode, but before the mode actually changes. This allows you to provide an event-handling method that performs a custom routine, such as configuring the <xref:System.Web.UI.WebControls.FormView> control for a specific mode or canceling the mode change, whenever this event occurs.       A <xref:System.Web.UI.WebControls.FormViewModeEventArgs> object is passed to the event-handling method, which allows you to determine the mode to which the <xref:System.Web.UI.WebControls.FormView> control is switching, to determine whether the ModeChanging event was raised as a result of the user canceling an edit operation, or to indicate that an insert operation should be canceled. To determine the new mode, use the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A> property. You can also use the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A> property to switch to an alternate mode by setting it to one of the <xref:System.Web.UI.WebControls.FormViewMode> enumeration values. Use the <xref:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit%2A> property to determine whether the user canceled an edit operation. To cancel an insert operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the ModeChanging event to hide the pager row when the <xref:System.Web.UI.WebControls.FormView> control transitions to edit mode.  \n  \n [!code-vb[FormViewModeEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_111_1.aspx)]\n [!code-cs[FormViewModeEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_111_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging;
    return:
      type: System.Web.UI.WebControls.FormViewModeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName
  id: ModifiedOuterTableStylePropertyName
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: ModifiedOuterTableStylePropertyName()
  nameWithType: FormView.ModifiedOuterTableStylePropertyName()
  fullName: System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determines whether the table-specific CSS style rules that are associated with the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control are set to their default values."
  remarks: "The table-specific CSS style rules are set to their default values by using the <xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>, <xref:System.Web.UI.WebControls.FormView.CellPadding%2A>, <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>, <xref:System.Web.UI.WebControls.FormView.GridLines%2A>, <xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A> and <xref:System.Web.UI.WebControls.Style.Font%2A> properties."
  syntax:
    content: protected virtual string ModifiedOuterTableStylePropertyName ();
    parameters: []
    return:
      type: System.String
      description: "The default CSS style rules that are associated with the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnBubbleEvent(System.Object,System.EventArgs)
  id: OnBubbleEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnBubbleEvent(Object,EventArgs)
  nameWithType: FormView.OnBubbleEvent(Object,EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnBubbleEvent(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Handles an event passed up through the control hierarchy."
  remarks: "The <xref:System.Web.UI.Control.OnBubbleEvent%2A?displayProperty=fullName> method is used by the control to optionally handle events passed up through the control hierarchy by the <xref:System.Web.UI.Control.RaiseBubbleEvent%2A> method. It determines whether to handle an event by examining the properties of the <xref:System.EventArgs> object contained in the `e` parameter. When an event needs to be handled, the method performs the appropriate action. Other events are ignored and passed up the control hierarchy. This method indicates whether to pass the event further up the control hierarchy through its return value.       The <xref:System.Web.UI.WebControls.FormView> control overrides the base implementation of this method to perform the appropriate action when one of the buttons recognized by the control is clicked. The following table lists the command buttons that the <xref:System.Web.UI.WebControls.FormView> control recognizes.      |Button|CommandName value|Description|   |------------|-----------------------|-----------------|   |Cancel|&quot;Cancel&quot;|Used in updating or inserting operations to cancel the operation and to discard the values entered by the user. The <xref:System.Web.UI.WebControls.FormView> control then returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property.|   |Delete|&quot;Delete&quot;|Used in deleting operations to delete the displayed record from the data source. Raises the <xref:System.Web.UI.WebControls.FormView.ItemDeleting> and <xref:System.Web.UI.WebControls.FormView.ItemDeleted> events.|   |Edit|&quot;Edit&quot;|Used in updating operations to put the <xref:System.Web.UI.WebControls.FormView> control in edit mode. The content specified in the <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> property is displayed for the data row.|   |Insert|&quot;Insert&quot;|Used in inserting operations to attempt to insert a new record in the data source with the values provided by the user. Raises the <xref:System.Web.UI.WebControls.FormView.ItemInserting> and <xref:System.Web.UI.WebControls.FormView.ItemInserted> events.|   |New|&quot;New&quot;|Used in inserting operations to put the <xref:System.Web.UI.WebControls.FormView> control in insert mode. The content specified in the <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> property is displayed for the data row.|   |Page|&quot;Page&quot;|Used in paging operations to represent a button in the pager row that performs paging. To specify the paging operation, set the `CommandArgument` property of the button to &quot;Next&quot;, &quot;Prev&quot;, &quot;First&quot;, &quot;Last&quot;, or the index of the page to which to navigate. Raises the <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> and <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> events. **Note:**  This type of button is typically used only in the pager template.|   |Update|&quot;Update&quot;|Used in updating operations to attempt to update the displayed record in the data source with the values provided by the user. Raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> and <xref:System.Web.UI.WebControls.FormView.ItemUpdated> events.|       This version of the method returns `true` when one of these buttons is handled. For more information about event bubbling, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  syntax:
    content: protected override bool OnBubbleEvent (object source, EventArgs e);
    parameters:
    - id: source
      type: System.Object
      description: "The source of the event."
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to indicate the event should be passed further up the control hierarchy; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.OnBubbleEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: FormView.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.Control.Init&quot;></xref> event."
  remarks: "The OnInit method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.Control.Init> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnInit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)
  id: OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemCommand(FormViewCommandEventArgs)
  nameWithType: FormView.OnItemCommand(FormViewCommandEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemCommand(FormViewCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemCommand&quot;></xref> event."
  remarks: "The OnItemCommand method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemCommand> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemCommand (System.Web.UI.WebControls.FormViewCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewCommandEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)
  id: OnItemCreated(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemCreated(EventArgs)
  nameWithType: FormView.OnItemCreated(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemCreated(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemCreated&quot;></xref> event."
  remarks: "The OnItemCreated method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemCreated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemCreated*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)
  id: OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemDeleted(FormViewDeletedEventArgs)
  nameWithType: FormView.OnItemDeleted(FormViewDeletedEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemDeleted(FormViewDeletedEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemDeleted&quot;></xref> event."
  remarks: "The OnItemDeleted method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemDeleted> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemDeleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemDeleted (System.Web.UI.WebControls.FormViewDeletedEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewDeletedEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewDeletedEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)
  id: OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemDeleting(FormViewDeleteEventArgs)
  nameWithType: FormView.OnItemDeleting(FormViewDeleteEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemDeleting(FormViewDeleteEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemDeleting&quot;></xref> event."
  remarks: "The OnItemDeleting method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemDeleting> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemDeleting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemDeleting (System.Web.UI.WebControls.FormViewDeleteEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewDeleteEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewDeleteEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemDeleting*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not bound to a data source control, the user did not cancel the delete operation, and an event handler is not registered for the event."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)
  id: OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemInserted(FormViewInsertedEventArgs)
  nameWithType: FormView.OnItemInserted(FormViewInsertedEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemInserted(FormViewInsertedEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemInserted&quot;></xref> event."
  remarks: "The OnItemInserted method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemInserted> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemInserted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemInserted (System.Web.UI.WebControls.FormViewInsertedEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewInsertedEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewInsertedEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemInserted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)
  id: OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemInserting(FormViewInsertEventArgs)
  nameWithType: FormView.OnItemInserting(FormViewInsertEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemInserting(FormViewInsertEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemInserting&quot;></xref> event."
  remarks: "The OnItemInserting method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemInserting> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemInserting method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemInserting (System.Web.UI.WebControls.FormViewInsertEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewInsertEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewInsertEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemInserting*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not bound to a data source control, the user did not cancel the insert operation, and an event handler is not registered for the event."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)
  id: OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemUpdated(FormViewUpdatedEventArgs)
  nameWithType: FormView.OnItemUpdated(FormViewUpdatedEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemUpdated(FormViewUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemUpdated&quot;></xref> event."
  remarks: "The OnItemUpdated method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemUpdated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemUpdated (System.Web.UI.WebControls.FormViewUpdatedEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewUpdatedEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewUpdatedEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)
  id: OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnItemUpdating(FormViewUpdateEventArgs)
  nameWithType: FormView.OnItemUpdating(FormViewUpdateEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemUpdating(FormViewUpdateEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemUpdating&quot;></xref> event."
  remarks: "The OnItemUpdating method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnItemUpdating method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnItemUpdating (System.Web.UI.WebControls.FormViewUpdateEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewUpdateEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewUpdateEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnItemUpdating*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not bound to a data source control, the user did not cancel the update operation, and an event handler is not registered for the event."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)
  id: OnModeChanged(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnModeChanged(EventArgs)
  nameWithType: FormView.OnModeChanged(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnModeChanged(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ModeChanged&quot;></xref> event."
  remarks: "The OnModeChanged method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ModeChanged> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnModeChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnModeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)
  id: OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnModeChanging(FormViewModeEventArgs)
  nameWithType: FormView.OnModeChanging(FormViewModeEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnModeChanging(FormViewModeEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.ModeChanging&quot;></xref> event."
  remarks: "The OnModeChanging method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.ModeChanging> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnModeChanging method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnModeChanging (System.Web.UI.WebControls.FormViewModeEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewModeEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewModeEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnModeChanging*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not bound to a data source control, the mode change was not canceled, and an event handler is not registered for the event."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)
  id: OnPageIndexChanged(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnPageIndexChanged(EventArgs)
  nameWithType: FormView.OnPageIndexChanged(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnPageIndexChanged(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.PageIndexChanged&quot;></xref> event."
  remarks: "The OnPageIndexChanged method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnPageIndexChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnPageIndexChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnPageIndexChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)
  id: OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: OnPageIndexChanging(FormViewPageEventArgs)
  nameWithType: FormView.OnPageIndexChanging(FormViewPageEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnPageIndexChanging(FormViewPageEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.FormView.PageIndexChanging&quot;></xref> event."
  remarks: "The OnPageIndexChanging method is called by the <xref:System.Web.UI.WebControls.FormView> control to raise the <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> event. It is generally used by control developers when extending the <xref:System.Web.UI.WebControls.FormView> class.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnPageIndexChanging method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnPageIndexChanging (System.Web.UI.WebControls.FormViewPageEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.FormViewPageEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewPageEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.FormView.OnPageIndexChanging*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not bound to a data source control, the paging operation was not canceled, and an event handler is not registered for the event."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PageCount
  id: PageCount
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PageCount
  nameWithType: FormView.PageCount
  fullName: System.Web.UI.WebControls.FormView.PageCount
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the total number of pages required to display every record in the data source."
  remarks: "When the paging feature is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`), use the PageCount property to determine the total number of records in the underlying data source.      > [!NOTE] >  Because the <xref:System.Web.UI.WebControls.FormView> control displays only one record at a time, this value corresponds to the total number of pages required to display every record in the data source. This value is not accurate until after data-binding occurs.       To determine the index of the current record from the underlying data source, use the <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> property."
  example:
  - "The following example demonstrates how to use the PageCount property to determine the total number of records displayed in the control.  \n  \n [!code-cs[FormViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_653_1.aspx)]\n [!code-vb[FormViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_653_1.aspx)]"
  syntax:
    content: public virtual int PageCount { get; }
    return:
      type: System.Int32
      description: "The number of items in the underlying data source."
  overload: System.Web.UI.WebControls.FormView.PageCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PageIndex
  id: PageIndex
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PageIndex
  nameWithType: FormView.PageIndex
  fullName: System.Web.UI.WebControls.FormView.PageIndex
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the index of the displayed page."
  remarks: "When the paging feature is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`), use the PageIndex property to determine the index of the currently displayed record. You can also use this property to programmatically change the displayed record.      > [!NOTE] >  When the paging feature is enabled, you can also use this property to determine the page number of the record displayed; however, be aware that this property is zero-based.       To determine the total number of items in the data source, use the <xref:System.Web.UI.WebControls.FormView.PageCount%2A> property."
  example:
  - "The following example demonstrates how to use the PageIndex property to determine the page index of the displayed record.  \n  \n [!code-cs[FormViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_319_1.aspx)]\n [!code-vb[FormViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_319_1.aspx)]"
  syntax:
    content: public virtual int PageIndex { get; set; }
    return:
      type: System.Int32
      description: "The zero-based index of the data item being displayed in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control from the underlying data source."
  overload: System.Web.UI.WebControls.FormView.PageIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The selected value is less than -1."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PageIndexChanged
  id: PageIndexChanged
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PageIndexChanged
  nameWithType: FormView.PageIndexChanged
  fullName: System.Web.UI.WebControls.FormView.PageIndexChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the value of the <xref:System.Web.UI.WebControls.FormView.PageIndex*> property changes after a paging operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the PageIndexChanged event when a pager button (a button with its `CommandName` property set to &quot;Page&quot;) within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control handles the paging operation. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.      > [!NOTE] >  This event is not raised when you programmatically set the <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> property.       Pager buttons are usually located in the pager row of a <xref:System.Web.UI.WebControls.FormView> control. This event is often used to synchronize a <xref:System.Web.UI.WebControls.FormView> control with a <xref:System.Web.UI.WebControls.GridView> control or to set the behavior of the <xref:System.Web.UI.WebControls.FormView> control after a paging operation.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the PageIndexChanged event to return the <xref:System.Web.UI.WebControls.FormView> to read-only mode when the user navigates to another record.  \n  \n [!code-vb[FormViewPageIndexChanged#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_142_1.aspx)]\n [!code-cs[FormViewPageIndexChanged#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_142_1.aspx)]"
  syntax:
    content: public event EventHandler PageIndexChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PageIndexChanging
  id: PageIndexChanging
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PageIndexChanging
  nameWithType: FormView.PageIndexChanging
  fullName: System.Web.UI.WebControls.FormView.PageIndexChanging
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the value of the <xref:System.Web.UI.WebControls.FormView.PageIndex*> property changes before a paging operation."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the PageIndexChanging event when a pager button (a button with its `CommandName` property set to &quot;Page&quot;) within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control handles the paging operation. This allows you to provide an event-handling method that performs a custom routine, such as canceling the paging operation, whenever this event occurs.      > [!NOTE] >  This event is not raised when you programmatically set the <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> property.       Pager buttons are usually located in the pager row of a <xref:System.Web.UI.WebControls.FormView> control.       A <xref:System.Web.UI.WebControls.FormViewPageEventArgs> object is passed to the event-handling method, which allows you to determine the index of the page selected by the user and to indicate that the paging operation should be canceled. To determine the index of the page selected by the user, use the <xref:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex%2A> property. To cancel the paging operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.FormViewPageEventArgs> object to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to use the PageIndexChanging event to cancel a paging operation.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[FormViewPageEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[FormViewPageEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging;
    return:
      type: System.Web.UI.WebControls.FormViewPageEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PagerSettings
  id: PagerSettings
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PagerSettings
  nameWithType: FormView.PagerSettings
  fullName: System.Web.UI.WebControls.FormView.PagerSettings
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.PagerSettings&quot;></xref> object that allows you to set the properties of the pager buttons in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the PagerSettings property to control the settings of the pager row in a <xref:System.Web.UI.WebControls.FormView> control. The pager row is displayed when the paging feature is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`), and contains the controls that allow the user to navigate to the different records in the control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.PagerSettings> object it returns. The properties can be set declaratively in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.PagerSettings> object (for example, `PagerSettings-Mode`). The properties can also be set programmatically in the form `Property.Subproperty` (for example, `PagerSettings.Mode`). Common settings usually include the pager row&quot;s display mode and custom text or images for the navigation controls."
  example:
  - "The following example demonstrates how to use the PagerSettings property to specify the properties of the pager row.  \n  \n [!code-cs[FormViewAllowPaging#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_238_1.aspx)]\n [!code-vb[FormViewAllowPaging#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_238_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.PagerSettings PagerSettings { get; }
    return:
      type: System.Web.UI.WebControls.PagerSettings
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.PagerSettings&quot;></xref> that allows you to set the properties of the pager buttons in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.PagerSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PagerStyle
  id: PagerStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PagerStyle
  nameWithType: FormView.PagerStyle
  fullName: System.Web.UI.WebControls.FormView.PagerStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the pager row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the PagerStyle property to control the appearance of the pager row in a <xref:System.Web.UI.WebControls.FormView> control. The pager row is displayed when the paging feature is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`), and contains the controls that allow the user to navigate to the different pages in the control. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `PagerStyle-ForeColor`).      -   Nest a `<PagerRowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `PagerStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the PagerStyle property to specify the style settings for the pager row.  \n  \n [!code-cs[FormViewAllowPaging#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_425_1.aspx)]\n [!code-vb[FormViewAllowPaging#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_425_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle PagerStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that represents the style of the pager row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.PagerStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PagerTemplate
  id: PagerTemplate
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PagerTemplate
  nameWithType: FormView.PagerTemplate
  fullName: System.Web.UI.WebControls.FormView.PagerTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the custom content for the pager row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "A pager row is displayed in a <xref:System.Web.UI.WebControls.FormView> control when the paging feature is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to true). The pager row contains the controls that allow the user to navigate to the different pages in the control. Instead of using the built-in pager row user interface (UI), you can define your own UI by using the PagerTemplate property.      > [!NOTE] >  When the PagerTemplate property is set it overrides the built-in pager row UI.       To specify a custom template for the pager row, first place `<PagerTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control. You can then list the contents of the template between the opening and closing `<PagerTemplate>` tags. To control the appearance of the pager row, use the <xref:System.Web.UI.WebControls.FormView.PagerStyle%2A> property.       Typically, button controls are added to the pager template to perform the paging operations. The <xref:System.Web.UI.WebControls.FormView> control performs a paging operation when a button control with its `CommandName` property set to &quot;Page&quot; is clicked. The button&quot;s `CommandArgument` property determines the type of paging operation to perform. The following table lists the command argument values supported by the <xref:System.Web.UI.WebControls.FormView> control.      |CommandArgument value|Description|   |---------------------------|-----------------|   |&quot;Next&quot;|Navigates to the next page.|   |&quot;Prev&quot;|Navigates to the previous page.|   |&quot;First&quot;|Navigates to the first page.|   |&quot;Last&quot;|Navigates to the last page.|   |Integer value|Navigates to the specified page number.|"
  example:
  - "The following example demonstrates how to define a custom pager template.  \n  \n [!code-cs[FormViewPagerTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_644_1.aspx)]\n [!code-vb[FormViewPagerTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_644_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate PagerTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the custom content for the pager row. The default value is null, which indicates that this property is not set."
  overload: System.Web.UI.WebControls.FormView.PagerTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)
  id: PerformDataBinding(System.Collections.IEnumerable)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PerformDataBinding(IEnumerable)
  nameWithType: FormView.PerformDataBinding(IEnumerable)
  fullName: System.Web.UI.WebControls.FormView.PerformDataBinding(IEnumerable)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Binds the specified data source to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The PerformDataBinding method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to bind the specified data source to the control."
  syntax:
    content: protected override void PerformDataBinding (System.Collections.IEnumerable data);
    parameters:
    - id: data
      type: System.Collections.IEnumerable
      description: "An <xref:System.Collections.IEnumerable> that represents the data source."
  overload: System.Web.UI.WebControls.FormView.PerformDataBinding*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.PrepareControlHierarchy
  id: PrepareControlHierarchy
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: PrepareControlHierarchy()
  nameWithType: FormView.PrepareControlHierarchy()
  fullName: System.Web.UI.WebControls.FormView.PrepareControlHierarchy()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Sets up the control hierarchy of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The PrepareControlHierarchy method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to set up the control hierarchy in the <xref:System.Web.UI.WebControls.FormView> control before the control is rendered."
  syntax:
    content: protected virtual void PrepareControlHierarchy ();
    parameters: []
  overload: System.Web.UI.WebControls.FormView.PrepareControlHierarchy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)
  id: RaisePostBackEvent(System.String)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: RaisePostBackEvent(String)
  nameWithType: FormView.RaisePostBackEvent(String)
  fullName: System.Web.UI.WebControls.FormView.RaisePostBackEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the appropriate events for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when it posts back to the server."
  remarks: "The page calls the RaisePostBackEvent method when a postback event occurs that raises the appropriate events for a <xref:System.Web.UI.WebControls.FormView> control. This call occurs in the page life cycle after loading and change notification are complete, but before prerendering occurs. This method has been implemented to create a <xref:System.Web.UI.WebControls.CommandEventArgs> object for the events that are raised.      > [!NOTE] >  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.FormView> control."
  syntax:
    content: protected virtual void RaisePostBackEvent (string eventArgument);
    parameters:
    - id: eventArgument
      type: System.String
      description: "The event argument from which to create a <xref href=&quot;System.Web.UI.WebControls.CommandEventArgs&quot;></xref> for the event or events that are raised."
  overload: System.Web.UI.WebControls.FormView.RaisePostBackEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: FormView.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.FormView.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Displays the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control on the client."
  remarks: "The Render method is used to render the server control content to the client&quot;s browser using the specified <xref:System.Web.UI.HtmlTextWriter> object."
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "An <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> that contains the output stream to render on the client."
  overload: System.Web.UI.WebControls.FormView.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.RenderOuterTable
  id: RenderOuterTable
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: RenderOuterTable
  nameWithType: FormView.RenderOuterTable
  fullName: System.Web.UI.WebControls.FormView.RenderOuterTable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value that indicates whether the control encloses rendered HTML in a <xref uid=&quot;langword_csharp_table&quot; name=&quot;table&quot; href=&quot;&quot;></xref> element in order to apply inline styles."
  remarks: "In order to make inline style properties such as <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> apply to all the HTML that is rendered for the control, ASP.NET encloses the rendered HTML in a `table` element. If you do not want the outer `table` element to be rendered, set this property to `false`. In that case, if you try to set inline style properties that apply to the whole control, an exception is thrown."
  syntax:
    content: public virtual bool RenderOuterTable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control encloses rendered HTML in a <xref uid=&quot;langword_csharp_table&quot; name=&quot;table&quot; href=&quot;&quot;></xref> element; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.RenderOuterTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.Row
  id: Row
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: Row
  nameWithType: FormView.Row
  fullName: System.Web.UI.WebControls.FormView.Row
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object that represents the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "Use the Row property to programmatically access the <xref:System.Web.UI.WebControls.FormViewRow> object that represents the data row. The data row contains different content based on the template rendered for the current mode (specified by the <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> property). You can only access the contents of the template for the current mode. The following table shows which template is used for each mode.      |Mode|Template rendered|   |----------|-----------------------|   |Edit|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|   |Insert|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|   |Read-only|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|      > [!NOTE] >  The Row property is available only after the <xref:System.Web.UI.WebControls.FormView> control creates the data row in the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.       This property is commonly used when you need to programmatically manipulate the data row, for example when adding custom content. Any modification to the Row property must be performed after the <xref:System.Web.UI.WebControls.FormView> control has been data-bound; otherwise, the <xref:System.Web.UI.WebControls.FormView> control overwrites any changes."
  example:
  - "The following example demonstrates how to use the Row property to access the properties of the data row during the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.  \n  \n [!code-cs[FormViewRow#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1104_1.aspx)]\n [!code-vb[FormViewRow#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1104_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.FormViewRow Row { get; }
    return:
      type: System.Web.UI.WebControls.FormViewRow
      description: "The <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> that represents the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.Row*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.RowStyle
  id: RowStyle
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: RowStyle
  nameWithType: FormView.RowStyle
  fullName: System.Web.UI.WebControls.FormView.RowStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that allows you to set the appearance of the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when the control is in read-only mode."
  remarks: "Use the RowStyle property to control the appearance of the data row when a <xref:System.Web.UI.WebControls.FormView> control is in read-only (display) mode. When the <xref:System.Web.UI.WebControls.FormView> control is in read-only mode, the data row displays the user-defined content specified by the <xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A> property. This property is read-only; however, you can set the properties of the <xref:System.Web.UI.WebControls.TableItemStyle> object it returns. The properties can be set declaratively using one of the following methods:      -   Place an attribute in the opening tag of the <xref:System.Web.UI.WebControls.FormView> control in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.TableItemStyle> object (for example, `RowStyle-ForeColor`).      -   Nest an `<RowStyle>` element between the opening and closing tags of the <xref:System.Web.UI.WebControls.FormView> control.       The properties can also be set programmatically in the form `Property.Subproperty` (for example, `RowStyle.ForeColor`). Common settings usually include a custom background color, foreground color, and font properties."
  example:
  - "The following example demonstrates how to use the RowStyle property to specify a custom style for a data row when a <xref:System.Web.UI.WebControls.FormView> control is in read-only mode.  \n  \n [!code-vb[FormViewEditItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_235_1.aspx)]\n [!code-cs[FormViewEditItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_235_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableItemStyle RowStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A reference to the <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> that represents the style of the data row in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when the control is in read-only mode."
  overload: System.Web.UI.WebControls.FormView.RowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: FormView.SaveControlState()
  fullName: System.Web.UI.WebControls.FormView.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Saves the state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control properties that need to be persisted, even when the &lt;xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=fullName&gt; property is set to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  remarks: "This method is used to save the state of the <xref:System.Web.UI.WebControls.FormView> control properties that need to be persisted, even when the <xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=fullName> property is set to `false`.      > [!NOTE] >  This method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.FormView> control."
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "Returns the server control&quot;s current view state. If there is no view state associated with the control, this method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: FormView.SaveViewState()
  fullName: System.Web.UI.WebControls.FormView.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Saves the current view state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The SaveViewState method is a helper method called by the <xref:System.Web.UI.WebControls.FormView> control to save the state of the control."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "An <xref:System.Object> that contains the saved state of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.SelectedValue
  id: SelectedValue
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: SelectedValue
  nameWithType: FormView.SelectedValue
  fullName: System.Web.UI.WebControls.FormView.SelectedValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the data key value of the current record in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "When the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property is set, the <xref:System.Web.UI.WebControls.FormView> control automatically creates a <xref:System.Web.UI.WebControls.DataKey> object that contains the key/value pairs of the field or fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property for the current record. The <xref:System.Web.UI.WebControls.DataKey> object represents the primary key field or fields for the current record and is stored in the <xref:System.Web.UI.WebControls.FormView.DataKey%2A> property. Instead of using the <xref:System.Web.UI.WebControls.FormView.DataKey%2A> property to access the data key value, you can use the SelectedValue property as a shortcut.      > [!NOTE] >  When the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property lists multiple fields, this property returns the value of the first field listed."
  example:
  - "The following example demonstrates how to use the SelectedValue property to determine the value of the key field.  \n  \n [!code-cs[FormViewSelectedValue#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_824_1.aspx)]\n [!code-vb[FormViewSelectedValue#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_824_1.aspx)]"
  syntax:
    content: public object SelectedValue { get; }
    return:
      type: System.Object
      description: "The data key value of the current record in a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.SelectedValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.SetPageIndex(System.Int32)
  id: SetPageIndex(System.Int32)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: SetPageIndex(Int32)
  nameWithType: FormView.SetPageIndex(Int32)
  fullName: System.Web.UI.WebControls.FormView.SetPageIndex(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Sets the index of the currently displayed page in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  syntax:
    content: public void SetPageIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index to set."
  overload: System.Web.UI.WebControls.FormView.SetPageIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex
  id: System#Web#UI#IDataItemContainer#DataItemIndex
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.IDataItemContainer.DataItemIndex
  nameWithType: FormView.System.Web.UI.IDataItemContainer.DataItemIndex
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.IDataItemContainer.DataItemIndex
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.IDataItemContainer.DataItemIndex%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.IDataItemContainer> interface."
  syntax:
    content: int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    return:
      type: System.Int32
      description: "An object that represents the display index."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex
  id: System#Web#UI#IDataItemContainer#DisplayIndex
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.IDataItemContainer.DisplayIndex
  nameWithType: FormView.System.Web.UI.IDataItemContainer.DisplayIndex
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.IDataItemContainer.DisplayIndex
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.IDataItemContainer.DisplayIndex%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.IDataItemContainer> interface."
  syntax:
    content: int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    return:
      type: System.Int32
      description: "Always returns 0."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)
  id: System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String)
  nameWithType: FormView.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String)
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises events for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control when it posts back to the server."
  remarks: "The page calls the IPostBackEventHandler.RaisePostBackEvent method when a postback event occurs. This call occurs in the page life cycle after loading and change notification are complete, but before the page is rendered."
  syntax:
    content: void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);
    parameters:
    - id: eventArgument
      type: System.String
      description: "The argument for the event."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames
  id: System#Web#UI#WebControls#IDataBoundControl#DataKeyNames
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets an array that contains the names of the primary-key fields of the items that are displayed in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; set; }
    return:
      type: System.String[]
      description: "An array that contains the names of the primary-key fields of the items that are displayed in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember
  id: System#Web#UI#WebControls#IDataBoundControl#DataMember
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundControl.DataMember
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataMember
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataMember
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the name of the list of data items that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control binds to when the data source contains more than one list of data items."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; set; }
    return:
      type: System.String
      description: "The name of the list of data items that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control binds to."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource
  id: System#Web#UI#WebControls#IDataBoundControl#DataSource
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundControl.DataSource
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSource
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataSource
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the object that contains the list of data that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control retrieves."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; set; }
    return:
      type: System.Object
      description: "The object that contains the list of data that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control retrieves."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID
  id: System#Web#UI#WebControls#IDataBoundControl#DataSourceID
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundControl.DataSourceID
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceID
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the ID of the data source control that contains the list of data items that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control retrieves."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; set; }
    return:
      type: System.String
      description: "The ID of the data source control that contains the list of data items that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control retrieves."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject
  id: System#Web#UI#WebControls#IDataBoundControl#DataSourceObject
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the data source object that contains the list of data items that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control retrieves."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }
    return:
      type: System.Web.UI.IDataSource
      description: "The data source object that contains the list of data items that the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control retrieves."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey
  id: System#Web#UI#WebControls#IDataBoundItemControl#DataKey
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundItemControl.DataKey
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundItemControl.DataKey
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundItemControl.DataKey
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the object that represents the data-key value of the row in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey { get; }
    return:
      type: System.Web.UI.WebControls.DataKey
      description: "The object that represents the data-key value of the row in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode
  id: System#Web#UI#WebControls#IDataBoundItemControl#Mode
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IDataBoundItemControl.Mode
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundItemControl.Mode
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundItemControl.Mode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the current mode of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.FormView> instance is cast to an <xref:System.Web.UI.WebControls.IDataBoundControl> interface."
  syntax:
    content: System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { get; }
    return:
      type: System.Web.UI.WebControls.DataBoundControlMode
      description: "The current mode of the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)
  id: System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)
  isEii: true
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl)
  nameWithType: FormView.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl)
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determines the postback event options for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The IPostBackContainer.GetPostBackOptions method is a helper method that is called by the <xref:System.Web.UI.WebControls.FormView> control to create a <xref:System.Web.UI.PostBackOptions> object that contains the postback event options for the control. The <xref:System.Web.UI.PostBackOptions> object is typically used as a parameter for the <xref:System.Web.UI.Page.GetPostBackEventReference%2A> method."
  syntax:
    content: System.Web.UI.PostBackOptions IPostBackContainer.GetPostBackOptions (System.Web.UI.WebControls.IButtonControl buttonControl);
    parameters:
    - id: buttonControl
      type: System.Web.UI.WebControls.IButtonControl
      description: "The button control that posted the page back to the server."
    return:
      type: System.Web.UI.PostBackOptions
      description: "The postback event options for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The object contained in the <code>buttonControl</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Web.UI.WebControls.IButtonControl.CausesValidation*> property of <code>buttonControl</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.TagKey
  id: TagKey
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: TagKey
  nameWithType: FormView.TagKey
  fullName: System.Web.UI.WebControls.FormView.TagKey
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the <xref href=&quot;System.Web.UI.HtmlTextWriterTag&quot;></xref> value for the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "The TagKey property allows the output stream to write the appropriate HTML markup for the <xref:System.Web.UI.WebControls.FormView> control."
  syntax:
    content: protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }
    return:
      type: System.Web.UI.HtmlTextWriterTag
      description: "Always returns <xref uid=&quot;langword_csharp_HtmlTextWriterTag.Table&quot; name=&quot;HtmlTextWriterTag.Table&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.TagKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.TopPagerRow
  id: TopPagerRow
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: TopPagerRow
  nameWithType: FormView.TopPagerRow
  fullName: System.Web.UI.WebControls.FormView.TopPagerRow
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> object that represents the pager row displayed at the top of a <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "When paging is enabled (when the <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> property is set to `true`), an additional row called the pager row is automatically displayed in the <xref:System.Web.UI.WebControls.FormView> control. The pager row contains controls that allow the user to navigate to other records, and can be displayed at the top, the bottom, or both the top and bottom of the control. Use the TopPagerRow property to programmatically access the <xref:System.Web.UI.WebControls.FormViewRow> object that represents the top pager row in the <xref:System.Web.UI.WebControls.FormView> control.      > [!NOTE] >  The TopPagerRow property is available only after the <xref:System.Web.UI.WebControls.FormView> control creates the top pager row in the <xref:System.Web.UI.WebControls.FormView.ItemCreated> event.       This property is commonly used when you need to programmatically manipulate the top pager row, for example when adding custom content. Any modification to the TopPagerRow property must be performed after the <xref:System.Web.UI.WebControls.FormView> control has been bound to data; otherwise, the <xref:System.Web.UI.WebControls.FormView> control overwrites any changes."
  example:
  - "The following example demonstrates how to use the TopPagerRow property to access the pager row displayed at the top of a <xref:System.Web.UI.WebControls.FormView> control. The pager row is then updated with additional content.  \n  \n [!code-vb[FormViewTopPagerRow#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_408_1.aspx)]\n [!code-cs[FormViewTopPagerRow#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_408_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.FormViewRow TopPagerRow { get; }
    return:
      type: System.Web.UI.WebControls.FormViewRow
      description: "A <xref href=&quot;System.Web.UI.WebControls.FormViewRow&quot;></xref> that represents the top pager row in the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormView.TopPagerRow*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: FormView.TrackViewState()
  fullName: System.Web.UI.WebControls.FormView.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Marks the starting point at which to begin tracking and saving view-state changes to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "This method is overridden to mark the starting point at which to begin tracking and saving changes to the control as part of the control&quot;s view state."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.FormView.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)
  id: UpdateItem(System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: UpdateItem(Boolean)
  nameWithType: FormView.UpdateItem(Boolean)
  fullName: System.Web.UI.WebControls.FormView.UpdateItem(Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Updates the current record in the data source."
  remarks: "When the <xref:System.Web.UI.WebControls.FormView> control is in edit mode, use the UpdateItem method to programmatically update the current record in the data source. This method is commonly used when you need to update the current record from outside of the <xref:System.Web.UI.WebControls.FormView> control, such as from a different control on the page.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.FormView> control must be in edit mode when this method is called; otherwise, an <xref:System.Web.HttpException> is thrown.       To specify whether page validation is performed before the update operation, use the `causesValidation` parameter. Calling this method also raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> and <xref:System.Web.UI.WebControls.FormView.ItemUpdating> events."
  example:
  - "The following example demonstrates how to use the UpdateItem method to programmatically update the current record in a <xref:System.Web.UI.WebControls.FormView> control in the data source.  \n  \n [!code-vb[FormViewUpdateItem#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_32_1.aspx)]\n [!code-cs[FormViewUpdateItem#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_32_1.aspx)]"
  syntax:
    content: public virtual void UpdateItem (bool causesValidation);
    parameters:
    - id: causesValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to perform page validation when the method is called; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormView.UpdateItem*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "This method is called when the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is not in edit mode.       -or-       The <xref href=&quot;System.Web.UI.DataSourceView&quot;></xref> object associated with the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control is null."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormView.UpdateMethod
  id: UpdateMethod
  parent: System.Web.UI.WebControls.FormView
  langs:
  - csharp
  name: UpdateMethod
  nameWithType: FormView.UpdateMethod
  fullName: System.Web.UI.WebControls.FormView.UpdateMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the name of the method on the page that is called when the control performs an update operation."
  remarks: "For a tutorial series on using model binding with Web Forms, see [Model Binding and Web Forms](http://go.microsoft.com/fwlink/?LinkId=286117)."
  syntax:
    content: public virtual string UpdateMethod { get; set; }
    return:
      type: System.String
      description: "The name of the method on the page that is called when the control performs an update operation."
  overload: System.Web.UI.WebControls.FormView.UpdateMethod*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.CompositeDataBoundControl
  isExternal: false
  name: System.Web.UI.WebControls.CompositeDataBoundControl
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.FormView.#ctor
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FormView()
  nameWithType: FormView.FormView()
  fullName: System.Web.UI.WebControls.FormView.FormView()
- uid: System.Web.UI.WebControls.FormView.AllowPaging
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: AllowPaging
  nameWithType: FormView.AllowPaging
  fullName: System.Web.UI.WebControls.FormView.AllowPaging
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.FormView.BackImageUrl
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: BackImageUrl
  nameWithType: FormView.BackImageUrl
  fullName: System.Web.UI.WebControls.FormView.BackImageUrl
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.FormView.BottomPagerRow
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: BottomPagerRow
  nameWithType: FormView.BottomPagerRow
  fullName: System.Web.UI.WebControls.FormView.BottomPagerRow
- uid: System.Web.UI.WebControls.FormViewRow
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewRow
  nameWithType: FormViewRow
  fullName: System.Web.UI.WebControls.FormViewRow
- uid: System.Web.UI.WebControls.FormView.Caption
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: Caption
  nameWithType: FormView.Caption
  fullName: System.Web.UI.WebControls.FormView.Caption
- uid: System.Web.UI.WebControls.FormView.CaptionAlign
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CaptionAlign
  nameWithType: FormView.CaptionAlign
  fullName: System.Web.UI.WebControls.FormView.CaptionAlign
- uid: System.Web.UI.WebControls.TableCaptionAlign
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableCaptionAlign
  nameWithType: TableCaptionAlign
  fullName: System.Web.UI.WebControls.TableCaptionAlign
- uid: System.Web.UI.WebControls.FormView.CellPadding
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CellPadding
  nameWithType: FormView.CellPadding
  fullName: System.Web.UI.WebControls.FormView.CellPadding
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.FormView.CellSpacing
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CellSpacing
  nameWithType: FormView.CellSpacing
  fullName: System.Web.UI.WebControls.FormView.CellSpacing
- uid: System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ChangeMode(FormViewMode)
  nameWithType: FormView.ChangeMode(FormViewMode)
  fullName: System.Web.UI.WebControls.FormView.ChangeMode(FormViewMode)
- uid: System.Web.UI.WebControls.FormViewMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewMode
  nameWithType: FormViewMode
  fullName: System.Web.UI.WebControls.FormViewMode
- uid: System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateChildControls(IEnumerable,Boolean)
  nameWithType: FormView.CreateChildControls(IEnumerable,Boolean)
  fullName: System.Web.UI.WebControls.FormView.CreateChildControls(IEnumerable,Boolean)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.WebControls.FormView.CreateControlStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateControlStyle()
  nameWithType: FormView.CreateControlStyle()
  fullName: System.Web.UI.WebControls.FormView.CreateControlStyle()
- uid: System.Web.UI.WebControls.Style
  parent: System.Web.UI.WebControls
  isExternal: false
  name: Style
  nameWithType: Style
  fullName: System.Web.UI.WebControls.Style
- uid: System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateDataSourceSelectArguments()
  nameWithType: FormView.CreateDataSourceSelectArguments()
  fullName: System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments()
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateRow(Int32,DataControlRowType,DataControlRowState)
  nameWithType: FormView.CreateRow(Int32,DataControlRowType,DataControlRowState)
  fullName: System.Web.UI.WebControls.FormView.CreateRow(Int32,DataControlRowType,DataControlRowState)
- uid: System.Web.UI.WebControls.DataControlRowType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataControlRowType
  nameWithType: DataControlRowType
  fullName: System.Web.UI.WebControls.DataControlRowType
- uid: System.Web.UI.WebControls.DataControlRowState
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataControlRowState
  nameWithType: DataControlRowState
  fullName: System.Web.UI.WebControls.DataControlRowState
- uid: System.Web.UI.WebControls.FormView.CreateTable
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateTable()
  nameWithType: FormView.CreateTable()
  fullName: System.Web.UI.WebControls.FormView.CreateTable()
- uid: System.Web.UI.WebControls.Table
  parent: System.Web.UI.WebControls
  isExternal: false
  name: Table
  nameWithType: Table
  fullName: System.Web.UI.WebControls.Table
- uid: System.Web.UI.WebControls.FormView.CurrentMode
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CurrentMode
  nameWithType: FormView.CurrentMode
  fullName: System.Web.UI.WebControls.FormView.CurrentMode
- uid: System.Web.UI.WebControls.FormView.DataBind
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataBind()
  nameWithType: FormView.DataBind()
  fullName: System.Web.UI.WebControls.FormView.DataBind()
- uid: System.Web.UI.WebControls.FormView.DataItem
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataItem
  nameWithType: FormView.DataItem
  fullName: System.Web.UI.WebControls.FormView.DataItem
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.FormView.DataItemCount
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataItemCount
  nameWithType: FormView.DataItemCount
  fullName: System.Web.UI.WebControls.FormView.DataItemCount
- uid: System.Web.UI.WebControls.FormView.DataItemIndex
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataItemIndex
  nameWithType: FormView.DataItemIndex
  fullName: System.Web.UI.WebControls.FormView.DataItemIndex
- uid: System.Web.UI.WebControls.FormView.DataKey
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataKey
  nameWithType: FormView.DataKey
  fullName: System.Web.UI.WebControls.FormView.DataKey
- uid: System.Web.UI.WebControls.DataKey
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataKey
  nameWithType: DataKey
  fullName: System.Web.UI.WebControls.DataKey
- uid: System.Web.UI.WebControls.FormView.DataKeyNames
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataKeyNames
  nameWithType: FormView.DataKeyNames
  fullName: System.Web.UI.WebControls.FormView.DataKeyNames
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.WebControls.FormView.DefaultMode
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DefaultMode
  nameWithType: FormView.DefaultMode
  fullName: System.Web.UI.WebControls.FormView.DefaultMode
- uid: System.Web.UI.WebControls.FormView.DeleteItem
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DeleteItem()
  nameWithType: FormView.DeleteItem()
  fullName: System.Web.UI.WebControls.FormView.DeleteItem()
- uid: System.Web.UI.WebControls.FormView.DeleteMethod
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DeleteMethod
  nameWithType: FormView.DeleteMethod
  fullName: System.Web.UI.WebControls.FormView.DeleteMethod
- uid: System.Web.UI.WebControls.FormView.EditItemTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EditItemTemplate
  nameWithType: FormView.EditItemTemplate
  fullName: System.Web.UI.WebControls.FormView.EditItemTemplate
- uid: System.Web.UI.ITemplate
  parent: System.Web.UI
  isExternal: false
  name: ITemplate
  nameWithType: ITemplate
  fullName: System.Web.UI.ITemplate
- uid: System.Web.UI.WebControls.FormView.EditRowStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EditRowStyle
  nameWithType: FormView.EditRowStyle
  fullName: System.Web.UI.WebControls.FormView.EditRowStyle
- uid: System.Web.UI.WebControls.TableItemStyle
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableItemStyle
  nameWithType: TableItemStyle
  fullName: System.Web.UI.WebControls.TableItemStyle
- uid: System.Web.UI.WebControls.FormView.EmptyDataRowStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EmptyDataRowStyle
  nameWithType: FormView.EmptyDataRowStyle
  fullName: System.Web.UI.WebControls.FormView.EmptyDataRowStyle
- uid: System.Web.UI.WebControls.FormView.EmptyDataTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EmptyDataTemplate
  nameWithType: FormView.EmptyDataTemplate
  fullName: System.Web.UI.WebControls.FormView.EmptyDataTemplate
- uid: System.Web.UI.WebControls.FormView.EmptyDataText
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EmptyDataText
  nameWithType: FormView.EmptyDataText
  fullName: System.Web.UI.WebControls.FormView.EmptyDataText
- uid: System.Web.UI.WebControls.FormView.EnableModelValidation
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EnableModelValidation
  nameWithType: FormView.EnableModelValidation
  fullName: System.Web.UI.WebControls.FormView.EnableModelValidation
- uid: System.Web.UI.WebControls.FormView.EnsureDataBound
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EnsureDataBound()
  nameWithType: FormView.EnsureDataBound()
  fullName: System.Web.UI.WebControls.FormView.EnsureDataBound()
- uid: System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ExtractRowValues(IOrderedDictionary,Boolean)
  nameWithType: FormView.ExtractRowValues(IOrderedDictionary,Boolean)
  fullName: System.Web.UI.WebControls.FormView.ExtractRowValues(IOrderedDictionary,Boolean)
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.WebControls.FormView.FooterRow
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterRow
  nameWithType: FormView.FooterRow
  fullName: System.Web.UI.WebControls.FormView.FooterRow
- uid: System.Web.UI.WebControls.FormView.FooterStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterStyle
  nameWithType: FormView.FooterStyle
  fullName: System.Web.UI.WebControls.FormView.FooterStyle
- uid: System.Web.UI.WebControls.FormView.FooterTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterTemplate
  nameWithType: FormView.FooterTemplate
  fullName: System.Web.UI.WebControls.FormView.FooterTemplate
- uid: System.Web.UI.WebControls.FormView.FooterText
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterText
  nameWithType: FormView.FooterText
  fullName: System.Web.UI.WebControls.FormView.FooterText
- uid: System.Web.UI.WebControls.FormView.GridLines
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: GridLines
  nameWithType: FormView.GridLines
  fullName: System.Web.UI.WebControls.FormView.GridLines
- uid: System.Web.UI.WebControls.GridLines
  parent: System.Web.UI.WebControls
  isExternal: false
  name: GridLines
  nameWithType: GridLines
  fullName: System.Web.UI.WebControls.GridLines
- uid: System.Web.UI.WebControls.FormView.HeaderRow
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderRow
  nameWithType: FormView.HeaderRow
  fullName: System.Web.UI.WebControls.FormView.HeaderRow
- uid: System.Web.UI.WebControls.FormView.HeaderStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderStyle
  nameWithType: FormView.HeaderStyle
  fullName: System.Web.UI.WebControls.FormView.HeaderStyle
- uid: System.Web.UI.WebControls.FormView.HeaderTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderTemplate
  nameWithType: FormView.HeaderTemplate
  fullName: System.Web.UI.WebControls.FormView.HeaderTemplate
- uid: System.Web.UI.WebControls.FormView.HeaderText
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderText
  nameWithType: FormView.HeaderText
  fullName: System.Web.UI.WebControls.FormView.HeaderText
- uid: System.Web.UI.WebControls.FormView.HorizontalAlign
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HorizontalAlign
  nameWithType: FormView.HorizontalAlign
  fullName: System.Web.UI.WebControls.FormView.HorizontalAlign
- uid: System.Web.UI.WebControls.HorizontalAlign
  parent: System.Web.UI.WebControls
  isExternal: false
  name: HorizontalAlign
  nameWithType: HorizontalAlign
  fullName: System.Web.UI.WebControls.HorizontalAlign
- uid: System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InitializePager(FormViewRow,PagedDataSource)
  nameWithType: FormView.InitializePager(FormViewRow,PagedDataSource)
  fullName: System.Web.UI.WebControls.FormView.InitializePager(FormViewRow,PagedDataSource)
- uid: System.Web.UI.WebControls.PagedDataSource
  parent: System.Web.UI.WebControls
  isExternal: false
  name: PagedDataSource
  nameWithType: PagedDataSource
  fullName: System.Web.UI.WebControls.PagedDataSource
- uid: System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InitializeRow(FormViewRow)
  nameWithType: FormView.InitializeRow(FormViewRow)
  fullName: System.Web.UI.WebControls.FormView.InitializeRow(FormViewRow)
- uid: System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertItem(Boolean)
  nameWithType: FormView.InsertItem(Boolean)
  fullName: System.Web.UI.WebControls.FormView.InsertItem(Boolean)
- uid: System.Web.UI.WebControls.FormView.InsertItemTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertItemTemplate
  nameWithType: FormView.InsertItemTemplate
  fullName: System.Web.UI.WebControls.FormView.InsertItemTemplate
- uid: System.Web.UI.WebControls.FormView.InsertMethod
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertMethod
  nameWithType: FormView.InsertMethod
  fullName: System.Web.UI.WebControls.FormView.InsertMethod
- uid: System.Web.UI.WebControls.FormView.InsertRowStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertRowStyle
  nameWithType: FormView.InsertRowStyle
  fullName: System.Web.UI.WebControls.FormView.InsertRowStyle
- uid: System.Web.UI.WebControls.FormView.IsBindableType(System.Type)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: IsBindableType(Type)
  nameWithType: FormView.IsBindableType(Type)
  fullName: System.Web.UI.WebControls.FormView.IsBindableType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.FormView.ItemCommand
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemCommand
  nameWithType: FormView.ItemCommand
  fullName: System.Web.UI.WebControls.FormView.ItemCommand
- uid: System.Web.UI.WebControls.FormViewCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewCommandEventHandler
  nameWithType: FormViewCommandEventHandler
  fullName: System.Web.UI.WebControls.FormViewCommandEventHandler
- uid: System.Web.UI.WebControls.FormView.ItemCreated
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemCreated
  nameWithType: FormView.ItemCreated
  fullName: System.Web.UI.WebControls.FormView.ItemCreated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.WebControls.FormView.ItemDeleted
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemDeleted
  nameWithType: FormView.ItemDeleted
  fullName: System.Web.UI.WebControls.FormView.ItemDeleted
- uid: System.Web.UI.WebControls.FormViewDeletedEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewDeletedEventHandler
  nameWithType: FormViewDeletedEventHandler
  fullName: System.Web.UI.WebControls.FormViewDeletedEventHandler
- uid: System.Web.UI.WebControls.FormView.ItemDeleting
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemDeleting
  nameWithType: FormView.ItemDeleting
  fullName: System.Web.UI.WebControls.FormView.ItemDeleting
- uid: System.Web.UI.WebControls.FormViewDeleteEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewDeleteEventHandler
  nameWithType: FormViewDeleteEventHandler
  fullName: System.Web.UI.WebControls.FormViewDeleteEventHandler
- uid: System.Web.UI.WebControls.FormView.ItemInserted
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemInserted
  nameWithType: FormView.ItemInserted
  fullName: System.Web.UI.WebControls.FormView.ItemInserted
- uid: System.Web.UI.WebControls.FormViewInsertedEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewInsertedEventHandler
  nameWithType: FormViewInsertedEventHandler
  fullName: System.Web.UI.WebControls.FormViewInsertedEventHandler
- uid: System.Web.UI.WebControls.FormView.ItemInserting
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemInserting
  nameWithType: FormView.ItemInserting
  fullName: System.Web.UI.WebControls.FormView.ItemInserting
- uid: System.Web.UI.WebControls.FormViewInsertEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewInsertEventHandler
  nameWithType: FormViewInsertEventHandler
  fullName: System.Web.UI.WebControls.FormViewInsertEventHandler
- uid: System.Web.UI.WebControls.FormView.ItemTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemTemplate
  nameWithType: FormView.ItemTemplate
  fullName: System.Web.UI.WebControls.FormView.ItemTemplate
- uid: System.Web.UI.WebControls.FormView.ItemUpdated
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemUpdated
  nameWithType: FormView.ItemUpdated
  fullName: System.Web.UI.WebControls.FormView.ItemUpdated
- uid: System.Web.UI.WebControls.FormViewUpdatedEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewUpdatedEventHandler
  nameWithType: FormViewUpdatedEventHandler
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventHandler
- uid: System.Web.UI.WebControls.FormView.ItemUpdating
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemUpdating
  nameWithType: FormView.ItemUpdating
  fullName: System.Web.UI.WebControls.FormView.ItemUpdating
- uid: System.Web.UI.WebControls.FormViewUpdateEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewUpdateEventHandler
  nameWithType: FormViewUpdateEventHandler
  fullName: System.Web.UI.WebControls.FormViewUpdateEventHandler
- uid: System.Web.UI.WebControls.FormView.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: FormView.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.FormView.LoadControlState(Object)
- uid: System.Web.UI.WebControls.FormView.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: FormView.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.FormView.LoadViewState(Object)
- uid: System.Web.UI.WebControls.FormView.ModeChanged
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ModeChanged
  nameWithType: FormView.ModeChanged
  fullName: System.Web.UI.WebControls.FormView.ModeChanged
- uid: System.Web.UI.WebControls.FormView.ModeChanging
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ModeChanging
  nameWithType: FormView.ModeChanging
  fullName: System.Web.UI.WebControls.FormView.ModeChanging
- uid: System.Web.UI.WebControls.FormViewModeEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewModeEventHandler
  nameWithType: FormViewModeEventHandler
  fullName: System.Web.UI.WebControls.FormViewModeEventHandler
- uid: System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ModifiedOuterTableStylePropertyName()
  nameWithType: FormView.ModifiedOuterTableStylePropertyName()
  fullName: System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName()
- uid: System.Web.UI.WebControls.FormView.OnBubbleEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnBubbleEvent(Object,EventArgs)
  nameWithType: FormView.OnBubbleEvent(Object,EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnBubbleEvent(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: FormView.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnInit(EventArgs)
- uid: System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemCommand(FormViewCommandEventArgs)
  nameWithType: FormView.OnItemCommand(FormViewCommandEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemCommand(FormViewCommandEventArgs)
- uid: System.Web.UI.WebControls.FormViewCommandEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewCommandEventArgs
  nameWithType: FormViewCommandEventArgs
  fullName: System.Web.UI.WebControls.FormViewCommandEventArgs
- uid: System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemCreated(EventArgs)
  nameWithType: FormView.OnItemCreated(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemCreated(EventArgs)
- uid: System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemDeleted(FormViewDeletedEventArgs)
  nameWithType: FormView.OnItemDeleted(FormViewDeletedEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemDeleted(FormViewDeletedEventArgs)
- uid: System.Web.UI.WebControls.FormViewDeletedEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewDeletedEventArgs
  nameWithType: FormViewDeletedEventArgs
  fullName: System.Web.UI.WebControls.FormViewDeletedEventArgs
- uid: System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemDeleting(FormViewDeleteEventArgs)
  nameWithType: FormView.OnItemDeleting(FormViewDeleteEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemDeleting(FormViewDeleteEventArgs)
- uid: System.Web.UI.WebControls.FormViewDeleteEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewDeleteEventArgs
  nameWithType: FormViewDeleteEventArgs
  fullName: System.Web.UI.WebControls.FormViewDeleteEventArgs
- uid: System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemInserted(FormViewInsertedEventArgs)
  nameWithType: FormView.OnItemInserted(FormViewInsertedEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemInserted(FormViewInsertedEventArgs)
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewInsertedEventArgs
  nameWithType: FormViewInsertedEventArgs
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs
- uid: System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemInserting(FormViewInsertEventArgs)
  nameWithType: FormView.OnItemInserting(FormViewInsertEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemInserting(FormViewInsertEventArgs)
- uid: System.Web.UI.WebControls.FormViewInsertEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewInsertEventArgs
  nameWithType: FormViewInsertEventArgs
  fullName: System.Web.UI.WebControls.FormViewInsertEventArgs
- uid: System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemUpdated(FormViewUpdatedEventArgs)
  nameWithType: FormView.OnItemUpdated(FormViewUpdatedEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemUpdated(FormViewUpdatedEventArgs)
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewUpdatedEventArgs
  nameWithType: FormViewUpdatedEventArgs
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs
- uid: System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemUpdating(FormViewUpdateEventArgs)
  nameWithType: FormView.OnItemUpdating(FormViewUpdateEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnItemUpdating(FormViewUpdateEventArgs)
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewUpdateEventArgs
  nameWithType: FormViewUpdateEventArgs
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs
- uid: System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnModeChanged(EventArgs)
  nameWithType: FormView.OnModeChanged(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnModeChanged(EventArgs)
- uid: System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnModeChanging(FormViewModeEventArgs)
  nameWithType: FormView.OnModeChanging(FormViewModeEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnModeChanging(FormViewModeEventArgs)
- uid: System.Web.UI.WebControls.FormViewModeEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewModeEventArgs
  nameWithType: FormViewModeEventArgs
  fullName: System.Web.UI.WebControls.FormViewModeEventArgs
- uid: System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnPageIndexChanged(EventArgs)
  nameWithType: FormView.OnPageIndexChanged(EventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnPageIndexChanged(EventArgs)
- uid: System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnPageIndexChanging(FormViewPageEventArgs)
  nameWithType: FormView.OnPageIndexChanging(FormViewPageEventArgs)
  fullName: System.Web.UI.WebControls.FormView.OnPageIndexChanging(FormViewPageEventArgs)
- uid: System.Web.UI.WebControls.FormViewPageEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewPageEventArgs
  nameWithType: FormViewPageEventArgs
  fullName: System.Web.UI.WebControls.FormViewPageEventArgs
- uid: System.Web.UI.WebControls.FormView.PageCount
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PageCount
  nameWithType: FormView.PageCount
  fullName: System.Web.UI.WebControls.FormView.PageCount
- uid: System.Web.UI.WebControls.FormView.PageIndex
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PageIndex
  nameWithType: FormView.PageIndex
  fullName: System.Web.UI.WebControls.FormView.PageIndex
- uid: System.Web.UI.WebControls.FormView.PageIndexChanged
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PageIndexChanged
  nameWithType: FormView.PageIndexChanged
  fullName: System.Web.UI.WebControls.FormView.PageIndexChanged
- uid: System.Web.UI.WebControls.FormView.PageIndexChanging
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PageIndexChanging
  nameWithType: FormView.PageIndexChanging
  fullName: System.Web.UI.WebControls.FormView.PageIndexChanging
- uid: System.Web.UI.WebControls.FormViewPageEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: FormViewPageEventHandler
  nameWithType: FormViewPageEventHandler
  fullName: System.Web.UI.WebControls.FormViewPageEventHandler
- uid: System.Web.UI.WebControls.FormView.PagerSettings
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PagerSettings
  nameWithType: FormView.PagerSettings
  fullName: System.Web.UI.WebControls.FormView.PagerSettings
- uid: System.Web.UI.WebControls.PagerSettings
  parent: System.Web.UI.WebControls
  isExternal: false
  name: PagerSettings
  nameWithType: PagerSettings
  fullName: System.Web.UI.WebControls.PagerSettings
- uid: System.Web.UI.WebControls.FormView.PagerStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PagerStyle
  nameWithType: FormView.PagerStyle
  fullName: System.Web.UI.WebControls.FormView.PagerStyle
- uid: System.Web.UI.WebControls.FormView.PagerTemplate
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PagerTemplate
  nameWithType: FormView.PagerTemplate
  fullName: System.Web.UI.WebControls.FormView.PagerTemplate
- uid: System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PerformDataBinding(IEnumerable)
  nameWithType: FormView.PerformDataBinding(IEnumerable)
  fullName: System.Web.UI.WebControls.FormView.PerformDataBinding(IEnumerable)
- uid: System.Web.UI.WebControls.FormView.PrepareControlHierarchy
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PrepareControlHierarchy()
  nameWithType: FormView.PrepareControlHierarchy()
  fullName: System.Web.UI.WebControls.FormView.PrepareControlHierarchy()
- uid: System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: RaisePostBackEvent(String)
  nameWithType: FormView.RaisePostBackEvent(String)
  fullName: System.Web.UI.WebControls.FormView.RaisePostBackEvent(String)
- uid: System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: FormView.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.FormView.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.FormView.RenderOuterTable
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: RenderOuterTable
  nameWithType: FormView.RenderOuterTable
  fullName: System.Web.UI.WebControls.FormView.RenderOuterTable
- uid: System.Web.UI.WebControls.FormView.Row
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: Row
  nameWithType: FormView.Row
  fullName: System.Web.UI.WebControls.FormView.Row
- uid: System.Web.UI.WebControls.FormView.RowStyle
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: RowStyle
  nameWithType: FormView.RowStyle
  fullName: System.Web.UI.WebControls.FormView.RowStyle
- uid: System.Web.UI.WebControls.FormView.SaveControlState
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SaveControlState()
  nameWithType: FormView.SaveControlState()
  fullName: System.Web.UI.WebControls.FormView.SaveControlState()
- uid: System.Web.UI.WebControls.FormView.SaveViewState
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SaveViewState()
  nameWithType: FormView.SaveViewState()
  fullName: System.Web.UI.WebControls.FormView.SaveViewState()
- uid: System.Web.UI.WebControls.FormView.SelectedValue
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SelectedValue
  nameWithType: FormView.SelectedValue
  fullName: System.Web.UI.WebControls.FormView.SelectedValue
- uid: System.Web.UI.WebControls.FormView.SetPageIndex(System.Int32)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SetPageIndex(Int32)
  nameWithType: FormView.SetPageIndex(Int32)
  fullName: System.Web.UI.WebControls.FormView.SetPageIndex(Int32)
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.IDataItemContainer.DataItemIndex
  nameWithType: FormView.System.Web.UI.IDataItemContainer.DataItemIndex
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.IDataItemContainer.DataItemIndex
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.IDataItemContainer.DisplayIndex
  nameWithType: FormView.System.Web.UI.IDataItemContainer.DisplayIndex
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.IDataItemContainer.DisplayIndex
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String)
  nameWithType: FormView.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String)
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String)
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataMember
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataMember
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataMember
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataSource
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSource
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataSource
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataSourceID
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceID
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceID
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
- uid: System.Web.UI.IDataSource
  parent: System.Web.UI
  isExternal: false
  name: IDataSource
  nameWithType: IDataSource
  fullName: System.Web.UI.IDataSource
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundItemControl.DataKey
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundItemControl.DataKey
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundItemControl.DataKey
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundItemControl.Mode
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundItemControl.Mode
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IDataBoundItemControl.Mode
- uid: System.Web.UI.WebControls.DataBoundControlMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataBoundControlMode
  nameWithType: DataBoundControlMode
  fullName: System.Web.UI.WebControls.DataBoundControlMode
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl)
  nameWithType: FormView.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl)
  fullName: System.Web.UI.WebControls.FormView.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl)
- uid: System.Web.UI.PostBackOptions
  parent: System.Web.UI
  isExternal: false
  name: PostBackOptions
  nameWithType: PostBackOptions
  fullName: System.Web.UI.PostBackOptions
- uid: System.Web.UI.WebControls.IButtonControl
  parent: System.Web.UI.WebControls
  isExternal: false
  name: IButtonControl
  nameWithType: IButtonControl
  fullName: System.Web.UI.WebControls.IButtonControl
- uid: System.Web.UI.WebControls.FormView.TagKey
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: TagKey
  nameWithType: FormView.TagKey
  fullName: System.Web.UI.WebControls.FormView.TagKey
- uid: System.Web.UI.HtmlTextWriterTag
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriterTag
  nameWithType: HtmlTextWriterTag
  fullName: System.Web.UI.HtmlTextWriterTag
- uid: System.Web.UI.WebControls.FormView.TopPagerRow
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: TopPagerRow
  nameWithType: FormView.TopPagerRow
  fullName: System.Web.UI.WebControls.FormView.TopPagerRow
- uid: System.Web.UI.WebControls.FormView.TrackViewState
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: TrackViewState()
  nameWithType: FormView.TrackViewState()
  fullName: System.Web.UI.WebControls.FormView.TrackViewState()
- uid: System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: UpdateItem(Boolean)
  nameWithType: FormView.UpdateItem(Boolean)
  fullName: System.Web.UI.WebControls.FormView.UpdateItem(Boolean)
- uid: System.Web.UI.WebControls.FormView.UpdateMethod
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: UpdateMethod
  nameWithType: FormView.UpdateMethod
  fullName: System.Web.UI.WebControls.FormView.UpdateMethod
- uid: System.Web.UI.WebControls.FormView.#ctor*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FormView
  nameWithType: FormView.FormView
- uid: System.Web.UI.WebControls.FormView.AllowPaging*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: AllowPaging
  nameWithType: FormView.AllowPaging
- uid: System.Web.UI.WebControls.FormView.BackImageUrl*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: BackImageUrl
  nameWithType: FormView.BackImageUrl
- uid: System.Web.UI.WebControls.FormView.BottomPagerRow*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: BottomPagerRow
  nameWithType: FormView.BottomPagerRow
- uid: System.Web.UI.WebControls.FormView.Caption*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: Caption
  nameWithType: FormView.Caption
- uid: System.Web.UI.WebControls.FormView.CaptionAlign*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CaptionAlign
  nameWithType: FormView.CaptionAlign
- uid: System.Web.UI.WebControls.FormView.CellPadding*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CellPadding
  nameWithType: FormView.CellPadding
- uid: System.Web.UI.WebControls.FormView.CellSpacing*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CellSpacing
  nameWithType: FormView.CellSpacing
- uid: System.Web.UI.WebControls.FormView.ChangeMode*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ChangeMode
  nameWithType: FormView.ChangeMode
- uid: System.Web.UI.WebControls.FormView.CreateChildControls*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateChildControls
  nameWithType: FormView.CreateChildControls
- uid: System.Web.UI.WebControls.FormView.CreateControlStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateControlStyle
  nameWithType: FormView.CreateControlStyle
- uid: System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateDataSourceSelectArguments
  nameWithType: FormView.CreateDataSourceSelectArguments
- uid: System.Web.UI.WebControls.FormView.CreateRow*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateRow
  nameWithType: FormView.CreateRow
- uid: System.Web.UI.WebControls.FormView.CreateTable*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CreateTable
  nameWithType: FormView.CreateTable
- uid: System.Web.UI.WebControls.FormView.CurrentMode*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: CurrentMode
  nameWithType: FormView.CurrentMode
- uid: System.Web.UI.WebControls.FormView.DataBind*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataBind
  nameWithType: FormView.DataBind
- uid: System.Web.UI.WebControls.FormView.DataItem*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataItem
  nameWithType: FormView.DataItem
- uid: System.Web.UI.WebControls.FormView.DataItemCount*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataItemCount
  nameWithType: FormView.DataItemCount
- uid: System.Web.UI.WebControls.FormView.DataItemIndex*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataItemIndex
  nameWithType: FormView.DataItemIndex
- uid: System.Web.UI.WebControls.FormView.DataKey*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataKey
  nameWithType: FormView.DataKey
- uid: System.Web.UI.WebControls.FormView.DataKeyNames*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DataKeyNames
  nameWithType: FormView.DataKeyNames
- uid: System.Web.UI.WebControls.FormView.DefaultMode*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DefaultMode
  nameWithType: FormView.DefaultMode
- uid: System.Web.UI.WebControls.FormView.DeleteItem*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DeleteItem
  nameWithType: FormView.DeleteItem
- uid: System.Web.UI.WebControls.FormView.DeleteMethod*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: DeleteMethod
  nameWithType: FormView.DeleteMethod
- uid: System.Web.UI.WebControls.FormView.EditItemTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EditItemTemplate
  nameWithType: FormView.EditItemTemplate
- uid: System.Web.UI.WebControls.FormView.EditRowStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EditRowStyle
  nameWithType: FormView.EditRowStyle
- uid: System.Web.UI.WebControls.FormView.EmptyDataRowStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EmptyDataRowStyle
  nameWithType: FormView.EmptyDataRowStyle
- uid: System.Web.UI.WebControls.FormView.EmptyDataTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EmptyDataTemplate
  nameWithType: FormView.EmptyDataTemplate
- uid: System.Web.UI.WebControls.FormView.EmptyDataText*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EmptyDataText
  nameWithType: FormView.EmptyDataText
- uid: System.Web.UI.WebControls.FormView.EnableModelValidation*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EnableModelValidation
  nameWithType: FormView.EnableModelValidation
- uid: System.Web.UI.WebControls.FormView.EnsureDataBound*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: EnsureDataBound
  nameWithType: FormView.EnsureDataBound
- uid: System.Web.UI.WebControls.FormView.ExtractRowValues*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ExtractRowValues
  nameWithType: FormView.ExtractRowValues
- uid: System.Web.UI.WebControls.FormView.FooterRow*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterRow
  nameWithType: FormView.FooterRow
- uid: System.Web.UI.WebControls.FormView.FooterStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterStyle
  nameWithType: FormView.FooterStyle
- uid: System.Web.UI.WebControls.FormView.FooterTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterTemplate
  nameWithType: FormView.FooterTemplate
- uid: System.Web.UI.WebControls.FormView.FooterText*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: FooterText
  nameWithType: FormView.FooterText
- uid: System.Web.UI.WebControls.FormView.GridLines*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: GridLines
  nameWithType: FormView.GridLines
- uid: System.Web.UI.WebControls.FormView.HeaderRow*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderRow
  nameWithType: FormView.HeaderRow
- uid: System.Web.UI.WebControls.FormView.HeaderStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderStyle
  nameWithType: FormView.HeaderStyle
- uid: System.Web.UI.WebControls.FormView.HeaderTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderTemplate
  nameWithType: FormView.HeaderTemplate
- uid: System.Web.UI.WebControls.FormView.HeaderText*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HeaderText
  nameWithType: FormView.HeaderText
- uid: System.Web.UI.WebControls.FormView.HorizontalAlign*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: HorizontalAlign
  nameWithType: FormView.HorizontalAlign
- uid: System.Web.UI.WebControls.FormView.InitializePager*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InitializePager
  nameWithType: FormView.InitializePager
- uid: System.Web.UI.WebControls.FormView.InitializeRow*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InitializeRow
  nameWithType: FormView.InitializeRow
- uid: System.Web.UI.WebControls.FormView.InsertItem*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertItem
  nameWithType: FormView.InsertItem
- uid: System.Web.UI.WebControls.FormView.InsertItemTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertItemTemplate
  nameWithType: FormView.InsertItemTemplate
- uid: System.Web.UI.WebControls.FormView.InsertMethod*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertMethod
  nameWithType: FormView.InsertMethod
- uid: System.Web.UI.WebControls.FormView.InsertRowStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: InsertRowStyle
  nameWithType: FormView.InsertRowStyle
- uid: System.Web.UI.WebControls.FormView.IsBindableType*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: IsBindableType
  nameWithType: FormView.IsBindableType
- uid: System.Web.UI.WebControls.FormView.ItemTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ItemTemplate
  nameWithType: FormView.ItemTemplate
- uid: System.Web.UI.WebControls.FormView.LoadControlState*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: LoadControlState
  nameWithType: FormView.LoadControlState
- uid: System.Web.UI.WebControls.FormView.LoadViewState*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: LoadViewState
  nameWithType: FormView.LoadViewState
- uid: System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: ModifiedOuterTableStylePropertyName
  nameWithType: FormView.ModifiedOuterTableStylePropertyName
- uid: System.Web.UI.WebControls.FormView.OnBubbleEvent*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnBubbleEvent
  nameWithType: FormView.OnBubbleEvent
- uid: System.Web.UI.WebControls.FormView.OnInit*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnInit
  nameWithType: FormView.OnInit
- uid: System.Web.UI.WebControls.FormView.OnItemCommand*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemCommand
  nameWithType: FormView.OnItemCommand
- uid: System.Web.UI.WebControls.FormView.OnItemCreated*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemCreated
  nameWithType: FormView.OnItemCreated
- uid: System.Web.UI.WebControls.FormView.OnItemDeleted*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemDeleted
  nameWithType: FormView.OnItemDeleted
- uid: System.Web.UI.WebControls.FormView.OnItemDeleting*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemDeleting
  nameWithType: FormView.OnItemDeleting
- uid: System.Web.UI.WebControls.FormView.OnItemInserted*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemInserted
  nameWithType: FormView.OnItemInserted
- uid: System.Web.UI.WebControls.FormView.OnItemInserting*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemInserting
  nameWithType: FormView.OnItemInserting
- uid: System.Web.UI.WebControls.FormView.OnItemUpdated*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemUpdated
  nameWithType: FormView.OnItemUpdated
- uid: System.Web.UI.WebControls.FormView.OnItemUpdating*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnItemUpdating
  nameWithType: FormView.OnItemUpdating
- uid: System.Web.UI.WebControls.FormView.OnModeChanged*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnModeChanged
  nameWithType: FormView.OnModeChanged
- uid: System.Web.UI.WebControls.FormView.OnModeChanging*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnModeChanging
  nameWithType: FormView.OnModeChanging
- uid: System.Web.UI.WebControls.FormView.OnPageIndexChanged*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnPageIndexChanged
  nameWithType: FormView.OnPageIndexChanged
- uid: System.Web.UI.WebControls.FormView.OnPageIndexChanging*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: OnPageIndexChanging
  nameWithType: FormView.OnPageIndexChanging
- uid: System.Web.UI.WebControls.FormView.PageCount*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PageCount
  nameWithType: FormView.PageCount
- uid: System.Web.UI.WebControls.FormView.PageIndex*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PageIndex
  nameWithType: FormView.PageIndex
- uid: System.Web.UI.WebControls.FormView.PagerSettings*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PagerSettings
  nameWithType: FormView.PagerSettings
- uid: System.Web.UI.WebControls.FormView.PagerStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PagerStyle
  nameWithType: FormView.PagerStyle
- uid: System.Web.UI.WebControls.FormView.PagerTemplate*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PagerTemplate
  nameWithType: FormView.PagerTemplate
- uid: System.Web.UI.WebControls.FormView.PerformDataBinding*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PerformDataBinding
  nameWithType: FormView.PerformDataBinding
- uid: System.Web.UI.WebControls.FormView.PrepareControlHierarchy*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: PrepareControlHierarchy
  nameWithType: FormView.PrepareControlHierarchy
- uid: System.Web.UI.WebControls.FormView.RaisePostBackEvent*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: RaisePostBackEvent
  nameWithType: FormView.RaisePostBackEvent
- uid: System.Web.UI.WebControls.FormView.Render*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: Render
  nameWithType: FormView.Render
- uid: System.Web.UI.WebControls.FormView.RenderOuterTable*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: RenderOuterTable
  nameWithType: FormView.RenderOuterTable
- uid: System.Web.UI.WebControls.FormView.Row*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: Row
  nameWithType: FormView.Row
- uid: System.Web.UI.WebControls.FormView.RowStyle*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: RowStyle
  nameWithType: FormView.RowStyle
- uid: System.Web.UI.WebControls.FormView.SaveControlState*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SaveControlState
  nameWithType: FormView.SaveControlState
- uid: System.Web.UI.WebControls.FormView.SaveViewState*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SaveViewState
  nameWithType: FormView.SaveViewState
- uid: System.Web.UI.WebControls.FormView.SelectedValue*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SelectedValue
  nameWithType: FormView.SelectedValue
- uid: System.Web.UI.WebControls.FormView.SetPageIndex*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: SetPageIndex
  nameWithType: FormView.SetPageIndex
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.IDataItemContainer.DataItemIndex
  nameWithType: FormView.System.Web.UI.IDataItemContainer.DataItemIndex
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.IDataItemContainer.DisplayIndex
  nameWithType: FormView.System.Web.UI.IDataItemContainer.DisplayIndex
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.IPostBackEventHandler.RaisePostBackEvent
  nameWithType: FormView.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataKeyNames
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataMember
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataMember
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataSource
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSource
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataSourceID
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceID
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundControl.DataSourceObject
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundItemControl.DataKey
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundItemControl.DataKey
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IDataBoundItemControl.Mode
  nameWithType: FormView.System.Web.UI.WebControls.IDataBoundItemControl.Mode
- uid: System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions
  nameWithType: FormView.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions
- uid: System.Web.UI.WebControls.FormView.TagKey*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: TagKey
  nameWithType: FormView.TagKey
- uid: System.Web.UI.WebControls.FormView.TopPagerRow*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: TopPagerRow
  nameWithType: FormView.TopPagerRow
- uid: System.Web.UI.WebControls.FormView.TrackViewState*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: TrackViewState
  nameWithType: FormView.TrackViewState
- uid: System.Web.UI.WebControls.FormView.UpdateItem*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: UpdateItem
  nameWithType: FormView.UpdateItem
- uid: System.Web.UI.WebControls.FormView.UpdateMethod*
  parent: System.Web.UI.WebControls.FormView
  isExternal: false
  name: UpdateMethod
  nameWithType: FormView.UpdateMethod
