### YamlMime:ManagedReference
items:
- uid: System.Windows.ContentElement
  id: ContentElement
  children:
  - System.Windows.ContentElement.#ctor
  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.AllowDrop
  - System.Windows.ContentElement.AllowDropProperty
  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.ContentElement.AreAnyTouchesCaptured
  - System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  - System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  - System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  - System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.ContentElement.AreAnyTouchesOver
  - System.Windows.ContentElement.AreAnyTouchesOverProperty
  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.ContentElement.CaptureMouse
  - System.Windows.ContentElement.CaptureStylus
  - System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.ContentElement.CommandBindings
  - System.Windows.ContentElement.DragEnter
  - System.Windows.ContentElement.DragEnterEvent
  - System.Windows.ContentElement.DragLeave
  - System.Windows.ContentElement.DragLeaveEvent
  - System.Windows.ContentElement.DragOver
  - System.Windows.ContentElement.DragOverEvent
  - System.Windows.ContentElement.Drop
  - System.Windows.ContentElement.DropEvent
  - System.Windows.ContentElement.Focus
  - System.Windows.ContentElement.Focusable
  - System.Windows.ContentElement.FocusableChanged
  - System.Windows.ContentElement.FocusableProperty
  - System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.ContentElement.GetUIParentCore
  - System.Windows.ContentElement.GiveFeedback
  - System.Windows.ContentElement.GiveFeedbackEvent
  - System.Windows.ContentElement.GotFocus
  - System.Windows.ContentElement.GotFocusEvent
  - System.Windows.ContentElement.GotKeyboardFocus
  - System.Windows.ContentElement.GotKeyboardFocusEvent
  - System.Windows.ContentElement.GotMouseCapture
  - System.Windows.ContentElement.GotMouseCaptureEvent
  - System.Windows.ContentElement.GotStylusCapture
  - System.Windows.ContentElement.GotStylusCaptureEvent
  - System.Windows.ContentElement.GotTouchCapture
  - System.Windows.ContentElement.GotTouchCaptureEvent
  - System.Windows.ContentElement.HasAnimatedProperties
  - System.Windows.ContentElement.InputBindings
  - System.Windows.ContentElement.IsEnabled
  - System.Windows.ContentElement.IsEnabledChanged
  - System.Windows.ContentElement.IsEnabledCore
  - System.Windows.ContentElement.IsEnabledProperty
  - System.Windows.ContentElement.IsFocused
  - System.Windows.ContentElement.IsFocusedProperty
  - System.Windows.ContentElement.IsInputMethodEnabled
  - System.Windows.ContentElement.IsKeyboardFocused
  - System.Windows.ContentElement.IsKeyboardFocusedChanged
  - System.Windows.ContentElement.IsKeyboardFocusedProperty
  - System.Windows.ContentElement.IsKeyboardFocusWithin
  - System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  - System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  - System.Windows.ContentElement.IsMouseCaptured
  - System.Windows.ContentElement.IsMouseCapturedChanged
  - System.Windows.ContentElement.IsMouseCapturedProperty
  - System.Windows.ContentElement.IsMouseCaptureWithin
  - System.Windows.ContentElement.IsMouseCaptureWithinChanged
  - System.Windows.ContentElement.IsMouseCaptureWithinProperty
  - System.Windows.ContentElement.IsMouseDirectlyOver
  - System.Windows.ContentElement.IsMouseDirectlyOverChanged
  - System.Windows.ContentElement.IsMouseDirectlyOverProperty
  - System.Windows.ContentElement.IsMouseOver
  - System.Windows.ContentElement.IsMouseOverProperty
  - System.Windows.ContentElement.IsStylusCaptured
  - System.Windows.ContentElement.IsStylusCapturedChanged
  - System.Windows.ContentElement.IsStylusCapturedProperty
  - System.Windows.ContentElement.IsStylusCaptureWithin
  - System.Windows.ContentElement.IsStylusCaptureWithinChanged
  - System.Windows.ContentElement.IsStylusCaptureWithinProperty
  - System.Windows.ContentElement.IsStylusDirectlyOver
  - System.Windows.ContentElement.IsStylusDirectlyOverChanged
  - System.Windows.ContentElement.IsStylusDirectlyOverProperty
  - System.Windows.ContentElement.IsStylusOver
  - System.Windows.ContentElement.IsStylusOverProperty
  - System.Windows.ContentElement.KeyDown
  - System.Windows.ContentElement.KeyDownEvent
  - System.Windows.ContentElement.KeyUp
  - System.Windows.ContentElement.KeyUpEvent
  - System.Windows.ContentElement.LostFocus
  - System.Windows.ContentElement.LostFocusEvent
  - System.Windows.ContentElement.LostKeyboardFocus
  - System.Windows.ContentElement.LostKeyboardFocusEvent
  - System.Windows.ContentElement.LostMouseCapture
  - System.Windows.ContentElement.LostMouseCaptureEvent
  - System.Windows.ContentElement.LostStylusCapture
  - System.Windows.ContentElement.LostStylusCaptureEvent
  - System.Windows.ContentElement.LostTouchCapture
  - System.Windows.ContentElement.LostTouchCaptureEvent
  - System.Windows.ContentElement.MouseDown
  - System.Windows.ContentElement.MouseDownEvent
  - System.Windows.ContentElement.MouseEnter
  - System.Windows.ContentElement.MouseEnterEvent
  - System.Windows.ContentElement.MouseLeave
  - System.Windows.ContentElement.MouseLeaveEvent
  - System.Windows.ContentElement.MouseLeftButtonDown
  - System.Windows.ContentElement.MouseLeftButtonDownEvent
  - System.Windows.ContentElement.MouseLeftButtonUp
  - System.Windows.ContentElement.MouseLeftButtonUpEvent
  - System.Windows.ContentElement.MouseMove
  - System.Windows.ContentElement.MouseMoveEvent
  - System.Windows.ContentElement.MouseRightButtonDown
  - System.Windows.ContentElement.MouseRightButtonDownEvent
  - System.Windows.ContentElement.MouseRightButtonUp
  - System.Windows.ContentElement.MouseRightButtonUpEvent
  - System.Windows.ContentElement.MouseUp
  - System.Windows.ContentElement.MouseUpEvent
  - System.Windows.ContentElement.MouseWheel
  - System.Windows.ContentElement.MouseWheelEvent
  - System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.ContentElement.OnCreateAutomationPeer
  - System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.ContentElement.PreviewDragEnter
  - System.Windows.ContentElement.PreviewDragEnterEvent
  - System.Windows.ContentElement.PreviewDragLeave
  - System.Windows.ContentElement.PreviewDragLeaveEvent
  - System.Windows.ContentElement.PreviewDragOver
  - System.Windows.ContentElement.PreviewDragOverEvent
  - System.Windows.ContentElement.PreviewDrop
  - System.Windows.ContentElement.PreviewDropEvent
  - System.Windows.ContentElement.PreviewGiveFeedback
  - System.Windows.ContentElement.PreviewGiveFeedbackEvent
  - System.Windows.ContentElement.PreviewGotKeyboardFocus
  - System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  - System.Windows.ContentElement.PreviewKeyDown
  - System.Windows.ContentElement.PreviewKeyDownEvent
  - System.Windows.ContentElement.PreviewKeyUp
  - System.Windows.ContentElement.PreviewKeyUpEvent
  - System.Windows.ContentElement.PreviewLostKeyboardFocus
  - System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  - System.Windows.ContentElement.PreviewMouseDown
  - System.Windows.ContentElement.PreviewMouseDownEvent
  - System.Windows.ContentElement.PreviewMouseLeftButtonDown
  - System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.ContentElement.PreviewMouseLeftButtonUp
  - System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.ContentElement.PreviewMouseMove
  - System.Windows.ContentElement.PreviewMouseMoveEvent
  - System.Windows.ContentElement.PreviewMouseRightButtonDown
  - System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  - System.Windows.ContentElement.PreviewMouseRightButtonUp
  - System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  - System.Windows.ContentElement.PreviewMouseUp
  - System.Windows.ContentElement.PreviewMouseUpEvent
  - System.Windows.ContentElement.PreviewMouseWheel
  - System.Windows.ContentElement.PreviewMouseWheelEvent
  - System.Windows.ContentElement.PreviewQueryContinueDrag
  - System.Windows.ContentElement.PreviewQueryContinueDragEvent
  - System.Windows.ContentElement.PreviewStylusButtonDown
  - System.Windows.ContentElement.PreviewStylusButtonDownEvent
  - System.Windows.ContentElement.PreviewStylusButtonUp
  - System.Windows.ContentElement.PreviewStylusButtonUpEvent
  - System.Windows.ContentElement.PreviewStylusDown
  - System.Windows.ContentElement.PreviewStylusDownEvent
  - System.Windows.ContentElement.PreviewStylusInAirMove
  - System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  - System.Windows.ContentElement.PreviewStylusInRange
  - System.Windows.ContentElement.PreviewStylusInRangeEvent
  - System.Windows.ContentElement.PreviewStylusMove
  - System.Windows.ContentElement.PreviewStylusMoveEvent
  - System.Windows.ContentElement.PreviewStylusOutOfRange
  - System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  - System.Windows.ContentElement.PreviewStylusSystemGesture
  - System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  - System.Windows.ContentElement.PreviewStylusUp
  - System.Windows.ContentElement.PreviewStylusUpEvent
  - System.Windows.ContentElement.PreviewTextInput
  - System.Windows.ContentElement.PreviewTextInputEvent
  - System.Windows.ContentElement.PreviewTouchDown
  - System.Windows.ContentElement.PreviewTouchDownEvent
  - System.Windows.ContentElement.PreviewTouchMove
  - System.Windows.ContentElement.PreviewTouchMoveEvent
  - System.Windows.ContentElement.PreviewTouchUp
  - System.Windows.ContentElement.PreviewTouchUpEvent
  - System.Windows.ContentElement.QueryContinueDrag
  - System.Windows.ContentElement.QueryContinueDragEvent
  - System.Windows.ContentElement.QueryCursor
  - System.Windows.ContentElement.QueryCursorEvent
  - System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.ReleaseAllTouchCaptures
  - System.Windows.ContentElement.ReleaseMouseCapture
  - System.Windows.ContentElement.ReleaseStylusCapture
  - System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.ContentElement.ShouldSerializeCommandBindings
  - System.Windows.ContentElement.ShouldSerializeInputBindings
  - System.Windows.ContentElement.StylusButtonDown
  - System.Windows.ContentElement.StylusButtonDownEvent
  - System.Windows.ContentElement.StylusButtonUp
  - System.Windows.ContentElement.StylusButtonUpEvent
  - System.Windows.ContentElement.StylusDown
  - System.Windows.ContentElement.StylusDownEvent
  - System.Windows.ContentElement.StylusEnter
  - System.Windows.ContentElement.StylusEnterEvent
  - System.Windows.ContentElement.StylusInAirMove
  - System.Windows.ContentElement.StylusInAirMoveEvent
  - System.Windows.ContentElement.StylusInRange
  - System.Windows.ContentElement.StylusInRangeEvent
  - System.Windows.ContentElement.StylusLeave
  - System.Windows.ContentElement.StylusLeaveEvent
  - System.Windows.ContentElement.StylusMove
  - System.Windows.ContentElement.StylusMoveEvent
  - System.Windows.ContentElement.StylusOutOfRange
  - System.Windows.ContentElement.StylusOutOfRangeEvent
  - System.Windows.ContentElement.StylusSystemGesture
  - System.Windows.ContentElement.StylusSystemGestureEvent
  - System.Windows.ContentElement.StylusUp
  - System.Windows.ContentElement.StylusUpEvent
  - System.Windows.ContentElement.TextInput
  - System.Windows.ContentElement.TextInputEvent
  - System.Windows.ContentElement.TouchDown
  - System.Windows.ContentElement.TouchDownEvent
  - System.Windows.ContentElement.TouchEnter
  - System.Windows.ContentElement.TouchEnterEvent
  - System.Windows.ContentElement.TouchesCaptured
  - System.Windows.ContentElement.TouchesCapturedWithin
  - System.Windows.ContentElement.TouchesDirectlyOver
  - System.Windows.ContentElement.TouchesOver
  - System.Windows.ContentElement.TouchLeave
  - System.Windows.ContentElement.TouchLeaveEvent
  - System.Windows.ContentElement.TouchMove
  - System.Windows.ContentElement.TouchMoveEvent
  - System.Windows.ContentElement.TouchUp
  - System.Windows.ContentElement.TouchUpEvent
  langs:
  - csharp
  name: ContentElement
  nameWithType: ContentElement
  fullName: System.Windows.ContentElement
  type: Class
  summary: "Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model."
  remarks: "ContentElement defines the following common content characteristics:      -   Input: All ContentElement derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.      -   Focus: All ContentElement derived classes are potentially focusable. (However, the default focusable state for the ContentElement base class is `false`. For details on how to make a ContentElement focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] that you can use for traversing the focus across related elements.      -   Events: ContentElement includes events that are related to input and focus; it also includes events for changes in state. In many cases, the ContentElement events are routed events. In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition. Also, ContentElement defines [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] that can raise routed events and that can add or remove handlers to events.       ContentElement shares many common [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] with <xref:System.Windows.UIElement>. These common [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] do not come from a shared class inheritance. But they do share common naming, similar behavior, and similar internal implementation of [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] in each class. The similarity is because ContentElement and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior.       In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a ContentElement to a rectangular region within a composited window, whereas ContentElement defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported. These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>."
  syntax:
    content: 'public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements:
  - System.Windows.IInputElement
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.ContentElement.#ctor
  id: '#ctor'
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ContentElement()
  nameWithType: ContentElement.ContentElement()
  fullName: System.Windows.ContentElement.ContentElement()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.ContentElement&quot;></xref> class."
  syntax:
    content: public ContentElement ();
    parameters: []
  overload: System.Windows.ContentElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element."
  remarks: "You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.       You typically use this method to provide the implementation of the &quot;add&quot; accessor for the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event."
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "An identifier for the routed event to be handled."
    - id: handler
      type: System.Delegate
      description: "A reference to the handler implementation."
  overload: System.Windows.ContentElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route."
  remarks: "Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.       Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event&quot;s preview alternative. For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.       You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.       You typically use this method to provide the implementation of the &quot;add&quot; accessor for the [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event."
  example:
  - "The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \n  \n [!code-cs[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/csharp/EventOvwSupport/page2.xaml.cs#addhandlerhandledtoo)]\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/visualbasic/eventovwsupport/page2.xaml.vb#addhandlerhandledtoo)]"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "An identifier for the.routed event to be handled."
    - id: handler
      type: System.Delegate
      description: "A reference to the handler implementation."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.       The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.       Do not routinely ask to rehandle a routed event. For more information, see Remarks."
  overload: System.Windows.ContentElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adds handlers to the specified <xref href=&quot;System.Windows.EventRoute&quot;></xref> for the current <xref href=&quot;System.Windows.ContentElement&quot;></xref> event handler collection."
  remarks: "Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>."
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "The event route that handlers are added to."
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "The event data that is used to add the handlers. This method uses the <xref:System.Windows.RoutedEventArgs.RoutedEvent*> property of the arguments to create the handlers."
  overload: System.Windows.ContentElement.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
  fullName: System.Windows.ContentElement.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation."
  remarks: "Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting AllowDrop to  `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior. For more information on drag and drop, see [Drag and Drop Overview](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for AllowDrop assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system. This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`.      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.AllowDropProperty>|   |Metadata properties set to `true`|None|"
  example:
  - "The following example sets AllowDrop in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].  \n  \n [!code-xml[ContentElementsSmorgasbord#AllowDrop](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#allowdrop)]"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this element can be used as the target of a drag-and-drop operation; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: ContentElement.AllowDropProperty
  fullName: System.Windows.ContentElement.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.AllowDrop*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation."
  remarks: "To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The identifier for the property to animate."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "The animation clock that controls and declares the animation."
  overload: System.Windows.ContentElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation."
  remarks: "To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "The animation clock that controls and declares the animation."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "A value of the enumeration. The default is <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>, which will stop any existing animation and replace with the new one."
  overload: System.Windows.ContentElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
  fullName: System.Windows.ContentElement.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether at least one touch is captured to this element."
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if at least one touch is captured to this element; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.AreAnyTouchesCaptured*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree."
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether at least one touch is pressed over this element."
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if at least one touch is pressed over this element; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
  fullName: System.Windows.ContentElement.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree."
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: ContentElement.AreAnyTouchesOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.AreAnyTouchesOver*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Starts an animation for a specified animated property on this element."
  remarks: "When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.       If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.       If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate, which is specified as a dependency property identifier."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "The timeline of the animation to start."
  overload: System.Windows.ContentElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation."
  remarks: "When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.       If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.       If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate, which is specified as the dependency property identifier."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "The timeline of the animation to be applied."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value."
  overload: System.Windows.ContentElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: ContentElement.CaptureMouse()
  fullName: System.Windows.ContentElement.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Attempts to force capture of the mouse to this element."
  remarks: "To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call CaptureMouse.       If calling CaptureMouse returns `true`, then <xref:System.Windows.ContentElement.IsMouseCaptured%2A> is also `true`.       If calling CaptureMouse returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the CaptureMouse method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.       To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`."
  example:
  - "The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element. Note that this example casts the prospective capture target element to the <xref:System.Windows.IInputElement> interface, and is thus initially calling the <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=fullName> method. Casting to <xref:System.Windows.IInputElement> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <xref:System.Windows.UIElement> or a <xref:System.Windows.ContentElement>. The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement>. This same casting technique works for other members that <xref:System.Windows.IInputElement> defines, for instance many of the input-related events, and other input-related methods.  \n  \n [!code-cs[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#ismousecaptured)]\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#ismousecaptured)]"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the mouse is successfully captured; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: ContentElement.CaptureStylus()
  fullName: System.Windows.ContentElement.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Attempts to force capture of the stylus to this element."
  remarks: "The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.       When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.       Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.       To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call CaptureStylus.       If calling CaptureStylus returns `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> is also `true`."
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the stylus is successfully captured; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: ContentElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.ContentElement.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Attempts to force capture of a touch to this element."
  remarks: "CaptureTouch will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.       If CaptureTouch returns `true`, then the <xref:System.Windows.ContentElement.GotTouchCapture> event is raised.       To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method."
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "The device to capture."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified touch is captured to this element; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.ContentElement.CommandBindings
  id: CommandBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
  fullName: System.Windows.ContentElement.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a collection of <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> objects that are associated with this element."
  remarks: "A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.       Another typical way to populate the CommandBindings collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a>    ## XAML Property Element Usage      ```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings  </object.CommandBindings>   </object>   ```      <a name=&quot;xamlValues_CommandBindings&quot;></a>    ## XAML Values    *oneOrMoreCommandBindings*    One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>."
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "The collection of all <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> objects."
  overload: System.Windows.ContentElement.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragEnter
  id: DragEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragEnter
  nameWithType: ContentElement.DragEnter
  fullName: System.Windows.ContentElement.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag event with this element as the drag target."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that DragEnter is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the DragEnter event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_DragEnter&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.DragEnterEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>.      -   Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: ContentElement.DragEnterEvent
  fullName: System.Windows.ContentElement.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.DragEnter&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragLeave
  id: DragLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: ContentElement.DragLeave
  fullName: System.Windows.ContentElement.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag event with this element as the drag origin."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that DragLeave is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the DragLeave event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_DragLeave&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.DragLeaveEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.      -   Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: ContentElement.DragLeaveEvent
  fullName: System.Windows.ContentElement.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.DragLeave&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragOver
  id: DragOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragOver
  nameWithType: ContentElement.DragOver
  fullName: System.Windows.ContentElement.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag event with this element as the potential drop target."
  remarks: "This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.       This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that DragOver is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the DragOver event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_DragOver&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.DragOverEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.      -   Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: ContentElement.DragOverEvent
  fullName: System.Windows.ContentElement.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.DragOver&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Drop
  id: Drop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Drop
  nameWithType: ContentElement.Drop
  fullName: System.Windows.ContentElement.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drop event with this element as the drop target."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that Drop is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the Drop event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_Drop&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.DropEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>.      -   Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DropEvent
  id: DropEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DropEvent
  nameWithType: ContentElement.DropEvent
  fullName: System.Windows.ContentElement.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.Drop&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Focus
  id: Focus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Focus()
  nameWithType: ContentElement.Focus()
  fullName: System.Windows.ContentElement.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Attempts to set focus to this element."
  remarks: "To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`. Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default.       Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.       Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical. This method sets the logical focus. There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input. For more information, see [Focus Overview](~/add/includes/ajax-current-ext-md.md) and [Input Overview](~/add/includes/ajax-current-ext-md.md).       If calling Focus returns `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> and <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> are also `true`.       If the related properties are not already `true`, when you call Focus, one or more of the following events are raised in the following order: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (source is the new focus target)."
  example:
  - "The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it. Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <xref:System.Windows.Setter> to make it focusable.  \n  \n [!code-cs[ContentElementsSmorgasbord#Focus](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#focus)]\n [!code-vb[ContentElementsSmorgasbord#Focus](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#focus)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if keyboard focus could be set to this element; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if this method call did not force focus."
  overload: System.Windows.ContentElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Focusable
  id: Focusable
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Focusable
  nameWithType: ContentElement.Focusable
  fullName: System.Windows.ContentElement.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets or sets a value that indicates whether the element can receive focus."
  remarks: "Only the focused element receives keyboard input.       Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.       When inherited by <xref:System.Windows.Documents.Hyperlink> or its derived classes, <xref:System.Windows.Documents.Hyperlink> overrides the metadata for this dependency property and redefines the default value of this property to be `true`.      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.FocusableProperty>|   |Metadata properties set to `true`|None|"
  example:
  - "The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \n  \n [!code-xml[ContentElementsSmorgasbord#Focusable](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#focusable)]"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element is focusable; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>; however, see Remarks."
  overload: System.Windows.ContentElement.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: ContentElement.FocusableChanged
  fullName: System.Windows.ContentElement.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.Focusable*> property changes."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: ContentElement.FocusableProperty
  fullName: System.Windows.ContentElement.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.Focusable*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.ContentElement.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation."
  remarks: "If no animations are attached to the property, then the GetAnimationBaseValue return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The.dependency property to check."
    return:
      type: System.Object
      description: "The property value as if no animations are attached to the specified dependency property."
  overload: System.Windows.ContentElement.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: ContentElement.GetUIParentCore()
  fullName: System.Windows.ContentElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists."
  remarks: "The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkContentElement> provides a practical implementation.       Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy."
  syntax:
    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "An object, if implementation of a derived class has an alternate parent connection to report."
  overload: System.Windows.ContentElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: ContentElement.GiveFeedback
  fullName: System.Windows.ContentElement.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag-and-drop event that involves this element."
  remarks: "The GiveFeedback event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.       This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that GiveFeedback is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the GiveFeedback event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>.      -   Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: ContentElement.GiveFeedbackEvent
  fullName: System.Windows.ContentElement.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.GiveFeedback&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotFocus
  id: GotFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: ContentElement.GotFocus
  fullName: System.Windows.ContentElement.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element gets logical focus."
  remarks: "Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.       A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.       Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.      <a name=&quot;routedEventInfo_GotFocus&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.GotFocusEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.RoutedEventHandler>|      -   There is no corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: ContentElement.GotFocusEvent
  fullName: System.Windows.ContentElement.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: ContentElement.GotKeyboardFocus
  fullName: System.Windows.ContentElement.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the keyboard is focused on this element."
  remarks: "<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the GotKeyboardFocus event is raised in many of the same circumstances.       Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that GotKeyboardFocus is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the GotKeyboardFocus event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.      -   Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: ContentElement.GotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.GotKeyboardFocus&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: ContentElement.GotMouseCapture
  fullName: System.Windows.ContentElement.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element captures the mouse."
  remarks: "When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.       Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.       This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that GotMouseCapture is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the GotMouseCapture event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.MouseEventHandler>|      -   There is no defined corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: ContentElement.GotMouseCaptureEvent
  fullName: System.Windows.ContentElement.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.GotMouseCapture&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: ContentElement.GotStylusCapture
  fullName: System.Windows.ContentElement.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element captures the stylus."
  remarks: "When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.       Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.       This event creates an alias for the  attached event for this class so that GotStylusCapture is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the GotStylusCapture event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   There is no defined corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: ContentElement.GotStylusCaptureEvent
  fullName: System.Windows.ContentElement.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.GotStylusCapture&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: ContentElement.GotTouchCapture
  fullName: System.Windows.ContentElement.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a touch is captured to this element."
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: ContentElement.GotTouchCaptureEvent
  fullName: System.Windows.ContentElement.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.GotTouchCapture&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
  fullName: System.Windows.ContentElement.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether this element has any animated properties."
  remarks: "This property returns `true` either for persistent (unclocked, always-running) animations or for animations that have a specific timeline."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this element has animations attached to any of its properties; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.InputBindings
  id: InputBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: InputBindings
  nameWithType: ContentElement.InputBindings
  fullName: System.Windows.ContentElement.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets the collection of input bindings that are associated with this element."
  remarks: "Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.       The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.       A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings. These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a>    ## XAML Property Element Usage      ```   <object>     <object.InputBindings>       oneOrMoreInputBindings  </object.InputBindings>   </object>   ```      <a name=&quot;xamlValues_InputBindings&quot;></a>    ## XAML Values    *oneOrMoreInputBindings*    One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set."
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "The collection of input bindings."
  overload: System.Windows.ContentElement.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
  fullName: System.Windows.ContentElement.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets or sets a value that indicates whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsEnabledProperty>|   |Metadata properties set to `true`|None|"
  example:
  - "The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> is set to IsEnabled `false`.  \n  \n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#isenabledismouseover)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: ContentElement.IsEnabledChanged
  fullName: System.Windows.ContentElement.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsEnabled*> property on this element changes."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
  fullName: System.Windows.ContentElement.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that becomes the return value of <xref:System.Windows.ContentElement.IsEnabled*> in derived classes."
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: ContentElement.IsEnabledProperty
  fullName: System.Windows.ContentElement.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsEnabled*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsFocused
  id: IsFocused
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsFocused
  nameWithType: ContentElement.IsFocused
  fullName: System.Windows.ContentElement.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that determines whether this element has logical focus."
  remarks: "Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Input Overview](~/add/includes/ajax-current-ext-md.md) and [Focus Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsFocusedProperty>|   |Metadata properties set to `true`|None|"
  example:
  - "The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \n  \n [!code-xml[ContentElementsSmorgasbord#Focusable](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#focusable)]"
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this element has logical focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: ContentElement.IsFocusedProperty
  fullName: System.Windows.ContentElement.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsFocused*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
  fullName: System.Windows.ContentElement.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)], is enabled for processing the input to this element."
  remarks: "This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices)."
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an input method is active; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value of the underlying attached property is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>; however, this value is influenced by the state of input methods at runtime."
  overload: System.Windows.ContentElement.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
  fullName: System.Windows.ContentElement.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether this element has keyboard focus."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this element has keyboard focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: ContentElement.IsKeyboardFocusedChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused*> property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: ContentElement.IsKeyboardFocusedProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsKeyboardFocused*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether keyboard focus is anywhere within the element or child elements."
  remarks: "Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.       You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request. Either of these method calls might change this property value.      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if keyboard focus is on the element or its child elements; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: ContentElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: ContentElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
  fullName: System.Windows.ContentElement.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether the mouse is captured by this element."
  remarks: "Mouse capture state is related to in-process drag-and-drop operations.      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|   |Metadata properties set to `true`|None|"
  example:
  - "The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.  \n  \n [!code-cs[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#ismousecaptured)]\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#ismousecaptured)]"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element has mouse capture; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: ContentElement.IsMouseCapturedChanged
  fullName: System.Windows.ContentElement.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured*> property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: ContentElement.IsMouseCapturedProperty
  fullName: System.Windows.ContentElement.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsMouseCaptured*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
  fullName: System.Windows.ContentElement.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this element or a contained element has mouse capture; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: ContentElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref href=&quot;System.Windows.ContentElement.IsMouseCaptureWithinProperty&quot;></xref> changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: ContentElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsMouseCaptureWithin*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
  fullName: System.Windows.ContentElement.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account."
  remarks: "Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element&quot;s deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead.       If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the mouse pointer is over the same element result as a hit test; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: ContentElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver*> property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: ContentElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsMouseDirectlyOver*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
  fullName: System.Windows.ContentElement.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing)."
  remarks: "Although an analogous &quot;IsMouseOverChanged&quot; event does not exist, several similar events do. For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.       If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsMouseOverProperty>|   |Metadata properties set to `true`|None|"
  example:
  - "The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> reports IsMouseOver `true`.  \n  \n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#isenabledismouseover)]"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if mouse pointer is over the element or its child elements; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: ContentElement.IsMouseOverProperty
  fullName: System.Windows.ContentElement.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsMouseOver*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
  fullName: System.Windows.ContentElement.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether the stylus is captured to this element."
  remarks: "Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element has stylus capture; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: ContentElement.IsStylusCapturedChanged
  fullName: System.Windows.ContentElement.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured*> property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: ContentElement.IsStylusCapturedProperty
  fullName: System.Windows.ContentElement.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsStylusCaptured*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
  fullName: System.Windows.ContentElement.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing."
  remarks: "Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if stylus capture is held within this element; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: ContentElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin*> property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: ContentElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsStylusCaptureWithin*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
  fullName: System.Windows.ContentElement.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account."
  remarks: "Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element&quot;s deeper compositing, this property will be `false`.       Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.       If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the stylus is over the same element as a hit test; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: ContentElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver*> property changes on this element."
  remarks: "This member is a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event, not a routed event."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: ContentElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsStylusDirectlyOver*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
  fullName: System.Windows.ContentElement.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets a value that indicates whether the stylus is located over this element (including visual child elements)."
  remarks: "If this element has stylus capture, this property remains `true` until stylus capture is lost and the pointer is out of its bounds.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.IsStylusOverProperty>|   |Metadata properties set to `true`|None|"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the stylus is over the element or its child elements; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: ContentElement.IsStylusOverProperty
  fullName: System.Windows.ContentElement.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref:System.Windows.ContentElement.IsStylusOver*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyDown
  id: KeyDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: ContentElement.KeyDown
  fullName: System.Windows.ContentElement.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a key is pressed while focus is on this element."
  remarks: "Key handling interacts with other platform features such as commanding and text composition. The KeyDown event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that KeyDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the KeyDown event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_KeyDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.KeyDownEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.KeyEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>.      -   Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: ContentElement.KeyDownEvent
  fullName: System.Windows.ContentElement.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.KeyDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyUp
  id: KeyUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: ContentElement.KeyUp
  fullName: System.Windows.ContentElement.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a key is released while focus is on this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  KeyUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the KeyUp event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_KeyUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.KeyUpEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.KeyEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>.      -   Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: ContentElement.KeyUpEvent
  fullName: System.Windows.ContentElement.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.KeyUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostFocus
  id: LostFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: ContentElement.LostFocus
  fullName: System.Windows.ContentElement.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element loses logical focus."
  remarks: "Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.       A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.       Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.      <a name=&quot;routedEventInfo_LostFocus&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.LostFocusEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.RoutedEventHandler>|      -   There is no corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: ContentElement.LostFocusEvent
  fullName: System.Windows.ContentElement.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: ContentElement.LostKeyboardFocus
  fullName: System.Windows.ContentElement.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the keyboard is no longer focused on this element."
  remarks: "Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that LostKeyboardFocus is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the LostKeyboardFocus event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.      -   Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: ContentElement.LostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.LostKeyboardFocus&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: ContentElement.LostMouseCapture
  fullName: System.Windows.ContentElement.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element loses mouse capture."
  remarks: "When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.       Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.       This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that LostMouseCapture is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the LostMouseCapture event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.MouseEventHandler>|      -   There is no defined corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: ContentElement.LostMouseCaptureEvent
  fullName: System.Windows.ContentElement.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.LostMouseCapture&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: ContentElement.LostStylusCapture
  fullName: System.Windows.ContentElement.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element loses stylus capture."
  remarks: "When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.       Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.       This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that LostStylusCapture is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the LostStylusCapture event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   There is no defined corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: ContentElement.LostStylusCaptureEvent
  fullName: System.Windows.ContentElement.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.LostStylusCapture&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: ContentElement.LostTouchCapture
  fullName: System.Windows.ContentElement.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element loses a touch capture."
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: ContentElement.LostTouchCaptureEvent
  fullName: System.Windows.ContentElement.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.LostTouchCapture&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseDown
  id: MouseDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: ContentElement.MouseDown
  fullName: System.Windows.ContentElement.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when any mouse button is pressed while the pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that MouseDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the MouseDown event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.       The MouseDown event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.      > [!IMPORTANT] >  A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.       You can resolve the issue that is outlined in the preceding Important and still receive MouseDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:      -   Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.      -   Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.      <a name=&quot;routedEventInfo_MouseDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseDownEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>.      -   Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: ContentElement.MouseDownEvent
  fullName: System.Windows.ContentElement.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: ContentElement.MouseEnter
  fullName: System.Windows.ContentElement.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the mouse pointer enters the bounds of this element."
  remarks: "MouseEnter is a [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.       Although MouseEnter tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.       This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that MouseEnter is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the MouseEnter event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_MouseEnter&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseEnterEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: ContentElement.MouseEnterEvent
  fullName: System.Windows.ContentElement.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseEnter&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: ContentElement.MouseLeave
  fullName: System.Windows.ContentElement.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the mouse pointer leaves the bounds of this element."
  remarks: "MouseLeave is a [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.       Although MouseLeave tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.       This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that MouseLeave is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the MouseLeave event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_MouseLeave&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseLeaveEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: ContentElement.MouseLeaveEvent
  fullName: System.Windows.ContentElement.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseLeave&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: ContentElement.MouseLeftButtonDown
  fullName: System.Windows.ContentElement.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the left mouse button is pressed while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      > [!IMPORTANT] >  A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.       You can resolve the issue that is outlined in the preceding Important and still receive MouseLeftButtonDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:      -   Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.      -   Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: ContentElement.MouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: ContentElement.MouseLeftButtonUp
  fullName: System.Windows.ContentElement.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the left mouse button is released while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: ContentElement.MouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseMove
  id: MouseMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: ContentElement.MouseMove
  fullName: System.Windows.ContentElement.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the mouse pointer moves while over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that MouseMove is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the MouseMove event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_MouseMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseMoveEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.MouseEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>.      -   Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: ContentElement.MouseMoveEvent
  fullName: System.Windows.ContentElement.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseMove&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: ContentElement.MouseRightButtonDown
  fullName: System.Windows.ContentElement.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the right mouse button is pressed while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.       Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: ContentElement.MouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseRightButtonDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: ContentElement.MouseRightButtonUp
  fullName: System.Windows.ContentElement.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the right mouse button is released while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: ContentElement.MouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseRightButtonUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseUp
  id: MouseUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: ContentElement.MouseUp
  fullName: System.Windows.ContentElement.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when any mouse button is released over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that MouseUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the MouseUp event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.       The MouseUp event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.      <a name=&quot;routedEventInfo_MouseUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseUpEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>.      -   Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: ContentElement.MouseUpEvent
  fullName: System.Windows.ContentElement.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseWheel
  nameWithType: ContentElement.MouseWheel
  fullName: System.Windows.ContentElement.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the user rotates the mouse wheel while the mouse pointer is over this element."
  remarks: "Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the MouseWheel event from a focused or captured element, the mouse pointer might actually be over another element.       This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that MouseWheel is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the MouseWheel event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_MouseWheel&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.MouseWheelEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>.      -   Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: ContentElement.MouseWheelEvent
  fullName: System.Windows.ContentElement.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.MouseWheel&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: ContentElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.ContentElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element."
  remarks: "Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control&quot;s composition, and the traversal request did not request to wrap."
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the requested traversal was performed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: ContentElement.OnCreateAutomationPeer()
  fullName: System.Windows.ContentElement.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Returns class-specific <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure."
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "The type-specific <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref> implementation."
  overload: System.Windows.ContentElement.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: ContentElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: ContentElement.OnDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "The <xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Raises the <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;></xref> routed event by using the event data provided."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref> that contains event data. This event data must contain the identifier for the <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;></xref> event."
  overload: System.Windows.ContentElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.GotTouchCapture&quot;></xref> routed event that occurs when a touch is captured to this element."
  remarks: "The OnGotTouchCapture method has no default implementation. Override OnGotTouchCapture in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event. Be sure to call the base class’s OnGotTouchCapture method so that base classes receive the event."
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsKeyboardFocusedChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "The <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked just before the <xref href=&quot;System.Windows.ContentElement.IsKeyboardFocusWithinChanged&quot;></xref> event is raised by this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsMouseCapturedChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "The <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsMouseCaptureWithinChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsMouseDirectlyOverChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "The <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsStylusCapturedChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsStylusCaptureWithinChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "The <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.IsStylusDirectlyOverChanged&quot;></xref> event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.       This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements."
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "The <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Raises the <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;></xref> routed event by using the event data that is provided."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref> that contains event data. This event data must contain the identifier for the <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;></xref> event."
  overload: System.Windows.ContentElement.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;></xref> that contains event data."
  overload: System.Windows.ContentElement.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;></xref> that contains event data."
  overload: System.Windows.ContentElement.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains event data."
  overload: System.Windows.ContentElement.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.LostTouchCapture&quot;></xref> routed event that occurs when this element loses a touch capture."
  remarks: "The OnLostTouchCapture method has no default implementation. Override OnLostTouchCapture in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event. Be sure to call the base class’s OnLostTouchCapture method so that base classes receive the event."
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state."
  overload: System.Windows.ContentElement.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.       The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event is raised on this element. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.       The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonDown&quot;></xref> routed event is raised on this element. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnMouseLeftButtonDown.       Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseLeftButtonDown. For example, you can derive from <xref:System.Windows.Controls.Button> and override OnMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the left mouse button was pressed."
  overload: System.Windows.ContentElement.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonUp&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnMouseLeftButtonUp."
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the left mouse button was released."
  overload: System.Windows.ContentElement.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.MouseRightButtonDown&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnMouseRightButtonDown.       Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseRightButtonDown. For example, you can derive from <xref:System.Windows.Controls.Control> and override OnMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior."
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the right mouse button was pressed."
  overload: System.Windows.ContentElement.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.MouseRightButtonUp&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnMouseRightButtonUp."
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the right mouse button was released."
  overload: System.Windows.ContentElement.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the mouse button was released."
  overload: System.Windows.ContentElement.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "The <xref href=&quot;System.Windows.DragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "The <xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "The <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed."
  overload: System.Windows.ContentElement.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonDown&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnPreviewMouseLeftButtonDown.       Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseLeftButtonDown. For example, you can derive from <xref:System.Windows.Controls.Button> and override OnPreviewMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the left mouse button was pressed."
  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonUp&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnPreviewMouseLeftButtonUp."
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the left mouse button was released."
  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonDown&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnPreviewMouseRightButtonDown.       Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseRightButtonDown. For example, you can derive from <xref:System.Windows.Controls.Control> and override OnPreviewMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior."
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the right mouse button was pressed."
  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonUp&quot;></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.       The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding OnPreviewMouseRightButtonUp."
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that the right mouse button was released."
  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;></xref> that contains the event data. The event data reports that one or more mouse buttons were released."
  overload: System.Windows.ContentElement.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "The <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "The <xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "The <xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.PreviewTouchDown&quot;></xref> routed event that occurs when a touch presses this element."
  remarks: "The OnPreviewTouchDown method has no default implementation. Override OnPreviewTouchDown in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event. Be sure to call the base class’s OnPreviewTouchDown method so that base classes receive the event."
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.PreviewTouchMove&quot;></xref> routed event that occurs when a touch moves while inside this element."
  remarks: "The OnPreviewTouchMove method has no default implementation. Override OnPreviewTouchMove in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event. Be sure to call the base class’s OnPreviewTouchMove method so that base classes receive the event."
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.PreviewTouchUp&quot;></xref> routed event that occurs when a touch is released inside this element."
  remarks: "The OnPreviewTouchUp method has no default implementation. Override OnPreviewTouchUp in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event. Be sure to call the base class’s OnPreviewTouchUp method so that base classes receive the event."
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "The <xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.ContentElement.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "The <xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event is raised by this element. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.       The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event is raised by this element. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.       The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "The <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invoked when an unhandled &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "The <xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.TouchDown&quot;></xref> routed event that occurs when a touch presses inside this element."
  remarks: "The OnTouchDown method has no default implementation. Override OnTouchDown in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event. Be sure to call the base class’s OnTouchDown method so that base classes receive the event."
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.TouchEnter&quot;></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element."
  remarks: "The OnTouchEnter method has no default implementation. Override OnTouchEnter in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event. Be sure to call the base class’s OnTouchEnter method so that base classes receive the event."
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.TouchLeave&quot;></xref> routed event that occurs when a touch moves from inside to outside the bounds of this element."
  remarks: "The OnTouchLeave method has no default implementation. Override OnTouchLeave in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event. Be sure to call the base class’s OnTouchLeave method so that base classes receive the event."
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.TouchMove&quot;></xref> routed event that occurs when a touch moves while inside this element."
  remarks: "The OnTouchMove method has no default implementation. Override OnTouchMove in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event. Be sure to call the base class’s OnTouchMove method so that base classes receive the event."
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Provides class handling for the <xref href=&quot;System.Windows.ContentElement.TouchUp&quot;></xref> routed event that occurs when a touch is released inside this element."
  remarks: "The OnTouchUp method has no default implementation. Override OnTouchUp in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event. Be sure to call the base class’s OnTouchUp method so that base classes receive the event."
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;></xref> that contains the event data."
  overload: System.Windows.ContentElement.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.ContentElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element."
  remarks: "The default implementation of this method in this class is incomplete and always returns `null`."
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "The direction of the requested focus traversal."
    return:
      type: System.Windows.DependencyObject
      description: "The element that would have received focus if <xref:System.Windows.ContentElement.MoveFocus*> were actually invoked."
  overload: System.Windows.ContentElement.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: ContentElement.PreviewDragEnter
  fullName: System.Windows.ContentElement.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag event with this element as the drag target."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that PreviewDragEnter is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewDragEnter event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>.      -   Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: ContentElement.PreviewDragEnterEvent
  fullName: System.Windows.ContentElement.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewDragEnter&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: ContentElement.PreviewDragLeave
  fullName: System.Windows.ContentElement.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag event with this element as the drag origin."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that PreviewDragLeave is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewDragLeave event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>.      -   Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: ContentElement.PreviewDragLeaveEvent
  fullName: System.Windows.ContentElement.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewDragLeave&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: ContentElement.PreviewDragOver
  fullName: System.Windows.ContentElement.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drag event with this element as the potential drop target."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that PreviewDragOver is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewDragOver event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>.      -   Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: ContentElement.PreviewDragOverEvent
  fullName: System.Windows.ContentElement.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewDragOver&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: ContentElement.PreviewDrop
  fullName: System.Windows.ContentElement.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the input system reports an underlying drop event with this element as the drop target."
  remarks: "This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that PreviewDrop is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewDrop event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewDropEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.DragEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>.      -   Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: ContentElement.PreviewDropEvent
  fullName: System.Windows.ContentElement.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewDrop&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: ContentElement.PreviewGiveFeedback
  fullName: System.Windows.ContentElement.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a drag-and-drop operation is started."
  remarks: "The PreviewGiveFeedback event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.       This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that PreviewGiveFeedback is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewGiveFeedback event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>.      -   Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: ContentElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewGiveFeedback&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: ContentElement.PreviewGotKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the keyboard is focused on this element."
  remarks: "Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that PreviewGotKeyboardFocus is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewGotKeyboardFocus event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>.      -   Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewGotKeyboardFocus&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: ContentElement.PreviewKeyDown
  fullName: System.Windows.ContentElement.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a key is pressed while the keyboard is focused on this element."
  remarks: "Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that PreviewKeyDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewKeyDown event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.KeyEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>.      -   Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: ContentElement.PreviewKeyDownEvent
  fullName: System.Windows.ContentElement.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewKeyDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: ContentElement.PreviewKeyUp
  fullName: System.Windows.ContentElement.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a key is released while the keyboard is focused on this element."
  remarks: "Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that PreviewKeyUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewKeyUp event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.KeyEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>.      -   Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: ContentElement.PreviewKeyUpEvent
  fullName: System.Windows.ContentElement.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewKeyUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: ContentElement.PreviewLostKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the keyboard is no longer focused on this element."
  remarks: "Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.       This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that PreviewLostKeyboardFocus is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewLostKeyboardFocus event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>.      -   Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewLostKeyboardFocus&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: ContentElement.PreviewMouseDown
  fullName: System.Windows.ContentElement.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when any mouse button is pressed while the pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that PreviewMouseDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewMouseDown event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.       The PreviewMouseDown event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>.      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: ContentElement.PreviewMouseDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: ContentElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the left mouse button is pressed while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: ContentElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the left mouse button is released while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: ContentElement.PreviewMouseMove
  fullName: System.Windows.ContentElement.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the mouse pointer moves while the mouse pointer is over this element."
  remarks: "This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.       This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that PreviewMouseMove is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewMouseMove event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.MouseEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>.      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: ContentElement.PreviewMouseMoveEvent
  fullName: System.Windows.ContentElement.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseMove&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: ContentElement.PreviewMouseRightButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the right mouse button is pressed while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: ContentElement.PreviewMouseRightButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the right mouse button is released while the mouse pointer is over this element."
  remarks: "Although this [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.       This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.       The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.       Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse &quot;service&quot; (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: ContentElement.PreviewMouseUp
  fullName: System.Windows.ContentElement.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when any mouse button is released while the mouse pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that PreviewMouseUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewMouseUp event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.       The PreviewMouseUp event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>.      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: ContentElement.PreviewMouseUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: ContentElement.PreviewMouseWheel
  fullName: System.Windows.ContentElement.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the user rotates the mouse wheel while the mouse pointer is over this element."
  remarks: "Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.       This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>.      -   Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: ContentElement.PreviewMouseWheelEvent
  fullName: System.Windows.ContentElement.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewMouseWheel&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: ContentElement.PreviewQueryContinueDrag
  fullName: System.Windows.ContentElement.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation."
  remarks: "The PreviewQueryContinueDrag event enables the drag source to declare whether the drag-and-drop operation should be canceled.       This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that PreviewQueryContinueDrag is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewQueryContinueDrag event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>.      -   Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: ContentElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewQueryContinueDrag&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: ContentElement.PreviewStylusButtonDown
  fullName: System.Windows.ContentElement.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus button is pressed while the pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that PreviewStylusButtonDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusButtonDown event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: ContentElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusButtonDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: ContentElement.PreviewStylusButtonUp
  fullName: System.Windows.ContentElement.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus button is released while the pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that PreviewStylusButtonUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusButtonUp event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: ContentElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusButtonUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: ContentElement.PreviewStylusDown
  fullName: System.Windows.ContentElement.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus touches the digitizer while it is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that PreviewStylusDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusDown event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: ContentElement.PreviewStylusDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: ContentElement.PreviewStylusInAirMove
  fullName: System.Windows.ContentElement.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus moves over an element without actually touching the digitizer."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that PreviewStylusInAirMove is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusInAirMove event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: ContentElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusInAirMove&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: ContentElement.PreviewStylusInRange
  fullName: System.Windows.ContentElement.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus is close enough to the digitizer to be detected, while over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that PreviewStylusInRange is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusInRange event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: ContentElement.PreviewStylusInRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusInRange&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: ContentElement.PreviewStylusMove
  fullName: System.Windows.ContentElement.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <xref href=&quot;System.Windows.ContentElement.PreviewStylusInAirMove&quot;></xref> is raised instead."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that PreviewStylusMove is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusMove event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: ContentElement.PreviewStylusMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusMove&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: ContentElement.PreviewStylusOutOfRange
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus is too far from the digitizer to be detected."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that PreviewStylusOutOfRange is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusOutOfRange event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusOutOfRange&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: ContentElement.PreviewStylusSystemGesture
  fullName: System.Windows.ContentElement.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a user performs one of several stylus gestures."
  remarks: "For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.       This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that PreviewStylusSystemGesture is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewStylusSystemGesture event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: ContentElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusSystemGesture&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: ContentElement.PreviewStylusUp
  fullName: System.Windows.ContentElement.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the user raises the stylus off the digitizer while the stylus is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>.      -   Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: ContentElement.PreviewStylusUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewStylusUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: ContentElement.PreviewTextInput
  fullName: System.Windows.ContentElement.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element gets text in a device-independent manner."
  remarks: "The PreviewTextInput event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of PreviewTextInput; but speech, handwriting, and other input devices can also generate PreviewTextInput.       Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.       This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that PreviewTextInput is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the PreviewTextInput event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>.      -   Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: ContentElement.PreviewTextInputEvent
  fullName: System.Windows.ContentElement.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewTextInput&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: ContentElement.PreviewTouchDown
  fullName: System.Windows.ContentElement.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a finger touches the screen while the finger is over this element."
  remarks: "By default, the PreviewTouchDown and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.       To cause the PreviewTouchDown and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>.      -   Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: ContentElement.PreviewTouchDownEvent
  fullName: System.Windows.ContentElement.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewTouchDown&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: ContentElement.PreviewTouchMove
  fullName: System.Windows.ContentElement.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a finger moves on the screen while the finger is over this element."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>.      -   Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: ContentElement.PreviewTouchMoveEvent
  fullName: System.Windows.ContentElement.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewTouchMove&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: ContentElement.PreviewTouchUp
  fullName: System.Windows.ContentElement.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a finger is raised off of the screen while the finger is over this element."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>.      -   Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: ContentElement.PreviewTouchUpEvent
  fullName: System.Windows.ContentElement.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.PreviewTouchUp&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: ContentElement.QueryContinueDrag
  fullName: System.Windows.ContentElement.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation."
  remarks: "The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.       This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that QueryContinueDrag is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the QueryContinueDrag event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.      -   Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: ContentElement.QueryContinueDragEvent
  fullName: System.Windows.ContentElement.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.QueryContinueDrag&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryCursor
  id: QueryCursor
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryCursor
  nameWithType: ContentElement.QueryCursor
  fullName: System.Windows.ContentElement.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that QueryCursor is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the QueryCursor event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.       The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.       Listening for the QueryCursor event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on QueryCursor if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to QueryCursor, see <xref:System.Windows.Input.QueryCursorEventHandler>.      <a name=&quot;routedEventInfo_QueryCursor&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.QueryCursorEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|      -   There is no defined corresponding tunneling event.      -   Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: ContentElement.QueryCursorEvent
  fullName: System.Windows.ContentElement.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.QueryCursor&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.ContentElement.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Raises a specific routed event. The <xref href=&quot;System.Windows.RoutedEvent&quot;></xref> to be raised is identified within the <xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref> instance that is provided (as the <xref:System.Windows.RoutedEventArgs.RoutedEvent*> property of that event data)."
  remarks: "The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.       <xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event."
  example:
  - "The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \n  \n [!code-cs[ContentElementsSmorgasbord#RaiseEvent](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#raiseevent)]\n [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#raiseevent)]"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref> that contains the event data and also identifies the event to raise."
  overload: System.Windows.ContentElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: ContentElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.ContentElement.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Releases all captured touch devices from this element."
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: ContentElement.ReleaseMouseCapture()
  fullName: System.Windows.ContentElement.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Releases the mouse capture, if this element held the capture."
  remarks: "If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method."
  example:
  - "The following handler captures or releases mouse capture according to mouse button states. The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)].  \n  \n [!code-cs[ContentElementsSmorgasbord#UIElementMouseCapture](~/add/codesnippet/csharp/ContentElementsSmorgasbord/Trackball.cs#uielementmousecapture)]\n [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/add/codesnippet/visualbasic/contentelementssmorgasbord/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: ContentElement.ReleaseStylusCapture()
  fullName: System.Windows.ContentElement.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Releases the stylus device capture, if this element held the capture."
  remarks: "If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method."
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.ContentElement.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Attempts to release the specified touch device from this element."
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "The device to release."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the touch device is released; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Removes the specified routed event handler from this element."
  remarks: "The most common scenario for using this [!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] &quot;wrapper&quot; event that is associated with a custom routed event, specifically when you implement the &quot;remove&quot; logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.       Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.       If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.       Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.       This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed."
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "The identifier of the.routed event for which the handler is attached."
    - id: handler
      type: System.Delegate
      description: "The specific handler implementation to remove from the event handler collection on this element."
  overload: System.Windows.ContentElement.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: ContentElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Returns whether serialization processes should serialize the contents of the <xref:System.Windows.ContentElement.CommandBindings*> property on instances of this class."
  remarks: "This will return `true` if <xref:System.Windows.ContentElement.CommandBindings%2A> is locally set.       This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.       For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Windows.ContentElement.CommandBindings*> property value should be serialized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: ContentElement.ShouldSerializeInputBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Returns whether serialization processes should serialize the contents of the <xref:System.Windows.ContentElement.InputBindings*> property on instances of this class."
  remarks: "This will return `true` if <xref:System.Windows.ContentElement.InputBindings%2A> is locally set.       This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.       For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Windows.ContentElement.InputBindings*> property value should be serialized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.ContentElement.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: ContentElement.StylusButtonDown
  fullName: System.Windows.ContentElement.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus button is pressed while the pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that StylusButtonDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusButtonDown event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.      -   Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: ContentElement.StylusButtonDownEvent
  fullName: System.Windows.ContentElement.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusButtonDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: ContentElement.StylusButtonUp
  fullName: System.Windows.ContentElement.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus button is released while the pointer is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that StylusButtonUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusButtonUp event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.      -   Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: ContentElement.StylusButtonUpEvent
  fullName: System.Windows.ContentElement.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusButtonUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusDown
  id: StylusDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusDown
  nameWithType: ContentElement.StylusDown
  fullName: System.Windows.ContentElement.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus touches the digitizer while the stylus is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that StylusDown is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusDown event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusDownEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>.      -   Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: ContentElement.StylusDownEvent
  fullName: System.Windows.ContentElement.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusDown&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusEnter
  id: StylusEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusEnter
  nameWithType: ContentElement.StylusEnter
  fullName: System.Windows.ContentElement.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus enters the bounds of this element."
  remarks: "StylusEnter is a [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.       Although StylusEnter tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.       This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that StylusEnter is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusEnter event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusEnter&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusEnterEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: ContentElement.StylusEnterEvent
  fullName: System.Windows.ContentElement.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusEnter&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: ContentElement.StylusInAirMove
  fullName: System.Windows.ContentElement.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus moves over an element without actually touching the digitizer."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that StylusInAirMove is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusInAirMove event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.      -   Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: ContentElement.StylusInAirMoveEvent
  fullName: System.Windows.ContentElement.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusInAirMove&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInRange
  id: StylusInRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInRange
  nameWithType: ContentElement.StylusInRange
  fullName: System.Windows.ContentElement.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus is close enough to the digitizer to be detected, while over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that StylusInRange is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusInRange event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInRange&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusInRangeEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>.      -   Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: ContentElement.StylusInRangeEvent
  fullName: System.Windows.ContentElement.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusInRange&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusLeave
  id: StylusLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusLeave
  nameWithType: ContentElement.StylusLeave
  fullName: System.Windows.ContentElement.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus leaves the bounds of the element."
  remarks: "StylusLeave is a [Routed Events Overview](~/add/includes/ajax-current-ext-md.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.       Although StylusLeave tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.       This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that StylusLeave is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusLeave event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusLeave&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusLeaveEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: ContentElement.StylusLeaveEvent
  fullName: System.Windows.ContentElement.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusLeave&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusMove
  id: StylusMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusMove
  nameWithType: ContentElement.StylusMove
  fullName: System.Windows.ContentElement.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=&quot;System.Windows.ContentElement.StylusInAirMove&quot;></xref> is raised instead."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that StylusMove is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusMove event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusMoveEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>.      -   Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: ContentElement.StylusMoveEvent
  fullName: System.Windows.ContentElement.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusMove&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: ContentElement.StylusOutOfRange
  fullName: System.Windows.ContentElement.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the stylus is too far from the digitizer to be detected, while over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that StylusOutOfRange is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusOutOfRange event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.      -   Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: ContentElement.StylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusOutOfRange&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: ContentElement.StylusSystemGesture
  fullName: System.Windows.ContentElement.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a user performs one of several stylus gestures."
  remarks: "For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.       This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that StylusSystemGesture is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusSystemGesture event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.      -   Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: ContentElement.StylusSystemGestureEvent
  fullName: System.Windows.ContentElement.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusSystemGesture&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusUp
  id: StylusUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusUp
  nameWithType: ContentElement.StylusUp
  fullName: System.Windows.ContentElement.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when the user raises the stylus off the digitizer while it is over this element."
  remarks: "This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that StylusUp is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the StylusUp event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.       Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.StylusUpEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.StylusEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>.      -   Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: ContentElement.StylusUpEvent
  fullName: System.Windows.ContentElement.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.StylusUp&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TextInput
  id: TextInput
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TextInput
  nameWithType: ContentElement.TextInput
  fullName: System.Windows.ContentElement.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when this element gets text in a device-independent manner."
  remarks: "> [!IMPORTANT] >  This event might already be marked as handled by the internal implementations of composited controls. See Remark below.       The TextInput event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the TextInput event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.       The TextInput event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of TextInput, but speech, handwriting, and other input devices can also raise TextInput.       Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.       This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that TextInput is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the TextInput event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.      <a name=&quot;routedEventInfo_TextInput&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.TextInputEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>.      -   Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: ContentElement.TextInputEvent
  fullName: System.Windows.ContentElement.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.TextInput&quot;></xref> routed event."
  remarks: "Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.       For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchDown
  id: TouchDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchDown
  nameWithType: ContentElement.TouchDown
  fullName: System.Windows.ContentElement.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a finger touches the screen while the finger is over this element."
  remarks: "By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and TouchDown events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.       To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and TouchDown events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.      <a name=&quot;routedEventInfo_TouchDown&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.TouchDownEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>.      -   Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: ContentElement.TouchDownEvent
  fullName: System.Windows.ContentElement.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.TouchDown&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchEnter
  id: TouchEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchEnter
  nameWithType: ContentElement.TouchEnter
  fullName: System.Windows.ContentElement.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a touch moves from outside to inside the bounds of this element."
  remarks: "This event is always raised, whether or not the touch device is captured to this UI element.      <a name=&quot;routedEventInfo_TouchEnter&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.TouchEnterEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: ContentElement.TouchEnterEvent
  fullName: System.Windows.ContentElement.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.TouchEnter&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
  fullName: System.Windows.ContentElement.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets all touch devices that are captured to this element."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "An enumeration of <xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref> objects that are captured to this element."
  overload: System.Windows.ContentElement.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
  fullName: System.Windows.ContentElement.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets all touch devices that are captured to this element or any child elements in its visual tree."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "An enumeration of <xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref> objects that are captured to this element or any child elements in its visual tree."
  overload: System.Windows.ContentElement.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
  fullName: System.Windows.ContentElement.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets all touch devices that are over this element."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "An enumeration of <xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref> objects that are over this element."
  overload: System.Windows.ContentElement.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesOver
  id: TouchesOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
  fullName: System.Windows.ContentElement.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gets all touch devices that are over this element or any child elements in its visual tree."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "An enumeration of <xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref> objects that are over this element or any child elements in its visual tree."
  overload: System.Windows.ContentElement.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchLeave
  id: TouchLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchLeave
  nameWithType: ContentElement.TouchLeave
  fullName: System.Windows.ContentElement.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a touch moves from inside to outside the bounds of this element."
  remarks: "<a name=&quot;routedEventInfo_TouchLeave&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.TouchLeaveEvent>|   |Routing strategy|Direct|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: ContentElement.TouchLeaveEvent
  fullName: System.Windows.ContentElement.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.TouchLeave&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchMove
  id: TouchMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchMove
  nameWithType: ContentElement.TouchMove
  fullName: System.Windows.ContentElement.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a finger moves on the screen while the finger is over this element."
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.TouchMoveEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>.      -   Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: ContentElement.TouchMoveEvent
  fullName: System.Windows.ContentElement.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.TouchMove&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchUp
  id: TouchUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchUp
  nameWithType: ContentElement.TouchUp
  fullName: System.Windows.ContentElement.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Occurs when a finger is raised off of the screen while the finger is over this element."
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.ContentElement.TouchUpEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|      -   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>.      -   Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes."
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: ContentElement.TouchUpEvent
  fullName: System.Windows.ContentElement.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifies the <xref href=&quot;System.Windows.ContentElement.TouchUp&quot;></xref> routed event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.ContentElement.#ctor
  parent: System.Windows.ContentElement
  isExternal: false
  name: ContentElement()
  nameWithType: ContentElement.ContentElement()
  fullName: System.Windows.ContentElement.ContentElement()
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.ContentElement.AllowDrop
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
  fullName: System.Windows.ContentElement.AllowDrop
- uid: System.Windows.ContentElement.AllowDropProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDropProperty
  nameWithType: ContentElement.AllowDropProperty
  fullName: System.Windows.ContentElement.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
  fullName: System.Windows.ContentElement.AreAnyTouchesCaptured
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.ContentElement.AreAnyTouchesOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
  fullName: System.Windows.ContentElement.AreAnyTouchesOver
- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: ContentElement.AreAnyTouchesOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesOverProperty
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.ContentElement.CaptureMouse
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureMouse()
  nameWithType: ContentElement.CaptureMouse()
  fullName: System.Windows.ContentElement.CaptureMouse()
- uid: System.Windows.ContentElement.CaptureStylus
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureStylus()
  nameWithType: ContentElement.CaptureStylus()
  fullName: System.Windows.ContentElement.CaptureStylus()
- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: ContentElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.ContentElement.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.ContentElement.CommandBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
  fullName: System.Windows.ContentElement.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.ContentElement.DragEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragEnter
  nameWithType: ContentElement.DragEnter
  fullName: System.Windows.ContentElement.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.ContentElement.DragEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragEnterEvent
  nameWithType: ContentElement.DragEnterEvent
  fullName: System.Windows.ContentElement.DragEnterEvent
- uid: System.Windows.ContentElement.DragLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragLeave
  nameWithType: ContentElement.DragLeave
  fullName: System.Windows.ContentElement.DragLeave
- uid: System.Windows.ContentElement.DragLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragLeaveEvent
  nameWithType: ContentElement.DragLeaveEvent
  fullName: System.Windows.ContentElement.DragLeaveEvent
- uid: System.Windows.ContentElement.DragOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragOver
  nameWithType: ContentElement.DragOver
  fullName: System.Windows.ContentElement.DragOver
- uid: System.Windows.ContentElement.DragOverEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragOverEvent
  nameWithType: ContentElement.DragOverEvent
  fullName: System.Windows.ContentElement.DragOverEvent
- uid: System.Windows.ContentElement.Drop
  parent: System.Windows.ContentElement
  isExternal: false
  name: Drop
  nameWithType: ContentElement.Drop
  fullName: System.Windows.ContentElement.Drop
- uid: System.Windows.ContentElement.DropEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DropEvent
  nameWithType: ContentElement.DropEvent
  fullName: System.Windows.ContentElement.DropEvent
- uid: System.Windows.ContentElement.Focus
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focus()
  nameWithType: ContentElement.Focus()
  fullName: System.Windows.ContentElement.Focus()
- uid: System.Windows.ContentElement.Focusable
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focusable
  nameWithType: ContentElement.Focusable
  fullName: System.Windows.ContentElement.Focusable
- uid: System.Windows.ContentElement.FocusableChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: FocusableChanged
  nameWithType: ContentElement.FocusableChanged
  fullName: System.Windows.ContentElement.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.ContentElement.FocusableProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: FocusableProperty
  nameWithType: ContentElement.FocusableProperty
  fullName: System.Windows.ContentElement.FocusableProperty
- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.ContentElement.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.ContentElement.GetUIParentCore
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: ContentElement.GetUIParentCore()
  fullName: System.Windows.ContentElement.GetUIParentCore()
- uid: System.Windows.ContentElement.GiveFeedback
  parent: System.Windows.ContentElement
  isExternal: false
  name: GiveFeedback
  nameWithType: ContentElement.GiveFeedback
  fullName: System.Windows.ContentElement.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.ContentElement.GiveFeedbackEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: ContentElement.GiveFeedbackEvent
  fullName: System.Windows.ContentElement.GiveFeedbackEvent
- uid: System.Windows.ContentElement.GotFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotFocus
  nameWithType: ContentElement.GotFocus
  fullName: System.Windows.ContentElement.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.ContentElement.GotFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotFocusEvent
  nameWithType: ContentElement.GotFocusEvent
  fullName: System.Windows.ContentElement.GotFocusEvent
- uid: System.Windows.ContentElement.GotKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: ContentElement.GotKeyboardFocus
  fullName: System.Windows.ContentElement.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.ContentElement.GotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: ContentElement.GotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.GotKeyboardFocusEvent
- uid: System.Windows.ContentElement.GotMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotMouseCapture
  nameWithType: ContentElement.GotMouseCapture
  fullName: System.Windows.ContentElement.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.ContentElement.GotMouseCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: ContentElement.GotMouseCaptureEvent
  fullName: System.Windows.ContentElement.GotMouseCaptureEvent
- uid: System.Windows.ContentElement.GotStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotStylusCapture
  nameWithType: ContentElement.GotStylusCapture
  fullName: System.Windows.ContentElement.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.ContentElement.GotStylusCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: ContentElement.GotStylusCaptureEvent
  fullName: System.Windows.ContentElement.GotStylusCaptureEvent
- uid: System.Windows.ContentElement.GotTouchCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotTouchCapture
  nameWithType: ContentElement.GotTouchCapture
  fullName: System.Windows.ContentElement.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.ContentElement.GotTouchCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: ContentElement.GotTouchCaptureEvent
  fullName: System.Windows.ContentElement.GotTouchCaptureEvent
- uid: System.Windows.ContentElement.HasAnimatedProperties
  parent: System.Windows.ContentElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
  fullName: System.Windows.ContentElement.HasAnimatedProperties
- uid: System.Windows.ContentElement.InputBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: InputBindings
  nameWithType: ContentElement.InputBindings
  fullName: System.Windows.ContentElement.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.ContentElement.IsEnabled
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
  fullName: System.Windows.ContentElement.IsEnabled
- uid: System.Windows.ContentElement.IsEnabledChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledChanged
  nameWithType: ContentElement.IsEnabledChanged
  fullName: System.Windows.ContentElement.IsEnabledChanged
- uid: System.Windows.ContentElement.IsEnabledCore
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
  fullName: System.Windows.ContentElement.IsEnabledCore
- uid: System.Windows.ContentElement.IsEnabledProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledProperty
  nameWithType: ContentElement.IsEnabledProperty
  fullName: System.Windows.ContentElement.IsEnabledProperty
- uid: System.Windows.ContentElement.IsFocused
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocused
  nameWithType: ContentElement.IsFocused
  fullName: System.Windows.ContentElement.IsFocused
- uid: System.Windows.ContentElement.IsFocusedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocusedProperty
  nameWithType: ContentElement.IsFocusedProperty
  fullName: System.Windows.ContentElement.IsFocusedProperty
- uid: System.Windows.ContentElement.IsInputMethodEnabled
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
  fullName: System.Windows.ContentElement.IsInputMethodEnabled
- uid: System.Windows.ContentElement.IsKeyboardFocused
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
  fullName: System.Windows.ContentElement.IsKeyboardFocused
- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: ContentElement.IsKeyboardFocusedChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusedChanged
- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: ContentElement.IsKeyboardFocusedProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusedProperty
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithin
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: ContentElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: ContentElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
- uid: System.Windows.ContentElement.IsMouseCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
  fullName: System.Windows.ContentElement.IsMouseCaptured
- uid: System.Windows.ContentElement.IsMouseCapturedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: ContentElement.IsMouseCapturedChanged
  fullName: System.Windows.ContentElement.IsMouseCapturedChanged
- uid: System.Windows.ContentElement.IsMouseCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: ContentElement.IsMouseCapturedProperty
  fullName: System.Windows.ContentElement.IsMouseCapturedProperty
- uid: System.Windows.ContentElement.IsMouseCaptureWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
  fullName: System.Windows.ContentElement.IsMouseCaptureWithin
- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: ContentElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinChanged
- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: ContentElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinProperty
- uid: System.Windows.ContentElement.IsMouseDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
  fullName: System.Windows.ContentElement.IsMouseDirectlyOver
- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: ContentElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverChanged
- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: ContentElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverProperty
- uid: System.Windows.ContentElement.IsMouseOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
  fullName: System.Windows.ContentElement.IsMouseOver
- uid: System.Windows.ContentElement.IsMouseOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: ContentElement.IsMouseOverProperty
  fullName: System.Windows.ContentElement.IsMouseOverProperty
- uid: System.Windows.ContentElement.IsStylusCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
  fullName: System.Windows.ContentElement.IsStylusCaptured
- uid: System.Windows.ContentElement.IsStylusCapturedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: ContentElement.IsStylusCapturedChanged
  fullName: System.Windows.ContentElement.IsStylusCapturedChanged
- uid: System.Windows.ContentElement.IsStylusCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: ContentElement.IsStylusCapturedProperty
  fullName: System.Windows.ContentElement.IsStylusCapturedProperty
- uid: System.Windows.ContentElement.IsStylusCaptureWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
  fullName: System.Windows.ContentElement.IsStylusCaptureWithin
- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: ContentElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinChanged
- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: ContentElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinProperty
- uid: System.Windows.ContentElement.IsStylusDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
  fullName: System.Windows.ContentElement.IsStylusDirectlyOver
- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: ContentElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverChanged
- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: ContentElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverProperty
- uid: System.Windows.ContentElement.IsStylusOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
  fullName: System.Windows.ContentElement.IsStylusOver
- uid: System.Windows.ContentElement.IsStylusOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: ContentElement.IsStylusOverProperty
  fullName: System.Windows.ContentElement.IsStylusOverProperty
- uid: System.Windows.ContentElement.KeyDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyDown
  nameWithType: ContentElement.KeyDown
  fullName: System.Windows.ContentElement.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.ContentElement.KeyDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyDownEvent
  nameWithType: ContentElement.KeyDownEvent
  fullName: System.Windows.ContentElement.KeyDownEvent
- uid: System.Windows.ContentElement.KeyUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyUp
  nameWithType: ContentElement.KeyUp
  fullName: System.Windows.ContentElement.KeyUp
- uid: System.Windows.ContentElement.KeyUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyUpEvent
  nameWithType: ContentElement.KeyUpEvent
  fullName: System.Windows.ContentElement.KeyUpEvent
- uid: System.Windows.ContentElement.LostFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostFocus
  nameWithType: ContentElement.LostFocus
  fullName: System.Windows.ContentElement.LostFocus
- uid: System.Windows.ContentElement.LostFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostFocusEvent
  nameWithType: ContentElement.LostFocusEvent
  fullName: System.Windows.ContentElement.LostFocusEvent
- uid: System.Windows.ContentElement.LostKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: ContentElement.LostKeyboardFocus
  fullName: System.Windows.ContentElement.LostKeyboardFocus
- uid: System.Windows.ContentElement.LostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: ContentElement.LostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.LostKeyboardFocusEvent
- uid: System.Windows.ContentElement.LostMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostMouseCapture
  nameWithType: ContentElement.LostMouseCapture
  fullName: System.Windows.ContentElement.LostMouseCapture
- uid: System.Windows.ContentElement.LostMouseCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: ContentElement.LostMouseCaptureEvent
  fullName: System.Windows.ContentElement.LostMouseCaptureEvent
- uid: System.Windows.ContentElement.LostStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostStylusCapture
  nameWithType: ContentElement.LostStylusCapture
  fullName: System.Windows.ContentElement.LostStylusCapture
- uid: System.Windows.ContentElement.LostStylusCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: ContentElement.LostStylusCaptureEvent
  fullName: System.Windows.ContentElement.LostStylusCaptureEvent
- uid: System.Windows.ContentElement.LostTouchCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostTouchCapture
  nameWithType: ContentElement.LostTouchCapture
  fullName: System.Windows.ContentElement.LostTouchCapture
- uid: System.Windows.ContentElement.LostTouchCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: ContentElement.LostTouchCaptureEvent
  fullName: System.Windows.ContentElement.LostTouchCaptureEvent
- uid: System.Windows.ContentElement.MouseDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseDown
  nameWithType: ContentElement.MouseDown
  fullName: System.Windows.ContentElement.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.ContentElement.MouseDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseDownEvent
  nameWithType: ContentElement.MouseDownEvent
  fullName: System.Windows.ContentElement.MouseDownEvent
- uid: System.Windows.ContentElement.MouseEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseEnter
  nameWithType: ContentElement.MouseEnter
  fullName: System.Windows.ContentElement.MouseEnter
- uid: System.Windows.ContentElement.MouseEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseEnterEvent
  nameWithType: ContentElement.MouseEnterEvent
  fullName: System.Windows.ContentElement.MouseEnterEvent
- uid: System.Windows.ContentElement.MouseLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeave
  nameWithType: ContentElement.MouseLeave
  fullName: System.Windows.ContentElement.MouseLeave
- uid: System.Windows.ContentElement.MouseLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: ContentElement.MouseLeaveEvent
  fullName: System.Windows.ContentElement.MouseLeaveEvent
- uid: System.Windows.ContentElement.MouseLeftButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: ContentElement.MouseLeftButtonDown
  fullName: System.Windows.ContentElement.MouseLeftButtonDown
- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: ContentElement.MouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonDownEvent
- uid: System.Windows.ContentElement.MouseLeftButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: ContentElement.MouseLeftButtonUp
  fullName: System.Windows.ContentElement.MouseLeftButtonUp
- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: ContentElement.MouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonUpEvent
- uid: System.Windows.ContentElement.MouseMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseMove
  nameWithType: ContentElement.MouseMove
  fullName: System.Windows.ContentElement.MouseMove
- uid: System.Windows.ContentElement.MouseMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseMoveEvent
  nameWithType: ContentElement.MouseMoveEvent
  fullName: System.Windows.ContentElement.MouseMoveEvent
- uid: System.Windows.ContentElement.MouseRightButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: ContentElement.MouseRightButtonDown
  fullName: System.Windows.ContentElement.MouseRightButtonDown
- uid: System.Windows.ContentElement.MouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: ContentElement.MouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.MouseRightButtonDownEvent
- uid: System.Windows.ContentElement.MouseRightButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: ContentElement.MouseRightButtonUp
  fullName: System.Windows.ContentElement.MouseRightButtonUp
- uid: System.Windows.ContentElement.MouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: ContentElement.MouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.MouseRightButtonUpEvent
- uid: System.Windows.ContentElement.MouseUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseUp
  nameWithType: ContentElement.MouseUp
  fullName: System.Windows.ContentElement.MouseUp
- uid: System.Windows.ContentElement.MouseUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseUpEvent
  nameWithType: ContentElement.MouseUpEvent
  fullName: System.Windows.ContentElement.MouseUpEvent
- uid: System.Windows.ContentElement.MouseWheel
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseWheel
  nameWithType: ContentElement.MouseWheel
  fullName: System.Windows.ContentElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.ContentElement.MouseWheelEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseWheelEvent
  nameWithType: ContentElement.MouseWheelEvent
  fullName: System.Windows.ContentElement.MouseWheelEvent
- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.ContentElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: ContentElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.ContentElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.ContentElement.OnCreateAutomationPeer
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: ContentElement.OnCreateAutomationPeer()
  fullName: System.Windows.ContentElement.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragLeave(DragEventArgs)
- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: ContentElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragOver(DragEventArgs)
- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: ContentElement.OnDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDrop(DragEventArgs)
- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyUp(KeyEventArgs)
- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseMove(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.ContentElement.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusUp(StylusEventArgs)
- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchDown(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchMove(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchUp(TouchEventArgs)
- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.ContentElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.ContentElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.ContentElement.PreviewDragEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragEnter
  nameWithType: ContentElement.PreviewDragEnter
  fullName: System.Windows.ContentElement.PreviewDragEnter
- uid: System.Windows.ContentElement.PreviewDragEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: ContentElement.PreviewDragEnterEvent
  fullName: System.Windows.ContentElement.PreviewDragEnterEvent
- uid: System.Windows.ContentElement.PreviewDragLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragLeave
  nameWithType: ContentElement.PreviewDragLeave
  fullName: System.Windows.ContentElement.PreviewDragLeave
- uid: System.Windows.ContentElement.PreviewDragLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: ContentElement.PreviewDragLeaveEvent
  fullName: System.Windows.ContentElement.PreviewDragLeaveEvent
- uid: System.Windows.ContentElement.PreviewDragOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragOver
  nameWithType: ContentElement.PreviewDragOver
  fullName: System.Windows.ContentElement.PreviewDragOver
- uid: System.Windows.ContentElement.PreviewDragOverEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: ContentElement.PreviewDragOverEvent
  fullName: System.Windows.ContentElement.PreviewDragOverEvent
- uid: System.Windows.ContentElement.PreviewDrop
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDrop
  nameWithType: ContentElement.PreviewDrop
  fullName: System.Windows.ContentElement.PreviewDrop
- uid: System.Windows.ContentElement.PreviewDropEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDropEvent
  nameWithType: ContentElement.PreviewDropEvent
  fullName: System.Windows.ContentElement.PreviewDropEvent
- uid: System.Windows.ContentElement.PreviewGiveFeedback
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: ContentElement.PreviewGiveFeedback
  fullName: System.Windows.ContentElement.PreviewGiveFeedback
- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: ContentElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.ContentElement.PreviewGiveFeedbackEvent
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: ContentElement.PreviewGotKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocus
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
- uid: System.Windows.ContentElement.PreviewKeyDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyDown
  nameWithType: ContentElement.PreviewKeyDown
  fullName: System.Windows.ContentElement.PreviewKeyDown
- uid: System.Windows.ContentElement.PreviewKeyDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: ContentElement.PreviewKeyDownEvent
  fullName: System.Windows.ContentElement.PreviewKeyDownEvent
- uid: System.Windows.ContentElement.PreviewKeyUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyUp
  nameWithType: ContentElement.PreviewKeyUp
  fullName: System.Windows.ContentElement.PreviewKeyUp
- uid: System.Windows.ContentElement.PreviewKeyUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: ContentElement.PreviewKeyUpEvent
  fullName: System.Windows.ContentElement.PreviewKeyUpEvent
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: ContentElement.PreviewLostKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocus
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
- uid: System.Windows.ContentElement.PreviewMouseDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseDown
  nameWithType: ContentElement.PreviewMouseDown
  fullName: System.Windows.ContentElement.PreviewMouseDown
- uid: System.Windows.ContentElement.PreviewMouseDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: ContentElement.PreviewMouseDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseDownEvent
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: ContentElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDown
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: ContentElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUp
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.ContentElement.PreviewMouseMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseMove
  nameWithType: ContentElement.PreviewMouseMove
  fullName: System.Windows.ContentElement.PreviewMouseMove
- uid: System.Windows.ContentElement.PreviewMouseMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: ContentElement.PreviewMouseMoveEvent
  fullName: System.Windows.ContentElement.PreviewMouseMoveEvent
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: ContentElement.PreviewMouseRightButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDown
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: ContentElement.PreviewMouseRightButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUp
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
- uid: System.Windows.ContentElement.PreviewMouseUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseUp
  nameWithType: ContentElement.PreviewMouseUp
  fullName: System.Windows.ContentElement.PreviewMouseUp
- uid: System.Windows.ContentElement.PreviewMouseUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: ContentElement.PreviewMouseUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseUpEvent
- uid: System.Windows.ContentElement.PreviewMouseWheel
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: ContentElement.PreviewMouseWheel
  fullName: System.Windows.ContentElement.PreviewMouseWheel
- uid: System.Windows.ContentElement.PreviewMouseWheelEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: ContentElement.PreviewMouseWheelEvent
  fullName: System.Windows.ContentElement.PreviewMouseWheelEvent
- uid: System.Windows.ContentElement.PreviewQueryContinueDrag
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: ContentElement.PreviewQueryContinueDrag
  fullName: System.Windows.ContentElement.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: ContentElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.ContentElement.PreviewQueryContinueDragEvent
- uid: System.Windows.ContentElement.PreviewStylusButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: ContentElement.PreviewStylusButtonDown
  fullName: System.Windows.ContentElement.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: ContentElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonDownEvent
- uid: System.Windows.ContentElement.PreviewStylusButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: ContentElement.PreviewStylusButtonUp
  fullName: System.Windows.ContentElement.PreviewStylusButtonUp
- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: ContentElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonUpEvent
- uid: System.Windows.ContentElement.PreviewStylusDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusDown
  nameWithType: ContentElement.PreviewStylusDown
  fullName: System.Windows.ContentElement.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.ContentElement.PreviewStylusDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: ContentElement.PreviewStylusDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusDownEvent
- uid: System.Windows.ContentElement.PreviewStylusInAirMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: ContentElement.PreviewStylusInAirMove
  fullName: System.Windows.ContentElement.PreviewStylusInAirMove
- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: ContentElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
- uid: System.Windows.ContentElement.PreviewStylusInRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: ContentElement.PreviewStylusInRange
  fullName: System.Windows.ContentElement.PreviewStylusInRange
- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: ContentElement.PreviewStylusInRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusInRangeEvent
- uid: System.Windows.ContentElement.PreviewStylusMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusMove
  nameWithType: ContentElement.PreviewStylusMove
  fullName: System.Windows.ContentElement.PreviewStylusMove
- uid: System.Windows.ContentElement.PreviewStylusMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: ContentElement.PreviewStylusMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusMoveEvent
- uid: System.Windows.ContentElement.PreviewStylusOutOfRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: ContentElement.PreviewStylusOutOfRange
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRange
- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
- uid: System.Windows.ContentElement.PreviewStylusSystemGesture
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: ContentElement.PreviewStylusSystemGesture
  fullName: System.Windows.ContentElement.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: ContentElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
- uid: System.Windows.ContentElement.PreviewStylusUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusUp
  nameWithType: ContentElement.PreviewStylusUp
  fullName: System.Windows.ContentElement.PreviewStylusUp
- uid: System.Windows.ContentElement.PreviewStylusUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: ContentElement.PreviewStylusUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusUpEvent
- uid: System.Windows.ContentElement.PreviewTextInput
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTextInput
  nameWithType: ContentElement.PreviewTextInput
  fullName: System.Windows.ContentElement.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.ContentElement.PreviewTextInputEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: ContentElement.PreviewTextInputEvent
  fullName: System.Windows.ContentElement.PreviewTextInputEvent
- uid: System.Windows.ContentElement.PreviewTouchDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchDown
  nameWithType: ContentElement.PreviewTouchDown
  fullName: System.Windows.ContentElement.PreviewTouchDown
- uid: System.Windows.ContentElement.PreviewTouchDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: ContentElement.PreviewTouchDownEvent
  fullName: System.Windows.ContentElement.PreviewTouchDownEvent
- uid: System.Windows.ContentElement.PreviewTouchMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchMove
  nameWithType: ContentElement.PreviewTouchMove
  fullName: System.Windows.ContentElement.PreviewTouchMove
- uid: System.Windows.ContentElement.PreviewTouchMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: ContentElement.PreviewTouchMoveEvent
  fullName: System.Windows.ContentElement.PreviewTouchMoveEvent
- uid: System.Windows.ContentElement.PreviewTouchUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchUp
  nameWithType: ContentElement.PreviewTouchUp
  fullName: System.Windows.ContentElement.PreviewTouchUp
- uid: System.Windows.ContentElement.PreviewTouchUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: ContentElement.PreviewTouchUpEvent
  fullName: System.Windows.ContentElement.PreviewTouchUpEvent
- uid: System.Windows.ContentElement.QueryContinueDrag
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryContinueDrag
  nameWithType: ContentElement.QueryContinueDrag
  fullName: System.Windows.ContentElement.QueryContinueDrag
- uid: System.Windows.ContentElement.QueryContinueDragEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: ContentElement.QueryContinueDragEvent
  fullName: System.Windows.ContentElement.QueryContinueDragEvent
- uid: System.Windows.ContentElement.QueryCursor
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryCursor
  nameWithType: ContentElement.QueryCursor
  fullName: System.Windows.ContentElement.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.ContentElement.QueryCursorEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryCursorEvent
  nameWithType: ContentElement.QueryCursorEvent
  fullName: System.Windows.ContentElement.QueryCursorEvent
- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.ContentElement.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: ContentElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.ContentElement.ReleaseAllTouchCaptures()
- uid: System.Windows.ContentElement.ReleaseMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: ContentElement.ReleaseMouseCapture()
  fullName: System.Windows.ContentElement.ReleaseMouseCapture()
- uid: System.Windows.ContentElement.ReleaseStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: ContentElement.ReleaseStylusCapture()
  fullName: System.Windows.ContentElement.ReleaseStylusCapture()
- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.ContentElement.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: ContentElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeCommandBindings()
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: ContentElement.ShouldSerializeInputBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeInputBindings()
- uid: System.Windows.ContentElement.StylusButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonDown
  nameWithType: ContentElement.StylusButtonDown
  fullName: System.Windows.ContentElement.StylusButtonDown
- uid: System.Windows.ContentElement.StylusButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: ContentElement.StylusButtonDownEvent
  fullName: System.Windows.ContentElement.StylusButtonDownEvent
- uid: System.Windows.ContentElement.StylusButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonUp
  nameWithType: ContentElement.StylusButtonUp
  fullName: System.Windows.ContentElement.StylusButtonUp
- uid: System.Windows.ContentElement.StylusButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: ContentElement.StylusButtonUpEvent
  fullName: System.Windows.ContentElement.StylusButtonUpEvent
- uid: System.Windows.ContentElement.StylusDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusDown
  nameWithType: ContentElement.StylusDown
  fullName: System.Windows.ContentElement.StylusDown
- uid: System.Windows.ContentElement.StylusDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusDownEvent
  nameWithType: ContentElement.StylusDownEvent
  fullName: System.Windows.ContentElement.StylusDownEvent
- uid: System.Windows.ContentElement.StylusEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusEnter
  nameWithType: ContentElement.StylusEnter
  fullName: System.Windows.ContentElement.StylusEnter
- uid: System.Windows.ContentElement.StylusEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusEnterEvent
  nameWithType: ContentElement.StylusEnterEvent
  fullName: System.Windows.ContentElement.StylusEnterEvent
- uid: System.Windows.ContentElement.StylusInAirMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInAirMove
  nameWithType: ContentElement.StylusInAirMove
  fullName: System.Windows.ContentElement.StylusInAirMove
- uid: System.Windows.ContentElement.StylusInAirMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: ContentElement.StylusInAirMoveEvent
  fullName: System.Windows.ContentElement.StylusInAirMoveEvent
- uid: System.Windows.ContentElement.StylusInRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInRange
  nameWithType: ContentElement.StylusInRange
  fullName: System.Windows.ContentElement.StylusInRange
- uid: System.Windows.ContentElement.StylusInRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: ContentElement.StylusInRangeEvent
  fullName: System.Windows.ContentElement.StylusInRangeEvent
- uid: System.Windows.ContentElement.StylusLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusLeave
  nameWithType: ContentElement.StylusLeave
  fullName: System.Windows.ContentElement.StylusLeave
- uid: System.Windows.ContentElement.StylusLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: ContentElement.StylusLeaveEvent
  fullName: System.Windows.ContentElement.StylusLeaveEvent
- uid: System.Windows.ContentElement.StylusMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusMove
  nameWithType: ContentElement.StylusMove
  fullName: System.Windows.ContentElement.StylusMove
- uid: System.Windows.ContentElement.StylusMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusMoveEvent
  nameWithType: ContentElement.StylusMoveEvent
  fullName: System.Windows.ContentElement.StylusMoveEvent
- uid: System.Windows.ContentElement.StylusOutOfRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusOutOfRange
  nameWithType: ContentElement.StylusOutOfRange
  fullName: System.Windows.ContentElement.StylusOutOfRange
- uid: System.Windows.ContentElement.StylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: ContentElement.StylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.StylusOutOfRangeEvent
- uid: System.Windows.ContentElement.StylusSystemGesture
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusSystemGesture
  nameWithType: ContentElement.StylusSystemGesture
  fullName: System.Windows.ContentElement.StylusSystemGesture
- uid: System.Windows.ContentElement.StylusSystemGestureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: ContentElement.StylusSystemGestureEvent
  fullName: System.Windows.ContentElement.StylusSystemGestureEvent
- uid: System.Windows.ContentElement.StylusUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusUp
  nameWithType: ContentElement.StylusUp
  fullName: System.Windows.ContentElement.StylusUp
- uid: System.Windows.ContentElement.StylusUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusUpEvent
  nameWithType: ContentElement.StylusUpEvent
  fullName: System.Windows.ContentElement.StylusUpEvent
- uid: System.Windows.ContentElement.TextInput
  parent: System.Windows.ContentElement
  isExternal: false
  name: TextInput
  nameWithType: ContentElement.TextInput
  fullName: System.Windows.ContentElement.TextInput
- uid: System.Windows.ContentElement.TextInputEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TextInputEvent
  nameWithType: ContentElement.TextInputEvent
  fullName: System.Windows.ContentElement.TextInputEvent
- uid: System.Windows.ContentElement.TouchDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchDown
  nameWithType: ContentElement.TouchDown
  fullName: System.Windows.ContentElement.TouchDown
- uid: System.Windows.ContentElement.TouchDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchDownEvent
  nameWithType: ContentElement.TouchDownEvent
  fullName: System.Windows.ContentElement.TouchDownEvent
- uid: System.Windows.ContentElement.TouchEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchEnter
  nameWithType: ContentElement.TouchEnter
  fullName: System.Windows.ContentElement.TouchEnter
- uid: System.Windows.ContentElement.TouchEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchEnterEvent
  nameWithType: ContentElement.TouchEnterEvent
  fullName: System.Windows.ContentElement.TouchEnterEvent
- uid: System.Windows.ContentElement.TouchesCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
  fullName: System.Windows.ContentElement.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.ContentElement.TouchesCapturedWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
  fullName: System.Windows.ContentElement.TouchesCapturedWithin
- uid: System.Windows.ContentElement.TouchesDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
  fullName: System.Windows.ContentElement.TouchesDirectlyOver
- uid: System.Windows.ContentElement.TouchesOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
  fullName: System.Windows.ContentElement.TouchesOver
- uid: System.Windows.ContentElement.TouchLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchLeave
  nameWithType: ContentElement.TouchLeave
  fullName: System.Windows.ContentElement.TouchLeave
- uid: System.Windows.ContentElement.TouchLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: ContentElement.TouchLeaveEvent
  fullName: System.Windows.ContentElement.TouchLeaveEvent
- uid: System.Windows.ContentElement.TouchMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchMove
  nameWithType: ContentElement.TouchMove
  fullName: System.Windows.ContentElement.TouchMove
- uid: System.Windows.ContentElement.TouchMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchMoveEvent
  nameWithType: ContentElement.TouchMoveEvent
  fullName: System.Windows.ContentElement.TouchMoveEvent
- uid: System.Windows.ContentElement.TouchUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchUp
  nameWithType: ContentElement.TouchUp
  fullName: System.Windows.ContentElement.TouchUp
- uid: System.Windows.ContentElement.TouchUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchUpEvent
  nameWithType: ContentElement.TouchUpEvent
  fullName: System.Windows.ContentElement.TouchUpEvent
- uid: System.Windows.ContentElement.#ctor*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ContentElement
  nameWithType: ContentElement.ContentElement
- uid: System.Windows.ContentElement.AddHandler*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler
  nameWithType: ContentElement.AddHandler
- uid: System.Windows.ContentElement.AddToEventRoute*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddToEventRoute
  nameWithType: ContentElement.AddToEventRoute
- uid: System.Windows.ContentElement.AllowDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
- uid: System.Windows.ContentElement.ApplyAnimationClock*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: ContentElement.ApplyAnimationClock
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.ContentElement.AreAnyTouchesOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
- uid: System.Windows.ContentElement.BeginAnimation*
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation
  nameWithType: ContentElement.BeginAnimation
- uid: System.Windows.ContentElement.CaptureMouse*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureMouse
  nameWithType: ContentElement.CaptureMouse
- uid: System.Windows.ContentElement.CaptureStylus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureStylus
  nameWithType: ContentElement.CaptureStylus
- uid: System.Windows.ContentElement.CaptureTouch*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureTouch
  nameWithType: ContentElement.CaptureTouch
- uid: System.Windows.ContentElement.CommandBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
- uid: System.Windows.ContentElement.Focus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focus
  nameWithType: ContentElement.Focus
- uid: System.Windows.ContentElement.Focusable*
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focusable
  nameWithType: ContentElement.Focusable
- uid: System.Windows.ContentElement.GetAnimationBaseValue*
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: ContentElement.GetAnimationBaseValue
- uid: System.Windows.ContentElement.GetUIParentCore*
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: ContentElement.GetUIParentCore
- uid: System.Windows.ContentElement.HasAnimatedProperties*
  parent: System.Windows.ContentElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
- uid: System.Windows.ContentElement.InputBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: InputBindings
  nameWithType: ContentElement.InputBindings
- uid: System.Windows.ContentElement.IsEnabled*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
- uid: System.Windows.ContentElement.IsEnabledCore*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
- uid: System.Windows.ContentElement.IsFocused*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocused
  nameWithType: ContentElement.IsFocused
- uid: System.Windows.ContentElement.IsInputMethodEnabled*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
- uid: System.Windows.ContentElement.IsKeyboardFocused*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
- uid: System.Windows.ContentElement.IsMouseCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
- uid: System.Windows.ContentElement.IsMouseCaptureWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
- uid: System.Windows.ContentElement.IsMouseDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
- uid: System.Windows.ContentElement.IsMouseOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
- uid: System.Windows.ContentElement.IsStylusCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
- uid: System.Windows.ContentElement.IsStylusCaptureWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
- uid: System.Windows.ContentElement.IsStylusDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
- uid: System.Windows.ContentElement.IsStylusOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
- uid: System.Windows.ContentElement.MoveFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: MoveFocus
  nameWithType: ContentElement.MoveFocus
- uid: System.Windows.ContentElement.OnCreateAutomationPeer*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: ContentElement.OnCreateAutomationPeer
- uid: System.Windows.ContentElement.OnDragEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragEnter
  nameWithType: ContentElement.OnDragEnter
- uid: System.Windows.ContentElement.OnDragLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragLeave
  nameWithType: ContentElement.OnDragLeave
- uid: System.Windows.ContentElement.OnDragOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragOver
  nameWithType: ContentElement.OnDragOver
- uid: System.Windows.ContentElement.OnDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDrop
  nameWithType: ContentElement.OnDrop
- uid: System.Windows.ContentElement.OnGiveFeedback*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGiveFeedback
  nameWithType: ContentElement.OnGiveFeedback
- uid: System.Windows.ContentElement.OnGotFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotFocus
  nameWithType: ContentElement.OnGotFocus
- uid: System.Windows.ContentElement.OnGotKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: ContentElement.OnGotKeyboardFocus
- uid: System.Windows.ContentElement.OnGotMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: ContentElement.OnGotMouseCapture
- uid: System.Windows.ContentElement.OnGotStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: ContentElement.OnGotStylusCapture
- uid: System.Windows.ContentElement.OnGotTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: ContentElement.OnGotTouchCapture
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: ContentElement.OnIsMouseCapturedChanged
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: ContentElement.OnIsStylusCapturedChanged
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged
- uid: System.Windows.ContentElement.OnKeyDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyDown
  nameWithType: ContentElement.OnKeyDown
- uid: System.Windows.ContentElement.OnKeyUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyUp
  nameWithType: ContentElement.OnKeyUp
- uid: System.Windows.ContentElement.OnLostFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostFocus
  nameWithType: ContentElement.OnLostFocus
- uid: System.Windows.ContentElement.OnLostKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: ContentElement.OnLostKeyboardFocus
- uid: System.Windows.ContentElement.OnLostMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: ContentElement.OnLostMouseCapture
- uid: System.Windows.ContentElement.OnLostStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: ContentElement.OnLostStylusCapture
- uid: System.Windows.ContentElement.OnLostTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: ContentElement.OnLostTouchCapture
- uid: System.Windows.ContentElement.OnMouseDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseDown
  nameWithType: ContentElement.OnMouseDown
- uid: System.Windows.ContentElement.OnMouseEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseEnter
  nameWithType: ContentElement.OnMouseEnter
- uid: System.Windows.ContentElement.OnMouseLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeave
  nameWithType: ContentElement.OnMouseLeave
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: ContentElement.OnMouseLeftButtonDown
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: ContentElement.OnMouseLeftButtonUp
- uid: System.Windows.ContentElement.OnMouseMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseMove
  nameWithType: ContentElement.OnMouseMove
- uid: System.Windows.ContentElement.OnMouseRightButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: ContentElement.OnMouseRightButtonDown
- uid: System.Windows.ContentElement.OnMouseRightButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: ContentElement.OnMouseRightButtonUp
- uid: System.Windows.ContentElement.OnMouseUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseUp
  nameWithType: ContentElement.OnMouseUp
- uid: System.Windows.ContentElement.OnMouseWheel*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseWheel
  nameWithType: ContentElement.OnMouseWheel
- uid: System.Windows.ContentElement.OnPreviewDragEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: ContentElement.OnPreviewDragEnter
- uid: System.Windows.ContentElement.OnPreviewDragLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: ContentElement.OnPreviewDragLeave
- uid: System.Windows.ContentElement.OnPreviewDragOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: ContentElement.OnPreviewDragOver
- uid: System.Windows.ContentElement.OnPreviewDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDrop
  nameWithType: ContentElement.OnPreviewDrop
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: ContentElement.OnPreviewGiveFeedback
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus
- uid: System.Windows.ContentElement.OnPreviewKeyDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: ContentElement.OnPreviewKeyDown
- uid: System.Windows.ContentElement.OnPreviewKeyUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: ContentElement.OnPreviewKeyUp
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus
- uid: System.Windows.ContentElement.OnPreviewMouseDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: ContentElement.OnPreviewMouseDown
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp
- uid: System.Windows.ContentElement.OnPreviewMouseMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: ContentElement.OnPreviewMouseMove
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp
- uid: System.Windows.ContentElement.OnPreviewMouseUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: ContentElement.OnPreviewMouseUp
- uid: System.Windows.ContentElement.OnPreviewMouseWheel*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: ContentElement.OnPreviewMouseWheel
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: ContentElement.OnPreviewQueryContinueDrag
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: ContentElement.OnPreviewStylusButtonDown
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: ContentElement.OnPreviewStylusButtonUp
- uid: System.Windows.ContentElement.OnPreviewStylusDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: ContentElement.OnPreviewStylusDown
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: ContentElement.OnPreviewStylusInAirMove
- uid: System.Windows.ContentElement.OnPreviewStylusInRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: ContentElement.OnPreviewStylusInRange
- uid: System.Windows.ContentElement.OnPreviewStylusMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: ContentElement.OnPreviewStylusMove
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: ContentElement.OnPreviewStylusOutOfRange
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: ContentElement.OnPreviewStylusSystemGesture
- uid: System.Windows.ContentElement.OnPreviewStylusUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: ContentElement.OnPreviewStylusUp
- uid: System.Windows.ContentElement.OnPreviewTextInput*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: ContentElement.OnPreviewTextInput
- uid: System.Windows.ContentElement.OnPreviewTouchDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: ContentElement.OnPreviewTouchDown
- uid: System.Windows.ContentElement.OnPreviewTouchMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: ContentElement.OnPreviewTouchMove
- uid: System.Windows.ContentElement.OnPreviewTouchUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: ContentElement.OnPreviewTouchUp
- uid: System.Windows.ContentElement.OnQueryContinueDrag*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: ContentElement.OnQueryContinueDrag
- uid: System.Windows.ContentElement.OnQueryCursor*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryCursor
  nameWithType: ContentElement.OnQueryCursor
- uid: System.Windows.ContentElement.OnStylusButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: ContentElement.OnStylusButtonDown
- uid: System.Windows.ContentElement.OnStylusButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: ContentElement.OnStylusButtonUp
- uid: System.Windows.ContentElement.OnStylusDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusDown
  nameWithType: ContentElement.OnStylusDown
- uid: System.Windows.ContentElement.OnStylusEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusEnter
  nameWithType: ContentElement.OnStylusEnter
- uid: System.Windows.ContentElement.OnStylusInAirMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: ContentElement.OnStylusInAirMove
- uid: System.Windows.ContentElement.OnStylusInRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInRange
  nameWithType: ContentElement.OnStylusInRange
- uid: System.Windows.ContentElement.OnStylusLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusLeave
  nameWithType: ContentElement.OnStylusLeave
- uid: System.Windows.ContentElement.OnStylusMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusMove
  nameWithType: ContentElement.OnStylusMove
- uid: System.Windows.ContentElement.OnStylusOutOfRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: ContentElement.OnStylusOutOfRange
- uid: System.Windows.ContentElement.OnStylusSystemGesture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: ContentElement.OnStylusSystemGesture
- uid: System.Windows.ContentElement.OnStylusUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusUp
  nameWithType: ContentElement.OnStylusUp
- uid: System.Windows.ContentElement.OnTextInput*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTextInput
  nameWithType: ContentElement.OnTextInput
- uid: System.Windows.ContentElement.OnTouchDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchDown
  nameWithType: ContentElement.OnTouchDown
- uid: System.Windows.ContentElement.OnTouchEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchEnter
  nameWithType: ContentElement.OnTouchEnter
- uid: System.Windows.ContentElement.OnTouchLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchLeave
  nameWithType: ContentElement.OnTouchLeave
- uid: System.Windows.ContentElement.OnTouchMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchMove
  nameWithType: ContentElement.OnTouchMove
- uid: System.Windows.ContentElement.OnTouchUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchUp
  nameWithType: ContentElement.OnTouchUp
- uid: System.Windows.ContentElement.PredictFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: PredictFocus
  nameWithType: ContentElement.PredictFocus
- uid: System.Windows.ContentElement.RaiseEvent*
  parent: System.Windows.ContentElement
  isExternal: false
  name: RaiseEvent
  nameWithType: ContentElement.RaiseEvent
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: ContentElement.ReleaseAllTouchCaptures
- uid: System.Windows.ContentElement.ReleaseMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: ContentElement.ReleaseMouseCapture
- uid: System.Windows.ContentElement.ReleaseStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: ContentElement.ReleaseStylusCapture
- uid: System.Windows.ContentElement.ReleaseTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: ContentElement.ReleaseTouchCapture
- uid: System.Windows.ContentElement.RemoveHandler*
  parent: System.Windows.ContentElement
  isExternal: false
  name: RemoveHandler
  nameWithType: ContentElement.RemoveHandler
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: ContentElement.ShouldSerializeCommandBindings
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: ContentElement.ShouldSerializeInputBindings
- uid: System.Windows.ContentElement.TouchesCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
- uid: System.Windows.ContentElement.TouchesCapturedWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
- uid: System.Windows.ContentElement.TouchesDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
- uid: System.Windows.ContentElement.TouchesOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
