### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "Gere a coleção de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos."
  remarks: "ServicePointManager é uma classe estática utilizada para criar, manter e eliminar as instâncias de <xref:System.Net.ServicePoint>classe.</xref:System.Net.ServicePoint>       Quando uma aplicação solicita uma ligação a um recurso de Internet Uniform Resource Identifier (URI) através do objeto ServicePointManager, ServicePointManager devolve um <xref:System.Net.ServicePoint>objeto que contém informações de ligação para o anfitrião e o esquema identificada por URI.</xref:System.Net.ServicePoint> Se não houver existente <xref:System.Net.ServicePoint>do objeto para que anfitrião e o esquema, o objeto de ServicePointManager devolve existente <xref:System.Net.ServicePoint>objeto; caso contrário, cria um novo objeto ServicePointManager <xref:System.Net.ServicePoint>objeto.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       O .NET Framework 4.6 inclui uma nova funcionalidade de segurança que impede os algoritmos para ligações de hash e de cifras inseguras. As aplicações a utilizar o TLS/SSL através de APIs como HttpClient HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. e direcionada para o .NET Framework 4.6 obter o comportamento mais seguras por predefinição.       Os programadores podem querer par excluir este comportamento para manter a interoperabilidade com os seus serviços SSL3 existentes ou TLS com serviços RC4. [Este artigo](https://support.microsoft.com/kb/3069494) explica como modificar o código de modo a que o novo comportamento estiver desativado."
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define a política para certificados de servidor."
  remarks: "Quando a propriedade CertificatePolicy está definida como um <xref:System.Net.ICertificatePolicy>objeto de interface, o <xref:System.Net.ServicePointManager>objeto utiliza a política de certificado definida dessa instância em vez da política de certificado predefinido.</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       A política de certificado predefinido permite que os certificados válidos e certificados válidos que tenham expirado."
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "Um objeto que implementa o <xref href=&quot;System.Net.ICertificatePolicy&quot;> </xref> interface."
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define um <xref:System.Boolean>valor que indica se o certificado é verificado contra a lista de revogação de autoridade do certificado.</xref:System.Boolean>"
  remarks: "Quando estiver a CheckCertificateRevocationList `true`, o certificado é validado em relação a lista de revogação de autoridade de certificados, como parte do processo de validação de certificado. O valor predefinido é `false`."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a lista de revogação de certificados é verificada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define o número máximo de ligações simultâneas permitido por um <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto."
  remarks: "A propriedade DefaultConnectionLimit define o número máximo predefinido de ligações simultâneas que o <xref:System.Net.ServicePointManager>objeto atribui o <xref:System.Net.ServicePoint.ConnectionLimit%2A>propriedade ao criar <xref:System.Net.ServicePoint>objetos.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       Alterar a propriedade DefaultConnectionLimit não tem efeito em existente <xref:System.Net.ServicePoint>objetos; que isso afeta apenas <xref:System.Net.ServicePoint>objetos que são inicializados após a alteração.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> Se o valor desta propriedade não foi definido diretamente ou através da configuração, o valor está predefinida para a constante <xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      > [!NOTE] > Quaisquer alterações à propriedade DefaultConnectionLimit afetam ligações HTTP 1.0 e HTTP 1.1. Não é possível alterar separadamente o limite de ligação de protocolos HTTP 1.0 e HTTP 1.1. Quando utilizado no ambiente de servidor (ASP.NET) por predefinição, DefaultConnectionLimit maior número de ligações, que é 10."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "O número máximo de ligações simultâneas permitido por um <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto. O valor predefinido é 2. Quando uma aplicação é executada como um anfitrião do ASP.NET, não é possível alterar o valor desta propriedade através do ficheiro de configuração se a propriedade de configuração automática é definida como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. No entanto, pode alterar o valor programaticamente quando a propriedade de configuração automática é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Defina o valor preferencial uma vez, quando carrega o AppDomain."
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit é menor ou igual a 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "O número predefinido de ligações não persistentes (4) permitido um <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto ligado a um servidor posterior ou HTTP/1.0. Este campo é constante mas já não é utilizado o .NET Framework 2.0."
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "O número predefinido de ligações persistentes (2) permitido um <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto ligado a um HTTP/1.1 ou o servidor posterior. Este campo é constante e é utilizado para inicializar o <> </> *> propriedade se o valor da <> </> *> propriedade não foi definida diretamente ou através da configuração."
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define um valor que indica quanto tempo um serviço DNS (Domain Name) resolução é considerada válida."
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "O valor de limite de tempo, em milissegundos. Um valor de -1 indica um período de tempo limite infinito. O valor predefinido é de 120 000 milissegundos (dois minutos)."
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define um valor que indica se uma resolução de serviço de nomes de domínio (DNS) roda entre os endereços Internet Protocol (IP) aplicável."
  remarks: "Quando mais do que um endereço IP é associado um nome de anfitrião, uma resolução DNS normalmente devolve o primeiro endereço IP. Se definir esta propriedade para `true`, em seguida, as resoluções DNS subsequentes serão ciclo através de todos os endereços IP disponíveis para um anfitrião específico. Esta opção é útil quando um serviço utiliza DNS como uma mecanismo entre servidores ou clusters de servidores de balanceamento de carga."
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>Se uma resolução DNS sempre devolve o primeiro endereço IP para um anfitrião específico; caso contrário <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;> </xref> para este <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> instância."
  remarks: "Se não for especificado um valor no ficheiro de configuração, será assumida a propriedade EncryptionPolicy para <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> Isto é aplicado a uma sessão SSL/TLS no <xref:System.Net.ServicePointManager>instância.</xref:System.Net.ServicePointManager>       A utilização de cifras Null é necessária quando a política de encriptação está definida como <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "A política de encriptação a utilizar para este <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> instância."
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define um <xref:System.Boolean>valor que determina se 100-Continue o comportamento é utilizado.</xref:System.Boolean>"
  remarks: "Quando esta propriedade está definida como `true`, 100-Continue o comportamento é utilizado. Pedidos de cliente que utilizam o `PUT` e `POST` métodos irão adicionar um cabeçalho de esperado para o pedido se a propriedade Expect100Continue for `true` e <xref:System.Net.HttpWebRequest.ContentLength%2A>propriedade é maior que zero ou <xref:System.Net.HttpWebRequest.SendChunked%2A>propriedade for verdadeira.</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> O cliente irá esperar receber 100-Continue a resposta do servidor para indicar que o cliente deve enviar os dados a ser publicado. Este mecanismo permite aos clientes evitar o envio de grandes quantidades de dados através da rede quando o servidor, com base nos cabeçalhos de pedido, pretende rejeitar o pedido.       Por exemplo, suponha a propriedade Expect100Continue é `false`. Quando o pedido é enviado para o servidor, inclui os dados. Se, depois de ler os cabeçalhos de pedido, o servidor requer autenticação e terá de enviar uma resposta 401, o cliente tem reenviar os dados com os cabeçalhos de autenticação adequada.       Se esta propriedade é `true`, são enviados os cabeçalhos de pedido para o servidor. Se o servidor não rejeitou o pedido, envia um 100-Continue a resposta sinalização que os dados podem ser transmitidos. Se, como no exemplo anterior, o servidor requer autenticação, envia a resposta 401 e o cliente desnecessariamente não transmitiu os dados.       Alterar o valor desta propriedade não afeta existente <xref:System.Net.ServicePoint>objetos.</xref:System.Net.ServicePoint> Apenas novos <xref:System.Net.ServicePoint>objetos criados após a alteração são afetados.</xref:System.Net.ServicePoint>       A 100-Continue comportamento não é utilizado para pedidos de HTTP 1.0, mesmo se esta propriedade estiver definida como `true`.       O Expect 100-Continue comportamento totalmente descrito na secção de IETF RFC 2616 10.1.1."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para ativar a 100-Continue comportamento. O valor predefinido é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Localiza um existente <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto ou cria uma nova <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto para gerir as comunicações com especificado <xref:System.Uri>objeto.</xref:System.Uri>"
  remarks: "O método FindServicePoint devolve o <xref:System.Net.ServicePoint>objeto associado com o nome de anfitrião de Internet especificado.</xref:System.Net.ServicePoint> Se não <xref:System.Net.ServicePoint>objeto existe desse anfitrião, o <xref:System.Net.ServicePointManager>objeto cria um.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "O <xref:System.Uri>objeto o recurso de Internet para contactar.</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "O <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto que gere as comunicações para o pedido."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O número máximo de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos definidos no <xref:System.Net.ServicePointManager.MaxServicePoints*>foi atingido.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Localiza existente <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto ou cria uma nova <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto para gerir as comunicações com o especificado Uniform Resource Identifier (URI)."
  remarks: "O <xref:System.Net.ServicePointManager.FindServicePoint%2A>método devolve o <xref:System.Net.ServicePoint>objeto associado com o nome de anfitrião de Internet especificado.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Se não <xref:System.Net.ServicePoint>objeto existe desse anfitrião, o <xref:System.Net.ServicePointManager>objeto cria um.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "O URI do recurso de Internet ser contactados."
    - id: proxy
      type: System.Net.IWebProxy
      description: "Os dados de proxy para este pedido."
    return:
      type: System.Net.ServicePoint
      description: "O <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto que gere as comunicações para o pedido."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "O URI especificado no <code> uriString </code> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O número máximo de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos definidos no <xref:System.Net.ServicePointManager.MaxServicePoints*>foi atingido.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Localiza um existente <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto ou cria uma nova <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto para gerir as comunicações com especificado <xref:System.Uri>objeto.</xref:System.Uri>"
  remarks: "O <xref:System.Net.ServicePointManager.FindServicePoint%2A>método devolve o <xref:System.Net.ServicePoint>objeto associado com o nome de anfitrião de Internet especificado.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Se não <xref:System.Net.ServicePoint>objeto existe desse anfitrião, o <xref:System.Net.ServicePointManager>objeto cria um.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "A <xref:System.Uri>objeto que contém o endereço do recurso de Internet para contactar.</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "Os dados de proxy para este pedido."
    return:
      type: System.Net.ServicePoint
      description: "O <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto que gere as comunicações para o pedido."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O número máximo de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos definidos no <xref:System.Net.ServicePointManager.MaxServicePoints*>foi atingido.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define o tempo de inatividade máximo de um <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto."
  remarks: "A propriedade MaxServicePointIdleTime define o tempo de inatividade máximo que o <xref:System.Net.ServicePointManager>objeto atribui o <xref:System.Net.ServicePoint.MaxIdleTime%2A>propriedade ao criar <xref:System.Net.ServicePoint>objetos.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> As alterações a este valor afetam apenas <xref:System.Net.ServicePoint>objetos que são inicializados depois do valor é alterado.</xref:System.Net.ServicePoint>       Após um <xref:System.Net.ServicePoint>objeto está inativo há no tempo especificado no <xref:System.Net.ServicePoint.MaxIdleTime%2A>, é elegível para recolha de lixo.</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> A <xref:System.Net.ServicePoint>objeto está inativo quando associados a lista de ligações de <xref:System.Net.ServicePoint>objeto está vazio.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "O tempo de inatividade máximo, em milissegundos, de um <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objeto. O valor predefinido é 100 000 milissegundos (100 segundos)."
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime é inferior a &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; ou superior a &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define o número máximo de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos para manter em qualquer altura."
  remarks: "Quando é reduzir a propriedade MaxServicePoints abaixo o número de <xref:System.Net.ServicePoint>objetos atualmente em existência, o <xref:System.Net.ServicePointManager>elimina o <xref:System.Net.ServicePoint>objetos com o número de vezes maior inativo.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> Se o número de <xref:System.Net.ServicePoint>objetos com ligações ativas é superior ao valor de MaxServicePoints, o <xref:System.Net.ServicePointManager>eliminações de objetos a <xref:System.Net.ServicePoint>objetos à medida que ficam inativos.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "O número máximo de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos para manter. O valor predefinido é 0, o que não significa que não existe nenhum limite para o número de <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos."
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints é inferior a 0 ou maior do que &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "A definição deste valor de propriedade <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> faz com que todas as ligações de TCP de saída de HttpWebRequest para utilizar a opção de socket nativo SO_REUSE_UNICASTPORT no socket. Isto faz com que as portas de saída subjacentes ser partilhado. Isto é útil para cenários em que um grande número de ligações de saída é efetuado num curto período de tempo e os riscos de aplicação a ficar sem portas."
  remarks: "O valor predefinido é `false`."
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "Devolve <xref:System.Boolean>.</xref:System.Boolean>"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define o protocolo de segurança utilizado pelo <xref href=&quot;System.Net.ServicePoint&quot;> </xref> objetos geridos pelo <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> objeto."
  remarks: "Esta propriedade seleciona a versão do protocolo Secure Sockets Layer (SSL) ou Transport Layer Security (TLS) utilizar para novas ligações que utilizam o esquema de proteger o protocolo HTTPS (Hypertext Transfer) apenas; as ligações existentes não são alteradas.       Tenha em atenção de que nenhum valor predefinido é listado de propósito para esta propriedade. O horizontal de segurança altera constantemente e predefinido de protocolos e níveis de proteção são alterados ao longo do tempo para que possa para evitar fragilidades conhecidas. As predefinições irão variar consoante a configuração de máquina individual e, no qual o software está instalado e em que os patches tem sido aplicados.       O código nunca implicitamente deve depender utilizando um nível de proteção específico, ou se no pressuposto de que um nível de segurança especificado é utilizado por predefinição. Se a aplicação depende a utilização de um nível de segurança específica, tem de especificar explicitamente nesse nível e, em seguida, certifique-se certifique-se de que, na verdade, está a ser utilizado na ligação estabelecida. Além disso, o código deve ser concebido para ser robusto face a alterações ao qual são suportados os protocolos, como tal, as alterações, muitas vezes, são efetuadas com pouca aviso prévio para mitigar as ameaças emergentes.       O .NET Framework 4.6 inclui uma nova funcionalidade de segurança que impede os algoritmos para ligações de hash e de cifras inseguras. As aplicações a utilizar o TLS/SSL através de APIs como HttpClient HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. e direcionada para o .NET Framework 4.6 obter o comportamento mais seguras por predefinição.       Os programadores podem querer par excluir este comportamento para manter a interoperabilidade com os seus serviços SSL3 existentes ou TLS com serviços RC4. [Este artigo](https://support.microsoft.com/kb/3069494) explica como modificar o código de modo a que o novo comportamento estiver desativado."
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "Um dos valores definidos no <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> enumeração."
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O valor especificado para definir a propriedade não é um <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> valor de enumeração."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém ou define a chamada de retorno para validar um certificado de servidor."
  remarks: "Uma aplicação pode definir a propriedade ServerCertificateValidationCallback para um método a utilizar para uma validação personalizada pelo cliente de certificado de servidor. Ao efetuar uma validação personalizada, o `sender` parâmetro transmitido para o <xref:System.Net.Security.RemoteCertificateValidationCallback>pode ser um nome de cadeia de anfitrião ou um objecto derivado de <xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>, por exemplo), dependendo da <xref:System.Net.ServicePointManager.CertificatePolicy%2A>propriedade.</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       Quando uma validação personalizada não é utilizada, o nome do certificado é comparado com o nome de anfitrião utilizado para criar o pedido. Por exemplo, se <xref:System.Net.WebRequest.Create%28System.String%29>foi transmitido um parâmetro de &quot;https://www.contoso.com/default.hmtl&quot;, o comportamento predefinido é para o cliente verificar o certificado contra www.contoso.com.</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. O valor predefinido é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Ativa ou desativa a opção de ligação keep-alive de uma ligação de TCP."
  remarks: "Uma aplicação pode pedir que um fornecedor de TCP/IP ativar a utilização de pacotes ligação keep-alive de uma ligação de TCP. A predefinição é que a utilização de pacotes ligação keep-alive de uma ligação de TCP está desativada.       As predefinições quando um socket TCP é inicializado tempo limite de conjuntos da ligação keep-alive 2 horas e o intervalo de ligação keep-alive como 1 segundo. O `keepAliveTime` parâmetro especifica o tempo limite, em milissegundos, com nenhuma atividade até que seja enviado o primeiro pacote ligação keep-alive. O `keepAliveInterval` parâmetro especifica o intervalo, em milissegundos, entre quando são enviados pacotes de ligação keep-alive sucessivas se não for recebida sem confirmação. O número de sondas ligação keep-alive não pode ser alterado e é definido para 10.       Se uma ligação de TCP é removida como resultado da keep-alives, um <xref:System.Net.Sockets.SocketError>de <xref:System.Net.Sockets.SocketError>é devolvido para as chamadas em curso no socket, e as chamadas subsequentes falharão com um <xref:System.Net.Sockets.SocketError>dos <xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "Se definido como true, em seguida, a TCP ligação keep-alive opção a utilizar uma ligação TCP será ativado utilizando especificado `keepAliveTime` e `keepAliveInterval` valores.       Se definido como FALSO, em seguida, a opção de ligação keep-alive de TCP está desativada e os restantes parâmetros são ignorados.       O valor predefinido é falso."
    - id: keepAliveTime
      type: System.Int32
      description: "Especifica o tempo limite, em milissegundos, com nenhuma atividade até que seja enviado o primeiro pacote ligação keep-alive.       O valor tem de ser maior que 0.  Se um valor menor ou igual a zero é transmitido um <xref:System.ArgumentOutOfRangeException>é emitida.</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "Especifica o intervalo, em milissegundos, entre quando são enviados pacotes de ligação keep-alive sucessivas se não for recebida sem confirmação.       O valor tem de ser maior que 0.  Se um valor menor ou igual a zero é transmitido um <xref:System.ArgumentOutOfRangeException>é emitida.</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor especificado para <code> keepAliveTime </code> ou <code> keepAliveInterval </code> parâmetro é menor ou igual a 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Determina se o algoritmo de Nagle é utilizado pelos pontos de serviço geridos por este <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> objeto."
  remarks: "O algoritmo de Nagle é utilizado para reduzir o tráfego de rede através da colocação em memória intermédia pequenos pacotes de dados e transmiti-los como um pacote único. Este processo também é referido como &quot;nagling&quot;; Este é amplamente utilizado dado que reduz o número de pacotes transmitidos e reduz a sobrecarga por pacote.       Alterar o valor desta propriedade não afeta existente <xref:System.Net.ServicePoint>objetos.</xref:System.Net.ServicePoint> Apenas novos serviço pontos criados após a alteração são afetados.       O algoritmo de Nagle totalmente está descrito na 896 de RFC da IETF."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para utilizar o algoritmo de Nagle; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
