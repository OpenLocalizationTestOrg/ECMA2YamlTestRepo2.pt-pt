### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  id: CriticalHandleMinusOneIsInvalid
  children:
  - Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor
  - Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  langs:
  - csharp
  name: CriticalHandleMinusOneIsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  type: Class
  summary: "Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle."
  remarks: "This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle that uses a value of -1. Further derivations of this class (for example, file or registry handles) can specialize this further.       This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.      > [!NOTE] >  See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class CriticalHandleMinusOneIsInvalid : System.Runtime.InteropServices.CriticalHandle
  inheritance:
  - System.Runtime.InteropServices.CriticalHandle
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor
  id: '#ctor'
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  langs:
  - csharp
  name: CriticalHandleMinusOneIsInvalid()
  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Initializes a new instance of the <xref href=&quot;Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid&quot;></xref> class."
  syntax:
    content: protected CriticalHandleMinusOneIsInvalid ();
    parameters: []
  overload: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  langs:
  - csharp
  name: IsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  type: Property
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Gets a value that indicates whether the handle is invalid."
  remarks: "The common language runtime uses this property to determine whether critical finalization is required."
  syntax:
    content: public override bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the handle is not valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.CriticalHandle
  isExternal: false
  name: System.Runtime.InteropServices.CriticalHandle
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: CriticalHandleMinusOneIsInvalid()
  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor*
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: CriticalHandleMinusOneIsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid*
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid
