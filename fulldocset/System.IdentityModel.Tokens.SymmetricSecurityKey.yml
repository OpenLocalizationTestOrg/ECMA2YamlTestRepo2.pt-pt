### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  id: SymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey
  langs:
  - csharp
  name: SymmetricSecurityKey
  nameWithType: SymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey
  type: Class
  summary: "Representa a classe base abstrata de todas as chaves que são gerados com algoritmos simétricos."
  remarks: "Normalmente, esta classe é utilizada pela infraestrutura para a transformação XML a utilizar uma chave simétrica."
  syntax:
    content: 'public abstract class SymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.KeySize
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: SymmetricSecurityKey()
  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.SymmetricSecurityKey()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.SymmetricSecurityKey&quot;> </xref> classe."
  syntax:
    content: protected SymmetricSecurityKey ();
    parameters: []
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, gera uma chave derivada utilizando os parâmetros e o algoritmo de encriptação especificado para a chave atual."
  remarks: "Para especificar P SHA1 como o algoritmo criptográfico, utilize o <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>campo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>"
  syntax:
    content: public abstract byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: "URI que representa o algoritmo criptográfico a utilizar para gerar a chave derivada."
    - id: label
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o parâmetro de etiqueta para o algoritmo criptográfico.</xref:System.Byte>"
    - id: nonce
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o nonce é utilizado para criar uma chave derivada.</xref:System.Byte>"
    - id: derivedKeyLength
      type: System.Int32
      description: "O tamanho da chave derivada."
    - id: offset
      type: System.Int32
      description: "A posição em que a chave derivada está localizada na matriz de bytes que é devolvida este método."
    return:
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave derivada.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém uma transformação desencripta cifras texto utilizando o algoritmo de encriptação especificado."
  remarks: "Utilize os campos que representam os algoritmos de desencriptação no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "Um algoritmo criptográfico que desencripta cifras texto, tal como encriptados XML."
    - id: iv
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) para o algoritmo especificado.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Um <xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> que representa a transformação de desencriptação."
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém uma transformação que encripta XML utilizando o algoritmo de encriptação especificado."
  remarks: "Utilize os campos que representam os algoritmos de desencriptação no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "Algoritmos criptográficos que encripta XML."
    - id: iv
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) para o algoritmo especificado.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Um <xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> que representa a transformação de encriptação."
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: SymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém o tamanho, em bits e do vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) que é necessário para o algoritmo de encriptação especificado."
  syntax:
    content: public abstract int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo criptográfico para obter o tamanho do vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)."
    return:
      type: System.Int32
      description: "O tamanho, em bits e do vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) que é necessário para o algoritmo criptográfico especificado no <code> algorithm </code> parâmetro."
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém uma instância do algoritmo hash codificada especificado."
  remarks: "Utilize os campos que representam os algoritmos de hash codificada no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O o algoritmo de hash para obter uma instância de."
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref> que representa o o algoritmo de hash."
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém uma instância do algoritmo simétrico especificado."
  remarks: "Utilize os campos que representam os algoritmos simétricos no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo simétrico para obter uma instância de."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> que representa o algoritmo simétrico."
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: SymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém os bytes que representam a chave simétrica."
  syntax:
    content: public abstract byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave simétrica.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: SymmetricSecurityKey()
  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.SymmetricSecurityKey()
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: SymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: SymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: SymmetricSecurityKey
  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: SymmetricSecurityKey.GenerateDerivedKey
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: SymmetricSecurityKey.GetDecryptionTransform
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: SymmetricSecurityKey.GetEncryptionTransform
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: SymmetricSecurityKey.GetIVSize
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: SymmetricSecurityKey.GetSymmetricKey
