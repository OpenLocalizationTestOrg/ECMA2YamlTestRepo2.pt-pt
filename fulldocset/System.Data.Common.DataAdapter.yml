### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DataAdapter
  id: DataAdapter
  children:
  - System.Data.Common.DataAdapter.#ctor
  - System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.GetFillParameters
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: DataAdapter
  nameWithType: DataAdapter
  fullName: System.Data.Common.DataAdapter
  type: Class
  summary: "Represents a set of SQL commands and a database connection that are used to fill the <xref href=&quot;System.Data.DataSet&quot;></xref> and update the data source."
  remarks: "The DataAdapter serves as a bridge between a <xref:System.Data.DataSet> and a data source for retrieving and saving data. The DataAdapter provides this bridge by mapping <xref:System.Data.Common.DataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.IDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>.       If you are connecting to a SQL Server database, you can increase overall performance by using the <xref:System.Data.SqlClient.SqlDataAdapter> along with its associated <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection> objects. For OLE DB-supported data sources, use the DataAdapter with its associated <xref:System.Data.OleDb.OleDbCommand> and <xref:System.Data.OleDb.OleDbConnection> objects. For ODBC-supported data sources, use the DataAdapter with its associated <xref:System.Data.Odbc.OdbcCommand> and <xref:System.Data.Odbc.OdbcConnection> objects. For Oracle databases, use the DataAdapter with its associated <xref:System.Data.OracleClient.OracleCommand> and <xref:System.Data.OracleClient.OracleConnection> objects.       When an instance of DataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the DataAdapter constructor."
  syntax:
    content: 'public class DataAdapter : System.ComponentModel.Component, System.Data.IDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Data.IDataAdapter
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: DataAdapter()
  nameWithType: DataAdapter.DataAdapter()
  fullName: System.Data.Common.DataAdapter.DataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes a new instance of a <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref> class."
  remarks: "When an instance of <xref:System.Data.Common.DataAdapter> is created, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|   |<xref:System.Data.Common.DataAdapter.TableMappings%2A>|An array of <xref:System.Data.Common.DataAdapter.TableMappings%2A> objects.|       You can change the value of any of these properties through a separate call to the property."
  syntax:
    content: protected DataAdapter ();
    parameters: []
  overload: System.Data.Common.DataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  id: '#ctor(System.Data.Common.DataAdapter)'
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: DataAdapter(DataAdapter)
  nameWithType: DataAdapter.DataAdapter(DataAdapter)
  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes a new instance of a <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref> class from an existing object of the same type."
  remarks: "This overload of the <xref:System.Data.Common.DataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation."
  syntax:
    content: protected DataAdapter (System.Data.Common.DataAdapter from);
    parameters:
    - id: from
      type: System.Data.Common.DataAdapter
      description: "A <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref> object used to create the new <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref>."
  overload: System.Data.Common.DataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  id: AcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a value indicating whether <xref:System.Data.DataRow.AcceptChanges*> is called on a <xref href=&quot;System.Data.DataRow&quot;></xref> after it is added to the <xref href=&quot;System.Data.DataTable&quot;></xref> during any of the **Fill** operations."
  remarks: "If `false`, <xref:System.Data.DataRow.AcceptChanges%2A> is not called, and the newly added rows are treated as inserted rows."
  syntax:
    content: public bool AcceptChangesDuringFill { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called on the <xref href=&quot;System.Data.DataRow&quot;></xref>; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.AcceptChangesDuringFill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  id: AcceptChangesDuringUpdate
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets whether <xref:System.Data.DataRow.AcceptChanges*> is called during a <xref:System.Data.Common.DataAdapter.Update*>."
  remarks: "During a call to the `Update` method of a `DataAdapter`, the database can send data back to your ADO.NET application as output parameters or as the first returned record of a result set. ADO.NET can retrieve these values and update the corresponding columns in the <xref:System.Data.DataRow> being updated. By default, ADO.NET calls the `AcceptChanges` method of the `DataRow` after the update. However, if you want to merge the updated row back into another <xref:System.Data.DataTable>, you may want to preserver the original value of a primary key column. For example, a primary key column corresponding to an automatically incrementing column in the database, such as an identity column, can contain new values that are assigned by the database that do not match the original values assigned in the `DataRow`. By default, `AcceptChanges` is called implicitly after an update, and the original values in the row, which may have been <xref:System.Data.DataColumn.AutoIncrement%2A> values assigned by ADO.NET, are lost. You can preserve the original values in the `DataRow` by preventing `ADO.NET` from calling `AcceptChanges` after it performs an update on a row, by setting the AcceptChangesDuringUpdate property to `false`, which preserves the original values.      > [!NOTE] >  Setting the `AcceptChangesDuringUpdate` property to `false` applies to all data modifications, not only inserts. If you want to edit or delete rows in the same update, and if you want to suppress the call to `AcceptChanges` only for inserts, then instead of setting `AccceptChangesDuringUpdate` to `false`, use an event handler for the `RowUpdated` event of the `DataAdapter`. In the event handler you can check the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> to determine if the data modification is an insert, and if `true`, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>. For more information and an example, see [Retrieving Identity or Autonumber Values](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example demonstrates extracting changed rows from a `DataTable` and using a <xref:System.Data.SqlClient.SqlDataAdapter> to update the data source and retrieve a new identity column value. By setting the `AcceptChangesDuringUpdate` property of the <xref:System.Data.SqlClient.SqlDataAdapter> to `false` to preserve the original auto increment value, the new data can then be merged into the original <xref:System.Data.DataTable>, even if the new identity value does not match the original auto increment value in the `DataTable`.  \n  \n [!code-vb[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_7_1.vb)]\n [!code-cs[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/csharp/p-system.data.common.dat_7_1.cs)]"
  syntax:
    content: public bool AcceptChangesDuringUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called during an <xref:System.Data.Common.DataAdapter.Update*>; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.CloneInternals
  id: CloneInternals
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: CloneInternals()
  nameWithType: DataAdapter.CloneInternals()
  fullName: System.Data.Common.DataAdapter.CloneInternals()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Creates a copy of this instance of <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref>."
  remarks: "This method is deprecated. The <xref:System.Data.Common.DataAdapter.%23ctor%2A> constructor should be used instead of this method.       All the commands, the <xref:System.Data.Common.DataAdapter.TableMappings%2A>, the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, and the <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> are cloned. However, the connections for the commands are not copied, but shared. Thus, the cloned <xref:System.Data.Common.DataAdapter> can be used against the same connection as the original."
  syntax:
    content: protected virtual System.Data.Common.DataAdapter CloneInternals ();
    parameters: []
    return:
      type: System.Data.Common.DataAdapter
      description: "The cloned instance of <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref>."
  overload: System.Data.Common.DataAdapter.CloneInternals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError
  id: ContinueUpdateOnError
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a value that specifies whether to generate an exception when an error is encountered during a row update."
  remarks: "If `ContinueUpdateOnError` is set to `true`, no exception is thrown when an error occurs during the update of a row. The update of the row is skipped and the error information is placed in the <xref:System.Data.DataRow.RowError%2A> property of the row in error. The <xref:System.Data.Common.DataAdapter> continues to update subsequent rows.       If `ContinueUpdateOnError` is set to `false`, an exception is thrown when an error occurs during the update of a row."
  syntax:
    content: public bool ContinueUpdateOnError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to continue the update without generating an exception; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.ContinueUpdateOnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.CreateTableMappings
  id: CreateTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: CreateTableMappings()
  nameWithType: DataAdapter.CreateTableMappings()
  fullName: System.Data.Common.DataAdapter.CreateTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Creates a new <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;></xref>."
  syntax:
    content: protected virtual System.Data.Common.DataTableMappingCollection CreateTableMappings ();
    parameters: []
    return:
      type: System.Data.Common.DataTableMappingCollection
      description: "A new table mapping collection."
  overload: System.Data.Common.DataAdapter.CreateTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DataAdapter> references. This method invokes the `Dispose` method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Data.Common.DataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source."
  remarks: "The Fill method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before Fill is called, it is opened to retrieve data, then closed. If the connection is open before Fill is called, it remains open.       The Fill operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the Fill operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).       If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       You can use the Fill method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."
  syntax:
    content: public virtual int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to fill with records and, if necessary, schema."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  id: Fill(System.Data.DataTable,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDataReader)
  nameWithType: DataAdapter.Fill(DataTable,IDataReader)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in the <xref href=&quot;System.Data.DataTable&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataTable&quot;></xref> name and the specified <xref href=&quot;System.Data.IDataReader&quot;></xref>."
  remarks: "See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> to fill with records."
    - id: dataReader
      type: System.Data.IDataReader
      description: "An instance of <xref href=&quot;System.Data.IDataReader&quot;></xref>."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataTable&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  id: Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a specified range in the collection of <xref href=&quot;System.Data.DataTable&quot;></xref> objects to match those in the data source."
  remarks: "See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, System.Data.IDataReader dataReader, int startRecord, int maxRecords);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "A collection of <xref href=&quot;System.Data.DataTable&quot;></xref> objects to fill with records."
    - id: dataReader
      type: System.Data.IDataReader
      description: "An instance of <xref href=&quot;System.Data.IDataReader&quot;></xref>."
    - id: startRecord
      type: System.Int32
      description: "The zero-based index of the starting record."
    - id: maxRecords
      type: System.Int32
      description: "An integer indicating the maximum number of records."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataTable&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  id: Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String,IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a specified range in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataSet&quot;></xref> and <xref href=&quot;System.Data.DataTable&quot;></xref> names."
  remarks: "See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information."
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to fill with records."
    - id: srcTable
      type: System.String
      description: "A string indicating the name of the source table."
    - id: dataReader
      type: System.Data.IDataReader
      description: "An instance of <xref href=&quot;System.Data.IDataReader&quot;></xref>."
    - id: startRecord
      type: System.Int32
      description: "The zero-based index of the starting record."
    - id: maxRecords
      type: System.Int32
      description: "An integer indicating the maximum number of records."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillError
  id: FillError
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillError
  nameWithType: DataAdapter.FillError
  fullName: System.Data.Common.DataAdapter.FillError
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Returned when an error occurs during a fill operation."
  remarks: "The **FillError** event allows a user to determine whether or not the fill operation should continue after the error occurs. Examples of when the **FillError** event might occur are:      -   The data being added to a `DataSet` cannot be converted to a common language runtime type without losing precision.      -   The row being added contains data that violates a Constraint that must be enforced on a `DataColumn` in the `DataSet`."
  syntax:
    content: public event System.Data.FillErrorEventHandler FillError;
    return:
      type: System.Data.FillErrorEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillLoadOption
  id: FillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
  fullName: System.Data.Common.DataAdapter.FillLoadOption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets the <xref href=&quot;System.Data.LoadOption&quot;></xref> that determines how the adapter fills the <xref href=&quot;System.Data.DataTable&quot;></xref> from the <xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>."
  syntax:
    content: public System.Data.LoadOption FillLoadOption { get; set; }
    return:
      type: System.Data.LoadOption
      description: "A <xref href=&quot;System.Data.LoadOption&quot;></xref> value."
  overload: System.Data.Common.DataAdapter.FillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified <xref href=&quot;System.Data.DataSet&quot;></xref> and configures the schema to match that in the data source based on the specified <xref href=&quot;System.Data.SchemaType&quot;></xref>."
  remarks: "The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before FillSchema is called, it is opened to retrieve data and then closed. If the connection is open before FillSchema is called, it remains open.       A FillSchema operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.      > [!NOTE] >  The underlying data store may allow column attributes that are not supported in a <xref:System.Data.DataColumn>, which causes some column attributes to not translate correctly. For example, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] allows an identity column with a data type of tinyint whereas a <xref:System.Data.DataColumn> only allows Int16, Int32, and Int64 to have the <xref:System.Data.DataColumn.AutoIncrement%2A> property set. `FillSchema` silently ignores cases where the <xref:System.Data.DataColumn> cannot accurately mirror the data source and throws no exception.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.Common.DataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       FillSchema does not return any rows. Use the <xref:System.Data.Common.DataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."
  syntax:
    content: public virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> to be filled with the schema from the data source."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values."
    return:
      type: System.Data.DataTable[]
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> object that contains schema information returned from the data source."
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified <xref href=&quot;System.Data.DataSet&quot;></xref>."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDataReader dataReader);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> to be filled from the <xref href=&quot;System.Data.IDataReader&quot;></xref>."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values."
    - id: dataReader
      type: System.Data.IDataReader
      description: "The <xref href=&quot;System.Data.IDataReader&quot;></xref> to be used as the data source when filling the <xref href=&quot;System.Data.DataTable&quot;></xref>."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> object that contains schema information returned from the data source."
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified <xref href=&quot;System.Data.DataSet&quot;></xref>."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable, System.Data.IDataReader dataReader);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> to be filled from the <xref href=&quot;System.Data.IDataReader&quot;></xref>."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    - id: dataReader
      type: System.Data.IDataReader
      description: "The <xref href=&quot;System.Data.IDataReader&quot;></xref> to be used as the data source when filling the <xref href=&quot;System.Data.DataTable&quot;></xref>."
    return:
      type: System.Data.DataTable[]
      description: "A reference to a collection of <xref href=&quot;System.Data.DataTable&quot;></xref> objects that were added to the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DataAdapter.GetFillParameters()
  fullName: System.Data.Common.DataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets the parameters set by the user when executing an SQL SELECT statement."
  syntax:
    content: public virtual System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "An array of <xref href=&quot;System.Data.IDataParameter&quot;></xref> objects that contains the parameters set by the user."
  overload: System.Data.Common.DataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.HasTableMappings
  id: HasTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: HasTableMappings()
  nameWithType: DataAdapter.HasTableMappings()
  fullName: System.Data.Common.DataAdapter.HasTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Indicates whether a <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;></xref> has been created."
  syntax:
    content: protected bool HasTableMappings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;></xref> has been created; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.HasTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
  fullName: System.Data.Common.DataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Determines the action to take when incoming data does not have a matching table or column."
  remarks: "The <xref:System.Data.Common.DataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>."
  example:
  - "The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_4_1.vb)]\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_4_1.cs)]"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "One of the <xref href=&quot;System.Data.MissingMappingAction&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value set is not one of the <xref href=&quot;System.Data.MissingMappingAction&quot;></xref> values."
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
  fullName: System.Data.Common.DataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Determines the action to take when existing <xref href=&quot;System.Data.DataSet&quot;></xref> schema does not match incoming data."
  remarks: ''
  example:
  - "The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_9_1.vb)]\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_9_1.cs)]"
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "One of the <xref href=&quot;System.Data.MissingSchemaAction&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value set is not one of the <xref href=&quot;System.Data.MissingSchemaAction&quot;></xref> values."
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  id: OnFillError(System.Data.FillErrorEventArgs)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: OnFillError(FillErrorEventArgs)
  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)
  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Invoked when an error occurs during a <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;></xref>."
  syntax:
    content: protected virtual void OnFillError (System.Data.FillErrorEventArgs value);
    parameters:
    - id: value
      type: System.Data.FillErrorEventArgs
      description: "A <xref href=&quot;System.Data.FillErrorEventArgs&quot;></xref> object."
  overload: System.Data.Common.DataAdapter.OnFillError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption
  id: ResetFillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ResetFillLoadOption()
  nameWithType: DataAdapter.ResetFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Resets <xref:System.Data.Common.DataAdapter.FillLoadOption*> to its default state and causes &lt;xref:System.Data.Common.DataAdapter.Fill%2A?displayProperty=fullName&gt; to honor <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>."
  syntax:
    content: public void ResetFillLoadOption ();
    parameters: []
  overload: System.Data.Common.DataAdapter.ResetFillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  id: ReturnProviderSpecificTypes
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets whether the <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;></xref> method should return provider-specific values or common CLS-compliant values."
  remarks: "The default value is `false`."
  syntax:
    content: public virtual bool ReturnProviderSpecificTypes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;></xref> method should return provider-specific values; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to return common CLS-compliant values."
  overload: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  id: ShouldSerializeAcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeAcceptChangesDuringFill()
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Determines whether the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property should be persisted."
  syntax:
    content: public virtual bool ShouldSerializeAcceptChangesDuringFill ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property is persisted; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  id: ShouldSerializeFillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeFillLoadOption()
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Determines whether the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property should be persisted."
  syntax:
    content: public virtual bool ShouldSerializeFillLoadOption ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property is persisted; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  id: ShouldSerializeTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeTableMappings()
  nameWithType: DataAdapter.ShouldSerializeTableMappings()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Determines whether one or more <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> objects exist and they should be persisted."
  syntax:
    content: protected virtual bool ShouldSerializeTableMappings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if one or more <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> objects exist; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  id: System#Data#IDataAdapter#TableMappings
  isEii: true
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Indicates how a source table is mapped to a dataset table."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataAdapter> instance is cast to an <xref:System.Data.IDataAdapter> interface.       Fore more information, see <xref:System.Data.IDataAdapter.TableMappings%2A>."
  syntax:
    content: System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "A collection that provides the master mapping between the returned records and the <xref href=&quot;System.Data.DataSet&quot;></xref>. The default value is an empty collection."
  overload: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets a collection that provides the master mapping between a source table and a <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "When reconciling changes, the <xref:System.Data.Common.DataAdapter> uses the <xref:System.Data.Common.DataTableMappingCollection> collection to associate the column names used by the data source with the column names used by the <xref:System.Data.DataSet>."
  example:
  - "The following example uses a derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to add <xref:System.Data.Common.DataTableMapping> objects to its TableMappings collection and display a list of those mapped source tables. This example assumes that an <xref:System.Data.OleDb.OleDbDataAdapter> has already been created.  \n  \n [!code-vb[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_14_1.vb)]\n [!code-cs[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_14_1.cs)]"
  syntax:
    content: public System.Data.Common.DataTableMappingCollection TableMappings { get; }
    return:
      type: System.Data.Common.DataTableMappingCollection
      description: "A collection that provides the master mapping between the returned records and the <xref href=&quot;System.Data.DataSet&quot;></xref>. The default value is an empty collection."
  overload: System.Data.Common.DataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DataAdapter.Update(DataSet)
  fullName: System.Data.Common.DataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=&quot;System.Data.DataSet&quot;></xref> from a <xref href=&quot;System.Data.DataTable&quot;></xref> named &quot;Table.&quot;"
  remarks: "The update is performed on a by-row basis. For every inserted, modified, and deleted row, the Update method determines the type of change that has been performed on it (Insert, Update or Delete). Depending on the type of change, the `Insert`, `Update,` or `Delete` command template executes to propagate the modified row to the data source. When an application calls the Update method, the <xref:System.Data.Common.DataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The Update method retrieves rows from the table listed in the first mapping before performing an update. The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using Update, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> is called. This will raise both the <xref:System.Data.DataTable.RowChanging?displayProperty=fullName> and <xref:System.Data.DataTable.RowChanged?displayProperty=fullName> events for the updated <xref:System.Data.DataRow>.       Each command associated with the <xref:System.Data.Common.DataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a.NET data provider&quot;s `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET data provider&quot;s `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.       Calling the <xref:System.Data.DataSet.AcceptChanges%2A> method or <xref:System.Data.DataTable.AcceptChanges%2A> method will commit all changes in the <xref:System.Data.DataSet> or <xref:System.Data.DataTable>. If either of these methods are called before the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, no changes will be committed when the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, unless further changes have been made since <xref:System.Data.DataSet.AcceptChanges%2A> or <xref:System.Data.DataTable.AcceptChanges%2A> was called.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.   >    >  For every column that you propagate to the data source onUpdate, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to Update the data source.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_26_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_26_1.vb)]"
  syntax:
    content: public virtual int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> used to update the data source."
    return:
      type: System.Int32
      description: "The number of rows successfully updated from the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DataAdapter.#ctor
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter()
  nameWithType: DataAdapter.DataAdapter()
  fullName: System.Data.Common.DataAdapter.DataAdapter()
- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter(DataAdapter)
  nameWithType: DataAdapter.DataAdapter(DataAdapter)
  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)
- uid: System.Data.Common.DataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DataAdapter
  nameWithType: DataAdapter
  fullName: System.Data.Common.DataAdapter
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
- uid: System.Data.Common.DataAdapter.CloneInternals
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CloneInternals()
  nameWithType: DataAdapter.CloneInternals()
  fullName: System.Data.Common.DataAdapter.CloneInternals()
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError
- uid: System.Data.Common.DataAdapter.CreateTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CreateTableMappings()
  nameWithType: DataAdapter.CreateTableMappings()
  fullName: System.Data.Common.DataAdapter.CreateTableMappings()
- uid: System.Data.Common.DataTableMappingCollection
  parent: System.Data.Common
  isExternal: false
  name: DataTableMappingCollection
  nameWithType: DataTableMappingCollection
  fullName: System.Data.Common.DataTableMappingCollection
- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataTable,IDataReader)
  nameWithType: DataAdapter.Fill(DataTable,IDataReader)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataTable[],IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataSet,String,IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DataAdapter.FillError
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillError
  nameWithType: DataAdapter.FillError
  fullName: System.Data.Common.DataAdapter.FillError
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.Common.DataAdapter.FillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
  fullName: System.Data.Common.DataAdapter.FillLoadOption
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
- uid: System.Data.Common.DataAdapter.GetFillParameters
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DataAdapter.GetFillParameters()
  fullName: System.Data.Common.DataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DataAdapter.HasTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: HasTableMappings()
  nameWithType: DataAdapter.HasTableMappings()
  fullName: System.Data.Common.DataAdapter.HasTableMappings()
- uid: System.Data.Common.DataAdapter.MissingMappingAction
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
  fullName: System.Data.Common.DataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.Common.DataAdapter.MissingSchemaAction
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
  fullName: System.Data.Common.DataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: OnFillError(FillErrorEventArgs)
  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)
  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)
- uid: System.Data.FillErrorEventArgs
  parent: System.Data
  isExternal: false
  name: FillErrorEventArgs
  nameWithType: FillErrorEventArgs
  fullName: System.Data.FillErrorEventArgs
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ResetFillLoadOption()
  nameWithType: DataAdapter.ResetFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeAcceptChangesDuringFill()
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeFillLoadOption()
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeTableMappings()
  nameWithType: DataAdapter.ShouldSerializeTableMappings()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.Common.DataAdapter.TableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DataAdapter.Update(DataSet)
  fullName: System.Data.Common.DataAdapter.Update(DataSet)
- uid: System.Data.Common.DataAdapter.#ctor*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter
  nameWithType: DataAdapter.DataAdapter
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
- uid: System.Data.Common.DataAdapter.CloneInternals*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CloneInternals
  nameWithType: DataAdapter.CloneInternals
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
- uid: System.Data.Common.DataAdapter.CreateTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CreateTableMappings
  nameWithType: DataAdapter.CreateTableMappings
- uid: System.Data.Common.DataAdapter.Dispose*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DataAdapter.Dispose
- uid: System.Data.Common.DataAdapter.Fill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill
  nameWithType: DataAdapter.Fill
- uid: System.Data.Common.DataAdapter.FillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
- uid: System.Data.Common.DataAdapter.FillSchema*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DataAdapter.FillSchema
- uid: System.Data.Common.DataAdapter.GetFillParameters*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DataAdapter.GetFillParameters
- uid: System.Data.Common.DataAdapter.HasTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: HasTableMappings
  nameWithType: DataAdapter.HasTableMappings
- uid: System.Data.Common.DataAdapter.MissingMappingAction*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
- uid: System.Data.Common.DataAdapter.MissingSchemaAction*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
- uid: System.Data.Common.DataAdapter.OnFillError*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: OnFillError
  nameWithType: DataAdapter.OnFillError
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ResetFillLoadOption
  nameWithType: DataAdapter.ResetFillLoadOption
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeAcceptChangesDuringFill
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeFillLoadOption
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeTableMappings
  nameWithType: DataAdapter.ShouldSerializeTableMappings
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.TableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.Update*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Update
  nameWithType: DataAdapter.Update
