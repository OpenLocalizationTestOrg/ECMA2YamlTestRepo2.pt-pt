### YamlMime:ManagedReference
items:
- uid: System.IO.Pipes.AnonymousPipeClientStream
  id: AnonymousPipeClientStream
  children:
  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)
  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)
  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)
  - System.IO.Pipes.AnonymousPipeClientStream.Finalize
  - System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  - System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  langs:
  - csharp
  name: AnonymousPipeClientStream
  nameWithType: AnonymousPipeClientStream
  fullName: System.IO.Pipes.AnonymousPipeClientStream
  type: Class
  summary: "Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations."
  remarks: "Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The AnonymousPipeClientStream class enables a child process to connect to and exchange information with a parent process.       Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes.       The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is passed to the AnonymousPipeClientStream constructor as the `pipeHandleAsString` parameter.      > [!NOTE] >  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network."
  example:
  - "The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. This example creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>. It also creates an AnonymousPipeClientStream object in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>. The parent process then sends a user-supplied string to the child process. The string is displayed to the console.  \n  \n This example is for the client process, which is started by the server process. Name the resulting executable from the client code `pipeClient.exe` and copy it to the same directory as the server executable when you run this example. For the entire code example, including the code for both the pipe client and server, see [How to: Use Anonymous Pipes for Local Interprocess Communication](../Topic/How%20to:%20Use%20Anonymous%20Pipes%20for%20Local%20Interprocess%20Communication.md).  \n  \n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CSharp/t-system.io.pipes.anonym_0_1.cs)]\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CPP/t-system.io.pipes.anonym_0_1.cpp)]\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/VisualBasic/t-system.io.pipes.anonym_0_1.vb)]"
  syntax:
    content: 'public sealed class AnonymousPipeClientStream : System.IO.Pipes.PipeStream'
  inheritance:
  - System.IO.Stream
  - System.IO.Pipes.PipeStream
  implements: []
  inheritedMembers:
  - System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Pipes.PipeStream.CanRead
  - System.IO.Pipes.PipeStream.CanSeek
  - System.IO.Pipes.PipeStream.CanWrite
  - System.IO.Pipes.PipeStream.CheckPipePropertyOperations
  - System.IO.Pipes.PipeStream.CheckReadOperations
  - System.IO.Pipes.PipeStream.CheckWriteOperations
  - System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  - System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)
  - System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)
  - System.IO.Pipes.PipeStream.Flush
  - System.IO.Pipes.PipeStream.GetAccessControl
  - System.IO.Pipes.PipeStream.InBufferSize
  - System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)
  - System.IO.Pipes.PipeStream.IsAsync
  - System.IO.Pipes.PipeStream.IsConnected
  - System.IO.Pipes.PipeStream.IsHandleExposed
  - System.IO.Pipes.PipeStream.IsMessageComplete
  - System.IO.Pipes.PipeStream.Length
  - System.IO.Pipes.PipeStream.OutBufferSize
  - System.IO.Pipes.PipeStream.Position
  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.ReadByte
  - System.IO.Pipes.PipeStream.SafePipeHandle
  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)
  - System.IO.Pipes.PipeStream.SetLength(System.Int64)
  - System.IO.Pipes.PipeStream.WaitForPipeDrain
  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  name: AnonymousPipeClientStream(String)
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(String)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: "Initializes a new instance of the <see cref=&quot;T:System.IO.Pipes.AnonymousPipeClientStream&quot;></see> class with the specified string representation of the pipe handle."
  remarks: "For constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>."
  example:
  - "The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process.  \n  \n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/VisualBasic/m-system.io.pipes.anonym_0_1.vb)]\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/CSharp/m-system.io.pipes.anonym_0_1.cs)]"
  syntax:
    content: public AnonymousPipeClientStream (string pipeHandleAsString);
    parameters:
    - id: pipeHandleAsString
      type: System.String
      description: "A string that represents the pipe handle."
  overload: System.IO.Pipes.AnonymousPipeClientStream.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n    pipeHandleAsString is not a valid pipe handle."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)
  id: '#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)'
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  name: AnonymousPipeClientStream(PipeDirection,SafePipeHandle)
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: "Initializes a new instance of the <see cref=&quot;T:System.IO.Pipes.AnonymousPipeClientStream&quot;></see> class from the specified handle."
  remarks: "A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."
  example:
  - "The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \n  \n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/VisualBasic/9fcf339c-5c1c-4422-821c-_1.vb)]\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/CSharp/9fcf339c-5c1c-4422-821c-_1.cs)]"
  syntax:
    content: public AnonymousPipeClientStream (System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle);
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: "One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to ."
    - id: safePipeHandle
      type: Microsoft.Win32.SafeHandles.SafePipeHandle
      description: "A safe handle for the pipe that this  object will encapsulate."
  overload: System.IO.Pipes.AnonymousPipeClientStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    safePipeHandle is not a valid handle."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    safePipeHandle is ."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    direction is set to ."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error, such as a disk error, has occurred.       -or-       The stream has been closed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)
  id: '#ctor(System.IO.Pipes.PipeDirection,System.String)'
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  name: AnonymousPipeClientStream(PipeDirection,String)
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: "Initializes a new instance of the <see cref=&quot;T:System.IO.Pipes.AnonymousPipeClientStream&quot;></see> class with the specified pipe direction and a string representation of the pipe handle."
  remarks: "A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."
  example:
  - "The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \n  \n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CSharp/9b07c766-36fc-4774-abaa-_1.cs)]\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CPP/9b07c766-36fc-4774-abaa-_1.cpp)]\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/VisualBasic/9b07c766-36fc-4774-abaa-_1.vb)]"
  syntax:
    content: public AnonymousPipeClientStream (System.IO.Pipes.PipeDirection direction, string pipeHandleAsString);
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: "One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to ."
    - id: pipeHandleAsString
      type: System.String
      description: "A string that represents the pipe handle."
  overload: System.IO.Pipes.AnonymousPipeClientStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    pipeHandleAsString is an invalid handle."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    pipeHandleAsString is ."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    direction is set to ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize
  id: Finalize
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  name: Finalize()
  nameWithType: AnonymousPipeClientStream.Finalize()
  fullName: System.IO.Pipes.AnonymousPipeClientStream.Finalize()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: "Releases unmanaged resources and performs other cleanup operations before the <see cref=&quot;T:System.IO.Pipes.AnonymousPipeClientStream&quot;></see> instance is reclaimed by garbage collection."
  syntax:
    content: ~AnonymousPipeClientStream ();
    parameters: []
  overload: System.IO.Pipes.AnonymousPipeClientStream.Finalize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  id: ReadMode
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  name: ReadMode
  nameWithType: AnonymousPipeClientStream.ReadMode
  fullName: System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: "Sets the reading mode for the <see cref=&quot;T:System.IO.Pipes.AnonymousPipeClientStream&quot;></see> object."
  remarks: "Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode."
  example:
  - "The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process. The <xref:System.NotSupportedException> is caught when the ReadMode property is set to <xref:System.IO.Pipes.PipeTransmissionMode>.  \n  \n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CSharp/p-system.io.pipes.anonym_2_1.cs)]\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CPP/p-system.io.pipes.anonym_2_1.cpp)]\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/VisualBasic/p-system.io.pipes.anonym_2_1.vb)]"
  syntax:
    content: public override System.IO.Pipes.PipeTransmissionMode ReadMode { set; }
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: "The <see cref=&quot;T:System.IO.Pipes.PipeTransmissionMode&quot;></see> for the <see cref=&quot;T:System.IO.Pipes.AnonymousPipeClientStream&quot;></see> object."
  overload: System.IO.Pipes.AnonymousPipeClientStream.ReadMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The transmission mode is not valid. For anonymous pipes, only  is supported."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The transmission mode is ."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The connection is broken or another I/O error occurs."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The pipe is closed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  id: TransmissionMode
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  name: TransmissionMode
  nameWithType: AnonymousPipeClientStream.TransmissionMode
  fullName: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: "Gets the pipe transmission mode supported by the current pipe."
  remarks: "Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode."
  example:
  - "The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process and the TransmissionMode is displayed to the console.  \n  \n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CSharp/p-system.io.pipes.anonym_3_1.cs)]\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/CPP/p-system.io.pipes.anonym_3_1.cpp)]\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/VisualBasic/p-system.io.pipes.anonym_3_1.vb)]"
  syntax:
    content: public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get; }
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: "The <see cref=&quot;T:System.IO.Pipes.PipeTransmissionMode&quot;></see> supported by the current pipe."
  overload: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.IO.Pipes.PipeStream
  isExternal: false
  name: System.IO.Pipes.PipeStream
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: AnonymousPipeClientStream(String)
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(String)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: AnonymousPipeClientStream(PipeDirection,SafePipeHandle)
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)
- uid: System.IO.Pipes.PipeDirection
  parent: System.IO.Pipes
  isExternal: false
  name: PipeDirection
  nameWithType: PipeDirection
  fullName: System.IO.Pipes.PipeDirection
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafePipeHandle
  nameWithType: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: AnonymousPipeClientStream(PipeDirection,String)
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)
- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: Finalize()
  nameWithType: AnonymousPipeClientStream.Finalize()
  fullName: System.IO.Pipes.AnonymousPipeClientStream.Finalize()
- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: ReadMode
  nameWithType: AnonymousPipeClientStream.ReadMode
  fullName: System.IO.Pipes.AnonymousPipeClientStream.ReadMode
- uid: System.IO.Pipes.PipeTransmissionMode
  parent: System.IO.Pipes
  isExternal: false
  name: PipeTransmissionMode
  nameWithType: PipeTransmissionMode
  fullName: System.IO.Pipes.PipeTransmissionMode
- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: TransmissionMode
  nameWithType: AnonymousPipeClientStream.TransmissionMode
  fullName: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor*
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: AnonymousPipeClientStream
  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream
- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize*
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: Finalize
  nameWithType: AnonymousPipeClientStream.Finalize
- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode*
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: ReadMode
  nameWithType: AnonymousPipeClientStream.ReadMode
- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode*
  parent: System.IO.Pipes.AnonymousPipeClientStream
  isExternal: false
  name: TransmissionMode
  nameWithType: AnonymousPipeClientStream.TransmissionMode
