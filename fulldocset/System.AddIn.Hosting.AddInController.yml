### YamlMime:ManagedReference
items:
- uid: System.AddIn.Hosting.AddInController
  id: AddInController
  children:
  - System.AddIn.Hosting.AddInController.AddInEnvironment
  - System.AddIn.Hosting.AddInController.AppDomain
  - System.AddIn.Hosting.AddInController.GetAddInController(System.Object)
  - System.AddIn.Hosting.AddInController.Shutdown
  - System.AddIn.Hosting.AddInController.Token
  langs:
  - csharp
  name: AddInController
  nameWithType: AddInController
  fullName: System.AddIn.Hosting.AddInController
  type: Class
  summary: "Provides access to an add-in for a variety of tasks."
  remarks: "Use this class to perform the following tasks:      -   Use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property to obtain an <xref:System.AddIn.Hosting.AddInEnvironment> object for an add-in. Then use that object to activate other add-ins in the same application domain and process as the original add-in.      -   Use the <xref:System.AddIn.Hosting.AddInController.AppDomain%2A> property to obtain an <xref:System.AppDomain> object for an add-in. Then use that object to activate other add-ins in the same application domain as the original add-in. Note that because of limitations in cross-process remoting, this scenario will not work with add-ins that are activated in a separate process.      -   Use the <xref:System.AddIn.Hosting.AddInController.Token%2A> property to obtain an <xref:System.AddIn.Hosting.AddInToken> object that represents an add-in.      -   Shut down an add-in with the <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> method.       To obtain the controller for an add-in, call the <xref:System.AddIn.Hosting.AddInController.GetAddInController%2A> method and pass an instance of the add-in as its parameter."
  example:
  - "The following example activates an add-in within the same environment as a previously activated add-in by using an AddInController object.  \n  \n [!code-vb[AddInP3Host#8](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#8)]\n [!code-cs[AddInP3Host#8](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#8)]"
  syntax:
    content: public sealed class AddInController
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInController.AddInEnvironment
  id: AddInEnvironment
  parent: System.AddIn.Hosting.AddInController
  langs:
  - csharp
  name: AddInEnvironment
  nameWithType: AddInController.AddInEnvironment
  fullName: System.AddIn.Hosting.AddInController.AddInEnvironment
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Gets an <xref href=&quot;System.AddIn.Hosting.AddInEnvironment&quot;></xref> object."
  remarks: "Use this property to get the <xref:System.AddIn.Hosting.AddInEnvironment> object for an add-in. Then use that object to activate other add-ins in the same application domain and process as the original add-in."
  example:
  - "The following example activates a second add-in within the same environment as the first add-in.  \n  \n [!code-vb[AddInP3Host#8](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#8)]\n [!code-cs[AddInP3Host#8](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#8)]"
  syntax:
    content: public System.AddIn.Hosting.AddInEnvironment AddInEnvironment { get; }
    return:
      type: System.AddIn.Hosting.AddInEnvironment
      description: "An object that can be used to activate other add-ins in the same environment as the original add-in."
  overload: System.AddIn.Hosting.AddInController.AddInEnvironment*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInController.AppDomain
  id: AppDomain
  parent: System.AddIn.Hosting.AddInController
  langs:
  - csharp
  name: AppDomain
  nameWithType: AddInController.AppDomain
  fullName: System.AddIn.Hosting.AddInController.AppDomain
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Gets the application domain that contains an add-in."
  remarks: "Use this property to obtain an add-in&quot;s <xref:System.AppDomain> object and to activate other add-ins in the same application domain."
  example:
  - "The following example activates a second add-in in the same application domain as the first add-in.  \n  \n [!code-vb[AddInP3Host#9](~/add/codesnippet/visualbasic/addinp3hostvb/p3host.vb#9)]\n [!code-cs[AddInP3Host#9](~/add/codesnippet/csharp/addinP3Host/P3Host.cs#9)]"
  syntax:
    content: public AppDomain AppDomain { get; }
    return:
      type: System.AppDomain
      description: "The application domain of the add-in."
  overload: System.AddIn.Hosting.AddInController.AppDomain*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInController.GetAddInController(System.Object)
  id: GetAddInController(System.Object)
  parent: System.AddIn.Hosting.AddInController
  langs:
  - csharp
  name: GetAddInController(Object)
  nameWithType: AddInController.GetAddInController(Object)
  fullName: System.AddIn.Hosting.AddInController.GetAddInController(Object)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Obtains the controller for an add-in."
  remarks: "The <xref:System.AddIn.Hosting.AddInToken.Activate%2A> methods return an object that represents the host&quot;s view of the add-in."
  syntax:
    content: public static System.AddIn.Hosting.AddInController GetAddInController (object addIn);
    parameters:
    - id: addIn
      type: System.Object
      description: "The host view of the add-in."
    return:
      type: System.AddIn.Hosting.AddInController
      description: "The controller for the add-in."
  overload: System.AddIn.Hosting.AddInController.GetAddInController*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInController.Shutdown
  id: Shutdown
  parent: System.AddIn.Hosting.AddInController
  langs:
  - csharp
  name: Shutdown()
  nameWithType: AddInController.Shutdown()
  fullName: System.AddIn.Hosting.AddInController.Shutdown()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Disables an add-in."
  remarks: "This method breaks the communication pipeline between an add-in and its host. If the add-in was activated in an automatically generated application domain by using the <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> or <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.Security.PermissionSet%29> methods, the Shutdown method also unloads the application domain.       If the add-in was loaded into its own application domain, the Shutdown method also unloads the application domain.       If the add-in was loaded into an existing application domain, the host and pipeline segments will no longer have any references to that add-in. In this case, the add-in will be eligible to be reclaimed by garbage collection.       You can also use this class to shut down an add-in that is activated in an external process."
  example:
  - "The following example obtains the <xref:System.AddIn.Hosting.AddInController> object for a host view named `manager` and then shuts down the add-in.  \n  \n [!code-vb[AddInCollectionPipelineHost#6](~/add/codesnippet/visualbasic/ListAdaptersHost/Program.vb#6)]\n [!code-cs[AddInCollectionPipelineHost#6](~/add/codesnippet/csharp/ListAdaptersHost/Program.cs#6)]"
  syntax:
    content: public void Shutdown ();
    parameters: []
  overload: System.AddIn.Hosting.AddInController.Shutdown*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInController.Token
  id: Token
  parent: System.AddIn.Hosting.AddInController
  langs:
  - csharp
  name: Token
  nameWithType: AddInController.Token
  fullName: System.AddIn.Hosting.AddInController.Token
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Gets the token that represents the add-in."
  remarks: "Typically, you use this property to obtain a token to activate an add-in at a later time."
  syntax:
    content: public System.AddIn.Hosting.AddInToken Token { get; }
    return:
      type: System.AddIn.Hosting.AddInToken
      description: "An object that represents the add-in."
  overload: System.AddIn.Hosting.AddInController.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.AddIn.Hosting.AddInController.AddInEnvironment
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: AddInEnvironment
  nameWithType: AddInController.AddInEnvironment
  fullName: System.AddIn.Hosting.AddInController.AddInEnvironment
- uid: System.AddIn.Hosting.AddInEnvironment
  parent: System.AddIn.Hosting
  isExternal: false
  name: AddInEnvironment
  nameWithType: AddInEnvironment
  fullName: System.AddIn.Hosting.AddInEnvironment
- uid: System.AddIn.Hosting.AddInController.AppDomain
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: AppDomain
  nameWithType: AddInController.AppDomain
  fullName: System.AddIn.Hosting.AddInController.AppDomain
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Hosting.AddInController.GetAddInController(System.Object)
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: GetAddInController(Object)
  nameWithType: AddInController.GetAddInController(Object)
  fullName: System.AddIn.Hosting.AddInController.GetAddInController(Object)
- uid: System.AddIn.Hosting.AddInController
  parent: System.AddIn.Hosting
  isExternal: false
  name: AddInController
  nameWithType: AddInController
  fullName: System.AddIn.Hosting.AddInController
- uid: System.AddIn.Hosting.AddInController.Shutdown
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: Shutdown()
  nameWithType: AddInController.Shutdown()
  fullName: System.AddIn.Hosting.AddInController.Shutdown()
- uid: System.AddIn.Hosting.AddInController.Token
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: Token
  nameWithType: AddInController.Token
  fullName: System.AddIn.Hosting.AddInController.Token
- uid: System.AddIn.Hosting.AddInToken
  parent: System.AddIn.Hosting
  isExternal: false
  name: AddInToken
  nameWithType: AddInToken
  fullName: System.AddIn.Hosting.AddInToken
- uid: System.AddIn.Hosting.AddInController.AddInEnvironment*
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: AddInEnvironment
  nameWithType: AddInController.AddInEnvironment
- uid: System.AddIn.Hosting.AddInController.AppDomain*
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: AppDomain
  nameWithType: AddInController.AppDomain
- uid: System.AddIn.Hosting.AddInController.GetAddInController*
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: GetAddInController
  nameWithType: AddInController.GetAddInController
- uid: System.AddIn.Hosting.AddInController.Shutdown*
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: Shutdown
  nameWithType: AddInController.Shutdown
- uid: System.AddIn.Hosting.AddInController.Token*
  parent: System.AddIn.Hosting.AddInController
  isExternal: false
  name: Token
  nameWithType: AddInController.Token
