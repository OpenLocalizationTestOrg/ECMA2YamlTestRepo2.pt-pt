### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.PrincipalPermissionMode
  id: PrincipalPermissionMode
  children:
  - System.ServiceModel.Description.PrincipalPermissionMode.Always
  - System.ServiceModel.Description.PrincipalPermissionMode.Custom
  - System.ServiceModel.Description.PrincipalPermissionMode.None
  - System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles
  - System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups
  langs:
  - csharp
  name: PrincipalPermissionMode
  nameWithType: PrincipalPermissionMode
  fullName: System.ServiceModel.Description.PrincipalPermissionMode
  type: Enum
  summary: "Sets the mode for authorization checks when using the <xref href=&quot;System.Security.Permissions.PrincipalPermissionAttribute&quot;></xref> to control access to a method."
  remarks: "When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong.  \n  \n To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.  \n  \n [!code-cs[PrincipalPermissionMode#1](~/add/codesnippet/csharp/t-system.servicemodel.de_16_1.cs)]\n [!code-vb[PrincipalPermissionMode#1](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_1.vb)]  \n  \n You can also set the behavior in configuration by adding a [\\&lt;serviceAuthorization\\&gt;](../Topic/%3CserviceAuthorization%3E%20element.md) to the [\\&lt;serviceBehaviors\\&gt;](../Topic/%3CserviceBehaviors%3E.md) of a configuration file, as shown in the following code.  \n  \n [!code-cs[PrincipalPermissionMode#10](~/add/codesnippet/csharp/t-system.servicemodel.de_16_2.cs)]\n [!code-vb[PrincipalPermissionMode#10](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_2.vb)]  \n  \n The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting).  \n  \n [!code-cs[PrincipalPermissionMode#2](~/add/codesnippet/csharp/t-system.servicemodel.de_16_3.cs)]\n [!code-vb[PrincipalPermissionMode#2](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_3.vb)]  \n  \n## UseAspNetRoles  \n The UseAspNetRoles value is used for all credential types. This mode enables [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] to use the ASP.NET role provider to make authorization decisions.  \n  \n When the credential for a service is an X.509 certificate, you can set the `Name` property of the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.  \n  \n [!code-cs[PrincipalPermissionMode#3](~/add/codesnippet/csharp/t-system.servicemodel.de_16_4.cs)]\n [!code-vb[PrincipalPermissionMode#3](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_4.vb)]  \n  \n The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.  \n  \n It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example.  \n  \n [!code-cs[PrincipalPermissionMode#4](~/add/codesnippet/csharp/t-system.servicemodel.de_16_5.cs)]\n [!code-vb[PrincipalPermissionMode#4](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_5.vb)]  \n  \n If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database. By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>. You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class. The following code sets the role to `Administrators`. Note that the role provider must map the user account to that role.  \n  \n [!code-cs[PrincipalPermissionMode#13](~/add/codesnippet/csharp/t-system.servicemodel.de_16_6.cs)]\n [!code-vb[PrincipalPermissionMode#13](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_6.vb)]  \n  \n [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] the ASP.NET Role provider, see [How To: Use Role Manager in ASP.NET 2.0](http://go.microsoft.com/fwlink/?LinkId=96692).  \n  \n [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] using [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] and the role provider, see [How to: Use the ASP.NET Role Provider with a Service](~/add/includes/ajax-current-ext-md.md).  \n  \n## Custom  \n When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection. It must store the `IPrincipal` instance to the properties collection using the \"Principal\" string key, as shown in the following example.  \n  \n```  \nevaluationContext.Properties[\"Principal\"]=new CustomPrincipal(identity);  \n```  \n  \n## Background  \n The role-based security in [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code. By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] provides a set of PrincipalPermissionMode selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly."
  example:
  - "The following example shows how to specify UseAspNetRoles.  \n  \n [!code-cs[PrincipalPermissionMode#7](~/add/codesnippet/csharp/t-system.servicemodel.de_16_7.cs)]\n [!code-vb[PrincipalPermissionMode#7](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_7.vb)]  \n  \n The following example shows how to specify Custom.  \n  \n [!code-cs[PrincipalPermissionMode#8](~/add/codesnippet/csharp/t-system.servicemodel.de_16_8.cs)]\n [!code-vb[PrincipalPermissionMode#8](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_8.vb)]"
  syntax:
    content: public enum PrincipalPermissionMode
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.ServiceModel.Description.PrincipalPermissionMode.Always
  id: Always
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  langs:
  - csharp
  name: Always
  nameWithType: PrincipalPermissionMode.Always
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Always
  type: Field
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Always enables the user to specify a <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>."
  syntax:
    content: Always
    return:
      type: System.ServiceModel.Description.PrincipalPermissionMode
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.PrincipalPermissionMode.Custom
  id: Custom
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  langs:
  - csharp
  name: Custom
  nameWithType: PrincipalPermissionMode.Custom
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Custom
  type: Field
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Enables the user to specify a custom <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>."
  syntax:
    content: Custom
    return:
      type: System.ServiceModel.Description.PrincipalPermissionMode
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.PrincipalPermissionMode.None
  id: None
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  langs:
  - csharp
  name: None
  nameWithType: PrincipalPermissionMode.None
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.None
  type: Field
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "<xref:System.Threading.Thread.CurrentPrincipal*> is not set."
  syntax:
    content: None
    return:
      type: System.ServiceModel.Description.PrincipalPermissionMode
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles
  id: UseAspNetRoles
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  langs:
  - csharp
  name: UseAspNetRoles
  nameWithType: PrincipalPermissionMode.UseAspNetRoles
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles
  type: Field
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "<xref:System.Threading.Thread.CurrentPrincipal*> is set based on the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] role provider (<xref:System.Web.Security.RoleProvider>)."
  syntax:
    content: UseAspNetRoles
    return:
      type: System.ServiceModel.Description.PrincipalPermissionMode
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups
  id: UseWindowsGroups
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  langs:
  - csharp
  name: UseWindowsGroups
  nameWithType: PrincipalPermissionMode.UseWindowsGroups
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups
  type: Field
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "<xref:System.Threading.Thread.CurrentPrincipal*> is set based on Windows (<xref href=&quot;System.Security.Principal.WindowsPrincipal&quot;></xref>). If the user identity is not associated with a Windows account, anonymous Windows is used."
  syntax:
    content: UseWindowsGroups
    return:
      type: System.ServiceModel.Description.PrincipalPermissionMode
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.ServiceModel.Description.PrincipalPermissionMode.Always
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  isExternal: false
  name: Always
  nameWithType: PrincipalPermissionMode.Always
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Always
- uid: System.ServiceModel.Description.PrincipalPermissionMode
  parent: System.ServiceModel.Description
  isExternal: false
  name: PrincipalPermissionMode
  nameWithType: PrincipalPermissionMode
  fullName: System.ServiceModel.Description.PrincipalPermissionMode
- uid: System.ServiceModel.Description.PrincipalPermissionMode.Custom
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  isExternal: false
  name: Custom
  nameWithType: PrincipalPermissionMode.Custom
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Custom
- uid: System.ServiceModel.Description.PrincipalPermissionMode.None
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  isExternal: false
  name: None
  nameWithType: PrincipalPermissionMode.None
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.None
- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  isExternal: false
  name: UseAspNetRoles
  nameWithType: PrincipalPermissionMode.UseAspNetRoles
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles
- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups
  parent: System.ServiceModel.Description.PrincipalPermissionMode
  isExternal: false
  name: UseWindowsGroups
  nameWithType: PrincipalPermissionMode.UseWindowsGroups
  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups
