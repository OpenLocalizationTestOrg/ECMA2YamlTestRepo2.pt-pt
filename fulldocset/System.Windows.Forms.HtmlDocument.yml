### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.HtmlDocument
  id: HtmlDocument
  children:
  - System.Windows.Forms.HtmlDocument.ActiveElement
  - System.Windows.Forms.HtmlDocument.ActiveLinkColor
  - System.Windows.Forms.HtmlDocument.All
  - System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlDocument.BackColor
  - System.Windows.Forms.HtmlDocument.Body
  - System.Windows.Forms.HtmlDocument.Click
  - System.Windows.Forms.HtmlDocument.ContextMenuShowing
  - System.Windows.Forms.HtmlDocument.Cookie
  - System.Windows.Forms.HtmlDocument.CreateElement(System.String)
  - System.Windows.Forms.HtmlDocument.DefaultEncoding
  - System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlDocument.Domain
  - System.Windows.Forms.HtmlDocument.DomDocument
  - System.Windows.Forms.HtmlDocument.Encoding
  - System.Windows.Forms.HtmlDocument.Equals(System.Object)
  - System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)
  - System.Windows.Forms.HtmlDocument.Focus
  - System.Windows.Forms.HtmlDocument.Focused
  - System.Windows.Forms.HtmlDocument.Focusing
  - System.Windows.Forms.HtmlDocument.ForeColor
  - System.Windows.Forms.HtmlDocument.Forms
  - System.Windows.Forms.HtmlDocument.GetElementById(System.String)
  - System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)
  - System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)
  - System.Windows.Forms.HtmlDocument.GetHashCode
  - System.Windows.Forms.HtmlDocument.Images
  - System.Windows.Forms.HtmlDocument.InvokeScript(System.String)
  - System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])
  - System.Windows.Forms.HtmlDocument.LinkColor
  - System.Windows.Forms.HtmlDocument.Links
  - System.Windows.Forms.HtmlDocument.LosingFocus
  - System.Windows.Forms.HtmlDocument.MouseDown
  - System.Windows.Forms.HtmlDocument.MouseLeave
  - System.Windows.Forms.HtmlDocument.MouseMove
  - System.Windows.Forms.HtmlDocument.MouseOver
  - System.Windows.Forms.HtmlDocument.MouseUp
  - System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  - System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  - System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)
  - System.Windows.Forms.HtmlDocument.RightToLeft
  - System.Windows.Forms.HtmlDocument.Stop
  - System.Windows.Forms.HtmlDocument.Title
  - System.Windows.Forms.HtmlDocument.Url
  - System.Windows.Forms.HtmlDocument.VisitedLinkColor
  - System.Windows.Forms.HtmlDocument.Window
  - System.Windows.Forms.HtmlDocument.Write(System.String)
  langs:
  - csharp
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
  type: Class
  summary: "Provides top-level programmatic access to an HTML document hosted by the <see cref=&quot;T:System.Windows.Forms.WebBrowser&quot;></see> control."
  remarks: "HtmlDocument provides a managed wrapper around Internet Explorer&quot;s document object, also known as the HTML Document Object Model (DOM). You obtain an instance of HtmlDocument through the <xref:System.Windows.Forms.WebBrowser.Document%2A> property of the <xref:System.Windows.Forms.WebBrowser> control.       HTML tags inside of an HTML document can be nested inside one another. HtmlDocument thus represents a document tree, whose children are instances of the <xref:System.Windows.Forms.HtmlElement> class. The following code example shows a simple HTML file.      ```   <HTML>       <BODY>           <DIV name=&quot;Span1&quot;>Simple HTML Form</DIV>           <FORM>               <SPAN name=&quot;TextLabel&quot;>Enter Your Name:</SPAN>               <INPUT type=&quot;text&quot; size=&quot;20&quot; name=&quot;Text1&quot;>           </FORM>       </BODY>   </HTML>   ```       In this example, HtmlDocument represents the entire document inside the `HTML` tags. The `BODY`, `DIV`, `FORM` and `SPAN` tags are represented by individual <xref:System.Windows.Forms.HtmlElement> objects.       There are several ways you can access the elements in this tree. Use the <xref:System.Windows.Forms.HtmlDocument.Body%2A> property to access the `BODY` tag and all of its children. The <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> property gives you the <xref:System.Windows.Forms.HtmlElement> for the element on an HTML page that has user input focus. All elements within an HTML page can have a name; the <xref:System.Windows.Forms.HtmlDocument.All%2A> collection provides access to each <xref:System.Windows.Forms.HtmlElement> using its name as an index. <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A> will return an <xref:System.Windows.Forms.HtmlElementCollection> of all <xref:System.Windows.Forms.HtmlElement> objects with a given HTML tag name, such as `DIV` or `TABLE`. <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> will return the single <xref:System.Windows.Forms.HtmlElement> corresponding to the unique ID that you supply. <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> will return the <xref:System.Windows.Forms.HtmlElement> that can be found on the screen at the supplied mouse pointer coordinates.       You can also use the <xref:System.Windows.Forms.HtmlDocument.Forms%2A> and <xref:System.Windows.Forms.HtmlDocument.Images%2A> collection to iterate through elements that represent user input forms and graphics, respectively.       HtmlDocument is based on the unmanaged interfaces implemented by Internet Explorer&quot;s DHTML DOM: `IHTMLDocument`, `IHTMLDocument2`, `IHTMLDocument3`, and `IHTMLDocument4`. Only the most frequently used properties and methods on these unmanaged interfaces are exposed by HtmlDocument. You can access all other properties and methods directly using the <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> property, which you can cast to the desired unmanaged interface pointer.       An HTML document may contain frames, which are different windows inside of the <xref:System.Windows.Forms.WebBrowser> control. Each frame displays its own HTML page. The <xref:System.Windows.Forms.HtmlWindow.Frames%2A> collection is available through the <xref:System.Windows.Forms.HtmlDocument.Window%2A> property. You may also use the <xref:System.Windows.Forms.HtmlDocument.Window%2A> property to resize the displayed page, scroll the document, or display alerts and prompts to the user.       HtmlDocument exposes the most common events you would expect to handle when hosting HTML pages. For events not exposed directly by the interface, you can add a handler for the event using <xref:System.Windows.Forms.HtmlDocument.AttachEventHandler%2A>.       HTML files may contain `SCRIPT` tags that encapsulate code written in one of the Active Scripting languages, such as JScript or VBScript. The <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> method provides for execution of properties and methods defined in a `SCRIPT` tag.      > [!NOTE] >  While most of the properties, methods, and events on HtmlDocument have kept the same names as they have on the unmanaged DOM, some have been changed for consistency with the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."
  example:
  - "The following code example uses data from the Northwind database to create an `HTML TABLE` dynamically using <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. The <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> method is also used, first to add cells (`TD` elements) to rows (`TR` elements), then to add rows to the table, and finally to append the table to the end of the current document. The code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`. The code should be called after a document has been loaded.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#10](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#10)]\n [!code-cs[System.Windows.Forms.HtmlDocument#10](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#10)]"
  syntax:
    content: public sealed class HtmlDocument
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.ActiveElement
  id: ActiveElement
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: ActiveElement
  nameWithType: HtmlDocument.ActiveElement
  fullName: System.Windows.Forms.HtmlDocument.ActiveElement
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Provides the <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> which currently has user input focus."
  remarks: "When the document has focus, but no element of the document has been given focus, ActiveElement returns the element corresponding to the `<BODY>` tag.       If the document does not have focus, ActiveElement returns `null`.       If the current element with input focus is a cell (`TD`) in an HTML `TABLE` tag, ActiveElement will return the element that contains the `TABLE` element."
  syntax:
    content: public System.Windows.Forms.HtmlElement ActiveElement { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "The <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> which currently has user input focus."
  overload: System.Windows.Forms.HtmlDocument.ActiveElement*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.ActiveLinkColor
  id: ActiveLinkColor
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: ActiveLinkColor
  nameWithType: HtmlDocument.ActiveLinkColor
  fullName: System.Windows.Forms.HtmlDocument.ActiveLinkColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the <see cref=&quot;T:System.Drawing.Color&quot;></see> of a hyperlink when clicked by a user."
  remarks: "A link is active when a user is clicking on it. Change this property to change the color of the link prior to navigation.       The <xref:System.Drawing.Color> type in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] supports an `Alpha` value, but the HTML DOM does not. Therefore, `Alpha` will have no effect when assigned to this property."
  syntax:
    content: public System.Drawing.Color ActiveLinkColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "The <see cref=&quot;T:System.Drawing.Color&quot;></see> for active links."
  overload: System.Windows.Forms.HtmlDocument.ActiveLinkColor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.All
  id: All
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: All
  nameWithType: HtmlDocument.All
  fullName: System.Windows.Forms.HtmlDocument.All
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an instance of <see cref=&quot;T:System.Windows.Forms.HtmlElementCollection&quot;></see>, which stores all <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> objects for the document."
  remarks: "The All collection provides random access to any element in the HTML document, regardless of its position in the document tree. Use it to access any element in an HTML document by name, ID, or index. You may also iterate over all of the elements within a document.       Some elements, such as `HEAD` and `TITLE`, will never have names associated with them. All other elements will have names only if the author of the HTML file assigned them. You can access elements without names by ID or index.       You cannot add elements directly to the All collection, because all elements in an HTML file outside of the `HTML` tag must have a parent element. Use the <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> method or the <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property on <xref:System.Windows.Forms.HtmlElement> to add new elements to the tree."
  example:
  - "The following code example iterates through all of the elements in a document and sets `Enabled=True`, enabling any elements that may have been disabled by default to prevent user input while the document was loading. The code example requires that your application contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#1](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlDocument#1](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection All { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "The <see cref=&quot;T:System.Windows.Forms.HtmlElementCollection&quot;></see> of all elements in the document."
  overload: System.Windows.Forms.HtmlDocument.All*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)
  id: AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlDocument.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlDocument.AttachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds an event handler for the named HTML DOM event."
  remarks: "You should not attach an event to the document or one of its objects until the document has completed loading. The earliest you should call this method is in the <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> event of the <xref:System.Windows.Forms.WebBrowser> control.       This method allows you to attach handlers to unmanaged DOM events not exposed by <xref:System.Windows.Forms.HtmlDocument>. For more information about available unmanaged DOM events, see [Accessing Unexposed Members on the Managed HTML Document Object Model](../Topic/Accessing%20Unexposed%20Members%20on%20the%20Managed%20HTML%20Document%20Object%20Model.md) and the IHTMLDocument interfaces: [IHTMLDocument](http://go.microsoft.com/fwlink/?LinkId=104882), [IHTMLDocument2](http://go.microsoft.com/fwlink/?LinkId=104884), [IHTMLDocument3](http://go.microsoft.com/fwlink/?LinkId=104886), [IHTMLDocument4](http://go.microsoft.com/fwlink/?LinkId=104887), [IHTMLDocument5](http://go.microsoft.com/fwlink/?LinkId=104888)."
  syntax:
    content: public void AttachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "The name of the event you want to handle."
    - id: eventHandler
      type: System.EventHandler
      description: "The managed code that handles the event."
  overload: System.Windows.Forms.HtmlDocument.AttachEventHandler*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.BackColor
  id: BackColor
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: BackColor
  nameWithType: HtmlDocument.BackColor
  fullName: System.Windows.Forms.HtmlDocument.BackColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the background color of the HTML document."
  remarks: "BackColor will display when no other element occupies that area of the screen.       The <xref:System.Drawing.Color> type in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] supports an `Alpha` value, but the HTML DOM does not. Therefore, `Alpha` will have no effect when assigned to this property."
  syntax:
    content: public System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "The <see cref=&quot;T:System.Drawing.Color&quot;></see> of the document&quot;s background."
  overload: System.Windows.Forms.HtmlDocument.BackColor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Body
  id: Body
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Body
  nameWithType: HtmlDocument.Body
  fullName: System.Windows.Forms.HtmlDocument.Body
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> for the `BODY` tag."
  remarks: "An HTML document is split into two major sections:      -   `HEAD`, which contains the document&quot;s title, any document meta-data, and `SCRIPT` elements.      -   `BODY`, which contains all of the elements involved in the on-screen appearance of the document.       There is no equivalent `Head` property on <xref:System.Windows.Forms.HtmlDocument>. To obtain the `HEAD` element, use <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A>."
  example:
  - "The following code example creates a new `DIV` element and appends it to the bottom of the document using the <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> method.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#13](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#13)]\n [!code-cs[System.Windows.Forms.HtmlDocument#13](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#13)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement Body { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "The <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> object for the `BODY` tag."
  overload: System.Windows.Forms.HtmlDocument.Body*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Click
  id: Click
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Click
  nameWithType: HtmlDocument.Click
  fullName: System.Windows.Forms.HtmlDocument.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user clicks anywhere on the document."
  remarks: "For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example detects a click on the document, finds the element, and uses <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> to align the element with the top of the Web page.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#7](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlDocument#7](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Click;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.ContextMenuShowing
  id: ContextMenuShowing
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: ContextMenuShowing
  nameWithType: HtmlDocument.ContextMenuShowing
  fullName: System.Windows.Forms.HtmlDocument.ContextMenuShowing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user requests to display the document&quot;s context menu."
  remarks: "By default, if you right-click your mouse on a document or an element in a document, it will display a default context menu particular to the element. Use this event to cancel the display of the context menu and display one of your own."
  example:
  - "The following code example captures the ContextMenuShowing event and uses it to display a <xref:System.Windows.Forms.ContextMenuStrip>.  \n  \n [!code-cs[System.Windows.Forms.HtmlDocument#15](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Cookie
  id: Cookie
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Cookie
  nameWithType: HtmlDocument.Cookie
  fullName: System.Windows.Forms.HtmlDocument.Cookie
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the HTTP cookies associated with this document."
  remarks: "The Cookie property of <xref:System.Windows.Forms.HtmlDocument> exposes all cookies set for a Web page.       A *cookie* is an arbitrary name/value pair associated with a given Web page. Web developers use cookies to track when users visit or return to a Web site. A cookie is composed of multiple parts, called cookie crumbs, that determine the following:      -   The document set to which the cookie applies; its domain and path.      -   The name and value of the cookie.      -   The expiration date of the cookie.      -   Whether the cookie can only be sent using a secure connection.       The Cookie property may contain multiple cookies.       You can only use the Cookie property to set one cookie at a time."
  syntax:
    content: public string Cookie { get; set; }
    return:
      type: System.String
      description: "A &lt;xref:System.String&gt; containing a list of cookies, with each cookie separated by a semicolon."
  overload: System.Windows.Forms.HtmlDocument.Cookie*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: CreateElement(String)
  nameWithType: HtmlDocument.CreateElement(String)
  fullName: System.Windows.Forms.HtmlDocument.CreateElement(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a new <xref uid=&quot;langword_csharp_HtmlElement&quot; name=&quot;HtmlElement&quot; href=&quot;&quot;></xref> of the specified HTML tag type."
  remarks: "`elementTag` may be one of any of the supported HTML tags in Internet Explorer, except for `FRAME` or `IFRAME`.       CreateElement returns an element unattached to the current document tree. To add the element to the document, use either the <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> or <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> methods.       This method will not affect the state of an existing document&quot;s source code when you use the <xref:System.Windows.Forms.WebBrowser> control&quot;s **View Source** context menu command or the <xref:System.Windows.Forms.WebBrowser.DocumentText%2A> and <xref:System.Windows.Forms.WebBrowser.DocumentStream%2A> properties of the <xref:System.Windows.Forms.WebBrowser> control.       When you create new elements with CreateElement, you will not be able to set certain properties, such as `Name`. In cases where you need to set the Name attribute, assign them as HTML to the <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property of another object in the document."
  example:
  - "The following code example uses data from the Northwind database to create an HTML table using CreateElement. The <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> method is also used, first to add cells (`TD` elements) to rows (`TR` elements), then to add rows to the table, and finally to append the table to the end of the current document. The code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control called `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#10](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#10)]\n [!code-cs[System.Windows.Forms.HtmlDocument#10](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#10)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement CreateElement (string elementTag);
    parameters:
    - id: elementTag
      type: System.String
      description: "The name of the HTML element to create."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.CreateElement*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.DefaultEncoding
  id: DefaultEncoding
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: DefaultEncoding
  nameWithType: HtmlDocument.DefaultEncoding
  fullName: System.Windows.Forms.HtmlDocument.DefaultEncoding
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the encoding used by default for the current document."
  remarks: "The default encoding is the encoding the managed HTML Document Object Model (DOM) will attempt to use when the page is initially loaded. This encoding is derived either from Internet Explorer&quot;s **Encoding** settings, or from a `META` tag embedded within the page."
  syntax:
    content: public string DefaultEncoding { get; }
    return:
      type: System.String
      description: "The &lt;xref:System.String&gt; representing the encoding that the browser uses when the page is first displayed."
  overload: System.Windows.Forms.HtmlDocument.DefaultEncoding*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)
  id: DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlDocument.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlDocument.DetachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes an event handler from a named event on the HTML DOM."
  syntax:
    content: public void DetachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "The name of the event you want to cease handling."
    - id: eventHandler
      type: System.EventHandler
      description: "The managed code that handles the event."
  overload: System.Windows.Forms.HtmlDocument.DetachEventHandler*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Domain
  id: Domain
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Domain
  nameWithType: HtmlDocument.Domain
  fullName: System.Windows.Forms.HtmlDocument.Domain
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the string describing the domain of this document for security purposes."
  remarks: "By default, two Web pages in different frames are prevented from accessing each other&quot;s content using script; even www.microsoft.com and msdn.microsoft.com are, in this instance, considered different domains. To enable cross-frame scripting for pages from the same top-level domain, you can assign a new value to the Domain property. In the pervious URL example, setting Domain to microsoft.com would allow both pages to communicate with one another.       Strings assigned to the Domain property must be valid top-level domains. In the previous URL example, you can set Domain to microsoft.com, but not to .com, which would enable any page on the Internet to script a page&quot;s contents.       You cannot use the Domain property to enable cross-frame scripting for pages accessed using two different protocols. If one frame in your page comes from a Web server (the http:// protocol) and another comes from the file system (the file://) protocol, they will not be able to communicate with one another regardless of the value of the Domain property."
  syntax:
    content: public string Domain { get; set; }
    return:
      type: System.String
      description: "A valid domain."
  overload: System.Windows.Forms.HtmlDocument.Domain*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The argument for the `Domain` property must be a valid domain name using Domain Name System (DNS) conventions."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.DomDocument
  id: DomDocument
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: DomDocument
  nameWithType: HtmlDocument.DomDocument
  fullName: System.Windows.Forms.HtmlDocument.DomDocument
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the unmanaged interface pointer for this <see cref=&quot;T:System.Windows.Forms.HtmlDocument&quot;></see>."
  remarks: "<xref:System.Windows.Forms.HtmlDocument> is a wrapper for the Internet Explorer Document Object Model (DOM), which is written in COM. If you need to access unexposed properties or methods on the underlying COM interfaces, such as `IHTMLDocument2`, you can use this object to query for them.       To use the unmanaged interfaces, import the MSHTML library (mshtml.dll) into your application. However, you can also execute unexposed properties and methods using the `IDispatch::Invoke` method."
  example:
  - "The following code example casts the DomDocument to an `IHTMLDocument2` pointer and displays the value of the `lastModified` property, which tells when the owner of the document last updated its contents. The code example requires that you have a <xref:System.Windows.Forms.Button> on your form named `Button6`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#3](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#3)]\n [!code-cs[System.Windows.Forms.HtmlDocument#3](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#3)]"
  syntax:
    content: public object DomDocument { get; }
    return:
      type: System.Object
      description: "An &lt;xref:System.Object&gt; representing an `IDispatch` pointer to the unmanaged document."
  overload: System.Windows.Forms.HtmlDocument.DomDocument*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Encoding
  id: Encoding
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Encoding
  nameWithType: HtmlDocument.Encoding
  fullName: System.Windows.Forms.HtmlDocument.Encoding
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the character encoding for this document."
  syntax:
    content: public string Encoding { get; set; }
    return:
      type: System.String
      description: "The &lt;xref:System.String&gt; representing the current character encoding."
  overload: System.Windows.Forms.HtmlDocument.Encoding*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: HtmlDocument.Equals(Object)
  fullName: System.Windows.Forms.HtmlDocument.Equals(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Tests the object for equality against the current object."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to test."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)
  id: ExecCommand(System.String,System.Boolean,System.Object)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: ExecCommand(String,Boolean,Object)
  nameWithType: HtmlDocument.ExecCommand(String,Boolean,Object)
  fullName: System.Windows.Forms.HtmlDocument.ExecCommand(String,Boolean,Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes the specified command against the document."
  remarks: "ExecCommand exposes a large array of commands for which there are no methods exposed on <xref:System.Windows.Forms.HtmlDocument>. Using ExecCommand you can insert new HTML elements, select and format text, and clear any cached authentication credentials. For a full list of commands, see [Command Identifiers](http://go.microsoft.com/fwlink/?LinkId=198814).      > [!NOTE] >  Certain commands, such as copy, have return values. In the current implementation of ExecCommand, you cannot obtain a return value from your call. To retrieve return values, use the corresponding unmanaged method on a <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> reference instead."
  syntax:
    content: public void ExecCommand (string command, bool showUI, object value);
    parameters:
    - id: command
      type: System.String
      description: "The name of the command to execute."
    - id: showUI
      type: System.Boolean
      description: "Whether or not to show command-specific dialog boxes or message boxes to the user."
    - id: value
      type: System.Object
      description: "The value to assign using the command. Not applicable for all commands."
  overload: System.Windows.Forms.HtmlDocument.ExecCommand*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Focus
  id: Focus
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Focus()
  nameWithType: HtmlDocument.Focus()
  fullName: System.Windows.Forms.HtmlDocument.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets user input focus on the current document."
  remarks: "Calling Focus will set focus on the <xref:System.Windows.Forms.WebBrowser> control, if the control currently does not have focus. If the document is hosted inside of a `FRAME`, this method will put focus on that `FRAME` within the `FRAMESET`."
  syntax:
    content: public void Focus ();
    parameters: []
  overload: System.Windows.Forms.HtmlDocument.Focus*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Focused
  id: Focused
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Focused
  nameWithType: HtmlDocument.Focused
  fullName: System.Windows.Forms.HtmlDocument.Focused
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the document has user input focus."
  syntax:
    content: public bool Focused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the document has focus; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlDocument.Focused*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Focusing
  id: Focusing
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Focusing
  nameWithType: HtmlDocument.Focusing
  fullName: System.Windows.Forms.HtmlDocument.Focusing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs before focus is given to the document."
  remarks: "For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the Focusing event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#424](~/add/codesnippet/CSharp/e-system.windows.forms.h_2_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#424](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_2_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Focusing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.ForeColor
  id: ForeColor
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: ForeColor
  nameWithType: HtmlDocument.ForeColor
  fullName: System.Windows.Forms.HtmlDocument.ForeColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the text color for the document."
  remarks: "The <xref:System.Drawing.Color><xref:System.Drawing.Color> type in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] supports an `Alpha` value, but the HTML DOM does not. Therefore, `Alpha` will have no effect when assigned to this property."
  syntax:
    content: public System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "The color of the text in the document."
  overload: System.Windows.Forms.HtmlDocument.ForeColor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Forms
  id: Forms
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Forms
  nameWithType: HtmlDocument.Forms
  fullName: System.Windows.Forms.HtmlDocument.Forms
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a collection of all of the `"
  remarks: "An HTML document may have one or more `FORM` elements with input fields for submitting data back to a server.       You can programmatically submit a `FORM` by obtaining its <xref:System.Windows.Forms.HtmlElement> and calling its `Submit` method using the <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> method.       To add a new `FORM` to a document, you can either create a new `FORM` tag as a string, and assign it to the <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property of an element previously added to the HTML DOM; or you can use the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method, set its properties using <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>, and add it as a child of an existing element using <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>."
  example:
  - "The following code example iterates through all of the `Form` elements on a Web page and clears all user input, setting the forms back to their default values.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#4](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#4)]\n [!code-cs[System.Windows.Forms.HtmlDocument#4](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#4)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Forms { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "An <see cref=&quot;T:System.Windows.Forms.HtmlElementCollection&quot;></see> of the `"
  overload: System.Windows.Forms.HtmlDocument.Forms*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: HtmlDocument.GetElementById(String)
  fullName: System.Windows.Forms.HtmlDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves a single <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> using the element&quot;s `ID` attribute as a search key."
  remarks: "If there are multiple elements in the document with the same ID value, GetElementById will return the first one it finds."
  example:
  - "The following code example retrieves a named `TABLE` from a document, counts up the number of rows, and displays the result in the Web page. The code example requires that you have a <xref:System.Windows.Forms.WebBrowser> control in your project named `WebBrowser1`, and that you have loaded a Web page with a `TABLE` whose `ID` attribute is `Table1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#5](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#5)]\n [!code-cs[System.Windows.Forms.HtmlDocument#5](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#5)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement GetElementById (string id);
    parameters:
    - id: id
      type: System.String
      description: "The ID attribute of the element to retrieve."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.GetElementById*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)
  id: GetElementFromPoint(System.Drawing.Point)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: GetElementFromPoint(Point)
  nameWithType: HtmlDocument.GetElementFromPoint(Point)
  fullName: System.Windows.Forms.HtmlDocument.GetElementFromPoint(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the HTML element located at the specified client coordinates."
  remarks: "GetElementFromPoint uses client coordinates, in which the upper-left corner of the document is assigned the value (0,0). Client coordinates for the current position of the cursor can be obtained using the <xref:System.Windows.Forms.HtmlWindow.Position%2A> property."
  example:
  - "The following code example detects a click on the document, finds the element, and uses <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> to align the element with the top of the Web page.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#7](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlDocument#7](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);
    parameters:
    - id: point
      type: System.Drawing.Point
      description: "The x,y position of the element on the screen, relative to the top-left corner of the document."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.GetElementFromPoint*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: HtmlDocument.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieve a collection of elements with the specified HTML tag."
  remarks: ''
  example:
  - "HTML pages often use the `META` tag to embed arbitrary information about the document. The following HTML code example retrieves all of the `META` tags within an HTML document, finds the `META` tag with the name `Description`, and displays it to the user. The code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);
    parameters:
    - id: tagName
      type: System.String
      description: "The name of the HTML tag for the  objects you want to retrieve."
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.GetHashCode
  id: GetHashCode
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: HtmlDocument.GetHashCode()
  fullName: System.Windows.Forms.HtmlDocument.GetHashCode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the hash code for this object."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.GetHashCode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Images
  id: Images
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Images
  nameWithType: HtmlDocument.Images
  fullName: System.Windows.Forms.HtmlDocument.Images
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a collection of all image tags in the document."
  remarks: "Images returns a collection of <xref:System.Windows.Forms.HtmlElement> objects. To access attributes, such as `ALT` and `SRC`, that are not directly exposed by <xref:System.Windows.Forms.HtmlElement>, use the <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> method.       To add a new image to a document, either create a new `IMG` tag as a string, and assign it to the <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property of an element previously added to the HTML DOM; or use the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method, set its properties using <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>, and add it as a child of an existing element using <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>."
  example:
  - "The following code example examines the `ALT` attribute of all of the images in the document, and sets a default `ALT` attribute if a value is not already set.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#8](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlDocument#8](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Images { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "A collection of <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> objects, one for each IMG tag in the document. Elements are returned from the collection in source order."
  overload: System.Windows.Forms.HtmlDocument.Images*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.InvokeScript(System.String)
  id: InvokeScript(System.String)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: InvokeScript(String)
  nameWithType: HtmlDocument.InvokeScript(String)
  fullName: System.Windows.Forms.HtmlDocument.InvokeScript(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes an Active Scripting function defined in an HTML page."
  remarks: "The underlying type of the object returned by InvokeScript will vary. If the called Active Scripting function returns scalar data, such as a string or an integer, it will be returned as a string. If it returns a script-based object, such as an object created using JScript or VBScript&quot;s `new` operator, it will be of type `Object`. (You can make calls on such objects by calling <xref:System.Object.GetType%2A> and using <xref:System.Type.InvokeMember%2A>.) If it returns an HTML DOM element, such as a `DIV` or a `TABLE`, it will be of type `Object`; if you have added a project reference to MSHTML.DLL, however, it will be cast to its specific unmanaged DOM type.       You may call any function written in any Active Scripting language installed on the user&quot;s computer, including JScript and VBScript.       The InvokeScript will do nothing if the user has explicitly turned off script execution in Internet Explorer, or if the current security configuration for the Web page does not allow it."
  example:
  - "The following code example executes the contents of a script in a Web page. The code example requires that you have a <xref:System.Windows.Forms.WebBrowser> in your application called `WebBrowser1`, and that you have loaded the following Web page.  \n  \n```  \n<HTML>  \n  \n    <HEAD>  \n        <TITLE>Invoke Script Sample</TITLE>  \n  \n        <SCRIPT>  \n            function MyObject() {  \n                this.Data = \"Data for my private object.\";  \n            }  \n            // Return a string.  \n            function test() {  \n                return(\"This is a test.\");  \n            }  \n            // Return a JScript object.  \n            function testJScriptObject() {  \n                return(new(MyObject));  \n            }  \n            // Return a DOM element.  \n            function testElement() {  \n                return(div1);  \n            }  \n        </SCRIPT>  \n    </HEAD>  \n  \n    <BODY>  \n  \n        <DIV id=\"div1\">  \n        </DIV>  \n  \n    </BODY>  \n  \n</HTML>  \n  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#12](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#12)]\n [!code-cs[System.Windows.Forms.HtmlDocument#12](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#12)]"
  syntax:
    content: public object InvokeScript (string scriptName);
    parameters:
    - id: scriptName
      type: System.String
      description: "The name of the script method to invoke."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.InvokeScript*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])
  id: InvokeScript(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: InvokeScript(String,Object[])
  nameWithType: HtmlDocument.InvokeScript(String,Object[])
  fullName: System.Windows.Forms.HtmlDocument.InvokeScript(String,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes an Active Scripting function defined in an HTML page."
  remarks: "The underlying type of the object returned by InvokeScript will vary. If the called Active Scripting function returns scalar data, such as a string or an integer, it will be returned as a string. If it returns a script-based object, such as an object created using JScript or VBScript&quot;s `new` operator, it will be of type `Object`. (You can make calls on such objects by calling <xref:System.Object.GetType%2A> and using <xref:System.Type.InvokeMember%2A>.) If it returns an HTML DOM element, such as a `DIV` or a `TABLE`, it will be of type `Object`; if you have added a project reference to MSHTML.DLL, however, it will be cast to its specific unmanaged DOM type.       You may call any function written in any Active Scripting language installed on the user&quot;s machine, including JScript and VBScript.       This method will do nothing if the user has explicitly turned off script execution in Internet Explorer, or if the current security configuration for the Web page does not allow it."
  example:
  - "The following code example executes the contents of a script in a Web page. The code example requires that you have a <xref:System.Windows.Forms.WebBrowser> in your application called `WebBrowser1`, and that you have loaded the following Web page.  \n  \n```  \n<HTML>  \n    <SCRIPT>  \n        function test(name, address) {  \n            window.alert(\"Name is \" + name + \"; address is \" + address);  \n        }  \n    </SCRIPT>  \n  \n    <BODY>  \n    </BODY>  \n</HTML>  \n  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#9](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#9)]\n [!code-cs[System.Windows.Forms.HtmlDocument#9](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#9)]"
  syntax:
    content: public object InvokeScript (string scriptName, object[] args);
    parameters:
    - id: scriptName
      type: System.String
      description: "The name of the script method to invoke."
    - id: args
      type: System.Object[]
      description: "The arguments to pass to the script method."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.InvokeScript*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.LinkColor
  id: LinkColor
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: LinkColor
  nameWithType: HtmlDocument.LinkColor
  fullName: System.Windows.Forms.HtmlDocument.LinkColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the color of hyperlinks."
  remarks: "The <xref:System.Drawing.Color> type in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] supports an `Alpha` value, but the HTML DOM does not. Therefore, `Alpha` will have no effect when assigned to this property."
  syntax:
    content: public System.Drawing.Color LinkColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "The color for hyperlinks in the current document."
  overload: System.Windows.Forms.HtmlDocument.LinkColor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Links
  id: Links
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Links
  nameWithType: HtmlDocument.Links
  fullName: System.Windows.Forms.HtmlDocument.Links
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a list of all the hyperlinks within this HTML document."
  remarks: "This collection will contain all links created using the `A`, `LINK`, and `AREA` tags in HTML.       The <xref:System.Windows.Forms.HtmlElement> objects contained within this collection encapsulate the unmanaged `IHTMLLinkElement` interface. To access the properties of the underlying interface safely, use the <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> method."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Links { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "An <see cref=&quot;T:System.Windows.Forms.HtmlElementCollection&quot;></see> of <see cref=&quot;T:System.Windows.Forms.HtmlElement&quot;></see> objects."
  overload: System.Windows.Forms.HtmlDocument.Links*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.LosingFocus
  id: LosingFocus
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: LosingFocus
  nameWithType: HtmlDocument.LosingFocus
  fullName: System.Windows.Forms.HtmlDocument.LosingFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs while focus is leaving a control."
  remarks: "For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the LosingFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#425](~/add/codesnippet/CSharp/e-system.windows.forms.h_13_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#425](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_13_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: MouseDown
  nameWithType: HtmlDocument.MouseDown
  fullName: System.Windows.Forms.HtmlDocument.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user clicks the left mouse button."
  remarks: "The MouseDown event occurs before the <xref:System.Windows.Forms.HtmlDocument.Click> event.       For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the MouseDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#426](~/add/codesnippet/CSharp/e-system.windows.forms.h_27_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#426](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_27_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: MouseLeave
  nameWithType: HtmlDocument.MouseLeave
  fullName: System.Windows.Forms.HtmlDocument.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse is no longer hovering over the document."
  remarks: "For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the MouseLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#427](~/add/codesnippet/CSharp/e-system.windows.forms.h_18_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#427](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_18_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: MouseMove
  nameWithType: HtmlDocument.MouseMove
  fullName: System.Windows.Forms.HtmlDocument.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse is moved over the document."
  remarks: "For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the MouseMove event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#428](~/add/codesnippet/CSharp/e-system.windows.forms.h_23_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#428](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_23_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseMove;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.MouseOver
  id: MouseOver
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: MouseOver
  nameWithType: HtmlDocument.MouseOver
  fullName: System.Windows.Forms.HtmlDocument.MouseOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse is moved over the document."
  remarks: "For more information about handling events, [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the MouseOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#429](~/add/codesnippet/CSharp/e-system.windows.forms.h_6_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#429](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_6_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: MouseUp
  nameWithType: HtmlDocument.MouseUp
  fullName: System.Windows.Forms.HtmlDocument.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user releases the left mouse button."
  remarks: "For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlDocument> named `HtmlDocument1`. Then ensure that the event handler is associated with the MouseUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#430](~/add/codesnippet/CSharp/e-system.windows.forms.h_22_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#430](~/add/codesnippet/VisualBasic/e-system.windows.forms.h_22_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  id: op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: op_Equality(HtmlDocument,HtmlDocument)
  nameWithType: HtmlDocument.op_Equality(HtmlDocument,HtmlDocument)
  fullName: System.Windows.Forms.HtmlDocument.op_Equality(HtmlDocument,HtmlDocument)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns a value that indicates whether the specified <see cref=&quot;T:System.Windows.Forms.HtmlDocument&quot;></see> instances represent the same value."
  syntax:
    content: public static bool op_Equality (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlDocument
      description: "The first instance to compare."
    - id: right
      type: System.Windows.Forms.HtmlDocument
      description: "The second instance to compare."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.op_Equality*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  id: op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: op_Inequality(HtmlDocument,HtmlDocument)
  nameWithType: HtmlDocument.op_Inequality(HtmlDocument,HtmlDocument)
  fullName: System.Windows.Forms.HtmlDocument.op_Inequality(HtmlDocument,HtmlDocument)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns a value that indicates whether the specified <see cref=&quot;T:System.Windows.Forms.HtmlDocument&quot;></see> instances do not represent the same value."
  syntax:
    content: public static bool op_Inequality (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlDocument
      description: "The first instance to compare."
    - id: right
      type: System.Windows.Forms.HtmlDocument
      description: "The second instance to compare."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.op_Inequality*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)
  id: OpenNew(System.Boolean)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: OpenNew(Boolean)
  nameWithType: HtmlDocument.OpenNew(Boolean)
  fullName: System.Windows.Forms.HtmlDocument.OpenNew(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a new <see cref=&quot;T:System.Windows.Forms.HtmlDocument&quot;></see> to use with the &lt;xref:System.Windows.Forms.HtmlDocument.Write%2A&gt; method."
  remarks: "OpenNew will clear the previous loaded document, including any associated state, such as variables. It will not cause navigation events in <xref:System.Windows.Forms.WebBrowser> to be raised.       OpenNew always creates a new document in the current window. To open a document in a new window, use the <xref:System.Windows.Forms.HtmlWindow.Open%2A> method on the <xref:System.Windows.Forms.HtmlWindow> class."
  example:
  - "The following code example prepares the DOM for writing and writes a new document using the <xref:System.Windows.Forms.HtmlDocument.Write%2A> method.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#11](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlDocument#11](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);
    parameters:
    - id: replaceInHistory
      type: System.Boolean
      description: "Whether the new window&quot;s navigation should replace the previous element in the navigation history of the DOM."
    return:
      type: System.Windows.Forms.HtmlDocument
      description: "To be added."
  overload: System.Windows.Forms.HtmlDocument.OpenNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.RightToLeft
  id: RightToLeft
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: RightToLeft
  nameWithType: HtmlDocument.RightToLeft
  fullName: System.Windows.Forms.HtmlDocument.RightToLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the direction of text in the current document."
  remarks: "RightToLeft will not have any value unless it has been set explicitly, either in code or in HTML.       Unlike the RightToLeft property on Windows Forms controls, RightToLeft on the managed HTML DOM will not affect the direction of Latin text."
  syntax:
    content: public bool RightToLeft { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if text renders from right to left; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlDocument.RightToLeft*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Stop
  id: Stop
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Stop
  nameWithType: HtmlDocument.Stop
  fullName: System.Windows.Forms.HtmlDocument.Stop
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when navigation to another Web page is halted."
  remarks: "The loading of a Web page will halt if program code calls the <xref:System.Windows.Forms.WebBrowser.Stop%2A> method of the <xref:System.Windows.Forms.WebBrowser> control. Navigation failures caused by network outages or malfunctioning Web sites will not cause Stop to occur.       For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md)."
  example:
  - "The following code example resets the status bar on a Windows Forms application when the `Stop` event has occurred. The code example requires that you have a <xref:System.Windows.Forms.StatusBar> control named `StatusBar1` in your application.  \n  \n [!code-cs[System.Windows.Forms.HtmlDocument#15](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Stop;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Title
  id: Title
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Title
  nameWithType: HtmlDocument.Title
  fullName: System.Windows.Forms.HtmlDocument.Title
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the text value of the `"
  remarks: "Use the Title property to identify the document by way of a human-readable name.       Changes to this property will also reflect in the <xref:System.Windows.Forms.WebBrowser.DocumentTitle%2A> property of the <xref:System.Windows.Forms.WebBrowser> control."
  example:
  - "The following code example creates an HTML hyperlink to the current document using the URL of the document as the link's location and the title of the document as the link text. The code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#14](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#14)]\n [!code-cs[System.Windows.Forms.HtmlDocument#14](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#14)]"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "The title of the current document."
  overload: System.Windows.Forms.HtmlDocument.Title*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Url
  id: Url
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Url
  nameWithType: HtmlDocument.Url
  fullName: System.Windows.Forms.HtmlDocument.Url
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the URL describing the location of this document."
  remarks: "This property is read-only. To navigate to a new document, use the <xref:System.Windows.Forms.WebBrowser.Url%2A> property on the <xref:System.Windows.Forms.WebBrowser> control."
  syntax:
    content: public Uri Url { get; }
    return:
      type: System.Uri
      description: "A &lt;xref:System.Uri&gt; representing this document&quot;s URL."
  overload: System.Windows.Forms.HtmlDocument.Url*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.VisitedLinkColor
  id: VisitedLinkColor
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: VisitedLinkColor
  nameWithType: HtmlDocument.VisitedLinkColor
  fullName: System.Windows.Forms.HtmlDocument.VisitedLinkColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the Color of links to HTML pages that the user has already visited."
  remarks: "The `Color` type in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] supports an `Alpha` value, but the HTML DOM does not. Therefore, `Alpha` will have no effect when assigned to this property."
  syntax:
    content: public System.Drawing.Color VisitedLinkColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "The color of visited links."
  overload: System.Windows.Forms.HtmlDocument.VisitedLinkColor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Window
  id: Window
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Window
  nameWithType: HtmlDocument.Window
  fullName: System.Windows.Forms.HtmlDocument.Window
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the <see cref=&quot;T:System.Windows.Forms.HtmlWindow&quot;></see> associated with this document."
  remarks: "All HTML documents have an HTML DOM object called a window, which can be used to manipulate the screen size of the document and open new windows, as well as access other important objects, such as an <xref:System.Windows.Forms.HtmlHistory>."
  syntax:
    content: public System.Windows.Forms.HtmlWindow Window { get; }
    return:
      type: System.Windows.Forms.HtmlWindow
      description: "The window for this document."
  overload: System.Windows.Forms.HtmlDocument.Window*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Forms.HtmlDocument.Write(System.String)
  id: Write(System.String)
  parent: System.Windows.Forms.HtmlDocument
  langs:
  - csharp
  name: Write(String)
  nameWithType: HtmlDocument.Write(String)
  fullName: System.Windows.Forms.HtmlDocument.Write(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Writes a new HTML page."
  remarks: "All calls to Write should be preceded by a call to <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>, which will clear the current document and all of its variables. Your calls to Write will create a new HTML document in its place. To change only a specific portion of the document, obtain the appropriate <xref:System.Windows.Forms.HtmlElement> and set its <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property.       It is recommended that you write an entire valid HTML document using the Write method, including `HTML` and `BODY` tags. However, if you write just HTML elements, the Document Object Model (DOM) will supply these elements for you."
  example:
  - "The following code example opens a new <xref:System.Windows.Forms.HtmlDocument> and writes in a new HTML file.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#11](~/add/codesnippet/VisualBasic/HtmlDocumentProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlDocument#11](~/add/codesnippet/CSharp/HtmlDocumentProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public void Write (string text);
    parameters:
    - id: text
      type: System.String
      description: "The HTML text to write into the document."
  overload: System.Windows.Forms.HtmlDocument.Write*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Forms.HtmlDocument.ActiveElement
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ActiveElement
  nameWithType: HtmlDocument.ActiveElement
  fullName: System.Windows.Forms.HtmlDocument.ActiveElement
- uid: System.Windows.Forms.HtmlElement
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
- uid: System.Windows.Forms.HtmlDocument.ActiveLinkColor
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ActiveLinkColor
  nameWithType: HtmlDocument.ActiveLinkColor
  fullName: System.Windows.Forms.HtmlDocument.ActiveLinkColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Windows.Forms.HtmlDocument.All
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: All
  nameWithType: HtmlDocument.All
  fullName: System.Windows.Forms.HtmlDocument.All
- uid: System.Windows.Forms.HtmlElementCollection
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementCollection
  nameWithType: HtmlElementCollection
  fullName: System.Windows.Forms.HtmlElementCollection
- uid: System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlDocument.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlDocument.AttachEventHandler(String,EventHandler)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.HtmlDocument.BackColor
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: BackColor
  nameWithType: HtmlDocument.BackColor
  fullName: System.Windows.Forms.HtmlDocument.BackColor
- uid: System.Windows.Forms.HtmlDocument.Body
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Body
  nameWithType: HtmlDocument.Body
  fullName: System.Windows.Forms.HtmlDocument.Body
- uid: System.Windows.Forms.HtmlDocument.Click
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Click
  nameWithType: HtmlDocument.Click
  fullName: System.Windows.Forms.HtmlDocument.Click
- uid: System.Windows.Forms.HtmlElementEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementEventHandler
  nameWithType: HtmlElementEventHandler
  fullName: System.Windows.Forms.HtmlElementEventHandler
- uid: System.Windows.Forms.HtmlDocument.ContextMenuShowing
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ContextMenuShowing
  nameWithType: HtmlDocument.ContextMenuShowing
  fullName: System.Windows.Forms.HtmlDocument.ContextMenuShowing
- uid: System.Windows.Forms.HtmlDocument.Cookie
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Cookie
  nameWithType: HtmlDocument.Cookie
  fullName: System.Windows.Forms.HtmlDocument.Cookie
- uid: System.Windows.Forms.HtmlDocument.CreateElement(System.String)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: CreateElement(String)
  nameWithType: HtmlDocument.CreateElement(String)
  fullName: System.Windows.Forms.HtmlDocument.CreateElement(String)
- uid: System.Windows.Forms.HtmlDocument.DefaultEncoding
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: DefaultEncoding
  nameWithType: HtmlDocument.DefaultEncoding
  fullName: System.Windows.Forms.HtmlDocument.DefaultEncoding
- uid: System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlDocument.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlDocument.DetachEventHandler(String,EventHandler)
- uid: System.Windows.Forms.HtmlDocument.Domain
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Domain
  nameWithType: HtmlDocument.Domain
  fullName: System.Windows.Forms.HtmlDocument.Domain
- uid: System.Windows.Forms.HtmlDocument.DomDocument
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: DomDocument
  nameWithType: HtmlDocument.DomDocument
  fullName: System.Windows.Forms.HtmlDocument.DomDocument
- uid: System.Windows.Forms.HtmlDocument.Encoding
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Encoding
  nameWithType: HtmlDocument.Encoding
  fullName: System.Windows.Forms.HtmlDocument.Encoding
- uid: System.Windows.Forms.HtmlDocument.Equals(System.Object)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Equals(Object)
  nameWithType: HtmlDocument.Equals(Object)
  fullName: System.Windows.Forms.HtmlDocument.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ExecCommand(String,Boolean,Object)
  nameWithType: HtmlDocument.ExecCommand(String,Boolean,Object)
  fullName: System.Windows.Forms.HtmlDocument.ExecCommand(String,Boolean,Object)
- uid: System.Windows.Forms.HtmlDocument.Focus
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Focus()
  nameWithType: HtmlDocument.Focus()
  fullName: System.Windows.Forms.HtmlDocument.Focus()
- uid: System.Windows.Forms.HtmlDocument.Focused
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Focused
  nameWithType: HtmlDocument.Focused
  fullName: System.Windows.Forms.HtmlDocument.Focused
- uid: System.Windows.Forms.HtmlDocument.Focusing
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Focusing
  nameWithType: HtmlDocument.Focusing
  fullName: System.Windows.Forms.HtmlDocument.Focusing
- uid: System.Windows.Forms.HtmlDocument.ForeColor
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ForeColor
  nameWithType: HtmlDocument.ForeColor
  fullName: System.Windows.Forms.HtmlDocument.ForeColor
- uid: System.Windows.Forms.HtmlDocument.Forms
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Forms
  nameWithType: HtmlDocument.Forms
  fullName: System.Windows.Forms.HtmlDocument.Forms
- uid: System.Windows.Forms.HtmlDocument.GetElementById(System.String)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: HtmlDocument.GetElementById(String)
  fullName: System.Windows.Forms.HtmlDocument.GetElementById(String)
- uid: System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetElementFromPoint(Point)
  nameWithType: HtmlDocument.GetElementFromPoint(Point)
  fullName: System.Windows.Forms.HtmlDocument.GetElementFromPoint(Point)
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: HtmlDocument.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlDocument.GetElementsByTagName(String)
- uid: System.Windows.Forms.HtmlDocument.GetHashCode
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetHashCode()
  nameWithType: HtmlDocument.GetHashCode()
  fullName: System.Windows.Forms.HtmlDocument.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.HtmlDocument.Images
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Images
  nameWithType: HtmlDocument.Images
  fullName: System.Windows.Forms.HtmlDocument.Images
- uid: System.Windows.Forms.HtmlDocument.InvokeScript(System.String)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: InvokeScript(String)
  nameWithType: HtmlDocument.InvokeScript(String)
  fullName: System.Windows.Forms.HtmlDocument.InvokeScript(String)
- uid: System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: InvokeScript(String,Object[])
  nameWithType: HtmlDocument.InvokeScript(String,Object[])
  fullName: System.Windows.Forms.HtmlDocument.InvokeScript(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.HtmlDocument.LinkColor
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: LinkColor
  nameWithType: HtmlDocument.LinkColor
  fullName: System.Windows.Forms.HtmlDocument.LinkColor
- uid: System.Windows.Forms.HtmlDocument.Links
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Links
  nameWithType: HtmlDocument.Links
  fullName: System.Windows.Forms.HtmlDocument.Links
- uid: System.Windows.Forms.HtmlDocument.LosingFocus
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: LosingFocus
  nameWithType: HtmlDocument.LosingFocus
  fullName: System.Windows.Forms.HtmlDocument.LosingFocus
- uid: System.Windows.Forms.HtmlDocument.MouseDown
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: MouseDown
  nameWithType: HtmlDocument.MouseDown
  fullName: System.Windows.Forms.HtmlDocument.MouseDown
- uid: System.Windows.Forms.HtmlDocument.MouseLeave
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: MouseLeave
  nameWithType: HtmlDocument.MouseLeave
  fullName: System.Windows.Forms.HtmlDocument.MouseLeave
- uid: System.Windows.Forms.HtmlDocument.MouseMove
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: MouseMove
  nameWithType: HtmlDocument.MouseMove
  fullName: System.Windows.Forms.HtmlDocument.MouseMove
- uid: System.Windows.Forms.HtmlDocument.MouseOver
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: MouseOver
  nameWithType: HtmlDocument.MouseOver
  fullName: System.Windows.Forms.HtmlDocument.MouseOver
- uid: System.Windows.Forms.HtmlDocument.MouseUp
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: MouseUp
  nameWithType: HtmlDocument.MouseUp
  fullName: System.Windows.Forms.HtmlDocument.MouseUp
- uid: System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: op_Equality(HtmlDocument,HtmlDocument)
  nameWithType: HtmlDocument.op_Equality(HtmlDocument,HtmlDocument)
  fullName: System.Windows.Forms.HtmlDocument.op_Equality(HtmlDocument,HtmlDocument)
- uid: System.Windows.Forms.HtmlDocument
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
- uid: System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: op_Inequality(HtmlDocument,HtmlDocument)
  nameWithType: HtmlDocument.op_Inequality(HtmlDocument,HtmlDocument)
  fullName: System.Windows.Forms.HtmlDocument.op_Inequality(HtmlDocument,HtmlDocument)
- uid: System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: OpenNew(Boolean)
  nameWithType: HtmlDocument.OpenNew(Boolean)
  fullName: System.Windows.Forms.HtmlDocument.OpenNew(Boolean)
- uid: System.Windows.Forms.HtmlDocument.RightToLeft
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: RightToLeft
  nameWithType: HtmlDocument.RightToLeft
  fullName: System.Windows.Forms.HtmlDocument.RightToLeft
- uid: System.Windows.Forms.HtmlDocument.Stop
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Stop
  nameWithType: HtmlDocument.Stop
  fullName: System.Windows.Forms.HtmlDocument.Stop
- uid: System.Windows.Forms.HtmlDocument.Title
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Title
  nameWithType: HtmlDocument.Title
  fullName: System.Windows.Forms.HtmlDocument.Title
- uid: System.Windows.Forms.HtmlDocument.Url
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Url
  nameWithType: HtmlDocument.Url
  fullName: System.Windows.Forms.HtmlDocument.Url
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Windows.Forms.HtmlDocument.VisitedLinkColor
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: VisitedLinkColor
  nameWithType: HtmlDocument.VisitedLinkColor
  fullName: System.Windows.Forms.HtmlDocument.VisitedLinkColor
- uid: System.Windows.Forms.HtmlDocument.Window
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Window
  nameWithType: HtmlDocument.Window
  fullName: System.Windows.Forms.HtmlDocument.Window
- uid: System.Windows.Forms.HtmlWindow
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlWindow
  nameWithType: HtmlWindow
  fullName: System.Windows.Forms.HtmlWindow
- uid: System.Windows.Forms.HtmlDocument.Write(System.String)
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Write(String)
  nameWithType: HtmlDocument.Write(String)
  fullName: System.Windows.Forms.HtmlDocument.Write(String)
- uid: System.Windows.Forms.HtmlDocument.ActiveElement*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ActiveElement
  nameWithType: HtmlDocument.ActiveElement
- uid: System.Windows.Forms.HtmlDocument.ActiveLinkColor*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ActiveLinkColor
  nameWithType: HtmlDocument.ActiveLinkColor
- uid: System.Windows.Forms.HtmlDocument.All*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: All
  nameWithType: HtmlDocument.All
- uid: System.Windows.Forms.HtmlDocument.AttachEventHandler*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: AttachEventHandler
  nameWithType: HtmlDocument.AttachEventHandler
- uid: System.Windows.Forms.HtmlDocument.BackColor*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: BackColor
  nameWithType: HtmlDocument.BackColor
- uid: System.Windows.Forms.HtmlDocument.Body*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Body
  nameWithType: HtmlDocument.Body
- uid: System.Windows.Forms.HtmlDocument.Cookie*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Cookie
  nameWithType: HtmlDocument.Cookie
- uid: System.Windows.Forms.HtmlDocument.CreateElement*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: CreateElement
  nameWithType: HtmlDocument.CreateElement
- uid: System.Windows.Forms.HtmlDocument.DefaultEncoding*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: DefaultEncoding
  nameWithType: HtmlDocument.DefaultEncoding
- uid: System.Windows.Forms.HtmlDocument.DetachEventHandler*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: DetachEventHandler
  nameWithType: HtmlDocument.DetachEventHandler
- uid: System.Windows.Forms.HtmlDocument.Domain*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Domain
  nameWithType: HtmlDocument.Domain
- uid: System.Windows.Forms.HtmlDocument.DomDocument*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: DomDocument
  nameWithType: HtmlDocument.DomDocument
- uid: System.Windows.Forms.HtmlDocument.Encoding*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Encoding
  nameWithType: HtmlDocument.Encoding
- uid: System.Windows.Forms.HtmlDocument.Equals*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Equals
  nameWithType: HtmlDocument.Equals
- uid: System.Windows.Forms.HtmlDocument.ExecCommand*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ExecCommand
  nameWithType: HtmlDocument.ExecCommand
- uid: System.Windows.Forms.HtmlDocument.Focus*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Focus
  nameWithType: HtmlDocument.Focus
- uid: System.Windows.Forms.HtmlDocument.Focused*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Focused
  nameWithType: HtmlDocument.Focused
- uid: System.Windows.Forms.HtmlDocument.ForeColor*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: ForeColor
  nameWithType: HtmlDocument.ForeColor
- uid: System.Windows.Forms.HtmlDocument.Forms*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Forms
  nameWithType: HtmlDocument.Forms
- uid: System.Windows.Forms.HtmlDocument.GetElementById*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetElementById
  nameWithType: HtmlDocument.GetElementById
- uid: System.Windows.Forms.HtmlDocument.GetElementFromPoint*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetElementFromPoint
  nameWithType: HtmlDocument.GetElementFromPoint
- uid: System.Windows.Forms.HtmlDocument.GetElementsByTagName*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: HtmlDocument.GetElementsByTagName
- uid: System.Windows.Forms.HtmlDocument.GetHashCode*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: GetHashCode
  nameWithType: HtmlDocument.GetHashCode
- uid: System.Windows.Forms.HtmlDocument.Images*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Images
  nameWithType: HtmlDocument.Images
- uid: System.Windows.Forms.HtmlDocument.InvokeScript*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: InvokeScript
  nameWithType: HtmlDocument.InvokeScript
- uid: System.Windows.Forms.HtmlDocument.LinkColor*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: LinkColor
  nameWithType: HtmlDocument.LinkColor
- uid: System.Windows.Forms.HtmlDocument.Links*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Links
  nameWithType: HtmlDocument.Links
- uid: System.Windows.Forms.HtmlDocument.op_Equality*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: op_Equality
  nameWithType: HtmlDocument.op_Equality
- uid: System.Windows.Forms.HtmlDocument.op_Inequality*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: op_Inequality
  nameWithType: HtmlDocument.op_Inequality
- uid: System.Windows.Forms.HtmlDocument.OpenNew*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: OpenNew
  nameWithType: HtmlDocument.OpenNew
- uid: System.Windows.Forms.HtmlDocument.RightToLeft*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: RightToLeft
  nameWithType: HtmlDocument.RightToLeft
- uid: System.Windows.Forms.HtmlDocument.Title*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Title
  nameWithType: HtmlDocument.Title
- uid: System.Windows.Forms.HtmlDocument.Url*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Url
  nameWithType: HtmlDocument.Url
- uid: System.Windows.Forms.HtmlDocument.VisitedLinkColor*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: VisitedLinkColor
  nameWithType: HtmlDocument.VisitedLinkColor
- uid: System.Windows.Forms.HtmlDocument.Window*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Window
  nameWithType: HtmlDocument.Window
- uid: System.Windows.Forms.HtmlDocument.Write*
  parent: System.Windows.Forms.HtmlDocument
  isExternal: false
  name: Write
  nameWithType: HtmlDocument.Write
