### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.TcpListener
  id: TcpListener
  children:
  - System.Net.Sockets.TcpListener.#ctor(System.Int32)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpListener.AcceptSocket
  - System.Net.Sockets.TcpListener.AcceptSocketAsync
  - System.Net.Sockets.TcpListener.AcceptTcpClient
  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  - System.Net.Sockets.TcpListener.Active
  - System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpListener.Create(System.Int32)
  - System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  - System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  - System.Net.Sockets.TcpListener.ExclusiveAddressUse
  - System.Net.Sockets.TcpListener.LocalEndpoint
  - System.Net.Sockets.TcpListener.Pending
  - System.Net.Sockets.TcpListener.Server
  - System.Net.Sockets.TcpListener.Start
  - System.Net.Sockets.TcpListener.Start(System.Int32)
  - System.Net.Sockets.TcpListener.Stop
  langs:
  - csharp
  name: TcpListener
  nameWithType: TcpListener
  fullName: System.Net.Sockets.TcpListener
  type: Class
  summary: "Escuta de ligações de clientes de rede TCP."
  remarks: "A classe de TcpListener fornece métodos simples que escutam e aceitarem pedidos de ligação de entrada no modo síncrono a bloquear. Pode utilizar tanto um <xref:System.Net.Sockets.TcpClient>ou um <xref:System.Net.Sockets.Socket>para estabelecer ligação com um TcpListener.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpClient> Criar um TcpListener utilizando um <xref:System.Net.IPEndPoint>, um endereço Local IP e o número de porta ou apenas um número de porta.</xref:System.Net.IPEndPoint> Especifique <xref:System.Net.IPAddress.Any>para o endereço IP local e 0 para o número de porta local, se pretender que o fornecedor de serviço subjacente atribuir esses valores por si.</xref:System.Net.IPAddress.Any> Se optar por fazê-lo, pode utilizar o <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>propriedade para identificar as informações de atribuído, depois do socket estabeleceu.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Utilize o <xref:System.Net.Sockets.TcpListener.Start%2A>método para começar a escutar para pedidos recebidos de ligação.</xref:System.Net.Sockets.TcpListener.Start%2A> <xref:System.Net.Sockets.TcpListener.Start%2A>ligações de entrada de fila até se ligará para o <xref:System.Net.Sockets.TcpListener.Stop%2A>método ou foi colocado em fila <xref:System.Net.Sockets.SocketOptionName>.</xref:System.Net.Sockets.SocketOptionName> </xref:System.Net.Sockets.TcpListener.Stop%2A></xref:System.Net.Sockets.TcpListener.Start%2A> Utilizar um <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>ou <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>para solicitar uma ligação da fila de pedido de ligação de entrada.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Estes dois métodos irão bloquear. Se quiser evitar bloquear, pode utilizar o <xref:System.Net.Sockets.TcpListener.Pending%2A>método primeiro para determinar se os pedidos de ligação estão disponíveis na fila.</xref:System.Net.Sockets.TcpListener.Pending%2A>       Chamar o <xref:System.Net.Sockets.TcpListener.Stop%2A>método para fechar o TcpListener.</xref:System.Net.Sockets.TcpListener.Stop%2A>      > [!NOTE] > O <xref:System.Net.Sockets.TcpListener.Stop%2A>método não fechar todas as ligações foi aceites.</xref:System.Net.Sockets.TcpListener.Stop%2A> É responsável por fechar estas separadamente."
  example:
  - "The following code example creates a TcpListener.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/t-system.net.sockets.tcp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/t-system.net.sockets.tcp_0_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/t-system.net.sockets.tcp_0_1.vb)]  \n  \n See <xref:System.Net.Sockets.TcpClient> for a client example."
  syntax:
    content: public class TcpListener
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(Int32)
  nameWithType: TcpListener.TcpListener(Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> classe escuta na porta especificada."
  remarks: "Este construtor está obsoleto. Utilize o <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName>ou <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>construtores.</xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName>       Este construtor permite-lhe especificar o número da porta na qual escutar de entrada de tentativas de ligação. Com este construtor, o fornecedor de serviço subjacente atribui o endereço de rede mais adequado. Se não se é utilizada a porta local, pode especificar 0 para o número de porta. Neste caso, o fornecedor de serviço atribuirá um número de porta disponível entre 1024 e 5000. Se utilizar esta abordagem, pode detetar o número de porta e o endereço de rede local foi atribuído ao utilizar o <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>propriedade.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Chamar o <xref:System.Net.Sockets.TcpListener.Start%2A>método para começar a escutar as tentativas de ligação recebido.</xref:System.Net.Sockets.TcpListener.Start%2A>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_18_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_18_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_18_1.vb)]"
  syntax:
    content: public TcpListener (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "A porta na qual escutar de entrada de tentativas de ligação."
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>Não é entre <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(IPEndPoint)
  nameWithType: TcpListener.TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> classe com o ponto final local especificado."
  remarks: "Este construtor permite-lhe especificar o endereço IP local e número de porta na qual escutar ligação recebida tentativas. Antes de utilizar este construtor, tem de criar um <xref:System.Net.IPEndPoint>utilizando o pretendido local IP endereço e número de porta.</xref:System.Net.IPEndPoint> Passar esta <xref:System.Net.IPEndPoint>a este construtor como o `localEP` parâmetro.</xref:System.Net.IPEndPoint>       Se não se está atribuído a qual o endereço local, pode criar um <xref:System.Net.IPEndPoint>utilizando <xref:System.Net.IPAddress.Any?displayProperty=fullName>como o parâmetro de endereço e o serviço subjacente fornecedor vai atribuir o endereço de rede mais adequado.</xref:System.Net.IPAddress.Any?displayProperty=fullName> </xref:System.Net.IPEndPoint> Isto pode ajudar a simplificar a sua aplicação, se tiver várias interfaces de rede. Se não se é utilizada a porta local, pode criar um <xref:System.Net.IPEndPoint>utilizando 0 para o número de porta.</xref:System.Net.IPEndPoint> Neste caso, o fornecedor de serviço atribuirá um número de porta disponível entre 1024 e 5000. Se utilizar esta abordagem, pode detetar o número de porta e o endereço de rede local foi atribuído ao utilizar o <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>propriedade.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Chamar o <xref:System.Net.Sockets.TcpListener.Start%2A>método para começar a escutar as tentativas de ligação recebido.</xref:System.Net.Sockets.TcpListener.Start%2A>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_20_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_20_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_20_1.vb)]"
  syntax:
    content: public TcpListener (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que representa o ponto final local para a qual vincular o serviço de escuta <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(IPAddress,Int32)
  nameWithType: TcpListener.TcpListener(IPAddress,Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> classe escuta ligação recebida tenta no local IP endereço e a porta número especificado."
  remarks: "Este construtor permite-lhe especificar o endereço IP local e número de porta na qual escutar ligação recebida tentativas. Antes de chamar este construtor tem de criar primeiro um <xref:System.Net.IPAddress>utilizando o endereço local pretendido.</xref:System.Net.IPAddress> Passar esta <xref:System.Net.IPAddress>a este construtor como o `localaddr` parâmetro.</xref:System.Net.IPAddress> Se não se está atribuído a qual o endereço local, especifique <xref:System.Net.IPAddress.Any?displayProperty=fullName>para o `localaddr` parâmetro e o fornecedor subjacente do serviço irão atribuir o endereço de rede mais adequado.</xref:System.Net.IPAddress.Any?displayProperty=fullName> Isto pode ajudar a simplificar a sua aplicação, se tiver várias interfaces de rede. Se não se é utilizada a porta local, pode especificar 0 para o número de porta. Neste caso, o fornecedor de serviço atribuirá um número de porta disponível entre 1024 e 5000. Se utilizar esta abordagem, pode detetar o número de porta e o endereço de rede local foi atribuído ao utilizar o <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>propriedade.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Chamar o <xref:System.Net.Sockets.TcpListener.Start%2A>método para começar a escutar as tentativas de ligação recebido.</xref:System.Net.Sockets.TcpListener.Start%2A>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.tcp_19_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.tcp_19_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_19_1.vb)]"
  syntax:
    content: public TcpListener (System.Net.IPAddress localaddr, int port);
    parameters:
    - id: localaddr
      type: System.Net.IPAddress
      description: "Um <xref:System.Net.IPAddress>que representa o endereço IP local.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "A porta na qual escutar de entrada de tentativas de ligação."
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localaddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>Não é entre <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptSocket
  id: AcceptSocket
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptSocket()
  nameWithType: TcpListener.AcceptSocket()
  fullName: System.Net.Sockets.TcpListener.AcceptSocket()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aceita um pedido de ligação pendente."
  remarks: "AcceptSocket é um método de bloqueio que devolve um <xref:System.Net.Sockets.Socket>que pode utilizar para enviar e receber dados.</xref:System.Net.Sockets.Socket> Se quiser evitar bloquear, utilize o <xref:System.Net.Sockets.TcpListener.Pending%2A>método para determinar se os pedidos de ligação estão disponíveis na fila de entrada de ligação.</xref:System.Net.Sockets.TcpListener.Pending%2A>       O <xref:System.Net.Sockets.Socket>devolvido é inicializado com o número de porta e o endereço IP do anfitrião remoto.</xref:System.Net.Sockets.Socket> Pode utilizar qualquer um do <xref:System.Net.Sockets.Socket.Send%2A>e <xref:System.Net.Sockets.Socket.Receive%2A>métodos disponíveis no <xref:System.Net.Sockets.Socket>classe para comunicar com o anfitrião remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.Receive%2A> </xref:System.Net.Sockets.Socket.Send%2A> Quando tiver terminado com o <xref:System.Net.Sockets.Socket>, certifique-se chamar o <xref:System.Net.Sockets.Socket.Close%2A>método.</xref:System.Net.Sockets.Socket.Close%2A> </xref:System.Net.Sockets.Socket> Se a aplicação é relativamente simple, considere utilizar o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método em vez do método AcceptSocket.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> <xref:System.Net.Sockets.TcpClient>Fornece métodos simples para enviar e receber dados através de uma rede no modo síncrono a bloquear.</xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "In the following code example, the AcceptSocket method is used to return a <xref:System.Net.Sockets.Socket>. This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_7_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_7_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_7_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket AcceptSocket ();
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "A <xref:System.Net.Sockets.Socket>utilizado para enviar e receber dados.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.AcceptSocket*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O serviço de escuta não foi iniciado com uma chamada para <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  id: AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptSocketAsync()
  nameWithType: TcpListener.AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aceita um pedido de ligação pendente como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após a ligação de socket foi aceite.</xref:System.Threading.Tasks.Task%601>       O <xref:System.Net.Sockets.Socket>devolvido em <xref:System.Threading.Tasks.Task%601>é inicializado com o número de porta e o endereço IP do anfitrião remoto.</xref:System.Threading.Tasks.Task%601> </xref:System.Net.Sockets.Socket> Pode utilizar qualquer um do <xref:System.Net.Sockets.Socket.Send%2A>e <xref:System.Net.Sockets.Socket.Receive%2A>métodos disponíveis no <xref:System.Net.Sockets.Socket>classe para comunicar com o anfitrião remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.Receive%2A> </xref:System.Net.Sockets.Socket.Send%2A> Quando tiver terminado com o <xref:System.Net.Sockets.Socket>, certifique-se chamar o <xref:System.Net.Sockets.Socket.Close%2A>método.</xref:System.Net.Sockets.Socket.Close%2A> </xref:System.Net.Sockets.Socket> Se a aplicação é relativamente simple, considere utilizar o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método em vez do método AcceptSocketAsync.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> <xref:System.Net.Sockets.TcpClient>Fornece métodos simples para enviar e receber dados através de uma rede no modo síncrono a bloquear.</xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptSocketAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt; o objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve uma <xref:System.Net.Sockets.Socket>utilizado para enviar e receber dados.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.AcceptSocketAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O serviço de escuta não foi iniciado com uma chamada para <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient
  id: AcceptTcpClient
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptTcpClient()
  nameWithType: TcpListener.AcceptTcpClient()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aceita um pedido de ligação pendente."
  remarks: "AcceptTcpClient é um método de bloqueio que devolve um <xref:System.Net.Sockets.TcpClient>que pode utilizar para enviar e receber dados.</xref:System.Net.Sockets.TcpClient> Utilize o <xref:System.Net.Sockets.TcpListener.Pending%2A>método para determinar se os pedidos de ligação estão disponíveis na fila de entrada de ligação se quiser evitar bloquear.</xref:System.Net.Sockets.TcpListener.Pending%2A>       Utilize o <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>método para obter o subjacente <xref:System.Net.Sockets.NetworkStream>de devolvido <xref:System.Net.Sockets.TcpClient>.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.NetworkStream> </xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> O <xref:System.Net.Sockets.NetworkStream>irá fornecer-lhe métodos para envio e receção com o anfitrião remoto.</xref:System.Net.Sockets.NetworkStream> Quando estiver através de com o <xref:System.Net.Sockets.TcpClient>, certifique-se chamar o <xref:System.Net.Sockets.TcpClient.Close%2A>método.</xref:System.Net.Sockets.TcpClient.Close%2A> </xref:System.Net.Sockets.TcpClient> Se quiser maior flexibilidade do que um <xref:System.Net.Sockets.TcpClient>oferece, considere a utilização de <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "In the following code example, the AcceptTcpClient method is used to return a <xref:System.Net.Sockets.TcpClient>. This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.  \n  \n [!code-cs[Classic TcpListenerExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_15_1.cs)]\n [!code-cpp[Classic TcpListenerExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_15_1.cpp)]\n [!code-vb[Classic TcpListenerExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_15_1.vb)]"
  syntax:
    content: public System.Net.Sockets.TcpClient AcceptTcpClient ();
    parameters: []
    return:
      type: System.Net.Sockets.TcpClient
      description: "A <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> utilizado para enviar e receber dados."
  overload: System.Net.Sockets.TcpListener.AcceptTcpClient*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O serviço de escuta não foi iniciado com uma chamada para <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilize o &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; propriedade para obter o código de erro específico. Quando tiver adquirido este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  id: AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptTcpClientAsync()
  nameWithType: TcpListener.AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aceita um pedido de ligação pendente como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após a ligação TCP foi aceite.</xref:System.Threading.Tasks.Task%601>       Utilize o <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>método para obter o subjacente <xref:System.Net.Sockets.NetworkStream>do devolvido <xref:System.Net.Sockets.TcpClient>na <xref:System.Threading.Tasks.Task%601>.</xref:System.Threading.Tasks.Task%601> </xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.NetworkStream> </xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> O <xref:System.Net.Sockets.NetworkStream>irá fornecer-lhe métodos para envio e receção com o anfitrião remoto.</xref:System.Net.Sockets.NetworkStream> Quando estiver através de com o <xref:System.Net.Sockets.TcpClient>, certifique-se chamar o <xref:System.Net.Sockets.TcpClient.Close%2A>método.</xref:System.Net.Sockets.TcpClient.Close%2A> </xref:System.Net.Sockets.TcpClient> Se pretender que o maior flexibilidade do que um <xref:System.Net.Sockets.TcpClient>oferece, considere a utilização <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>ou <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> AcceptTcpClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt; o objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve uma <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> utilizado para enviar e receber dados."
  overload: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O serviço de escuta não foi iniciado com uma chamada para <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilize o &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; propriedade para obter o código de erro específico. Quando tiver adquirido este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Active
  id: Active
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Active
  nameWithType: TcpListener.Active
  fullName: System.Net.Sockets.TcpListener.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém um valor que indica se <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> ativamente está à escuta para ligações de cliente."
  remarks: "Classes derivadas de <xref:System.Net.Sockets.TcpListener>pode utilizar esta propriedade para determinar se o <xref:System.Net.Sockets.Socket>atualmente está à escuta para entrada de tentativas de ligação.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener> O <xref:System.Net.Sockets.TcpClient.Active%2A>propriedade pode ser utilizada para evitar redundante <xref:System.Net.Sockets.TcpListener.Start%2A>tenta.</xref:System.Net.Sockets.TcpListener.Start%2A> </xref:System.Net.Sockets.TcpClient.Active%2A>"
  syntax:
    content: protected bool Active { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> está ativamente escuta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.TcpListener.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: TcpListener.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ativa ou desativa a transversal tradução de endereços de rede (NAT) num <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> instância."
  remarks: "O método de AllowNatTraversal é utilizado para ativar ou desativar transversal NAT para um <xref:System.Net.Sockets.TcpListener>instância.</xref:System.Net.Sockets.TcpListener> A transversal NAT pode ser fornecida a utilizar Teredo, 6to4 ou um túnel ISATAP.       Quando o `allowed` parâmetro seja falso, a <xref:System.Net.Sockets.SocketOptionName>opção de socket associado está definida como <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Isto desativa explicitamente transversal NAT para um <xref:System.Net.Sockets.TcpListener>instância.</xref:System.Net.Sockets.TcpListener>       Quando o `allowed` parâmetro for VERDADEIRO, a <xref:System.Net.Sockets.SocketOptionName>opção de socket associado está definida como <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Isto poderá permitir transversal NAT para um <xref:System.Net.Sockets.TcpListener>consoante as regras de firewall no local no sistema.</xref:System.Net.Sockets.TcpListener>       O método AllowNatTraversal tem de ser invocado antes de chamar o <xref:System.Net.Sockets.TcpListener.Start%2A>método para começar a escutar para pedidos recebidos de ligação (antes do socket está vinculado).</xref:System.Net.Sockets.TcpListener.Start%2A> Se o método de AllowNatTraversal é chamado depois do <xref:System.Net.Sockets.TcpListener.Start%2A>método, em seguida, um <xref:System.InvalidOperationException>será emitida.</xref:System.InvalidOperationException> </xref:System.Net.Sockets.TcpListener.Start%2A>       Um endereço Teredo é um endereço IPv6 com o prefixo de 2001:: / 32. Endereços de Teredo podem ser devolvidos através da resolução de nome DNS normal ou enumerados como um endereço de IPv6 atribuído a uma interface local."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "Um valor booleano que especifica se pretende ativar ou desativar a transversal NAT."
  overload: System.Net.Sockets.TcpListener.AllowNatTraversal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O método de AllowNatTraversal foi chamado depois de chamar o <xref:System.Net.Sockets.TcpListener.Start*>método</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  id: BeginAcceptSocket(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: BeginAcceptSocket(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Começa uma operação assíncrona para aceitar uma tentativa de ligação de entrada."
  remarks: "Deve ser concluir a operação de BeginAcceptSocket assíncrona, chamando o <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>método.</xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> Normalmente, o método é invocado pelo `callback` delegar.       Este método não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize o <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>       Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Pode chamar o <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>propriedade o devolvido <xref:System.Net.Sockets.Socket>para identificar o número de porta e o endereço de rede do anfitrião remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize o <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>propriedade para obter o código de erro específico e consulte a documentação de código de erro de API de versão 2 do Sockets do Windows na biblioteca do MSDN em [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) para uma descrição detalhada do erro.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the BeginAcceptSocket method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/1d0c3046-b366-41a2-aab6-_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/1d0c3046-b366-41a2-aab6-_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/1d0c3046-b366-41a2-aab6-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação foi concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de aceitar. Este objeto é passado para o `callback` delegar quando a operação foi concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>que referencia a criação de <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> assíncrona</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.TcpListener.BeginAcceptSocket*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à socket. Consulte a secção observações para obter mais informações."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  id: BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: BeginAcceptTcpClient(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Começa uma operação assíncrona para aceitar uma tentativa de ligação de entrada."
  remarks: "Deve ser concluir a operação de BeginAcceptTcpClient assíncrona, chamando o <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>método.</xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> Normalmente, o método é invocado pelo `callback` delegar.       Este método não bloqueia enquanto a operação for concluída. Para bloquear enquanto a operação for concluída, utilize o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>       Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize o <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>propriedade para obter o código de erro específico e consulte a documentação de código de erro de API de versão 2 do Sockets do Windows na biblioteca do MSDN em [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) para uma descrição detalhada do erro.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the BeginAcceptTcpClient method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/5290dfb8-7e8f-4cf6-b64e-_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/5290dfb8-7e8f-4cf6-b64e-_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/5290dfb8-7e8f-4cf6-b64e-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação foi concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo utilizador, que contém informações sobre a operação de aceitar. Este objeto é passado para o `callback` delegar quando a operação foi concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>que referencia a criação de assíncrona a <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref>.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à socket. Consulte a secção observações para obter mais informações."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Create(System.Int32)
  id: Create(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Create(Int32)
  nameWithType: TcpListener.Create(Int32)
  fullName: System.Net.Sockets.TcpListener.Create(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Cria uma nova <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> instância escutar na porta especificada."
  syntax:
    content: public static System.Net.Sockets.TcpListener Create (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "A porta na qual escutar de entrada de tentativas de ligação."
    return:
      type: System.Net.Sockets.TcpListener
      description: "Returns <xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>.       Um novo <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> instância escutar na porta especificada."
  overload: System.Net.Sockets.TcpListener.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  id: EndAcceptSocket(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: EndAcceptSocket(IAsyncResult)
  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "No modo assíncrono aceita uma tentativa de ligação de entrada e cria um novo <xref:System.Net.Sockets.Socket>para processar a comunicação remota do anfitrião.</xref:System.Net.Sockets.Socket>"
  remarks: "Este blocos de método até que a operação esteja concluída. Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>      > [!NOTE] > Pode chamar o <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>propriedade o devolvido <xref:System.Net.Sockets.Socket>para identificar o número de porta e o endereço de rede do anfitrião remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize o <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>propriedade para obter o código de erro específico e consulte a documentação de código de erro de API de versão 2 do Sockets do Windows na biblioteca do MSDN em [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) para uma descrição detalhada do erro.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket. The callback delegate calls the EndAcceptSocket method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_14_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_14_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_14_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>devolvido por uma chamada para o <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>método.</xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> </xref:System.IAsyncResult>"
    return:
      type: System.Net.Sockets.Socket
      description: "A <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>       O <xref:System.Net.Sockets.Socket>utilizado para enviar e receber dados.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.EndAcceptSocket*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> asyncResult </code> parâmetro não foi criado por uma chamada para o <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>método.</xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O método de EndAcceptSocket anteriormente foi chamado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  id: EndAcceptTcpClient(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: EndAcceptTcpClient(IAsyncResult)
  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "No modo assíncrono aceita uma tentativa de ligação de entrada e cria um novo <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> para processar a comunicação remota do anfitrião."
  remarks: "Este blocos de método até que a operação esteja concluída. Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>      > [!NOTE] > Pode chamar o <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>propriedade do socket subjacente (<xref:System.Net.Sockets.TcpClient.Client%2A>) para identificar o número de porta e o endereço de rede do anfitrião remoto.</xref:System.Net.Sockets.TcpClient.Client%2A> </xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize o <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>propriedade para obter o código de erro específico e consulte a documentação de código de erro de API de versão 2 do Sockets do Windows na biblioteca do MSDN em [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) para uma descrição detalhada do erro.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket. The callback delegate calls the EndAcceptTcpClient method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/m-system.net.sockets.tcp_8_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/m-system.net.sockets.tcp_8_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_8_1.vb)]"
  syntax:
    content: public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>devolvido por uma chamada para o <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*>método.</xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*> </xref:System.IAsyncResult>"
    return:
      type: System.Net.Sockets.TcpClient
      description: "A <xref href=&quot;System.Net.Sockets.TcpClient&quot;></xref>.       O <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> utilizado para enviar e receber dados."
  overload: System.Net.Sockets.TcpListener.EndAcceptTcpClient*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um <xref:System.Boolean>valor que especifica se o <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> permite que apenas um socket subjacente escutar uma porta específica.</xref:System.Boolean>"
  remarks: "Por predefinição, os serviços de escuta vários podem estão à escuta para uma porta específica. No entanto, apenas um dos serviços de escuta dos possa realizar operações sobre o tráfego de rede enviado para a porta. Se mais do que um serviço de escuta tenta ligar a uma porta específica, um com o endereço IP específico mais processa o tráfego de rede enviado para essa porta. Pode utilizar a <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>propriedade para impedir a vários serviços de escuta de escuta de uma porta específica.</xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>       Defina esta propriedade antes de chamar <xref:System.Net.Sockets.TcpListener.Start%2A>, ou chame o <xref:System.Net.Sockets.TcpListener.Stop%2A>método e, em seguida, definir esta propriedade.</xref:System.Net.Sockets.TcpListener.Stop%2A> </xref:System.Net.Sockets.TcpListener.Start%2A>"
  example:
  - "The following code example gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/cpp/p-system.net.sockets.tcp_9_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/csharp/p-system.net.sockets.tcp_9_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_9_1.vb)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> permite apenas uma <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> para escutar uma porta específica; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. . A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> no Windows Server 2003 e Windows XP Service Pack 2 e posterior, e <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para todas as outras versões."
  overload: System.Net.Sockets.TcpListener.ExclusiveAddressUse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> foi iniciado. Chamar o <xref href=&quot;System.Net.Sockets.TcpListener.Stop&quot;> </xref> método e em seguida, defina o <xref:System.Net.Sockets.Socket.ExclusiveAddressUse*>propriedade.</xref:System.Net.Sockets.Socket.ExclusiveAddressUse*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à socket subjacente."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  id: LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém o subjacente <xref:System.Net.EndPoint>de atual <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>.</xref:System.Net.EndPoint>"
  remarks: "Pode utilizar a propriedade LocalEndpoint para identificar o número de porta e interface de rede local que está a ser utilizado para escutar para pedidos de ligação de cliente recebidos, depois de efetuada uma ligação de socket. Primeiro tem de o transmitir este <xref:System.Net.EndPoint>para <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.EndPoint> Em seguida, pode chamar o <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName>propriedade ao obter o endereço IP local e o <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName>propriedade para obter o número de porta local.</xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> </xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName>"
  example:
  - "The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.  \n  \n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/p-system.net.sockets.tcp_5_1.cpp)]\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_5_1.cs)]\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_5_1.vb)]"
  syntax:
    content: public System.Net.EndPoint LocalEndpoint { get; }
    return:
      type: System.Net.EndPoint
      description: "O <xref:System.Net.EndPoint>ao qual o <xref:System.Net.Sockets.Socket>está vinculado.</xref:System.Net.Sockets.Socket> </xref:System.Net.EndPoint>"
  overload: System.Net.Sockets.TcpListener.LocalEndpoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Pending
  id: Pending
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Pending()
  nameWithType: TcpListener.Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Determina se existem pedidos de ligação pendente."
  remarks: "Este método não determina se existem quaisquer pedidos de ligação pendente. Porque o <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>e <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>métodos bloquear execução enquanto o <xref:System.Net.Sockets.TcpListener.Start%2A>método foi colocado em fila um pedido de ligação de entrada, o método pendente pode ser utilizado para determinar se as ligações estão disponíveis antes de tentar aceitar.</xref:System.Net.Sockets.TcpListener.Start%2A> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>"
  example:
  - "The following code example checks the Pending method. If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.  \n  \n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_5_1.cpp)]\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_5_1.cs)]\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_5_1.vb)]"
  syntax:
    content: public bool Pending ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as ligações estão pendentes; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.TcpListener.Pending*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O serviço de escuta não foi iniciado com uma chamada para <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Server
  id: Server
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Server
  nameWithType: TcpListener.Server
  fullName: System.Net.Sockets.TcpListener.Server
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém a rede subjacente <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.TcpListener>cria um <xref:System.Net.Sockets.Socket>para escutar os pedidos de ligação de cliente recebidos.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener> Classes derivadas de <xref:System.Net.Sockets.TcpListener>pode utilizar esta propriedade para obter esta <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener> Utilize o subjacente <xref:System.Net.Sockets.Socket>devolvido pela propriedade de servidor, se necessitar de acesso para além disso que <xref:System.Net.Sockets.TcpListener>fornece.</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.Socket>      > [!NOTE] > Propriedade o servidor devolve apenas o <xref:System.Net.Sockets.Socket>utilizado para escutar para pedidos de ligação de cliente recebidos.</xref:System.Net.Sockets.Socket> Utilize o <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método para aceitar um pedido de ligação pendente e obter um <xref:System.Net.Sockets.Socket>para enviar e receber dados.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Também pode utilizar o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método para aceitar um pedido de ligação pendente e obter um <xref:System.Net.Sockets.TcpClient>para enviar e receber dados.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>"
  example:
  - "The following code example demonstrates the use of the Server property. The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.  \n  \n [!code-vb[TcpListenerProtectedMembers1#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_10_1.vb)]\n [!code-cs[TcpListenerProtectedMembers1#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_10_1.cs)]"
  syntax:
    content: public System.Net.Sockets.Socket Server { get; }
    return:
      type: System.Net.Sockets.Socket
      description: "<xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Subjacentes"
  overload: System.Net.Sockets.TcpListener.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Start
  id: Start
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Start()
  nameWithType: TcpListener.Start()
  fullName: System.Net.Sockets.TcpListener.Start()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Começa a escutar para pedidos recebidos de ligação."
  remarks: "O método de início inicializa subjacentes <xref:System.Net.Sockets.Socket>, associa a um ponto final local e escuta entrada tentativas de ligação.</xref:System.Net.Sockets.Socket> Se um pedido de ligação é recebido, o método de início será fila o pedido e continuar a escutar para pedidos adicionais até que tem de chamar o <xref:System.Net.Sockets.TcpListener.Stop%2A>método.</xref:System.Net.Sockets.TcpListener.Stop%2A> Se <xref:System.Net.Sockets.TcpListener>recebe um pedido de ligação depois de já tem em fila o número máximo de ligações, irá gerar um <xref:System.Net.Sockets.SocketException>no cliente.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.TcpListener>       Para remover uma ligação da fila de entrada de ligação, utilize o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método ou <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> O <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método irá remover uma ligação da fila e devolver um <xref:System.Net.Sockets.TcpClient>que pode utilizar para enviar e receber dados.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> O <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método irá devolver um <xref:System.Net.Sockets.Socket>que pode utilizar para o fazer.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Se a aplicação necessita apenas de e/s síncrona, utilize <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Para o controlo comportamental mais detalhado, utilize <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Ambos estes métodos bloquear até que um pedido de ligação está disponível na fila.       Utilize o <xref:System.Net.Sockets.TcpListener.Stop%2A>método para fechar o <xref:System.Net.Sockets.TcpListener>e parar de escutar.</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.TcpListener.Stop%2A> É responsável por fechar as suas ligações aceites separadamente.      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how Start is used to listen for incoming client connection attempts.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_6_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_6_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_6_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.Sockets.TcpListener.Start*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilize o &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; propriedade para obter o código de erro específico. Quando tiver adquirido este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  id: Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Start(Int32)
  nameWithType: TcpListener.Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Começa a escutar para pedidos recebidos de ligação com um número máximo de pendentes ligação."
  remarks: "O <xref:System.Net.Sockets.TcpListener.Start%2A>método inicializa subjacentes <xref:System.Net.Sockets.Socket>, associa a um ponto final local e escuta entrada tentativas de ligação.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.Start%2A> Se um pedido de ligação é recebido, <xref:System.Net.Sockets.TcpListener.Start%2A>irá fila o pedido e continuar a escutar para pedidos adicionais até que tem de chamar o <xref:System.Net.Sockets.TcpListener.Stop%2A>método.</xref:System.Net.Sockets.TcpListener.Stop%2A> </xref:System.Net.Sockets.TcpListener.Start%2A> Se <xref:System.Net.Sockets.TcpListener>recebe um pedido de ligação depois de já tem em fila o número máximo de ligações irá gerar um <xref:System.Net.Sockets.SocketException>no cliente.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.TcpListener>       Para remover uma ligação da fila de entrada de ligação, utilize o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método ou <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> O <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>método irá remover uma ligação da fila e devolver um <xref:System.Net.Sockets.TcpClient>que pode utilizar para enviar e receber dados.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> O <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método irá devolver um <xref:System.Net.Sockets.Socket>que pode utilizar para o fazer.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Se a aplicação necessita apenas de e/s síncrona, utilize <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Para obter mais controlo comportamental, utilize <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>método.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Ambos estes métodos bloquear até que um pedido de ligação está disponível na fila.       Utilize o <xref:System.Net.Sockets.TcpListener.Stop%2A>método para fechar o <xref:System.Net.Sockets.TcpListener>e parar de escutar.</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.TcpListener.Stop%2A> É responsável por fechar as suas ligações aceites separadamente.      > [!NOTE] > Utilize o <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>propriedade para obter o código de erro específico e consulte a documentação de código de erro de API de versão 2 do Sockets do Windows na biblioteca do MSDN em [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) para uma descrição detalhada do erro.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_17_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_17_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_17_1.vb)]"
  syntax:
    content: public void Start (int backlog);
    parameters:
    - id: backlog
      type: System.Int32
      description: "O comprimento máximo da fila de ligações pendentes."
  overload: System.Net.Sockets.TcpListener.Start*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O<code>  backlog </code> parâmetro é inferior a zero ou excede o número máximo de ligações permitidos."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>é nulo.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Stop
  id: Stop
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Stop()
  nameWithType: TcpListener.Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Fecha o serviço de escuta."
  remarks: "Parar fecha o serviço de escuta. Quaisquer pedidos de ligação não aceite na fila de espera serão perdidos. Anfitriões remotos à espera de uma ligação aceites irão gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> É responsável por fechar as suas ligações aceites separadamente.      > [!NOTE] > Este membro produz informações de rastreio, quando ativar o rastreio de rede na sua aplicação. Para obter mais informações, consulte [rastreio de rede no .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using the Stop method to close the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_9_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_9_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_9_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.Sockets.TcpListener.Stop*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilize o &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; propriedade para obter o código de erro específico. Quando tiver adquirido este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(Int32)
  nameWithType: TcpListener.TcpListener(Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(IPEndPoint)
  nameWithType: TcpListener.TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(IPAddress,Int32)
  nameWithType: TcpListener.TcpListener(IPAddress,Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.TcpListener.AcceptSocket
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocket()
  nameWithType: TcpListener.AcceptSocket()
  fullName: System.Net.Sockets.TcpListener.AcceptSocket()
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocketAsync()
  nameWithType: TcpListener.AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Socket>
  nameWithType: Task<Socket>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.Socket>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: Socket
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClient()
  nameWithType: TcpListener.AcceptTcpClient()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()
- uid: System.Net.Sockets.TcpClient
  parent: System.Net.Sockets
  isExternal: false
  name: TcpClient
  nameWithType: TcpClient
  fullName: System.Net.Sockets.TcpClient
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClientAsync()
  nameWithType: TcpListener.AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TcpClient>
  nameWithType: Task<TcpClient>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.TcpClient>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    nameWithType: TcpClient
    fullName: TcpClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.TcpListener.Active
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Active
  nameWithType: TcpListener.Active
  fullName: System.Net.Sockets.TcpListener.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: TcpListener.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptSocket(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptTcpClient(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
- uid: System.Net.Sockets.TcpListener.Create(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Create(Int32)
  nameWithType: TcpListener.Create(Int32)
  fullName: System.Net.Sockets.TcpListener.Create(Int32)
- uid: System.Net.Sockets.TcpListener
  parent: System.Net.Sockets
  isExternal: false
  name: TcpListener
  nameWithType: TcpListener
  fullName: System.Net.Sockets.TcpListener
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptSocket(IAsyncResult)
  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptTcpClient(IAsyncResult)
  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.TcpListener.Pending
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Pending()
  nameWithType: TcpListener.Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
- uid: System.Net.Sockets.TcpListener.Server
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Server
  nameWithType: TcpListener.Server
  fullName: System.Net.Sockets.TcpListener.Server
- uid: System.Net.Sockets.TcpListener.Start
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start()
  nameWithType: TcpListener.Start()
  fullName: System.Net.Sockets.TcpListener.Start()
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start(Int32)
  nameWithType: TcpListener.Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(Int32)
- uid: System.Net.Sockets.TcpListener.Stop
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Stop()
  nameWithType: TcpListener.Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
- uid: System.Net.Sockets.TcpListener.#ctor*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener
  nameWithType: TcpListener.TcpListener
- uid: System.Net.Sockets.TcpListener.AcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocket
  nameWithType: TcpListener.AcceptSocket
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocketAsync
  nameWithType: TcpListener.AcceptSocketAsync
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClient
  nameWithType: TcpListener.AcceptTcpClient
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClientAsync
  nameWithType: TcpListener.AcceptTcpClientAsync
- uid: System.Net.Sockets.TcpListener.Active*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Active
  nameWithType: TcpListener.Active
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AllowNatTraversal
  nameWithType: TcpListener.AllowNatTraversal
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptSocket
  nameWithType: TcpListener.BeginAcceptSocket
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptTcpClient
  nameWithType: TcpListener.BeginAcceptTcpClient
- uid: System.Net.Sockets.TcpListener.Create*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Create
  nameWithType: TcpListener.Create
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptSocket
  nameWithType: TcpListener.EndAcceptSocket
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptTcpClient
  nameWithType: TcpListener.EndAcceptTcpClient
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
- uid: System.Net.Sockets.TcpListener.Pending*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Pending
  nameWithType: TcpListener.Pending
- uid: System.Net.Sockets.TcpListener.Server*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Server
  nameWithType: TcpListener.Server
- uid: System.Net.Sockets.TcpListener.Start*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start
  nameWithType: TcpListener.Start
- uid: System.Net.Sockets.TcpListener.Stop*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Stop
  nameWithType: TcpListener.Stop
