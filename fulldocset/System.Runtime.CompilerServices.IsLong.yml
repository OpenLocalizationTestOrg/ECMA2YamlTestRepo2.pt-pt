### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.IsLong
  id: IsLong
  children: []
  langs:
  - csharp
  name: IsLong
  nameWithType: IsLong
  fullName: System.Runtime.CompilerServices.IsLong
  type: Class
  summary: "Indicates that a modified integer is a standard C++ <xref uid=&quot;langword_csharp_long&quot; name=&quot;long&quot; href=&quot;&quot;></xref> value. This class cannot be inherited."
  remarks: "The C++ standard indicates that a `long` value and an integer value are distinct types.  However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.  To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the IsLong modifier to any instance of a `long` when the instance is emited.  This process is critically important for maintaining language-level type safety.  \n  \n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  \n  \n You can emit custom modifiers into metadata using one of the following techniques:  \n  \n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \n  \n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](../Topic/Ilasm.exe%20\\(IL%20Assembler\\).md).  \n  \n-   Using the unmanaged reflection API."
  example:
  - "The following example demonstrates how to emit an IsLong object into an assembly using reflection.  \n  \n [!code-cpp[Runtime.CompilerServices.IsLong#1](~/add/codesnippet/CPP/t-system.runtime.compile_11_1.cpp)]"
  syntax:
    content: public static class IsLong
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
