### YamlMime:ManagedReference
items:
- uid: System.Data.EntityClient.EntityConnection
  id: EntityConnection
  children:
  - System.Data.EntityClient.EntityConnection.#ctor
  - System.Data.EntityClient.EntityConnection.#ctor(System.String)
  - System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  - System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.BeginTransaction
  - System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  - System.Data.EntityClient.EntityConnection.Close
  - System.Data.EntityClient.EntityConnection.ConnectionString
  - System.Data.EntityClient.EntityConnection.ConnectionTimeout
  - System.Data.EntityClient.EntityConnection.CreateCommand
  - System.Data.EntityClient.EntityConnection.CreateDbCommand
  - System.Data.EntityClient.EntityConnection.Database
  - System.Data.EntityClient.EntityConnection.DataSource
  - System.Data.EntityClient.EntityConnection.DbProviderFactory
  - System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  - System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  - System.Data.EntityClient.EntityConnection.Open
  - System.Data.EntityClient.EntityConnection.ServerVersion
  - System.Data.EntityClient.EntityConnection.State
  - System.Data.EntityClient.EntityConnection.StoreConnection
  langs:
  - csharp
  name: EntityConnection
  nameWithType: EntityConnection
  fullName: System.Data.EntityClient.EntityConnection
  type: Class
  summary: "Contains a reference to a conceptual model and a data source connection. This class cannot be inherited."
  remarks: "To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, EntityConnection must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:      -   The EntityConnection instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.      -   The EntityConnection instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case, the metadata is locked at construction time. No changes to the connection string are ever allowed.       When metadata is loaded, the EntityConnection verifies that the conceptual model, the storage model, and the mapping file are all present.       For code examples, see [Working with EntityClient](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)."
  syntax:
    content: 'public sealed class EntityConnection : System.Data.Common.DbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor
  id: '#ctor'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> class."
  remarks: "To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.       When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present.       For code examples, see [Working with EntityClient](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)."
  syntax:
    content: public EntityConnection ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> class, based on the connection string."
  remarks: "The  generate a named connection string that is stored in the application&quot;s configuration file. This named connection string can be supplied in place of the `connectionString` parameter when you instantiate the <xref:System.Data.EntityClient.EntityConnection> class.       To avoid inadvertently putting objects <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through this constructor (EntityConnection), which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.       When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present.       For code examples, see [Working with EntityClient](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)."
  syntax:
    content: public EntityConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "The provider-specific connection string."
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An invalid connection string keyword has been provided, or a required connection string keyword has not been provided."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  id: '#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> class with a specified <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref> and <xref href=&quot;System.Data.Common.DbConnection&quot;></xref>."
  remarks: "This constructor enables you to create an <xref:System.Data.EntityClient.EntityConnection> from metadata that is not from a file on a disk or from an embedded resource in an assembly.       To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, the <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through this constructor (EntityConnection), which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.       When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  syntax:
    content: public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);
    parameters:
    - id: workspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "A <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref> to be associated with this <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>."
    - id: connection
      type: System.Data.Common.DbConnection
      description: "The underlying data source connection for this <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> object."
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>workspace</code> or <code>connection</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The conceptual model is missing from the workspace.       -or-       The mapping file is missing from the workspace.       -or-       The storage model is missing from the workspace.       -or-       The <code>connection</code> is not in a closed state."
  - type: System.Data.ProviderIncompatibleException
    commentId: T:System.Data.ProviderIncompatibleException
    description: "The <code>connection</code> is not from an ADO.NET Entity Framework-compatible provider."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "To be added."
    return:
      type: System.Data.Common.DbTransaction
      description: "To be added."
  overload: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Begins a transaction by using the underlying provider."
  remarks: "The BeginTransaction method uses the <xref:System.Data.IsolationLevel> transaction isolation level. To specify a different isolation level, call <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. This value might be interpreted differently by different underlying providers. If you want your application to be portable across multiple providers, it should explicitly specify the transaction isolation level by calling <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.       At any particular moment there can be no more than one active transaction that was created through BeginTransaction. An attempt to call any of the BeginTransaction overloads on an <xref:System.Data.EntityClient.EntityConnection> that already has a current transaction results in an <xref:System.InvalidOperationException>."
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. The returned <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref> instance can later be associated with the <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;></xref> to execute the command under that transaction."
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The underlying provider is not known.       -or-       The call to BeginTransaction was made on an <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> that already has a current transaction.       -or-       The state of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> is not <xref href=&quot;System.Data.ConnectionState&quot;></xref>."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Begins a transaction with the specified isolation level by using the underlying provider."
  remarks: "At any particular moment there can be no more than one active transaction that was created through <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. An attempt to call any of the <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> overloads on an <xref:System.Data.EntityClient.EntityConnection> that already has a current transaction results in an <xref:System.InvalidOperationException>."
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "The isolation level of the transaction."
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. The returned <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref> instance can later be associated with the <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;></xref> to execute the command under that transaction."
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The underlying provider is not known.       -or-       The call to <xref:System.Data.EntityClient.EntityConnection.BeginTransaction*> was made on an <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> that already has a current transaction.       -or-       The state of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> is not <xref href=&quot;System.Data.ConnectionState&quot;></xref>."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Not supported."
  remarks: "The ChangeDatabase method is required when deriving from <xref:System.Data.Common.DbConnection>. This method is not supported and will raise a <xref:System.NotSupportedException>."
  syntax:
    content: public override void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "Not supported."
  overload: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "When the method is called."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Close
  id: Close
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Closes the connection to the database."
  remarks: "If the underlying data provider is not known, the call to Close does nothing."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Close*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "An error occurred when closing the connection."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Gets or sets the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> connection string."
  remarks: "An `EntityClient` connection string consists of a sequence of keyword/value parameter pairs separated by semicolons. The equals sign (=) connects each keyword and its value. The following table lists the valid names for keyword values in the ConnectionString.  \n  \n|Keyword|Description|  \n|-------------|-----------------|  \n|`Provider`|Required if the `Name` keyword is not specified. The provider name, which is used to retrieve the <xref:System.Data.Common.DbProviderFactory> object for the underlying provider. This value is constant.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty value for the `Provider` keyword is required. This keyword is mutually exclusive with the `Name` keyword.|  \n|`Provider Connection String`|Optional. Specifies the provider-specific connection string that is passed to the underlying data source. This connection string is expressed by using valid keyword/value pairs for the data provider. An invalid `Provider Connection String` will cause a run-time error when it is evaluated by the data source.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.<br /><br /> The value of the `Provider Connection String` must be surrounded by quotes. The following is an example:<br /><br /> `Provider Connection String =\"Server=serverName; User ID = userID\";`<br /><br /> The following example is not going to work:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  \n|`Metadata`|Required if the `Name` keyword is not specified. A pipe-delimited list of directories, files, and resource locations in which to look for model and mapping information. The following is an example:<br /><br /> `Metadata=`<br /><br /> `c:\\model &#124; c:\\model\\sql\\mapping.msl;`<br /><br /> Blank spaces on each side of the pipe separator are ignored.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.|  \n|`Name`|The application can optionally specify the connection name in an application configuration file that provides the required keyword/value connection string values. In this case, you cannot supply them directly in the connection string. The `Name` keyword is not allowed in a configuration file.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty values for Provider keyword is required.<br /><br /> This keyword is mutually exclusive with all the other connection string keywords.|  \n  \n The application can supply the keyword/values directly in the ConnectionString property, or it can specify a value for the `Name` keyword. If the `Name` keyword is specified, the connection string keyword/values are retrieved from an application configuration file, as follows:  \n  \n `Name=AdventureWorksEntities;`  \n  \n If the `Name` keyword is used in the ConnectionString property, other keywords are not allowed. The `Name` keyword refers to a named connection string that is stored in the `connectionStrings` section in an application configuration file, as shown in the following example. The `Provider`, `Metadata`, and `Provider Connection String` values are retrieved from the configuration file at run time.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The keyword/value pairs can also be supplied directly in the ConnectionString property, as shown in the following example. In this case, the `Name` keyword is not used.  \n  \n```  \n\"Provider=System.Data.SqlClient;  \nMetadata=c:\\metadata|c:\\Metadata\\Sql;  \nProvider Connection String= 'Data Source=localhost;  \n    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' \"  \n```  \n  \n To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  \n  \n When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  example:
  - "The following example demonstrates how to use the <xref:System.Data.EntityClient.EntityConnectionStringBuilder> in conjunction with a <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. The code sets properties of a `SqlConnectionStringBuilder` to create a <xref:System.Data.SqlClient.SqlConnection> string that supplies part of the underlying provider connection string. Note that the `Provider` name cannot be set by using the `SqlConnectionStringBuilder`, because it does not use valid `SqlConnection` syntax. The code creates the <xref:System.Data.EntityClient.EntityConnection> string by setting `EntityConnectionStringBuilder` properties.  \n  \n [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/visualbasic/eSQLExamplesVB/Program.vb#buildingconnectionstringwithentitycommand)]\n [!code-cs[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/csharp/eSQLExamplesCS/Program.cs#buildingconnectionstringwithentitycommand)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "The connection string required to establish the initial connection to a data source. The default value is an empty string. On a closed connection, the currently set value is returned. If no value has been set, an empty string is returned."
  overload: System.Data.EntityClient.EntityConnection.ConnectionString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "An attempt was made to set the ConnectionString property after the [EntityConnection](~/add/includes/ajax-current-ext-md.md)’s <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref> was initialized. The [MetadataWorkspace](~/add/includes/ajax-current-ext-md.md) is initialized either when the <xref href=&quot;System.Data.Odbc.OdbcError&quot;></xref> instance is constructed through the overload that takes a <xref href=&quot;System.Data.Odbc.OdbcError&quot;></xref> as a parameter, or when the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> instance has been opened."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An invalid connection string keyword has been provided or a required connection string keyword has not been provided."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Gets the number of seconds to wait when attempting to establish a connection before ending the attempt and generating an error."
  remarks: "Returns zero if the underlying data provider is not known."
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "The time (in seconds) to wait for a connection to open. The default value is the underlying data provider&quot;s default time-out."
  overload: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value set is less than 0."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Creates a new instance of an <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;></xref>, with the <xref:System.Data.EntityClient.EntityCommand.Connection*> set to this <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>."
  syntax:
    content: public System.Data.EntityClient.EntityCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityCommand
      description: "An <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;></xref> object."
  overload: System.Data.EntityClient.EntityConnection.CreateCommand*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The name of the underlying data provider is not known."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "To be added."
  overload: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Database
  id: Database
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Gets the name of the current database, or the database that will be used after a connection is opened."
  remarks: "For the specific keyword value, such as `Database`, that maps to the Database property, see the documentation for the underlying data provider. For [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] equivalent keywords, see the documentation for the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property."
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "The value of the <xref uid=&quot;langword_csharp_Database&quot; name=&quot;Database&quot; href=&quot;&quot;></xref> property of the underlying data provider."
  overload: System.Data.EntityClient.EntityConnection.Database*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The underlying data provider is not known."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DataSource
  id: DataSource
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Gets the name or network address of the data source to connect to."
  remarks: "For the specific keyword value, such as `DataSource`, that maps to the DataSource property, see the documentation for the underlying data provider. For [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] equivalent keywords, see the documentation for the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property."
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "The name of the data source. The default value is an empty string."
  overload: System.Data.EntityClient.EntityConnection.DataSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The underlying data provider is not known."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "To be added."
  overload: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "To be added."
  overload: System.Data.EntityClient.EntityConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Enlists this <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> in the specified transaction."
  remarks: "This method forwards the call to the data source connection to explicitly enlist in the passed <xref:System.Transactions.Transaction>."
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "The transaction object to enlist into."
  overload: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The state of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> is not <xref href=&quot;System.Data.ConnectionState&quot;></xref>."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  id: GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Returns the <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref> associated with this <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>."
  remarks: "A <xref:System.Data.Metadata.Edm.MetadataWorkspace> is automatically created when the <xref:System.Data.EntityClient.EntityConnection> class is created. The creation process might throw metadata-specific exceptions. Metadata is loaded into memory and an Entity Data Model (EDM) application uses that metadata to access information about the underlying data source. For more information, see [ADO.NET Metadata](http://msdn.microsoft.com/en-us/196097a5-a791-4ac4-9e6a-805685d481d5).       To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string may be changed multiple times before the connection is opened. <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.       When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  syntax:
    content: public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();
    parameters: []
    return:
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "The <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref> associated with this <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>."
  overload: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  exceptions:
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "The inline connection string contains an invalid <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;></xref> keyword value."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Open
  id: Open
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Establishes a connection to the data source by calling the underlying data provider&quot;s<xref uid=&quot;langword_csharp_ Open&quot; name=&quot; Open&quot; href=&quot;&quot;></xref> method."
  remarks: "To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.      -   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which that accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.       When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "An error occurs when you open the connection, or the name of the underlying data provider is not known."
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "The inline connection string contains an invalid <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;></xref> keyword value."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Gets a string that contains the version of the data source to which the client is connected."
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "The version of the data source that is contained in the provider connection string."
  overload: System.Data.EntityClient.EntityConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The connection is closed."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.State
  id: State
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Gets the <xref href=&quot;System.Data.ConnectionState&quot;></xref> property of the underlying provider if the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> is open. Otherwise, returns <xref href=&quot;System.Data.ConnectionState&quot;></xref>."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;></xref>, if and only if both the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>’s internal state and the underlying provider&quot;s <xref href=&quot;System.Data.ConnectionState&quot;></xref> are open. If the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>’s state is open but the provider&quot;s <xref href=&quot;System.Data.ConnectionState&quot;></xref> is closed, this property returns <xref href=&quot;System.Data.ConnectionState&quot;></xref>. Otherwise, it returns <xref href=&quot;System.Data.ConnectionState&quot;></xref>."
  overload: System.Data.EntityClient.EntityConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  id: StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Provides access to the underlying data source connection that is used by the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> object."
  remarks: "If the <xref:System.Data.EntityClient.EntityConnection> object is closed, the returned data source connection will be closed. If it is open, an open data source connection will be returned. If the data source connection information was set, the returned value is always non-null. If there is no data source connection information (for example, if the default constructor was used and no connection string was set afterwards), then a null reference is returned.       The same data source connection used by the Entity Framework can be shared with other parts of an application. The data source connection is returned as a <xref:System.Data.Common.DbConnection> object from the <xref:System.Data.Objects.ObjectContext.Connection%2A> property of <xref:System.Data.Objects.ObjectContext>, or from the StoreConnection property of <xref:System.Data.EntityClient.EntityConnection>."
  syntax:
    content: public System.Data.Common.DbConnection StoreConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "The <xref href=&quot;System.Data.Common.DbConnection&quot;></xref> for the data source connection."
  overload: System.Data.EntityClient.EntityConnection.StoreConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.ProviderIncompatibleException
  parent: System.Data
  isExternal: false
  name: ProviderIncompatibleException
  nameWithType: ProviderIncompatibleException
  fullName: System.Data.ProviderIncompatibleException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Data.MetadataException
  parent: System.Data
  isExternal: false
  name: MetadataException
  nameWithType: MetadataException
  fullName: System.Data.MetadataException
- uid: System.Data.EntityClient.EntityConnection.#ctor
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
- uid: System.Data.EntityClient.EntityTransaction
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityTransaction
  nameWithType: EntityTransaction
  fullName: System.Data.EntityClient.EntityTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
- uid: System.Data.EntityClient.EntityConnection.Close
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
- uid: System.Data.EntityClient.EntityCommand
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityCommand
  nameWithType: EntityCommand
  fullName: System.Data.EntityClient.EntityCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.EntityClient.EntityConnection.Database
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
- uid: System.Data.EntityClient.EntityConnection.Open
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
- uid: System.Data.EntityClient.EntityConnection.#ctor*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection
  nameWithType: EntityConnection.EntityConnection
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: EntityConnection.BeginDbTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: EntityConnection.BeginTransaction
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: EntityConnection.ChangeDatabase
- uid: System.Data.EntityClient.EntityConnection.Close*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close
  nameWithType: EntityConnection.Close
- uid: System.Data.EntityClient.EntityConnection.ConnectionString*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
- uid: System.Data.EntityClient.EntityConnection.CreateCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand
  nameWithType: EntityConnection.CreateCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: EntityConnection.CreateDbCommand
- uid: System.Data.EntityClient.EntityConnection.Database*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose
  nameWithType: EntityConnection.Dispose
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: EntityConnection.EnlistTransaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace
  nameWithType: EntityConnection.GetMetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.Open*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open
  nameWithType: EntityConnection.Open
- uid: System.Data.EntityClient.EntityConnection.ServerVersion*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
- uid: System.Data.EntityClient.EntityConnection.StoreConnection*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
