### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PnrpPermission
  id: PnrpPermission
  children:
  - System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.PeerToPeer.PnrpPermission.Copy
  - System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  - System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  - System.Net.PeerToPeer.PnrpPermission.ToXml
  - System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PnrpPermission
  nameWithType: PnrpPermission
  fullName: System.Net.PeerToPeer.PnrpPermission
  type: Class
  summary: "Especifica os valores que são utilizados em <xref href=&quot;System.Net.PeerToPeer&quot;> </xref> permissões de objeto."
  remarks: "As permissões predefinidas permitem todos os locais e aplicações de zona de Intranet para aceder aos serviços PNRP. Se as permissões predefinidas não são alteradas, todas as aplicações locais e o local de site tenham acesso aos serviços de ponto-a-ponto, mas sem acesso de têm de aplicações do global (internet).       As instâncias deste tipo ter dois Estados de permissão: Se possuir sem acesso a recursos protegidos pela permissão ou estes tenham acesso sem restrições completo a esses recursos."
  syntax:
    content: 'public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> classe com o estado de permissão inicial fornecido."
  remarks: "As instâncias deste tipo ter dois Estados de permissão: Se possuir sem acesso a recursos protegidos pela permissão ou estes tenham acesso sem restrições completo a esses recursos.       Se `state` é sem restrições, a instância de PnrpPermission passa todos os pedidos. Se `state` contém qualquer outro valor, a instância de PnrpPermission falha todos os pedidos."
  syntax:
    content: public PnrpPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Um dos valores existentes no <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> enumeração."
  overload: System.Net.PeerToPeer.PnrpPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  id: Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Cria e devolve uma cópia idêntica atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>."
  remarks: "Uma cópia de uma permissão representa o mesmo acesso aos recursos, como a permissão original.       As instâncias deste tipo ter dois Estados de permissão: Se possuir sem acesso a recursos protegidos pela permissão ou estes tenham acesso sem restrições completo a esses recursos."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Um objeto com uma interface IPermission, cuja instância contém uma cópia da instância atual do <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.Copy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-O parâmetro não é um <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> elemento.      -Número de versão o parâmetro não é suportado."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O parâmetro é uma <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> referência (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Reconstructs um objeto de segurança com um estado especificado de uma codificação de XML."
  remarks: "Representa o modelo de objeto XML para codificação objetos de segurança. Esta classe não pode ser herdada.       Esta classe se destina a ser uma implementação simples de um modelo de objeto XML simple para utilização no sistema de segurança e não para utilização como um modelo de objeto XML geral."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "O codificação XML a utilizar para reconstrua a permissão."
  overload: System.Net.PeerToPeer.PnrpPermission.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-O parâmetro não é um <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> elemento.      -Número de versão o parâmetro não é suportado."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O parâmetro é uma <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> referência (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Cria e devolve uma permissão que está a interseção dos atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> e a permissão especificada."
  remarks: "A intersecção de dois permissões é uma permissão que descreve o conjunto de operações de ambas as descrevem em comum. Apenas um pedido que transmite ambas as permissões originais passarão a interseção.       As instruções seguintes têm de ser `true` para todas as implementações do método Intersect. X e Y representam <xref:System.Security.IPermission>referências de objeto que não são um `null` referência (Nothing em Visual Basic).</xref:System.Security.IPermission>      -X.Intersect(X) devolve um valor igual a X.      -X.Intersect(Y) devolve o mesmo valor que Y.Intersect(X).      -X.Intersect(a `null` reference (`Nothing` in Visual Basic)) devolve um `null` referência (`Nothing` no Visual Basic)."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uma permissão para Intersect com a permissão atual. Tem de ser do mesmo tipo de que a permissão atual."
    return:
      type: System.Security.IPermission
      description: "Uma nova permissão que representa a interseção dos atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> e a permissão especificada. Esta nova permissão é um <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> referência (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) se a interseção está vazia."
  overload: System.Net.PeerToPeer.PnrpPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O parâmetro de destino não é um <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> referência (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) e não é uma instância da mesma classe como a permissão atual."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Determina se atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> é um subconjunto da permissão especificado."
  remarks: "The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.IsSubsetOf(X) returns `true`.  \n  \n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \n  \n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \n  \n-  \n  \n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uma permissão que está a ser testada para a relação de subconjunto. Esta permissão tem de ser do mesmo tipo como a permissão atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Se atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> é um subconjunto da permissão especificado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O parâmetro de destino não é um <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> referência (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) e não é uma instância da mesma classe como a permissão atual."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Devolve um valor que especificar se atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> é restrita."
  remarks: "Uma permissão sem restrições representa acesso a todos os recursos protegidos pela permissão."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Se a atual permissão é restrita; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  id: ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Cria uma codificação XML do <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> e o respetivo estado atual."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;> </xref> objeto que contém uma codificação XML da permissão, incluindo as informações de estado."
  overload: System.Net.PeerToPeer.PnrpPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Cria uma permissão que é a União de atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> e a permissão especificada."
  remarks: "O resultado de uma chamada para União é uma permissão que representa todas as operações representadas por ambos os atual <xref:System.Net.PeerToPeer.PnrpPermission>e a permissão especificada.</xref:System.Net.PeerToPeer.PnrpPermission> Qualquer pedido que passa a permissão transmite os respetivos union.       As instruções seguintes têm de ser `true` para todas as implementações do método Union. X e Y representam <xref:System.Security.IPermission>objetos que não são um `null` referência (`Nothing` no Visual Basic).</xref:System.Security.IPermission>      -X.Union(X) devolve um objeto com o mesmo valor que X.      -X.Union(Y) devolve um objeto com o mesmo valor que o objeto devolvido pelo Y.Union(X).      -X.Union(a `null` reference (`Nothing` in Visual Basic)) devolve um objeto com o mesmo valor que X."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uma permissão para combinar com a permissão atual. Tem de ser do mesmo tipo de que a permissão atual."
    return:
      type: System.Security.IPermission
      description: "Uma nova permissão que representa a União de atual <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> e a permissão especificada."
  overload: System.Net.PeerToPeer.PnrpPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code>o parâmetro é inválido."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission
  nameWithType: PnrpPermission.PnrpPermission
- uid: System.Net.PeerToPeer.PnrpPermission.Copy*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy
  nameWithType: PnrpPermission.Copy
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml
  nameWithType: PnrpPermission.FromXml
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect
  nameWithType: PnrpPermission.Intersect
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PnrpPermission.IsSubsetOf
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PnrpPermission.IsUnrestricted
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml
  nameWithType: PnrpPermission.ToXml
- uid: System.Net.PeerToPeer.PnrpPermission.Union*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union
  nameWithType: PnrpPermission.Union
