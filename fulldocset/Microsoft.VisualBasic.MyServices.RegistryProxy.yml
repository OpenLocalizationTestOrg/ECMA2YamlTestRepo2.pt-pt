### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy
  id: RegistryProxy
  children:
  - Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot
  - Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig
  - Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser
  - Microsoft.VisualBasic.MyServices.RegistryProxy.DynData
  - Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(System.String,System.String,System.Object)
  - Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine
  - Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData
  - Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object)
  - Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.VisualBasic.MyServices.RegistryProxy.Users
  langs:
  - csharp
  name: RegistryProxy
  nameWithType: RegistryProxy
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy
  type: Class
  summary: "Provides properties and methods for manipulating the registry."
  remarks: "To use these properties, you must have Read and Write permission from the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. Any code running with full trust (under the default security policy, this is any code installed on the user&quot;s local hard drive) has the necessary permissions to access the registry. For more information, see the <xref:System.Security.Permissions.RegistryPermission> class.       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read data from the registry|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the value `Name` from `HKEY_CURRENT_USER\\Software\\MyApp` and displays it in a message box.  \n  \n [!code-vb[VbVbalrMyRegistry#8](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._2_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]

      public class RegistryProxy
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: RegistryProxy.ClassesRoot
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type which provides access to <xref uid=&quot;langword_csharp_HKEY_CLASSES_ROOT&quot; name=&quot;HKEY_CLASSES_ROOT&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_CLASSES_ROOT` is primarily used to store information about file associations in Windows.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant only those privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Description|   |-----------|-----------------|   |AllAccess|Create, read, and write access to registry variables.|   |Create|Create access to registry variables.|   |NoAccess|No access to registry variables.|   |Read|Read access to registry variables.|   |Write|Write access to registry variables.|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example gets the names of the subkeys for the `ClassesRoot` registry key and adds them to `ListBox1`.  \n  \n [!code-vb[VbVbalrMyRegistry#10](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._0_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` in your project."
  syntax:
    content: public Microsoft.Win32.RegistryKey ClassesRoot { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: RegistryProxy.CurrentConfig
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type which provides access to <xref uid=&quot;langword_csharp_HKEY_CURRENT_CONFIG&quot; name=&quot;HKEY_CURRENT_CONFIG&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_CURRENT_CONFIG` is primarily used to store settings for devices on the computer.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant only those privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Description|   |-----------|-----------------|   |AllAccess|Create, read, and write access to registry variables.|   |Create|Create access to registry variables.|   |NoAccess|No access to registry variables.|   |Read|Read access to registry variables.|   |Write|Write access to registry variables.|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example creates the subkey `MyDeviceSettings`.  \n  \n [!code-vb[VbVbalrMyRegistry#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._48_1.vb)]"
  syntax:
    content: public Microsoft.Win32.RegistryKey CurrentConfig { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser
  id: CurrentUser
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: CurrentUser
  nameWithType: RegistryProxy.CurrentUser
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type which provides access to <xref uid=&quot;langword_csharp_HKEY_CURRENT_USER&quot; name=&quot;HKEY_CURRENT_USER&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_CURRENT_USER` is primarily used to store per-user settings, such as colors and fonts, in Windows. The key differ according to the user.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant the fewest privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Description|   |-----------|-----------------|   |AllAccess|Create, read, and write access to registry variables.|   |Create|Create access to registry variables.|   |NoAccess|No access to registry variables.|   |Read|Read access to registry variables.|   |Write|Write access to registry variables.|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the subkey `Software\\MyCompany\\Preferences\\UserData`.  \n  \n [!code-vb[VbVbalrMyRegistry#2](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._47_1.vb)]"
  syntax:
    content: public Microsoft.Win32.RegistryKey CurrentUser { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.DynData
  id: DynData
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: DynData
  nameWithType: RegistryProxy.DynData
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.DynData
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type, which provides access to <xref uid=&quot;langword_csharp_HKEY_DYNDATA&quot; name=&quot;HKEY_DYNDATA&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_DYNDATA` is used to store dynamic registry data, such as that used by Virtual Device Drivers and is supported only on Windows 95/98 systems. On non-Windows 95/98 systems, calling any methods of the key returned by `Registry.DynData`, such as `CreateSubKey`, `DeleteSubKey`, `GetSubKeyCount`, `GetValueCount`, etc., will throw a <xref:System.IO.IOException>.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant the fewest privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Description|   |-----------|-----------------|   |AllAccess|Create, read, and write access to registry variables.|   |Create|Create access to registry variables.|   |NoAccess|No access to registry variables.|   |Read|Read access to registry variables.|   |Write|Write access to registry variables.|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the subkey tree `Software\\MyCompany\\Preferences`.  \n  \n [!code-vb[VbVbalrMyRegistry#1](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._54_1.vb)]"
  syntax:
    content: public Microsoft.Win32.RegistryKey DynData { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.DynData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: GetValue(String,String,Object)
  nameWithType: RegistryProxy.GetValue(String,String,Object)
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(String,String,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Gets a value from a registry key."
  remarks: "`valueName` is not case-sensitive.       A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To retrieve this unnamed value, specify either null or the empty string (&quot;&quot;) for `valueName`.       The following table lists examples of tasks involving the `GetValue` method.      |To|See|   |--------|---------|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the value `Name` from `HKEY_CURRENT_USER\\Software\\MyApp` and displays it in a `MessageBox`.  \n  \n [!code-vb[VbVbalrMyRegistry#9](~/add/codesnippet/visualbasic/9a93dcf8-9de6-432f-a595-_1.vb)]"
  syntax:
    content: public object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Key from which the value is to be retrieved. Required."
    - id: valueName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Value to be retrieved. Required."
    - id: defaultValue
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Default value to be supplied if the value does not exist. Required."
    return:
      type: System.Object
      description: "Gets a value from a registry key."
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user does not have the permissions required to read from the registry key."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> that contains the specified value has been marked for deletion."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code> does not begin with a valid registry root."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine
  id: LocalMachine
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: LocalMachine
  nameWithType: RegistryProxy.LocalMachine
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type, which provides access to <xref uid=&quot;langword_csharp_HKEY_LOCAL_MACHINE&quot; name=&quot;HKEY_LOCAL_MACHINE&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_LOCAL_MACHINE` is usually used to store settings that do not vary from user to user in Windows. All users of the computer share this key. Its five subkeys (`Hardware`, `SAM`, `Security`, `Software`, and `System`) hold configuration data for the local machine.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant the fewest privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Description|   |-----------|-----------------|   |AllAccess|Create, read, and write access to registry variables.|   |Create|Create access to registry variables.|   |NoAccess|No access to registry variables.|   |Read|Read access to registry variables.|   |Write|Write access to registry variables.|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the subkey `Software\\MyCompany\\Preferences` and sets the value `FontColor` to `\"red\"`.  \n  \n [!code-vb[VbVbalrMyRegistry#3](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._97_1.vb)]"
  syntax:
    content: public Microsoft.Win32.RegistryKey LocalMachine { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData
  id: PerformanceData
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: PerformanceData
  nameWithType: RegistryProxy.PerformanceData
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type, which provides access to <xref uid=&quot;langword_csharp_HKEY_PERFORMANCE_DATA&quot; name=&quot;HKEY_PERFORMANCE_DATA&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_PERFORMANCE_DATA` is used to access performance information for software components. Each software component creates keys for its objects and counters when it is installed and writes counter data while it is executing. This data is not stored in the registry, although the registry is used to access it. Instead, calling registry functions via `HKEY_PERFORMANCE_DATA` causes the system to collect the data from the appropriate system object managers.       This key does not exist on Windows 98 systems; an attempt to use it other than calling the `Name` method will throw an <xref:System.IO.IOException>.       This key cannot normally be written to; attempting to create a subkey on it will throw an <xref:System.IO.IOException>.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant the fewest privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Description|   |-----------|-----------------|   |AllAccess|Create, read, and write access to registry variables.|   |Create|Create access to registry variables.|   |NoAccess|No access to registry variables.|   |Read|Read access to registry variables.|   |Write|Write access to registry variables.|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |To|See|   |--------|---------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example gets the value `ThisSoftwar`e from the `MyCompany` subkey.  \n  \n [!code-vb[VbVbalrMyRegistry#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._57_1.vb)]"
  syntax:
    content: public Microsoft.Win32.RegistryKey PerformanceData { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: SetValue(String,String,Object)
  nameWithType: RegistryProxy.SetValue(String,String,Object)
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(String,String,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Writes a value to a registry key."
  remarks: "If the specified key or value does not exist, it is created.       Here is an example of a task involving the `My.Computer.Registry.SetValue` method.      |To|See|   |--------|---------|   |Set a value in a registry key|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example sets the value `FontColor` to \"red\" in the key `HKEY_LOCAL_MACHINE\\Software\\MyCompany\\Preferences`.  \n  \n [!code-vb[VbVbalrMyRegistry#3](~/add/codesnippet/visualbasic/fde3d5e5-73de-4529-936f-_1.vb)]"
  syntax:
    content: public void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Name of the key to be written to. Required."
    - id: valueName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Name of the value to be written. Required."
    - id: value
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Value to be written. Required."
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code> does not begin with a valid registry root.       -or-       <code>valueName</code> is longer than the maximum length allowed (255 characters)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> is read-only and thus cannot be written to; for example, it is a root-level node, or it has not been opened with write access.."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user does not have the permissions required to create or modify registry keys."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: RegistryProxy.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(String,String,Object,RegistryValueKind)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Writes a value to a registry key."
  remarks: "If the specified key or value does not exist, it is created.       Here is an example of a task involving the `My.Computer.Registry.SetValue` method.      |To|See|   |--------|---------|   |Set a value in a registry key|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example sets the value `FontColor` to \"red\" in the key `HKEY_LOCAL_MACHINE\\Software\\MyCompany\\Preferences`.  \n  \n [!code-vb[VbVbalrMyRegistry#3](~/add/codesnippet/visualbasic/a630d4af-e057-4eda-b2b5-_1.vb)]"
  syntax:
    content: public void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Name of the key to be written to. Required."
    - id: valueName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Name of the value to be written. Required."
    - id: value
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Value to be written. Required."
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "<xref href=&quot;Microsoft.Win32.RegistryValueKind&quot;></xref>. Required."
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code> does not begin with a valid registry root.       -or-       <code>keyName</code> is longer than the maximum length allowed (255 characters).       -or-       The type of <code>value</code> does not match the registry data type specified by <code>valueKind</code>, therefore the data cannot be converted properly."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or it has not been opened with write access."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user does not have the permissions required to create or modify registry keys."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.Users
  id: Users
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  langs:
  - csharp
  name: Users
  nameWithType: RegistryProxy.Users
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.Users
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref> type, which provides access to <xref uid=&quot;langword_csharp_HKEY_USERS&quot; name=&quot;HKEY_USERS&quot; href=&quot;&quot;></xref>."
  remarks: "`HKEY_USERS` is primarily used to store default settings for first-time users.       The <xref:System.Security.Permissions.RegistryPermission> class, which is in the <xref:System.Security.Permissions> namespace, controls access to registry variables. Registry variables should not be stored in memory locations where code without <xref:System.Security.Permissions.RegistryPermission> can access them. Similarly, when granting permissions, grant the fewest privileges necessary to get the job done.       Registry permission access values are defined by the <xref:System.Security.Permissions.RegistryPermissionAccess> enumeration. The following table details its members.      |Value|Access to Registry Variables|   |-----------|----------------------------------|   |AllAccess|Create, read, and write|   |Create|Create|   |NoAccess|No access.|   |Read|Read|   |Write|Write|       The following table lists examples of tasks involving the `My.Computer.Registry` object.      |**To**|**See**|   |------------|-------------|   |Create a registry key and set its value|[How to: Create a Registry Key and Set Its Value](~/add/includes/ajax-current-ext-md.md)|   |Delete a registry key|[How to: Delete a Registry Key](~/add/includes/ajax-current-ext-md.md)|   |Read a value from a registry key|[How to: Read a Value from a Registry Key](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example counts and displays the number of values in the registry key.  \n  \n [!code-vb[VbVbalrMyRegistry#4](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._74_1.vb)]"
  syntax:
    content: public Microsoft.Win32.RegistryKey Users { get; }
    return:
      type: Microsoft.Win32.RegistryKey
      description: <xref href="Microsoft.Win32.RegistryKey"></xref>
  overload: Microsoft.VisualBasic.MyServices.RegistryProxy.Users*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: ClassesRoot
  nameWithType: RegistryProxy.ClassesRoot
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: CurrentConfig
  nameWithType: RegistryProxy.CurrentConfig
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: CurrentUser
  nameWithType: RegistryProxy.CurrentUser
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.DynData
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: DynData
  nameWithType: RegistryProxy.DynData
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.DynData
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: GetValue(String,String,Object)
  nameWithType: RegistryProxy.GetValue(String,String,Object)
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: LocalMachine
  nameWithType: RegistryProxy.LocalMachine
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: PerformanceData
  nameWithType: RegistryProxy.PerformanceData
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: SetValue(String,String,Object)
  nameWithType: RegistryProxy.SetValue(String,String,Object)
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(String,String,Object)
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: RegistryProxy.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue(String,String,Object,RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.Users
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: Users
  nameWithType: RegistryProxy.Users
  fullName: Microsoft.VisualBasic.MyServices.RegistryProxy.Users
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.ClassesRoot*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: ClassesRoot
  nameWithType: RegistryProxy.ClassesRoot
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentConfig*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: CurrentConfig
  nameWithType: RegistryProxy.CurrentConfig
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.CurrentUser*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: CurrentUser
  nameWithType: RegistryProxy.CurrentUser
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.DynData*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: DynData
  nameWithType: RegistryProxy.DynData
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.GetValue*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: GetValue
  nameWithType: RegistryProxy.GetValue
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.LocalMachine*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: LocalMachine
  nameWithType: RegistryProxy.LocalMachine
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.PerformanceData*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: PerformanceData
  nameWithType: RegistryProxy.PerformanceData
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.SetValue*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: SetValue
  nameWithType: RegistryProxy.SetValue
- uid: Microsoft.VisualBasic.MyServices.RegistryProxy.Users*
  parent: Microsoft.VisualBasic.MyServices.RegistryProxy
  isExternal: false
  name: Users
  nameWithType: RegistryProxy.Users
