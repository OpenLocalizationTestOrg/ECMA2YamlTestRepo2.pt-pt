### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.ISymbolWriter
  id: ISymbolWriter
  children:
  - System.Diagnostics.SymbolStore.ISymbolWriter.Close
  - System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod
  - System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace
  - System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)
  - System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)
  - System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)
  - System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])
  - System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)
  - System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)
  - System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)
  langs:
  - csharp
  name: ISymbolWriter
  nameWithType: ISymbolWriter
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter
  type: Interface
  summary: "Represents a symbol writer for managed code."
  remarks: "The ISymbolWriter interface provides methods that define documents, sequence points, lexical scopes, and variables.      > [!NOTE] >  This interface is the managed counterpart of the `ISymUnmanagedWriter` interface, which is one of the unmanaged symbol store interfaces that provides an alternative way to read and write debug symbol information."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISymbolWriter
  implements: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.Close
  id: Close
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: Close()
  nameWithType: ISymbolWriter.Close()
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Closes <xref href=&quot;System.Diagnostics.SymbolStore.ISymbolWriter&quot;></xref> and commits the symbols to the symbol store."
  remarks: "After this call, <xref:System.Diagnostics.SymbolStore.ISymbolWriter> becomes invalid for further updates."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod
  id: CloseMethod
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: CloseMethod()
  nameWithType: ISymbolWriter.CloseMethod()
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Closes the current method."
  remarks: "After a method is closed, you cannot define a symbol from within it."
  syntax:
    content: public void CloseMethod ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace
  id: CloseNamespace
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: CloseNamespace()
  nameWithType: ISymbolWriter.CloseNamespace()
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Closes the most recent namespace."
  syntax:
    content: public void CloseNamespace ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)
  id: CloseScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: CloseScope(Int32)
  nameWithType: ISymbolWriter.CloseScope(Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Closes the current lexical scope."
  remarks: "After a scope is closed, you cannot define a variable from within it."
  syntax:
    content: public void CloseScope (int endOffset);
    parameters:
    - id: endOffset
      type: System.Int32
      description: "The points past the last instruction in the scope."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: DefineDocument(String,Guid,Guid,Guid)
  nameWithType: ISymbolWriter.DefineDocument(String,Guid,Guid,Guid)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(String,Guid,Guid,Guid)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines a source document."
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);
    parameters:
    - id: url
      type: System.String
      description: "The URL that identifies the document."
    - id: language
      type: System.Guid
      description: "The document language. This parameter can be <xref:System.Guid>."
    - id: languageVendor
      type: System.Guid
      description: "The identity of the vendor for the document language. This parameter can be <xref:System.Guid>."
    - id: documentType
      type: System.Guid
      description: "The type of the document. This parameter can be <xref:System.Guid>."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: "The object that represents the document."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  id: DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: DefineField(SymbolToken,String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineField(SymbolToken,String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(SymbolToken,String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines a field in a type or a global field."
  remarks: "The DefineField method defines a single variable that is not within a method by using specified fields in classes, bit fields, and so on."
  syntax:
    content: public void DefineField (System.Diagnostics.SymbolStore.SymbolToken parent, string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);
    parameters:
    - id: parent
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata type or method token."
    - id: name
      type: System.String
      description: "The field name."
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: "A bitwise combination of the field attributes."
    - id: signature
      type: System.Byte[]
      description: "The field signature."
    - id: addrKind
      type: System.Diagnostics.SymbolStore.SymAddressKind
      description: "The address types for `addr1` and `addr2`."
    - id: addr1
      type: System.Int32
      description: "The first address for the field specification."
    - id: addr2
      type: System.Int32
      description: "The second address for the field specification."
    - id: addr3
      type: System.Int32
      description: "The third address for the field specification."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.DefineField*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  id: DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: DefineGlobalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineGlobalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines a single global variable."
  syntax:
    content: public void DefineGlobalVariable (string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);
    parameters:
    - id: name
      type: System.String
      description: "The global variable name."
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: "A bitwise combination of the global variable attributes."
    - id: signature
      type: System.Byte[]
      description: "The global variable signature."
    - id: addrKind
      type: System.Diagnostics.SymbolStore.SymAddressKind
      description: "The address types for `addr1`, `addr2`, and `addr3`."
    - id: addr1
      type: System.Int32
      description: "The first address for the global variable specification."
    - id: addr2
      type: System.Int32
      description: "The second address for the global variable specification."
    - id: addr3
      type: System.Int32
      description: "The third address for the global variable specification."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: DefineLocalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineLocalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines a single variable in the current lexical scope."
  remarks: "The `startOffset` and `endOffset` parameters are optional. If their value is zero, they are ignored and the variable is defined throughout the entire scope. If their value is nonzero, the variable falls within the offsets of the current scope.       You can call DefineLocalVariable multiple times for a variable of the same name that occurs multiple times in different offset ranges throughout a scope. (In this case, start and end offsets must not overlap.)"
  syntax:
    content: public void DefineLocalVariable (string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    parameters:
    - id: name
      type: System.String
      description: "The local variable name."
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: "A bitwise combination of the local variable attributes."
    - id: signature
      type: System.Byte[]
      description: "The local variable signature."
    - id: addrKind
      type: System.Diagnostics.SymbolStore.SymAddressKind
      description: "The address types for `addr1`, `addr2`, and `addr3`."
    - id: addr1
      type: System.Int32
      description: "The first address for the local variable specification."
    - id: addr2
      type: System.Int32
      description: "The second address for the local variable specification."
    - id: addr3
      type: System.Int32
      description: "The third address for the local variable specification."
    - id: startOffset
      type: System.Int32
      description: "The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope."
    - id: endOffset
      type: System.Int32
      description: "The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  id: DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: DefineParameter(String,ParameterAttributes,Int32,SymAddressKind,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineParameter(String,ParameterAttributes,Int32,SymAddressKind,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(String,ParameterAttributes,Int32,SymAddressKind,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method."
  remarks: "If parameters are defined in the metadata for a given method, you do not have to define them again with calls to this method. Symbol readers need to check for these in the normal metadata first, and then use the symbol store."
  syntax:
    content: public void DefineParameter (string name, System.Reflection.ParameterAttributes attributes, int sequence, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);
    parameters:
    - id: name
      type: System.String
      description: "The parameter name."
    - id: attributes
      type: System.Reflection.ParameterAttributes
      description: "A bitwise combination of the parameter attributes."
    - id: sequence
      type: System.Int32
      description: "The parameter signature."
    - id: addrKind
      type: System.Diagnostics.SymbolStore.SymAddressKind
      description: "The address types for `addr1`, `addr2`, and `addr3`."
    - id: addr1
      type: System.Int32
      description: "The first address for the parameter specification."
    - id: addr2
      type: System.Int32
      description: "The second address for the parameter specification."
    - id: addr3
      type: System.Int32
      description: "The third address for the parameter specification."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  id: DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: DefineSequencePoints(ISymbolDocumentWriter,Int32[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: ISymbolWriter.DefineSequencePoints(ISymbolDocumentWriter,Int32[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(ISymbolDocumentWriter,Int32[],Int32[],Int32[],Int32[],Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines a group of sequence points within the current method."
  remarks: "Each line and each column defines the start of a statement within a method. The arrays should be sorted in increasing order of offsets. The offset is always the offset from the start of the method, in bytes."
  syntax:
    content: public void DefineSequencePoints (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int[] offsets, int[] lines, int[] columns, int[] endLines, int[] endColumns);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: "The document object for which the sequence points are being defined."
    - id: offsets
      type: System.Int32[]
      description: "The sequence point offsets measured from the beginning of methods."
    - id: lines
      type: System.Int32[]
      description: "The document lines for the sequence points."
    - id: columns
      type: System.Int32[]
      description: "The document positions for the sequence points."
    - id: endLines
      type: System.Int32[]
      description: "The document end lines for the sequence points."
    - id: endColumns
      type: System.Int32[]
      description: "The document end positions for the sequence points."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)
  id: Initialize(System.IntPtr,System.String,System.Boolean)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: Initialize(IntPtr,String,Boolean)
  nameWithType: ISymbolWriter.Initialize(IntPtr,String,Boolean)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(IntPtr,String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Sets the metadata emitter interface to associate with a writer."
  remarks: "Initialize also sets the output file name where the debugging symbols are written. This method can be called only once and must be called before any other writer methods."
  syntax:
    content: public void Initialize (IntPtr emitter, string filename, bool fFullBuild);
    parameters:
    - id: emitter
      type: System.IntPtr
      description: "The metadata emitter interface."
    - id: filename
      type: System.String
      description: "The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored."
    - id: fFullBuild
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> indicates that this is a full rebuild; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> indicates that this is an incremental compilation."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)
  id: OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: OpenMethod(SymbolToken)
  nameWithType: ISymbolWriter.OpenMethod(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(SymbolToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Opens a method to place symbol information into."
  remarks: "The specified method becomes the current method for calls to define sequence points, parameters, and lexical scopes. There is an implicit lexical scope around the entire method. Reopening a method that has been previously closed erases any previously defined symbols for the method."
  syntax:
    content: public void OpenMethod (System.Diagnostics.SymbolStore.SymbolToken method);
    parameters:
    - id: method
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token for the method to be opened."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)
  id: OpenNamespace(System.String)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: OpenNamespace(String)
  nameWithType: ISymbolWriter.OpenNamespace(String)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Opens a new namespace."
  remarks: "Call this method before defining methods or variables that exist within a namespace. Namespaces can be nested."
  syntax:
    content: public void OpenNamespace (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the new namespace."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)
  id: OpenScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: OpenScope(Int32)
  nameWithType: ISymbolWriter.OpenScope(Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Opens a new lexical scope in the current method."
  remarks: "This scope becomes the new current scope and is pushed onto a stack of scopes. Scopes must form a hierarchy. Siblings are not allowed to overlap.       Scope identifiers are valid only in the current method."
  syntax:
    content: public int OpenScope (int startOffset);
    parameters:
    - id: startOffset
      type: System.Int32
      description: "The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope."
    return:
      type: System.Int32
      description: "An opaque scope identifier that can be used with <xref:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange*> to define the start and end offsets of a scope at a later time. In this case, the offsets passed to OpenScope and <xref:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope*> are ignored. A scope identifier is valid only in the current method."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)
  id: SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: SetMethodSourceRange(ISymbolDocumentWriter,Int32,Int32,ISymbolDocumentWriter,Int32,Int32)
  nameWithType: ISymbolWriter.SetMethodSourceRange(ISymbolDocumentWriter,Int32,Int32,ISymbolDocumentWriter,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(ISymbolDocumentWriter,Int32,Int32,ISymbolDocumentWriter,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Specifies the true start and end of a method within a source file. Use SetMethodSourceRange to specify the extent of a method, independent of the sequence points that exist within the method."
  syntax:
    content: public void SetMethodSourceRange (System.Diagnostics.SymbolStore.ISymbolDocumentWriter startDoc, int startLine, int startColumn, System.Diagnostics.SymbolStore.ISymbolDocumentWriter endDoc, int endLine, int endColumn);
    parameters:
    - id: startDoc
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: "The document that contains the starting position."
    - id: startLine
      type: System.Int32
      description: "The starting line number."
    - id: startColumn
      type: System.Int32
      description: "The starting column."
    - id: endDoc
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: "The document that contains the ending position."
    - id: endLine
      type: System.Int32
      description: "The ending line number."
    - id: endColumn
      type: System.Int32
      description: "The ending column number."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)
  id: SetScopeRange(System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: SetScopeRange(Int32,Int32,Int32)
  nameWithType: ISymbolWriter.SetScopeRange(Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines the offset range for the specified lexical scope."
  syntax:
    content: public void SetScopeRange (int scopeID, int startOffset, int endOffset);
    parameters:
    - id: scopeID
      type: System.Int32
      description: "The identifier of the lexical scope."
    - id: startOffset
      type: System.Int32
      description: "The byte offset of the beginning of the lexical scope."
    - id: endOffset
      type: System.Int32
      description: "The byte offset of the end of the lexical scope."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])
  id: SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: SetSymAttribute(SymbolToken,String,Byte[])
  nameWithType: ISymbolWriter.SetSymAttribute(SymbolToken,String,Byte[])
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(SymbolToken,String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Defines an attribute when given the attribute name and the attribute value."
  remarks: "The SetSymAttribute method is only associated with symbolic information and is not a metadata custom attribute."
  syntax:
    content: public void SetSymAttribute (System.Diagnostics.SymbolStore.SymbolToken parent, string name, byte[] data);
    parameters:
    - id: parent
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token for which the attribute is being defined."
    - id: name
      type: System.String
      description: "The attribute name."
    - id: data
      type: System.Byte[]
      description: "The attribute value."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)
  id: SetUnderlyingWriter(System.IntPtr)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: SetUnderlyingWriter(IntPtr)
  nameWithType: ISymbolWriter.SetUnderlyingWriter(IntPtr)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Sets the underlying <xref uid=&quot;langword_csharp_ISymUnmanagedWriter&quot; name=&quot;ISymUnmanagedWriter&quot; href=&quot;&quot;></xref> (the corresponding unmanaged interface) that a managed <xref href=&quot;System.Diagnostics.SymbolStore.ISymbolWriter&quot;></xref> uses to emit symbols."
  remarks: "The underlying `ISymUnmanagedWriter` (the corresponding unmanaged interface) represents a symbol writer for managed code. The interface provides methods for defining documents, sequence points, lexical scopes, and variables."
  syntax:
    content: public void SetUnderlyingWriter (IntPtr underlyingWriter);
    parameters:
    - id: underlyingWriter
      type: System.IntPtr
      description: "A pointer to code that represents the underlying writer."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)
  id: SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: SetUserEntryPoint(SymbolToken)
  nameWithType: ISymbolWriter.SetUserEntryPoint(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(SymbolToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Identifies the user-defined method as the entry point for the current module."
  remarks: "This is normally your main method, rather than compiler-generated stubs before the main method."
  syntax:
    content: public void SetUserEntryPoint (System.Diagnostics.SymbolStore.SymbolToken entryMethod);
    parameters:
    - id: entryMethod
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token for the method that is the user entry point."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)
  id: UsingNamespace(System.String)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  langs:
  - csharp
  name: UsingNamespace(String)
  nameWithType: ISymbolWriter.UsingNamespace(String)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Specifies that the given, fully qualified namespace name is used within the open lexical scope."
  remarks: "Closing the current scope prevents this scope from using the namespace. The namespace remains in use in all scopes that inherit from the current open scope."
  syntax:
    content: public void UsingNamespace (string fullName);
    parameters:
    - id: fullName
      type: System.String
      description: "The fully qualified name of the namespace."
  overload: System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.Close
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: Close()
  nameWithType: ISymbolWriter.Close()
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.Close()
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: CloseMethod()
  nameWithType: ISymbolWriter.CloseMethod()
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod()
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: CloseNamespace()
  nameWithType: ISymbolWriter.CloseNamespace()
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace()
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: CloseScope(Int32)
  nameWithType: ISymbolWriter.CloseScope(Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineDocument(String,Guid,Guid,Guid)
  nameWithType: ISymbolWriter.DefineDocument(String,Guid,Guid,Guid)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(String,Guid,Guid,Guid)
- uid: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocumentWriter
  nameWithType: ISymbolDocumentWriter
  fullName: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineField(SymbolToken,String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineField(SymbolToken,String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(SymbolToken,String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: true
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymAddressKind
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymAddressKind
  nameWithType: SymAddressKind
  fullName: System.Diagnostics.SymbolStore.SymAddressKind
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineGlobalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineGlobalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineLocalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineLocalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(String,FieldAttributes,Byte[],SymAddressKind,Int32,Int32,Int32,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineParameter(String,ParameterAttributes,Int32,SymAddressKind,Int32,Int32,Int32)
  nameWithType: ISymbolWriter.DefineParameter(String,ParameterAttributes,Int32,SymAddressKind,Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(String,ParameterAttributes,Int32,SymAddressKind,Int32,Int32,Int32)
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: true
  name: ParameterAttributes
  nameWithType: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineSequencePoints(ISymbolDocumentWriter,Int32[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: ISymbolWriter.DefineSequencePoints(ISymbolDocumentWriter,Int32[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(ISymbolDocumentWriter,Int32[],Int32[],Int32[],Int32[],Int32[])
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: Initialize(IntPtr,String,Boolean)
  nameWithType: ISymbolWriter.Initialize(IntPtr,String,Boolean)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(IntPtr,String,Boolean)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: OpenMethod(SymbolToken)
  nameWithType: ISymbolWriter.OpenMethod(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(SymbolToken)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: OpenNamespace(String)
  nameWithType: ISymbolWriter.OpenNamespace(String)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(String)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: OpenScope(Int32)
  nameWithType: ISymbolWriter.OpenScope(Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetMethodSourceRange(ISymbolDocumentWriter,Int32,Int32,ISymbolDocumentWriter,Int32,Int32)
  nameWithType: ISymbolWriter.SetMethodSourceRange(ISymbolDocumentWriter,Int32,Int32,ISymbolDocumentWriter,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(ISymbolDocumentWriter,Int32,Int32,ISymbolDocumentWriter,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetScopeRange(Int32,Int32,Int32)
  nameWithType: ISymbolWriter.SetScopeRange(Int32,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(Int32,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetSymAttribute(SymbolToken,String,Byte[])
  nameWithType: ISymbolWriter.SetSymAttribute(SymbolToken,String,Byte[])
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(SymbolToken,String,Byte[])
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetUnderlyingWriter(IntPtr)
  nameWithType: ISymbolWriter.SetUnderlyingWriter(IntPtr)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(IntPtr)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetUserEntryPoint(SymbolToken)
  nameWithType: ISymbolWriter.SetUserEntryPoint(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(SymbolToken)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: UsingNamespace(String)
  nameWithType: ISymbolWriter.UsingNamespace(String)
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(String)
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.Close*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: Close
  nameWithType: ISymbolWriter.Close
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: CloseMethod
  nameWithType: ISymbolWriter.CloseMethod
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: CloseNamespace
  nameWithType: ISymbolWriter.CloseNamespace
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: CloseScope
  nameWithType: ISymbolWriter.CloseScope
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineDocument
  nameWithType: ISymbolWriter.DefineDocument
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineField*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineField
  nameWithType: ISymbolWriter.DefineField
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineGlobalVariable
  nameWithType: ISymbolWriter.DefineGlobalVariable
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineLocalVariable
  nameWithType: ISymbolWriter.DefineLocalVariable
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineParameter
  nameWithType: ISymbolWriter.DefineParameter
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: DefineSequencePoints
  nameWithType: ISymbolWriter.DefineSequencePoints
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.Initialize*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: Initialize
  nameWithType: ISymbolWriter.Initialize
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: OpenMethod
  nameWithType: ISymbolWriter.OpenMethod
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: OpenNamespace
  nameWithType: ISymbolWriter.OpenNamespace
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: OpenScope
  nameWithType: ISymbolWriter.OpenScope
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetMethodSourceRange
  nameWithType: ISymbolWriter.SetMethodSourceRange
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetScopeRange
  nameWithType: ISymbolWriter.SetScopeRange
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetSymAttribute
  nameWithType: ISymbolWriter.SetSymAttribute
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetUnderlyingWriter
  nameWithType: ISymbolWriter.SetUnderlyingWriter
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: SetUserEntryPoint
  nameWithType: ISymbolWriter.SetUserEntryPoint
- uid: System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace*
  parent: System.Diagnostics.SymbolStore.ISymbolWriter
  isExternal: false
  name: UsingNamespace
  nameWithType: ISymbolWriter.UsingNamespace
