### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Lifetime.ILease
  id: ILease
  children:
  - System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.CurrentState
  - System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  - System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  - System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  langs:
  - csharp
  name: ILease
  nameWithType: ILease
  fullName: System.Runtime.Remoting.Lifetime.ILease
  type: Interface
  summary: "Define um objeto de concessão de duração que é utilizado pelo serviço de duração do sistema de interação remota."
  remarks: "Distribuídas controlos de recolha de lixo quando as aplicações de servidor podem ser eliminadas. Tradicionalmente, recolha de lixo distribuída utiliza contagens de referência e o envio de ping para o controlo. Isto funciona bem quando existem alguns clientes por objeto, mas não funciona bem quando existem milhares de clientes por cada objeto. O serviço de duração pode assumir a função de um recoletor de lixo distribuído tradicional e dimensionam as bem quando aumenta o número de clientes.       O serviço de duração associa uma concessão de cada objeto remotamente ativado. Quando expira a concessão, é removido do objeto. Uma concessão pode especificar que um objeto tem uma duração de infinita.       Cada <xref:System.AppDomain>contém um Gestor de concessão administra concessões no domínio.</xref:System.AppDomain> O Gestor de concessão analisa periodicamente os concessões de expiração do tempo. Se uma concessão expirou,-lo pode ser cancelado a remover a referência à concessão ou renovado invocando uma ou mais das sponsors a concessão.       Uma concessão contém as propriedades que determinam as respetivas políticas e métodos que renovar o período de concessão. A concessão expõe a interface ILease.       Para obter um exemplo que mostra como utilizar a interface ILease consulte [durações](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ILease
  implements: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  id: CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém a quantidade de tempo restante da concessão."
  syntax:
    content: public TimeSpan CurrentLeaseTime { get; }
    return:
      type: System.TimeSpan
      description: "A quantidade de tempo restante da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  id: CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém atual <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> da concessão."
  syntax:
    content: public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }
    return:
      type: System.Runtime.Remoting.Lifetime.LeaseState
      description: "Atual <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  id: InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém ou define o tempo para que concessão inicial."
  remarks: "Se a propriedade InitialLeaseTime estiver definida como <xref:System.TimeSpan?displayProperty=fullName>, em seguida, a concessão nunca será tempo limite e o objeto associado tem uma duração infinita.</xref:System.TimeSpan?displayProperty=fullName>"
  syntax:
    content: public TimeSpan InitialLeaseTime { get; set; }
    return:
      type: System.TimeSpan
      description: "O tempo inicial para o período de concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Regista um patrocinador para que concessão sem renovação da concessão."
  remarks: "Se um patrocinador estiver registado com o método atual, o período de concessão não for renovado."
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "O objeto de chamada de retorno das equipas de patrocinador."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Regista um patrocinador para que concessão e é renovada-lo por <xref:System.TimeSpan>.</xref:System.TimeSpan> especificado"
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "O objeto de chamada de retorno das equipas de patrocinador."
    - id: renewalTime
      type: System.TimeSpan
      description: "O período de tempo para renovação da concessão por."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  id: Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Renova uma concessão durante o período de tempo especificado."
  remarks: "O tempo de concessão é definido para o número máximo do <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>ou a hora atual e o período de renovação.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan Renew (TimeSpan renewalTime);
    parameters:
    - id: renewalTime
      type: System.TimeSpan
      description: "O período de tempo para renovação da concessão por."
    return:
      type: System.TimeSpan
      description: "A nova hora de expiração da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.Renew*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  id: RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém ou define a quantidade de tempo que uma chamada para o objeto remoto renova <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  remarks: "Quando efetuar uma chamada para um objecto remoto, o serviço de duração adiciona RenewOnCallTime para o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>apenas se o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>ficou reduzida a menos que o RenewOnCallTime.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> </xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Chamadas sequenciais, por conseguinte, não aumentar o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>sem limite.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Em vez disso, imediatamente após qualquer chamada, o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>é garantida para ser o RenewOnCallTime ou superior.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan RenewOnCallTime { get; set; }
    return:
      type: System.TimeSpan
      description: "A quantidade de tempo que uma chamada para o objeto remoto renova <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  overload: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  id: SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém ou define a quantidade de tempo de espera para um patrocinador devolver com um período de renovação da concessão."
  remarks: "Se estiver a SponsorshipTimeout <xref:System.TimeSpan?displayProperty=fullName>, em seguida, este concessão não irá surtir sponsors.</xref:System.TimeSpan?displayProperty=fullName>       Se um patrocinador não responder a uma chamada para renovar uma concessão dentro do período de tempo limite, é assumido estar inativos e é removido da lista de sponsors para que concessão atual."
  syntax:
    content: public TimeSpan SponsorshipTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "A quantidade de tempo de espera para um patrocinador devolver com um período de renovação da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Remove um patrocinador da lista patrocinador."
  syntax:
    content: public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "As equipas de patrocinador concessão ao anular o registo."
  overload: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.LeaseState
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: LeaseState
  nameWithType: LeaseState
  fullName: System.Runtime.Remoting.Lifetime.LeaseState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ISponsor
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: ISponsor
  nameWithType: ISponsor
  fullName: System.Runtime.Remoting.Lifetime.ISponsor
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register
  nameWithType: ILease.Register
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew
  nameWithType: ILease.Renew
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister
  nameWithType: ILease.Unregister
