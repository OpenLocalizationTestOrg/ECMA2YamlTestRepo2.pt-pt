### YamlMime:ManagedReference
items:
- uid: System.Data.Common.CommandTrees.DbComparisonExpression
  id: DbComparisonExpression
  children:
  - System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)
  - System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor`1)
  langs:
  - csharp
  name: DbComparisonExpression
  nameWithType: DbComparisonExpression
  fullName: System.Data.Common.CommandTrees.DbComparisonExpression
  type: Class
  summary: "Represents a comparison operation applied to two arguments. Equality, greater than, greater than or equal, less than, less than or equal, and inequality are comparison operations. This class cannot be inherited."
  remarks: "The DbComparisonExpression class requires that its arguments have a common result type. This result type must be equality comparable for <xref:System.Data.Common.CommandTrees.DbExpressionKind> and <xref:System.Data.Common.CommandTrees.DbExpressionKind>; order comparable for <xref:System.Data.Common.CommandTrees.DbExpressionKind> and <xref:System.Data.Common.CommandTrees.DbExpressionKind>; and both for <xref:System.Data.Common.CommandTrees.DbExpressionKind> and <xref:System.Data.Common.CommandTrees.DbExpressionKind>."
  syntax:
    content: 'public sealed class DbComparisonExpression : System.Data.Common.CommandTrees.DbBinaryExpression'
  inheritance:
  - System.Object
  - System.Data.Common.CommandTrees.DbExpression
  - System.Data.Common.CommandTrees.DbBinaryExpression
  implements: []
  inheritedMembers:
  - System.Data.Common.CommandTrees.DbBinaryExpression.Left
  - System.Data.Common.CommandTrees.DbBinaryExpression.Right
  - System.Data.Common.CommandTrees.DbExpression.Equals(System.Object)
  - System.Data.Common.CommandTrees.DbExpression.ExpressionKind
  - System.Data.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])
  - System.Data.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})
  - System.Data.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})
  - System.Data.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})
  - System.Data.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})
  - System.Data.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})
  - System.Data.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})
  - System.Data.Common.CommandTrees.DbExpression.FromGeography(System.Data.Spatial.DbGeography)
  - System.Data.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Spatial.DbGeometry)
  - System.Data.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})
  - System.Data.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})
  - System.Data.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})
  - System.Data.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})
  - System.Data.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})
  - System.Data.Common.CommandTrees.DbExpression.FromString(System.String)
  - System.Data.Common.CommandTrees.DbExpression.GetHashCode
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Spatial.DbGeography)
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Spatial.DbGeometry)
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})
  - System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.String)
  - System.Data.Common.CommandTrees.DbExpression.ResultType
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)
  id: Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)
  parent: System.Data.Common.CommandTrees.DbComparisonExpression
  langs:
  - csharp
  name: Accept(DbExpressionVisitor)
  nameWithType: DbComparisonExpression.Accept(DbExpressionVisitor)
  fullName: System.Data.Common.CommandTrees.DbComparisonExpression.Accept(DbExpressionVisitor)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees
  summary: "Implements the visitor pattern for expressions that do not produce a result value."
  syntax:
    content: public override void Accept (System.Data.Common.CommandTrees.DbExpressionVisitor visitor);
    parameters:
    - id: visitor
      type: System.Data.Common.CommandTrees.DbExpressionVisitor
      description: "An instance of <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionVisitor&quot;></xref>."
  overload: System.Data.Common.CommandTrees.DbComparisonExpression.Accept*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>visitor</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor`1)
  id: Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor`1)
  parent: System.Data.Common.CommandTrees.DbComparisonExpression
  langs:
  - csharp
  name: Accept(DbExpressionVisitor<TResultType>)
  nameWithType: DbComparisonExpression.Accept(DbExpressionVisitor<TResultType>)
  fullName: System.Data.Common.CommandTrees.DbComparisonExpression.Accept(DbExpressionVisitor<TResultType>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees
  syntax:
    content: public override TResultType Accept<TResultType> (System.Data.Common.CommandTrees.DbExpressionVisitor<TResultType> visitor);
    parameters:
    - id: visitor
      type: System.Data.Common.CommandTrees.DbExpressionVisitor`1
      description: "To be added."
    return:
      type: TResultType
      description: "To be added."
  overload: System.Data.Common.CommandTrees.DbComparisonExpression.Accept<TResultType>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.CommandTrees.DbBinaryExpression
  isExternal: false
  name: System.Data.Common.CommandTrees.DbBinaryExpression
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)
  parent: System.Data.Common.CommandTrees.DbComparisonExpression
  isExternal: false
  name: Accept(DbExpressionVisitor)
  nameWithType: DbComparisonExpression.Accept(DbExpressionVisitor)
  fullName: System.Data.Common.CommandTrees.DbComparisonExpression.Accept(DbExpressionVisitor)
- uid: System.Data.Common.CommandTrees.DbExpressionVisitor
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbExpressionVisitor
  nameWithType: DbExpressionVisitor
  fullName: System.Data.Common.CommandTrees.DbExpressionVisitor
- uid: System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor`1)
  parent: System.Data.Common.CommandTrees.DbComparisonExpression
  isExternal: false
  name: Accept(DbExpressionVisitor<TResultType>)
  nameWithType: DbComparisonExpression.Accept(DbExpressionVisitor<TResultType>)
  fullName: System.Data.Common.CommandTrees.DbComparisonExpression.Accept(DbExpressionVisitor<TResultType>)
- uid: TResultType
  isExternal: true
  name: TResultType
  nameWithType: TResultType
  fullName: TResultType
- uid: System.Data.Common.CommandTrees.DbExpressionVisitor`1
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbExpressionVisitor<TResultType>
  nameWithType: DbExpressionVisitor<TResultType>
  fullName: System.Data.Common.CommandTrees.DbExpressionVisitor<TResultType>
- uid: System.Data.Common.CommandTrees.DbComparisonExpression.Accept*
  parent: System.Data.Common.CommandTrees.DbComparisonExpression
  isExternal: false
  name: Accept
  nameWithType: DbComparisonExpression.Accept
- uid: System.Data.Common.CommandTrees.DbComparisonExpression.Accept<TResultType>*
  parent: System.Data.Common.CommandTrees.DbComparisonExpression
  isExternal: false
  name: Accept<TResultType>
  nameWithType: DbComparisonExpression.Accept<TResultType>
