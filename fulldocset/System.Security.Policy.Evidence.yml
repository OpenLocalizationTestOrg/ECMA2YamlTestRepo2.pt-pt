### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.Evidence
  id: Evidence
  children:
  - System.Security.Policy.Evidence.#ctor
  - System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)
  - System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])
  - System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])
  - System.Security.Policy.Evidence.AddAssembly(System.Object)
  - System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)
  - System.Security.Policy.Evidence.AddHost(System.Object)
  - System.Security.Policy.Evidence.AddHostEvidence``1(``0)
  - System.Security.Policy.Evidence.Clear
  - System.Security.Policy.Evidence.Clone
  - System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)
  - System.Security.Policy.Evidence.Count
  - System.Security.Policy.Evidence.GetAssemblyEnumerator
  - System.Security.Policy.Evidence.GetAssemblyEvidence``1
  - System.Security.Policy.Evidence.GetEnumerator
  - System.Security.Policy.Evidence.GetHostEnumerator
  - System.Security.Policy.Evidence.GetHostEvidence``1
  - System.Security.Policy.Evidence.IsReadOnly
  - System.Security.Policy.Evidence.IsSynchronized
  - System.Security.Policy.Evidence.Locked
  - System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)
  - System.Security.Policy.Evidence.RemoveType(System.Type)
  - System.Security.Policy.Evidence.SyncRoot
  langs:
  - csharp
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
  type: Class
  summary: "Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited."
  remarks: "Common forms of evidence include signatures and location of origin of code, but can potentially be anything. Objects of any type that are recognized by security policy represent evidence.       Security policy is composed of code groups; a particular assembly (the basic unit of code for granting security permissions) is a member of a code group if it satisfies the code group&quot;s membership condition. Evidence is the set of inputs to policy that membership conditions use to determine to which code groups an assembly belongs.       The Evidence class is a collection (see <xref:System.Collections.ICollection>) that holds a set of objects that represent evidence. This class holds two sets that correspond to the source of the evidence: host evidence and assembly evidence.       Policy can get evidence from two different sources when evaluating permissions for code.      -   `Host evidence` is provided by the host, and can only be provided by hosts that have been granted the <xref:System.Security.Permissions.SecurityPermissionFlag> permission. Typically, this is evidence of the origin of the code and digital signatures on the assembly. Evidence about origin typically includes <xref:System.Security.Policy.Url>, <xref:System.Security.Policy.Site>, and <xref:System.Security.Policy.Zone> evidence. Signatures refer to software publisher (AuthentiCode X.509v3 signature) and strong name identities. Both kinds of digital signature-based identity are built into the assembly, but must be validated and passed to policy by the host; when loaded, the security system verifies the signature. The system then creates the appropriate evidence and passes it to policy only if the corresponding signature is valid.      -   `Assembly evidence` is part of the assembly itself. Developers or administrators can attach custom evidence to the assembly to extend the set of evidence for policy. Assembly evidence can only be added at the time of assembly generation, which occurs before the assembly is signed. The default policy of the security system ignores assembly-provided evidence, but policy can be extended to accept it."
  example:
  - "The following code example demonstrates how to create new Evidence classes with both host evidence and assembly evidence.  \n  \n [!code-vb[System.Security.Policy.Evidence#1](~/add/codesnippet/visualbasic/t-system.security.policy_1_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#1](~/add/codesnippet/cpp/t-system.security.policy_1_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#1](~/add/codesnippet/csharp/t-system.security.policy_1_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class Evidence : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.#ctor
  id: '#ctor'
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Evidence()
  nameWithType: Evidence.Evidence()
  fullName: System.Security.Policy.Evidence.Evidence()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Initializes a new empty instance of the <xref href=&quot;System.Security.Policy.Evidence&quot;></xref> class."
  remarks: ''
  example:
  - "The following code example shows the use of the Evidence constructor. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#15](~/add/codesnippet/visualbasic/m-system.security.policy_14_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#15](~/add/codesnippet/cpp/m-system.security.policy_14_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#15](~/add/codesnippet/csharp/m-system.security.policy_14_1.cs)]"
  syntax:
    content: public Evidence ();
    parameters: []
  overload: System.Security.Policy.Evidence.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)
  id: '#ctor(System.Security.Policy.Evidence)'
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Evidence(Evidence)
  nameWithType: Evidence.Evidence(Evidence)
  fullName: System.Security.Policy.Evidence.Evidence(Evidence)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Policy.Evidence&quot;></xref> class from a shallow copy of an existing one."
  remarks: ''
  example:
  - "The following code example shows the use of the Evidence constructor. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#12](~/add/codesnippet/visualbasic/m-system.security.policy_31_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#12](~/add/codesnippet/cpp/m-system.security.policy_31_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#12](~/add/codesnippet/csharp/m-system.security.policy_31_1.cs)]"
  syntax:
    content: public Evidence (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "The <xref href=&quot;System.Security.Policy.Evidence&quot;></xref> instance from which to create the new instance. This instance is not deep-copied."
  overload: System.Security.Policy.Evidence.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>evidence</code> parameter is not a valid instance of <xref href=&quot;System.Security.Policy.Evidence&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])
  id: '#ctor(System.Object[],System.Object[])'
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Evidence(Object[],Object[])
  nameWithType: Evidence.Evidence(Object[],Object[])
  fullName: System.Security.Policy.Evidence.Evidence(Object[],Object[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Policy.Evidence&quot;></xref> class from multiple sets of host and assembly evidence."
  remarks: ''
  example:
  - "The following code example shows the use of the Evidence constructor. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#3](~/add/codesnippet/visualbasic/m-system.security.policy_2_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#3](~/add/codesnippet/cpp/m-system.security.policy_2_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#3](~/add/codesnippet/csharp/m-system.security.policy_2_1.cs)]"
  syntax:
    content: public Evidence (object[] hostEvidence, object[] assemblyEvidence);
    parameters:
    - id: hostEvidence
      type: System.Object[]
      description: "The host evidence from which to create the new instance."
    - id: assemblyEvidence
      type: System.Object[]
      description: "The assembly evidence from which to create the new instance."
  overload: System.Security.Policy.Evidence.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])
  id: '#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])'
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Evidence(EvidenceBase[],EvidenceBase[])
  nameWithType: Evidence.Evidence(EvidenceBase[],EvidenceBase[])
  fullName: System.Security.Policy.Evidence.Evidence(EvidenceBase[],EvidenceBase[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Policy.Evidence&quot;></xref> class from multiple sets of host and assembly evidence."
  remarks: "This constructor creates a new instance of the class by using evidence objects that inherit from the <xref:System.Security.Policy.EvidenceBase> class."
  syntax:
    content: public Evidence (System.Security.Policy.EvidenceBase[] hostEvidence, System.Security.Policy.EvidenceBase[] assemblyEvidence);
    parameters:
    - id: hostEvidence
      type: System.Security.Policy.EvidenceBase[]
      description: "The host evidence from which to create the new instance."
    - id: assemblyEvidence
      type: System.Security.Policy.EvidenceBase[]
      description: "The assembly evidence from which to create the new instance."
  overload: System.Security.Policy.Evidence.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.AddAssembly(System.Object)
  id: AddAssembly(System.Object)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: AddAssembly(Object)
  nameWithType: Evidence.AddAssembly(Object)
  fullName: System.Security.Policy.Evidence.AddAssembly(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Adds the specified assembly evidence to the evidence set."
  remarks: "Use this method for evidence derived from the assembly.      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence. Many assembly evidence objects can exist at the same time."
  example:
  - "The following code example shows the use of the AddAssembly method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#4](~/add/codesnippet/visualbasic/m-system.security.policy_12_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#4](~/add/codesnippet/cpp/m-system.security.policy_12_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#4](~/add/codesnippet/csharp/m-system.security.policy_12_1.cs)]"
  syntax:
    content: public void AddAssembly (object id);
    parameters:
    - id: id
      type: System.Object
      description: "Any evidence object."
  overload: System.Security.Policy.Evidence.AddAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>id</code> is not serializable."
  platform:
  - net462
- uid: System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)
  id: AddAssemblyEvidence``1(``0)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: AddAssemblyEvidence(T)
  nameWithType: Evidence.AddAssemblyEvidence(T)
  fullName: System.Security.Policy.Evidence.AddAssemblyEvidence(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  syntax:
    content: 'public void AddAssemblyEvidence<T> (T evidence) where T : System.Security.Policy.EvidenceBase;'
    parameters:
    - id: evidence
      type: T
      description: "To be added."
  overload: System.Security.Policy.Evidence.AddAssemblyEvidence<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.AddHost(System.Object)
  id: AddHost(System.Object)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: AddHost(Object)
  nameWithType: Evidence.AddHost(Object)
  fullName: System.Security.Policy.Evidence.AddHost(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Adds the specified evidence supplied by the host to the evidence set."
  remarks: "Use this method for evidence supplied by the host.      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence. Many host evidence objects can exist at the same time."
  example:
  - "The following code example shows the use of the AddHost method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#2](~/add/codesnippet/visualbasic/m-system.security.policy_20_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#2](~/add/codesnippet/cpp/m-system.security.policy_20_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#2](~/add/codesnippet/csharp/m-system.security.policy_20_1.cs)]"
  syntax:
    content: public void AddHost (object id);
    parameters:
    - id: id
      type: System.Object
      description: "Any evidence object."
  overload: System.Security.Policy.Evidence.AddHost*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>id</code> is not serializable."
  platform:
  - net462
- uid: System.Security.Policy.Evidence.AddHostEvidence``1(``0)
  id: AddHostEvidence``1(``0)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: AddHostEvidence(T)
  nameWithType: Evidence.AddHostEvidence(T)
  fullName: System.Security.Policy.Evidence.AddHostEvidence(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  syntax:
    content: 'public void AddHostEvidence<T> (T evidence) where T : System.Security.Policy.EvidenceBase;'
    parameters:
    - id: evidence
      type: T
      description: "To be added."
  overload: System.Security.Policy.Evidence.AddHostEvidence<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.Clear
  id: Clear
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Clear()
  nameWithType: Evidence.Clear()
  fullName: System.Security.Policy.Evidence.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Removes the host and assembly evidence from the evidence set."
  remarks: "Clear removes the evidence in the host and assembly enumerations, setting both to `null`."
  example:
  - "The following code example shows the use of the Clear method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#13](~/add/codesnippet/visualbasic/m-system.security.policy_16_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#13](~/add/codesnippet/cpp/m-system.security.policy_16_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#13](~/add/codesnippet/csharp/m-system.security.policy_16_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Policy.Evidence.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.Clone
  id: Clone
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Clone()
  nameWithType: Evidence.Clone()
  fullName: System.Security.Policy.Evidence.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Returns a duplicate copy of this evidence object."
  remarks: "The duplicate copy is a complete copy that includes all the evidence objects in the collection."
  syntax:
    content: public System.Security.Policy.Evidence Clone ();
    parameters: []
    return:
      type: System.Security.Policy.Evidence
      description: "A duplicate copy of this evidence object."
  overload: System.Security.Policy.Evidence.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Evidence.CopyTo(Array,Int32)
  fullName: System.Security.Policy.Evidence.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Copies evidence objects to an <xref:System.Array>."
  remarks: ''
  example:
  - "The following code example shows the use of the CopyTo method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#6](~/add/codesnippet/visualbasic/m-system.security.policy_0_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#6](~/add/codesnippet/cpp/m-system.security.policy_0_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#6](~/add/codesnippet/csharp/m-system.security.policy_0_1.cs)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "The target array to which to copy evidence objects."
    - id: index
      type: System.Int32
      description: "The zero-based position in the array to which to begin copying evidence objects."
  overload: System.Security.Policy.Evidence.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index </code>is outside the range of the target array<code>.</code>"
  platform:
  - net462
- uid: System.Security.Policy.Evidence.Count
  id: Count
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Count
  nameWithType: Evidence.Count
  fullName: System.Security.Policy.Evidence.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Gets the number of evidence objects in the evidence set."
  remarks: ''
  example:
  - "The following code example shows the use of the Count property. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#12](~/add/codesnippet/visualbasic/p-system.security.policy_13_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#12](~/add/codesnippet/cpp/p-system.security.policy_13_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#12](~/add/codesnippet/csharp/p-system.security.policy_13_1.cs)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of evidence objects in the evidence set."
  overload: System.Security.Policy.Evidence.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.GetAssemblyEnumerator
  id: GetAssemblyEnumerator
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: GetAssemblyEnumerator()
  nameWithType: Evidence.GetAssemblyEnumerator()
  fullName: System.Security.Policy.Evidence.GetAssemblyEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Enumerates evidence provided by the assembly."
  remarks: ''
  example:
  - "The following example shows the use of the GetAssemblyEnumerator method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#3](~/add/codesnippet/visualbasic/m-system.security.policy_22_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#3](~/add/codesnippet/cpp/m-system.security.policy_22_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#3](~/add/codesnippet/csharp/m-system.security.policy_22_1.cs)]"
  syntax:
    content: public System.Collections.IEnumerator GetAssemblyEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddAssembly*> method."
  overload: System.Security.Policy.Evidence.GetAssemblyEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.GetAssemblyEvidence``1
  id: GetAssemblyEvidence``1
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: GetAssemblyEvidence()
  nameWithType: Evidence.GetAssemblyEvidence()
  fullName: System.Security.Policy.Evidence.GetAssemblyEvidence()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  syntax:
    content: 'public T GetAssemblyEvidence<T> () where T : System.Security.Policy.EvidenceBase;'
    parameters: []
    return:
      type: T
      description: "To be added."
  overload: System.Security.Policy.Evidence.GetAssemblyEvidence<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.GetEnumerator
  id: GetEnumerator
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Evidence.GetEnumerator()
  fullName: System.Security.Policy.Evidence.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Enumerates all evidence in the set, both that provided by the host and that provided by the assembly."
  remarks: ''
  example:
  - "The following code example shows the use of the GetEnumerator method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#14](~/add/codesnippet/visualbasic/m-system.security.policy_5_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#14](~/add/codesnippet/cpp/m-system.security.policy_5_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#14](~/add/codesnippet/csharp/m-system.security.policy_5_1.cs)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An enumerator for evidence added by both the <xref:System.Security.Policy.Evidence.AddHost*> method and the <xref:System.Security.Policy.Evidence.AddAssembly*> method."
  overload: System.Security.Policy.Evidence.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.GetHostEnumerator
  id: GetHostEnumerator
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: GetHostEnumerator()
  nameWithType: Evidence.GetHostEnumerator()
  fullName: System.Security.Policy.Evidence.GetHostEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Enumerates evidence supplied by the host."
  remarks: ''
  example:
  - "The following example shows the use of the GetHostEnumerator method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#2](~/add/codesnippet/visualbasic/m-system.security.policy_35_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#2](~/add/codesnippet/cpp/m-system.security.policy_35_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#2](~/add/codesnippet/csharp/m-system.security.policy_35_1.cs)]"
  syntax:
    content: public System.Collections.IEnumerator GetHostEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddHost*> method."
  overload: System.Security.Policy.Evidence.GetHostEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.GetHostEvidence``1
  id: GetHostEvidence``1
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: GetHostEvidence()
  nameWithType: Evidence.GetHostEvidence()
  fullName: System.Security.Policy.Evidence.GetHostEvidence()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  syntax:
    content: 'public T GetHostEvidence<T> () where T : System.Security.Policy.EvidenceBase;'
    parameters: []
    return:
      type: T
      description: "To be added."
  overload: System.Security.Policy.Evidence.GetHostEvidence<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.IsReadOnly
  id: IsReadOnly
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Evidence.IsReadOnly
  fullName: System.Security.Policy.Evidence.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Gets a value indicating whether the evidence set is read-only."
  remarks: "Application code does not normally use this property."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, because read-only evidence sets are not supported."
  overload: System.Security.Policy.Evidence.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.IsSynchronized
  id: IsSynchronized
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Evidence.IsSynchronized
  fullName: System.Security.Policy.Evidence.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Gets a value indicating whether the evidence set is thread-safe."
  remarks: "Application code does not normally use this property."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> because thread-safe evidence sets are not supported."
  overload: System.Security.Policy.Evidence.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.Locked
  id: Locked
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Locked
  nameWithType: Evidence.Locked
  fullName: System.Security.Policy.Evidence.Locked
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Gets or sets a value indicating whether the evidence is locked."
  remarks: ''
  example:
  - "The following code example shows the use of the Locked property. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#7](~/add/codesnippet/visualbasic/p-system.security.policy_2_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#7](~/add/codesnippet/cpp/p-system.security.policy_2_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#7](~/add/codesnippet/csharp/p-system.security.policy_2_1.cs)]"
  syntax:
    content: public bool Locked { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the evidence is locked; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Policy.Evidence.Locked*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)
  id: Merge(System.Security.Policy.Evidence)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: Merge(Evidence)
  nameWithType: Evidence.Merge(Evidence)
  fullName: System.Security.Policy.Evidence.Merge(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Merges the specified evidence set into the current evidence set."
  remarks: "Each evidence object in the specified evidence set is added to the assembly and host sets of the current evidence set, according to the sets from which it came.      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence. Many assembly and host evidence objects can exist at the same time."
  example:
  - "The following code example shows the use of the Merge method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#10](~/add/codesnippet/visualbasic/m-system.security.policy_9_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#10](~/add/codesnippet/cpp/m-system.security.policy_9_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#10](~/add/codesnippet/csharp/m-system.security.policy_9_1.cs)]"
  syntax:
    content: public void Merge (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "The evidence set to be merged into the current evidence set."
  overload: System.Security.Policy.Evidence.Merge*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>evidence</code> parameter is not a valid instance of <xref href=&quot;System.Security.Policy.Evidence&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref:System.Security.Policy.Evidence.Locked*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, the code that calls this method does not have <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref>, and the <code>evidence</code> parameter has a host list that is not empty."
  platform:
  - net462
- uid: System.Security.Policy.Evidence.RemoveType(System.Type)
  id: RemoveType(System.Type)
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: RemoveType(Type)
  nameWithType: Evidence.RemoveType(Type)
  fullName: System.Security.Policy.Evidence.RemoveType(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Removes the evidence for a given type from the host and assembly enumerations."
  remarks: "The results of executing the RemoveType method can be confirmed using the <xref:System.Security.Policy.Evidence.GetAssemblyEnumerator%2A> method and the <xref:System.Security.Policy.Evidence.GetHostEnumerator%2A> method."
  example:
  - "The following code example shows the use of the RemoveType method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \n  \n [!code-vb[System.Security.Policy.Evidence#11](~/add/codesnippet/visualbasic/m-system.security.policy_36_1.vb)]\n [!code-cpp[System.Security.Policy.Evidence#11](~/add/codesnippet/cpp/m-system.security.policy_36_1.cpp)]\n [!code-cs[System.Security.Policy.Evidence#11](~/add/codesnippet/csharp/m-system.security.policy_36_1.cs)]"
  syntax:
    content: public void RemoveType (Type t);
    parameters:
    - id: t
      type: System.Type
      description: "The type of the evidence to be removed."
  overload: System.Security.Policy.Evidence.RemoveType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>t</code> is null."
  platform:
  - net462
- uid: System.Security.Policy.Evidence.SyncRoot
  id: SyncRoot
  parent: System.Security.Policy.Evidence
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Evidence.SyncRoot
  fullName: System.Security.Policy.Evidence.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Gets the synchronization root."
  remarks: "This property is not normally used by application code."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Always <xref uid=&quot;langword_csharp_this&quot; name=&quot;this&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Me&quot; name=&quot;Me&quot; href=&quot;&quot;></xref> in Visual Basic), because synchronization of evidence sets is not supported."
  overload: System.Security.Policy.Evidence.SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.Policy.Evidence.#ctor
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Evidence()
  nameWithType: Evidence.Evidence()
  fullName: System.Security.Policy.Evidence.Evidence()
- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Evidence(Evidence)
  nameWithType: Evidence.Evidence(Evidence)
  fullName: System.Security.Policy.Evidence.Evidence(Evidence)
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Evidence(Object[],Object[])
  nameWithType: Evidence.Evidence(Object[],Object[])
  fullName: System.Security.Policy.Evidence.Evidence(Object[],Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Evidence(EvidenceBase[],EvidenceBase[])
  nameWithType: Evidence.Evidence(EvidenceBase[],EvidenceBase[])
  fullName: System.Security.Policy.Evidence.Evidence(EvidenceBase[],EvidenceBase[])
- uid: System.Security.Policy.EvidenceBase[]
  parent: System.Security.Policy
  isExternal: false
  name: EvidenceBase
  nameWithType: EvidenceBase
  fullName: System.Security.Policy.EvidenceBase[]
  spec.csharp:
  - uid: System.Security.Policy.EvidenceBase
    name: EvidenceBase
    nameWithType: EvidenceBase
    fullName: EvidenceBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Policy.Evidence.AddAssembly(System.Object)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddAssembly(Object)
  nameWithType: Evidence.AddAssembly(Object)
  fullName: System.Security.Policy.Evidence.AddAssembly(Object)
- uid: System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddAssemblyEvidence(T)
  nameWithType: Evidence.AddAssemblyEvidence(T)
  fullName: System.Security.Policy.Evidence.AddAssemblyEvidence(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Security.Policy.Evidence.AddHost(System.Object)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddHost(Object)
  nameWithType: Evidence.AddHost(Object)
  fullName: System.Security.Policy.Evidence.AddHost(Object)
- uid: System.Security.Policy.Evidence.AddHostEvidence``1(``0)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddHostEvidence(T)
  nameWithType: Evidence.AddHostEvidence(T)
  fullName: System.Security.Policy.Evidence.AddHostEvidence(T)
- uid: System.Security.Policy.Evidence.Clear
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Clear()
  nameWithType: Evidence.Clear()
  fullName: System.Security.Policy.Evidence.Clear()
- uid: System.Security.Policy.Evidence.Clone
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Clone()
  nameWithType: Evidence.Clone()
  fullName: System.Security.Policy.Evidence.Clone()
- uid: System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Evidence.CopyTo(Array,Int32)
  fullName: System.Security.Policy.Evidence.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Policy.Evidence.Count
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Count
  nameWithType: Evidence.Count
  fullName: System.Security.Policy.Evidence.Count
- uid: System.Security.Policy.Evidence.GetAssemblyEnumerator
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetAssemblyEnumerator()
  nameWithType: Evidence.GetAssemblyEnumerator()
  fullName: System.Security.Policy.Evidence.GetAssemblyEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.Policy.Evidence.GetAssemblyEvidence``1
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetAssemblyEvidence()
  nameWithType: Evidence.GetAssemblyEvidence()
  fullName: System.Security.Policy.Evidence.GetAssemblyEvidence()
- uid: System.Security.Policy.Evidence.GetEnumerator
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetEnumerator()
  nameWithType: Evidence.GetEnumerator()
  fullName: System.Security.Policy.Evidence.GetEnumerator()
- uid: System.Security.Policy.Evidence.GetHostEnumerator
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetHostEnumerator()
  nameWithType: Evidence.GetHostEnumerator()
  fullName: System.Security.Policy.Evidence.GetHostEnumerator()
- uid: System.Security.Policy.Evidence.GetHostEvidence``1
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetHostEvidence()
  nameWithType: Evidence.GetHostEvidence()
  fullName: System.Security.Policy.Evidence.GetHostEvidence()
- uid: System.Security.Policy.Evidence.IsReadOnly
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: IsReadOnly
  nameWithType: Evidence.IsReadOnly
  fullName: System.Security.Policy.Evidence.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.Evidence.IsSynchronized
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: IsSynchronized
  nameWithType: Evidence.IsSynchronized
  fullName: System.Security.Policy.Evidence.IsSynchronized
- uid: System.Security.Policy.Evidence.Locked
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Locked
  nameWithType: Evidence.Locked
  fullName: System.Security.Policy.Evidence.Locked
- uid: System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Merge(Evidence)
  nameWithType: Evidence.Merge(Evidence)
  fullName: System.Security.Policy.Evidence.Merge(Evidence)
- uid: System.Security.Policy.Evidence.RemoveType(System.Type)
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: RemoveType(Type)
  nameWithType: Evidence.RemoveType(Type)
  fullName: System.Security.Policy.Evidence.RemoveType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Policy.Evidence.SyncRoot
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: SyncRoot
  nameWithType: Evidence.SyncRoot
  fullName: System.Security.Policy.Evidence.SyncRoot
- uid: System.Security.Policy.Evidence.#ctor*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Evidence
  nameWithType: Evidence.Evidence
- uid: System.Security.Policy.Evidence.AddAssembly*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddAssembly
  nameWithType: Evidence.AddAssembly
- uid: System.Security.Policy.Evidence.AddAssemblyEvidence<T>*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddAssemblyEvidence<T>
  nameWithType: Evidence.AddAssemblyEvidence<T>
- uid: System.Security.Policy.Evidence.AddHost*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddHost
  nameWithType: Evidence.AddHost
- uid: System.Security.Policy.Evidence.AddHostEvidence<T>*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: AddHostEvidence<T>
  nameWithType: Evidence.AddHostEvidence<T>
- uid: System.Security.Policy.Evidence.Clear*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Clear
  nameWithType: Evidence.Clear
- uid: System.Security.Policy.Evidence.Clone*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Clone
  nameWithType: Evidence.Clone
- uid: System.Security.Policy.Evidence.CopyTo*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: CopyTo
  nameWithType: Evidence.CopyTo
- uid: System.Security.Policy.Evidence.Count*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Count
  nameWithType: Evidence.Count
- uid: System.Security.Policy.Evidence.GetAssemblyEnumerator*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetAssemblyEnumerator
  nameWithType: Evidence.GetAssemblyEnumerator
- uid: System.Security.Policy.Evidence.GetAssemblyEvidence<T>*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetAssemblyEvidence<T>
  nameWithType: Evidence.GetAssemblyEvidence<T>
- uid: System.Security.Policy.Evidence.GetEnumerator*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetEnumerator
  nameWithType: Evidence.GetEnumerator
- uid: System.Security.Policy.Evidence.GetHostEnumerator*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetHostEnumerator
  nameWithType: Evidence.GetHostEnumerator
- uid: System.Security.Policy.Evidence.GetHostEvidence<T>*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: GetHostEvidence<T>
  nameWithType: Evidence.GetHostEvidence<T>
- uid: System.Security.Policy.Evidence.IsReadOnly*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: IsReadOnly
  nameWithType: Evidence.IsReadOnly
- uid: System.Security.Policy.Evidence.IsSynchronized*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: IsSynchronized
  nameWithType: Evidence.IsSynchronized
- uid: System.Security.Policy.Evidence.Locked*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Locked
  nameWithType: Evidence.Locked
- uid: System.Security.Policy.Evidence.Merge*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: Merge
  nameWithType: Evidence.Merge
- uid: System.Security.Policy.Evidence.RemoveType*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: RemoveType
  nameWithType: Evidence.RemoveType
- uid: System.Security.Policy.Evidence.SyncRoot*
  parent: System.Security.Policy.Evidence
  isExternal: false
  name: SyncRoot
  nameWithType: Evidence.SyncRoot
