### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.OpenFileDialog
  id: OpenFileDialog
  children:
  - System.Windows.Forms.OpenFileDialog.#ctor
  - System.Windows.Forms.OpenFileDialog.CheckFileExists
  - System.Windows.Forms.OpenFileDialog.Multiselect
  - System.Windows.Forms.OpenFileDialog.OpenFile
  - System.Windows.Forms.OpenFileDialog.ReadOnlyChecked
  - System.Windows.Forms.OpenFileDialog.Reset
  - System.Windows.Forms.OpenFileDialog.SafeFileName
  - System.Windows.Forms.OpenFileDialog.SafeFileNames
  - System.Windows.Forms.OpenFileDialog.ShowReadOnly
  langs:
  - csharp
  name: OpenFileDialog
  nameWithType: OpenFileDialog
  fullName: System.Windows.Forms.OpenFileDialog
  type: Class
  summary: "Displays a standard dialog box that prompts the user to open a file. This class cannot be inherited."
  remarks: "This class allows you to check whether a file exists and to open it. The <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property determines whether a read-only check box appears in the dialog box. The <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> property indicates whether the read-only check box is checked.       Most of the core functionality for this class is found in the <xref:System.Windows.Forms.FileDialog> class.       If you want to give the user the ability to select a folder instead of a file, use <xref:System.Windows.Forms.FolderBrowserDialog> instead."
  example:
  - "The following code example creates an OpenFileDialog, sets several properties to define the file extension filter and dialog behavior, and displays the dialog box using the <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A?displayProperty=fullName> method. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and a reference to the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/t-system.windows.forms.o_1_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/t-system.windows.forms.o_1_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.o_1_1.vb)]"
  syntax:
    content: 'public sealed class OpenFileDialog : System.Windows.Forms.FileDialog'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Windows.Forms.CommonDialog
  - System.Windows.Forms.FileDialog
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Windows.Forms.CommonDialog.HelpRequest
  - System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)
  - System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.CommonDialog.ShowDialog
  - System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)
  - System.Windows.Forms.CommonDialog.Tag
  - System.Windows.Forms.FileDialog.AddExtension
  - System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  - System.Windows.Forms.FileDialog.CheckPathExists
  - System.Windows.Forms.FileDialog.CustomPlaces
  - System.Windows.Forms.FileDialog.DefaultExt
  - System.Windows.Forms.FileDialog.DereferenceLinks
  - System.Windows.Forms.FileDialog.EventFileOk
  - System.Windows.Forms.FileDialog.FileName
  - System.Windows.Forms.FileDialog.FileNames
  - System.Windows.Forms.FileDialog.FileOk
  - System.Windows.Forms.FileDialog.Filter
  - System.Windows.Forms.FileDialog.FilterIndex
  - System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.FileDialog.InitialDirectory
  - System.Windows.Forms.FileDialog.Instance
  - System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  - System.Windows.Forms.FileDialog.Options
  - System.Windows.Forms.FileDialog.RestoreDirectory
  - System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  - System.Windows.Forms.FileDialog.ShowHelp
  - System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  - System.Windows.Forms.FileDialog.Title
  - System.Windows.Forms.FileDialog.ToString
  - System.Windows.Forms.FileDialog.ValidateNames
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: OpenFileDialog()
  nameWithType: OpenFileDialog.OpenFileDialog()
  fullName: System.Windows.Forms.OpenFileDialog.OpenFileDialog()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes an instance of the <xref href=&quot;System.Windows.Forms.OpenFileDialog&quot;></xref> class."
  remarks: "This is the default, compiler-supplied constructor for the <xref:System.Windows.Forms.OpenFileDialog> class."
  syntax:
    content: public OpenFileDialog ();
    parameters: []
  overload: System.Windows.Forms.OpenFileDialog.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.CheckFileExists
  id: CheckFileExists
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: CheckFileExists
  nameWithType: OpenFileDialog.CheckFileExists
  fullName: System.Windows.Forms.OpenFileDialog.CheckFileExists
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist."
  syntax:
    content: public override bool CheckFileExists { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box displays a warning when the user specifies a file name that does not exist; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.OpenFileDialog.CheckFileExists*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.Multiselect
  id: Multiselect
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: Multiselect
  nameWithType: OpenFileDialog.Multiselect
  fullName: System.Windows.Forms.OpenFileDialog.Multiselect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box allows multiple files to be selected."
  remarks: "Use the <xref:System.Windows.Forms.FileDialog.FileNames%2A> property to access the full list of selected file names."
  example:
  - "The following code example allows the user to select a number of images and display them in <xref:System.Windows.Forms.PictureBox> controls on a Form. It demonstrates initializing an <xref:System.Windows.Forms.OpenFileDialog>, setting the <xref:System.Windows.Forms.FileDialog.Title%2A> and <xref:System.Windows.Forms.FileDialog.Filter%2A> properties, and allowing the user to select multiple files by setting the Multiselect property to true. This code example assumes that your form already has an <xref:System.Windows.Forms.OpenFileDialog> control named `openFileDialog1`, a <xref:System.Windows.Forms.Button> named `SelectFileButton`, and a <xref:System.Windows.Forms.FlowLayoutPanel> named `flowLayoutPanel1`.  \n  \n [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/add/codesnippet/visualbasic/TestOpenFileDialogMultiSelectVB/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/add/codesnippet/csharp/TestOpenFileDialogMultiSelect/Form1.cs#1)]"
  syntax:
    content: public bool Multiselect { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box allows multiple files to be selected together or concurrently; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.OpenFileDialog.Multiselect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.OpenFile
  id: OpenFile
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: OpenFile()
  nameWithType: OpenFileDialog.OpenFile()
  fullName: System.Windows.Forms.OpenFileDialog.OpenFile()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Opens the file selected by the user, with read-only permission. The file is specified by the <xref:System.Windows.Forms.FileDialog.FileName*> property."
  remarks: "The OpenFile method is used to provide a facility to quickly open a file from the dialog box. The file is opened in read-only mode for security purposes. To open a file in read/write mode, you must use another method, such as <xref:System.IO.FileStream>."
  example:
  - "The following code example demonstrates how to use the OpenFile method.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/m-system.windows.forms.o_1_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/m-system.windows.forms.o_1_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.o_1_1.vb)]"
  syntax:
    content: public System.IO.Stream OpenFile ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> that specifies the read-only file selected by the user."
  overload: System.Windows.Forms.OpenFileDialog.OpenFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The file name is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.ReadOnlyChecked
  id: ReadOnlyChecked
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: ReadOnlyChecked
  nameWithType: OpenFileDialog.ReadOnlyChecked
  fullName: System.Windows.Forms.OpenFileDialog.ReadOnlyChecked
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the read-only check box is selected."
  remarks: "The ReadOnlyChecked state does not affect the read/write mode that <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A?displayProperty=fullName> uses to open a file selected in the dialog box. <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> will always open the file in read-only mode.       The <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property must be set before in order for the read-only check box to appear in the dialog box."
  example:
  - "The following code example demonstrates the use of the ReadOnlyChecked property. This example displays the <xref:System.Windows.Forms.OpenFileDialog> box with the <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property set to `true`. If the user clicks the option to open the file in read-only mode, the ReadOnlyChecked property evaluates to `true`, and the <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> method is used to open the file. Otherwise, the <xref:System.IO.FileStream> class is used to open the file in read/write mode.  \n  \n [!code-vb[DlgOpenFileReadOnly#1](~/add/codesnippet/visualbasic/p-system.windows.forms.o_0_1.vb)]\n [!code-cs[DlgOpenFileReadOnly#1](~/add/codesnippet/csharp/p-system.windows.forms.o_0_1.cs)]\n [!code-cpp[DlgOpenFileReadOnly#1](~/add/codesnippet/cpp/p-system.windows.forms.o_0_1.cpp)]"
  syntax:
    content: public bool ReadOnlyChecked { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the read-only check box is selected; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.OpenFileDialog.ReadOnlyChecked*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.Reset
  id: Reset
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: Reset()
  nameWithType: OpenFileDialog.Reset()
  fullName: System.Windows.Forms.OpenFileDialog.Reset()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets all properties to their default values."
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Windows.Forms.OpenFileDialog.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.SafeFileName
  id: SafeFileName
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: SafeFileName
  nameWithType: OpenFileDialog.SafeFileName
  fullName: System.Windows.Forms.OpenFileDialog.SafeFileName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the file name and extension for the file selected in the dialog box. The file name does not include the path."
  remarks: "A safe file name (just the file name and extension without a path) can be used to improve security for applications because it does not expose path information. This property should be accessible to code running with limited trust."
  syntax:
    content: public string SafeFileName { get; }
    return:
      type: System.String
      description: "The file name and extension for the file selected in the dialog box. The file name does not include the path. The default value is an empty string."
  overload: System.Windows.Forms.OpenFileDialog.SafeFileName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.SafeFileNames
  id: SafeFileNames
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: SafeFileNames
  nameWithType: OpenFileDialog.SafeFileNames
  fullName: System.Windows.Forms.OpenFileDialog.SafeFileNames
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an array of file names and extensions for all the selected files in the dialog box. The file names do not include the path."
  remarks: "A safe file name (just the file name and extension without a path) can be used to improve security for applications because it does not expose path information. This property should be accessible to code running with limited trust."
  syntax:
    content: public string[] SafeFileNames { get; }
    return:
      type: System.String[]
      description: "An array of file names and extensions for all the selected files in the dialog box. The file names do not include the path. If no files are selected, an empty array is returned."
  overload: System.Windows.Forms.OpenFileDialog.SafeFileNames*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OpenFileDialog.ShowReadOnly
  id: ShowReadOnly
  parent: System.Windows.Forms.OpenFileDialog
  langs:
  - csharp
  name: ShowReadOnly
  nameWithType: OpenFileDialog.ShowReadOnly
  fullName: System.Windows.Forms.OpenFileDialog.ShowReadOnly
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box contains a read-only check box."
  remarks: ''
  example:
  - "The following code example demonstrates the use of the ShowReadOnly property. This example displays the <xref:System.Windows.Forms.OpenFileDialog> box with the ShowReadOnly property set to `true`. If the user clicks the option to open the file in read-only mode, the <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> method is used to open the file. Otherwise, the <xref:System.IO.FileStream> class is used to open the file in read/write mode.  \n  \n [!code-vb[DlgOpenFileReadOnly#1](~/add/codesnippet/visualbasic/p-system.windows.forms.o_1_1.vb)]\n [!code-cs[DlgOpenFileReadOnly#1](~/add/codesnippet/csharp/p-system.windows.forms.o_1_1.cs)]\n [!code-cpp[DlgOpenFileReadOnly#1](~/add/codesnippet/cpp/p-system.windows.forms.o_1_1.cpp)]"
  syntax:
    content: public bool ShowReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box contains a read-only check box; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.OpenFileDialog.ShowReadOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.FileDialog
  isExternal: false
  name: System.Windows.Forms.FileDialog
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Forms.OpenFileDialog.#ctor
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: OpenFileDialog()
  nameWithType: OpenFileDialog.OpenFileDialog()
  fullName: System.Windows.Forms.OpenFileDialog.OpenFileDialog()
- uid: System.Windows.Forms.OpenFileDialog.CheckFileExists
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: CheckFileExists
  nameWithType: OpenFileDialog.CheckFileExists
  fullName: System.Windows.Forms.OpenFileDialog.CheckFileExists
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.OpenFileDialog.Multiselect
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: Multiselect
  nameWithType: OpenFileDialog.Multiselect
  fullName: System.Windows.Forms.OpenFileDialog.Multiselect
- uid: System.Windows.Forms.OpenFileDialog.OpenFile
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: OpenFile()
  nameWithType: OpenFileDialog.OpenFile()
  fullName: System.Windows.Forms.OpenFileDialog.OpenFile()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Windows.Forms.OpenFileDialog.ReadOnlyChecked
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: ReadOnlyChecked
  nameWithType: OpenFileDialog.ReadOnlyChecked
  fullName: System.Windows.Forms.OpenFileDialog.ReadOnlyChecked
- uid: System.Windows.Forms.OpenFileDialog.Reset
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: Reset()
  nameWithType: OpenFileDialog.Reset()
  fullName: System.Windows.Forms.OpenFileDialog.Reset()
- uid: System.Windows.Forms.OpenFileDialog.SafeFileName
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: SafeFileName
  nameWithType: OpenFileDialog.SafeFileName
  fullName: System.Windows.Forms.OpenFileDialog.SafeFileName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.OpenFileDialog.SafeFileNames
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: SafeFileNames
  nameWithType: OpenFileDialog.SafeFileNames
  fullName: System.Windows.Forms.OpenFileDialog.SafeFileNames
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.OpenFileDialog.ShowReadOnly
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: ShowReadOnly
  nameWithType: OpenFileDialog.ShowReadOnly
  fullName: System.Windows.Forms.OpenFileDialog.ShowReadOnly
- uid: System.Windows.Forms.OpenFileDialog.#ctor*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: OpenFileDialog
  nameWithType: OpenFileDialog.OpenFileDialog
- uid: System.Windows.Forms.OpenFileDialog.CheckFileExists*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: CheckFileExists
  nameWithType: OpenFileDialog.CheckFileExists
- uid: System.Windows.Forms.OpenFileDialog.Multiselect*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: Multiselect
  nameWithType: OpenFileDialog.Multiselect
- uid: System.Windows.Forms.OpenFileDialog.OpenFile*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: OpenFile
  nameWithType: OpenFileDialog.OpenFile
- uid: System.Windows.Forms.OpenFileDialog.ReadOnlyChecked*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: ReadOnlyChecked
  nameWithType: OpenFileDialog.ReadOnlyChecked
- uid: System.Windows.Forms.OpenFileDialog.Reset*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: Reset
  nameWithType: OpenFileDialog.Reset
- uid: System.Windows.Forms.OpenFileDialog.SafeFileName*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: SafeFileName
  nameWithType: OpenFileDialog.SafeFileName
- uid: System.Windows.Forms.OpenFileDialog.SafeFileNames*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: SafeFileNames
  nameWithType: OpenFileDialog.SafeFileNames
- uid: System.Windows.Forms.OpenFileDialog.ShowReadOnly*
  parent: System.Windows.Forms.OpenFileDialog
  isExternal: false
  name: ShowReadOnly
  nameWithType: OpenFileDialog.ShowReadOnly
