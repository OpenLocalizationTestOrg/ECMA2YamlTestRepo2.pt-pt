### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AccessRule`1
  id: AccessRule`1
  children:
  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControl`0ype)
  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControl`0ype)
  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)
  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)
  - System.Security.AccessControl.AccessRule`1.Rights
  langs:
  - csharp
  name: AccessRule<T>
  nameWithType: AccessRule<T>
  fullName: System.Security.AccessControl.AccessRule<T>
  type: Class
  syntax:
    content: 'public class AccessRule<T> : System.Security.AccessControl.AccessRule where T : struct'
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControl`0ype)
  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControl`0ype)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  name: AccessRule(IdentityReference,T,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(IdentityReference,T,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(IdentityReference,T,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  syntax:
    content: public AccessRule (System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "To be added."
    - id: rights
      type: T
      description: "To be added."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "To be added."
  overload: System.Security.AccessControl.AccessRule`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControl`0ype)
  id: '#ctor(System.String,`0,System.Security.AccessControl.AccessControl`0ype)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  name: AccessRule(String,T,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(String,T,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(String,T,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  syntax:
    content: public AccessRule (string identity, T rights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "To be added."
    - id: rights
      type: T
      description: "To be added."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "To be added."
  overload: System.Security.AccessControl.AccessRule`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)
  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  name: AccessRule(IdentityReference,T,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(IdentityReference,T,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(IdentityReference,T,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  syntax:
    content: public AccessRule (System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "To be added."
    - id: rights
      type: T
      description: "To be added."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "To be added."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "To be added."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "To be added."
  overload: System.Security.AccessControl.AccessRule`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)
  id: '#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  name: AccessRule(String,T,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(String,T,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(String,T,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  syntax:
    content: public AccessRule (string identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "To be added."
    - id: rights
      type: T
      description: "To be added."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "To be added."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "To be added."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "To be added."
  overload: System.Security.AccessControl.AccessRule`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AccessRule`1.Rights
  id: Rights
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  name: Rights
  nameWithType: AccessRule<T>.Rights
  fullName: System.Security.AccessControl.AccessRule<T>.Rights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  syntax:
    content: public T Rights { get; }
    return:
      type: T
      description: "To be added."
  overload: System.Security.AccessControl.AccessRule`1.Rights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControl`0ype)
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: AccessRule(IdentityReference,T,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(IdentityReference,T,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(IdentityReference,T,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControl`0ype)
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: AccessRule(String,T,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(String,T,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(String,T,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: AccessRule(IdentityReference,T,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(IdentityReference,T,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(IdentityReference,T,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControl`0ype)
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: AccessRule(String,T,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(String,T,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(String,T,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule`1.Rights
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: Rights
  nameWithType: AccessRule<T>.Rights
  fullName: System.Security.AccessControl.AccessRule<T>.Rights
- uid: System.Security.AccessControl.AccessRule`1.#ctor*
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: AccessRule<T>
  nameWithType: AccessRule<T>.AccessRule<T>
- uid: System.Security.AccessControl.AccessRule`1.Rights*
  parent: System.Security.AccessControl.AccessRule`1
  isExternal: false
  name: Rights
  nameWithType: AccessRule<T>.Rights
