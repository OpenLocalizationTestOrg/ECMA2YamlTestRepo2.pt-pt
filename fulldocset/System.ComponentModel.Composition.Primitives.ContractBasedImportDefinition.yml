### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  id: ContractBasedImportDefinition
  children:
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity
  - System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString
  langs:
  - csharp
  name: ContractBasedImportDefinition
  nameWithType: ContractBasedImportDefinition
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  type: Class
  summary: "Represents an import that is required by a <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ComposablePart&quot;></see> object and that can specify both a contract name and metadata."
  syntax:
    content: 'public class ContractBasedImportDefinition : System.ComponentModel.Composition.Primitives.ImportDefinition'
  inheritance:
  - System.Object
  - System.ComponentModel.Composition.Primitives.ImportDefinition
  implements: []
  inheritedMembers:
  - System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality
  - System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName
  - System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite
  - System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable
  - System.ComponentModel.Composition.Primitives.ImportDefinition.Metadata
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: ContractBasedImportDefinition()
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition()
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ContractBasedImportDefinition()
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Initializes a new instance of the <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition&quot;></see> class."
  syntax:
    content: protected ContractBasedImportDefinition ();
    parameters: []
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)
  id: '#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)'
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy)
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy)
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy)
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Initializes a new instance of the <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition&quot;></see> class with the specified contract name, required type identity, required metadata, cardinality, and creation policy, and indicates whether the import definition is recomposable or a prerequisite."
  syntax:
    content: public ContractBasedImportDefinition (string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Type>> requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy);
    parameters:
    - id: contractName
      type: System.String
      description: "The contract name of the  object required by the import definition."
    - id: requiredTypeIdentity
      type: System.String
      description: "The type identity of the export type expected. Use the <xref:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity%2A> method to generate a type identity for a given type. If no specific type is required, use ."
    - id: requiredMetadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}}
      description: "A collection of key/value pairs that contain the metadata names and types required by the import definition; or  to set the <xref:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata%2A> property to an empty <xref:System.Collections.Generic.IEnumerable%601> collection."
    - id: cardinality
      type: System.ComponentModel.Composition.Primitives.ImportCardinality
      description: "One of the enumeration values that indicates the cardinality of the  objects required by the import definition."
    - id: isRecomposable
      type: System.Boolean
      description: "\n     to specify that the import definition can be satisfied multiple times throughout the lifetime of a ; otherwise, ."
    - id: isPrerequisite
      type: System.Boolean
      description: "\n     to specify that the import definition is required to be satisfied before a  can start producing exported objects; otherwise, ."
    - id: requiredCreationPolicy
      type: System.ComponentModel.Composition.CreationPolicy
      description: "A value that indicates that the importer requires a specific creation policy for the exports used to satisfy this import. If no specific creation policy is needed, the default is ."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    contractName is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    contractName is an empty string (\"\").  \n  \n -or-  \n  \n requiredMetadata contains an element that is .  \n  \n -or-  \n  \n cardinality is not one of the  values."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: '#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object})'
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy,IDictionary<String,Object>)
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy,IDictionary<String,Object>)
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy,IDictionary<String,Object>)
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Initializes a new instance of the <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition&quot;></see> class with the specified contract name, required type identity, required and optional metadata, cardinality, and creation policy, and indicates whether the import definition is recomposable or a prerequisite."
  syntax:
    content: public ContractBasedImportDefinition (string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Type>> requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary<string,object> metadata);
    parameters:
    - id: contractName
      type: System.String
      description: "The contract name of the  object required by the import definition."
    - id: requiredTypeIdentity
      type: System.String
      description: "The type identity of the export type expected. Use the <xref:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity%2A> method to generate a type identity for a given type. If no specific type is required, use ."
    - id: requiredMetadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}}
      description: "A collection of key/value pairs that contain the metadata names and types required by the import definition; or  to set the <xref:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata%2A> property to an empty <xref:System.Collections.Generic.IEnumerable%601> collection."
    - id: cardinality
      type: System.ComponentModel.Composition.Primitives.ImportCardinality
      description: "One of the enumeration values that indicates the cardinality of the  objects required by the import definition."
    - id: isRecomposable
      type: System.Boolean
      description: "\n     to specify that the import definition can be satisfied multiple times throughout the lifetime of a ; otherwise, ."
    - id: isPrerequisite
      type: System.Boolean
      description: "\n     to specify that the import definition is required to be satisfied before a  can start producing exported objects; otherwise, ."
    - id: requiredCreationPolicy
      type: System.ComponentModel.Composition.CreationPolicy
      description: "A value that indicates that the importer requires a specific creation policy for the exports used to satisfy this import. If no specific creation policy is needed, the default is ."
    - id: metadata
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "The metadata associated with this import."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    contractName is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    contractName is an empty string (\"\").  \n  \n -or-  \n  \n requiredMetadata contains an element that is .  \n  \n -or-  \n  \n cardinality is not one of the  values."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint
  id: Constraint
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: Constraint
  nameWithType: ContractBasedImportDefinition.Constraint
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Gets an expression that defines conditions that must be matched to satisfy the import described by this import definition."
  syntax:
    content: public override System.Linq.Expressions.Expression<Func<System.ComponentModel.Composition.Primitives.ExportDefinition,bool>> Constraint { get; }
    return:
      type: System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}}
      description: "An expression that contains a &lt;xref:System.Func%602&gt; object that defines the conditions that must be matched for the <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ImportDefinition&quot;></see> to be satisfied by an <see cref=&quot;T:System.ComponentModel.Composition.Primitives.Export&quot;></see>."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)
  id: IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: IsConstraintSatisfiedBy(ExportDefinition)
  nameWithType: ContractBasedImportDefinition.IsConstraintSatisfiedBy(ExportDefinition)
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(ExportDefinition)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Returns a value indicating whether the constraint represented by this object is satisfied by the export represented by the given export definition."
  syntax:
    content: public override bool IsConstraintSatisfiedBy (System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition);
    parameters:
    - id: exportDefinition
      type: System.ComponentModel.Composition.Primitives.ExportDefinition
      description: "The export definition to test."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy
  id: RequiredCreationPolicy
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: RequiredCreationPolicy
  nameWithType: ContractBasedImportDefinition.RequiredCreationPolicy
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Gets or sets a value that indicates that the importer requires a specific <see cref=&quot;T:System.ComponentModel.Composition.CreationPolicy&quot;></see> for the exports used to satisfy this import."
  syntax:
    content: public virtual System.ComponentModel.Composition.CreationPolicy RequiredCreationPolicy { get; }
    return:
      type: System.ComponentModel.Composition.CreationPolicy
      description: "One of the following values:       <see cref=&quot;T:System.ComponentModel.Composition.CreationPolicy&quot;></see>, if the importer does not require a specific <see cref=&quot;T:System.ComponentModel.Composition.CreationPolicy&quot;></see>.       <see cref=&quot;T:System.ComponentModel.Composition.CreationPolicy&quot;></see> to require that all exports used should be shared by all importers in the container.       <see cref=&quot;T:System.ComponentModel.Composition.CreationPolicy&quot;></see> to require that all exports used should be non-shared in the container. In this case, each importer receives a separate instance."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata
  id: RequiredMetadata
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: RequiredMetadata
  nameWithType: ContractBasedImportDefinition.RequiredMetadata
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Gets the metadata names of the export required by the import definition."
  remarks: "Overrides of this property should never return `null` or return an <xref:System.Collections.Generic.IEnumerable%601> collection that contains an element that is `null`. If the definition does not contain required metadata, return an empty <xref:System.Collections.Generic.IEnumerable%601> collection instead."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,Type>> RequiredMetadata { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}}
      description: "A collection of &lt;xref:System.String&gt; objects that contain the metadata names of the <see cref=&quot;T:System.ComponentModel.Composition.Primitives.Export&quot;></see> objects required by the <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition&quot;></see>. The default is an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; collection."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity
  id: RequiredTypeIdentity
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: RequiredTypeIdentity
  nameWithType: ContractBasedImportDefinition.RequiredTypeIdentity
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Gets the expected type of the export that matches this <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition&quot;></see>."
  syntax:
    content: public virtual string RequiredTypeIdentity { get; }
    return:
      type: System.String
      description: "A string that is generated by calling the &lt;xref:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity%2A&gt; method on the type that this import expects. If the value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, this import does not expect a particular type."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString
  id: ToString
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  langs:
  - csharp
  name: ToString()
  nameWithType: ContractBasedImportDefinition.ToString()
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Primitives
  summary: "Returns the string representation of this <see cref=&quot;T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition&quot;></see> object."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "To be added."
  overload: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ComponentModel.Composition.Primitives.ImportDefinition
  isExternal: false
  name: System.ComponentModel.Composition.Primitives.ImportDefinition
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: ContractBasedImportDefinition()
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition()
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ContractBasedImportDefinition()
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy)
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy)
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Type>>
  nameWithType: IEnumerable<KeyValuePair<String,Type>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Type>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Type>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Primitives.ImportCardinality
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ImportCardinality
  nameWithType: ImportCardinality
  fullName: System.ComponentModel.Composition.Primitives.ImportCardinality
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Composition.CreationPolicy
  parent: System.ComponentModel.Composition
  isExternal: false
  name: CreationPolicy
  nameWithType: CreationPolicy
  fullName: System.ComponentModel.Composition.CreationPolicy
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy,IDictionary<String,Object>)
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy,IDictionary<String,Object>)
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ContractBasedImportDefinition(String,String,IEnumerable<KeyValuePair<String,Type>>,ImportCardinality,Boolean,Boolean,CreationPolicy,IDictionary<String,Object>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: Constraint
  nameWithType: ContractBasedImportDefinition.Constraint
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint
- uid: System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<ExportDefinition,Boolean>>
  nameWithType: Expression<Func<ExportDefinition,Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ExportDefinition
    name: ExportDefinition
    nameWithType: ExportDefinition
    fullName: ExportDefinition
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: IsConstraintSatisfiedBy(ExportDefinition)
  nameWithType: ContractBasedImportDefinition.IsConstraintSatisfiedBy(ExportDefinition)
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(ExportDefinition)
- uid: System.ComponentModel.Composition.Primitives.ExportDefinition
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ExportDefinition
  nameWithType: ExportDefinition
  fullName: System.ComponentModel.Composition.Primitives.ExportDefinition
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: RequiredCreationPolicy
  nameWithType: ContractBasedImportDefinition.RequiredCreationPolicy
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: RequiredMetadata
  nameWithType: ContractBasedImportDefinition.RequiredMetadata
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: RequiredTypeIdentity
  nameWithType: ContractBasedImportDefinition.RequiredTypeIdentity
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: ToString()
  nameWithType: ContractBasedImportDefinition.ToString()
  fullName: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString()
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: ContractBasedImportDefinition
  nameWithType: ContractBasedImportDefinition.ContractBasedImportDefinition
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: Constraint
  nameWithType: ContractBasedImportDefinition.Constraint
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: IsConstraintSatisfiedBy
  nameWithType: ContractBasedImportDefinition.IsConstraintSatisfiedBy
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: RequiredCreationPolicy
  nameWithType: ContractBasedImportDefinition.RequiredCreationPolicy
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: RequiredMetadata
  nameWithType: ContractBasedImportDefinition.RequiredMetadata
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: RequiredTypeIdentity
  nameWithType: ContractBasedImportDefinition.RequiredTypeIdentity
- uid: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString*
  parent: System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition
  isExternal: false
  name: ToString
  nameWithType: ContractBasedImportDefinition.ToString
