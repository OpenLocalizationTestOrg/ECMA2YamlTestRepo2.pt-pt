### YamlMime:ManagedReference
items:
- uid: System.Net.Security.SslStream
  id: SslStream
  children:
  - System.Net.Security.SslStream.#ctor(System.IO.Stream)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  - System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  - System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.CanRead
  - System.Net.Security.SslStream.CanSeek
  - System.Net.Security.SslStream.CanTimeout
  - System.Net.Security.SslStream.CanWrite
  - System.Net.Security.SslStream.CheckCertRevocationStatus
  - System.Net.Security.SslStream.CipherAlgorithm
  - System.Net.Security.SslStream.CipherStrength
  - System.Net.Security.SslStream.Dispose(System.Boolean)
  - System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  - System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.SslStream.Flush
  - System.Net.Security.SslStream.HashAlgorithm
  - System.Net.Security.SslStream.HashStrength
  - System.Net.Security.SslStream.IsAuthenticated
  - System.Net.Security.SslStream.IsEncrypted
  - System.Net.Security.SslStream.IsMutuallyAuthenticated
  - System.Net.Security.SslStream.IsServer
  - System.Net.Security.SslStream.IsSigned
  - System.Net.Security.SslStream.KeyExchangeAlgorithm
  - System.Net.Security.SslStream.KeyExchangeStrength
  - System.Net.Security.SslStream.Length
  - System.Net.Security.SslStream.LocalCertificate
  - System.Net.Security.SslStream.Position
  - System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.SslStream.ReadTimeout
  - System.Net.Security.SslStream.RemoteCertificate
  - System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.SslStream.SetLength(System.Int64)
  - System.Net.Security.SslStream.SslProtocol
  - System.Net.Security.SslStream.TransportContext
  - System.Net.Security.SslStream.Write(System.Byte[])
  - System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.SslStream.WriteTimeout
  langs:
  - csharp
  name: SslStream
  nameWithType: SslStream
  fullName: System.Net.Security.SslStream
  type: Class
  summary: "Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client."
  remarks: "SSL protocols help to provide confidentiality and integrity checking for messages transmitted using an SslStream. An SSL connection, such as that provided by SslStream, should be used when communicating sensitive information between a client and a server. Using an SslStream helps to prevent anyone from reading and tampering with information while it is in transit on the network.       An SslStream instance transmits data using a stream that you supply when creating the SslStream. When you supply this underlying stream, you have the option to specify whether closing the SslStream also closes the underlying stream. Typically, the SslStream class is used with the <xref:System.Net.Sockets.TcpClient> and <xref:System.Net.Sockets.TcpListener> classes. The <xref:System.Net.Sockets.TcpClient.GetStream%2A> method provides a <xref:System.Net.Sockets.NetworkStream> suitable for use with the SslStream class.       After creating an SslStream, the server and optionally, the client must be authenticated. The server must provide an X509 certificate that establishes proof of its identity and can request that the client also do so. Authentication must be performed before transmitting information using an SslStream. Clients initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods, which do not block waiting for the authentication to complete. Servers initiate authentication using the synchronous <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods. Both client and server must initiate the authentication.       The authentication is handled by the Security Support Provider (SSPI) channel provider. The client is given an opportunity to control validation of the server&quot;s certificate by specifying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate when creating an SslStream. The server can also control validation by supplying a <xref:System.Net.Security.RemoteCertificateValidationCallback> delegate. The method referenced by the delegate includes the remote party&quot;s certificate and any errors SSPI encountered while validating the certificate. Note that if the server specifies a delegate, the delegate&quot;s method is invoked regardless of whether the server requested client authentication. If the server did not request client authentication, the server&quot;s delegate method receives a null certificate and an empty array of certificate errors.       If the server requires client authentication, the client must specify one or more certificates for authentication. If the client has more than one certificate, the client can provide a <xref:System.Net.Security.LocalCertificateSelectionCallback> delegate to select the correct certificate for the server. The client&quot;s certificates must be located in the current user&quot;s &quot;My&quot; certificate store. Client authentication via certificates is not supported for the <xref:System.Security.Authentication.SslProtocols> (SSL version 2) protocol.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and the SslStream is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       When the authentication process, also known as the SSL handshake, succeeds, the identity of the server (and optionally, the client) is established and the SslStream can be used by the client and server to exchange messages. Before sending or receiving information, the client and server should check the security services and levels provided by the SslStream to determine whether the protocol, algorithms, and strengths selected meet their requirements for integrity and confidentiality. If the current settings are not sufficient, the stream should be closed. You can check the security services provided by the SslStream using the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties. The following table shows the elements that report the cryptographic settings used for authentication, encryption and data signing.      |Element|Members|   |-------------|-------------|   |The security protocol used to authenticate the server and, optionally, the client.|The <xref:System.Net.Security.SslStream.SslProtocol%2A> property and the associated <xref:System.Security.Authentication.SslProtocols> enumeration.|   |The key exchange algorithm.|The <xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> property and the associated <xref:System.Security.Authentication.ExchangeAlgorithmType> enumeration.|   |The message integrity algorithm.|The <xref:System.Net.Security.SslStream.HashAlgorithm%2A> property and the associated <xref:System.Security.Authentication.HashAlgorithmType> enumeration.|   |The message confidentiality algorithm.|The <xref:System.Net.Security.SslStream.CipherAlgorithm%2A> property and the associated <xref:System.Security.Authentication.CipherAlgorithmType> enumeration.|   |The strengths of the selected algorithms.|The <xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>, <xref:System.Net.Security.SslStream.HashStrength%2A>, and <xref:System.Net.Security.SslStream.CipherStrength%2A> properties.|       After a successful authentication, you can send data using the synchronous <xref:System.Net.Security.SslStream.Write%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginWrite%2A> methods. You can receive data using the synchronous <xref:System.Net.Security.SslStream.Read%2A> or asynchronous <xref:System.Net.Security.SslStream.BeginRead%2A> methods.       If you specified to the <xref:System.Net.Security.SslStream.%23ctor%2A> that the underlying stream should be left open, you are responsible for closing that stream when you are done using it.      > [!NOTE] >  If the application that creates the SslStream object runs with the credentials of a Normal user, the application will not be able to access certificates installed in the local machine store unless permission has been explicitly given to the user to do so.       SslStream assumes that a timeout along with any other <xref:System.IO.IOException> when one is thrown from the inner stream will be treated as fatal by its caller. Reusing a SslStream instance after a timeout will return garbage. An application should <xref:System.IO.Stream.Close%2A> the SslStream and throw an exception in these cases.       The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.       Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. [This article](https://support.microsoft.com/kb/3069494) explains how to modify your code so that the new behavior is disabled.       The .NET Framework 4.6.3 adds new overloads for the methods that authenticate SslStreams that do not specify a TLS version, but instead use the TLS version defined as the system default in [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx). Use these methods in your app as a way to be able to later modify the defaults as TLS version best practice changes over time, without the need to rebuild and redeploy your app."
  example:
  - "The following code example demonstrates creating an <xref:System.Net.Sockets.TcpListener> that uses the SslStream class to communicate with clients.  \n  \n [!code-cpp[NclSslServerSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_1.cpp)]\n [!code-cs[NclSslServerSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_1.cs)]  \n  \n The following code example demonstrates creating a <xref:System.Net.Sockets.TcpClient> that uses the SslStream class to communicate with a server.  \n  \n [!code-cpp[NclSslClientSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_2.cpp)]\n [!code-cs[NclSslClientSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_2.cs)]"
  syntax:
    content: 'public class SslStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream)
  nameWithType: SslStream.SslStream(Stream)
  fullName: System.Net.Security.SslStream.SslStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> class using the specified <xref:System.IO.Stream>."
  remarks: "If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."
  syntax:
    content: public SslStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean)
  nameWithType: SslStream.SslStream(Stream,Boolean)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> class using the specified <xref:System.IO.Stream> and stream closure behavior."
  remarks: "When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_5_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_5_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data."
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data. This parameter indicates if the inner stream is left open."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> class using the specified <xref:System.IO.Stream>, stream closure behavior and certificate validation delegate."
  remarks: "When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.       The `userCertificateValidationCallback` delegate&quot;s `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.       The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate&quot;s method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.      > [!NOTE] >  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (if there is one), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."
  example:
  - "The following code example creates an <xref:System.Net.Security.SslStream> and initiates the client portion of the authentication.  \n  \n [!code-cpp[NclSslClientSync#4](~/add/codesnippet/cpp/9eaa69b2-6619-41cf-8f97-_1.cpp)]\n [!code-cs[NclSslClientSync#4](~/add/codesnippet/csharp/9eaa69b2-6619-41cf-8f97-_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data."
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data. This parameter indicates if the inner stream is left open."
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref> delegate responsible for validating the certificate supplied by the remote party."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> class using the specified <xref:System.IO.Stream>, stream closure behavior, certificate validation delegate and certificate selection delegate."
  remarks: "When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.SslStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.       The `userCertificateValidationCallback` delegate&quot;s `certificateErrors` argument contains any Windows error codes returned by the channel Security Support Provider Interface (SSPI). The return value of the method invoked by the `userCertificateValidationCallback` delegate determines whether authentication succeeds.       The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate&quot;s method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return `false` to prevent the <xref:System.Net.Security.SslStream> from being created.       The `userCertificateSelectionCallback` delegate is useful when your application has multiple certificates and must dynamically choose a certificate. Certificates in the &quot;MY&quot; store are passed to the method invoked by the delegate.       If a value is not specified in the configuration file for encryptionpolicy, the <xref:System.Net.Security.EncryptionPolicy> defaults to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> for the <xref:System.Net.Security.SslStream> instance that is constructed.       The use of the Null cipher is required when the encryption policy is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.      > [!NOTE] >  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of P:System.Net.HttpWebRequest.ClientCertificates (if there is one), or tries to reuse an anonymous sessions if P:System.Net.HttpWebRequest.ClientCertificates is empty."
  example:
  - "The following code example demonstrates calling this constructor. This example is part of a larger example provided for the <xref:System.Net.Security.SslStream> class.  \n  \n [!code-cpp[NclSslClientAsync#6](~/add/codesnippet/cpp/dc8fc9af-8c2a-4c30-be77-_1.cpp)]\n [!code-cs[NclSslClientAsync#6](~/add/codesnippet/csharp/dc8fc9af-8c2a-4c30-be77-_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data."
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data. This parameter indicates if the inner stream is left open."
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref> delegate responsible for validating the certificate supplied by the remote party."
    - id: userCertificateSelectionCallback
      type: System.Net.Security.LocalCertificateSelectionCallback
      description: "A <xref href=&quot;System.Net.Security.LocalCertificateSelectionCallback&quot;></xref> delegate responsible for selecting the certificate used for authentication."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> class using the specified <xref:System.IO.Stream>"
  remarks: "The use of the Null cipher is required when the `encryptionPolicy` parameter is set to <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>."
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data."
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "A Boolean value that indicates the closure behavior of the <xref:System.IO.Stream> object used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> for sending and receiving data. This parameter indicates if the inner stream is left open."
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref> delegate responsible for validating the certificate supplied by the remote party."
    - id: userCertificateSelectionCallback
      type: System.Net.Security.LocalCertificateSelectionCallback
      description: "A <xref href=&quot;System.Net.Security.LocalCertificateSelectionCallback&quot;></xref> delegate responsible for selecting the certificate used for authentication."
    - id: encryptionPolicy
      type: System.Net.Security.EncryptionPolicy
      description: "The <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;></xref> to use."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code> is not readable.       -or-       <code>innerStream</code> is not writable.       -or-       <code>encryptionPolicy</code> is not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  id: AuthenticateAsClient(System.String)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClient(String)
  nameWithType: SslStream.AuthenticateAsClient(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by clients to authenticate the server and optionally the client in a client-server connection."
  remarks: "This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server&quot;s certificate.       When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual void AuthenticateAsClient (string targetHost);
    parameters:
    - id: targetHost
      type: System.String
      description: "The name of the server that shares this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
  overload: System.Net.Security.SslStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Server authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collection and SSL protocol."
  remarks: "When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."
  syntax:
    content: public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: targetHost
      type: System.String
      description: "The name of the server that will share this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "The <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref> that contains client certificates."
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."
  overload: System.Net.Security.SslStream.AuthenticateAsClient*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  id: AuthenticateAsClientAsync(System.String)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(String)
  nameWithType: SslStream.AuthenticateAsClientAsync(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation."
  remarks: "This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication. The value specified for `targetHost` must match the name on the server&quot;s certificate.       When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost);
    parameters:
    - id: targetHost
      type: System.String
      description: "The name of the server that shares this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."
  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Server authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by clients to authenticate the server and optionally the client in a client-server connection as an asynchronous operation. The authentication process uses the specified certificate collection and SSL protocol."
  remarks: "When authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: targetHost
      type: System.String
      description: "The name of the server that will share this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "The <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref> that contains client certificates."
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."
  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServer(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate."
  remarks: "This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "The certificate used to authenticate the server."
  overload: System.Net.Security.SslStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Client authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol."
  remarks: "This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "The X509Certificate used to authenticate the server."
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request."
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."
  overload: System.Net.Security.SslStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Client authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The <xref:System.Net.Security.SslStream.AuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate as an asynchronous operation."
  remarks: "This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "The certificate used to authenticate the server."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."
  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Client authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The <xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*> method is not supported on Windows 95, Windows 98, or Windows Millennium."
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol as an asynchronous operation."
  remarks: "If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "The X509Certificate used to authenticate the server."
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request."
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."
  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by clients to begin an asynchronous operation to authenticate the server and optionally the client."
  remarks: "This method authenticates using <xref:System.Security.Authentication.SslProtocols>. No client certificates are used in the authentication. The certificate revocation list is not checked during authentication.       The value specified for `targetHost` must match the name on the server&quot;s certificate.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: targetHost
      type: System.String
      description: "The name of the server that shares this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."
    - id: asyncState
      type: System.Object
      description: "A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."
  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Server authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by clients to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates and security protocol."
  remarks: "The value specified for `targetHost` must match the name on the server&quot;s certificate.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.      > [!NOTE] >  Client certificates are not supported in the SSL version 2 protocol."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: targetHost
      type: System.String
      description: "The name of the server that shares this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "The <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref> containing client certificates."
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."
    - id: asyncState
      type: System.Object
      description: "A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."
  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Server authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection."
  remarks: "This method authenticates using <xref:System.Security.Authentication.SslProtocols>. The certificate revocation list is not checked during authentication. The client is not required to provide a certificate for authentication.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "The X509Certificate used to authenticate the server."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."
    - id: asyncState
      type: System.Object
      description: "A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."
  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Client authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Called by servers to begin an asynchronous operation to authenticate the server and optionally the client using the specified certificates, requirements and security protocol."
  remarks: "The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If you receive a <xref:System.Security.Authentication.AuthenticationException>, this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "The X509Certificate used to authenticate the server."
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request -- if no certificate is provided, the server still accepts the connection request."
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the certificate revocation list is checked during authentication."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."
    - id: asyncState
      type: System.Object
      description: "A user-defined object that contains information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."
  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code> is not a valid <xref:System.Security.Authentication.SslProtocols> value."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.       -or-       Server authentication using this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was tried previously.       -or-       Authentication is already in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*> method is not supported on Windows 95, Windows 98, or Windows Millennium."
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Begins an asynchronous read operation that reads data from the stream and stores it in the specified array."
  remarks: "If encryption and or signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and/or decrypts it. The asynchronous read operation must be completed by calling the <xref:System.Net.Security.SslStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.       This method does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.SslStream.Read%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous read operations.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."
  example:
  - "The following code example demonstrates starting an asynchronous read operation.  \n  \n [!code-cpp[NclSslClientAsync#8](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_1.cpp)]\n [!code-cs[NclSslClientAsync#8](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_1.cs)]  \n  \n [!code-cpp[NclSslClientAsync#4](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_2.cpp)]\n [!code-cs[NclSslClientAsync#4](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_2.cs)]  \n  \n The following method is called when the read completes.  \n  \n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_3.cpp)]\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_3.cs)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte> array that receives the bytes read from the stream."
    - id: offset
      type: System.Int32
      description: "The zero-based location in `buffer` at which to begin storing the data read from this stream."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to read from the stream."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete."
    - id: asyncState
      type: System.Object
      description: "A user-defined object that contains information about the read operation. This object is passed to the `asyncCallback` delegate when the operation completes."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that indicates the status of the asynchronous operation."
  overload: System.Net.Security.SslStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.       -or-       Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "There is already a read operation in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream."
  remarks: ''
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cs[NclSslServerAsync#5](~/add/codesnippet/csharp/7192cc61-a256-4249-aafa-_1.cs)]\n [!code-cpp[NclSslServerAsync#5](~/add/codesnippet/cpp/7192cc61-a256-4249-aafa-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte> array that supplies the bytes to be written to the stream."
    - id: offset
      type: System.Int32
      description: "The zero-based location in `buffer` at which to begin reading bytes to be written to the stream."
    - id: count
      type: System.Int32
      description: "An <xref:System.Int32> value that specifies the number of bytes to read from `buffer`."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete."
    - id: asyncState
      type: System.Object
      description: "A user-defined object that contains information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."
  overload: System.Net.Security.SslStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "There is already a write operation in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanRead
  id: CanRead
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanRead
  nameWithType: SslStream.CanRead
  fullName: System.Net.Security.SslStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable."
  remarks: "If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanRead%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_14_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_14_1.cs)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if authentication has occurred and the underlying stream is readable; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: SslStream.CanSeek
  fullName: System.Net.Security.SslStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable."
  remarks: "Do not attempt to set the position of the <xref:System.Net.Security.SslStream> object or its underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "This property always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
  fullName: System.Net.Security.SslStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs."
  remarks: "This property returns the value returned by invoking <xref:System.IO.Stream.CanTimeout%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_8_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_8_1.cs)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the underlying stream supports time-outs; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: SslStream.CanWrite
  fullName: System.Net.Security.SslStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable."
  remarks: "If successful authentication has occurred, this property returns the value returned by invoking <xref:System.IO.Stream.CanWrite%2A> on the underlying stream.       The underlying stream is specified when you create an instance of the <xref:System.Net.Security.SslStream> class."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_17_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_17_1.cs)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if authentication has occurred and the underlying stream is writable; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus
  id: CheckCertRevocationStatus
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the certificate revocation list is checked during the certificate validation process."
  remarks: "The certificate revocation list contains certificates that have been revoked by the issuer. Checking the list negatively impacts performance but improves application security."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_4_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_4_1.cs)]"
  syntax:
    content: public virtual bool CheckCertRevocationStatus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the certificate revocation list is checked; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.CheckCertRevocationStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CipherAlgorithm
  id: CipherAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
  fullName: System.Net.Security.SslStream.CipherAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a value that identifies the bulk encryption algorithm used by this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
  remarks: "A value of <xref:System.Security.Authentication.CipherAlgorithmType> is required for the CipherAlgorithm property when the <xref:System.Net.Security.EncryptionPolicy> enumeration value is used to construct a <xref:System.Net.Security.SslStream> instance.       [!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)] and [!INCLUDE[winxp](~/add/includes/winxp-md.md)] do not support the <xref:System.Security.Authentication.CipherAlgorithmType> value. So even if the <xref:System.Security.Authentication.CipherAlgorithmType> value is used to construct the <xref:System.Net.Security.SslStream> instance, the <xref:System.Net.Security.EncryptionPolicy> property will be <xref:System.Security.Authentication.CipherAlgorithmType>. The <xref:System.Security.Authentication.CipherAlgorithmType> value is only returned on Windows Vista and later."
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_10_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_10_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }
    return:
      type: System.Security.Authentication.CipherAlgorithmType
      description: "A <xref:System.Security.Authentication.CipherAlgorithmType> value."
  overload: System.Net.Security.SslStream.CipherAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The CipherAlgorithm property was accessed before the completion of the authentication process or the authentication process failed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.CipherStrength
  id: CipherStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
  fullName: System.Net.Security.SslStream.CipherStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a value that identifies the strength of the cipher algorithm used by this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
  remarks: "The value of this property is zero until the authentication occurs.       This property returns one of the following values:      -   0      -   40      -   56      -   80      -   128      -   168      -   192      -   256"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_6_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_6_1.cs)]"
  syntax:
    content: public virtual int CipherStrength { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> value that specifies the strength of the algorithm, in bits."
  overload: System.Net.Security.SslStream.CipherStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SslStream.Dispose(Boolean)
  fullName: System.Net.Security.SslStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Net.Security.SslStream&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.SslStream> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Net.Security.SslStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ends a pending asynchronous server authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>."
  remarks: "If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> methods."
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>."
  overload: System.Net.Security.SslStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is no pending server authentication to complete."
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ends a pending asynchronous client authentication operation started with a previous call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>."
  remarks: "If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.SslStream.IsEncrypted%2A> and <xref:System.Net.Security.SslStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.SslStream>. Check the <xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive a <xref:System.Security.Authentication.AuthenticationException>, and this <xref:System.Net.Security.SslStream> is no longer useable. You should close this object and remove all references to it so that it can be collected by the garbage collector.       To perform this operation synchronously, use one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> method."
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>."
  overload: System.Net.Security.SslStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "The authentication failed and left this object in an unusable state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is no pending client authentication to complete."
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: SslStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ends an asynchronous read operation started with a previous call to <xref:System.Net.Security.SslStream.BeginRead*>."
  remarks: "If the operation has not completed, this method blocks until it does.       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Read%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."
  example:
  - "The following code example demonstrates ending an asynchronous read operation.  \n  \n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/m-system.net.security.ss_0_1.cpp)]\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/m-system.net.security.ss_0_1.cs)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginRead*>"
    return:
      type: System.Int32
      description: "A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream."
  overload: System.Net.Security.SslStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginRead*>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: SslStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ends an asynchronous write operation started with a previous call to <xref:System.Net.Security.SslStream.BeginWrite*>."
  remarks: "If the operation has not completed, this method blocks until it does.       An application cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation synchronously, use the <xref:System.Net.Security.SslStream.Write%2A> method."
  example:
  - "The following code example demonstrates ending an asynchronous write operation.  \n  \n [!code-cs[NclSslServerAsync#4](~/add/codesnippet/csharp/m-system.net.security.ss_1_1.cs)]\n [!code-cpp[NclSslServerAsync#4](~/add/codesnippet/cpp/m-system.net.security.ss_1_1.cpp)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.SslStream.BeginWrite*>"
  overload: System.Net.Security.SslStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.SslStream.BeginWrite*>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.Flush
  id: Flush
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Flush()
  nameWithType: SslStream.Flush()
  fullName: System.Net.Security.SslStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Causes any buffered data to be written to the underlying device."
  remarks: "This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream."
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NclSslClientSync#5](~/add/codesnippet/cpp/m-system.net.security.ss_4_1.cpp)]\n [!code-cs[NclSslClientSync#5](~/add/codesnippet/csharp/m-system.net.security.ss_4_1.cs)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.SslStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.HashAlgorithm
  id: HashAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
  fullName: System.Net.Security.SslStream.HashAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets the algorithm used for generating message authentication codes (MACs)."
  remarks: "Message authentication algorithms generate message hashes and signatures used to detect tampering and forgery."
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_9_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_9_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }
    return:
      type: System.Security.Authentication.HashAlgorithmType
      description: "A <xref:System.Security.Authentication.HashAlgorithmType> value."
  overload: System.Net.Security.SslStream.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The HashAlgorithm property was accessed before the completion of the authentication process or the authentication process failed."
  platform:
  - net462
- uid: System.Net.Security.SslStream.HashStrength
  id: HashStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: HashStrength
  nameWithType: SslStream.HashStrength
  fullName: System.Net.Security.SslStream.HashStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a value that identifies the strength of the hash algorithm used by this instance."
  remarks: "The value of this property is zero until the authentication occurs."
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_2_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_2_1.cs)]"
  syntax:
    content: public virtual int HashStrength { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.HashAlgorithmType> algorithm, in bits. Valid values are 128 or 160."
  overload: System.Net.Security.SslStream.HashStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
  fullName: System.Net.Security.SslStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether authentication was successful."
  remarks: "Clients authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_3_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_3_1.cs)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if successful authentication occurred; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
  fullName: System.Net.Security.SslStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> uses data encryption."
  remarks: "Encryption helps to protect the privacy of the data, namely it helps to ensure that while data is in transit, it cannot be deciphered by third parties."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_0_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_0_1.cs)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether both server and client have been authenticated."
  remarks: "Mutual authentication is specified by the server when the server wants the client to provide a certificate for authentication."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_11_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_11_1.cs)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the server has been authenticated; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsServer
  id: IsServer
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsServer
  nameWithType: SslStream.IsServer
  fullName: System.Net.Security.SslStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the local side of the connection used by this <xref href=&quot;System.Net.Security.SslStream&quot;></xref> was authenticated as the server."
  remarks: "If authentication failed or did not occur, this property returns `false`.       To authenticate as the server, call the <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_13_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_13_1.cs)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: SslStream.IsSigned
  fullName: System.Net.Security.SslStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed."
  remarks: "Data signing helps to protect the integrity of the data, namely it helps the recipient determine whether the data has been tampered with while in transit."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_19_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_19_1.cs)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the data is signed before being transmitted; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Security.SslStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets the key exchange algorithm used by this <xref href=&quot;System.Net.Security.SslStream&quot;></xref>."
  remarks: "The value of this property is <xref:System.Security.Authentication.ExchangeAlgorithmType> until the authentication occurs.       The key exchange algorithm protects information used to generate shared keys."
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_16_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_16_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
    return:
      type: System.Security.Authentication.ExchangeAlgorithmType
      description: "An <xref:System.Security.Authentication.ExchangeAlgorithmType> value."
  overload: System.Net.Security.SslStream.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.KeyExchangeStrength
  id: KeyExchangeStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
  fullName: System.Net.Security.SslStream.KeyExchangeStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a value that identifies the strength of the key exchange algorithm used by this instance."
  remarks: "The value of this property is zero until the authentication occurs.       In common scenarios, the value of this property is one of the following:      -   512      -   768      -   1024      -   2048"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_5_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_5_1.cs)]"
  syntax:
    content: public virtual int KeyExchangeStrength { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> value that specifies the strength of the <xref:System.Security.Authentication.ExchangeAlgorithmType> algorithm, in bits."
  overload: System.Net.Security.SslStream.KeyExchangeStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Length
  id: Length
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Length
  nameWithType: SslStream.Length
  fullName: System.Net.Security.SslStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets the length of the underlying stream."
  remarks: "This property returns the value returned by invoking <xref:System.IO.Stream.Length%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown."
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>.       The length of the underlying stream."
  overload: System.Net.Security.SslStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Getting the value of this property is not supported when the underlying stream is a <xref href=&quot;System.Net.Sockets.NetworkStream&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.LocalCertificate
  id: LocalCertificate
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
  fullName: System.Net.Security.SslStream.LocalCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets the certificate used to authenticate the local endpoint."
  remarks: ''
  example:
  - "The following code example demonstrates displaying the certificate returned by this property.  \n  \n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_1_1.cpp)]\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_1_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "An X509Certificate object that represents the certificate supplied for authentication or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no certificate was supplied."
  overload: System.Net.Security.SslStream.LocalCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication failed or has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.Position
  id: Position
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Position
  nameWithType: SslStream.Position
  fullName: System.Net.Security.SslStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets or sets the current position in the underlying stream."
  remarks: "This property returns the value returned by invoking <xref:System.IO.Stream.Position%2A> on the underlying stream. If the underlying stream is not seekable, this method typically throws an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>.       The current position in the underlying stream."
  overload: System.Net.Security.SslStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.       -or-       Getting the value of this property is not supported when the underlying stream is a <xref href=&quot;System.Net.Sockets.NetworkStream&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: SslStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Reads data from this stream and stores it in the specified array."
  remarks: "The method reads a maximum of `count` bytes from the stream and stores them in `buffer` beginning at `offset`. You cannot perform multiple simultaneous read operations.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation asynchronously, use the <xref:System.Net.Security.SslStream.BeginRead%2A> method."
  example:
  - "The following code example demonstrates reading from an <xref:System.Net.Security.SslStream>.  \n  \n [!code-cpp[NclSslClientSync#6](~/add/codesnippet/cpp/m-system.net.security.ss_2_1.cpp)]\n [!code-cs[NclSslClientSync#6](~/add/codesnippet/csharp/m-system.net.security.ss_2_1.cs)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte> array that receives the bytes read from this stream."
    - id: offset
      type: System.Int32
      description: "A <xref:System.Int32> that contains the zero-based location in `buffer` at which to begin storing the data read from this stream."
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32> that contains the maximum number of bytes to read from this stream."
    return:
      type: System.Int32
      description: "A <xref:System.Int32> value that specifies the number of bytes read. When there is no more data to be read, returns 0."
  overload: System.Net.Security.SslStream.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed. Check the inner exception, if present to determine the cause of the failure."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "There is already a read operation in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
  fullName: System.Net.Security.SslStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets or sets the amount of time a read operation blocks waiting for data."
  remarks: "This property returns the value returned by invoking <xref:System.IO.Stream.ReadTimeout%2A> on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not timeout."
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_18_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_18_1.cs)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous read operation fails."
  overload: System.Net.Security.SslStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.RemoteCertificate
  id: RemoteCertificate
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
  fullName: System.Net.Security.SslStream.RemoteCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets the certificate used to authenticate the remote endpoint."
  remarks: ''
  example:
  - "The following code example demonstrates displaying the certificate returned by this property.  \n  \n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_15_1.cpp)]\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_15_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "An X509Certificate object that represents the certificate supplied for authentication or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no certificate was supplied."
  overload: System.Net.Security.SslStream.RemoteCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication failed or has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: SslStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Throws a <xref:System.NotSupportedException>."
  remarks: "Do not call this method. It is inherited, but is not supported by the <xref:System.Net.Security.SslStream> class."
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "This value is ignored."
    - id: origin
      type: System.IO.SeekOrigin
      description: "This value is ignored."
    return:
      type: System.Int64
      description: "Always throws a <xref:System.NotSupportedException>."
  overload: System.Net.Security.SslStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Seeking is not supported by <xref href=&quot;System.Net.Security.SslStream&quot;></xref> objects."
  platform:
  - net462
- uid: System.Net.Security.SslStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: SslStream.SetLength(Int64)
  fullName: System.Net.Security.SslStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Sets the length of the underlying stream."
  remarks: "This method invokes <xref:System.IO.Stream.SetLength%2A?displayProperty=fullName> on the underlying stream specified when this <xref:System.Net.Security.SslStream> was created."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "An <xref:System.Int64> value that specifies the length of the stream."
  overload: System.Net.Security.SslStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.SslProtocol
  id: SslProtocol
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
  fullName: System.Net.Security.SslStream.SslProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets a value that indicates the security protocol used to authenticate this connection."
  remarks: "The supported security protocols are specified when the <xref:System.Net.Security.SslStream> is created. If no security protocol was passed to the constructor, the instance is created using <xref:System.Security.Authentication.SslProtocols>. The actual protocol used for authentication is selected based on the protocols supported by the client and server."
  example:
  - "The following example displays the security properties of the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_7_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_7_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.SslProtocols SslProtocol { get; }
    return:
      type: System.Security.Authentication.SslProtocols
      description: "The <xref:System.Security.Authentication.SslProtocols> value that represents the protocol used for authentication."
  overload: System.Net.Security.SslStream.SslProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.TransportContext
  id: TransportContext
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: TransportContext
  nameWithType: SslStream.TransportContext
  fullName: System.Net.Security.SslStream.TransportContext
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets the <xref:System.Net.TransportContext> used for authentication using extended protection."
  syntax:
    content: public System.Net.TransportContext TransportContext { get; }
    return:
      type: System.Net.TransportContext
      description: "The <xref:System.Net.TransportContext> object that contains the channel binding token (CBT) used for extended protection."
  overload: System.Net.Security.SslStream.TransportContext*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Write(System.Byte[])
  id: Write(System.Byte[])
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Write(Byte[])
  nameWithType: SslStream.Write(Byte[])
  fullName: System.Net.Security.SslStream.Write(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Writes the specified data to this stream."
  remarks: "This method blocks while the operation completes. To prevent blocking while the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations."
  example:
  - "The following code example demonstrates writing to an authenticated <xref:System.Net.Security.SslStream>.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_3_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_3_1.cs)]"
  syntax:
    content: public void Write (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte> array that supplies the bytes written to the stream."
  overload: System.Net.Security.SslStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "There is already a write operation in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: SslStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset."
  remarks: "This method blocks while the operation completes. To prevent blocking while the operation completes the operation completes, use the <xref:System.Net.Security.SslStream.BeginWrite%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate call one of the <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>, or <xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>, <xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.SslStream> class does not support multiple simultaneous write operations."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A <xref:System.Byte> array that supplies the bytes written to the stream."
    - id: offset
      type: System.Int32
      description: "A <xref:System.Int32> that contains the zero-based location in `buffer` at which to begin reading bytes to be written to the stream."
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32> that contains the number of bytes to read from `buffer`."
  overload: System.Net.Security.SslStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code> &gt; the length of <code>buffer</code>.       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "There is already a write operation in progress."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "This object has been closed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has not occurred."
  platform:
  - net462
- uid: System.Net.Security.SslStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
  fullName: System.Net.Security.SslStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gets or sets the amount of time a write operation blocks waiting for data."
  remarks: "This property returns the value returned by invoking <xref:System.IO.Stream.WriteTimeout%2A> on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not timeout."
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_12_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_12_1.cs)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32> that specifies the amount of time that elapses before a synchronous write operation fails."
  overload: System.Net.Security.SslStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream)
  nameWithType: SslStream.SslStream(Stream)
  fullName: System.Net.Security.SslStream.SslStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean)
  nameWithType: SslStream.SslStream(Stream,Boolean)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
- uid: System.Net.Security.LocalCertificateSelectionCallback
  parent: System.Net.Security
  isExternal: false
  name: LocalCertificateSelectionCallback
  nameWithType: LocalCertificateSelectionCallback
  fullName: System.Net.Security.LocalCertificateSelectionCallback
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient(String)
  nameWithType: SslStream.AuthenticateAsClient(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Security.Authentication.SslProtocols
  parent: System.Security.Authentication
  isExternal: true
  name: SslProtocols
  nameWithType: SslProtocols
  fullName: System.Security.Authentication.SslProtocols
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync(String)
  nameWithType: SslStream.AuthenticateAsClientAsync(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.CanRead
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanRead
  nameWithType: SslStream.CanRead
  fullName: System.Net.Security.SslStream.CanRead
- uid: System.Net.Security.SslStream.CanSeek
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanSeek
  nameWithType: SslStream.CanSeek
  fullName: System.Net.Security.SslStream.CanSeek
- uid: System.Net.Security.SslStream.CanTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
  fullName: System.Net.Security.SslStream.CanTimeout
- uid: System.Net.Security.SslStream.CanWrite
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanWrite
  nameWithType: SslStream.CanWrite
  fullName: System.Net.Security.SslStream.CanWrite
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus
- uid: System.Net.Security.SslStream.CipherAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
  fullName: System.Net.Security.SslStream.CipherAlgorithm
- uid: System.Security.Authentication.CipherAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: CipherAlgorithmType
  nameWithType: CipherAlgorithmType
  fullName: System.Security.Authentication.CipherAlgorithmType
- uid: System.Net.Security.SslStream.CipherStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
  fullName: System.Net.Security.SslStream.CipherStrength
- uid: System.Net.Security.SslStream.Dispose(System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SslStream.Dispose(Boolean)
  fullName: System.Net.Security.SslStream.Dispose(Boolean)
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: SslStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)
- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: SslStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.SslStream.Flush
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Flush()
  nameWithType: SslStream.Flush()
  fullName: System.Net.Security.SslStream.Flush()
- uid: System.Net.Security.SslStream.HashAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
  fullName: System.Net.Security.SslStream.HashAlgorithm
- uid: System.Security.Authentication.HashAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: HashAlgorithmType
  nameWithType: HashAlgorithmType
  fullName: System.Security.Authentication.HashAlgorithmType
- uid: System.Net.Security.SslStream.HashStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashStrength
  nameWithType: SslStream.HashStrength
  fullName: System.Net.Security.SslStream.HashStrength
- uid: System.Net.Security.SslStream.IsAuthenticated
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
  fullName: System.Net.Security.SslStream.IsAuthenticated
- uid: System.Net.Security.SslStream.IsEncrypted
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
  fullName: System.Net.Security.SslStream.IsEncrypted
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated
- uid: System.Net.Security.SslStream.IsServer
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsServer
  nameWithType: SslStream.IsServer
  fullName: System.Net.Security.SslStream.IsServer
- uid: System.Net.Security.SslStream.IsSigned
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsSigned
  nameWithType: SslStream.IsSigned
  fullName: System.Net.Security.SslStream.IsSigned
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm
- uid: System.Security.Authentication.ExchangeAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: ExchangeAlgorithmType
  nameWithType: ExchangeAlgorithmType
  fullName: System.Security.Authentication.ExchangeAlgorithmType
- uid: System.Net.Security.SslStream.KeyExchangeStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
  fullName: System.Net.Security.SslStream.KeyExchangeStrength
- uid: System.Net.Security.SslStream.Length
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Length
  nameWithType: SslStream.Length
  fullName: System.Net.Security.SslStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.SslStream.LocalCertificate
  parent: System.Net.Security.SslStream
  isExternal: false
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
  fullName: System.Net.Security.SslStream.LocalCertificate
- uid: System.Net.Security.SslStream.Position
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Position
  nameWithType: SslStream.Position
  fullName: System.Net.Security.SslStream.Position
- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: SslStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.SslStream.ReadTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
  fullName: System.Net.Security.SslStream.ReadTimeout
- uid: System.Net.Security.SslStream.RemoteCertificate
  parent: System.Net.Security.SslStream
  isExternal: false
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
  fullName: System.Net.Security.SslStream.RemoteCertificate
- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: SslStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.SslStream.SetLength(System.Int64)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: SslStream.SetLength(Int64)
  fullName: System.Net.Security.SslStream.SetLength(Int64)
- uid: System.Net.Security.SslStream.SslProtocol
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
  fullName: System.Net.Security.SslStream.SslProtocol
- uid: System.Net.Security.SslStream.TransportContext
  parent: System.Net.Security.SslStream
  isExternal: false
  name: TransportContext
  nameWithType: SslStream.TransportContext
  fullName: System.Net.Security.SslStream.TransportContext
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Security.SslStream.Write(System.Byte[])
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write(Byte[])
  nameWithType: SslStream.Write(Byte[])
  fullName: System.Net.Security.SslStream.Write(Byte[])
- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: SslStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.SslStream.WriteTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
  fullName: System.Net.Security.SslStream.WriteTimeout
- uid: System.Net.Security.SslStream.#ctor*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream
  nameWithType: SslStream.SslStream
- uid: System.Net.Security.SslStream.AuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: SslStream.AuthenticateAsClient
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: SslStream.AuthenticateAsClientAsync
- uid: System.Net.Security.SslStream.AuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: SslStream.AuthenticateAsServer
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: SslStream.AuthenticateAsServerAsync
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: SslStream.BeginAuthenticateAsClient
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: SslStream.BeginAuthenticateAsServer
- uid: System.Net.Security.SslStream.BeginRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginRead
  nameWithType: SslStream.BeginRead
- uid: System.Net.Security.SslStream.BeginWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginWrite
  nameWithType: SslStream.BeginWrite
- uid: System.Net.Security.SslStream.CanRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanRead
  nameWithType: SslStream.CanRead
- uid: System.Net.Security.SslStream.CanSeek*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanSeek
  nameWithType: SslStream.CanSeek
- uid: System.Net.Security.SslStream.CanTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
- uid: System.Net.Security.SslStream.CanWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanWrite
  nameWithType: SslStream.CanWrite
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
- uid: System.Net.Security.SslStream.CipherAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
- uid: System.Net.Security.SslStream.CipherStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
- uid: System.Net.Security.SslStream.Dispose*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Dispose
  nameWithType: SslStream.Dispose
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: SslStream.EndAuthenticateAsClient
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: SslStream.EndAuthenticateAsServer
- uid: System.Net.Security.SslStream.EndRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndRead
  nameWithType: SslStream.EndRead
- uid: System.Net.Security.SslStream.EndWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndWrite
  nameWithType: SslStream.EndWrite
- uid: System.Net.Security.SslStream.Flush*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Flush
  nameWithType: SslStream.Flush
- uid: System.Net.Security.SslStream.HashAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
- uid: System.Net.Security.SslStream.HashStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashStrength
  nameWithType: SslStream.HashStrength
- uid: System.Net.Security.SslStream.IsAuthenticated*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
- uid: System.Net.Security.SslStream.IsEncrypted*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
- uid: System.Net.Security.SslStream.IsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsServer
  nameWithType: SslStream.IsServer
- uid: System.Net.Security.SslStream.IsSigned*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsSigned
  nameWithType: SslStream.IsSigned
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
- uid: System.Net.Security.SslStream.KeyExchangeStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
- uid: System.Net.Security.SslStream.Length*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Length
  nameWithType: SslStream.Length
- uid: System.Net.Security.SslStream.LocalCertificate*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
- uid: System.Net.Security.SslStream.Position*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Position
  nameWithType: SslStream.Position
- uid: System.Net.Security.SslStream.Read*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Read
  nameWithType: SslStream.Read
- uid: System.Net.Security.SslStream.ReadTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
- uid: System.Net.Security.SslStream.RemoteCertificate*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
- uid: System.Net.Security.SslStream.Seek*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Seek
  nameWithType: SslStream.Seek
- uid: System.Net.Security.SslStream.SetLength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SetLength
  nameWithType: SslStream.SetLength
- uid: System.Net.Security.SslStream.SslProtocol*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
- uid: System.Net.Security.SslStream.TransportContext*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: TransportContext
  nameWithType: SslStream.TransportContext
- uid: System.Net.Security.SslStream.Write*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write
  nameWithType: SslStream.Write
- uid: System.Net.Security.SslStream.WriteTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
