### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.IOrderedDictionary
  id: IOrderedDictionary
  children:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
  type: Interface
  summary: "Represents an indexed collection of key/value pairs."
  remarks: "IOrderedDictionary elements can be accessed either with the key or with the index.       Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> structure.       Each pair must have a unique key that is not `null`, but the value can be `null` and does not have to be unique. The IOrderedDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Because each element of the <xref:System.Collections.IDictionary> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>, as the following example shows.       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)]  [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)]  [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection."
  example:
  - "The following code example demonstrates the implementation of a simple IOrderedDictionary based on the <xref:System.Collections.ArrayList> class. The implemented IOrderedDictionary stores first names as the keys and last names as the values, with the added requirement that each first name is unique.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/cpp/t-system.collections.spe_7_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/csharp/t-system.collections.spe_7_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/visualbasic/t-system.collections.spe_7_2.vb)]"
  syntax:
    content: 'public interface IOrderedDictionary : System.Collections.IDictionary'
  implements:
  - System.Collections.IDictionary
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Returns an enumerator that iterates through the <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection."
  remarks: "[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_15_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_15_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_15_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the entire <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection."
  overload: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Inserts a key/value pair into the collection at the specified index."
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements.       If the `index` parameter is equal to <xref:System.Collections.ICollection.Count%2A>, the `value` parameter is added to the end of the <xref:System.Collections.Specialized.IOrderedDictionary> collection.       In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/36355794-2a11-4b04-824e-_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/36355794-2a11-4b04-824e-_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/36355794-2a11-4b04-824e-_1.vb)]"
  syntax:
    content: public void Insert (int index, object key, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which the key/value pair should be inserted."
    - id: key
      type: System.Object
      description: "The object to use as the key of the element to add."
    - id: value
      type: System.Object
      description: "The object to use as the value of the element to add.  The value can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.IOrderedDictionary.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.       -or-       <code>index</code> is greater than <xref:System.Collections.ICollection.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An element with the same key already exists in the <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection is read-only.       -or-       The <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection has a fixed size."
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets or sets the element at the specified index."
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary> accepts `null` as a valid value and allows duplicate elements.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       This property allows you to access a specific element in the collection by using the following syntax:       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)]  [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)]  [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/p-system.collections.spe_12_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/p-system.collections.spe_12_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/p-system.collections.spe_12_2.vb)]"
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the element to get or set."
    return:
      type: System.Object
      description: "The element at the specified index."
  overload: System.Collections.Specialized.IOrderedDictionary.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Removes the element at the specified index."
  remarks: "In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_23_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_23_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_23_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the element to remove."
  overload: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.       -or-       <code>index</code> is equal to or greater than <xref:System.Collections.ICollection.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection is read-only.       -or-       The <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> collection has a fixed size."
  platform:
  - net462
references:
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: IOrderedDictionary.GetEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert
  nameWithType: IOrderedDictionary.Insert
- uid: System.Collections.Specialized.IOrderedDictionary.Item*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item
  nameWithType: IOrderedDictionary.Item
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt
  nameWithType: IOrderedDictionary.RemoveAt
