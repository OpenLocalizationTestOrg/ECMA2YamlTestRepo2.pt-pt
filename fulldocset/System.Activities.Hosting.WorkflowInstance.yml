### YamlMime:ManagedReference
items:
- uid: System.Activities.Hosting.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)
  - System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)
  - System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.Hosting.WorkflowInstance.Controller
  - System.Activities.Hosting.WorkflowInstance.DefinitionIdentity
  - System.Activities.Hosting.WorkflowInstance.DisposeExtensions
  - System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)
  - System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)
  - System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  - System.Activities.Hosting.WorkflowInstance.GetExtension``1
  - System.Activities.Hosting.WorkflowInstance.GetExtensions``1
  - System.Activities.Hosting.WorkflowInstance.HostEnvironment
  - System.Activities.Hosting.WorkflowInstance.Id
  - System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)
  - System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})
  - System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  - System.Activities.Hosting.WorkflowInstance.IsReadOnly
  - System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)
  - System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)
  - System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)
  - System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})
  - System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)
  - System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)
  - System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)
  - System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)
  - System.Activities.Hosting.WorkflowInstance.OnNotifyPaused
  - System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)
  - System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)
  - System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)
  - System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys
  - System.Activities.Hosting.WorkflowInstance.SynchronizationContext
  - System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly
  - System.Activities.Hosting.WorkflowInstance.WorkflowDefinition
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Activities.Hosting.WorkflowInstance
  type: Class
  summary: "WorkflowInstance is a lightweight, per-instance runtime for executing a workflow program. It can be constructed to create a new workflow instance or from existing instance state. The APIs that <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> exposes are the minimal set of runtime controls from which higher level operations can be implemented. This API set represents the entire breadth of functionality of the runtime. WorkflowInstance is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions."
  remarks: "WorkflowInstance is single threaded and assumes that the host synchronizes all access to it. An attempt to call multiple APIs simultaneously will result in an <xref:System.InvalidOperationException> being thrown.       Internally, a WorkflowInstance has two states: Running and Paused. The only way to cause the runtime to transition from paused to running is to call <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>. All actions (except Pause) can only be taken while the runtime is Paused. The runtime will become spontaneously Paused in the following situations:      -   An error fatal to the runtime has occurred. The host will be signaled through <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> (which does not signal a transition to Paused) and then notified through <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A>.      -   An exception in the workflow was uncaught and escaped the root. The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException%2A> method.      -   The scheduler has run out of work items and is now <xref:System.Activities.Hosting.WorkflowInstanceState>. The host will be notified through the <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> method. Note that the scheduler could have run out of work items because the instance is idle or because the instance is complete. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to differentiate between the two.       The host can request a change from Running to Paused by calling the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> or <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable%2A> methods of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property. This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify* or <xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A> with a specific call to pause. In response to a pause request, the runtime may transition to Paused and call <xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A> while the scheduler still has pending work items. The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A> value of the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause.       The <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A> method of the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance returned by the <xref:System.Activities.Hosting.WorkflowInstance.Controller%2A> property is the only method which can be called while the WorkflowInstance is in the Running state. All other methods will throw an <xref:System.InvalidOperationException> if called.Given the rules for how WorkflowInstance transitions from one state to another, the public notion of Running and Paused can be defined as follows:      -   Running – The state between a call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A> and the next WorkflowInstance.OnNotify*.      -   Paused – The state between the last WorkflowInstance.OnNotify* and the next call to <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A>."
  syntax:
    content: public abstract class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)
  id: '#ctor(System.Activities.Activity)'
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: WorkflowInstance(Activity)
  nameWithType: WorkflowInstance.WorkflowInstance(Activity)
  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Initializes a new instance of the <xref href=&quot;System.Activities.Hosting.WorkflowInstance&quot;></xref> class with the specified workflow definition."
  syntax:
    content: protected WorkflowInstance (System.Activities.Activity workflowDefinition);
    parameters:
    - id: workflowDefinition
      type: System.Activities.Activity
      description: "The activity that defines the workflow."
  overload: System.Activities.Hosting.WorkflowInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)
  id: '#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)'
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: WorkflowInstance(Activity,WorkflowIdentity)
  nameWithType: WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)
  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Initializes a new instance of the <xref href=&quot;System.Activities.Hosting.WorkflowInstance&quot;></xref> class with the specified workflow definition and definition identity."
  syntax:
    content: protected WorkflowInstance (System.Activities.Activity workflowDefinition, System.Activities.WorkflowIdentity definitionIdentity);
    parameters:
    - id: workflowDefinition
      type: System.Activities.Activity
      description: "The activity that defines the workflow."
    - id: definitionIdentity
      type: System.Activities.WorkflowIdentity
      description: "The definition identity."
  overload: System.Activities.Hosting.WorkflowInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously."
  syntax:
    content: protected IAsyncResult BeginFlushTrackingRecords (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "The time period after which to abort the attempt."
    - id: callback
      type: System.AsyncCallback
      description: "The method to be called when the track operation has completed."
    - id: state
      type: System.Object
      description: "The information about the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "The status of the current track operation."
  overload: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.Controller
  id: Controller
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: Controller
  nameWithType: WorkflowInstance.Controller
  fullName: System.Activities.Hosting.WorkflowInstance.Controller
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets the <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> instance for this <xref href=&quot;System.Activities.Hosting.WorkflowInstance&quot;></xref>."
  syntax:
    content: protected System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl Controller { get; }
    return:
      type: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl
      description: "The controller instance for this workflow instance."
  overload: System.Activities.Hosting.WorkflowInstance.Controller*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity
  id: DefinitionIdentity
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: DefinitionIdentity
  nameWithType: WorkflowInstance.DefinitionIdentity
  fullName: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets or sets the definition identity of <xref href=&quot;System.Activities.Hosting.WorkflowInstance&quot;></xref>."
  syntax:
    content: public System.Activities.WorkflowIdentity DefinitionIdentity { get; }
    return:
      type: System.Activities.WorkflowIdentity
      description: "The definition identity of <xref href=&quot;System.Activities.Hosting.WorkflowInstance&quot;></xref>."
  overload: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.DisposeExtensions
  id: DisposeExtensions
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: DisposeExtensions()
  nameWithType: WorkflowInstance.DisposeExtensions()
  fullName: System.Activities.Hosting.WorkflowInstance.DisposeExtensions()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Calls <xref:System.Disposable.Dispose*> on all extensions that implement <xref:System.IDisposable>."
  syntax:
    content: protected void DisposeExtensions ();
    parameters: []
  overload: System.Activities.Hosting.WorkflowInstance.DisposeExtensions*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)
  id: EndFlushTrackingRecords(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: EndFlushTrackingRecords(IAsyncResult)
  nameWithType: WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to end the track operation."
  syntax:
    content: protected void EndFlushTrackingRecords (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "The status of the asynchronous track operation."
  overload: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)
  id: FlushTrackingRecords(System.TimeSpan)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: FlushTrackingRecords(TimeSpan)
  nameWithType: WorkflowInstance.FlushTrackingRecords(TimeSpan)
  fullName: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to send pending tracking records to tracking participants."
  syntax:
    content: protected void FlushTrackingRecords (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "The time period after which to abort the attempt."
  overload: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  id: GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)
  nameWithType: WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)
  fullName: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Retrieves the list of activity that is blocking the update of the workflow."
  syntax:
    content: protected static System.Collections.Generic.IList<System.Activities.DynamicUpdate.ActivityBlockingUpdate> GetActivitiesBlockingUpdate (object deserializedRuntimeState, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap);
    parameters:
    - id: deserializedRuntimeState
      type: System.Object
      description: "The deserialized runtime state."
    - id: updateMap
      type: System.Activities.DynamicUpdate.DynamicUpdateMap
      description: "The update map."
    return:
      type: System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}
      description: "The list of activity that is blocking the update."
  overload: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.GetExtension``1
  id: GetExtension``1
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: GetExtension()
  nameWithType: WorkflowInstance.GetExtension()
  fullName: System.Activities.Hosting.WorkflowInstance.GetExtension()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  syntax:
    content: 'protected T GetExtension<T> () where T : class;'
    parameters: []
    return:
      type: T
      description: "To be added."
  overload: System.Activities.Hosting.WorkflowInstance.GetExtension<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.GetExtensions``1
  id: GetExtensions``1
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: GetExtensions()
  nameWithType: WorkflowInstance.GetExtensions()
  fullName: System.Activities.Hosting.WorkflowInstance.GetExtensions()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  syntax:
    content: 'protected System.Collections.Generic.IEnumerable<T> GetExtensions<T> () where T : class;'
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{T}
      description: "To be added."
  overload: System.Activities.Hosting.WorkflowInstance.GetExtensions<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.HostEnvironment
  id: HostEnvironment
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: HostEnvironment
  nameWithType: WorkflowInstance.HostEnvironment
  fullName: System.Activities.Hosting.WorkflowInstance.HostEnvironment
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets or sets the root environment for the workflow instance’s arguments and variables."
  remarks: "If this property is set after the workflow instance is initialized and <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, an <xref:System.InvalidOperationException> is thrown."
  syntax:
    content: public System.Activities.LocationReferenceEnvironment HostEnvironment { get; set; }
    return:
      type: System.Activities.LocationReferenceEnvironment
      description: "The root environment for the workflow instance’s arguments and variables."
  overload: System.Activities.Hosting.WorkflowInstance.HostEnvironment*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.Id
  id: Id
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: Id
  nameWithType: WorkflowInstance.Id
  fullName: System.Activities.Hosting.WorkflowInstance.Id
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets the unique identifier for the workflow instance."
  syntax:
    content: public abstract Guid Id { get; }
    return:
      type: System.Guid
      description: "The unique identifier for the workflow instance."
  overload: System.Activities.Hosting.WorkflowInstance.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)
  id: Initialize(System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: Initialize(Object)
  nameWithType: WorkflowInstance.Initialize(Object)
  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the host to initialize the workflow instance with the workflow run-time state."
  syntax:
    content: protected void Initialize (object deserializedRuntimeState);
    parameters:
    - id: deserializedRuntimeState
      type: System.Object
      description: "The run-time state used to execute the workflow."
  overload: System.Activities.Hosting.WorkflowInstance.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})
  id: Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: Initialize(IDictionary<String,Object>,IList<Handle>)
  nameWithType: WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)
  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the host to initialize the workflow instance with the argument values and execution properties."
  syntax:
    content: protected void Initialize (System.Collections.Generic.IDictionary<string,object> workflowArgumentValues, System.Collections.Generic.IList<System.Activities.Handle> workflowExecutionProperties);
    parameters:
    - id: workflowArgumentValues
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "The input parameters to the workflow, keyed by argument name."
    - id: workflowExecutionProperties
      type: System.Collections.Generic.IList{System.Activities.Handle}
      description: "The list of workflow execution properties."
  overload: System.Activities.Hosting.WorkflowInstance.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  id: Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: Initialize(Object,DynamicUpdateMap)
  nameWithType: WorkflowInstance.Initialize(Object,DynamicUpdateMap)
  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object,DynamicUpdateMap)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the host to initialize the workflow instance with the workflow run-time state and update map."
  syntax:
    content: protected void Initialize (object deserializedRuntimeState, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap);
    parameters:
    - id: deserializedRuntimeState
      type: System.Object
      description: "The run-time state used to execute the workflow."
    - id: updateMap
      type: System.Activities.DynamicUpdate.DynamicUpdateMap
      description: "The update map."
  overload: System.Activities.Hosting.WorkflowInstance.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.IsReadOnly
  id: IsReadOnly
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: WorkflowInstance.IsReadOnly
  fullName: System.Activities.Hosting.WorkflowInstance.IsReadOnly
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets a value that indicates whether the workflow instance has been initialized."
  syntax:
    content: protected bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the workflow instance has been initialized; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Activities.Hosting.WorkflowInstance.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)
  id: OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that new instance keys should be associated with this instance."
  syntax:
    content: protected abstract IAsyncResult OnBeginAssociateKeys (System.Collections.Generic.ICollection<System.Runtime.DurableInstancing.InstanceKey> keys, AsyncCallback callback, object state);
    parameters:
    - id: keys
      type: System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey}
      description: "The instance keys to associate with this workflow instance."
    - id: callback
      type: System.AsyncCallback
      description: "The method to be called when the operation completes."
    - id: state
      type: System.Object
      description: "An optional application-specific object that contains information about the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "A reference to the asynchronous associate keys operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)
  id: OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnBeginFlushTrackingRecords(AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Asynchronous call to ask host to flush pending tracking records to tracking participants."
  syntax:
    content: protected virtual IAsyncResult OnBeginFlushTrackingRecords (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "The method to be called when the track operation has completed."
    - id: state
      type: System.Object
      description: "The information about the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "The status of the current track operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)
  id: OnBeginPersist(System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnBeginPersist(AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginPersist(AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Asynchronous call to ask the host to persist the workflow."
  syntax:
    content: protected abstract IAsyncResult OnBeginPersist (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "The method to be called when the persist operation has completed."
    - id: state
      type: System.Object
      description: "An optional application-specific object that contains information about the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "A reference to the current persist operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnBeginPersist*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that a resume bookmark operation is beginning."
  syntax:
    content: protected abstract IAsyncResult OnBeginResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: bookmark
      type: System.Activities.Bookmark
      description: "The bookmark to resume."
    - id: value
      type: System.Object
      description: "The data to be passed to the activity that created the <xref href=&quot;System.Activities.Bookmark&quot;></xref>."
    - id: timeout
      type: System.TimeSpan
      description: "The interval in which the resume operation must complete before the operation is canceled and a <xref:System.TimeoutException> is thrown."
    - id: callback
      type: System.AsyncCallback
      description: "The method to be called when the resume operation has completed."
    - id: state
      type: System.Object
      description: "An optional application-specific object that contains information about the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "A reference to the asynchronous resume operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})
  id: OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnDisassociateKeys(ICollection<InstanceKey>)
  nameWithType: WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)
  fullName: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance."
  syntax:
    content: protected abstract void OnDisassociateKeys (System.Collections.Generic.ICollection<System.Runtime.DurableInstancing.InstanceKey> keys);
    parameters:
    - id: keys
      type: System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey}
      description: "The list of keys to disassociate."
  overload: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)
  id: OnEndAssociateKeys(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnEndAssociateKeys(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndAssociateKeys(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that an associate keys operation is complete."
  syntax:
    content: protected abstract void OnEndAssociateKeys (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "The reference to the asynchronous associate keys operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)
  id: OnEndFlushTrackingRecords(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnEndFlushTrackingRecords(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host when the flush tracking records operation is complete."
  syntax:
    content: protected virtual void OnEndFlushTrackingRecords (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "The status of the asynchronous flush tracking records operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)
  id: OnEndPersist(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnEndPersist(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndPersist(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndPersist(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that a persist operation is complete."
  syntax:
    content: protected abstract void OnEndPersist (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "The reference to the asynchronous persist operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnEndPersist*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)
  id: OnEndResumeBookmark(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnEndResumeBookmark(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndResumeBookmark(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that a resume bookmark operation is complete."
  syntax:
    content: protected abstract System.Activities.BookmarkResumptionResult OnEndResumeBookmark (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "The reference to the asynchronous resume bookmark operation."
    return:
      type: System.Activities.BookmarkResumptionResult
      description: "One of the enumeration values that indicates the result of a <xref href=&quot;System.Activities.Bookmark&quot;></xref> resume operation."
  overload: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused
  id: OnNotifyPaused
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnNotifyPaused()
  nameWithType: WorkflowInstance.OnNotifyPaused()
  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state."
  syntax:
    content: protected abstract void OnNotifyPaused ();
    parameters: []
  overload: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)
  id: OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnNotifyUnhandledException(Exception,Activity,String)
  nameWithType: WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)
  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance."
  syntax:
    content: protected abstract void OnNotifyUnhandledException (Exception exception, System.Activities.Activity source, string sourceInstanceId);
    parameters:
    - id: exception
      type: System.Exception
      description: "The unhandled exception."
    - id: source
      type: System.Activities.Activity
      description: "The activity that threw the exception."
    - id: sourceInstanceId
      type: System.String
      description: "The unique identifier of the <xref href=&quot;System.Activities.ActivityInstance&quot;></xref> representing the activity that threw the exception."
  overload: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)
  id: OnRequestAbort(System.Exception)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: OnRequestAbort(Exception)
  nameWithType: WorkflowInstance.OnRequestAbort(Exception)
  fullName: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(Exception)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance."
  remarks: "Once OnRequestAbort is called, most <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl> APIs except <xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A> will throw an <xref:System.InvalidOperationException>. It is expected that after OnRequestAbort is called a host will trend toward a state in which it can satisfy the abort."
  syntax:
    content: protected abstract void OnRequestAbort (Exception reason);
    parameters:
    - id: reason
      type: System.Exception
      description: "The reason for aborting the workflow instance."
  overload: System.Activities.Hosting.WorkflowInstance.OnRequestAbort*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)
  id: RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: RegisterExtensionManager(WorkflowInstanceExtensionManager)
  nameWithType: WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)
  fullName: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used."
  remarks: "Extensions are keyed by type, and a host provided extension will always be used if provided. Extensions added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the runtime type of the object as the type key. Extensions providers added through <xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A> use the decared type T of the Func\\<T> as the type key. Extension providers contributed by activities through the various *ActivityMetadata.AddDefaultExtensionProvider methods are dropped if a host extension exists for the declared type or if there is a broader type provided through AddDefaultExtensionProvider (ex. if Func\\<StreamWriter> is provided and Func\\<TextWriter> is provided, only Func\\<StreamWriter> will be kept). If an extension does not exist in the collection that is required by an activity (expressed by calling \\*ActivityMetadata.RequireExtension) a <xref:System.Activities.ValidationException> is thrown."
  syntax:
    content: protected void RegisterExtensionManager (System.Activities.Hosting.WorkflowInstanceExtensionManager extensionManager);
    parameters:
    - id: extensionManager
      type: System.Activities.Hosting.WorkflowInstanceExtensionManager
      description: "The extension manager to register."
  overload: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys
  id: SupportsInstanceKeys
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: SupportsInstanceKeys
  nameWithType: WorkflowInstance.SupportsInstanceKeys
  fullName: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets a value that indicates whether the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a run-time instance."
  syntax:
    content: protected abstract bool SupportsInstanceKeys { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the host supports the association of <xref:System.Runtime.Persistence.InstanceView.InstanceKeys*> with a workflow instance; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.SynchronizationContext
  id: SynchronizationContext
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: SynchronizationContext
  nameWithType: WorkflowInstance.SynchronizationContext
  fullName: System.Activities.Hosting.WorkflowInstance.SynchronizationContext
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets or sets the <xref:System.Threading.SynchronizationContext> used for scheduling the workflow instance."
  remarks: "If this property is set after the workflow instance is initialized and <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, an <xref:System.InvalidOperationException> is thrown."
  syntax:
    content: public System.Threading.SynchronizationContext SynchronizationContext { get; set; }
    return:
      type: System.Threading.SynchronizationContext
      description: "The synchronization context used for scheduling the workflow instance."
  overload: System.Activities.Hosting.WorkflowInstance.SynchronizationContext*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly
  id: ThrowIfReadOnly
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: ThrowIfReadOnly()
  nameWithType: WorkflowInstance.ThrowIfReadOnly()
  fullName: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Throws an <xref:System.InvalidOperationException> if the workflow instance has been initialized, as determined by <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly*>."
  remarks: "If <xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A> returns `true`, then an <xref:System.InvalidOperationException> is thrown."
  syntax:
    content: protected void ThrowIfReadOnly ();
    parameters: []
  overload: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition
  id: WorkflowDefinition
  parent: System.Activities.Hosting.WorkflowInstance
  langs:
  - csharp
  name: WorkflowDefinition
  nameWithType: WorkflowInstance.WorkflowDefinition
  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Hosting
  summary: "Gets the workflow definition of the workflow instance."
  syntax:
    content: public System.Activities.Activity WorkflowDefinition { get; }
    return:
      type: System.Activities.Activity
      description: "The workflow definition of the workflow instance."
  overload: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: WorkflowInstance(Activity)
  nameWithType: WorkflowInstance.WorkflowInstance(Activity)
  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity)
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.Activities.Hosting.WorkflowInstance.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: WorkflowInstance(Activity,WorkflowIdentity)
  nameWithType: WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)
  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowInstance(Activity,WorkflowIdentity)
- uid: System.Activities.WorkflowIdentity
  parent: System.Activities
  isExternal: false
  name: WorkflowIdentity
  nameWithType: WorkflowIdentity
  fullName: System.Activities.WorkflowIdentity
- uid: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords(TimeSpan,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Activities.Hosting.WorkflowInstance.Controller
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Controller
  nameWithType: WorkflowInstance.Controller
  fullName: System.Activities.Hosting.WorkflowInstance.Controller
- uid: System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl
  parent: System.Activities.Hosting
  isExternal: false
  name: WorkflowInstance+WorkflowInstanceControl
  nameWithType: WorkflowInstance+WorkflowInstanceControl
  fullName: System.Activities.Hosting.WorkflowInstance+WorkflowInstanceControl
- uid: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: DefinitionIdentity
  nameWithType: WorkflowInstance.DefinitionIdentity
  fullName: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity
- uid: System.Activities.Hosting.WorkflowInstance.DisposeExtensions
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: DisposeExtensions()
  nameWithType: WorkflowInstance.DisposeExtensions()
  fullName: System.Activities.Hosting.WorkflowInstance.DisposeExtensions()
- uid: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: EndFlushTrackingRecords(IAsyncResult)
  nameWithType: WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords(IAsyncResult)
- uid: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(System.TimeSpan)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: FlushTrackingRecords(TimeSpan)
  nameWithType: WorkflowInstance.FlushTrackingRecords(TimeSpan)
  fullName: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords(TimeSpan)
- uid: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)
  nameWithType: WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)
  fullName: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate(Object,DynamicUpdateMap)
- uid: System.Collections.Generic.IList{System.Activities.DynamicUpdate.ActivityBlockingUpdate}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ActivityBlockingUpdate>
  nameWithType: IList<ActivityBlockingUpdate>
  fullName: System.Collections.Generic.IList<System.Activities.DynamicUpdate.ActivityBlockingUpdate>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Activities.DynamicUpdate.ActivityBlockingUpdate>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.DynamicUpdate.ActivityBlockingUpdate
    name: ActivityBlockingUpdate
    nameWithType: ActivityBlockingUpdate
    fullName: ActivityBlockingUpdate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.DynamicUpdate.DynamicUpdateMap
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: DynamicUpdateMap
  nameWithType: DynamicUpdateMap
  fullName: System.Activities.DynamicUpdate.DynamicUpdateMap
- uid: System.Activities.Hosting.WorkflowInstance.GetExtension``1
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: GetExtension()
  nameWithType: WorkflowInstance.GetExtension()
  fullName: System.Activities.Hosting.WorkflowInstance.GetExtension()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Activities.Hosting.WorkflowInstance.GetExtensions``1
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: GetExtensions()
  nameWithType: WorkflowInstance.GetExtensions()
  fullName: System.Activities.Hosting.WorkflowInstance.GetExtensions()
- uid: System.Collections.Generic.IEnumerable{T}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Hosting.WorkflowInstance.HostEnvironment
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: HostEnvironment
  nameWithType: WorkflowInstance.HostEnvironment
  fullName: System.Activities.Hosting.WorkflowInstance.HostEnvironment
- uid: System.Activities.LocationReferenceEnvironment
  parent: System.Activities
  isExternal: false
  name: LocationReferenceEnvironment
  nameWithType: LocationReferenceEnvironment
  fullName: System.Activities.LocationReferenceEnvironment
- uid: System.Activities.Hosting.WorkflowInstance.Id
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Id
  nameWithType: WorkflowInstance.Id
  fullName: System.Activities.Hosting.WorkflowInstance.Id
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Initialize(Object)
  nameWithType: WorkflowInstance.Initialize(Object)
  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object)
- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.Activities.Handle})
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Initialize(IDictionary<String,Object>,IList<Handle>)
  nameWithType: WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)
  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(IDictionary<String,Object>,IList<Handle>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IList{System.Activities.Handle}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<Handle>
  nameWithType: IList<Handle>
  fullName: System.Collections.Generic.IList<System.Activities.Handle>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Activities.Handle>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Handle
    name: Handle
    nameWithType: Handle
    fullName: Handle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Hosting.WorkflowInstance.Initialize(System.Object,System.Activities.DynamicUpdate.DynamicUpdateMap)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Initialize(Object,DynamicUpdateMap)
  nameWithType: WorkflowInstance.Initialize(Object,DynamicUpdateMap)
  fullName: System.Activities.Hosting.WorkflowInstance.Initialize(Object,DynamicUpdateMap)
- uid: System.Activities.Hosting.WorkflowInstance.IsReadOnly
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: IsReadOnly
  nameWithType: WorkflowInstance.IsReadOnly
  fullName: System.Activities.Hosting.WorkflowInstance.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys(ICollection<InstanceKey>,AsyncCallback,Object)
- uid: System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<InstanceKey>
  nameWithType: ICollection<InstanceKey>
  fullName: System.Collections.Generic.ICollection<System.Runtime.DurableInstancing.InstanceKey>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Runtime.DurableInstancing.InstanceKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Runtime.DurableInstancing.InstanceKey
    name: InstanceKey
    nameWithType: InstanceKey
    fullName: InstanceKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginFlushTrackingRecords(AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords(AsyncCallback,Object)
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginPersist(AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginPersist(AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginPersist(AsyncCallback,Object)
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark(Bookmark,Object,TimeSpan,AsyncCallback,Object)
- uid: System.Activities.Bookmark
  parent: System.Activities
  isExternal: false
  name: Bookmark
  nameWithType: Bookmark
  fullName: System.Activities.Bookmark
- uid: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnDisassociateKeys(ICollection<InstanceKey>)
  nameWithType: WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)
  fullName: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys(ICollection<InstanceKey>)
- uid: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndAssociateKeys(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndAssociateKeys(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys(IAsyncResult)
- uid: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndFlushTrackingRecords(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords(IAsyncResult)
- uid: System.Activities.Hosting.WorkflowInstance.OnEndPersist(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndPersist(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndPersist(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndPersist(IAsyncResult)
- uid: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(System.IAsyncResult)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndResumeBookmark(IAsyncResult)
  nameWithType: WorkflowInstance.OnEndResumeBookmark(IAsyncResult)
  fullName: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark(IAsyncResult)
- uid: System.Activities.BookmarkResumptionResult
  parent: System.Activities
  isExternal: false
  name: BookmarkResumptionResult
  nameWithType: BookmarkResumptionResult
  fullName: System.Activities.BookmarkResumptionResult
- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnNotifyPaused()
  nameWithType: WorkflowInstance.OnNotifyPaused()
  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused()
- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnNotifyUnhandledException(Exception,Activity,String)
  nameWithType: WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)
  fullName: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException(Exception,Activity,String)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(System.Exception)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnRequestAbort(Exception)
  nameWithType: WorkflowInstance.OnRequestAbort(Exception)
  fullName: System.Activities.Hosting.WorkflowInstance.OnRequestAbort(Exception)
- uid: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(System.Activities.Hosting.WorkflowInstanceExtensionManager)
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: RegisterExtensionManager(WorkflowInstanceExtensionManager)
  nameWithType: WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)
  fullName: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager(WorkflowInstanceExtensionManager)
- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager
  parent: System.Activities.Hosting
  isExternal: false
  name: WorkflowInstanceExtensionManager
  nameWithType: WorkflowInstanceExtensionManager
  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager
- uid: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: SupportsInstanceKeys
  nameWithType: WorkflowInstance.SupportsInstanceKeys
  fullName: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys
- uid: System.Activities.Hosting.WorkflowInstance.SynchronizationContext
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: SynchronizationContext
  nameWithType: WorkflowInstance.SynchronizationContext
  fullName: System.Activities.Hosting.WorkflowInstance.SynchronizationContext
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: true
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: ThrowIfReadOnly()
  nameWithType: WorkflowInstance.ThrowIfReadOnly()
  fullName: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly()
- uid: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: WorkflowDefinition
  nameWithType: WorkflowInstance.WorkflowDefinition
  fullName: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition
- uid: System.Activities.Hosting.WorkflowInstance.#ctor*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: WorkflowInstance
  nameWithType: WorkflowInstance.WorkflowInstance
- uid: System.Activities.Hosting.WorkflowInstance.BeginFlushTrackingRecords*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: BeginFlushTrackingRecords
  nameWithType: WorkflowInstance.BeginFlushTrackingRecords
- uid: System.Activities.Hosting.WorkflowInstance.Controller*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Controller
  nameWithType: WorkflowInstance.Controller
- uid: System.Activities.Hosting.WorkflowInstance.DefinitionIdentity*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: DefinitionIdentity
  nameWithType: WorkflowInstance.DefinitionIdentity
- uid: System.Activities.Hosting.WorkflowInstance.DisposeExtensions*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: DisposeExtensions
  nameWithType: WorkflowInstance.DisposeExtensions
- uid: System.Activities.Hosting.WorkflowInstance.EndFlushTrackingRecords*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: EndFlushTrackingRecords
  nameWithType: WorkflowInstance.EndFlushTrackingRecords
- uid: System.Activities.Hosting.WorkflowInstance.FlushTrackingRecords*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: FlushTrackingRecords
  nameWithType: WorkflowInstance.FlushTrackingRecords
- uid: System.Activities.Hosting.WorkflowInstance.GetActivitiesBlockingUpdate*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: GetActivitiesBlockingUpdate
  nameWithType: WorkflowInstance.GetActivitiesBlockingUpdate
- uid: System.Activities.Hosting.WorkflowInstance.GetExtension<T>*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: GetExtension<T>
  nameWithType: WorkflowInstance.GetExtension<T>
- uid: System.Activities.Hosting.WorkflowInstance.GetExtensions<T>*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: GetExtensions<T>
  nameWithType: WorkflowInstance.GetExtensions<T>
- uid: System.Activities.Hosting.WorkflowInstance.HostEnvironment*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: HostEnvironment
  nameWithType: WorkflowInstance.HostEnvironment
- uid: System.Activities.Hosting.WorkflowInstance.Id*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Id
  nameWithType: WorkflowInstance.Id
- uid: System.Activities.Hosting.WorkflowInstance.Initialize*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: Initialize
  nameWithType: WorkflowInstance.Initialize
- uid: System.Activities.Hosting.WorkflowInstance.IsReadOnly*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: IsReadOnly
  nameWithType: WorkflowInstance.IsReadOnly
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginAssociateKeys*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginAssociateKeys
  nameWithType: WorkflowInstance.OnBeginAssociateKeys
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginFlushTrackingRecords*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginFlushTrackingRecords
  nameWithType: WorkflowInstance.OnBeginFlushTrackingRecords
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginPersist*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginPersist
  nameWithType: WorkflowInstance.OnBeginPersist
- uid: System.Activities.Hosting.WorkflowInstance.OnBeginResumeBookmark*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnBeginResumeBookmark
  nameWithType: WorkflowInstance.OnBeginResumeBookmark
- uid: System.Activities.Hosting.WorkflowInstance.OnDisassociateKeys*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnDisassociateKeys
  nameWithType: WorkflowInstance.OnDisassociateKeys
- uid: System.Activities.Hosting.WorkflowInstance.OnEndAssociateKeys*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndAssociateKeys
  nameWithType: WorkflowInstance.OnEndAssociateKeys
- uid: System.Activities.Hosting.WorkflowInstance.OnEndFlushTrackingRecords*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndFlushTrackingRecords
  nameWithType: WorkflowInstance.OnEndFlushTrackingRecords
- uid: System.Activities.Hosting.WorkflowInstance.OnEndPersist*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndPersist
  nameWithType: WorkflowInstance.OnEndPersist
- uid: System.Activities.Hosting.WorkflowInstance.OnEndResumeBookmark*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnEndResumeBookmark
  nameWithType: WorkflowInstance.OnEndResumeBookmark
- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyPaused*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnNotifyPaused
  nameWithType: WorkflowInstance.OnNotifyPaused
- uid: System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnNotifyUnhandledException
  nameWithType: WorkflowInstance.OnNotifyUnhandledException
- uid: System.Activities.Hosting.WorkflowInstance.OnRequestAbort*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: OnRequestAbort
  nameWithType: WorkflowInstance.OnRequestAbort
- uid: System.Activities.Hosting.WorkflowInstance.RegisterExtensionManager*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: RegisterExtensionManager
  nameWithType: WorkflowInstance.RegisterExtensionManager
- uid: System.Activities.Hosting.WorkflowInstance.SupportsInstanceKeys*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: SupportsInstanceKeys
  nameWithType: WorkflowInstance.SupportsInstanceKeys
- uid: System.Activities.Hosting.WorkflowInstance.SynchronizationContext*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: SynchronizationContext
  nameWithType: WorkflowInstance.SynchronizationContext
- uid: System.Activities.Hosting.WorkflowInstance.ThrowIfReadOnly*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: ThrowIfReadOnly
  nameWithType: WorkflowInstance.ThrowIfReadOnly
- uid: System.Activities.Hosting.WorkflowInstance.WorkflowDefinition*
  parent: System.Activities.Hosting.WorkflowInstance
  isExternal: false
  name: WorkflowDefinition
  nameWithType: WorkflowInstance.WorkflowDefinition
