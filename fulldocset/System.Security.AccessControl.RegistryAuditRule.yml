### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistryAuditRule
  id: RegistryAuditRule
  children:
  - System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.RegistryAuditRule.RegistryRights
  langs:
  - csharp
  name: RegistryAuditRule
  nameWithType: RegistryAuditRule
  fullName: System.Security.AccessControl.RegistryAuditRule
  type: Class
  summary: "Represents a set of access rights to be audited for a user or group. This class cannot be inherited."
  remarks: "The RegistryAuditRule class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.      > [!NOTE] >  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.       To get a list of the audit rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> method to obtain a collection of RegistryAuditRule objects.       RegistryAuditRule objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all audit rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.      > [!NOTE] >  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.       Use RegistryAuditRule objects to specify access rights to be audited for a user or group. To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.      > [!IMPORTANT] >  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.       RegistryAuditRule objects are immutable. Security for a registry key is modified by using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified."
  syntax:
    content: 'public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AuditRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AuditRule.AuditFlags
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'
  parent: System.Security.AccessControl.RegistryAuditRule
  langs:
  - csharp
  name: RegistryAuditRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: RegistryAuditRule.RegistryAuditRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;></xref> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules."
  syntax:
    content: public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "The user or group the rule applies to. Must be of type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref> or a type such as <xref href=&quot;System.Security.Principal.NTAccount&quot;></xref> that can be converted to type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref> values specifying the kinds of access to audit."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;></xref> values specifying whether the audit rule applies to subkeys of the current key."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;></xref> values that affect the way an inherited audit rule is propagated to subkeys of the current key."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref> values specifying whether to audit success, failure, or both."
  overload: System.Security.AccessControl.RegistryAuditRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code> specifies an invalid value.       -or-       <code>flags</code> specifies an invalid value.       -or-       <code>inheritanceFlags</code> specifies an invalid value.       -or-       <code>propagationFlags</code> specifies an invalid value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>registryRights</code> is zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code> is neither of type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref> nor of a type such as <xref href=&quot;System.Security.Principal.NTAccount&quot;></xref> that can be converted to type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'
  parent: System.Security.AccessControl.RegistryAuditRule
  langs:
  - csharp
  name: RegistryAuditRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: RegistryAuditRule.RegistryAuditRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;></xref> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> constructor."
  syntax:
    content: public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identity
      type: System.String
      description: "The name of the user or group the rule applies to."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref> values specifying the kinds of access to audit."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "A combination of <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;></xref> flags that specifies whether the audit rule applies to subkeys of the current key."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "A combination of <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;></xref> flags that affect the way an inherited audit rule is propagated to subkeys of the current key."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref> values specifying whether to audit success, failure, or both."
  overload: System.Security.AccessControl.RegistryAuditRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code> specifies an invalid value.       -or-       <code>flags</code> specifies an invalid value.       -or-       <code>inheritanceFlags</code> specifies an invalid value.       -or-       <code>propagationFlags</code> specifies an invalid value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>registryRights</code> is zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>identity</code> is a zero-length string.       -or-       <code>identity</code> is longer than 512 characters."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAuditRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAuditRule
  langs:
  - csharp
  name: RegistryRights
  nameWithType: RegistryAuditRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAuditRule.RegistryRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets the access rights affected by the audit rule."
  remarks: "<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. You can create a new audit rule representing a different user, different rights, or a different combination of <xref:System.Security.AccessControl.AuditFlags> flags, but you cannot modify an existing audit rule."
  syntax:
    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }
    return:
      type: System.Security.AccessControl.RegistryRights
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref> values that indicates the rights affected by the audit rule."
  overload: System.Security.AccessControl.RegistryAuditRule.RegistryRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AuditRule
  isExternal: false
  name: System.Security.AccessControl.AuditRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.RegistryAuditRule
  isExternal: false
  name: RegistryAuditRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: RegistryAuditRule.RegistryAuditRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.RegistryAuditRule
  isExternal: false
  name: RegistryAuditRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: RegistryAuditRule.RegistryAuditRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.RegistryAuditRule.RegistryRights
  parent: System.Security.AccessControl.RegistryAuditRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAuditRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAuditRule.RegistryRights
- uid: System.Security.AccessControl.RegistryAuditRule.#ctor*
  parent: System.Security.AccessControl.RegistryAuditRule
  isExternal: false
  name: RegistryAuditRule
  nameWithType: RegistryAuditRule.RegistryAuditRule
- uid: System.Security.AccessControl.RegistryAuditRule.RegistryRights*
  parent: System.Security.AccessControl.RegistryAuditRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAuditRule.RegistryRights
