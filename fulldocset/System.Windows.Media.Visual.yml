### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Visual
  id: Visual
  children:
  - System.Windows.Media.Visual.#ctor
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.GetVisualChild(System.Int32)
  - System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualChildrenCount
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  langs:
  - csharp
  name: Visual
  nameWithType: Visual
  fullName: System.Windows.Media.Visual
  type: Class
  summary: "Provides rendering support in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], which includes hit testing, coordinate transformation, and bounding box calculations."
  remarks: "The Visual class is the basic abstraction from which every <xref:System.Windows.FrameworkElement> object derives. It also serves as the entry point for writing new controls in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], and in many ways can be thought of as an equivalent of a window handle (HWND) in the [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] application model.       The Visual object is a core [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] object, whose primary role is to provide rendering support. User interface controls, such as <xref:System.Windows.Controls.Button> and <xref:System.Windows.Controls.TextBox>, derive from the Visual class, and use the Visual defined properties for persisting their rendering data. The Visual object provides support for the following:      -   Output display: Rendering the persisted, serialized drawing content of a visual.      -   Transformations: Performing transformations on a visual.      -   Clipping: Providing clipping region support for a visual.      -   Hit testing: Determining whether a specified coordinate (point) or geometry is contained within the bounds of a visual.      -   Bounding box calculations: Determining the bounding rectangle of a visual.       Architecturally, the Visual object does not include support for other application development requirements / [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] features that are not immediately related to its rendering, such as the following:      -   Event handling      -   Layout      -   Styles      -   Data binding      -   Globalization       Visual is provided as a public abstract class from which further classes can be derived. The following illustration shows the hierarchy of the existing visual objects that are defined in the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] architecture.       ![Diagram of classes derived from the Visual object](~/add/media/visualclass01.png &quot;Diagram of classes derived from the Visual object&quot;)   Visual class hierarchy       In some cases, members that are defined as protected in Visual are exposed as more readily accessible members with similar names in the derived <xref:System.Windows.UIElement> class.       For more information, see [WPF Graphics Rendering Overview](~/add/includes/ajax-current-ext-md.md).       A Visual has a limited number of levels. In previous versions of the .NET Framework, this maximum depth was 255. This limit is inadequate for some layouts that have many levels in the visual tree.       In [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], the maximum depth of a Visual is 2047, which enables much deeper visual trees. In most applications, there is not enough stack space to traverse so many levels, and the result is a <xref:System.StackOverflowException> during layout. For the default stack size, this exception is usually thrown when the tree depth is approximately 800, which corresponds to about 190 nested <xref:System.Windows.Controls.TreeViewItem> objects.       If this exception is thrown by your application and you need to have a deeper visual tree, you can increase the application&quot;s stack size. You can increase the size of the stack by using the /STACK option at compile time or by using the EDITBIN utility. Increasing the stack size may affect your application&quot;s performance. For more information, see [Stack Allocations](http://go.microsoft.com/fwlink/?LinkId=165510) and [EDITBIN Options](http://go.microsoft.com/fwlink/?LinkId=165511)."
  syntax:
    content: 'public abstract class Visual : System.Windows.DependencyObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Visual.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: Visual()
  nameWithType: Visual.Visual()
  fullName: System.Windows.Media.Visual.Visual()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Provides the base initialization for objects derived from the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> class."
  syntax:
    content: protected Visual ();
    parameters: []
  overload: System.Windows.Media.Visual.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  id: AddVisualChild(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: AddVisualChild(Visual)
  nameWithType: Visual.AddVisualChild(Visual)
  fullName: System.Windows.Media.Visual.AddVisualChild(Visual)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Defines the parent-child relationship between two visuals."
  remarks: "The AddVisualChild method sets up the parent-child relationship between two visual objects. This method must be used when you need greater low-level control over the underlying storage implementation of visual child objects. <xref:System.Windows.Media.VisualCollection> can be used as a default implementation for storing child objects."
  example:
  - "The following example shows how to define custom storage requirements for a visual child. The example uses the AddVisualChild and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods to sets up the parent-child relationship between the parent visual and `child`. In order for the visual tree to be enumerated correctly, the example provides overridden implementations of the <xref:System.Windows.Media.Visual.GetVisualChild%2A> method and <xref:System.Windows.Media.Visual.VisualChildrenCount%2A> property.  \n  \n> [!NOTE]\n>  Although it is possible to use <xref:System.Windows.Media.VisualCollection> to create parent-child relationships between visual objects, it is more efficient to provide your own custom storage implementation when only one child is linked to a parent.  \n  \n [!code-cs[AddVisualChild#AddVisualChild01](~/add/codesnippet/csharp/AddVisualChild/Window1.xaml.cs#addvisualchild01)]\n [!code-vb[AddVisualChild#AddVisualChild01](~/add/codesnippet/visualbasic/addvisualchild/window1.xaml.vb#addvisualchild01)]"
  syntax:
    content: protected void AddVisualChild (System.Windows.Media.Visual child);
    parameters:
    - id: child
      type: System.Windows.Media.Visual
      description: "The child visual object to add to parent visual."
  overload: System.Windows.Media.Visual.AddVisualChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  id: FindCommonVisualAncestor(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: FindCommonVisualAncestor(DependencyObject)
  nameWithType: Visual.FindCommonVisualAncestor(DependencyObject)
  fullName: System.Windows.Media.Visual.FindCommonVisualAncestor(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Returns the common ancestor of two visual objects."
  remarks: "2D and 3D objects can have common visual ancestors, so it is possible to pass a <xref:System.Windows.Media.Media3D.Visual3D> for `otherVisual`."
  syntax:
    content: public System.Windows.DependencyObject FindCommonVisualAncestor (System.Windows.DependencyObject otherVisual);
    parameters:
    - id: otherVisual
      type: System.Windows.DependencyObject
      description: "A visual object of type <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
    return:
      type: System.Windows.DependencyObject
      description: "The common ancestor of the visual object and <code>otherVisual</code> if one exists; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Visual.FindCommonVisualAncestor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.GetVisualChild(System.Int32)
  id: GetVisualChild(System.Int32)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: GetVisualChild(Int32)
  nameWithType: Visual.GetVisualChild(Int32)
  fullName: System.Windows.Media.Visual.GetVisualChild(Int32)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Returns the specified <xref href=&quot;System.Windows.Media.Visual&quot;></xref> in the parent <xref href=&quot;System.Windows.Media.VisualCollection&quot;></xref>."
  remarks: "By default, a <xref:System.Windows.Media.Visual> has no children. Therefore, the default implementation always throws an <xref:System.ArgumentOutOfRangeException>."
  example:
  - "The following example defines an overridden implementation of GetVisualChild.  \n  \n [!code-cs[DrawingVisualSample#102b](~/add/codesnippet/csharp/DrawingVisual/Window1.xaml.cs#102b)]\n [!code-vb[DrawingVisualSample#102b](~/add/codesnippet/visualbasic/drawingvisual/window1.xaml.vb#102b)]"
  syntax:
    content: protected virtual System.Windows.Media.Visual GetVisualChild (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index of the visual object in the <xref href=&quot;System.Windows.Media.VisualCollection&quot;></xref>."
    return:
      type: System.Windows.Media.Visual
      description: "The child in the <xref href=&quot;System.Windows.Media.VisualCollection&quot;></xref> at the specified <code>index</code> value."
  overload: System.Windows.Media.Visual.GetVisualChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  id: HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: Visual.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.Media.Visual.HitTestCore(GeometryHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Determines whether a geometry value is within the bounds of the visual object."
  remarks: "You can override default hit testing support for a visual object by overriding the <xref:System.Windows.Media.Visual.HitTestCore%2A> method. This means that when you invoke the <xref:System.Windows.Media.VisualTreeHelper.HitTest%2A> method, your overridden implementation of <xref:System.Windows.Media.Visual.HitTestCore%2A> is called. Your overridden method is called when a hit test falls within the bounding rectangle of the visual object, even if the coordinate falls outside the geometry of the visual object."
  example:
  - "The following example shows how to override the HitTestCore method. One reason you might want to override this method is to provide additional functionality during the hit testing process.  \n  \n [!code-vb[HitTestingOverview#HitTestingOverviewSnippet13](~/add/codesnippet/visualbasic/hittestingoverview/geometryhittest.vb#hittestingoverviewsnippet13)]\n [!code-cs[HitTestingOverview#HitTestingOverviewSnippet13](~/add/codesnippet/csharp/HitTestingOverview/GeometryHitTest.cs#hittestingoverviewsnippet13)]"
  syntax:
    content: protected virtual System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.GeometryHitTestParameters
      description: "A <xref href=&quot;System.Windows.Media.GeometryHitTestParameters&quot;></xref> object that specifies the <xref href=&quot;System.Windows.Media.Geometry&quot;></xref> to hit test against."
    return:
      type: System.Windows.Media.GeometryHitTestResult
      description: "A <xref href=&quot;System.Windows.Media.GeometryHitTestResult&quot;></xref> that represents the result of the hit test."
  overload: System.Windows.Media.Visual.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)
  id: HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: HitTestCore(PointHitTestParameters)
  nameWithType: Visual.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.Media.Visual.HitTestCore(PointHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Determines whether a point coordinate value is within the bounds of the visual object."
  remarks: "You can override the default hit testing support on visual objects by overriding the <xref:System.Windows.Media.Visual.HitTestCore%2A> method. This means that when you invoke the <xref:System.Windows.Media.VisualTreeHelper.HitTest%2A> method, your overridden implementation of <xref:System.Windows.Media.Visual.HitTestCore%2A> is called. Your overridden method is called when a hit test falls within the bounding rectangle of the visual object, even if the coordinate falls outside the geometry of the visual object."
  example:
  - "The following example shows how to override the HitTestCore method. One reason you might want to override this method is to provide additional functionality during the hit testing process.  \n  \n [!code-cs[HitTestingOverview#107](~/add/codesnippet/csharp/HitTestingOverview/Window1.xaml.cs#107)]\n [!code-vb[HitTestingOverview#107](~/add/codesnippet/visualbasic/hittestingoverview/window1.xaml.vb#107)]"
  syntax:
    content: protected virtual System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.PointHitTestParameters
      description: "A <xref href=&quot;System.Windows.Media.PointHitTestParameters&quot;></xref> object that specifies the <xref href=&quot;System.Windows.Point&quot;></xref> to hit test against."
    return:
      type: System.Windows.Media.HitTestResult
      description: "A <xref href=&quot;System.Windows.Media.HitTestResult&quot;></xref> that represents the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> that is returned from a hit test."
  overload: System.Windows.Media.Visual.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  id: IsAncestorOf(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: IsAncestorOf(DependencyObject)
  nameWithType: Visual.IsAncestorOf(DependencyObject)
  fullName: System.Windows.Media.Visual.IsAncestorOf(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Determines whether the visual object is an ancestor of the descendant visual object."
  syntax:
    content: public bool IsAncestorOf (System.Windows.DependencyObject descendant);
    parameters:
    - id: descendant
      type: System.Windows.DependencyObject
      description: "A value of type <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the visual object is an ancestor of <code>descendant</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Visual.IsAncestorOf*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  id: IsDescendantOf(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: IsDescendantOf(DependencyObject)
  nameWithType: Visual.IsDescendantOf(DependencyObject)
  fullName: System.Windows.Media.Visual.IsDescendantOf(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Determines whether the visual object is a descendant of the ancestor visual object."
  syntax:
    content: public bool IsDescendantOf (System.Windows.DependencyObject ancestor);
    parameters:
    - id: ancestor
      type: System.Windows.DependencyObject
      description: "A value of type <xref href=&quot;System.Windows.DependencyObject&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the visual object is a descendant of <code>ancestor</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Visual.IsDescendantOf*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Visual.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Media.Visual.OnDpiChanged(DpiScale,DpiScale)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Called when the DPI at which this View is rendered changes."
  syntax:
    content: protected virtual void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);
    parameters:
    - id: oldDpi
      type: System.Windows.DpiScale
      description: "The previous DPI scale setting."
    - id: newDpi
      type: System.Windows.DpiScale
      description: "The new DPI scale setting."
  overload: System.Windows.Media.Visual.OnDpiChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  id: OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: OnVisualChildrenChanged(DependencyObject,DependencyObject)
  nameWithType: Visual.OnVisualChildrenChanged(DependencyObject,DependencyObject)
  fullName: System.Windows.Media.Visual.OnVisualChildrenChanged(DependencyObject,DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Called when the <xref href=&quot;System.Windows.Media.VisualCollection&quot;></xref> of the visual object is modified."
  syntax:
    content: protected virtual void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);
    parameters:
    - id: visualAdded
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.Media.Visual&quot;></xref> that was added to the collection"
    - id: visualRemoved
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.Media.Visual&quot;></xref> that was removed from the collection"
  overload: System.Windows.Media.Visual.OnVisualChildrenChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Visual.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Media.Visual.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Called when the parent of the visual object is changed."
  remarks: "A class that derives from <xref:System.Windows.Media.Visual> can choose to override this method.       There is no &quot;VisualParentChanged&quot; event provided that reports this change to instances. Therefore, you must override this method to handle notification scenarios and provide an instance version of the notification if that is part of your scenario."
  example:
  - "The following example defines an overridden implementation of OnVisualParentChanged.  \n  \n [!code-vb[VisualSnippets#VisualSnippet10](~/add/codesnippet/visualbasic/visualsnippets/window1.xaml.vb#visualsnippet10)]\n [!code-cs[VisualSnippets#VisualSnippet10](~/add/codesnippet/csharp/VisualSnippets/Window1.xaml.cs#visualsnippet10)]"
  syntax:
    content: protected virtual void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "A value of type <xref href=&quot;System.Windows.DependencyObject&quot;></xref> that represents the previous parent of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> object. If the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> object did not have a previous parent, the value of the parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Visual.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  id: PointFromScreen(System.Windows.Point)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: PointFromScreen(Point)
  nameWithType: Visual.PointFromScreen(Point)
  fullName: System.Windows.Media.Visual.PointFromScreen(Point)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Converts a <xref href=&quot;System.Windows.Point&quot;></xref> in screen coordinates into a <xref href=&quot;System.Windows.Point&quot;></xref> that represents the current coordinate system of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  remarks: "Use the <xref:System.Windows.Media.Visual.PointToScreen%2A> method to convert a <xref:System.Windows.Point> that represents the current coordinate system of the <xref:System.Windows.Media.Visual> into a <xref:System.Windows.Point> in screen coordinates."
  syntax:
    content: public System.Windows.Point PointFromScreen (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The <xref href=&quot;System.Windows.Point&quot;></xref> value in screen coordinates."
    return:
      type: System.Windows.Point
      description: "The converted <xref href=&quot;System.Windows.Point&quot;></xref> value that represents the current coordinate system of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  overload: System.Windows.Media.Visual.PointFromScreen*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  id: PointToScreen(System.Windows.Point)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: PointToScreen(Point)
  nameWithType: Visual.PointToScreen(Point)
  fullName: System.Windows.Media.Visual.PointToScreen(Point)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Converts a <xref href=&quot;System.Windows.Point&quot;></xref> that represents the current coordinate system of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> into a <xref href=&quot;System.Windows.Point&quot;></xref> in screen coordinates."
  remarks: "Use the <xref:System.Windows.Media.Visual.PointFromScreen%2A> method to convert a <xref:System.Windows.Point> in screen coordinates into a <xref:System.Windows.Point> that represents the current coordinate system of the <xref:System.Windows.Media.Visual>."
  syntax:
    content: public System.Windows.Point PointToScreen (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The <xref href=&quot;System.Windows.Point&quot;></xref> value that represents the current coordinate system of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
    return:
      type: System.Windows.Point
      description: "The converted <xref href=&quot;System.Windows.Point&quot;></xref> value in screen coordinates."
  overload: System.Windows.Media.Visual.PointToScreen*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  id: RemoveVisualChild(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: RemoveVisualChild(Visual)
  nameWithType: Visual.RemoveVisualChild(Visual)
  fullName: System.Windows.Media.Visual.RemoveVisualChild(Visual)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Removes the parent-child relationship between two visuals."
  remarks: "The RemoveVisualChild method removes the parent-child relationship between two visuals. This method, along with the <xref:System.Windows.Media.Visual.AddVisualChild%2A> method, must be used when you need greater low-level control over the underlying storage implementation of visual child objects. <xref:System.Windows.Media.VisualCollection> can be used as a default implementation for storing child objects."
  example:
  - "The following example shows how to define custom storage requirements for a visual child. The example uses the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and RemoveVisualChild methods to sets up the parent-child relationship between the parent visual and `child`. In order for the visual tree to be enumerated correctly, the example provides overridden implementations of the <xref:System.Windows.Media.Visual.GetVisualChild%2A> method and <xref:System.Windows.Media.Visual.VisualChildrenCount%2A> property.  \n  \n> [!NOTE]\n>  Although it is possible to use <xref:System.Windows.Media.VisualCollection> to create parent-child relationships between visual objects, it is more efficient to provide your own custom storage implementation when only one child is linked to a parent.  \n  \n [!code-cs[AddVisualChild#AddVisualChild01](~/add/codesnippet/csharp/AddVisualChild/Window1.xaml.cs#addvisualchild01)]\n [!code-vb[AddVisualChild#AddVisualChild01](~/add/codesnippet/visualbasic/addvisualchild/window1.xaml.vb#addvisualchild01)]"
  syntax:
    content: protected void RemoveVisualChild (System.Windows.Media.Visual child);
    parameters:
    - id: child
      type: System.Windows.Media.Visual
      description: "The child visual object to remove from the parent visual."
  overload: System.Windows.Media.Visual.RemoveVisualChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  id: TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: TransformToAncestor(Visual3D)
  nameWithType: Visual.TransformToAncestor(Visual3D)
  fullName: System.Windows.Media.Visual.TransformToAncestor(Visual3D)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Returns a transform that can be used to transform coordinates from the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to the specified <xref href=&quot;System.Windows.Media.Media3D.Visual3D&quot;></xref> ancestor of the visual object."
  syntax:
    content: public System.Windows.Media.Media3D.GeneralTransform2DTo3D TransformToAncestor (System.Windows.Media.Media3D.Visual3D ancestor);
    parameters:
    - id: ancestor
      type: System.Windows.Media.Media3D.Visual3D
      description: "The <xref href=&quot;System.Windows.Media.Media3D.Visual3D&quot;></xref> to which the coordinates are transformed."
    return:
      type: System.Windows.Media.Media3D.GeneralTransform2DTo3D
      description: "A transform that can be used to transform coordinates from the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to the specified <xref href=&quot;System.Windows.Media.Media3D.Visual3D&quot;></xref> ancestor of the visual object."
  overload: System.Windows.Media.Visual.TransformToAncestor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  id: TransformToAncestor(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: TransformToAncestor(Visual)
  nameWithType: Visual.TransformToAncestor(Visual)
  fullName: System.Windows.Media.Visual.TransformToAncestor(Visual)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Returns a transform that can be used to transform coordinates from the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to the specified <xref href=&quot;System.Windows.Media.Visual&quot;></xref> ancestor of the visual object."
  remarks: "Alternatively, you can use the <xref:System.Windows.Media.VisualTreeHelper.GetOffset%2A?displayProperty=fullName> method to retrieve the offset of a visual object relative to its parent. The offset values are contained within the returned <xref:System.Windows.Vector> value.       [!code-vb[VisualSnippets#VisualSnippet2](~/add/codesnippet/visualbasic/visualsnippets/window1.xaml.vb#visualsnippet2)]  [!code-cs[VisualSnippets#VisualSnippet2](~/add/codesnippet/csharp/VisualSnippets/Window1.xaml.cs#visualsnippet2)]"
  example:
  - "The following markup example shows a <xref:System.Windows.Controls.TextBlock> that is nested within two <xref:System.Windows.Controls.StackPanel> objects.  \n  \n [!code-xml[VisualSnippets#VisualSnippet7](~/add/codesnippet/xaml/VisualSnippets/Window2.xaml#visualsnippet7)]  \n  \n The following code example shows how to use the TransformToAncestor method to retrieve the offset of the <xref:System.Windows.Controls.TextBlock> relative to the containing <xref:System.Windows.Window>. The offset values are contained in the returned <xref:System.Windows.Media.GeneralTransform>.  \n  \n [!code-vb[VisualSnippets#VisualSnippet5](~/add/codesnippet/visualbasic/visualsnippets/window1.xaml.vb#visualsnippet5)]\n [!code-cs[VisualSnippets#VisualSnippet5](~/add/codesnippet/csharp/VisualSnippets/Window1.xaml.cs#visualsnippet5)]  \n  \n The offset takes into account the <xref:System.Windows.FrameworkElement.Margin%2A> values for all objects within the containing <xref:System.Windows.Window>. In this case, <xref:System.Windows.Vector.X%2A> is 28, and <xref:System.Windows.Vector.Y%2A> is 28."
  syntax:
    content: public System.Windows.Media.GeneralTransform TransformToAncestor (System.Windows.Media.Visual ancestor);
    parameters:
    - id: ancestor
      type: System.Windows.Media.Visual
      description: "The <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to which the coordinates are transformed."
    return:
      type: System.Windows.Media.GeneralTransform
      description: "A value of type <xref href=&quot;System.Windows.Media.GeneralTransform&quot;></xref>."
  overload: System.Windows.Media.Visual.TransformToAncestor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ancestor</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ancestor</code> is not an ancestor of the visual."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The visual objects are not related."
  platform:
  - net462
- uid: System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  id: TransformToDescendant(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: TransformToDescendant(Visual)
  nameWithType: Visual.TransformToDescendant(Visual)
  fullName: System.Windows.Media.Visual.TransformToDescendant(Visual)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Returns a transform that can be used to transform coordinates from the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to the specified visual object descendant."
  remarks: ''
  example:
  - "The following markup example shows a <xref:System.Windows.Controls.TextBlock> that is contained within a <xref:System.Windows.Controls.StackPanel> object.  \n  \n [!code-xml[VisualSnippets#VisualSnippet4](~/add/codesnippet/xaml/VisualSnippets/Window1.xaml#visualsnippet4)]  \n  \n The following code example shows how to use the TransformToDescendant method to retrieve the offset of the <xref:System.Windows.Controls.StackPanel> relative to its child <xref:System.Windows.Controls.TextBlock>. The offset values are contained within the returned <xref:System.Windows.Media.GeneralTransform> value.  \n  \n [!code-vb[VisualSnippets#VisualSnippet9](~/add/codesnippet/visualbasic/visualsnippets/window1.xaml.vb#visualsnippet9)]\n [!code-cs[VisualSnippets#VisualSnippet9](~/add/codesnippet/csharp/VisualSnippets/Window1.xaml.cs#visualsnippet9)]  \n  \n The offset takes into account the <xref:System.Windows.FrameworkElement.Margin%2A> values for all objects. In this case, <xref:System.Windows.Vector.X%2A> is -4, and <xref:System.Windows.Vector.Y%2A> is -4. The offset values are negative values because the parent object is negatively offset relative to its child object."
  syntax:
    content: public System.Windows.Media.GeneralTransform TransformToDescendant (System.Windows.Media.Visual descendant);
    parameters:
    - id: descendant
      type: System.Windows.Media.Visual
      description: "The <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to which the coordinates are transformed."
    return:
      type: System.Windows.Media.GeneralTransform
      description: "A value of type <xref href=&quot;System.Windows.Media.GeneralTransform&quot;></xref>."
  overload: System.Windows.Media.Visual.TransformToDescendant*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>descendant</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The visual is not an ancestor of the <code>descendant</code> visual."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The visual objects are not related."
  platform:
  - net462
- uid: System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  id: TransformToVisual(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: TransformToVisual(Visual)
  nameWithType: Visual.TransformToVisual(Visual)
  fullName: System.Windows.Media.Visual.TransformToVisual(Visual)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Returns a transform that can be used to transform coordinates from the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to the specified visual object."
  remarks: "The <xref:System.Windows.Media.Visual.TransformToAncestor%2A> and <xref:System.Windows.Media.Visual.TransformToDescendant%2A> methods can also be used to return a transform for a visual object."
  example:
  - "The following markup example shows a <xref:System.Windows.Controls.TextBlock> that is contained within a <xref:System.Windows.Controls.StackPanel> object.  \n  \n [!code-xml[VisualSnippets#VisualSnippet4](~/add/codesnippet/xaml/VisualSnippets/Window1.xaml#visualsnippet4)]  \n  \n The following code example shows how to use the TransformToVisual method to retrieve the offset of the <xref:System.Windows.Controls.StackPanel> relative to its child <xref:System.Windows.Controls.TextBlock>. The offset values are contained within the returned <xref:System.Windows.Media.GeneralTransform> value.  \n  \n [!code-vb[VisualSnippets#VisualSnippet8](~/add/codesnippet/visualbasic/visualsnippets/window1.xaml.vb#visualsnippet8)]\n [!code-cs[VisualSnippets#VisualSnippet8](~/add/codesnippet/csharp/VisualSnippets/Window1.xaml.cs#visualsnippet8)]  \n  \n The offset takes into account the <xref:System.Windows.FrameworkElement.Margin%2A> values for all objects. In this case, <xref:System.Windows.Vector.X%2A> is -4, and <xref:System.Windows.Vector.Y%2A> is -4. The offset values are negative values because the parent object is negatively offset relative to its child object."
  syntax:
    content: public System.Windows.Media.GeneralTransform TransformToVisual (System.Windows.Media.Visual visual);
    parameters:
    - id: visual
      type: System.Windows.Media.Visual
      description: "The <xref href=&quot;System.Windows.Media.Visual&quot;></xref> to which the coordinates are transformed."
    return:
      type: System.Windows.Media.GeneralTransform
      description: "A value of type <xref href=&quot;System.Windows.Media.GeneralTransform&quot;></xref>."
  overload: System.Windows.Media.Visual.TransformToVisual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>visual</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The visual objects are not related."
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualBitmapEffect
  id: VisualBitmapEffect
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualBitmapEffect
  nameWithType: Visual.VisualBitmapEffect
  fullName: System.Windows.Media.Visual.VisualBitmapEffect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.Effects.BitmapEffect&quot;></xref> value for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.Effects.BitmapEffect VisualBitmapEffect { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffect
      description: "The bitmap effect for this visual object."
  overload: System.Windows.Media.Visual.VisualBitmapEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualBitmapEffectInput
  id: VisualBitmapEffectInput
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualBitmapEffectInput
  nameWithType: Visual.VisualBitmapEffectInput
  fullName: System.Windows.Media.Visual.VisualBitmapEffectInput
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.Effects.BitmapEffectInput&quot;></xref> value for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.Effects.BitmapEffectInput VisualBitmapEffectInput { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffectInput
      description: "The bitmap effect input value for this visual object."
  overload: System.Windows.Media.Visual.VisualBitmapEffectInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualBitmapScalingMode
  id: VisualBitmapScalingMode
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualBitmapScalingMode
  nameWithType: Visual.VisualBitmapScalingMode
  fullName: System.Windows.Media.Visual.VisualBitmapScalingMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.BitmapScalingMode&quot;></xref> for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.BitmapScalingMode VisualBitmapScalingMode { get; set; }
    return:
      type: System.Windows.Media.BitmapScalingMode
      description: "The <xref href=&quot;System.Windows.Media.BitmapScalingMode&quot;></xref> value for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  overload: System.Windows.Media.Visual.VisualBitmapScalingMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualCacheMode
  id: VisualCacheMode
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualCacheMode
  nameWithType: Visual.VisualCacheMode
  fullName: System.Windows.Media.Visual.VisualCacheMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets a cached representation of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  remarks: "Set the VisualCacheMode property when you need to increase performance for content that is time-consuming to render. For more information, see <xref:System.Windows.Media.BitmapCache>."
  syntax:
    content: protected System.Windows.Media.CacheMode VisualCacheMode { get; set; }
    return:
      type: System.Windows.Media.CacheMode
      description: "A <xref href=&quot;System.Windows.Media.CacheMode&quot;></xref> that holds a cached representation of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  overload: System.Windows.Media.Visual.VisualCacheMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualChildrenCount
  id: VisualChildrenCount
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualChildrenCount
  nameWithType: Visual.VisualChildrenCount
  fullName: System.Windows.Media.Visual.VisualChildrenCount
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets the number of child elements for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  remarks: "By default, a <xref:System.Windows.Media.Visual> has no children. Therefore, the default implementation always returns 0."
  example:
  - "The following example defines an overridden implementation of VisualChildrenCount.  \n  \n [!code-cs[DrawingVisualSample#102a](~/add/codesnippet/csharp/DrawingVisual/Window1.xaml.cs#102a)]\n [!code-vb[DrawingVisualSample#102a](~/add/codesnippet/visualbasic/drawingvisual/window1.xaml.vb#102a)]"
  syntax:
    content: protected virtual int VisualChildrenCount { get; }
    return:
      type: System.Int32
      description: "The number of child elements."
  overload: System.Windows.Media.Visual.VisualChildrenCount*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualClearTypeHint
  id: VisualClearTypeHint
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualClearTypeHint
  nameWithType: Visual.VisualClearTypeHint
  fullName: System.Windows.Media.Visual.VisualClearTypeHint
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.ClearTypeHint&quot;></xref> that determines how ClearType is rendered in the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.ClearTypeHint VisualClearTypeHint { get; set; }
    return:
      type: System.Windows.Media.ClearTypeHint
      description: "A <xref href=&quot;System.Windows.Media.ClearTypeHint&quot;></xref> of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  overload: System.Windows.Media.Visual.VisualClearTypeHint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualClip
  id: VisualClip
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualClip
  nameWithType: Visual.VisualClip
  fullName: System.Windows.Media.Visual.VisualClip
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the clip region of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> as a <xref href=&quot;System.Windows.Media.Geometry&quot;></xref> value."
  syntax:
    content: protected System.Windows.Media.Geometry VisualClip { get; set; }
    return:
      type: System.Windows.Media.Geometry
      description: "The clip region value of the visual as a <xref href=&quot;System.Windows.Media.Geometry&quot;></xref> type."
  overload: System.Windows.Media.Visual.VisualClip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualEdgeMode
  id: VisualEdgeMode
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualEdgeMode
  nameWithType: Visual.VisualEdgeMode
  fullName: System.Windows.Media.Visual.VisualEdgeMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the edge mode of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref> as an <xref href=&quot;System.Windows.Media.EdgeMode&quot;></xref> value."
  syntax:
    content: protected System.Windows.Media.EdgeMode VisualEdgeMode { get; set; }
    return:
      type: System.Windows.Media.EdgeMode
      description: "The <xref href=&quot;System.Windows.Media.EdgeMode&quot;></xref> value of the visual."
  overload: System.Windows.Media.Visual.VisualEdgeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualEffect
  id: VisualEffect
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualEffect
  nameWithType: Visual.VisualEffect
  fullName: System.Windows.Media.Visual.VisualEffect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the bitmap effect to apply to the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.Effects.Effect VisualEffect { get; set; }
    return:
      type: System.Windows.Media.Effects.Effect
      description: "An <xref href=&quot;System.Windows.Media.Effects.Effect&quot;></xref> that represents the bitmap effect."
  overload: System.Windows.Media.Visual.VisualEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualOffset
  id: VisualOffset
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualOffset
  nameWithType: Visual.VisualOffset
  fullName: System.Windows.Media.Visual.VisualOffset
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the offset value of the visual object."
  syntax:
    content: protected System.Windows.Vector VisualOffset { get; set; }
    return:
      type: System.Windows.Vector
      description: "A <xref href=&quot;System.Windows.Vector&quot;></xref> that specifies the offset value."
  overload: System.Windows.Media.Visual.VisualOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualOpacity
  id: VisualOpacity
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualOpacity
  nameWithType: Visual.VisualOpacity
  fullName: System.Windows.Media.Visual.VisualOpacity
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the opacity of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  remarks: "The value of the opacity of the <xref:System.Windows.Media.Visual> is expressed as a value between 0 and 1. A value of 0 indicates that the element is completely transparent, whereas a value of 1 indicates that the element is completely opaque. A value of 0.5 indicates that the element is 50 percent opaque. Values that are less than 0 are treated as 0; values that are greater than 1 are treated as 1."
  syntax:
    content: protected double VisualOpacity { get; set; }
    return:
      type: System.Double
      description: "The opacity value of the visual."
  overload: System.Windows.Media.Visual.VisualOpacity*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualOpacityMask
  id: VisualOpacityMask
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualOpacityMask
  nameWithType: Visual.VisualOpacityMask
  fullName: System.Windows.Media.Visual.VisualOpacityMask
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.Brush&quot;></xref> value that represents the opacity mask of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  remarks: "The opacity mask is a <xref:System.Windows.Media.Brush> that is applied to any alpha-channel masking for the rendered content of this visual."
  syntax:
    content: protected System.Windows.Media.Brush VisualOpacityMask { get; set; }
    return:
      type: System.Windows.Media.Brush
      description: "A <xref href=&quot;System.Windows.Media.Brush&quot;></xref> that represents the opacity mask value of the visual."
  overload: System.Windows.Media.Visual.VisualOpacityMask*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualParent
  id: VisualParent
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualParent
  nameWithType: Visual.VisualParent
  fullName: System.Windows.Media.Visual.VisualParent
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets the visual tree parent of the visual object."
  syntax:
    content: protected System.Windows.DependencyObject VisualParent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.Media.Visual&quot;></xref> parent."
  overload: System.Windows.Media.Visual.VisualParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualScrollableAreaClip
  id: VisualScrollableAreaClip
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualScrollableAreaClip
  nameWithType: Visual.VisualScrollableAreaClip
  fullName: System.Windows.Media.Visual.VisualScrollableAreaClip
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets a clipped scrollable area for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  remarks: "Set the VisualScrollableAreaClip property to enable accelerated scrolling when rendering in software. This is useful in remote rendering scenarios, such as running over Remote Desktop or running in a virtual machine. Set this property on the parent element whose children will be scrolled. Setting the VisualScrollableAreaClip property has no effect when rendering is hardware accelerated.       The VisualScrollableAreaClip property enables specific, advanced scenarios. The following list shows the caveats that apply when you use the VisualScrollableAreaClip property.      -   The background of the scrolled area must be opaque, or scrolling artifacts will occur.      -   The VisualScrollableAreaClip property accelerates scrolling only when WPF is rendering in software. For example, this situation occurs when the application is running over Remote Desktop or running locally in a virtual machine.      -   The scrolling behavior is unchanged when rendering in hardware. To prevent differences in scrolling behavior, you should keep the VisualScrollableAreaClip property enabled for both hardware and software.      -   Rotate and skew transforms disable accelerated scrolling. Scale transforms and horizontal or vertical translations above the scrolled region work correctly and do not disable scrolling acceleration.      -   Changing the subtree or triggering parts of the scrollable area to redraw via animation behave as expected, but lose the benefit of accelerated scrolling for the redrawn area. Any animation that invalidates the scrolled area during the same frame in which scrolling occurs eliminates the benefit of this optimization.      -   The VisualScrollableAreaClip rectangle snaps inward to pixels. Therefore, the snapped size of the scrolling rectangle is always less than or equal to the size you have set.      -   Offsets snap downward. This means that the difference of the previous snapped offset and current snapped offset is always an integer number of pixels.      -   Hit tests can be off by up to a pixel.      -   Layout rounding should be turned on, because it ensures that the edges of scrollable areas and the boundary window client area are snapped to pixel boundaries, resulting in correct alignment.      -   Scrolling acceleration does not work on layered windows. This means windows in which AllowTransparency == true, window.windowstyle == none, and so on.      -   Scrolling acceleration does not occur during full-window rendering.      -   Scrolling acceleration does not work when the window straddles two monitors.      -   Scrolling acceleration does not work in the presence of intermediate render targets in the parent chain of the scrolled element. The following list shows some of these intermediate render targets.          -   Clips          -   Effects          -   DrawingBrushes          -   VisualBrushes          -   OpacityMasks          -   Opacity      -   Only one accelerated scroll can happen per frame. There can be multiple accelerated scroll areas, but only one of them can perform an accelerated scroll during a frame. Which area is scrolled is indeterminate.      -   Scrolling acceleration supports content above the scrolling region (in z-order) that is not scrolled with the rest of the content. The system calculates all necessary dirty regions and completes the accelerated scroll, but it sends several additional bitmaps over the wire to move the unintentionally scrolled portion back to its correct position on screen."
  syntax:
    content: protected Nullable<System.Windows.Rect> VisualScrollableAreaClip { get; set; }
    return:
      type: System.Nullable{System.Windows.Rect}
      description: "A <xref href=&quot;System.Windows.Rect&quot;></xref> that represents the scrollable clipping area, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no clipping area is assigned."
  overload: System.Windows.Media.Visual.VisualScrollableAreaClip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualTextHintingMode
  id: VisualTextHintingMode
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualTextHintingMode
  nameWithType: Visual.VisualTextHintingMode
  fullName: System.Windows.Media.Visual.VisualTextHintingMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.TextHintingMode&quot;></xref> of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.TextHintingMode VisualTextHintingMode { get; set; }
    return:
      type: System.Windows.Media.TextHintingMode
      description: "The <xref href=&quot;System.Windows.Media.TextHintingMode&quot;></xref> applied to the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  overload: System.Windows.Media.Visual.VisualTextHintingMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualTextRenderingMode
  id: VisualTextRenderingMode
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualTextRenderingMode
  nameWithType: Visual.VisualTextRenderingMode
  fullName: System.Windows.Media.Visual.VisualTextRenderingMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.TextRenderingMode&quot;></xref> of the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.TextRenderingMode VisualTextRenderingMode { get; set; }
    return:
      type: System.Windows.Media.TextRenderingMode
      description: "The <xref href=&quot;System.Windows.Media.TextRenderingMode&quot;></xref> applied to the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  overload: System.Windows.Media.Visual.VisualTextRenderingMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualTransform
  id: VisualTransform
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualTransform
  nameWithType: Visual.VisualTransform
  fullName: System.Windows.Media.Visual.VisualTransform
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the <xref href=&quot;System.Windows.Media.Transform&quot;></xref> value for the <xref href=&quot;System.Windows.Media.Visual&quot;></xref>."
  syntax:
    content: protected System.Windows.Media.Transform VisualTransform { get; set; }
    return:
      type: System.Windows.Media.Transform
      description: "The transform value of the visual."
  overload: System.Windows.Media.Visual.VisualTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualXSnappingGuidelines
  id: VisualXSnappingGuidelines
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualXSnappingGuidelines
  nameWithType: Visual.VisualXSnappingGuidelines
  fullName: System.Windows.Media.Visual.VisualXSnappingGuidelines
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the x-coordinate (vertical) guideline collection."
  remarks: "Pixel snapping is the process in which content layout is fixed so that object edges are rendered on device-specific pixels. The [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] graphics system uses device-independent units to enable resolution and device independence. Each device independent pixel automatically scales with the system&quot;s [!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)] setting. This provides [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] applications proper scaling for different [!INCLUDE[TLA2#tla_dpi](~/add/includes/tla2sharptla-dpi-md.md)] settings and makes the application automatically [!INCLUDE[TLA2#tla_dpi](~/add/includes/tla2sharptla-dpi-md.md)]-aware.       However, this [!INCLUDE[TLA2#tla_dpi](~/add/includes/tla2sharptla-dpi-md.md)] independence can create irregular edge rendering due to anti-aliasing. These artifacts, commonly seen as blurry or &quot;soft&quot; edges, can occur when the location of an edge falls in the middle of a device pixel rather than between device pixels. To address this issue, [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] provides a way for object edges in a visual tree to &quot;snap&quot; to device pixels, eliminating the soft edges produced by anti-aliasing."
  syntax:
    content: protected System.Windows.Media.DoubleCollection VisualXSnappingGuidelines { get; set; }
    return:
      type: System.Windows.Media.DoubleCollection
      description: "The x-coordinate guideline collection of the visual."
  overload: System.Windows.Media.Visual.VisualXSnappingGuidelines*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Visual.VisualYSnappingGuidelines
  id: VisualYSnappingGuidelines
  parent: System.Windows.Media.Visual
  langs:
  - csharp
  name: VisualYSnappingGuidelines
  nameWithType: Visual.VisualYSnappingGuidelines
  fullName: System.Windows.Media.Visual.VisualYSnappingGuidelines
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media
  summary: "Gets or sets the y-coordinate (horizontal) guideline collection."
  remarks: "Pixel snapping is the process in which content layout is fixed so that object edges are rendered on device-specific pixels. The [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] graphics system uses device-independent units to enable resolution and device independence. Each device independent pixel automatically scales with the system&quot;s [!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)] setting. This provides [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] applications proper scaling for different [!INCLUDE[TLA2#tla_dpi](~/add/includes/tla2sharptla-dpi-md.md)] settings and makes the application automatically [!INCLUDE[TLA2#tla_dpi](~/add/includes/tla2sharptla-dpi-md.md)]-aware.       However, this [!INCLUDE[TLA2#tla_dpi](~/add/includes/tla2sharptla-dpi-md.md)] independence can create irregular edge rendering due to anti-aliasing. These artifacts, commonly seen as blurry, or &quot;soft&quot; edges, can occur when the location of an edge falls in the middle of a device pixel rather than between device pixels. To address this issue, [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] provides a way for object edges in a visual tree to &quot;snap&quot; to device pixels, eliminating the soft edges produced by anti-aliasing."
  syntax:
    content: protected System.Windows.Media.DoubleCollection VisualYSnappingGuidelines { get; set; }
    return:
      type: System.Windows.Media.DoubleCollection
      description: "The y-coordinate guideline collection of the visual."
  overload: System.Windows.Media.Visual.VisualYSnappingGuidelines*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Media.Visual.#ctor
  parent: System.Windows.Media.Visual
  isExternal: false
  name: Visual()
  nameWithType: Visual.Visual()
  fullName: System.Windows.Media.Visual.Visual()
- uid: System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: AddVisualChild(Visual)
  nameWithType: Visual.AddVisualChild(Visual)
  fullName: System.Windows.Media.Visual.AddVisualChild(Visual)
- uid: System.Windows.Media.Visual
  parent: System.Windows.Media
  isExternal: false
  name: Visual
  nameWithType: Visual
  fullName: System.Windows.Media.Visual
- uid: System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: FindCommonVisualAncestor(DependencyObject)
  nameWithType: Visual.FindCommonVisualAncestor(DependencyObject)
  fullName: System.Windows.Media.Visual.FindCommonVisualAncestor(DependencyObject)
- uid: System.Windows.Media.Visual.GetVisualChild(System.Int32)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: GetVisualChild(Int32)
  nameWithType: Visual.GetVisualChild(Int32)
  fullName: System.Windows.Media.Visual.GetVisualChild(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: Visual.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.Media.Visual.HitTestCore(GeometryHitTestParameters)
- uid: System.Windows.Media.GeometryHitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestResult
  nameWithType: GeometryHitTestResult
  fullName: System.Windows.Media.GeometryHitTestResult
- uid: System.Windows.Media.GeometryHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestParameters
  nameWithType: GeometryHitTestParameters
  fullName: System.Windows.Media.GeometryHitTestParameters
- uid: System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: HitTestCore(PointHitTestParameters)
  nameWithType: Visual.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.Media.Visual.HitTestCore(PointHitTestParameters)
- uid: System.Windows.Media.HitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: HitTestResult
  nameWithType: HitTestResult
  fullName: System.Windows.Media.HitTestResult
- uid: System.Windows.Media.PointHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: PointHitTestParameters
  nameWithType: PointHitTestParameters
  fullName: System.Windows.Media.PointHitTestParameters
- uid: System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: IsAncestorOf(DependencyObject)
  nameWithType: Visual.IsAncestorOf(DependencyObject)
  fullName: System.Windows.Media.Visual.IsAncestorOf(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: IsDescendantOf(DependencyObject)
  nameWithType: Visual.IsDescendantOf(DependencyObject)
  fullName: System.Windows.Media.Visual.IsDescendantOf(DependencyObject)
- uid: System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Visual.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Media.Visual.OnDpiChanged(DpiScale,DpiScale)
- uid: System.Windows.DpiScale
  parent: System.Windows
  isExternal: false
  name: DpiScale
  nameWithType: DpiScale
  fullName: System.Windows.DpiScale
- uid: System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: OnVisualChildrenChanged(DependencyObject,DependencyObject)
  nameWithType: Visual.OnVisualChildrenChanged(DependencyObject,DependencyObject)
  fullName: System.Windows.Media.Visual.OnVisualChildrenChanged(DependencyObject,DependencyObject)
- uid: System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Visual.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Media.Visual.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: PointFromScreen(Point)
  nameWithType: Visual.PointFromScreen(Point)
  fullName: System.Windows.Media.Visual.PointFromScreen(Point)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: PointToScreen(Point)
  nameWithType: Visual.PointToScreen(Point)
  fullName: System.Windows.Media.Visual.PointToScreen(Point)
- uid: System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: RemoveVisualChild(Visual)
  nameWithType: Visual.RemoveVisualChild(Visual)
  fullName: System.Windows.Media.Visual.RemoveVisualChild(Visual)
- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToAncestor(Visual3D)
  nameWithType: Visual.TransformToAncestor(Visual3D)
  fullName: System.Windows.Media.Visual.TransformToAncestor(Visual3D)
- uid: System.Windows.Media.Media3D.GeneralTransform2DTo3D
  parent: System.Windows.Media.Media3D
  isExternal: false
  name: GeneralTransform2DTo3D
  nameWithType: GeneralTransform2DTo3D
  fullName: System.Windows.Media.Media3D.GeneralTransform2DTo3D
- uid: System.Windows.Media.Media3D.Visual3D
  parent: System.Windows.Media.Media3D
  isExternal: false
  name: Visual3D
  nameWithType: Visual3D
  fullName: System.Windows.Media.Media3D.Visual3D
- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToAncestor(Visual)
  nameWithType: Visual.TransformToAncestor(Visual)
  fullName: System.Windows.Media.Visual.TransformToAncestor(Visual)
- uid: System.Windows.Media.GeneralTransform
  parent: System.Windows.Media
  isExternal: false
  name: GeneralTransform
  nameWithType: GeneralTransform
  fullName: System.Windows.Media.GeneralTransform
- uid: System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToDescendant(Visual)
  nameWithType: Visual.TransformToDescendant(Visual)
  fullName: System.Windows.Media.Visual.TransformToDescendant(Visual)
- uid: System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToVisual(Visual)
  nameWithType: Visual.TransformToVisual(Visual)
  fullName: System.Windows.Media.Visual.TransformToVisual(Visual)
- uid: System.Windows.Media.Visual.VisualBitmapEffect
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualBitmapEffect
  nameWithType: Visual.VisualBitmapEffect
  fullName: System.Windows.Media.Visual.VisualBitmapEffect
- uid: System.Windows.Media.Effects.BitmapEffect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffect
  nameWithType: BitmapEffect
  fullName: System.Windows.Media.Effects.BitmapEffect
- uid: System.Windows.Media.Visual.VisualBitmapEffectInput
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualBitmapEffectInput
  nameWithType: Visual.VisualBitmapEffectInput
  fullName: System.Windows.Media.Visual.VisualBitmapEffectInput
- uid: System.Windows.Media.Effects.BitmapEffectInput
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffectInput
  nameWithType: BitmapEffectInput
  fullName: System.Windows.Media.Effects.BitmapEffectInput
- uid: System.Windows.Media.Visual.VisualBitmapScalingMode
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualBitmapScalingMode
  nameWithType: Visual.VisualBitmapScalingMode
  fullName: System.Windows.Media.Visual.VisualBitmapScalingMode
- uid: System.Windows.Media.BitmapScalingMode
  parent: System.Windows.Media
  isExternal: false
  name: BitmapScalingMode
  nameWithType: BitmapScalingMode
  fullName: System.Windows.Media.BitmapScalingMode
- uid: System.Windows.Media.Visual.VisualCacheMode
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualCacheMode
  nameWithType: Visual.VisualCacheMode
  fullName: System.Windows.Media.Visual.VisualCacheMode
- uid: System.Windows.Media.CacheMode
  parent: System.Windows.Media
  isExternal: false
  name: CacheMode
  nameWithType: CacheMode
  fullName: System.Windows.Media.CacheMode
- uid: System.Windows.Media.Visual.VisualChildrenCount
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualChildrenCount
  nameWithType: Visual.VisualChildrenCount
  fullName: System.Windows.Media.Visual.VisualChildrenCount
- uid: System.Windows.Media.Visual.VisualClearTypeHint
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualClearTypeHint
  nameWithType: Visual.VisualClearTypeHint
  fullName: System.Windows.Media.Visual.VisualClearTypeHint
- uid: System.Windows.Media.ClearTypeHint
  parent: System.Windows.Media
  isExternal: false
  name: ClearTypeHint
  nameWithType: ClearTypeHint
  fullName: System.Windows.Media.ClearTypeHint
- uid: System.Windows.Media.Visual.VisualClip
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualClip
  nameWithType: Visual.VisualClip
  fullName: System.Windows.Media.Visual.VisualClip
- uid: System.Windows.Media.Geometry
  parent: System.Windows.Media
  isExternal: false
  name: Geometry
  nameWithType: Geometry
  fullName: System.Windows.Media.Geometry
- uid: System.Windows.Media.Visual.VisualEdgeMode
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualEdgeMode
  nameWithType: Visual.VisualEdgeMode
  fullName: System.Windows.Media.Visual.VisualEdgeMode
- uid: System.Windows.Media.EdgeMode
  parent: System.Windows.Media
  isExternal: false
  name: EdgeMode
  nameWithType: EdgeMode
  fullName: System.Windows.Media.EdgeMode
- uid: System.Windows.Media.Visual.VisualEffect
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualEffect
  nameWithType: Visual.VisualEffect
  fullName: System.Windows.Media.Visual.VisualEffect
- uid: System.Windows.Media.Effects.Effect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: Effect
  nameWithType: Effect
  fullName: System.Windows.Media.Effects.Effect
- uid: System.Windows.Media.Visual.VisualOffset
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualOffset
  nameWithType: Visual.VisualOffset
  fullName: System.Windows.Media.Visual.VisualOffset
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Media.Visual.VisualOpacity
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualOpacity
  nameWithType: Visual.VisualOpacity
  fullName: System.Windows.Media.Visual.VisualOpacity
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Media.Visual.VisualOpacityMask
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualOpacityMask
  nameWithType: Visual.VisualOpacityMask
  fullName: System.Windows.Media.Visual.VisualOpacityMask
- uid: System.Windows.Media.Brush
  parent: System.Windows.Media
  isExternal: false
  name: Brush
  nameWithType: Brush
  fullName: System.Windows.Media.Brush
- uid: System.Windows.Media.Visual.VisualParent
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualParent
  nameWithType: Visual.VisualParent
  fullName: System.Windows.Media.Visual.VisualParent
- uid: System.Windows.Media.Visual.VisualScrollableAreaClip
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualScrollableAreaClip
  nameWithType: Visual.VisualScrollableAreaClip
  fullName: System.Windows.Media.Visual.VisualScrollableAreaClip
- uid: System.Nullable{System.Windows.Rect}
  parent: System
  isExternal: true
  name: Nullable<Rect>
  nameWithType: Nullable<Rect>
  fullName: System.Nullable<System.Windows.Rect>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Windows.Rect>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Media.Visual.VisualTextHintingMode
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualTextHintingMode
  nameWithType: Visual.VisualTextHintingMode
  fullName: System.Windows.Media.Visual.VisualTextHintingMode
- uid: System.Windows.Media.TextHintingMode
  parent: System.Windows.Media
  isExternal: false
  name: TextHintingMode
  nameWithType: TextHintingMode
  fullName: System.Windows.Media.TextHintingMode
- uid: System.Windows.Media.Visual.VisualTextRenderingMode
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualTextRenderingMode
  nameWithType: Visual.VisualTextRenderingMode
  fullName: System.Windows.Media.Visual.VisualTextRenderingMode
- uid: System.Windows.Media.TextRenderingMode
  parent: System.Windows.Media
  isExternal: false
  name: TextRenderingMode
  nameWithType: TextRenderingMode
  fullName: System.Windows.Media.TextRenderingMode
- uid: System.Windows.Media.Visual.VisualTransform
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualTransform
  nameWithType: Visual.VisualTransform
  fullName: System.Windows.Media.Visual.VisualTransform
- uid: System.Windows.Media.Transform
  parent: System.Windows.Media
  isExternal: false
  name: Transform
  nameWithType: Transform
  fullName: System.Windows.Media.Transform
- uid: System.Windows.Media.Visual.VisualXSnappingGuidelines
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualXSnappingGuidelines
  nameWithType: Visual.VisualXSnappingGuidelines
  fullName: System.Windows.Media.Visual.VisualXSnappingGuidelines
- uid: System.Windows.Media.DoubleCollection
  parent: System.Windows.Media
  isExternal: false
  name: DoubleCollection
  nameWithType: DoubleCollection
  fullName: System.Windows.Media.DoubleCollection
- uid: System.Windows.Media.Visual.VisualYSnappingGuidelines
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualYSnappingGuidelines
  nameWithType: Visual.VisualYSnappingGuidelines
  fullName: System.Windows.Media.Visual.VisualYSnappingGuidelines
- uid: System.Windows.Media.Visual.#ctor*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: Visual
  nameWithType: Visual.Visual
- uid: System.Windows.Media.Visual.AddVisualChild*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: AddVisualChild
  nameWithType: Visual.AddVisualChild
- uid: System.Windows.Media.Visual.FindCommonVisualAncestor*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: FindCommonVisualAncestor
  nameWithType: Visual.FindCommonVisualAncestor
- uid: System.Windows.Media.Visual.GetVisualChild*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: GetVisualChild
  nameWithType: Visual.GetVisualChild
- uid: System.Windows.Media.Visual.HitTestCore*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: HitTestCore
  nameWithType: Visual.HitTestCore
- uid: System.Windows.Media.Visual.IsAncestorOf*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: IsAncestorOf
  nameWithType: Visual.IsAncestorOf
- uid: System.Windows.Media.Visual.IsDescendantOf*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: IsDescendantOf
  nameWithType: Visual.IsDescendantOf
- uid: System.Windows.Media.Visual.OnDpiChanged*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: OnDpiChanged
  nameWithType: Visual.OnDpiChanged
- uid: System.Windows.Media.Visual.OnVisualChildrenChanged*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: OnVisualChildrenChanged
  nameWithType: Visual.OnVisualChildrenChanged
- uid: System.Windows.Media.Visual.OnVisualParentChanged*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: Visual.OnVisualParentChanged
- uid: System.Windows.Media.Visual.PointFromScreen*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: PointFromScreen
  nameWithType: Visual.PointFromScreen
- uid: System.Windows.Media.Visual.PointToScreen*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: PointToScreen
  nameWithType: Visual.PointToScreen
- uid: System.Windows.Media.Visual.RemoveVisualChild*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: RemoveVisualChild
  nameWithType: Visual.RemoveVisualChild
- uid: System.Windows.Media.Visual.TransformToAncestor*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToAncestor
  nameWithType: Visual.TransformToAncestor
- uid: System.Windows.Media.Visual.TransformToDescendant*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToDescendant
  nameWithType: Visual.TransformToDescendant
- uid: System.Windows.Media.Visual.TransformToVisual*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: TransformToVisual
  nameWithType: Visual.TransformToVisual
- uid: System.Windows.Media.Visual.VisualBitmapEffect*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualBitmapEffect
  nameWithType: Visual.VisualBitmapEffect
- uid: System.Windows.Media.Visual.VisualBitmapEffectInput*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualBitmapEffectInput
  nameWithType: Visual.VisualBitmapEffectInput
- uid: System.Windows.Media.Visual.VisualBitmapScalingMode*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualBitmapScalingMode
  nameWithType: Visual.VisualBitmapScalingMode
- uid: System.Windows.Media.Visual.VisualCacheMode*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualCacheMode
  nameWithType: Visual.VisualCacheMode
- uid: System.Windows.Media.Visual.VisualChildrenCount*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualChildrenCount
  nameWithType: Visual.VisualChildrenCount
- uid: System.Windows.Media.Visual.VisualClearTypeHint*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualClearTypeHint
  nameWithType: Visual.VisualClearTypeHint
- uid: System.Windows.Media.Visual.VisualClip*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualClip
  nameWithType: Visual.VisualClip
- uid: System.Windows.Media.Visual.VisualEdgeMode*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualEdgeMode
  nameWithType: Visual.VisualEdgeMode
- uid: System.Windows.Media.Visual.VisualEffect*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualEffect
  nameWithType: Visual.VisualEffect
- uid: System.Windows.Media.Visual.VisualOffset*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualOffset
  nameWithType: Visual.VisualOffset
- uid: System.Windows.Media.Visual.VisualOpacity*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualOpacity
  nameWithType: Visual.VisualOpacity
- uid: System.Windows.Media.Visual.VisualOpacityMask*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualOpacityMask
  nameWithType: Visual.VisualOpacityMask
- uid: System.Windows.Media.Visual.VisualParent*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualParent
  nameWithType: Visual.VisualParent
- uid: System.Windows.Media.Visual.VisualScrollableAreaClip*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualScrollableAreaClip
  nameWithType: Visual.VisualScrollableAreaClip
- uid: System.Windows.Media.Visual.VisualTextHintingMode*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualTextHintingMode
  nameWithType: Visual.VisualTextHintingMode
- uid: System.Windows.Media.Visual.VisualTextRenderingMode*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualTextRenderingMode
  nameWithType: Visual.VisualTextRenderingMode
- uid: System.Windows.Media.Visual.VisualTransform*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualTransform
  nameWithType: Visual.VisualTransform
- uid: System.Windows.Media.Visual.VisualXSnappingGuidelines*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualXSnappingGuidelines
  nameWithType: Visual.VisualXSnappingGuidelines
- uid: System.Windows.Media.Visual.VisualYSnappingGuidelines*
  parent: System.Windows.Media.Visual
  isExternal: false
  name: VisualYSnappingGuidelines
  nameWithType: Visual.VisualYSnappingGuidelines
