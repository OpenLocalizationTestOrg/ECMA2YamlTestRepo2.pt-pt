### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Verifica a existência de recursos de memória suficiente antes de executar uma operação. Esta classe não pode ser herdada."
  remarks: "> [!NOTE]> Esta classe destina-se no desenvolvimento avançado.       Criar uma instância da classe MemoryFailPoint cria uma porta de memória. Uma porta de memória verifica a existência de recursos suficientes antes de iniciar uma atividade que requer uma grande quantidade de memória. A efetuar a verificação resulta num <xref:System.InsufficientMemoryException>exceção que está a ser emitida.</xref:System.InsufficientMemoryException> Esta exceção impede que uma operação de que está a ser iniciado e reduz a possibilidade de falha devido à falta de recursos. Esta permite que a diminuir o desempenho para evitar um <xref:System.OutOfMemoryException>exceção e quaisquer danos de estado que poderão resultar de processamento incorrecto da exceção nas localizações arbitrários no seu código.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Este tipo implementa o <xref:System.IDisposable>interface.</xref:System.IDisposable> Quando tiver terminado com o tipo, deve eliminar-direta ou indiretamente. Para eliminar diretamente do tipo, chame o <xref:System.IDisposable.Dispose%2A>método um `try` / `catch` bloco.</xref:System.IDisposable.Dispose%2A> Para eliminar indiretamente dele, utilize uma construção de idioma, tais como `using` (em c#) ou `Using` (em Visual Basic). Para obter mais informações, consulte a secção &quot;Utilizar um objeto que implementa IDisposable&quot; o <xref:System.IDisposable>tópico de interface.</xref:System.IDisposable>       Ao gerar uma <xref:System.InsufficientMemoryException>exceção, uma aplicação pode distinguir entre uma estimativa que não será possível concluir uma operação e uma operação parcialmente concluída que pode ter danificado o estado da aplicação.</xref:System.InsufficientMemoryException> Isto permite que uma aplicação reduzir a frequência de uma política de escalamento pessimistic, que pode exigir o descarregamento atual <xref:System.AppDomain>ou poderá reciclar o processo.</xref:System.AppDomain>       MemoryFailPoint verifica se memória suficiente espaço de endereços virtual consecutivos estão disponíveis em todos os recolha de lixo heaps e pode aumentar o tamanho do ficheiro de troca.  MemoryFailPoint torna sem garantias sobre a disponibilidade de longo prazo da memória durante a duração da porta de, mas os chamadores devem sempre utilizar os <xref:System.Runtime.MemoryFailPoint.Dispose%2A>método para se certificar de que os recursos associados MemoryFailPoint são lançados.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Para utilizar uma porta de memória, tem de criar um objeto de MemoryFailPoint e especifique o número de megabytes (MB) de memória que a próxima operação poderá demorar a utilizar. Se não existe memória suficiente disponível um <xref:System.InsufficientMemoryException>exceção é emitida.</xref:System.InsufficientMemoryException>       O parâmetro do construtor tem de ser um número inteiro positivo. Um valor negativo desencadeia um <xref:System.ArgumentOutOfRangeException>exceção.</xref:System.ArgumentOutOfRangeException>       Funciona MemoryFailPoint granularidade de 16 MB. Os valores de tamanho inferior a 16 MB são tratados como 16 MB e outros valores são tratados como o múltiplo de maior seguinte de 16 MB."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> classe, especificando a quantidade de memória necessária para a execução com êxito."
  remarks: "A quantidade de memória utilizada pela sua aplicação para processar um item de trabalho pode ser determinada empirically.  Para estimar a quantidade de memória que a aplicação necessita de processar um pedido, considere utilizar o <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>método para determinar a quantidade de memória disponível antes e depois de chamar o método que processa o item de trabalho.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Consulte o <xref:System.Runtime.MemoryFailPoint>classe para um exemplo de código que dinamicamente determina o valor para o `sizeInMegabytes` parâmetro.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "O tamanho de memória necessária, em megabytes. Tem de ser um valor positivo."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O tamanho de memória especificado é negativo."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Não há memória suficiente para iniciar a execução de código protegido pela porta."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Versões de todos os recursos utilizados pelo <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "É possível chamar Dispose quando tiver terminado de utilizando <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> O método de Dispose deixa o <xref:System.Runtime.MemoryFailPoint>num Estado não utilizável.</xref:System.Runtime.MemoryFailPoint> Após a chamada <xref:System.Runtime.MemoryFailPoint>, tem de libertar todas as referências ao <xref:System.Runtime.MemoryFailPoint>para que o recoletor de lixo pode reclame a memória que a <xref:System.Runtime.MemoryFailPoint>foi occupying.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Para obter mais informações, consulte [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md) e [implementar um método eliminar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada eliminar antes de libertar a última referência <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> Caso contrário, os recursos que está a utilizar não irão ser libertados até que as chamadas de recoletor de lixo a <xref:System.Runtime.MemoryFailPoint>do objeto `Finalize` método.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Garante que os recursos são libertados e outras operações de limpeza são efetuadas quando o recoletor de lixo da memória reclama o <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> objeto."
  remarks: "O recoletor de lixo chama o método Finalize quando o objeto atual está pronto para ser finalizada."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
