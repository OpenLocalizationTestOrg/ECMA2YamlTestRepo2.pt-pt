### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1
  id: PartBuilder`1
  children:
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,`0}})
  langs:
  - csharp
  name: PartBuilder<T>
  nameWithType: PartBuilder<T>
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>
  type: Class
  syntax:
    content: 'public class PartBuilder<T> : System.ComponentModel.Composition.Registration.PartBuilder'
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.Object
  - System.ComponentModel.Composition.Registration.PartBuilder
  implements: []
  inheritedMembers:
  - System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})
  - System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)
  - System.ComponentModel.Composition.Registration.PartBuilder.Export
  - System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.Export``1
  - System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ExportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ExportProperty (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  id: ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ExportProperty (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter, Action<System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    - id: exportConfiguration
      type: System.Action{System.ComponentModel.Composition.Registration.ExportBuilder}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ExportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ExportProperty<TContract> (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty<TContract>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  id: ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ExportProperty<TContract> (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter, Action<System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    - id: exportConfiguration
      type: System.Action{System.ComponentModel.Composition.Registration.ExportBuilder}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty<TContract>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ImportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ImportProperty (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  id: ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ImportProperty (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter, Action<System.ComponentModel.Composition.Registration.ImportBuilder> importConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    - id: importConfiguration
      type: System.Action{System.ComponentModel.Composition.Registration.ImportBuilder}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ImportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ImportProperty<TContract> (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty<TContract>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  id: ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ImportProperty<TContract> (System.Linq.Expressions.Expression<Func<T,object>> propertyFilter, Action<System.ComponentModel.Composition.Registration.ImportBuilder> importConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
    - id: importConfiguration
      type: System.Action{System.ComponentModel.Composition.Registration.ImportBuilder}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty<TContract>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,`0}})
  id: SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,`0}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  langs:
  - csharp
  name: SelectConstructor(Expression<Func<ParameterImportBuilder,T>>)
  nameWithType: PartBuilder<T>.SelectConstructor(Expression<Func<ParameterImportBuilder,T>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.SelectConstructor(Expression<Func<ParameterImportBuilder,T>>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> SelectConstructor (System.Linq.Expressions.Expression<Func<System.ComponentModel.Composition.Registration.ParameterImportBuilder,T>> constructorFilter);
    parameters:
    - id: constructorFilter
      type: System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,T}}
      description: "To be added."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "To be added."
  overload: System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: System.ComponentModel.Composition.Registration.PartBuilder
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ExportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1
  parent: System.ComponentModel.Composition.Registration
  isExternal: false
  name: PartBuilder<T>
  nameWithType: PartBuilder<T>
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>
- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<T,Object>>
  nameWithType: Expression<Func<T,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<T,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<T,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
- uid: System.Action{System.ComponentModel.Composition.Registration.ExportBuilder}
  parent: System
  isExternal: true
  name: Action<ExportBuilder>
  nameWithType: Action<ExportBuilder>
  fullName: System.Action<System.ComponentModel.Composition.Registration.ExportBuilder>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.ComponentModel.Composition.Registration.ExportBuilder>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Registration.ExportBuilder
    name: ExportBuilder
    nameWithType: ExportBuilder
    fullName: ExportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ExportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  nameWithType: PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ExportProperty(Expression<Func<T,Object>>,Action<ExportBuilder>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ImportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
- uid: System.Action{System.ComponentModel.Composition.Registration.ImportBuilder}
  parent: System
  isExternal: true
  name: Action<ImportBuilder>
  nameWithType: Action<ImportBuilder>
  fullName: System.Action<System.ComponentModel.Composition.Registration.ImportBuilder>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.ComponentModel.Composition.Registration.ImportBuilder>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Registration.ImportBuilder
    name: ImportBuilder
    nameWithType: ImportBuilder
    fullName: ImportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ImportProperty(Expression<Func<T,Object>>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  nameWithType: PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.ImportProperty(Expression<Func<T,Object>>,Action<ImportBuilder>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,`0}})
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: SelectConstructor(Expression<Func<ParameterImportBuilder,T>>)
  nameWithType: PartBuilder<T>.SelectConstructor(Expression<Func<ParameterImportBuilder,T>>)
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>.SelectConstructor(Expression<Func<ParameterImportBuilder,T>>)
- uid: System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,T}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<ParameterImportBuilder,T>>
  nameWithType: Expression<Func<ParameterImportBuilder,T>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.ComponentModel.Composition.Registration.ParameterImportBuilder,T>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<System.ComponentModel.Composition.Registration.ParameterImportBuilder,T>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.ComponentModel.Composition.Registration.ParameterImportBuilder,T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Registration.ParameterImportBuilder
    name: ParameterImportBuilder
    nameWithType: ParameterImportBuilder
    fullName: ParameterImportBuilder
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty*
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ExportProperty
  nameWithType: PartBuilder<T>.ExportProperty
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty<TContract>*
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ExportProperty<TContract>
  nameWithType: PartBuilder<T>.ExportProperty<TContract>
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty*
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ImportProperty
  nameWithType: PartBuilder<T>.ImportProperty
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty<TContract>*
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: ImportProperty<TContract>
  nameWithType: PartBuilder<T>.ImportProperty<TContract>
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor*
  parent: System.ComponentModel.Composition.Registration.PartBuilder`1
  isExternal: false
  name: SelectConstructor
  nameWithType: PartBuilder<T>.SelectConstructor
