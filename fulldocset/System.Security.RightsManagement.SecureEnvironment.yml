### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.SecureEnvironment
  id: SecureEnvironment
  children:
  - System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  - System.Security.RightsManagement.SecureEnvironment.Dispose
  - System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  - System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  - System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.User
  langs:
  - csharp
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
  type: Class
  summary: "Represents a secure client session for user activation, license binding, and other rights management operations."
  remarks: "As with other <xref:System.Security.RightsManagement> types, SecureEnvironment is only usable in full trust applications."
  example:
  - "The following example shows use of the SecureEnvironment class  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class SecureEnvironment : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  id: ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets the ApplicationManifest specified when the <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref> was created."
  remarks: ''
  example:
  - "The following example shows use of the ApplicationManifest method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public string ApplicationManifest { get; }
    return:
      type: System.String
      description: "The application manifest specified to the <xref:System.Security.RightsManagement.SecureEnvironment.Create*> method when the <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref> is created."
  overload: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  id: Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Creates a secure client session for a specified user with a given rights manifest."
  remarks: "This Create method is intended for use with users that are already activated, such as provided in the list returned from <xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>.  Use the alternate <xref:System.Security.RightsManagement.SecureEnvironment.Create%2A> method for users that are not yet activated."
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "The application rights manifest."
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "The user or user-group for granting access to rights managed content."
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "A secure client session for activation, license binding, and other rights management operations."
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  id: Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Creates a secure client session given an application rights manifest, <xref href=&quot;System.Security.RightsManagement.AuthenticationType&quot;></xref>, and <xref href=&quot;System.Security.RightsManagement.UserActivationMode&quot;></xref>."
  remarks: "This Create method is intended for new users that are not yet activated.       Activating a new user includes a roundtrip server transaction to obtain the User Certificate and Client License Certificate.       The alternate <xref:System.Security.RightsManagement.SecureEnvironment.Create%2A> method can be used if a user is already activated, such as provided in the list returned from <xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>."
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.AuthenticationType authentication, System.Security.RightsManagement.UserActivationMode userActivationMode);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "The application rights manifest."
    - id: authentication
      type: System.Security.RightsManagement.AuthenticationType
      description: "The method of authentication."
    - id: userActivationMode
      type: System.Security.RightsManagement.UserActivationMode
      description: "The type of the user rights account certificate."
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "A secure client session for activation, license binding, and other rights management operations."
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Releases all resources used by the <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>."
  remarks: "The application should call Dispose when finished with the <xref:System.Security.RightsManagement.SecureEnvironment>.  After Dispose is called, resources allocated to the <xref:System.Security.RightsManagement.SecureEnvironment> are reclaimed by the garbage collector.  For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before the last reference to the <xref:System.Security.RightsManagement.SecureEnvironment> is released.  If Dispose is not called, resources allocated to the <xref:System.Security.RightsManagement.SecureEnvironment> will not be freed until the garbage collector calls the instance&quot;s <xref:System.Object.Finalize%2A> method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public <xref:System.Security.RightsManagement.SecureEnvironment.Dispose> method and the <xref:System.Object.Finalize%2A> method. <xref:System.Security.RightsManagement.SecureEnvironment.Dispose> invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.RightsManagement.SecureEnvironment> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  id: GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Returns a list of the activated users."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser> GetActivatedUsers ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
      description: "A list of the currently activated users."
  overload: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  id: IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Indicates whether a given user has been activated for accessing rights managed content."
  remarks: ''
  example:
  - "The following example shows use of the IsUserActivated method to determine if given user has been authorized to access rights managed content.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static bool IsUserActivated (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "The user or user-group for granting access to rights managed content."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the given <code>user</code> has been activated for accessing rights managed content; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  id: RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Removes the license activation for a specified user."
  remarks: "The user authentication must be performed either with Windows authentication or Passport authentication."
  syntax:
    content: public static void RemoveActivatedUser (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "The user to remove the license activation for."
  overload: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>user</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The given <code>user</code> is not authenticated with either Windows authentication or Passport authentication."
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.User
  id: User
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets the user or user-group specified when the <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref> was created."
  remarks: ''
  example:
  - "The following example shows use of the User property  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewsecenv)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewsecenv)]"
  syntax:
    content: public System.Security.RightsManagement.ContentUser User { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "The user or user-group specified to the <xref:System.Security.RightsManagement.SecureEnvironment.Create*> method when the <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref> was created."
  overload: System.Security.RightsManagement.SecureEnvironment.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.ContentUser
  parent: System.Security.RightsManagement
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
- uid: System.Security.RightsManagement.AuthenticationType
  parent: System.Security.RightsManagement
  isExternal: false
  name: AuthenticationType
  nameWithType: AuthenticationType
  fullName: System.Security.RightsManagement.AuthenticationType
- uid: System.Security.RightsManagement.UserActivationMode
  parent: System.Security.RightsManagement
  isExternal: false
  name: UserActivationMode
  nameWithType: UserActivationMode
  fullName: System.Security.RightsManagement.UserActivationMode
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentUser>
  nameWithType: ReadOnlyCollection<ContentUser>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentUser
    name: ContentUser
    nameWithType: ContentUser
    fullName: ContentUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.User
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
- uid: System.Security.RightsManagement.SecureEnvironment.Create*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create
  nameWithType: SecureEnvironment.Create
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose
  nameWithType: SecureEnvironment.Dispose
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers
  nameWithType: SecureEnvironment.GetActivatedUsers
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated
  nameWithType: SecureEnvironment.IsUserActivated
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser
  nameWithType: SecureEnvironment.RemoveActivatedUser
- uid: System.Security.RightsManagement.SecureEnvironment.User*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
