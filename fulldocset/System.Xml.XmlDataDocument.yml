### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDataDocument
  id: XmlDataDocument
  children:
  - System.Xml.XmlDataDocument.#ctor
  - System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  - System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDataDocument.DataSet
  - System.Xml.XmlDataDocument.GetElementById(System.String)
  - System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  - System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  - System.Xml.XmlDataDocument.Load(System.IO.Stream)
  - System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDataDocument.Load(System.String)
  - System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  langs:
  - csharp
  name: XmlDataDocument
  nameWithType: XmlDataDocument
  fullName: System.Xml.XmlDataDocument
  type: Class
  summary: "Permite dados estruturados armazenados, obter e manipular através de um relacional <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Esta classe expande <xref:System.Xml.XmlDocument>.</xref:System.Xml.XmlDocument> Permite-lhe carregar dados relacionais ou dados XML e manipular os dados utilizando o Consortium World Wide Web (W3C) documento Object Model (DOM). O DOM apresenta dados como uma hierarquia de objetos do nó. Porque `XmlDataDocument` implementa o <xref:System.Xml.XPath.IXPathNavigable>interface, também pode ser utilizado como o documento de origem para a <xref:System.Xml.Xsl.XslTransform>classe</xref:System.Xml.Xsl.XslTransform> </xref:System.Xml.XPath.IXPathNavigable>       `XmlDataDocument`tem uma fechada afiliação com o `DataSet` classe, que fornece uma vista relacional dos dados XML carregados. Todas as alterações efetuadas a `XmlDataDocument` são refletidas no `DataSet` e vice-versa.       Carregar um `DataSet` com dados XML, utilize <xref:System.Data.DataSet.ReadXmlSchema%2A>para criar um mapeamento relacional.</xref:System.Data.DataSet.ReadXmlSchema%2A> Em seguida, é possível carregar os dados XML utilizando <xref:System.Xml.XmlDataDocument.Load%2A>ou <xref:System.Xml.XmlDocument.LoadXml%2A>.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDataDocument.Load%2A>       Para carregar dados relacionais, especifique o `DataSet` que contém os dados relacionais, como o parâmetro no <xref:System.Xml.XmlDataDocument.%23ctor%2A>construtor.</xref:System.Xml.XmlDataDocument.%23ctor%2A>"
  syntax:
    content: >-
      [System.Obsolete("XmlDataDocument class will be removed in a future release.")]

      public class XmlDataDocument : System.Xml.XmlDocument
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlDocument
  implements: []
  inheritedMembers:
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> classe."
  remarks: "Vazio <xref:System.Data.DataSet>é criado e associadas a `XmlDataDocument`.</xref:System.Data.DataSet>"
  syntax:
    content: public XmlDataDocument ();
    parameters: []
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  id: '#ctor(System.Data.DataSet)'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> classe com especificado <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "O `XmlDataDocument` está sincronizado com especificado `DataSet`. Nenhum dado no `DataSet` está imediatamente disponível através de `XmlDataDocument`. Todas as alterações a `DataSet` são propagadas no `XmlDataDocument`. Todas as alterações efetuadas a `XmlDataDocument`, desde que correspondem a `DataSet` esquema, são propagadas no `DataSet`."
  example:
  - "The following example loads a customer table into an `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_0_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_0_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_0_1.vb)]"
  syntax:
    content: public XmlDataDocument (System.Data.DataSet dataset);
    parameters:
    - id: dataset
      type: System.Data.DataSet
      description: "The <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref> to load into <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Cria um duplicado do nó atual."
  remarks: "Clonagem de `XmlDataDocument` clones também o <xref:System.Data.DataSet>esquema.</xref:System.Data.DataSet>       Se `deep` está definido como `false`, o clonado `DataSet` tem sem dados; não existem linhas.       Se `deep` está definido como `true`, o clonado `DataSet` está definido com o esquema e, em seguida, é preenchido com os dados.       Consulte <xref:System.Xml.XmlNode.CloneNode%2A>no `XmlNode` classe para ver uma tabela que descreve a forma como este método se comporta com cada um dos tipos de nó diferente.</xref:System.Xml.XmlNode.CloneNode%2A>"
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_4_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_4_1.vb)]\n [!code-cs[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_4_1.cs)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para recursivamente clonar subárvore sob o nó especificado; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para clonar apenas o próprio nó."
    return:
      type: System.Xml.XmlNode
      description: "O nó clonado."
  overload: System.Xml.XmlDataDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Cria um elemento com especificado <> </> *>, <> </> *> e <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`Note to Inheritors`Se a esta função de sobrecarga, não pode ser utilizada extensibilidade. Em vez disso, pode devolver um elemento criado pela classe base, neste caso, `XmlDataDocument`. Veja o seguinte exemplo:      ```   class MyXmlDataDocument : XmlDataDocument {    public override XmlElement CreateElement(string prefix, string localName, string nsURI) {      //Ensure we are returning the base class implementation of element.      XmlElement e = base.CreateElement(prefix, localName, nsURI);      //Add additional code here.      return e;    //Return the element created by XmlDataDocument.    }       }   ```"
  syntax:
    content: public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "O prefixo do elemento de novo. Se String.Empty ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, houver um prefixo."
    - id: localName
      type: System.String
      description: "O nome local do elemento de novo."
    - id: namespaceURI
      type: System.String
      description: "O espaço de nomes de identificador de recurso Uniform (URI) do elemento novo. Se String.Empty ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, há não existe qualquer namespaceURI."
    return:
      type: System.Xml.XmlElement
      description: "A new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDataDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> com o nome especificado."
  remarks: "<xref:System.Xml.XmlEntityReference>não não possível criar nós <xref:System.Xml.XmlDataDocument>objetos.</xref:System.Xml.XmlDataDocument></xref:System.Xml.XmlEntityReference> Chamar este método emite uma exceção."
  syntax:
    content: public override System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome da referência de entidade."
    return:
      type: System.Xml.XmlEntityReference
      description: "Um <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> com o nome especificado."
  overload: System.Xml.XmlDataDocument.CreateEntityReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Chamar este método."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Cria uma nova <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objeto para navegar neste documento. O <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> está posicionado no nó especificado no <code> node </code> parâmetro."
  remarks: "O `XPathNavigator` fornece acesso só de leitura, aleatório aos dados. Porque está otimizado para transformações de XSLT, fornece benefícios de desempenho quando utilizado como um mecanismo de entrada para o <xref:System.Xml.Xsl.XslTransform.Transform%2A>método.</xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  example:
  - To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.
  syntax:
    content: protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "O <xref href=&quot;System.Xml.XmlNode&quot;> </xref> pretender inicialmente posicionado no navegador."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "Um <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> utilizado para navegar o documento."
  overload: System.Xml.XmlDataDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.DataSet
  id: DataSet
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Obtém um <xref href=&quot;System.Data.DataSet&quot;> </xref> que fornece uma representação relacional dos dados no <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>."
  remarks: "O `DataSet` permite-lhe aceder aos dados a `XmlDataDocument` através de um modelo relacional. Isto significa que pode processar os dados como tabelas e vistas, linhas e colunas, relações e assim sucessivamente. As alterações efetuadas a `DataSet` são imediatamente visíveis no `XmlDataDocument`."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/cpp/p-system.xml.xmldatadocu_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/csharp/p-system.xml.xmldatadocu_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldatadocu_1.vb)]  \n  \n The example uses the following two files as input.  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/p-system.xml.xmldatadocu_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/p-system.xml.xmldatadocu_3.xml)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "A <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> que podem ser utilizados para aceder aos dados a <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> através de um modelo relacional."
  overload: System.Xml.XmlDataDocument.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Obtém o <xref href=&quot;System.Xml.XmlElement&quot;> </xref> com o ID especificado. Este método não é suportado pelo <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> classe. Chamar este método emite uma exceção."
  remarks: "Este método não é suportado pela <xref:System.Xml.XmlDataDocument>classe.</xref:System.Xml.XmlDataDocument>"
  syntax:
    content: public override System.Xml.XmlElement GetElementById (string elemId);
    parameters:
    - id: elemId
      type: System.String
      description: "O ID de atributo para corresponder."
    return:
      type: System.Xml.XmlElement
      description: "Um <xref href=&quot;System.Xml.XmlElement&quot;> </xref> com o ID especificado."
  overload: System.Xml.XmlDataDocument.GetElementById*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Chamar este método."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  id: GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Obtém o <xref href=&quot;System.Xml.XmlElement&quot;> </xref> associado especificado <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: ''
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cs[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_1_1.cs)]\n [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_1_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);
    parameters:
    - id: r
      type: System.Data.DataRow
      description: "O <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> cujo associado <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> pretende obter."
    return:
      type: System.Xml.XmlElement
      description: "O <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> que contém uma representação de especificado <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDataDocument.GetElementFromRow*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Devolve um <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> que contém uma lista de todos os elementos subordinados que correspondem a <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> especificado"
  remarks: >-
    > [!NOTE]

    >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method.
  syntax:
    content: public override System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome qualificado para corresponder. Este é comparado com o <> </> *> propriedade do nó correspondente. O valor especial &quot;*&quot; corresponde a todas as etiquetas."
    return:
      type: System.Xml.XmlNodeList
      description: "Um <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> que contém uma lista de todos os nós correspondentes."
  overload: System.Xml.XmlDataDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  id: GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Obtém o <xref href=&quot;System.Data.DataRow&quot;> </xref> associado especificado <xref href=&quot;System.Xml.XmlElement&quot;> </xref>."
  remarks: ''
  example:
  - "The following example modifies the price of the first book.  \n  \n [!code-cs[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_2_1.cs)]\n [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_2_1.cpp)]\n [!code-vb[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_2_1.vb)]  \n  \n The example uses the following input files:  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_3.xml)]"
  syntax:
    content: public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);
    parameters:
    - id: e
      type: System.Xml.XmlElement
      description: "O <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> cujo associado <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> pretende obter."
    return:
      type: System.Data.DataRow
      description: "O <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> que contém uma representação do <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>; <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhuma <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> associados a <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDataDocument.GetRowFromElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carrega a <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> do fluxo especificado."
  remarks: "`XmlDataDocument`não suporta a criação de referências de entidade. Se os dados incluem referências de entidade, o `Load` método resolve e expande quaisquer referências de entidade.      > [!NOTE] > Para visualizar os dados XML relationally, primeiro tem de especificar um esquema a utilizar para o mapeamento de dados. Isto pode ser feito por chamar a <xref:System.Data.DataSet.ReadXmlSchema%2A>método ou ao criar as tabelas e colunas dentro de `DataSet` manualmente.</xref:System.Data.DataSet.ReadXmlSchema%2A> Este passo tem de ser efetuado antes de chamar `Load`."
  syntax:
    content: public override void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "O fluxo que contém o documento XML ao carregar."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carrega a <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> de <xref:System.IO.TextReader>.</xref:System.IO.TextReader> especificado"
  remarks: "`XmlDataDocument`não suporta a criação de referências de entidade. Se os dados incluem referências de entidade, o `Load` método resolve e expande quaisquer referências de entidade.      > [!NOTE] > Para visualizar os dados XML relationally, primeiro tem de especificar um esquema a utilizar para o mapeamento de dados. Isto pode ser feito por chamar a <xref:System.Data.DataSet.ReadXmlSchema%2A>método ou ao criar as tabelas e colunas dentro de `DataSet` manualmente.</xref:System.Data.DataSet.ReadXmlSchema%2A> Este passo tem de ser efetuado antes de chamar `Load`."
  syntax:
    content: public override void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "O <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> utilizado para os dados XML do feed no documento."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carrega a <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> utilizando o URL especificado."
  remarks: "`XmlDataDocument`não suporta a criação de referências de entidade. Se os dados incluem referências de entidade, o `Load` método resolve e expande quaisquer referências de entidade.      > [!NOTE] > Para visualizar os dados XML relationally, primeiro tem de especificar um esquema a utilizar para o mapeamento de dados. Isto pode ser feito por chamar a <xref:System.Data.DataSet.ReadXmlSchema%2A>método ou ao criar as tabelas e colunas dentro de `DataSet` manualmente.</xref:System.Data.DataSet.ReadXmlSchema%2A> Este passo tem de ser efetuado antes de chamar `Load`."
  syntax:
    content: public override void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "O URL do ficheiro que contém o documento XML a carregar."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carrega a <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> de <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> especificado"
  remarks: "`XmlDataDocument`não suporta a criação de referências de entidade. Se a origem de dados contém referências de entidade, terá de criar um <xref:System.Xml.XmlValidatingReader>com o <xref:System.Xml.XmlValidatingReader.EntityHandling%2A>propriedade definida como ExpandEntities (este é o comportamento predefinido) e passar o `XmlValidatingReader` para o `Load` método.</xref:System.Xml.XmlValidatingReader.EntityHandling%2A> </xref:System.Xml.XmlValidatingReader> Se não utilizar um `XmlValidatingReader`, a `Load` método emite uma exceção.       O `Load` método sempre preserva espaço em branco significativo. O <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>propriedade determina se é ou não o espaço em branco é preservado.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> A predefinição é `false`, espaço em branco não é preservado.       Se o leitor estiver no estado inicial (ou seja, ReadState=ReadState.Initial) `Load` consome todo o conteúdo de leitor e cria o DOM do que encontra.       Se o leitor já está posicionado no alguns nós em profundidade &quot;n&quot;, em seguida, este método carrega esse nó e todos os colaterais subsequentes até a tag de fim que fecha profundidade &quot;n&quot;. Isto tem os seguintes resultados.       Se o nó atual e respectivas seguintes ter um aspeto semelhantes ao seguinte: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` emite uma exceção, porque um documento não pode ter dois elementos de nível de raiz.        Se o nó atual e respectivas seguintes ter um aspeto semelhantes ao seguinte: ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ``` `Load` será bem sucedida; no entanto, terá de uma árvore de DOM incompleta, porque não existe nenhum elemento de nível de raiz.        Tem de adicionar um elemento de nível de raiz antes de guardar o documento; caso contrário, o <xref:System.Xml.XmlDocument.Save%2A>método emite uma exceção.</xref:System.Xml.XmlDocument.Save%2A>       Se o leitor está posicionado num nó de folha que não é válido para o nível de raiz de um documento (por exemplo, um branco espaço ou atributo nó), o leitor continua a ler até está posicionado num nó que pode ser utilizado para a raiz. O documento começa carregar neste momento."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[XmlDataDocument.Load#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_3_1.cpp)]\n [!code-cs[XmlDataDocument.Load#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_3_1.cs)]\n [!code-vb[XmlDataDocument.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_3_1.vb)]  \n  \n The example uses the following two input files.  \n  \n `2books.xml`  \n  \n [!code-xml[XmlDataDocument.Load#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[XmlDataDocument.Load#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_3.xsd)]"
  syntax:
    content: public override void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> que contém o documento XML ao carregar."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O XML que está a ser carregado contém referências de entidade e o leitor não é possível resolver a entidades."
  platform:
  - net462
references:
- uid: System.Xml.XmlDocument
  isExternal: false
  name: System.Xml.XmlDocument
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Xml.XmlDataDocument.#ctor
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDataDocument.DataSet
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDataDocument.Load(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDataDocument.#ctor*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument
  nameWithType: XmlDataDocument.XmlDataDocument
- uid: System.Xml.XmlDataDocument.CloneNode*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDataDocument.CloneNode
- uid: System.Xml.XmlDataDocument.CreateElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDataDocument.CreateElement
- uid: System.Xml.XmlDataDocument.CreateEntityReference*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDataDocument.CreateEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDataDocument.CreateNavigator
- uid: System.Xml.XmlDataDocument.DataSet*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDataDocument.GetElementById
- uid: System.Xml.XmlDataDocument.GetElementFromRow*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow
  nameWithType: XmlDataDocument.GetElementFromRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDataDocument.GetElementsByTagName
- uid: System.Xml.XmlDataDocument.GetRowFromElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement
  nameWithType: XmlDataDocument.GetRowFromElement
- uid: System.Xml.XmlDataDocument.Load*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load
  nameWithType: XmlDataDocument.Load
