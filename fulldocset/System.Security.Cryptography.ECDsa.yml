### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsa
  id: ECDsa
  children:
  - System.Security.Cryptography.ECDsa.#ctor
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
  type: Class
  summary: "Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA)."
  remarks: "This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations."
  syntax:
    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.ECDsa&quot;></xref> class."
  remarks: "This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. You may provide your own custom implementation."
  syntax:
    content: protected ECDsa ();
    parameters: []
  overload: System.Security.Cryptography.ECDsa.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create
  id: Create
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA)."
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDsa
      description: "A new instance of the default implementation (<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>) of this class."
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA)."
  remarks: "If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation.       If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created."
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:  \n  \n \\- \"ECDsa\"  \n  \n \\- \"ECDsaCng\"  \n  \n \\- \"System.Security.Cryptography.ECDsaCng\"  \n  \n You can also provide the name of a custom ECDSA implementation."
    return:
      type: System.Security.Cryptography.ECDsa
      description: "A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm."
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "The binary stream to hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The algorithm to use to hash the data."
    return:
      type: System.Byte[]
      description: "The hashed data."
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "A derived class must override this method."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm."
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The data to be hashed."
    - id: offset
      type: System.Int32
      description: "The index of the first byte in `data` to be hashed."
    - id: count
      type: System.Int32
      description: "The number of bytes to hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The algorithm to use to hash the data."
    return:
      type: System.Byte[]
      description: "The hashed data."
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "A derived class must override this method."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets the name of the key exchange algorithm."
  remarks: "This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.       The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets the name of the signature algorithm."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "The string &quot;ECDsa&quot;."
  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value."
  syntax:
    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The input data for which to compute the hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm to use to create the hash value."
    return:
      type: System.Byte[]
      description: "The ECDSA signature for the specified data."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value."
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "The input stream for which to compute the hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm to use to create the hash value."
    return:
      type: System.Byte[]
      description: "The ECDSA signature for the specified data."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value."
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The input data for which to compute the hash."
    - id: offset
      type: System.Int32
      description: "The offset into the array at which to begin using data."
    - id: count
      type: System.Int32
      description: "The number of bytes in the array to use as data."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm to use to create the hash value."
    return:
      type: System.Byte[]
      description: "The ECDSA signature for the specified data."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than zero.       -or-       <code>count</code> is less than zero.       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Generates a digital signature for the specified hash value."
  syntax:
    content: public abstract byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "The hash value of the data that is being signed."
    return:
      type: System.Byte[]
      description: "A digital signature that consists of the given hash value encrypted with the private key."
  overload: System.Security.Cryptography.ECDsa.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>hash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature."
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The signed data."
    - id: signature
      type: System.Byte[]
      description: "The signature data to be verified."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm used to create the hash value of the data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the signature is valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature."
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "The signed data."
    - id: signature
      type: System.Byte[]
      description: "The signature data to be verified."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm used to create the hash value of the data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the signature is valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature."
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The signed data."
    - id: offset
      type: System.Int32
      description: "The starting index at which to compute the hash."
    - id: count
      type: System.Int32
      description: "The number of bytes to hash."
    - id: signature
      type: System.Byte[]
      description: "The signature data to be verified."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm used to create the hash value of the data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the signature is valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than zero.       -or-       <code>count</code> is less than zero.       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Verifies a digital signature against the specified hash value."
  remarks: "The signature is first decrypted by using the public key, and then compared to the hash value for verification."
  syntax:
    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "The hash value of a block of data."
    - id: signature
      type: System.Byte[]
      description: "The digital signature to be verified."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the hash value equals the decrypted signature; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyHash*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDsa.#ctor
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
- uid: System.Security.Cryptography.ECDsa.Create
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
- uid: System.Security.Cryptography.ECDsa.#ctor*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create
  nameWithType: ECDsa.Create
- uid: System.Security.Cryptography.ECDsa.HashData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData
  nameWithType: ECDsa.HashData
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData
  nameWithType: ECDsa.SignData
- uid: System.Security.Cryptography.ECDsa.SignHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash
  nameWithType: ECDsa.SignHash
- uid: System.Security.Cryptography.ECDsa.VerifyData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData
  nameWithType: ECDsa.VerifyData
- uid: System.Security.Cryptography.ECDsa.VerifyHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsa.VerifyHash
