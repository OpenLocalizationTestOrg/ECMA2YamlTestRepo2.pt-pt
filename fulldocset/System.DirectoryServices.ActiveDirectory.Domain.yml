### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.ActiveDirectory.Domain
  id: Domain
  children:
  - System.DirectoryServices.ActiveDirectory.Domain.Children
  - System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  - System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  - System.DirectoryServices.ActiveDirectory.Domain.DomainControllers
  - System.DirectoryServices.ActiveDirectory.Domain.DomainMode
  - System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel
  - System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers
  - System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers
  - System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.FindDomainController
  - System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions)
  - System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String,System.DirectoryServices.ActiveDirectory.LocatorOptions)
  - System.DirectoryServices.ActiveDirectory.Domain.Forest
  - System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships
  - System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain
  - System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain
  - System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry
  - System.DirectoryServices.ActiveDirectory.Domain.GetDomain(System.DirectoryServices.ActiveDirectory.DirectoryContext)
  - System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner
  - System.DirectoryServices.ActiveDirectory.Domain.Parent
  - System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner
  - System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode)
  - System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(System.Int32)
  - System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  - System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner
  - System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)
  - System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)
  - System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  - System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(System.String)
  - System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  langs:
  - csharp
  name: Domain
  nameWithType: Domain
  fullName: System.DirectoryServices.ActiveDirectory.Domain
  type: Class
  summary: "The Domain class represents an Active Directory domain."
  syntax:
    content: 'public class Domain : System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition'
  inheritance:
  - System.Object
  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition
  implements: []
  inheritedMembers:
  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition.Dispose
  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition.Dispose(System.Boolean)
  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition.Name
  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition.ToString
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.Children
  id: Children
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: Children
  nameWithType: Domain.Children
  fullName: System.DirectoryServices.ActiveDirectory.Domain.Children
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the domains that are children of this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainCollection Children { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainCollection
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainCollection&quot;></xref> object that contains the child domains."
  overload: System.DirectoryServices.ActiveDirectory.Domain.Children*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  id: CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: CreateLocalSideOfTrustRelationship(String,TrustDirection,String)
  nameWithType: Domain.CreateLocalSideOfTrustRelationship(String,TrustDirection,String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(String,TrustDirection,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Creates the local side of a trust relationship with the specified domain."
  remarks: "This method creates one side of a trust relationship. The trust is not established until both sides of the trust have been created.       The `trustPassword` parameter associates a password with the created trust. When the other side of the trust is created, the same password is provided and the two local trusts are then bound to each other.       To programmatically create both sides of a trust relationship in a single method call, use the <xref:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship%2A?displayProperty=fullName> method."
  syntax:
    content: public void CreateLocalSideOfTrustRelationship (string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain that the trust is created with."
    - id: direction
      type: System.DirectoryServices.ActiveDirectory.TrustDirection
      description: "One of the <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> members that determines the direction of the trust, relative to this domain."
    - id: trustPassword
      type: System.String
      description: "The password for the trust. See remarks below."
  overload: System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException
    description: "The trust relationship already exists."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> or <code>trustPassword</code> is empty."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> or <code>trustPassword</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>direction</code> is not a valid <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  id: CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: CreateTrustRelationship(Domain,TrustDirection)
  nameWithType: Domain.CreateTrustRelationship(Domain,TrustDirection)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(Domain,TrustDirection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Creates both sides of a trust relationship with the specified domain."
  remarks: "This method creates both sides of a trust relationship with a single method call. The <xref:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship%2A?displayProperty=fullName> method is used to create only one side of a trust."
  syntax:
    content: public void CreateTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
    parameters:
    - id: targetDomain
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain that the trust is being created with."
    - id: direction
      type: System.DirectoryServices.ActiveDirectory.TrustDirection
      description: "One of the <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> members that determines the direction of the trust, relative to this domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException
    description: "The trust relationship already exists."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>direction</code> is not a valid <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)
  id: DeleteLocalSideOfTrustRelationship(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: DeleteLocalSideOfTrustRelationship(String)
  nameWithType: Domain.DeleteLocalSideOfTrustRelationship(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Deletes the local side of a trust relationship."
  remarks: "When one side of a trust relationship is deleted, the trust longer exists.       To delete both sides of a trust relationship with one method call, use the <xref:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship%2A?displayProperty=fullName> method."
  syntax:
    content: public void DeleteLocalSideOfTrustRelationship (string targetDomainName);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain that the trust exists with."
  overload: System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> that is specified by the <code>targetDomainName</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  id: DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: DeleteTrustRelationship(Domain)
  nameWithType: Domain.DeleteTrustRelationship(Domain)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(Domain)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Deletes both sides of a trust relationship."
  remarks: "To delete only one side of a trust relationship, use the <xref:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship%2A?displayProperty=fullName> method."
  syntax:
    content: public void DeleteTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain);
    parameters:
    - id: targetDomain
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain that the trust exists with."
  overload: System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the specified <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref>."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainControllers
  id: DomainControllers
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: DomainControllers
  nameWithType: Domain.DomainControllers
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DomainControllers
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the domain controllers in this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainControllerCollection&quot;></xref> object that contains the domain controllers in this domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.DomainControllers*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainMode
  id: DomainMode
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: DomainMode
  nameWithType: Domain.DomainMode
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DomainMode
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the mode that this domain is operating in."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainMode DomainMode { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainMode
      description: "One of the <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainMode&quot;></xref> values that indicates the mode that this domain is operating in."
  overload: System.DirectoryServices.ActiveDirectory.Domain.DomainMode*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel
  id: DomainModeLevel
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: DomainModeLevel
  nameWithType: Domain.DomainModeLevel
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the mode level that this domain is operating in."
  syntax:
    content: public int DomainModeLevel { get; }
    return:
      type: System.Int32
      description: "The domain mode level."
  overload: System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers
  id: FindAllDiscoverableDomainControllers
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindAllDiscoverableDomainControllers()
  nameWithType: Domain.FindAllDiscoverableDomainControllers()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds all of the discoverable domain controllers in this domain."
  remarks: "You can find discoverable domain controllers by querying DNS SRV records. Only those domain controllers that register the generic, non-site-specific, domain controller SRV record will be returned by this method."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers ();
    parameters: []
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainControllerCollection&quot;></xref> that contains the domain controller objects that were found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(System.String)
  id: FindAllDiscoverableDomainControllers(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindAllDiscoverableDomainControllers(String)
  nameWithType: Domain.FindAllDiscoverableDomainControllers(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds all of the discoverable domain controllers in this domain that are also in the specified site."
  remarks: "You can find discoverable domain controllers by querying DNS SRV records.  If a domain controller does not register an SRV record for the specified site, it will not be returned by this method, even if the domain controller is physically located within that site.       All domain controllers that register an SRV record for the specified site will be returned by this method, even if they are not physically located within that site."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers (string siteName);
    parameters:
    - id: siteName
      type: System.String
      description: "The name of the site to search for the domain controllers."
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainControllerCollection&quot;></xref> that contains the domain controller objects that were found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>siteName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>siteName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers
  id: FindAllDomainControllers
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindAllDomainControllers()
  nameWithType: Domain.FindAllDomainControllers()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds all of the domain controllers in this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers ();
    parameters: []
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainControllerCollection&quot;></xref> that contains the domain controller objects that were found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(System.String)
  id: FindAllDomainControllers(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindAllDomainControllers(String)
  nameWithType: Domain.FindAllDomainControllers(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds all of the domain controllers in this domain that are also in the specified site."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers (string siteName);
    parameters:
    - id: siteName
      type: System.String
      description: "The name of the site to search for the domain controllers."
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainControllerCollection&quot;></xref> that contains the domain controller objects that were found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>siteName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>siteName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController
  id: FindDomainController
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindDomainController()
  nameWithType: Domain.FindDomainController()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds any domain controller in this domain."
  remarks: "This method finds any domain controller in the domain. There is no guarantee that the same domain controller will be found by another call to this method."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController ();
    parameters: []
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> that represents the domain controller that is found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A domain controller cannot be located."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions)
  id: FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindDomainController(LocatorOptions)
  nameWithType: Domain.FindDomainController(LocatorOptions)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(LocatorOptions)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds a domain controller in this domain that meets the specified criteria."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
    parameters:
    - id: flag
      type: System.DirectoryServices.ActiveDirectory.LocatorOptions
      description: "A combination of one or more of the <xref href=&quot;System.DirectoryServices.ActiveDirectory.LocatorOptions&quot;></xref> members that defines the type of domain controller to find."
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> that represents the domain controller that is found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A domain controller cannot be located."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>flag</code> parameter contains an invalid value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String)
  id: FindDomainController(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindDomainController(String)
  nameWithType: Domain.FindDomainController(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds a domain controller in this domain and in the specified site."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (string siteName);
    parameters:
    - id: siteName
      type: System.String
      description: "The name of the site to search for the domain controller."
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> object that represents the domain controller that is found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A domain controller cannot be located."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>siteName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>siteName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String,System.DirectoryServices.ActiveDirectory.LocatorOptions)
  id: FindDomainController(System.String,System.DirectoryServices.ActiveDirectory.LocatorOptions)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: FindDomainController(String,LocatorOptions)
  nameWithType: Domain.FindDomainController(String,LocatorOptions)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(String,LocatorOptions)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Finds a domain controller in this domain and in the specified site that meets the specified criteria."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);
    parameters:
    - id: siteName
      type: System.String
      description: "The name of the site to search for the domain controller."
    - id: flag
      type: System.DirectoryServices.ActiveDirectory.LocatorOptions
      description: "A combination of one or more of the <xref href=&quot;System.DirectoryServices.ActiveDirectory.LocatorOptions&quot;></xref> members that defines the type of domain controller to find."
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> object that represents the domain controller that is found by this method."
  overload: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A domain controller cannot be located."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "This exception will occur for any of the following reasons.      -   <code>siteName</code> is an empty string.      -   <code>flag</code> contains an invalid value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>siteName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.Forest
  id: Forest
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: Forest
  nameWithType: Domain.Forest
  fullName: System.DirectoryServices.ActiveDirectory.Domain.Forest
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the forest that this domain is a member of."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.Forest Forest { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.Forest
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.Forest&quot;></xref> object that represents the forest that this domain is a member of."
  overload: System.DirectoryServices.ActiveDirectory.Domain.Forest*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships
  id: GetAllTrustRelationships
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetAllTrustRelationships()
  nameWithType: Domain.GetAllTrustRelationships()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Retrieves all of the trust relationships for this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships ();
    parameters: []
    return:
      type: System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection&quot;></xref> object that contains all of the trust relationships for this domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain
  id: GetComputerDomain
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetComputerDomain()
  nameWithType: Domain.GetComputerDomain()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain to which the local computer is joined."
  remarks: "The return value of the GetComputerDomain method is a <xref:System.DirectoryServices.ActiveDirectory.Domain> object representing the domain to which the computer running the application is joined.  This return value is independent of the domain credentials under which the application is run. This method will retrieve the computer&quot;s domain regardless of the trusted account domain credentials it is run under.  To retrieve the <xref:System.DirectoryServices.ActiveDirectory.Domain> object that represents the domain corresponding to the user credentials in effect for the security context under which the application is running, use the <xref:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain%2A> method instead."
  syntax:
    content: public static System.DirectoryServices.ActiveDirectory.Domain GetComputerDomain ();
    parameters: []
    return:
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain to which the local machine is joined."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A connection to the domain could not be made."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain
  id: GetCurrentDomain
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetCurrentDomain()
  nameWithType: Domain.GetCurrentDomain()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object for the current user credentials in effect for the security context under which the application is running."
  remarks: "GetCurrentDomain method is determined by the domain credentials under which the application is running.  To retrieve the <xref:System.DirectoryServices.ActiveDirectory.Domain> object representing the domain to which the computer running the application is joined, regardless of the credentials associated with that application, use the <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A> method instead.      ## See Also    <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A>"
  syntax:
    content: public static System.DirectoryServices.ActiveDirectory.Domain GetCurrentDomain ();
    parameters: []
    return:
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain for the specified user credentials in effect for the security context under which the application is running."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A connection to the current context could not be made."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry
  id: GetDirectoryEntry
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetDirectoryEntry()
  nameWithType: Domain.GetDirectoryEntry()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Retrieves a <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> object that represents the default naming context of the domain."
  syntax:
    content: public override System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();
    parameters: []
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> object that represents the domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetDomain(System.DirectoryServices.ActiveDirectory.DirectoryContext)
  id: GetDomain(System.DirectoryServices.ActiveDirectory.DirectoryContext)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetDomain(DirectoryContext)
  nameWithType: Domain.GetDomain(DirectoryContext)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetDomain(DirectoryContext)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object for the specified context."
  syntax:
    content: public static System.DirectoryServices.ActiveDirectory.Domain GetDomain (System.DirectoryServices.ActiveDirectory.DirectoryContext context);
    parameters:
    - id: context
      type: System.DirectoryServices.ActiveDirectory.DirectoryContext
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.DirectoryContext&quot;></xref> object that contains the target and credentials to use to retrieve the object. The type of the context must be a domain or directory server."
    return:
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain for the specified context."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetDomain*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "A connection to the target specified in <code>context</code> could not be made."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>context</code> is not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>context</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)
  id: GetSelectiveAuthenticationStatus(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetSelectiveAuthenticationStatus(String)
  nameWithType: Domain.GetSelectiveAuthenticationStatus(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Determines the authentication type of an inbound trust."
  syntax:
    content: public bool GetSelectiveAuthenticationStatus (string targetDomainName);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain which with the trust exists."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the authentication of the trust is selective; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the authentication is domain-wide."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Forest&quot;></xref> that is specified by the <code>targetForestName</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "The call to LsaQueryTrustedDomainInfoByName failed. For more information, see the topic [LsaQueryTrustedDomainInfoByName](http://msdn.microsoft.com/library/default.asp?url=/library/en-us/secmgmt/security/lsaquerytrusteddomaininfobyname.asp) in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)
  id: GetSidFilteringStatus(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetSidFilteringStatus(String)
  nameWithType: Domain.GetSidFilteringStatus(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Determines the SID filtering status of a trust."
  syntax:
    content: public bool GetSidFilteringStatus (string targetDomainName);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain which with the trust relationship exists."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if SID filtering is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Forest&quot;></xref> that is specified by the <code>targetForestName</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(System.String)
  id: GetTrustRelationship(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: GetTrustRelationship(String)
  nameWithType: Domain.GetTrustRelationship(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the trust relationship between this domain and the specified domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship (string targetDomainName);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain with which the trust relationship exists."
    return:
      type: System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation&quot;></xref> object that represents the trust relationship between this domain and the specified domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Forest&quot;></xref> that is specified by the <code>targetForestName</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner
  id: InfrastructureRoleOwner
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: InfrastructureRoleOwner
  nameWithType: Domain.InfrastructureRoleOwner
  fullName: System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the infrastructure role owner for this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> object that represents the domain controller that holds the infrastructure owner role."
  overload: System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.Parent
  id: Parent
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: Parent
  nameWithType: Domain.Parent
  fullName: System.DirectoryServices.ActiveDirectory.Domain.Parent
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the parent domain of this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.Domain Parent { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the parent domain of this domain. <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if this domain has no parent domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.Parent*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner
  id: PdcRoleOwner
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: PdcRoleOwner
  nameWithType: Domain.PdcRoleOwner
  fullName: System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> object that holds the primary domain controller (PDC) for this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> object that represents the domain controller that holds the PDC emulator role for this domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode)
  id: RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: RaiseDomainFunctionality(DomainMode)
  nameWithType: Domain.RaiseDomainFunctionality(DomainMode)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(DomainMode)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Raises the mode of operation for the domain."
  remarks: "The <xref:System.DirectoryServices.ActiveDirectory.DomainMode> value can be raised but not lowered. This means that raising the functionality level of the domain is not reversible and the decision to do this should be made carefully.       For more information about domain operational modes, see [Domain and forest functionality](http://www.microsoft.com/resources/documentation/WindowsServ/2003/standard/proddocs/en-us/sag_levels.asp).       The following table defines the valid values for `domainMode` based on the current operating mode of the domain.      |Current mode|Mode can be raised to|   |------------------|---------------------------|   |<xref:System.DirectoryServices.ActiveDirectory.DomainMode>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode><br /><br /> <xref:System.DirectoryServices.ActiveDirectory.DomainMode><br /><br /> <xref:System.DirectoryServices.ActiveDirectory.DomainMode>|   |<xref:System.DirectoryServices.ActiveDirectory.DomainMode>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode>|   |<xref:System.DirectoryServices.ActiveDirectory.DomainMode>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode>|   |<xref:System.DirectoryServices.ActiveDirectory.DomainMode>|None|"
  syntax:
    content: public void RaiseDomainFunctionality (System.DirectoryServices.ActiveDirectory.DomainMode domainMode);
    parameters:
    - id: domainMode
      type: System.DirectoryServices.ActiveDirectory.DomainMode
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainMode&quot;></xref> enumeration value that specifies the new operation level for the domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Based on the current operating mode of the domain, the value specified for <code>domainMode</code> is not valid."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>domainMode</code> is not a valid <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainMode&quot;></xref> enumeration value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(System.Int32)
  id: RaiseDomainFunctionalityLevel(System.Int32)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: RaiseDomainFunctionalityLevel(Int32)
  nameWithType: Domain.RaiseDomainFunctionalityLevel(Int32)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Raises the functionality level for the domain."
  syntax:
    content: public void RaiseDomainFunctionalityLevel (int domainMode);
    parameters:
    - id: domainMode
      type: System.Int32
      description: "A value representing the new level."
  overload: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  id: RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: RepairTrustRelationship(Domain)
  nameWithType: Domain.RepairTrustRelationship(Domain)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(Domain)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Repairs a trust relationship."
  remarks: "This method repairs the trust by resetting the secure channel for the trust. If the operation fails to reset the secure channel, then it will also reset the trust password."
  syntax:
    content: public void RepairTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain);
    parameters:
    - id: targetDomain
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain with which the trust exists."
  overload: System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> that is specified by <code>targetDomain</code>."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target or source server is either busy or unavailable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner
  id: RidRoleOwner
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: RidRoleOwner
  nameWithType: Domain.RidRoleOwner
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Gets the RID master role holder for this domain."
  syntax:
    content: public System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner { get; }
    return:
      type: System.DirectoryServices.ActiveDirectory.DomainController
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.DomainController&quot;></xref> object that represents the domain controller that holds the relative identifier (RID) master role for this domain."
  overload: System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)
  id: SetSelectiveAuthenticationStatus(System.String,System.Boolean)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: SetSelectiveAuthenticationStatus(String,Boolean)
  nameWithType: Domain.SetSelectiveAuthenticationStatus(String,Boolean)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(String,Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Enables or disables selective authentication for an inbound trust."
  syntax:
    content: public void SetSelectiveAuthenticationStatus (string targetDomainName, bool enable);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain with which the inbound trust exists."
    - id: enable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if selective authentication is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the domain controller that is specified by <code>targetDomainName</code>."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)
  id: SetSidFilteringStatus(System.String,System.Boolean)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: SetSidFilteringStatus(String,Boolean)
  nameWithType: Domain.SetSidFilteringStatus(String,Boolean)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(String,Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Sets the SID filtering state for the specified domain."
  syntax:
    content: public void SetSidFilteringStatus (string targetDomainName, bool enable);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain with which the trust exists."
    - id: enable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if SID filtering must be enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the domain that is specified by <code>targetDomainName</code>."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The current object has been disposed."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.String)
  id: UpdateLocalSideOfTrustRelationship(System.String,System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: UpdateLocalSideOfTrustRelationship(String,String)
  nameWithType: Domain.UpdateLocalSideOfTrustRelationship(String,String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(String,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Updates the password for the local side of a trust relationship."
  remarks: "To re-establish the trust, both sides of the trust must be updated with the same password."
  syntax:
    content: public void UpdateLocalSideOfTrustRelationship (string targetDomainName, string newTrustPassword);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain with which a trust exists."
    - id: newTrustPassword
      type: System.String
      description: "The new password for the trust."
  overload: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the domain that is specified by <code>targetDomainName</code>."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> or <code>newTrustPassword</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> or <code>newTrustPassword</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  id: UpdateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: UpdateLocalSideOfTrustRelationship(String,TrustDirection,String)
  nameWithType: Domain.UpdateLocalSideOfTrustRelationship(String,TrustDirection,String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(String,TrustDirection,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Updates the password and trust direction for the local side of a trust relationship."
  syntax:
    content: public void UpdateLocalSideOfTrustRelationship (string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain with which a trust exists."
    - id: newTrustDirection
      type: System.DirectoryServices.ActiveDirectory.TrustDirection
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value for the new trust direction for the trust relationship."
    - id: newTrustPassword
      type: System.String
      description: "The new password for the trust."
  overload: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the domain that is specified by the <code>targetDomainName</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> or <code>newTrustPassword</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> or <code>newTrustPassword</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>newTrustDirection</code> is not a valid <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  id: UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: UpdateTrustRelationship(Domain,TrustDirection)
  nameWithType: Domain.UpdateTrustRelationship(Domain,TrustDirection)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(Domain,TrustDirection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Updates the trust direction for an existing trust relationship. The trust directions are updated on both sides of the trust."
  syntax:
    content: public void UpdateTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);
    parameters:
    - id: targetDomain
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain with which the trust exists."
    - id: newTrustDirection
      type: System.DirectoryServices.ActiveDirectory.TrustDirection
      description: "An <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value that specifies the new trust direction for the trust relationship."
  overload: System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the domain that is specified by the <code>targetDomain</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>newTrustDirection</code> is not a valid <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(System.String)
  id: VerifyOutboundTrustRelationship(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: VerifyOutboundTrustRelationship(String)
  nameWithType: Domain.VerifyOutboundTrustRelationship(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Verifies that a previously established outbound trust with the specified domain is valid."
  remarks: "This method is used to verify that a trust relationship has been fully established. The trust is not established until both sides of the trust have been created."
  syntax:
    content: public void VerifyOutboundTrustRelationship (string targetDomainName);
    parameters:
    - id: targetDomainName
      type: System.String
      description: "The DNS name of the domain with which the trust exists."
  overload: System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no outbound trust relationship with the domain that is specified by <code>targetDomainName</code>."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>targetDomainName</code> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomainName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
- uid: System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  id: VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  langs:
  - csharp
  name: VerifyTrustRelationship(Domain,TrustDirection)
  nameWithType: Domain.VerifyTrustRelationship(Domain,TrustDirection)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(Domain,TrustDirection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices.ActiveDirectory
  summary: "Verifies that a previously established trust with the specified domain is valid."
  remarks: "This method verifies that a trust relationship has been fully established. The trust is not established until both sides of the trust have been created."
  syntax:
    content: public void VerifyTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);
    parameters:
    - id: targetDomain
      type: System.DirectoryServices.ActiveDirectory.Domain
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.Domain&quot;></xref> object that represents the domain with which the trust exists."
    - id: direction
      type: System.DirectoryServices.ActiveDirectory.TrustDirection
      description: "A <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value that specifies the direction, relative to this domain, of the trust."
  overload: System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship*
  exceptions:
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
    description: "There is no trust relationship with the domain that is specified by the <code>targetDomain</code> parameter, or the target domain does not have the trust direction that is specified by the <code>direction</code> parameter."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
    description: "A call to the underlying directory service resulted in an error."
  - type: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    commentId: T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
    description: "The target server is either busy or unavailable."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetDomain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>direction</code> is not a valid <xref href=&quot;System.DirectoryServices.ActiveDirectory.TrustDirection&quot;></xref> value."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The object has been disposed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The specified account does not have permission to perform this operation."
  platform:
  - net462
references:
- uid: System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition
  isExternal: false
  name: System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: ActiveDirectoryObjectExistsException
  nameWithType: ActiveDirectoryObjectExistsException
  fullName: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException
- uid: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: ActiveDirectoryOperationException
  nameWithType: ActiveDirectoryOperationException
  fullName: System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException
- uid: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: ActiveDirectoryServerDownException
  nameWithType: ActiveDirectoryServerDownException
  fullName: System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: ActiveDirectoryObjectNotFoundException
  nameWithType: ActiveDirectoryObjectNotFoundException
  fullName: System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException
- uid: System.DirectoryServices.ActiveDirectory.Domain.Children
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: Children
  nameWithType: Domain.Children
  fullName: System.DirectoryServices.ActiveDirectory.Domain.Children
- uid: System.DirectoryServices.ActiveDirectory.DomainCollection
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: DomainCollection
  nameWithType: DomainCollection
  fullName: System.DirectoryServices.ActiveDirectory.DomainCollection
- uid: System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: CreateLocalSideOfTrustRelationship(String,TrustDirection,String)
  nameWithType: Domain.CreateLocalSideOfTrustRelationship(String,TrustDirection,String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(String,TrustDirection,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.ActiveDirectory.TrustDirection
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: TrustDirection
  nameWithType: TrustDirection
  fullName: System.DirectoryServices.ActiveDirectory.TrustDirection
- uid: System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: CreateTrustRelationship(Domain,TrustDirection)
  nameWithType: Domain.CreateTrustRelationship(Domain,TrustDirection)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(Domain,TrustDirection)
- uid: System.DirectoryServices.ActiveDirectory.Domain
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: Domain
  nameWithType: Domain
  fullName: System.DirectoryServices.ActiveDirectory.Domain
- uid: System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DeleteLocalSideOfTrustRelationship(String)
  nameWithType: Domain.DeleteLocalSideOfTrustRelationship(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DeleteTrustRelationship(Domain)
  nameWithType: Domain.DeleteTrustRelationship(Domain)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(Domain)
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainControllers
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DomainControllers
  nameWithType: Domain.DomainControllers
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DomainControllers
- uid: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: DomainControllerCollection
  nameWithType: DomainControllerCollection
  fullName: System.DirectoryServices.ActiveDirectory.DomainControllerCollection
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainMode
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DomainMode
  nameWithType: Domain.DomainMode
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DomainMode
- uid: System.DirectoryServices.ActiveDirectory.DomainMode
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: DomainMode
  nameWithType: DomainMode
  fullName: System.DirectoryServices.ActiveDirectory.DomainMode
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DomainModeLevel
  nameWithType: Domain.DomainModeLevel
  fullName: System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindAllDiscoverableDomainControllers()
  nameWithType: Domain.FindAllDiscoverableDomainControllers()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers()
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindAllDiscoverableDomainControllers(String)
  nameWithType: Domain.FindAllDiscoverableDomainControllers(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindAllDomainControllers()
  nameWithType: Domain.FindAllDomainControllers()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers()
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindAllDomainControllers(String)
  nameWithType: Domain.FindAllDomainControllers(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindDomainController()
  nameWithType: Domain.FindDomainController()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController()
- uid: System.DirectoryServices.ActiveDirectory.DomainController
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: DomainController
  nameWithType: DomainController
  fullName: System.DirectoryServices.ActiveDirectory.DomainController
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindDomainController(LocatorOptions)
  nameWithType: Domain.FindDomainController(LocatorOptions)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(LocatorOptions)
- uid: System.DirectoryServices.ActiveDirectory.LocatorOptions
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: LocatorOptions
  nameWithType: LocatorOptions
  fullName: System.DirectoryServices.ActiveDirectory.LocatorOptions
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindDomainController(String)
  nameWithType: Domain.FindDomainController(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String,System.DirectoryServices.ActiveDirectory.LocatorOptions)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindDomainController(String,LocatorOptions)
  nameWithType: Domain.FindDomainController(String,LocatorOptions)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(String,LocatorOptions)
- uid: System.DirectoryServices.ActiveDirectory.Domain.Forest
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: Forest
  nameWithType: Domain.Forest
  fullName: System.DirectoryServices.ActiveDirectory.Domain.Forest
- uid: System.DirectoryServices.ActiveDirectory.Forest
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: Forest
  nameWithType: Forest
  fullName: System.DirectoryServices.ActiveDirectory.Forest
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetAllTrustRelationships()
  nameWithType: Domain.GetAllTrustRelationships()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships()
- uid: System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: TrustRelationshipInformationCollection
  nameWithType: TrustRelationshipInformationCollection
  fullName: System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetComputerDomain()
  nameWithType: Domain.GetComputerDomain()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain()
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetCurrentDomain()
  nameWithType: Domain.GetCurrentDomain()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain()
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetDirectoryEntry()
  nameWithType: Domain.GetDirectoryEntry()
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry()
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetDomain(System.DirectoryServices.ActiveDirectory.DirectoryContext)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetDomain(DirectoryContext)
  nameWithType: Domain.GetDomain(DirectoryContext)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetDomain(DirectoryContext)
- uid: System.DirectoryServices.ActiveDirectory.DirectoryContext
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: DirectoryContext
  nameWithType: DirectoryContext
  fullName: System.DirectoryServices.ActiveDirectory.DirectoryContext
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetSelectiveAuthenticationStatus(String)
  nameWithType: Domain.GetSelectiveAuthenticationStatus(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetSidFilteringStatus(String)
  nameWithType: Domain.GetSidFilteringStatus(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetTrustRelationship(String)
  nameWithType: Domain.GetTrustRelationship(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(String)
- uid: System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation
  parent: System.DirectoryServices.ActiveDirectory
  isExternal: false
  name: TrustRelationshipInformation
  nameWithType: TrustRelationshipInformation
  fullName: System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation
- uid: System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: InfrastructureRoleOwner
  nameWithType: Domain.InfrastructureRoleOwner
  fullName: System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner
- uid: System.DirectoryServices.ActiveDirectory.Domain.Parent
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: Parent
  nameWithType: Domain.Parent
  fullName: System.DirectoryServices.ActiveDirectory.Domain.Parent
- uid: System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: PdcRoleOwner
  nameWithType: Domain.PdcRoleOwner
  fullName: System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner
- uid: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RaiseDomainFunctionality(DomainMode)
  nameWithType: Domain.RaiseDomainFunctionality(DomainMode)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(DomainMode)
- uid: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(System.Int32)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RaiseDomainFunctionalityLevel(Int32)
  nameWithType: Domain.RaiseDomainFunctionalityLevel(Int32)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(Int32)
- uid: System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RepairTrustRelationship(Domain)
  nameWithType: Domain.RepairTrustRelationship(Domain)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(Domain)
- uid: System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RidRoleOwner
  nameWithType: Domain.RidRoleOwner
  fullName: System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner
- uid: System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: SetSelectiveAuthenticationStatus(String,Boolean)
  nameWithType: Domain.SetSelectiveAuthenticationStatus(String,Boolean)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(String,Boolean)
- uid: System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: SetSidFilteringStatus(String,Boolean)
  nameWithType: Domain.SetSidFilteringStatus(String,Boolean)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(String,Boolean)
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: UpdateLocalSideOfTrustRelationship(String,String)
  nameWithType: Domain.UpdateLocalSideOfTrustRelationship(String,String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(String,String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: UpdateLocalSideOfTrustRelationship(String,TrustDirection,String)
  nameWithType: Domain.UpdateLocalSideOfTrustRelationship(String,TrustDirection,String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(String,TrustDirection,String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: UpdateTrustRelationship(Domain,TrustDirection)
  nameWithType: Domain.UpdateTrustRelationship(Domain,TrustDirection)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(Domain,TrustDirection)
- uid: System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(System.String)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: VerifyOutboundTrustRelationship(String)
  nameWithType: Domain.VerifyOutboundTrustRelationship(String)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(String)
- uid: System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: VerifyTrustRelationship(Domain,TrustDirection)
  nameWithType: Domain.VerifyTrustRelationship(Domain,TrustDirection)
  fullName: System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(Domain,TrustDirection)
- uid: System.DirectoryServices.ActiveDirectory.Domain.Children*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: Children
  nameWithType: Domain.Children
- uid: System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: CreateLocalSideOfTrustRelationship
  nameWithType: Domain.CreateLocalSideOfTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: CreateTrustRelationship
  nameWithType: Domain.CreateTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DeleteLocalSideOfTrustRelationship
  nameWithType: Domain.DeleteLocalSideOfTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DeleteTrustRelationship
  nameWithType: Domain.DeleteTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainControllers*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DomainControllers
  nameWithType: Domain.DomainControllers
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainMode*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DomainMode
  nameWithType: Domain.DomainMode
- uid: System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: DomainModeLevel
  nameWithType: Domain.DomainModeLevel
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindAllDiscoverableDomainControllers
  nameWithType: Domain.FindAllDiscoverableDomainControllers
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindAllDomainControllers
  nameWithType: Domain.FindAllDomainControllers
- uid: System.DirectoryServices.ActiveDirectory.Domain.FindDomainController*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: FindDomainController
  nameWithType: Domain.FindDomainController
- uid: System.DirectoryServices.ActiveDirectory.Domain.Forest*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: Forest
  nameWithType: Domain.Forest
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetAllTrustRelationships
  nameWithType: Domain.GetAllTrustRelationships
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetComputerDomain
  nameWithType: Domain.GetComputerDomain
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetCurrentDomain
  nameWithType: Domain.GetCurrentDomain
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetDirectoryEntry
  nameWithType: Domain.GetDirectoryEntry
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetDomain*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetDomain
  nameWithType: Domain.GetDomain
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetSelectiveAuthenticationStatus
  nameWithType: Domain.GetSelectiveAuthenticationStatus
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetSidFilteringStatus
  nameWithType: Domain.GetSidFilteringStatus
- uid: System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: GetTrustRelationship
  nameWithType: Domain.GetTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: InfrastructureRoleOwner
  nameWithType: Domain.InfrastructureRoleOwner
- uid: System.DirectoryServices.ActiveDirectory.Domain.Parent*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: Parent
  nameWithType: Domain.Parent
- uid: System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: PdcRoleOwner
  nameWithType: Domain.PdcRoleOwner
- uid: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RaiseDomainFunctionality
  nameWithType: Domain.RaiseDomainFunctionality
- uid: System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RaiseDomainFunctionalityLevel
  nameWithType: Domain.RaiseDomainFunctionalityLevel
- uid: System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RepairTrustRelationship
  nameWithType: Domain.RepairTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: RidRoleOwner
  nameWithType: Domain.RidRoleOwner
- uid: System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: SetSelectiveAuthenticationStatus
  nameWithType: Domain.SetSelectiveAuthenticationStatus
- uid: System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: SetSidFilteringStatus
  nameWithType: Domain.SetSidFilteringStatus
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: UpdateLocalSideOfTrustRelationship
  nameWithType: Domain.UpdateLocalSideOfTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: UpdateTrustRelationship
  nameWithType: Domain.UpdateTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: VerifyOutboundTrustRelationship
  nameWithType: Domain.VerifyOutboundTrustRelationship
- uid: System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship*
  parent: System.DirectoryServices.ActiveDirectory.Domain
  isExternal: false
  name: VerifyTrustRelationship
  nameWithType: Domain.VerifyTrustRelationship
