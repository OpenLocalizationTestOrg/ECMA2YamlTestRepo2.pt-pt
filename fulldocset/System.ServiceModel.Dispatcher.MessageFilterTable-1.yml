### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1
  id: MessageFilterTable`1
  children:
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor(System.Int32)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0,System.Int32)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Count
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority(System.ServiceModel.Dispatcher.MessageFilter)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)
  - System.ServiceModel.Dispatcher.MessageFilterTable`1.Values
  langs:
  - csharp
  name: MessageFilterTable<TFilterData>
  nameWithType: MessageFilterTable<TFilterData>
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>
  type: Class
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract]

      public class MessageFilterTable<TFilterData> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>>, System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>>, System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData>
    typeParameters:
    - id: TFilterData
      description: "To be added."
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>>
  - System.Collections.Generic.IDictionary<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>>
  - System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData>
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: MessageFilterTable()
  nameWithType: MessageFilterTable<TFilterData>.MessageFilterTable()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.MessageFilterTable()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public MessageFilterTable ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: MessageFilterTable(Int32)
  nameWithType: MessageFilterTable<TFilterData>.MessageFilterTable(Int32)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.MessageFilterTable(Int32)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public MessageFilterTable (int defaultPriority);
    parameters:
    - id: defaultPriority
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  id: Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Add(KeyValuePair<MessageFilter,TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.Add(KeyValuePair<MessageFilter,TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Add(KeyValuePair<MessageFilter,TFilterData>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Add (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)
  id: Add(System.ServiceModel.Dispatcher.MessageFilter,`0)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Add(MessageFilter,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Add (System.ServiceModel.Dispatcher.MessageFilter filter, TFilterData data);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    - id: data
      type: TFilterData
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0,System.Int32)
  id: Add(System.ServiceModel.Dispatcher.MessageFilter,`0,System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Add(MessageFilter,TFilterData,Int32)
  nameWithType: MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData,Int32)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData,Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Add (System.ServiceModel.Dispatcher.MessageFilter filter, TFilterData data, int priority);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    - id: data
      type: TFilterData
      description: "To be added."
    - id: priority
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear
  id: Clear
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Clear()
  nameWithType: MessageFilterTable<TFilterData>.Clear()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  id: Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Contains(KeyValuePair<MessageFilter,TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.Contains(KeyValuePair<MessageFilter,TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Contains(KeyValuePair<MessageFilter,TFilterData>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool Contains (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)
  id: ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: ContainsKey(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.ContainsKey(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.ContainsKey(MessageFilter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool ContainsKey (System.ServiceModel.Dispatcher.MessageFilter filter);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: CopyTo(KeyValuePair<MessageFilter,TFilterData>,Int32)
  nameWithType: MessageFilterTable<TFilterData>.CopyTo(KeyValuePair<MessageFilter,TFilterData>,Int32)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.CopyTo(KeyValuePair<MessageFilter,TFilterData>,Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public void CopyTo (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}[]
      description: "To be added."
    - id: arrayIndex
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Count
  id: Count
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Count
  nameWithType: MessageFilterTable<TFilterData>.Count
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Count
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Count*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter)
  id: CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: CreateFilterTable(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.CreateFilterTable(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.CreateFilterTable(MessageFilter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: protected virtual System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData> CreateFilterTable (System.ServiceModel.Dispatcher.MessageFilter filter);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: System.ServiceModel.Dispatcher.IMessageFilterTable`1
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority
  id: DefaultPriority
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: DefaultPriority
  nameWithType: MessageFilterTable<TFilterData>.DefaultPriority
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.DefaultPriority
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public int DefaultPriority { get; set; }
    return:
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator
  id: GetEnumerator
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: MessageFilterTable<TFilterData>.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)
  id: GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingFilter(Message,MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilter(Message,MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilter(Message,MessageFilter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingFilter (System.ServiceModel.Channels.Message message, out System.ServiceModel.Dispatcher.MessageFilter filter);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "To be added."
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)
  id: GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingFilter(MessageBuffer,MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilter(MessageBuffer,MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilter(MessageBuffer,MessageFilter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingFilter (System.ServiceModel.Channels.MessageBuffer buffer, out System.ServiceModel.Dispatcher.MessageFilter filter);
    parameters:
    - id: buffer
      type: System.ServiceModel.Channels.MessageBuffer
      description: "To be added."
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  id: GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingFilters(Message,ICollection<MessageFilter>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilters(Message,ICollection<MessageFilter>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilters(Message,ICollection<MessageFilter>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingFilters (System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "To be added."
    - id: results
      type: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  id: GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingFilters(MessageBuffer,ICollection<MessageFilter>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilters(MessageBuffer,ICollection<MessageFilter>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilters(MessageBuffer,ICollection<MessageFilter>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingFilters (System.ServiceModel.Channels.MessageBuffer buffer, System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> results);
    parameters:
    - id: buffer
      type: System.ServiceModel.Channels.MessageBuffer
      description: "To be added."
    - id: results
      type: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)
  id: GetMatchingValue(System.ServiceModel.Channels.Message,`0@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingValue(Message,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValue(Message,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValue(Message,TFilterData)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingValue (System.ServiceModel.Channels.Message message, out TFilterData data);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "To be added."
    - id: data
      type: TFilterData
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)
  id: GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingValue(MessageBuffer,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValue(MessageBuffer,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValue(MessageBuffer,TFilterData)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingValue (System.ServiceModel.Channels.MessageBuffer buffer, out TFilterData data);
    parameters:
    - id: buffer
      type: System.ServiceModel.Channels.MessageBuffer
      description: "To be added."
    - id: data
      type: TFilterData
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})
  id: GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingValues(Message,ICollection<TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValues(Message,ICollection<TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValues(Message,ICollection<TFilterData>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingValues (System.ServiceModel.Channels.Message message, System.Collections.Generic.ICollection<TFilterData> results);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "To be added."
    - id: results
      type: System.Collections.Generic.ICollection{TFilterData}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})
  id: GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetMatchingValues(MessageBuffer,ICollection<TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValues(MessageBuffer,ICollection<TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValues(MessageBuffer,ICollection<TFilterData>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool GetMatchingValues (System.ServiceModel.Channels.MessageBuffer buffer, System.Collections.Generic.ICollection<TFilterData> results);
    parameters:
    - id: buffer
      type: System.ServiceModel.Channels.MessageBuffer
      description: "To be added."
    - id: results
      type: System.Collections.Generic.ICollection{TFilterData}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority(System.ServiceModel.Dispatcher.MessageFilter)
  id: GetPriority(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: GetPriority(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.GetPriority(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetPriority(MessageFilter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public int GetPriority (System.ServiceModel.Dispatcher.MessageFilter filter);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly
  id: IsReadOnly
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: MessageFilterTable<TFilterData>.IsReadOnly
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)
  id: Item(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Item(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.Item(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Item(MessageFilter)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public TFilterData this[System.ServiceModel.Dispatcher.MessageFilter filter] { get; set; }
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: TFilterData
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys
  id: Keys
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Keys
  nameWithType: MessageFilterTable<TFilterData>.Keys
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Keys
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter> Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  id: Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Remove(KeyValuePair<MessageFilter,TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.Remove(KeyValuePair<MessageFilter,TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Remove(KeyValuePair<MessageFilter,TFilterData>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool Remove (System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)
  id: Remove(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Remove(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.Remove(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Remove(MessageFilter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool Remove (System.ServiceModel.Dispatcher.MessageFilter filter);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MessageFilterTable<TFilterData>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)
  id: TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: TryGetValue(MessageFilter,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.TryGetValue(MessageFilter,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.TryGetValue(MessageFilter,TFilterData)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public bool TryGetValue (System.ServiceModel.Dispatcher.MessageFilter filter, out TFilterData data);
    parameters:
    - id: filter
      type: System.ServiceModel.Dispatcher.MessageFilter
      description: "To be added."
    - id: data
      type: TFilterData
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Values
  id: Values
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  langs:
  - csharp
  name: Values
  nameWithType: MessageFilterTable<TFilterData>.Values
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Values
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: public System.Collections.Generic.ICollection<TFilterData> Values { get; }
    return:
      type: System.Collections.Generic.ICollection{TFilterData}
      description: "To be added."
  overload: System.ServiceModel.Dispatcher.MessageFilterTable`1.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: MessageFilterTable()
  nameWithType: MessageFilterTable<TFilterData>.MessageFilterTable()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.MessageFilterTable()
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor(System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: MessageFilterTable(Int32)
  nameWithType: MessageFilterTable<TFilterData>.MessageFilterTable(Int32)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.MessageFilterTable(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Add(KeyValuePair<MessageFilter,TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.Add(KeyValuePair<MessageFilter,TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Add(KeyValuePair<MessageFilter,TFilterData>)
- uid: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<MessageFilter,TFilterData>
  nameWithType: KeyValuePair<MessageFilter,TFilterData>
  fullName: System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageFilter
    name: MessageFilter
    nameWithType: MessageFilter
    fullName: MessageFilter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TFilterData
    name: TFilterData
    nameWithType: TFilterData
    fullName: TFilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Add(MessageFilter,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData)
- uid: System.ServiceModel.Dispatcher.MessageFilter
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: MessageFilter
  nameWithType: MessageFilter
  fullName: System.ServiceModel.Dispatcher.MessageFilter
- uid: TFilterData
  isExternal: true
  name: TFilterData
  nameWithType: TFilterData
  fullName: TFilterData
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add(System.ServiceModel.Dispatcher.MessageFilter,`0,System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Add(MessageFilter,TFilterData,Int32)
  nameWithType: MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData,Int32)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Add(MessageFilter,TFilterData,Int32)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Clear()
  nameWithType: MessageFilterTable<TFilterData>.Clear()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Clear()
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Contains(KeyValuePair<MessageFilter,TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.Contains(KeyValuePair<MessageFilter,TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Contains(KeyValuePair<MessageFilter,TFilterData>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: ContainsKey(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.ContainsKey(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.ContainsKey(MessageFilter)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0}[],System.Int32)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: CopyTo(KeyValuePair<MessageFilter,TFilterData>,Int32)
  nameWithType: MessageFilterTable<TFilterData>.CopyTo(KeyValuePair<MessageFilter,TFilterData>,Int32)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.CopyTo(KeyValuePair<MessageFilter,TFilterData>,Int32)
- uid: System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}[]
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<MessageFilter,TFilterData>
  nameWithType: KeyValuePair<MessageFilter,TFilterData>
  fullName: System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>[]
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageFilter
    name: MessageFilter
    nameWithType: MessageFilter
    fullName: MessageFilter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TFilterData
    name: TFilterData
    nameWithType: TFilterData
    fullName: TFilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Count
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Count
  nameWithType: MessageFilterTable<TFilterData>.Count
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Count
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: CreateFilterTable(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.CreateFilterTable(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.CreateFilterTable(MessageFilter)
- uid: System.ServiceModel.Dispatcher.IMessageFilterTable`1
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: IMessageFilterTable<TFilterData>
  nameWithType: IMessageFilterTable<TFilterData>
  fullName: System.ServiceModel.Dispatcher.IMessageFilterTable<TFilterData>
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: DefaultPriority
  nameWithType: MessageFilterTable<TFilterData>.DefaultPriority
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.DefaultPriority
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: MessageFilterTable<TFilterData>.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,TFilterData}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<KeyValuePair<MessageFilter,TFilterData>>
  nameWithType: IEnumerator<KeyValuePair<MessageFilter,TFilterData>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.ServiceModel.Dispatcher.MessageFilter,TFilterData>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageFilter
    name: MessageFilter
    nameWithType: MessageFilter
    fullName: MessageFilter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TFilterData
    name: TFilterData
    nameWithType: TFilterData
    fullName: TFilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.Message,System.ServiceModel.Dispatcher.MessageFilter@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingFilter(Message,MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilter(Message,MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilter(Message,MessageFilter)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter(System.ServiceModel.Channels.MessageBuffer,System.ServiceModel.Dispatcher.MessageFilter@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingFilter(MessageBuffer,MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilter(MessageBuffer,MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilter(MessageBuffer,MessageFilter)
- uid: System.ServiceModel.Channels.MessageBuffer
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageBuffer
  nameWithType: MessageBuffer
  fullName: System.ServiceModel.Channels.MessageBuffer
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingFilters(Message,ICollection<MessageFilter>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilters(Message,ICollection<MessageFilter>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilters(Message,ICollection<MessageFilter>)
- uid: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<MessageFilter>
  nameWithType: ICollection<MessageFilter>
  fullName: System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.MessageFilter>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.ServiceModel.Dispatcher.MessageFilter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.MessageFilter
    name: MessageFilter
    nameWithType: MessageFilter
    fullName: MessageFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.MessageFilter})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingFilters(MessageBuffer,ICollection<MessageFilter>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilters(MessageBuffer,ICollection<MessageFilter>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingFilters(MessageBuffer,ICollection<MessageFilter>)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.Message,`0@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingValue(Message,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValue(Message,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValue(Message,TFilterData)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue(System.ServiceModel.Channels.MessageBuffer,`0@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingValue(MessageBuffer,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValue(MessageBuffer,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValue(MessageBuffer,TFilterData)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.Message,System.Collections.Generic.ICollection{`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingValues(Message,ICollection<TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValues(Message,ICollection<TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValues(Message,ICollection<TFilterData>)
- uid: System.Collections.Generic.ICollection{TFilterData}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<TFilterData>
  nameWithType: ICollection<TFilterData>
  fullName: System.Collections.Generic.ICollection<TFilterData>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TFilterData>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TFilterData
    name: TFilterData
    nameWithType: TFilterData
    fullName: TFilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues(System.ServiceModel.Channels.MessageBuffer,System.Collections.Generic.ICollection{`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingValues(MessageBuffer,ICollection<TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValues(MessageBuffer,ICollection<TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetMatchingValues(MessageBuffer,ICollection<TFilterData>)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetPriority(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.GetPriority(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.GetPriority(MessageFilter)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: IsReadOnly
  nameWithType: MessageFilterTable<TFilterData>.IsReadOnly
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.IsReadOnly
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Item(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Item(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.Item(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Item(MessageFilter)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Keys
  nameWithType: MessageFilterTable<TFilterData>.Keys
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Keys
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.Collections.Generic.KeyValuePair{System.ServiceModel.Dispatcher.MessageFilter,`0})
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Remove(KeyValuePair<MessageFilter,TFilterData>)
  nameWithType: MessageFilterTable<TFilterData>.Remove(KeyValuePair<MessageFilter,TFilterData>)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Remove(KeyValuePair<MessageFilter,TFilterData>)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove(System.ServiceModel.Dispatcher.MessageFilter)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Remove(MessageFilter)
  nameWithType: MessageFilterTable<TFilterData>.Remove(MessageFilter)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Remove(MessageFilter)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MessageFilterTable<TFilterData>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue(System.ServiceModel.Dispatcher.MessageFilter,`0@)
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: TryGetValue(MessageFilter,TFilterData)
  nameWithType: MessageFilterTable<TFilterData>.TryGetValue(MessageFilter,TFilterData)
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.TryGetValue(MessageFilter,TFilterData)
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Values
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Values
  nameWithType: MessageFilterTable<TFilterData>.Values
  fullName: System.ServiceModel.Dispatcher.MessageFilterTable<TFilterData>.Values
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.#ctor*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: MessageFilterTable<TFilterData>
  nameWithType: MessageFilterTable<TFilterData>.MessageFilterTable<TFilterData>
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Add*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Add
  nameWithType: MessageFilterTable<TFilterData>.Add
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Clear*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Clear
  nameWithType: MessageFilterTable<TFilterData>.Clear
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Contains*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Contains
  nameWithType: MessageFilterTable<TFilterData>.Contains
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.ContainsKey*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: ContainsKey
  nameWithType: MessageFilterTable<TFilterData>.ContainsKey
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.CopyTo*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: CopyTo
  nameWithType: MessageFilterTable<TFilterData>.CopyTo
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Count*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Count
  nameWithType: MessageFilterTable<TFilterData>.Count
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.CreateFilterTable*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: CreateFilterTable
  nameWithType: MessageFilterTable<TFilterData>.CreateFilterTable
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.DefaultPriority*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: DefaultPriority
  nameWithType: MessageFilterTable<TFilterData>.DefaultPriority
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetEnumerator*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetEnumerator
  nameWithType: MessageFilterTable<TFilterData>.GetEnumerator
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilter*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingFilter
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilter
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingFilters*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingFilters
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingFilters
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValue*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingValue
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValue
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetMatchingValues*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetMatchingValues
  nameWithType: MessageFilterTable<TFilterData>.GetMatchingValues
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.GetPriority*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: GetPriority
  nameWithType: MessageFilterTable<TFilterData>.GetPriority
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.IsReadOnly*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: IsReadOnly
  nameWithType: MessageFilterTable<TFilterData>.IsReadOnly
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Item*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Item
  nameWithType: MessageFilterTable<TFilterData>.Item
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Keys*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Keys
  nameWithType: MessageFilterTable<TFilterData>.Keys
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Remove*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Remove
  nameWithType: MessageFilterTable<TFilterData>.Remove
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: MessageFilterTable<TFilterData>.System.Collections.IEnumerable.GetEnumerator
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.TryGetValue*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: TryGetValue
  nameWithType: MessageFilterTable<TFilterData>.TryGetValue
- uid: System.ServiceModel.Dispatcher.MessageFilterTable`1.Values*
  parent: System.ServiceModel.Dispatcher.MessageFilterTable`1
  isExternal: false
  name: Values
  nameWithType: MessageFilterTable<TFilterData>.Values
