### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Imaging.WriteableBitmap
  id: WriteableBitmap
  children:
  - System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource)
  - System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette)
  - System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect(System.Windows.Int32Rect)
  - System.Windows.Media.Imaging.WriteableBitmap.BackBuffer
  - System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride
  - System.Windows.Media.Imaging.WriteableBitmap.Clone
  - System.Windows.Media.Imaging.WriteableBitmap.CloneCore(System.Windows.Freezable)
  - System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue
  - System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore
  - System.Windows.Media.Imaging.WriteableBitmap.FreezeCore(System.Boolean)
  - System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Media.Imaging.WriteableBitmap.Lock
  - System.Windows.Media.Imaging.WriteableBitmap.TryLock(System.Windows.Duration)
  - System.Windows.Media.Imaging.WriteableBitmap.Unlock
  - System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  name: WriteableBitmap
  nameWithType: WriteableBitmap
  fullName: System.Windows.Media.Imaging.WriteableBitmap
  type: Class
  summary: "Provides a <xref href=&quot;System.Windows.Media.Imaging.BitmapSource&quot;></xref> that can be written to and updated."
  remarks: "Use the WriteableBitmap class to update and render a bitmap on a per-frame basis. This is useful for generating algorithmic content, such as a fractal image, and for data visualization, such as a music visualizer.       The WriteableBitmap class uses two buffers. The *back buffer* is allocated in system memory and accumulates content that is not currently displayed. The *front buffer* is allocated in system memory and contains the content that is currently displayed. The rendering system copies the front buffer to video memory for display.       Two threads use these buffers. The *user interface (UI) thread* generates the UI but does not present it to the screen. The UI thread responds to user input, timers, and other events. An application can have multiple UI threads. The *render thread* composes and renders changes from the UI thread. There is only one render thread per application.       The UI thread writes content to the back buffer. The render thread reads content from the front buffer and copies it to video memory. Changes to the back buffer are tracked with changed rectangular regions.       Call one of the <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%2A> overloads to update and display content in the back buffer automatically.       For greater control over updates, and for multi-threaded access to the back buffer, use the following workflow.      1.  Call the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock%2A> method to reserve the back buffer for updates.      2.  Obtain a pointer to the back buffer by accessing the <xref:System.Windows.Media.Imaging.WriteableBitmap.BackBuffer%2A> property.      3.  Write changes to the back buffer. Other threads may write changes to the back buffer when the WriteableBitmap is locked.      4.  Call the <xref:System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect%2A> method to indicate areas that have changed.      5.  Call the <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> method to release the back buffer and allow presentation to the screen.       When updates are sent to the rendering thread, the rendering thread copies the changed rectangles from the back buffer to the front buffer. The rendering system controls this exchange to avoid deadlocks and redraw artifacts, such as &quot;tearing&quot;."
  example:
  - "The following example demonstrates how a WriteableBitmap can be used as the source of an <xref:System.Windows.Controls.Image> to draw pixels when the mouse moves.  \n  \n [!code-cs[WriteableBitmap2#WriteableBitmapFullPage](~/add/codesnippet/csharp/WriteableBitmapDemo/Program.cs#writeablebitmapfullpage)]"
  syntax:
    content: 'public sealed class WriteableBitmap : System.Windows.Media.Imaging.BitmapSource'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Media.Animation.Animatable
  - System.Windows.Media.ImageSource
  - System.Windows.Media.Imaging.BitmapSource
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  - System.Windows.Media.ImageSource.PixelsToDIPs(System.Double,System.Int32)
  - System.Windows.Media.ImageSource.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Media.ImageSource.ToString
  - System.Windows.Media.ImageSource.ToString(System.IFormatProvider)
  - System.Windows.Media.Imaging.BitmapSource.CheckIfSiteOfOrigin
  - System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Array,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.BitmapSource.Create(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.Array,System.Int32)
  - System.Windows.Media.Imaging.BitmapSource.Create(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.IntPtr,System.Int32,System.Int32)
  - System.Windows.Media.Imaging.BitmapSource.DecodeFailed
  - System.Windows.Media.Imaging.BitmapSource.DownloadCompleted
  - System.Windows.Media.Imaging.BitmapSource.DownloadFailed
  - System.Windows.Media.Imaging.BitmapSource.DownloadProgress
  - System.Windows.Media.Imaging.BitmapSource.DpiX
  - System.Windows.Media.Imaging.BitmapSource.DpiY
  - System.Windows.Media.Imaging.BitmapSource.Format
  - System.Windows.Media.Imaging.BitmapSource.Height
  - System.Windows.Media.Imaging.BitmapSource.IsDownloading
  - System.Windows.Media.Imaging.BitmapSource.Metadata
  - System.Windows.Media.Imaging.BitmapSource.Palette
  - System.Windows.Media.Imaging.BitmapSource.PixelHeight
  - System.Windows.Media.Imaging.BitmapSource.PixelWidth
  - System.Windows.Media.Imaging.BitmapSource.Width
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource)
  id: '#ctor(System.Windows.Media.Imaging.BitmapSource)'
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: WriteableBitmap(BitmapSource)
  nameWithType: WriteableBitmap.WriteableBitmap(BitmapSource)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WriteableBitmap(BitmapSource)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref> class using the given <xref href=&quot;System.Windows.Media.Imaging.BitmapSource&quot;></xref>."
  remarks: "The <xref:System.Windows.Media.Imaging.WriteableBitmap.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Double%2CSystem.Double%2CSystem.Windows.Media.PixelFormat%2CSystem.Windows.Media.Imaging.BitmapPalette%29> constructor is preferred over using this constructor.       If `source` does not use a natively supported bitmap format, format conversions are applied for each frame update, which reduces performance."
  syntax:
    content: public WriteableBitmap (System.Windows.Media.Imaging.BitmapSource source);
    parameters:
    - id: source
      type: System.Windows.Media.Imaging.BitmapSource
      description: "The <xref href=&quot;System.Windows.Media.Imaging.BitmapSource&quot;></xref> to use for initialization."
  overload: System.Windows.Media.Imaging.WriteableBitmap.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette)
  id: '#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette)'
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: WriteableBitmap(Int32,Int32,Double,Double,PixelFormat,BitmapPalette)
  nameWithType: WriteableBitmap.WriteableBitmap(Int32,Int32,Double,Double,PixelFormat,BitmapPalette)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WriteableBitmap(Int32,Int32,Double,Double,PixelFormat,BitmapPalette)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref> class with the specified parameters."
  remarks: "The preferred values for `pixelFormat` are <xref:System.Windows.Media.PixelFormats.Bgr32%2A> and <xref:System.Windows.Media.PixelFormats.Pbgra32%2A>. These formats are natively supported and do not require a format conversion. Other `pixelFormat` values require a format conversion for each frame update, which reduces performance."
  syntax:
    content: public WriteableBitmap (int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette);
    parameters:
    - id: pixelWidth
      type: System.Int32
      description: "The desired width of the bitmap."
    - id: pixelHeight
      type: System.Int32
      description: "The desired height of the bitmap."
    - id: dpiX
      type: System.Double
      description: "The horizontal [!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)] of the bitmap."
    - id: dpiY
      type: System.Double
      description: "The vertical [!INCLUDE[TLA#tla_dpi](../Token/TLA%23tla_dpi_md.md)] of the bitmap."
    - id: pixelFormat
      type: System.Windows.Media.PixelFormat
      description: "The <xref href=&quot;System.Windows.Media.PixelFormat&quot;></xref> of the bitmap."
    - id: palette
      type: System.Windows.Media.Imaging.BitmapPalette
      description: "The <xref href=&quot;System.Windows.Media.Imaging.BitmapPalette&quot;></xref> of the bitmap."
  overload: System.Windows.Media.Imaging.WriteableBitmap.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect(System.Windows.Int32Rect)
  id: AddDirtyRect(System.Windows.Int32Rect)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: AddDirtyRect(Int32Rect)
  nameWithType: WriteableBitmap.AddDirtyRect(Int32Rect)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect(Int32Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Specifies the area of the bitmap that changed."
  remarks: "Call the AddDirtyRect method to indicate changes your code has made to the back buffer.       When you call this method multiple times, the changed areas are accumulated in a sufficient, but not necessarily minimal, representation. For efficiency, only the areas that are marked as dirty are guaranteed to be copied forward to the front buffer. However, any portion of the bitmap may be copied forward, so you must ensure that the entire back buffer is always valid.       Call the AddDirtyRect method only between calls to the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock%2A> and <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> methods, as described in the <xref:System.Windows.Media.Imaging.WriteableBitmap> class remarks."
  example:
  - "The following code example shows how to specify the area of the back buffer that changed by using the AddDirtyRect method.  \n  \n [!code-cs[WriteableBitmap2#2](~/add/codesnippet/csharp/WriteableBitmapDemo/Program.cs#2)]"
  syntax:
    content: public void AddDirtyRect (System.Windows.Int32Rect dirtyRect);
    parameters:
    - id: dirtyRect
      type: System.Windows.Int32Rect
      description: "An <xref href=&quot;System.Windows.Int32Rect&quot;></xref> representing the area that changed. Dimensions are in pixels."
  overload: System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The bitmap has not been locked by a call to the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock*> or <xref:System.Windows.Media.Imaging.WriteableBitmap.TryLock*> methods."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>dirtyRect</code> falls outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.BackBuffer
  id: BackBuffer
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: BackBuffer
  nameWithType: WriteableBitmap.BackBuffer
  fullName: System.Windows.Media.Imaging.WriteableBitmap.BackBuffer
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Gets a pointer to the back buffer."
  remarks: "The back buffer contains the bitmap contents in the pixel format requested by the user.       Update the back buffer only between calls to the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock%2A> and <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> methods. If you do not follow the Lock/Unlock workflow described in the <xref:System.Windows.Media.Imaging.WriteableBitmap> class remarks, undefined behaviors, such as tearing, can occur.       The address of the back buffer does not change.      ## Thread Safety    You can pass the BackBuffer pointer to external components and other threads for processing, but if you do, you must provide you own thread coordination. In particular, you must ensure that the UI thread specifies changed areas by calling the <xref:System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect%2A> method, and that the UI thread unlocks the buffer by calling the <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> method."
  syntax:
    content: public IntPtr BackBuffer { get; }
    return:
      type: System.IntPtr
      description: "An <xref:System.IntPtr> that points to the base address of the back buffer."
  overload: System.Windows.Media.Imaging.WriteableBitmap.BackBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride
  id: BackBufferStride
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: BackBufferStride
  nameWithType: WriteableBitmap.BackBufferStride
  fullName: System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Gets a value indicating the number of bytes in a single row of pixel data."
  syntax:
    content: public int BackBufferStride { get; }
    return:
      type: System.Int32
      description: "An integer indicating the number of bytes in a single row of pixel data."
  overload: System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.Clone
  id: Clone
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: Clone()
  nameWithType: WriteableBitmap.Clone()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.Clone()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Creates a modifiable clone of this <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>, making deep copies of this object&quot;s values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values."
  remarks: "This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.       For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>."
  syntax:
    content: public System.Windows.Media.Imaging.WriteableBitmap Clone ();
    parameters: []
    return:
      type: System.Windows.Media.Imaging.WriteableBitmap
      description: "A modifiable clone of the current object. The cloned object&quot;s <xref:System.Windows.Freezable.IsFrozen*> property will be <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> even if the source&quot;s <xref:System.Windows.Freezable.IsFrozen*> property was <xref uid=&quot;langword_csharp_true.&quot; name=&quot;true.&quot; href=&quot;&quot;></xref>"
  overload: System.Windows.Media.Imaging.WriteableBitmap.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCore(System.Windows.Freezable)
  id: CloneCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: CloneCore(Freezable)
  nameWithType: WriteableBitmap.CloneCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CloneCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  syntax:
    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "To be added."
  overload: System.Windows.Media.Imaging.WriteableBitmap.CloneCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue
  id: CloneCurrentValue
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: CloneCurrentValue()
  nameWithType: WriteableBitmap.CloneCurrentValue()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Creates a modifiable clone of this <xref href=&quot;System.Windows.Media.Animation.ByteAnimationUsingKeyFrames&quot;></xref> object, making deep copies of this object&quot;s current values. Resource references, data bindings, and animations are not copied, but their current values are."
  remarks: "This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.       For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>."
  syntax:
    content: public System.Windows.Media.Imaging.WriteableBitmap CloneCurrentValue ();
    parameters: []
    return:
      type: System.Windows.Media.Imaging.WriteableBitmap
      description: "A modifiable clone of the current object. The cloned object&quot;s <xref:System.Windows.Freezable.IsFrozen*> property will be <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> even if the source&quot;s <xref:System.Windows.Freezable.IsFrozen*> property was <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore(System.Windows.Freezable)
  id: CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: CloneCurrentValueCore(Freezable)
  nameWithType: WriteableBitmap.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  syntax:
    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "To be added."
  overload: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: WriteableBitmap.CreateInstanceCore()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "To be added."
  overload: System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.FreezeCore(System.Boolean)
  id: FreezeCore(System.Boolean)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: FreezeCore(Boolean)
  nameWithType: WriteableBitmap.FreezeCore(Boolean)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.FreezeCore(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  syntax:
    content: protected override bool FreezeCore (bool isChecking);
    parameters:
    - id: isChecking
      type: System.Boolean
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Media.Imaging.WriteableBitmap.FreezeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore(System.Windows.Freezable)
  id: GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: GetAsFrozenCore(Freezable)
  nameWithType: WriteableBitmap.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  syntax:
    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "To be added."
  overload: System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: WriteableBitmap.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  syntax:
    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "To be added."
  overload: System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.Lock
  id: Lock
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: Lock()
  nameWithType: WriteableBitmap.Lock()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.Lock()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Reserves the back buffer for updates."
  remarks: "The Lock method increments the lock count. When a <xref:System.Windows.Media.Imaging.WriteableBitmap> is locked, the rendering system does not send updates until the <xref:System.Windows.Media.Imaging.WriteableBitmap> is fully unlocked by calls to the <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> method.       You can use the Lock method to support multi-threaded implementations. In these scenarios, the UI thread locks the bitmap and exposes the back buffer to other threads. When the worker thread has finished a frame, the UI thread adds changed rectangles and unlocks the buffer.       The UI thread can block when the render thread acquires a lock on the back buffer to copy it forward to the front buffer. If the latency from this block is too long, use the <xref:System.Windows.Media.Imaging.WriteableBitmap.TryLock%2A> method to wait for a short time and then unblock the UI thread to perform other tasks while the back buffer is locked."
  example:
  - "The following code example shows how to reserve the back buffer by using the Lock method.  \n  \n [!code-cs[WriteableBitmap2#2](~/add/codesnippet/csharp/WriteableBitmapDemo/Program.cs#2)]"
  syntax:
    content: public void Lock ();
    parameters: []
  overload: System.Windows.Media.Imaging.WriteableBitmap.Lock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.TryLock(System.Windows.Duration)
  id: TryLock(System.Windows.Duration)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: TryLock(Duration)
  nameWithType: WriteableBitmap.TryLock(Duration)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.TryLock(Duration)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Attempts to lock the bitmap, waiting for no longer than the specified length of time."
  remarks: "When a lock is acquired, the behavior of the TryLock method is the same as the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock%2A> method."
  syntax:
    content: public bool TryLock (System.Windows.Duration timeout);
    parameters:
    - id: timeout
      type: System.Windows.Duration
      description: "A <xref href=&quot;System.Windows.Duration&quot;></xref> that represents the length of time to wait. A value of 0 returns immediately. A value of <xref:System.Windows.Duration.Forever*> blocks indefinitely."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the lock was acquired; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Imaging.WriteableBitmap.TryLock*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is set to <xref:System.Windows.Duration.Automatic*>."
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.Unlock
  id: Unlock
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: Unlock()
  nameWithType: WriteableBitmap.Unlock()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.Unlock()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Releases the back buffer to make it available for display."
  remarks: "The Unlock method decrements the lock count. When the lock count reaches 0, a render pass is requested if the <xref:System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect%2A> method has been called."
  example:
  - "The following code example shows how to release the back buffer by using the Unlock method.  \n  \n [!code-cs[WriteableBitmap2#2](~/add/codesnippet/csharp/WriteableBitmapDemo/Program.cs#2)]"
  syntax:
    content: public void Unlock ();
    parameters: []
  overload: System.Windows.Media.Imaging.WriteableBitmap.Unlock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The bitmap has not been locked by a call to the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock*> or <xref:System.Windows.Media.Imaging.WriteableBitmap.TryLock*> methods."
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)
  id: WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: WritePixels(Int32Rect,Array,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Updates the pixels in the specified region of the bitmap."
  remarks: "The <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> and <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.IntPtr%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> overloads are preferred over using this method.      > [!NOTE] >  In partial trust, use the <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> overload."
  example:
  - "The following code example shows how to update a pixel in the back buffer by using the WritePixels method.  \n  \n [!code-cs[WriteableBitmap2#3](~/add/codesnippet/csharp/WriteableBitmapDemo/Program.cs#3)]"
  syntax:
    content: public void WritePixels (System.Windows.Int32Rect sourceRect, Array pixels, int stride, int offset);
    parameters:
    - id: sourceRect
      type: System.Windows.Int32Rect
      description: "The rectangle of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref> to update."
    - id: pixels
      type: System.Array
      description: "The pixel array used to update the bitmap."
    - id: stride
      type: System.Int32
      description: "The stride of the update region in `pixels`."
    - id: offset
      type: System.Int32
      description: "The input buffer offset."
  overload: System.Windows.Media.Imaging.WriteableBitmap.WritePixels*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "One or more of the following conditions is true.       <code>sourceRect</code> falls outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>.       <code>stride</code> &lt; 1       <code>offset</code> &lt; 0"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pixels</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>pixels</code> has a rank other than 1 or 2, or its length is less than or equal to 0."
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)
  id: WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: WritePixels(Int32Rect,IntPtr,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Updates the pixels in the specified region of the bitmap."
  remarks: "The <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> and <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.IntPtr%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> overloads are preferred over using this method.      > [!NOTE] >  In partial trust, use the <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> overload."
  syntax:
    content: public void WritePixels (System.Windows.Int32Rect sourceRect, IntPtr buffer, int bufferSize, int stride);
    parameters:
    - id: sourceRect
      type: System.Windows.Int32Rect
      description: "The rectangle of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref> to update."
    - id: buffer
      type: System.IntPtr
      description: "The input buffer used to update the bitmap."
    - id: bufferSize
      type: System.Int32
      description: "The size of the input buffer."
    - id: stride
      type: System.Int32
      description: "The stride of the update region in `buffer`."
  overload: System.Windows.Media.Imaging.WriteableBitmap.WritePixels*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "One or more of the following conditions is true.       <code>sourceRect</code> falls outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>.       <code>bufferSize</code> &lt; 1       <code>stride</code> &lt; 1"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32,System.Int32)
  id: WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: WritePixels(Int32Rect,Array,Int32,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32,Int32)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Updates the pixels in the specified region of the bitmap."
  remarks: "Call the <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%2A> method to update the <xref:System.Windows.Media.Imaging.WriteableBitmap> automatically with the contents of `sourceBuffer`. Calling this method is the equivalent of using the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock%2A> and <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> workflow described in the <xref:System.Windows.Media.Imaging.WriteableBitmap> class remarks.      > [!NOTE] >  Use this overload in partial trust."
  syntax:
    content: public void WritePixels (System.Windows.Int32Rect sourceRect, Array sourceBuffer, int sourceBufferStride, int destinationX, int destinationY);
    parameters:
    - id: sourceRect
      type: System.Windows.Int32Rect
      description: "The rectangle in `sourceBuffer` to copy."
    - id: sourceBuffer
      type: System.Array
      description: "The input buffer used to update the bitmap."
    - id: sourceBufferStride
      type: System.Int32
      description: "The stride of the input buffer, in bytes."
    - id: destinationX
      type: System.Int32
      description: "The destination x-coordinate of the left-most pixel in the back buffer."
    - id: destinationY
      type: System.Int32
      description: "The destination y-coordinate of the top-most pixel in the back buffer."
  overload: System.Windows.Media.Imaging.WriteableBitmap.WritePixels*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "One or more of the following conditions is true.       <code>sourceRect</code> falls outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>.       <code>destinationX</code> or <code>destinationY</code> is outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>.       <code>sourceBufferStride</code> &lt; 1"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceBuffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceBuffer</code> has a rank other than 1 or 2, or its length is less than or equal to 0."
  platform:
  - net462
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)
  id: WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  langs:
  - csharp
  name: WritePixels(Int32Rect,IntPtr,Int32,Int32,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Imaging
  summary: "Updates the pixels in the specified region of the bitmap."
  remarks: "Call the WritePixels method to update the <xref:System.Windows.Media.Imaging.WriteableBitmap> automatically with the contents of `sourceBuffer`. Calling this method is the equivalent of using the <xref:System.Windows.Media.Imaging.WriteableBitmap.Lock%2A> and <xref:System.Windows.Media.Imaging.WriteableBitmap.Unlock%2A> workflow described in the <xref:System.Windows.Media.Imaging.WriteableBitmap> class remarks.      > [!NOTE] >  In partial trust, use the <xref:System.Windows.Media.Imaging.WriteableBitmap.WritePixels%28System.Windows.Int32Rect%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> overload."
  syntax:
    content: public void WritePixels (System.Windows.Int32Rect sourceRect, IntPtr sourceBuffer, int sourceBufferSize, int sourceBufferStride, int destinationX, int destinationY);
    parameters:
    - id: sourceRect
      type: System.Windows.Int32Rect
      description: "The rectangle in `sourceBuffer` to copy."
    - id: sourceBuffer
      type: System.IntPtr
      description: "The input buffer used to update the bitmap."
    - id: sourceBufferSize
      type: System.Int32
      description: "The size of the input buffer."
    - id: sourceBufferStride
      type: System.Int32
      description: "The stride of the input buffer, in bytes."
    - id: destinationX
      type: System.Int32
      description: "The destination x-coordinate of the left-most pixel in the back buffer."
    - id: destinationY
      type: System.Int32
      description: "The destination y-coordinate of the top-most pixel in the back buffer."
  overload: System.Windows.Media.Imaging.WriteableBitmap.WritePixels*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "One or more of the following conditions is true.       <code>sourceRect</code> falls outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>.       <code>destinationX</code> or <code>destinationY</code> is outside the bounds of the <xref href=&quot;System.Windows.Media.Imaging.WriteableBitmap&quot;></xref>.       <code>sourceBufferSize</code> &lt; 1       <code>sourceBufferStride</code> &lt; 1"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceBuffer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Windows.Media.Imaging.BitmapSource
  isExternal: false
  name: System.Windows.Media.Imaging.BitmapSource
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WriteableBitmap(BitmapSource)
  nameWithType: WriteableBitmap.WriteableBitmap(BitmapSource)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WriteableBitmap(BitmapSource)
- uid: System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WriteableBitmap(Int32,Int32,Double,Double,PixelFormat,BitmapPalette)
  nameWithType: WriteableBitmap.WriteableBitmap(Int32,Int32,Double,Double,PixelFormat,BitmapPalette)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WriteableBitmap(Int32,Int32,Double,Double,PixelFormat,BitmapPalette)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Media.PixelFormat
  parent: System.Windows.Media
  isExternal: false
  name: PixelFormat
  nameWithType: PixelFormat
  fullName: System.Windows.Media.PixelFormat
- uid: System.Windows.Media.Imaging.BitmapPalette
  parent: System.Windows.Media.Imaging
  isExternal: false
  name: BitmapPalette
  nameWithType: BitmapPalette
  fullName: System.Windows.Media.Imaging.BitmapPalette
- uid: System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect(System.Windows.Int32Rect)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: AddDirtyRect(Int32Rect)
  nameWithType: WriteableBitmap.AddDirtyRect(Int32Rect)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect(Int32Rect)
- uid: System.Windows.Int32Rect
  parent: System.Windows
  isExternal: false
  name: Int32Rect
  nameWithType: Int32Rect
  fullName: System.Windows.Int32Rect
- uid: System.Windows.Media.Imaging.WriteableBitmap.BackBuffer
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: BackBuffer
  nameWithType: WriteableBitmap.BackBuffer
  fullName: System.Windows.Media.Imaging.WriteableBitmap.BackBuffer
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: BackBufferStride
  nameWithType: WriteableBitmap.BackBufferStride
  fullName: System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride
- uid: System.Windows.Media.Imaging.WriteableBitmap.Clone
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: Clone()
  nameWithType: WriteableBitmap.Clone()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.Clone()
- uid: System.Windows.Media.Imaging.WriteableBitmap
  parent: System.Windows.Media.Imaging
  isExternal: false
  name: WriteableBitmap
  nameWithType: WriteableBitmap
  fullName: System.Windows.Media.Imaging.WriteableBitmap
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CloneCore(Freezable)
  nameWithType: WriteableBitmap.CloneCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CloneCore(Freezable)
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CloneCurrentValue()
  nameWithType: WriteableBitmap.CloneCurrentValue()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue()
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CloneCurrentValueCore(Freezable)
  nameWithType: WriteableBitmap.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore(Freezable)
- uid: System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: WriteableBitmap.CreateInstanceCore()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore()
- uid: System.Windows.Media.Imaging.WriteableBitmap.FreezeCore(System.Boolean)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: FreezeCore(Boolean)
  nameWithType: WriteableBitmap.FreezeCore(Boolean)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.FreezeCore(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: GetAsFrozenCore(Freezable)
  nameWithType: WriteableBitmap.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore(Freezable)
- uid: System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: WriteableBitmap.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore(Freezable)
- uid: System.Windows.Media.Imaging.WriteableBitmap.Lock
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: Lock()
  nameWithType: WriteableBitmap.Lock()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.Lock()
- uid: System.Windows.Media.Imaging.WriteableBitmap.TryLock(System.Windows.Duration)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: TryLock(Duration)
  nameWithType: WriteableBitmap.TryLock(Duration)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.TryLock(Duration)
- uid: System.Windows.Duration
  parent: System.Windows
  isExternal: false
  name: Duration
  nameWithType: Duration
  fullName: System.Windows.Duration
- uid: System.Windows.Media.Imaging.WriteableBitmap.Unlock
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: Unlock()
  nameWithType: WriteableBitmap.Unlock()
  fullName: System.Windows.Media.Imaging.WriteableBitmap.Unlock()
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WritePixels(Int32Rect,Array,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WritePixels(Int32Rect,IntPtr,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32)
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WritePixels(Int32Rect,Array,Int32,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,Array,Int32,Int32,Int32)
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WritePixels(Int32Rect,IntPtr,Int32,Int32,Int32,Int32)
  nameWithType: WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32,Int32,Int32)
  fullName: System.Windows.Media.Imaging.WriteableBitmap.WritePixels(Int32Rect,IntPtr,Int32,Int32,Int32,Int32)
- uid: System.Windows.Media.Imaging.WriteableBitmap.#ctor*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WriteableBitmap
  nameWithType: WriteableBitmap.WriteableBitmap
- uid: System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: AddDirtyRect
  nameWithType: WriteableBitmap.AddDirtyRect
- uid: System.Windows.Media.Imaging.WriteableBitmap.BackBuffer*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: BackBuffer
  nameWithType: WriteableBitmap.BackBuffer
- uid: System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: BackBufferStride
  nameWithType: WriteableBitmap.BackBufferStride
- uid: System.Windows.Media.Imaging.WriteableBitmap.Clone*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: Clone
  nameWithType: WriteableBitmap.Clone
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCore*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CloneCore
  nameWithType: WriteableBitmap.CloneCore
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CloneCurrentValue
  nameWithType: WriteableBitmap.CloneCurrentValue
- uid: System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValueCore*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CloneCurrentValueCore
  nameWithType: WriteableBitmap.CloneCurrentValueCore
- uid: System.Windows.Media.Imaging.WriteableBitmap.CreateInstanceCore*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: CreateInstanceCore
  nameWithType: WriteableBitmap.CreateInstanceCore
- uid: System.Windows.Media.Imaging.WriteableBitmap.FreezeCore*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: FreezeCore
  nameWithType: WriteableBitmap.FreezeCore
- uid: System.Windows.Media.Imaging.WriteableBitmap.GetAsFrozenCore*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: GetAsFrozenCore
  nameWithType: WriteableBitmap.GetAsFrozenCore
- uid: System.Windows.Media.Imaging.WriteableBitmap.GetCurrentValueAsFrozenCore*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: GetCurrentValueAsFrozenCore
  nameWithType: WriteableBitmap.GetCurrentValueAsFrozenCore
- uid: System.Windows.Media.Imaging.WriteableBitmap.Lock*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: Lock
  nameWithType: WriteableBitmap.Lock
- uid: System.Windows.Media.Imaging.WriteableBitmap.TryLock*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: TryLock
  nameWithType: WriteableBitmap.TryLock
- uid: System.Windows.Media.Imaging.WriteableBitmap.Unlock*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: Unlock
  nameWithType: WriteableBitmap.Unlock
- uid: System.Windows.Media.Imaging.WriteableBitmap.WritePixels*
  parent: System.Windows.Media.Imaging.WriteableBitmap
  isExternal: false
  name: WritePixels
  nameWithType: WriteableBitmap.WritePixels
