### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol
  id: HttpSimpleClientProtocol
  children:
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  langs:
  - csharp
  name: HttpSimpleClientProtocol
  nameWithType: HttpSimpleClientProtocol
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol
  type: Class
  summary: "Represents the base class for communicating with an XML Web service using the simple HTTP-GET and HTTP-POST protocols bindings."
  remarks: "This class specifies most of the implementation for communicating with an XML Web service over HTTP using encoders to encode the parameters and return values into common MIME formats. These encoders derive from the <xref:System.Web.Services.Protocols.MimeFormatter> class. By default, a proxy class deriving from HttpSimpleClientProtocol encodes parameters using the application/x-www-form-urlencoded MIME type and the response in plain XML. Custom mime formatters can be specified using the <xref:System.Web.Services.Protocols.HttpMethodAttribute> attribute, however, there is no support for integrating this into a service description and proxy generation.       `Notes to Inheritors:` When you override this class, you can introduce methods in the derived class that are specific to a particular type of an XML Web service. The methods simply capture the parameters, and call the base class to do the work of communicating with the site. If the introduced methods are asynchronous, call the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> and <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> methods. If the introduced methods are synchronous, call the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method. The overridden constructor typically sets the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to the URI of the XML Web service method.       The Web Services Description Language tool (Wsdl.exe) generates derived classes of HttpSimpleClientProtocol for a given Service Description."
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service below. The proxy class derives from <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, which derives from the abstract HttpSimpleClientProtocol class.  \n  \n [!code-cs[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_3_1.cs)]\n [!code-cpp[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_3_1.cpp)]\n [!code-vb[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_3_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_3_2.vb)]\n [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_3_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_3_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: HttpSimpleClientProtocol()
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Services.Protocols.HttpSimpleClientProtocol&quot;></xref> class."
  syntax:
    content: protected HttpSimpleClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,String,Object[],AsyncCallback,Object)
  nameWithType: HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Starts an asynchronous invocation of a method of an XML Web service."
  remarks: "The `methodName` parameter is used to find the types of the parameters and return values of the method that is invoking the BeginInvoke method. It is also used to find custom attributes that may have been added to the method. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, and <xref:System.Xml.Serialization.XmlElementAttribute> provide additional information on the derived method that is required for the HTTP protocol.       `asyncState` is passed into `callback` and is included in the <xref:System.IAsyncResult> that is returned from the BeginInvoke method. It is useful for passing information from the context of the asynchronous call to the handling of the asynchronous result in `callback`."
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/610d2bee-8011-4b46-8264-_1.aspx)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/610d2bee-8011-4b46-8264-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `BeginAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/cpp/610d2bee-8011-4b46-8264-_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/csharp/610d2bee-8011-4b46-8264-_2.cs)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/visualbasic/610d2bee-8011-4b46-8264-_2.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "The name of the XML Web service method."
    - id: requestUrl
      type: System.String
      description: "The URL to use when creating the <xref:System.Net.WebRequest>."
    - id: parameters
      type: System.Object[]
      description: "An array of objects containing the parameters to pass to the XML Web service method. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class."
    - id: callback
      type: System.AsyncCallback
      description: "The delegate to call when the asynchronous method call is complete. If `callback` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the delegate is not called."
    - id: asyncState
      type: System.Object
      description: "The additional information supplied by a client."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> that can be passed to the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*> method to obtain the return values from the XML Web service method."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The request reached the server computer, but was not processed successfully."
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Completes asynchronous invocation of an XML Web service method using HTTP."
  remarks: ''
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/df330565-2b74-43bd-92c4-_1.aspx)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/df330565-2b74-43bd-92c4-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `EndAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/cpp/df330565-2b74-43bd-92c4-_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/csharp/df330565-2b74-43bd-92c4-_2.cs)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/visualbasic/df330565-2b74-43bd-92c4-_2.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the above proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "The <xref:System.IAsyncResult> returned from the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*> method."
    return:
      type: System.Object
      description: "An array of objects containing the return value and any by reference or <code>out</code> parameters for the XML Web service method."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> is not the return value from the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*> method."
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  id: Invoke(System.String,System.String,System.Object[])
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: Invoke(String,String,Object[])
  nameWithType: HttpSimpleClientProtocol.Invoke(String,String,Object[])
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(String,String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invokes an XML Web service method using HTTP."
  remarks: "The `methodName` parameter is used to find the types of the parameters and return values of the method that is invoking the Invoke method. It is also used to find custom attributes which may have been added to the method. <xref:System.Web.Services.Protocols.HttpMethodAttribute> and <xref:System.Xml.Serialization.XmlElementAttribute> provide additional information on the derived method that is required for the SOAP protocol."
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form synchronously invokes the `Add` XML Web service method.  \n  \n [!code-cs[HttpSimpleClientProtocol.Invoke Example#2](~/add/codesnippet/csharp/3a69f415-9422-4839-9833-_1.aspx)]\n [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/add/codesnippet/visualbasic/3a69f415-9422-4839-9833-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `Add` method of the proxy class, the Invoke method synchronously invokes the `Add` Web Service method.  \n  \n [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/3a69f415-9422-4839-9833-_2.vb)]\n [!code-cs[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/3a69f415-9422-4839-9833-_2.cs)]\n [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/3a69f415-9422-4839-9833-_2.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the above proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object Invoke (string methodName, string requestUrl, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "The name of the XML Web service method in the derived class that is invoking the Invoke method."
    - id: requestUrl
      type: System.String
      description: "The URL of the XML Web service method that the client is requesting."
    - id: parameters
      type: System.Object[]
      description: "An array of objects containing the parameters to pass to the remote XML Web service. The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class."
    return:
      type: System.Object
      description: "An array of objects containing the return value and any by-reference or <code>out</code> parameters of the derived class method."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The request reached the server computer, but was not processed successfully."
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,String,Object[],SendOrPostCallback)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invokes the specified method asynchronously."
  syntax:
    content: protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "The name of the method to invoke."
    - id: requestUrl
      type: System.String
      description: "The request URL of the invoked web service."
    - id: parameters
      type: System.Object[]
      description: "The parameters to pass to the method."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "The delegate called when the method invocation has completed."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invokes the specified method asynchronously while maintaining an associated state."
  syntax:
    content: protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "The name of the method to invoke."
    - id: requestUrl
      type: System.String
      description: "The request URL of the invoked web service."
    - id: parameters
      type: System.Object[]
      description: "The parameters to pass to the method."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "The delegate called when the method invocation has completed."
    - id: userState
      type: System.Object
      description: "An object containing associated state information that is passed to the `callback` delegate when the method has completed."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: HttpSimpleClientProtocol()
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.HttpSimpleClientProtocol()
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: BeginInvoke(String,String,Object[],AsyncCallback,Object)
  nameWithType: HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: Invoke(String,String,Object[])
  nameWithType: HttpSimpleClientProtocol.Invoke(String,String,Object[])
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(String,String,Object[])
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync(String,String,Object[],SendOrPostCallback)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: HttpSimpleClientProtocol
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: HttpSimpleClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: HttpSimpleClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: HttpSimpleClientProtocol.Invoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: HttpSimpleClientProtocol.InvokeAsync
