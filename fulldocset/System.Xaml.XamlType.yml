### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlType
  id: XamlType
  children:
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  - System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.AllowedContentTypes
  - System.Xaml.XamlType.BaseType
  - System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  - System.Xaml.XamlType.ConstructionRequiresArguments
  - System.Xaml.XamlType.ContentProperty
  - System.Xaml.XamlType.ContentWrappers
  - System.Xaml.XamlType.DeferringLoader
  - System.Xaml.XamlType.Equals(System.Object)
  - System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  - System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.GetAllAttachableMembers
  - System.Xaml.XamlType.GetAllMembers
  - System.Xaml.XamlType.GetAttachableMember(System.String)
  - System.Xaml.XamlType.GetHashCode
  - System.Xaml.XamlType.GetMember(System.String)
  - System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  - System.Xaml.XamlType.GetXamlNamespaces
  - System.Xaml.XamlType.Invoker
  - System.Xaml.XamlType.IsAmbient
  - System.Xaml.XamlType.IsArray
  - System.Xaml.XamlType.IsCollection
  - System.Xaml.XamlType.IsConstructible
  - System.Xaml.XamlType.IsDictionary
  - System.Xaml.XamlType.IsGeneric
  - System.Xaml.XamlType.IsMarkupExtension
  - System.Xaml.XamlType.IsNameScope
  - System.Xaml.XamlType.IsNameValid
  - System.Xaml.XamlType.IsNullable
  - System.Xaml.XamlType.IsPublic
  - System.Xaml.XamlType.IsUnknown
  - System.Xaml.XamlType.IsUsableDuringInitialization
  - System.Xaml.XamlType.IsWhitespaceSignificantCollection
  - System.Xaml.XamlType.IsXData
  - System.Xaml.XamlType.ItemType
  - System.Xaml.XamlType.KeyType
  - System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.LookupAllAttachableMembers
  - System.Xaml.XamlType.LookupAllMembers
  - System.Xaml.XamlType.LookupAllowedContentTypes
  - System.Xaml.XamlType.LookupAttachableMember(System.String)
  - System.Xaml.XamlType.LookupBaseType
  - System.Xaml.XamlType.LookupCollectionKind
  - System.Xaml.XamlType.LookupConstructionRequiresArguments
  - System.Xaml.XamlType.LookupContentProperty
  - System.Xaml.XamlType.LookupContentWrappers
  - System.Xaml.XamlType.LookupCustomAttributeProvider
  - System.Xaml.XamlType.LookupDeferringLoader
  - System.Xaml.XamlType.LookupInvoker
  - System.Xaml.XamlType.LookupIsAmbient
  - System.Xaml.XamlType.LookupIsConstructible
  - System.Xaml.XamlType.LookupIsMarkupExtension
  - System.Xaml.XamlType.LookupIsNameScope
  - System.Xaml.XamlType.LookupIsNullable
  - System.Xaml.XamlType.LookupIsPublic
  - System.Xaml.XamlType.LookupIsUnknown
  - System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  - System.Xaml.XamlType.LookupIsXData
  - System.Xaml.XamlType.LookupItemType
  - System.Xaml.XamlType.LookupKeyType
  - System.Xaml.XamlType.LookupMarkupExtensionReturnType
  - System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  - System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  - System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  - System.Xaml.XamlType.LookupSetTypeConverterHandler
  - System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  - System.Xaml.XamlType.LookupTypeConverter
  - System.Xaml.XamlType.LookupUnderlyingType
  - System.Xaml.XamlType.LookupUsableDuringInitialization
  - System.Xaml.XamlType.LookupValueSerializer
  - System.Xaml.XamlType.MarkupExtensionReturnType
  - System.Xaml.XamlType.Name
  - System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.PreferredXamlNamespace
  - System.Xaml.XamlType.SchemaContext
  - System.Xaml.XamlType.ToString
  - System.Xaml.XamlType.TrimSurroundingWhitespace
  - System.Xaml.XamlType.TypeArguments
  - System.Xaml.XamlType.TypeConverter
  - System.Xaml.XamlType.UnderlyingType
  - System.Xaml.XamlType.ValueSerializer
  langs:
  - csharp
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
  type: Class
  summary: "Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services."
  remarks: "Many APIs in the XamlType class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].       XamlType is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type. XamlType reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation. Its reporting is similar to how the <xref:System.Type> in the CLR type system, together with reflection classes such as <xref:System.Reflection.MemberInfo>, provide information about a CLR type and its usage.       To extend the XAML type system, you can derive from XamlType. To do so effectively, you might also need to implement a <xref:System.Xaml.Schema.XamlTypeInvoker>. The <xref:System.Xaml.Schema.XamlTypeInvoker> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior. The specific custom <xref:System.Xaml.Schema.XamlTypeInvoker> provides a way to reduce the dependencies on the CLR type system, which are used by the default XamlType behavior."
  syntax:
    content: 'public class XamlType : IEquatable<System.Xaml.XamlType>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlType>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Initializes a new instance of the <xref href=&quot;System.Xaml.XamlType&quot;></xref> class based on the underlying CLR type information."
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "The underlying CLR <xref:System.Type> for the XAML type to construct."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML schema context for XAML readers or XAML writers."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Initializes a new instance of the <xref href=&quot;System.Xaml.XamlType&quot;></xref> class based on a string name for the type."
  remarks: "This is a protected constructor. No current public derived classes exist that use this particular path for construction. As a consumer of the existing <xref:System.Xaml.XamlType>, you must use the other constructor signatures (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, or <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) to initialize a <xref:System.Xaml.XamlType> object."
  syntax:
    content: protected XamlType (string typeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: typeName
      type: System.String
      description: "The name of the type to create."
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "The type arguments for a <xref href=&quot;System.Xaml.XamlType&quot;></xref> that represents a generic type. Can be (and often is) <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that the represented type is not a generic type."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML schema context for XAML readers and XAML writers."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>typeName</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Initializes a new instance of the <xref href=&quot;System.Xaml.XamlType&quot;></xref> class based on underlying type information and a <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref> implementation."
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "The underlying type for the XAML type to construct."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML schema context for the XAML reader."
    - id: invoker
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref> implementation that handles run-time reflection calls against the <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Initializes a new instance of the <xref href=&quot;System.Xaml.XamlType&quot;></xref> class based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context."
  remarks: "Use this constructor only for &quot;unknown&quot; types where a XAML type that maps to an underlying type system is unavailable. This constructor might not produce a result where <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName> is `true`. Instead, the default reflector logic reports the underlying type as <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName>. However, this behavior can change because of the <xref:System.Xaml.XamlType.LookupIsUnknown%2A> override."
  syntax:
    content: public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: unknownTypeNamespace
      type: System.String
      description: "The XAML namespace for the type, as a string."
    - id: unknownTypeName
      type: System.String
      description: "The name of the type in the provided `unknownTypeNamespace` XAML namespace."
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "The type arguments for a <xref href=&quot;System.Xaml.XamlType&quot;></xref> that represents a generic type. Can be (and often is) <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that the represented type is not a generic type."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML schema context for XAML readers or XAML writers."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>unknownTypeNamespace</code>, <code>unknownTypeName</code>, or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.AllowedContentTypes
  id: AllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a read-only collection of the types that are usable as the <xref:System.Xaml.XamlType.ContentProperty*> value for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of AllowedContentTypes.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> overrides on <xref:System.Xaml.XamlType> derived classes."
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> AllowedContentTypes { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A read-only collection of possible content types."
  overload: System.Xaml.XamlType.AllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.BaseType
  id: BaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the <xref href=&quot;System.Xaml.XamlType&quot;></xref> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <xref href=&quot;System.Xaml.XamlType&quot;></xref> and schema context."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupBaseType%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupBaseType%2A> on this type. By default, BaseType returns an internal constant that represents an <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.      > [!IMPORTANT] >  <xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead."
  syntax:
    content: public System.Xaml.XamlType BaseType { get; }
    return:
      type: System.Xaml.XamlType
      description: "The <xref href=&quot;System.Xaml.XamlType&quot;></xref> for the immediate base type of this XAML type."
  overload: System.Xaml.XamlType.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  id: CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether an instance of this <xref href=&quot;System.Xaml.XamlType&quot;></xref> has the specified <xref href=&quot;System.Xaml.XamlType&quot;></xref> in its list of assignable types."
  remarks: "Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment. For example, you can use assignment to make type matches for the values of a property. The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system. For example, under a CLR type system, every type has an <xref:System.Object> in its assignable type list.       If one of the two <xref:System.Xaml.XamlType> instances that are used for comparison has <xref:System.Xaml.XamlType.IsUnknown%2A> equal to `true`, this method has a special Unknown mode that returns `true` if the two <xref:System.Xaml.XamlType> instances are equivalent.       The default implementation uses the CLR <xref:System.Type> from <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType> and the input <xref:System.Xaml.XamlType>, and calls <xref:System.Type.IsAssignableFrom%2A>. Override this method if you want a different determination of assignable types.       Passing a null `xamlType` does not throw an exception and always returns `false`.      > [!IMPORTANT] >  CanAssignTo is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead."
  syntax:
    content: public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);
    parameters:
    - id: xamlType
      type: System.Xaml.XamlType
      description: "The type to check against the current <xref href=&quot;System.Xaml.XamlType&quot;></xref> ."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>xamlType</code> is in the assignable types list; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.CanAssignTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  id: ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> must have arguments (generic constraints through <xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;></xref>, initialization text, or other XAML techniques) to construct a valid instance of the type."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> on this type."
  syntax:
    content: public bool ConstructionRequiresArguments { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if construction of an instance requires some argument value; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.ConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentProperty
  id: ContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the <xref href=&quot;System.Xaml.XamlMember&quot;></xref> information for the content property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <xref:System.Windows.Markup.ContentPropertyAttribute> to the type definition.       This property aligns to the `[content property]` information item in the [MS-XAML] specification.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentProperty%2A> on this type."
  syntax:
    content: public System.Xaml.XamlMember ContentProperty { get; }
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref> information for the content property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>. May be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no content property exists."
  overload: System.Xaml.XamlType.ContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentWrappers
  id: ContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <xref uid=&quot;langword_csharp_Collection&lt;T&gt;&quot; name=&quot;Collection&lt;T&gt;&quot; href=&quot;&quot;></xref>."
  remarks: "If there are no wrappers to account for type match loosening, this property is `null`.       Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of ContentWrappers.       In the CLR binding for <xref:System.Xaml> and <xref:System.Xaml.XamlType>, the XAML content wrapper type can be specified on a type as a <xref:System.Windows.Markup.ContentWrapperAttribute>.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentWrappers%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentWrappers%2A> on this type."
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> ContentWrappers { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A read-only collection of possible content wrapper types; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. See Remarks."
  overload: System.Xaml.XamlType.ContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; that represents the deferred loading conversion behavior for this type."
  remarks: "XAML template behavior in WPF is an example of deferred loading behavior.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> on this type."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "The &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref> constraint that represents the deferred loading behavior for this type."
  overload: System.Xaml.XamlType.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indicates whether the current object is equal to another object."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to compare with this object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current object is equal to the <code>obj</code> parameter; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  id: Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indicates whether the current object is equal to another object of the same type."
  syntax:
    content: public bool Equals (System.Xaml.XamlType other);
    parameters:
    - id: other
      type: System.Xaml.XamlType
      description: "An object to compare with this object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current object is equal to the <code>other</code> parameter; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  id: GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns the XAML member that is aliased to a XAML directive by this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> on this type."
  syntax:
    content: public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "The directive for which to find the aliased member."
    return:
      type: System.Xaml.XamlMember
      description: "The aliased member, if found; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.GetAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  id: GetAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a collection that contains all the attachable properties that are exposed by this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "Each <xref:System.Xaml.XamlMember> in the returned collection should contain values that support the concept that the <xref:System.Xaml.XamlMember> is an attachable member. For example, members should return `true` for <xref:System.Xaml.XamlMember.IsAttachable%2A>, a type for <xref:System.Xaml.XamlMember.TargetType%2A>, and so on.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> on this type."
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "A collection that contains zero or more <xref href=&quot;System.Xaml.XamlMember&quot;></xref> values."
  overload: System.Xaml.XamlType.GetAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllMembers
  id: GetAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a collection that contains all the members that are exposed by this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes."
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "A collection that contains zero or more <xref href=&quot;System.Xaml.XamlMember&quot;></xref> values."
  overload: System.Xaml.XamlType.GetAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  id: GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a <xref href=&quot;System.Xaml.XamlMember&quot;></xref> representing a specific named attachable member of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAttachableMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.      > [!IMPORTANT] >  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead."
  syntax:
    content: public System.Xaml.XamlMember GetAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attachable member to get, in `ownerTypeName.MemberName` form."
    return:
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> object for the requested attachable member; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if no attachable member by that name exists."
  overload: System.Xaml.XamlType.GetAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns the hash code for this object."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "An integer hash code."
  overload: System.Xaml.XamlType.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a <xref href=&quot;System.Xaml.XamlMember&quot;></xref> for a specific named member from this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "The value for `name` is expected to be unqualified. Type-qualified names that indicate an attached member should be submitted to <xref:System.Xaml.XamlType.GetAttachableMember%2A> instead. Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.       Calls to this method can invoke <xref:System.Xaml.XamlType.LookupMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.      > [!IMPORTANT] >  <xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead."
  syntax:
    content: public System.Xaml.XamlMember GetMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the member to get (as a string)."
    return:
      type: System.Xaml.XamlMember
      description: "The <xref href=&quot;System.Xaml.XamlMember&quot;></xref> information for the member, if such a member was found; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  id: GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).       The input `parameterCount` is not for requesting the type of a specific positional parameter. It is for specifying the arity of a markup extension usage. Markup extension usage often has multiple &quot;signatures&quot; and uses different parameter arity (count) of positional parameters to differentiate. However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation. For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>. For a specific arity (count), the parameter positions and types can vary. To get the positional type of a specific arity&quot;s markup extension usage, you first call GetPositionalParameters specifying the arity count. Then get the item at that position from the returned collection.       Calls to this method can invoke <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> overrides on <xref:System.Xaml.XamlType> derived classes."
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> GetPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "The count (arity) of the particular syntax or constructor mode that you want information about."
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A list of <xref href=&quot;System.Xaml.XamlType&quot;></xref> values, where each <xref href=&quot;System.Xaml.XamlType&quot;></xref> is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension."
  overload: System.Xaml.XamlType.GetPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a list of string identifiers for XAML namespaces that the type is included in."
  remarks: "Typical XAML namespace identifiers are strings in URI form.       The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> signature only); and the namespaces that are available from the schema context. If these are each `null`, a new list is generated that contains a single empty string. You can override this method to change the lookup methodology."
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "A list of string values, where each string is the URI identifier for a XAML namespace."
  overload: System.Xaml.XamlType.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Invoker
  id: Invoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref> implementation that is associated with this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calling Invoker can invoke either <xref:System.Xaml.XamlType.LookupInvoker%2A> or a specific override of that method. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupInvoker%2A> on this type.       If a <xref:System.Xaml.XamlType.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because of lack of <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType>, then Invoker returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>."
  syntax:
    content: public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref> implementation that is associated with this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an ambient type, as per the XAML definition."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsAmbient%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsAmbient%2A> on this type."
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an ambient type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsArray
  id: IsArray
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an array."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type."
  syntax:
    content: public bool IsArray { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an array; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsArray*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsCollection
  id: IsCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a collection."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type."
  syntax:
    content: public bool IsCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsConstructible
  id: IsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a constructible type, as per the XAML definition."
  remarks: "This property aligns to the `[is default constructible]` information item in the [MS-XAML] specification.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsConstructible%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsConstructible%2A> on this type."
  syntax:
    content: public bool IsConstructible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a constructible type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsDictionary
  id: IsDictionary
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a dictionary, as per the XAML definition."
  remarks: "This property aligns to the `[is dictionary]` information item in the [MS-XAML] specification.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type."
  syntax:
    content: public bool IsDictionary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a dictionary; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsDictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsGeneric
  id: IsGeneric
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a generic type."
  remarks: "This property is a helper property that checks for a null value of <xref:System.Xaml.XamlType.TypeArguments%2A>. There is no specific `Lookup` method related to IsGeneric."
  syntax:
    content: public bool IsGeneric { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a generic type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsGeneric*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsMarkupExtension
  id: IsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a markup extension."
  remarks: "In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for IsMarkupExtension.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> on this type."
  syntax:
    content: public bool IsMarkupExtension { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a markup extension; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameScope
  id: IsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a XAML namescope, as per the XAML definition."
  remarks: "A XAML namescope enforces the name uniqueness of the property or properties used for `x:Name` / `[name property]`. If IsNameScope is `true`, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope. The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.       This property aligns to the `[is name scope]` information item in the [MS-XAML] specification.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNameScope%2A> overrides on <xref:System.Xaml.XamlType> derived classes."
  syntax:
    content: public bool IsNameScope { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a XAML namescope; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> is initialized by using a valid <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref> string as its <xref:System.Xaml.XamlType.Name*>."
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> is initialized by using a valid <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref> string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNullable
  id: IsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a nullable type, as per the XAML definition."
  remarks: "This property aligns to the `[is nullable]` information item in the [MS-XAML] specification.       If you are not using the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNullable%2A> overrides on <xref:System.Xaml.XamlType> derived classes."
  syntax:
    content: public bool IsNullable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a nullable type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsPublic
  id: IsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a public type in the relevant type system."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsPublic%2A> overrides on <xref:System.Xaml.XamlType> derived classes.      > [!IMPORTANT] >  <xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead."
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a public type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a type that cannot be resolved in the underlying type system."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsUnknown%2A> overrides on <xref:System.Xaml.XamlType>derived classes.       For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlType> that has `true` for IsUnknown cannot be written into an object graph. Under the default implementations in <xref:System.Xaml> , the <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlType> reports `true` for IsUnknown. You should not pass a <xref:System.Xaml.XamlType> that has IsUnknown as `true` unless you are prepared to handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior or the XAML node stream prior to writing the object graph."
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an unresolvable type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  id: IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> is built top-down during XAML initialization."
  remarks: "Top-down is a metaphor that approximates XAML processor behavior when creating the object graph. When built top-down, a type is instantiated, attached to the parent, and then has its properties set. Top-down construction avoids invoking property-changed handlers multiple times. Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> on this type."
  syntax:
    content: public bool IsUsableDuringInitialization { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> is built top-down during XAML initialization; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  id: IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a whitespace significant collection, as per the XML definition."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type."
  syntax:
    content: public bool IsWhitespaceSignificantCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a whitespace significant collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsXData
  id: IsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents XML <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>, as per the XAML definition."
  remarks: "This property aligns to the `[is xdata]` information item in the [MS-XAML] specification.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsXData%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsXData%2A> on this type."
  syntax:
    content: public bool IsXData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ItemType
  id: ItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that provides the type information for the <xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;></xref> property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This property is only relevant if this <xref:System.Xaml.XamlType> represents a collection (<xref:System.Xaml.XamlType.IsCollection%2A> is `true`). The `Items` property is whatever property holds items in that type of collection or array.       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupItemType%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupItemType%2A> on this type."
  syntax:
    content: public System.Xaml.XamlType ItemType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> object for the type of the items in the collection; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a collection."
  overload: System.Xaml.XamlType.ItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.KeyType
  id: KeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that provides the type information for the key property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>, if the <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a dictionary."
  remarks: "This property is only relevant if this <xref:System.Xaml.XamlType> represents a dictionary (<xref:System.Xaml.XamlType.IsDictionary%2A> is `true`).       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupKeyType%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupKeyType%2A> on this type."
  syntax:
    content: public System.Xaml.XamlType KeyType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> object for the type of the key for dictionary usage, otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a dictionary."
  overload: System.Xaml.XamlType.KeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  id: LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns the XAML member that is aliased to a XAML directive by this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAliasedProperty%2A>.       The default implementation can return results for the following XAML directives: `Key`; `Name`; `Uid`; and `xml:lang`. Values for these depend on underlying reflection and might still return `null` if no aliased property is found.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "The directive for which to find the aliased member."
    return:
      type: System.Xaml.XamlMember
      description: "The aliased member, if found; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  id: LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns an enumerable set that contains all attachable properties that are exposed by this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>.       Although <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.       The default implementation uses the internal CLR reflection. When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available. This behavior calls LookupAllAttachableMembers recursively to attempt to find a valid base type and returns `null` if no valid base type exists.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type. A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support. If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set."
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "An enumerable set that contains zero or more <xref href=&quot;System.Xaml.XamlMember&quot;></xref> values; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllMembers
  id: LookupAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns an enumerable set that contains all the members that are exposed by this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllMembers%2A>.       Although <xref:System.Xaml.XamlType.GetAllMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.       The default implementation uses the internal CLR reflection. For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available. This behavior calls LookupAllMembers recursively to attempt to find a valid base type, and returns `null` if no valid base type exists.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type. A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support. If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.       Return values for LookupAllMembers and <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> should be mutually exclusive. If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <xref:System.Xaml.XamlMember> values, with one value appearing in the attachable list and another in the standard members list."
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "An enumerable set that contains zero or more <xref href=&quot;System.Xaml.XamlMember&quot;></xref> values."
  overload: System.Xaml.XamlType.LookupAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  id: LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a list of the types that are usable as the <xref:System.Xaml.XamlType.ContentProperty*> value for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.       Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.       The default implementation can use other properties of <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, or <xref:System.Xaml.XamlType.ItemType%2A>) to obtain a result. The `Lookup` overrides for the preceding property list can also be invoked in this determination.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupAllowedContentTypes ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A list of possible content types."
  overload: System.Xaml.XamlType.LookupAllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  id: LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a <xref href=&quot;System.Xaml.XamlMember&quot;></xref> for a specific named attachable from this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAttachableMember%2A>.       The default implementation uses the internal CLR reflection. When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available. This behavior calls LookupAttachableMember recursively to attempt to find a valid base type and returns `null` if no valid base type exists.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.      > [!IMPORTANT] >  LookupAttachableMember is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attachable member to get, in `ownerTypeName.MemberName` form."
    return:
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> object for the requested attachable member; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if no attachable member by that name exists."
  overload: System.Xaml.XamlType.LookupAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupBaseType
  id: LookupBaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns the <xref href=&quot;System.Xaml.XamlType&quot;></xref> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <xref href=&quot;System.Xaml.XamlType&quot;></xref> and schema context."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.BaseType%2A>.       The default implementation might return an internal constant that represents the <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.      > [!IMPORTANT] >  LookupBaseType is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead."
  syntax:
    content: protected virtual System.Xaml.XamlType LookupBaseType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "The <xref href=&quot;System.Xaml.XamlType&quot;></xref> for the immediate base type of this XAML type."
  overload: System.Xaml.XamlType.LookupBaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCollectionKind
  id: LookupCollectionKind
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value of the <xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;></xref> enumeration that declares which specific collection type this <xref href=&quot;System.Xaml.XamlType&quot;></xref> uses."
  remarks: "This method is invoked by an internal private method (no public `CollectionKind` or `GetCollectionKind` API exists on <xref:System.Xaml.XamlType>).       The default implementation uses the internal CLR reflection. For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available. This behavior indirectly calls LookupCollectionKind recursively to attempt to find a valid base type; it returns <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> if no valid base type exists. In general, the default implementation attempts to find the `Add` method of the underlying type by reflection. If found, the <xref:System.Reflection.MethodInfo> of the `Add` method is enough information to determine which <xref:System.Xaml.Schema.XamlCollectionKind> value should be returned. Otherwise, it returns <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlCollectionKind
      description: "A value of the <xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;></xref> enumeration."
  overload: System.Xaml.XamlType.LookupCollectionKind*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  id: LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> must have arguments (generic constraints through <xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;></xref>, initialization text, or other XAML techniques) to construct a valid instance of the type."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.       The default implementation returns `false` for types considered value types in the CLR type system. For other than value types, CLR reflection <xref:System.Reflection.ConstructorInfo> is used to determine whether a default constructor exists.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type."
  syntax:
    content: protected virtual bool LookupConstructionRequiresArguments ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if construction of an instance requires some argument value; otherwise, false."
  overload: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentProperty
  id: LookupContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns <xref href=&quot;System.Xaml.XamlMember&quot;></xref> information for the content property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ContentProperty%2A>.       The default implementation checks for <xref:System.Windows.Markup.ContentPropertyAttribute> on the type definition. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If these checks do not discover a content type, the default implementation returns `null`.       Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupContentProperty ();
    parameters: []
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref> information for the content property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>. May be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentWrappers
  id: LookupContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a list of <xref href=&quot;System.Xaml.XamlType&quot;></xref> values that represent the content wrappers for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system. The types of collection items for the content wrapper are expected to be limited in some manner beyond <xref:System.Object> or a neutral object equivalent. However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system. More than one content wrapper can exist on a type.       For an example class and scenario from the WPF XAML implementation, see <xref:System.Windows.Documents.InlineCollection>."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupContentWrappers ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A list of <xref href=&quot;System.Xaml.XamlType&quot;></xref> values that represent the content wrappers for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.LookupContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "When implemented in a derived class, returns an <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;></xref> implementation."
  remarks: "Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values. In absence of an override, the internal reflector uses typical CLR reflection logic.       The default implementation returns `null`."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "An <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;></xref> implementation."
  overload: System.Xaml.XamlType.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; object, which is used for deferred loading of XAML-declared objects."
  remarks: "This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.DeferringLoader%2A>. Override this method if you want <xref:System.Xaml.XamlType.DeferringLoader%2A> to return a different value than is enabled by default internal reflection and are also providing custom <xref:System.Xaml.Schema.XamlTypeInvoker> information.       The default implementation returns an object on the basis of reading <xref:System.Windows.Markup.XamlDeferLoadAttribute>. It can also  check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, this method returns `null`."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; that has a <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref> constraint on the generic."
  overload: System.Xaml.XamlType.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref> that is associated with this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.Invoker%2A>.       The default implementation does not require that a <xref:System.Xaml.XamlType> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlTypeInvoker>. However, an <xref:System.Xaml.XamlType.UnderlyingType%2A> value must exist for the <xref:System.Xaml.XamlType>; otherwise, the default implementation returns `null`.       Override this method if you also create a derived class from <xref:System.Xaml.Schema.XamlTypeInvoker> and intend to return the derived class. If you return `null`, <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> to callers."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an ambient type, as per the XAML definition."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsAmbient%2A>.       The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A> and can check the base types. This implementation checks for the <xref:System.Windows.Markup.AmbientAttribute> that is applied to the relevant type&quot;s definition at the class level and returns `true` in this case. All other cases return `false`.       Override this method if you want <xref:System.Xaml.XamlType.IsAmbient%2A> to return a different value than is enabled by default internal reflection."
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents an ambient type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsConstructible
  id: LookupIsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a constructible type, as per the XAML definition."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsConstructible%2A>.       The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A>. The type must be concrete, non-nested, and closed. The default implementation checks whether the type is a value type and the return of <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>. For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, this method returns `true`.       Override this method if you want <xref:System.Xaml.XamlType.IsConstructible%2A> to return a different value than is enabled by default internal reflection."
  syntax:
    content: protected virtual bool LookupIsConstructible ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a constructible type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  id: LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a markup extension."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.       The default implementation consists only of this call:       `return CanAssignTo(XamlLanguage.MarkupExtension);`       Override this method if you want <xref:System.Xaml.XamlType.IsMarkupExtension%2A> to use different logic.       In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>."
  syntax:
    content: protected virtual bool LookupIsMarkupExtension ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a markup extension; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNameScope
  id: LookupIsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a XAML namescope, as per the XAML definition."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNameScope%2A>.       The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Windows.Markup.INameScope>. <xref:System.Windows.Markup.INameScope> is an interface that is defined in the assembly WindowsBase. This technique for XAML namescope identification is used both by WPF and [!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)] implementations of XAML.       Override this method if you want <xref:System.Xaml.XamlType.IsNameScope%2A> to use different logic.       A XAML namescope enforces the name uniqueness of the property or properties that are used for `x:Name` / `[name property]`. If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope. The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered."
  syntax:
    content: protected virtual bool LookupIsNameScope ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a XAML namescope; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNullable
  id: LookupIsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a nullable type, as per the XAML definition."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNullable%2A>.       The default implementation makes a determination based on the CLR core library nullable concept, checked against <xref:System.Xaml.XamlType.UnderlyingType%2A>. For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.       Override this method if you want <xref:System.Xaml.XamlType.IsNullable%2A> to use different logic."
  syntax:
    content: protected virtual bool LookupIsNullable ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a nullable type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsPublic
  id: LookupIsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a public type in the relevant type system."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsPublic%2A>.       The default implementation uses CLR reflection against a non-null <xref:System.Xaml.XamlType.UnderlyingType%2A>. For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.       Override this method if you want <xref:System.Xaml.XamlType.IsPublic%2A> to use different logic.      > [!IMPORTANT] >  LookupIsPublic is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead."
  syntax:
    content: protected virtual bool LookupIsPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a public type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a type that cannot be resolved in the underlying type system."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUnknown%2A>.       The default implementation can use CLR reflection. For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.       Override this method if you want <xref:System.Xaml.XamlType.IsUnknown%2A> to use different logic."
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a nonresolvable type; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  id: LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a whitespace significant collection, as per the XML definition."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.       The default implementation returns a value based on reading <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>. It can also check the <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is not available, it returns `false`.       Override this method if you want <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> to use different logic."
  syntax:
    content: protected virtual bool LookupIsWhitespaceSignificantCollection ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a white-space significant collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsXData
  id: LookupIsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents XML <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>, as per the XAML definition."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.IsXData%2A>.       The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Xml.Serialization.IXmlSerializable>.       Override this method if you want <xref:System.Xaml.XamlType.IsXData%2A> to use different logic."
  syntax:
    content: protected virtual bool LookupIsXData ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupItemType
  id: LookupItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that provides the type information for the <xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;></xref> property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.ItemType%2A>.       The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; checking <xref:System.Xaml.XamlType.IsArray%2A>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.       Override this method if you want <xref:System.Xaml.XamlType.ItemType%2A> to use different logic. Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> returns <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> should return `null`."
  syntax:
    content: protected virtual System.Xaml.XamlType LookupItemType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> object for the type of the items in the collection; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a collection."
  overload: System.Xaml.XamlType.LookupItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupKeyType
  id: LookupKeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that provides the type information for the key property of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>, if the <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a dictionary."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.KeyType%2A>.       The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.       Override this method if you want <xref:System.Xaml.XamlType.KeyType%2A> to use different logic. Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> does not return <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> should return `null`."
  syntax:
    content: protected virtual System.Xaml.XamlType LookupKeyType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> object for the type of the key for dictionary usage, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a dictionary,"
  overload: System.Xaml.XamlType.LookupKeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  id: LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that provides the type information for the returned <xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;></xref> of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>, if it represents a markup extension."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.       The default implementation returns a <xref:System.Xaml.XamlType> on the basis of reading <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is not available, it returns `null`.       Override this method if you want <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> to use different logic."
  syntax:
    content: protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> object for the return type for markup extension usage; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a markup extension."
  overload: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  id: LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns the <xref href=&quot;System.Xaml.XamlMember&quot;></xref> for a specific named member from this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.GetMember%2A>.       The default implementation returns a <xref:System.Xaml.XamlType> based on internal CLR reflection and evaluation against the schema context.       Override this method if you want <xref:System.Xaml.XamlType.GetMember%2A> to use different logic.      > [!IMPORTANT] >  LookupMember is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);
    parameters:
    - id: name
      type: System.String
      description: "The name of the member to get (as a string)."
    - id: skipReadOnlyCheck
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to return a member even if that member has a <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> value for &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt;; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to not return a &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt; member. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Xaml.XamlMember
      description: "The <xref href=&quot;System.Xaml.XamlMember&quot;></xref> information for the member, if a member was found; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  id: LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.GetPositionalParameters%2A>.       The default implementation uses internal reflection information based on finding constructors and checking the arity. Override this method if you want <xref:System.Xaml.XamlType.GetPositionalParameters%2A> to use different logic.       This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).       The input `parameterCount` is not for requesting the type of a specific positional parameter. It is for specifying the arity of a markup extension usage. Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate. However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation. For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>. For a specific arity count, the parameter positions and types can vary. To get the positional type of a specific arity&quot;s markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> with the arity count. Then get the item at that position from the returned collection."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "The count (arity) of the particular syntax or constructor mode that you want information about."
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A list of <xref href=&quot;System.Xaml.XamlType&quot;></xref> values where each such <xref href=&quot;System.Xaml.XamlType&quot;></xref> is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension."
  overload: System.Xaml.XamlType.LookupPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  id: LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a handler callback to use for the set operations of markup extensions."
  remarks: "The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns `null`."
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
      description: "A handler callback to use for the set operations of markup extensions."
  overload: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  id: LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a handler to use for type converter setting cases."
  remarks: "The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns `null`."
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
      description: "A handler to use for type converter setting cases."
  overload: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  id: LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> should be serialized using a mode that  trims surrounding whitespace."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.       The default implementation returns a value based on reading <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns `false`."
  syntax:
    content: protected virtual bool LookupTrimSurroundingWhitespace ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> should be serialized in a mode that trims surrounding whitespace; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; that has a <xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref> constraint, which represents type-conversion behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.TypeConverter%2A>.       The default implementation returns a value based on reading <xref:System.ComponentModel.TypeConverterAttribute>. The default implementation can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. It also includes special logic for default conversion of enumerations, common value types, and generics. If a value is unavailable, it returns `null`.       Override this method if you want <xref:System.Xaml.XamlType.TypeConverter%2A> to use different logic."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref> constraint that represents type-conversion behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUnderlyingType
  id: LookupUnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns the CLR <xref:System.Type> that underlies this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.UnderlyingType%2A>.       The default implementation returns an internal field. That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.       Override this method if you want <xref:System.Xaml.XamlType.UnderlyingType%2A> to use different logic."
  syntax:
    content: protected virtual Type LookupUnderlyingType ();
    parameters: []
    return:
      type: System.Type
      description: "The CLR <xref:System.Type> that underlies this <xref href=&quot;System.Xaml.XamlType&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupUnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  id: LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> is built top-down during XAML initialization."
  remarks: "Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph. When built top-down, a type is instantiated, attached to the parent, and has its properties set. Top-down construction avoids invoking property-changed handlers multiple times. Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.       This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.       The default implementation returns a value based on reading <xref:System.Windows.Markup.UsableDuringInitializationAttribute>. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns `false`.       Override this method if you want <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> to use different logic."
  syntax:
    content: protected virtual bool LookupUsableDuringInitialization ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> is built top-down during XAML initialization; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; that has a <xref:System.Windows.Markup.ValueSerializer> constraint, which represents value serialization behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This method can be invoked by calls to <xref:System.Xaml.XamlType.ValueSerializer%2A>.       The default implementation returns a value based on reading <xref:System.Windows.Markup.ValueSerializerAttribute>. It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type. It also includes special logic for default serialization of enumerations, common value types, or generics. If a value is unavailable, it returns `null`.       Override this method if you want <xref:System.Xaml.XamlType.ValueSerializer%2A> to use different logic."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref:System.Windows.Markup.ValueSerializer> constraint that represents value serialization behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  id: MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that provides the type information for the returned <xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;></xref> of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>, if it represents a markup extension."
  remarks: "This property is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (`x:MarkupExtension` is in the assignable types list).       If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> on this type."
  syntax:
    content: public System.Xaml.XamlType MarkupExtensionReturnType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> object for the return type for markup extension usage; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a markup extension."
  overload: System.Xaml.XamlType.MarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Name
  id: Name
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the string name of the type that this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents."
  remarks: "This property typically gets the schema-constructed name (per the <xref:System.Xaml.XamlType.%23ctor%2A> signature), or the name of the <xref:System.Type>, if it is constructed by using the pertinent constructor of the CLR type system."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "The string name of this XAML type."
  overload: System.Xaml.XamlType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determines whether two specified <xref href=&quot;System.Xaml.XamlType&quot;></xref> objects have the same value."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the value of <code>xamlType1</code> is the same as the value of <code>xamlType2</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determines whether two specified <xref href=&quot;System.Xaml.XamlType&quot;></xref> objects have different values."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the value of <code>xamlType1</code> is different from the value of <code>xamlType2</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the single XAML namespace that is the primary XAML namespace for this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "This implementation provides the same value as calling <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> and then getting the first value string from the returned enumerable set."
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "The identifier, as a string, of the primary XAML namespace for this XAML type."
  overload: System.Xaml.XamlType.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the active <xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref> for processing this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "<xref:System.Xaml.XamlSchemaContext> is a required parameter entry when constructing a <xref:System.Xaml.XamlType>."
  syntax:
    content: public System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "The active <xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref> for processing this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ToString
  id: ToString
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Returns a string representation of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "The <xref:System.Xaml.XamlType> implementation of <xref:System.Object.ToString%2A> returns the <xref:System.Xaml.XamlType.Name%2A> property of the <xref:System.Xaml.XamlType>."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string representation of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  id: TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a value that indicates whether this <xref href=&quot;System.Xaml.XamlType&quot;></xref> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type."
  syntax:
    content: public bool TrimSurroundingWhitespace { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a type that uses whitespace trimming; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.TrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeArguments
  id: TypeArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a list of type arguments for cases where this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents a generic."
  remarks: "There are certain scenarios for a <xref:System.Xaml.XamlType> where calling the TypeArguments parameter returns a list where the types are still open. In this case, one or more of the returned <xref:System.Xaml.XamlType> values will have placeholder values for <xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName>, such as `T`, to represent that the generic is still open. This scenario can occur if you get a <xref:System.Xaml.XamlType> from a call to <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, instead of from a XAML reader implementation."
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> TypeArguments { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "A list of type argument types; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> does not represent a generic."
  overload: System.Xaml.XamlType.TypeArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref> constraint that represents type conversion behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupTypeConverter%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupTypeConverter%2A> on this type."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref> constraint that represents type conversion behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.UnderlyingType
  id: UnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets the CLR <xref:System.Type> that underlies this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  syntax:
    content: public Type UnderlyingType { get; }
    return:
      type: System.Type
      description: "The CLR <xref:System.Type> that underlies this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  overload: System.Xaml.XamlType.UnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Gets a &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref:System.Windows.Markup.ValueSerializer> constraint that represents value serialization behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>."
  remarks: "If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupValueSerializer%2A> overrides on <xref:System.Xaml.XamlType> derived classes. For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupValueSerializer%2A> on this type."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; with <xref:System.Windows.Markup.ValueSerializer> constraint that represents value serialization behavior for values of this <xref href=&quot;System.Xaml.XamlType&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlType>
  nameWithType: IList<XamlType>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
- uid: System.Xaml.Schema.XamlTypeInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
- uid: System.Xaml.XamlType.AllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlType.ContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Equals(System.Object)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlMember>
  nameWithType: ICollection<XamlMember>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.GetAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
- uid: System.Xaml.XamlType.GetHashCode
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlType.GetMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
- uid: System.Xaml.XamlType.GetXamlNamespaces
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Invoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
- uid: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<XamlMember>
  nameWithType: IEnumerable<XamlMember>
  fullName: System.Collections.Generic.IEnumerable<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
- uid: System.Xaml.XamlType.LookupBaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
- uid: System.Xaml.XamlType.LookupCollectionKind
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
- uid: System.Xaml.Schema.XamlCollectionKind
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlCollectionKind
  nameWithType: XamlCollectionKind
  fullName: System.Xaml.Schema.XamlCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
- uid: System.Xaml.XamlType.LookupContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
- uid: System.Xaml.XamlType.LookupContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
- uid: System.Xaml.XamlType.LookupInvoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
- uid: System.Xaml.XamlType.LookupIsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
- uid: System.Xaml.XamlType.LookupIsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
- uid: System.Xaml.XamlType.LookupIsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
- uid: System.Xaml.XamlType.LookupIsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
- uid: System.Xaml.XamlType.LookupIsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
- uid: System.Xaml.XamlType.LookupIsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
- uid: System.Xaml.XamlType.LookupIsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
- uid: System.Xaml.XamlType.LookupItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
- uid: System.Xaml.XamlType.LookupKeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetMarkupExtensionEventArgs>
  nameWithType: EventHandler<XamlSetMarkupExtensionEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetMarkupExtensionEventArgs
    name: XamlSetMarkupExtensionEventArgs
    nameWithType: XamlSetMarkupExtensionEventArgs
    fullName: XamlSetMarkupExtensionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetTypeConverterEventArgs>
  nameWithType: EventHandler<XamlSetTypeConverterEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetTypeConverterEventArgs
    name: XamlSetTypeConverterEventArgs
    nameWithType: XamlSetTypeConverterEventArgs
    fullName: XamlSetTypeConverterEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
- uid: System.Xaml.XamlType.LookupTypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupUnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
- uid: System.Xaml.XamlType.LookupValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
- uid: System.Xaml.XamlType.#ctor*
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType
  nameWithType: XamlType.XamlType
- uid: System.Xaml.XamlType.AllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
- uid: System.Xaml.XamlType.CanAssignTo*
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo
  nameWithType: XamlType.CanAssignTo
- uid: System.Xaml.XamlType.ConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
- uid: System.Xaml.XamlType.ContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
- uid: System.Xaml.XamlType.Equals*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals
  nameWithType: XamlType.Equals
- uid: System.Xaml.XamlType.GetAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty
  nameWithType: XamlType.GetAliasedProperty
- uid: System.Xaml.XamlType.GetAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers
  nameWithType: XamlType.GetAllAttachableMembers
- uid: System.Xaml.XamlType.GetAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers
  nameWithType: XamlType.GetAllMembers
- uid: System.Xaml.XamlType.GetAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember
  nameWithType: XamlType.GetAttachableMember
- uid: System.Xaml.XamlType.GetHashCode*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode
  nameWithType: XamlType.GetHashCode
- uid: System.Xaml.XamlType.GetMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember
  nameWithType: XamlType.GetMember
- uid: System.Xaml.XamlType.GetPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters
  nameWithType: XamlType.GetPositionalParameters
- uid: System.Xaml.XamlType.GetXamlNamespaces*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlType.GetXamlNamespaces
- uid: System.Xaml.XamlType.Invoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty
  nameWithType: XamlType.LookupAliasedProperty
- uid: System.Xaml.XamlType.LookupAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers
  nameWithType: XamlType.LookupAllAttachableMembers
- uid: System.Xaml.XamlType.LookupAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers
  nameWithType: XamlType.LookupAllMembers
- uid: System.Xaml.XamlType.LookupAllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes
  nameWithType: XamlType.LookupAllowedContentTypes
- uid: System.Xaml.XamlType.LookupAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember
  nameWithType: XamlType.LookupAttachableMember
- uid: System.Xaml.XamlType.LookupBaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType
  nameWithType: XamlType.LookupBaseType
- uid: System.Xaml.XamlType.LookupCollectionKind*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind
  nameWithType: XamlType.LookupCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments
  nameWithType: XamlType.LookupConstructionRequiresArguments
- uid: System.Xaml.XamlType.LookupContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty
  nameWithType: XamlType.LookupContentProperty
- uid: System.Xaml.XamlType.LookupContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers
  nameWithType: XamlType.LookupContentWrappers
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlType.LookupCustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlType.LookupDeferringLoader
- uid: System.Xaml.XamlType.LookupInvoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlType.LookupInvoker
- uid: System.Xaml.XamlType.LookupIsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlType.LookupIsAmbient
- uid: System.Xaml.XamlType.LookupIsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible
  nameWithType: XamlType.LookupIsConstructible
- uid: System.Xaml.XamlType.LookupIsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension
  nameWithType: XamlType.LookupIsMarkupExtension
- uid: System.Xaml.XamlType.LookupIsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope
  nameWithType: XamlType.LookupIsNameScope
- uid: System.Xaml.XamlType.LookupIsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable
  nameWithType: XamlType.LookupIsNullable
- uid: System.Xaml.XamlType.LookupIsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic
  nameWithType: XamlType.LookupIsPublic
- uid: System.Xaml.XamlType.LookupIsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlType.LookupIsUnknown
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.LookupIsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData
  nameWithType: XamlType.LookupIsXData
- uid: System.Xaml.XamlType.LookupItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType
  nameWithType: XamlType.LookupItemType
- uid: System.Xaml.XamlType.LookupKeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType
  nameWithType: XamlType.LookupKeyType
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType
  nameWithType: XamlType.LookupMarkupExtensionReturnType
- uid: System.Xaml.XamlType.LookupMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember
  nameWithType: XamlType.LookupMember
- uid: System.Xaml.XamlType.LookupPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters
  nameWithType: XamlType.LookupPositionalParameters
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler
  nameWithType: XamlType.LookupSetMarkupExtensionHandler
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler
  nameWithType: XamlType.LookupSetTypeConverterHandler
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace
  nameWithType: XamlType.LookupTrimSurroundingWhitespace
- uid: System.Xaml.XamlType.LookupTypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlType.LookupTypeConverter
- uid: System.Xaml.XamlType.LookupUnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType
  nameWithType: XamlType.LookupUnderlyingType
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization
  nameWithType: XamlType.LookupUsableDuringInitialization
- uid: System.Xaml.XamlType.LookupValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlType.LookupValueSerializer
- uid: System.Xaml.XamlType.MarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
- uid: System.Xaml.XamlType.op_Equality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality
  nameWithType: XamlType.op_Equality
- uid: System.Xaml.XamlType.op_Inequality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality
  nameWithType: XamlType.op_Inequality
- uid: System.Xaml.XamlType.PreferredXamlNamespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext*
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString
  nameWithType: XamlType.ToString
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
