### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ICommandSource
  id: ICommandSource
  children:
  - System.Windows.Input.ICommandSource.Command
  - System.Windows.Input.ICommandSource.CommandParameter
  - System.Windows.Input.ICommandSource.CommandTarget
  langs:
  - csharp
  name: ICommandSource
  nameWithType: ICommandSource
  fullName: System.Windows.Input.ICommandSource
  type: Interface
  summary: "Define um objeto que sabe como invocar um comando."
  remarks: "A origem de comando define a forma como um comando é invocado por esse objeto específico.  Por exemplo, se um <xref:System.Windows.Controls.Button>está associado um comando, o comando é invocada quando o <xref:System.Windows.Controls.Button>é clicado.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button>       Uma origem de comando normalmente desativará próprio se não é possível executar o comando que se encontra associado no destino do comando atual.  Por exemplo, um <xref:System.Windows.Controls.MenuItem>associados a <xref:System.Windows.Input.ApplicationCommands.Paste%2A>comando ficam cinzentas próprio quando o <xref:System.Windows.Input.ApplicationCommands.Paste%2A>comando não é possível executar o destino de comando atual.</xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Controls.MenuItem>       Normalmente, uma origem de comando irá escutar o <xref:System.Windows.Input.ICommand.CanExecuteChanged>eventos no comando.</xref:System.Windows.Input.ICommand.CanExecuteChanged>  A origem de comando informa quando condições alterar no destino do comando, tal como a perda de foco do teclado.  A origem de comando, em seguida, pode consultar o comando utilizando a <xref:System.Windows.Input.ICommand.CanExecute%2A>método.</xref:System.Windows.Input.ICommand.CanExecute%2A>       Algumas das classes no [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] que implemente ICommandSource são: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>e <xref:System.Windows.Documents.Hyperlink>.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.Primitives.ButtonBase>       No [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] commanding sistema, o <xref:System.Windows.Input.InputBinding.CommandTarget%2A>propriedade um ICommandSource só é aplicável quando <xref:System.Windows.Input.ICommand>é <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  Se o <xref:System.Windows.Input.InputBinding.CommandTarget%2A>está definido num ICommandSource e o comando correspondente não é um <xref:System.Windows.Input.RoutedCommand>, o destino de comando é ignorado.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>"
  syntax:
    content: public interface ICommandSource
  implements: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.Command
  id: Command
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém o comando será executado quando a origem de comando é invocada."
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "O comando será executado quando a origem de comando é invocada."
  overload: System.Windows.Input.ICommandSource.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Representa um definido pelo utilizador valor de dados que pode ser transmitido para o comando quando é executada."
  remarks: "Normalmente, o CommandParameter é utilizado para transmitir informações específicas para o comando quando é executada.  O tipo de dados é definido pelo comando."
  syntax:
    content: public object CommandParameter { get; }
    return:
      type: System.Object
      description: "Os dados específicos de comando."
  overload: System.Windows.Input.ICommandSource.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "O objecto que está a ser executado o comando no."
  remarks: "No [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] commanding sistema, o <xref:System.Windows.Input.InputBinding.CommandTarget%2A>propriedade um <xref:System.Windows.Input.ICommandSource>só é aplicável quando <xref:System.Windows.Input.ICommand>é <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  Se o <xref:System.Windows.Input.InputBinding.CommandTarget%2A>está definido num <xref:System.Windows.Input.ICommandSource>e o comando correspondente não é um <xref:System.Windows.Input.RoutedCommand>, o destino de comando é ignorado.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>       Quando utilizado com um <xref:System.Windows.Input.RoutedCommand>, o comando de destino é o objeto no qual o <xref:System.Windows.Input.CommandManager.Executed>e <xref:System.Windows.Input.CommandManager.CanExecute>eventos são gerados.</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.RoutedCommand> Se a propriedade CommandTarget não estiver definida, será utilizado o elemento com o foco do teclado como destino."
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; }
    return:
      type: System.Windows.IInputElement
      description: "O objecto que está a ser executado o comando no."
  overload: System.Windows.Input.ICommandSource.CommandTarget*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.ICommandSource.Command
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ICommandSource.CommandParameter
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommandSource.CommandTarget
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ICommandSource.Command*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
- uid: System.Windows.Input.ICommandSource.CommandParameter*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
- uid: System.Windows.Input.ICommandSource.CommandTarget*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
