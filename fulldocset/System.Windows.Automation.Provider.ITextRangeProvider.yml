### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.ITextRangeProvider
  id: ITextRangeProvider
  children:
  - System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  - System.Windows.Automation.Provider.ITextRangeProvider.Clone
  - System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  - System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  - System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  - System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  - System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  - System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  - System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.Select
  langs:
  - csharp
  name: ITextRangeProvider
  nameWithType: ITextRangeProvider
  fullName: System.Windows.Automation.Provider.ITextRangeProvider
  type: Interface
  summary: "Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <xref href=&quot;System.Windows.Automation.Provider.ITextProvider&quot;></xref>."
  remarks: "Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.       A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("5347ad7b-c355-46f8-aff5-909033582f63")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface ITextRangeProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  id: AddToSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: AddToSelection()
  nameWithType: ITextRangeProvider.AddToSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections."
  remarks: "The text insertion point moves to the area of the new selection.       Providing a degenerate text range moves the insertion point."
  syntax:
    content: public void AddToSelection ();
    parameters: []
  overload: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "If text provider does not support multiple, disjoint selections (that is, <xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection*> must have a value of <xref uid=&quot;langword_csharp_Multiple&quot; name=&quot;Multiple&quot; href=&quot;&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone
  id: Clone
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Clone()
  nameWithType: ITextRangeProvider.Clone()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Returns a new <xref href=&quot;System.Windows.Automation.Provider.ITextRangeProvider&quot;></xref> identical to the original <xref href=&quot;System.Windows.Automation.Provider.ITextRangeProvider&quot;></xref> and inheriting all properties of the original."
  remarks: "The new range can be manipulated independently from the original."
  syntax:
    content: public System.Windows.Automation.Provider.ITextRangeProvider Clone ();
    parameters: []
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "The new text range. A null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) is never returned."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  id: Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Compare(ITextRangeProvider)
  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Returns a value that indicates whether the span (the <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> endpoint to the <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> endpoint) of a text range is the same as another text range."
  syntax:
    content: public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);
    parameters:
    - id: range
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "A text range to compare"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the span of both text ranges is identical; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Compare*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If the range being compared does not come from the same text provider."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Returns a value that specifies whether two text ranges have identical endpoints."
  syntax:
    content: public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "The <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> or <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> endpoint of the caller."
    - id: targetRange
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "The target range for comparison."
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "The <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> or <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> endpoint of the target."
    return:
      type: System.Int32
      description: "Returns a negative value if the caller&quot;s endpoint occurs earlier in the text than the target endpoint.       Returns zero if the caller&quot;s endpoint is at the same location as the target endpoint.       Returns a positive value if the caller&quot;s endpoint occurs later in the text than the target endpoint."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>targetRange</code> is from a different text provider."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  id: ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Expands the text range to the specified text unit."
  remarks: "If the range is already an exact quantity of the specified units then it remains unchanged.       There is a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, &quot;{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text&quot; where &quot;{&quot; and &quot;}&quot; are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.      4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;Range adjustments by Move & ExpandToEnclosingUnit&quot;)   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      > [!NOTE] >  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.       ExpandToEnclosingUnit respects both hidden and visible text.       ExpandToEnclosingUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>"
  syntax:
    content: public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "The textual unit."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  id: FindAttribute(System.Int32,System.Object,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: FindAttribute(Int32,Object,Boolean)
  nameWithType: ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Returns a text range subset that has the specified attribute value."
  remarks: "There is no differentiation between hidden and visible text."
  syntax:
    content: public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);
    parameters:
    - id: attribute
      type: System.Int32
      description: "The attribute to search for."
    - id: value
      type: System.Object
      description: "The attribute value to search for. This value must match the type specified for the attribute."
    - id: backward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "A text range having a matching attribute and attribute value; otherwise null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  id: FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: FindText(String,Boolean,Boolean)
  nameWithType: ITextRangeProvider.FindText(String,Boolean,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(String,Boolean,Boolean)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Returns a text range subset that contains the specified text."
  remarks: "There is no differentiation between hidden and visible text."
  syntax:
    content: public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);
    parameters:
    - id: text
      type: System.String
      description: "The text string to search for."
    - id: backward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the last occurring text range should be returned instead of the first; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if case should be ignored; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "A text range matching the specified text; otherwise null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in [!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  id: GetAttributeValue(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetAttributeValue(Int32)
  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Retrieves the value of the specified attribute across the text range."
  remarks: "There is no differentiation between hidden and visible text."
  syntax:
    content: public object GetAttributeValue (int attribute);
    parameters:
    - id: attribute
      type: System.Int32
      description: "The text attribute."
    return:
      type: System.Object
      description: "Retrieves an object representing the value of the specified attribute. For example, `GetAttributeValue(TextPattern.FontNameAttribute)` would return a string that represents the font name of the text range while `GetAttributeValue(TextPattern.IsItalicAttribute)` would return a value of type <xref:System.Boolean>.       Returns <xref href=&quot;System.Windows.Automation.TextPattern.MixedAttributeValue&quot;></xref> if the value of the specified attribute varies over the text range.       Returns <xref href=&quot;System.Windows.Automation.AutomationElement.NotSupported&quot;></xref> if the specified attribute is not supported by the provider or the control."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If the specified attribute is not valid."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  id: GetBoundingRectangles
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetBoundingRectangles()
  nameWithType: ITextRangeProvider.GetBoundingRectangles()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range."
  syntax:
    content: public double[] GetBoundingRectangles ();
    parameters: []
    return:
      type: System.Double[]
      description: "An array of bounding rectangles for each full or partial line of text in a text range.       An empty array for a degenerate range.       An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  id: GetChildren
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetChildren()
  nameWithType: ITextRangeProvider.GetChildren()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Retrieves a collection of all embedded objects that fall within the text range."
  syntax:
    content: public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();
    parameters: []
    return:
      type: System.Windows.Automation.Provider.IRawElementProviderSimple[]
      description: "A collection of child objects that fall within the range. Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.       Returns an empty collection if there are no child objects."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  id: GetEnclosingElement
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetEnclosingElement()
  nameWithType: ITextRangeProvider.GetEnclosingElement()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Returns the innermost control that encloses the text range."
  syntax:
    content: public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();
    parameters: []
    return:
      type: System.Windows.Automation.Provider.IRawElementProviderSimple
      description: "The enclosing control, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  id: GetText(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetText(Int32)
  nameWithType: ITextRangeProvider.GetText(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Retrieves the plain text of the range."
  remarks: "GetText respects both hidden and visible text.       If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.       GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order."
  syntax:
    content: public string GetText (int maxLength);
    parameters:
    - id: maxLength
      type: System.Int32
      description: "The maximum length of the string to return. Use `-1` if no limit is required."
    return:
      type: System.String
      description: "The plain text of the text range, possibly truncated at the specified <code>maxLength</code>."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetText*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "If <code>maxLength</code> is less than -1."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  id: Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Move(TextUnit,Int32)
  nameWithType: ITextRangeProvider.Move(TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit,Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Moves the text range the specified number of text units."
  remarks: "When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, &quot;{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text&quot; where &quot;{&quot; and &quot;}&quot; are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.      4.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;Range adjustments by Move & ExpandToEnclosingUnit&quot;)   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.       ![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png &quot;Text ranges spanned by embedded objects.&quot;)   Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text.       Move defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>       The text is not altered in any way, the text range just spans a different part of the text."
  syntax:
    content: public int Move (System.Windows.Automation.Text.TextUnit unit, int count);
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "The text unit boundary."
    - id: count
      type: System.Int32
      description: "The number of text units to move.       A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect."
    return:
      type: System.Int32
      description: "The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*> endpoints."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Move*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Moves one endpoint of a text range to the specified endpoint of a second text range."
  remarks: "If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>)."
  syntax:
    content: public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "The endpoint to move."
    - id: targetRange
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "Another range from the same text provider."
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "An endpoint on the other range."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  id: MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Moves one endpoint of the text range the specified number of text units within the document range."
  remarks: "When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.      1.  The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, &quot;{The U}RL [http://www.microsoft.com](http://www.microsoft.com) is embedded in text&quot; where &quot;{&quot; and &quot;}&quot; are the text range endpoints.      2.  The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.      3.  The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint by one requested `unit` boundary.       ![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;Range adjustments by Move & ExpandToEnclosingUnit&quot;)   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       MoveEndpointByUnit defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.       The order, from smallest unit to largest, is listed below.      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>"
  syntax:
    content: public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "The endpoint to move."
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "The textual unit for moving."
    - id: count
      type: System.Int32
      description: "The number of units to move. A positive value moves the endpoint forward. A negative value moves backward. A value of 0 has no effect."
    return:
      type: System.Int32
      description: "The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  id: RemoveFromSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: RemoveFromSelection()
  nameWithType: ITextRangeProvider.RemoveFromSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Removes a highlighted section of text, corresponding to the caller&quot;s <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> and <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections."
  remarks: "The text insertion point will move to the area of the removed highlight.       Providing a degenerate text range will move the insertion point."
  syntax:
    content: public void RemoveFromSelection ();
    parameters: []
  overload: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "If text provider does not support multiple, disjoint selections (for example, <xref:System.Windows.Automation.TextPattern.SupportedTextSelection*> must have a value of <xref uid=&quot;langword_csharp_Multiple&quot; name=&quot;Multiple&quot; href=&quot;&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Causes the text control to scroll vertically until the text range is visible in the viewport."
  remarks: "ScrollIntoView respects both hidden and visible text.       If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport."
  syntax:
    content: public void ScrollIntoView (bool alignToTop);
    parameters:
    - id: alignToTop
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the text control should be scrolled so the text range is flush with the top of the viewport; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it should be flush with the bottom of the viewport."
  overload: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select
  id: Select
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Select()
  nameWithType: ITextRangeProvider.Select()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Highlights text in the text control corresponding to the text range <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> and <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref> endpoints."
  remarks: "If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> endpoint of the text range."
  syntax:
    content: public void Select ();
    parameters: []
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Occurs when text selection is not supported by the text control."
  platform:
  - net462
references:
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: AddToSelection()
  nameWithType: ITextRangeProvider.AddToSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Clone()
  nameWithType: ITextRangeProvider.Clone()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()
- uid: System.Windows.Automation.Provider.ITextRangeProvider
  parent: System.Windows.Automation.Provider
  isExternal: false
  name: ITextRangeProvider
  nameWithType: ITextRangeProvider
  fullName: System.Windows.Automation.Provider.ITextRangeProvider
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Compare(ITextRangeProvider)
  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextPatternRangeEndpoint
  nameWithType: TextPatternRangeEndpoint
  fullName: System.Windows.Automation.Text.TextPatternRangeEndpoint
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
- uid: System.Windows.Automation.Text.TextUnit
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextUnit
  nameWithType: TextUnit
  fullName: System.Windows.Automation.Text.TextUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindAttribute(Int32,Object,Boolean)
  nameWithType: ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindText(String,Boolean,Boolean)
  nameWithType: ITextRangeProvider.FindText(String,Boolean,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(String,Boolean,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetAttributeValue(Int32)
  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetBoundingRectangles()
  nameWithType: ITextRangeProvider.GetBoundingRectangles()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()
- uid: System.Double[]
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double[]
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetChildren()
  nameWithType: ITextRangeProvider.GetChildren()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()
- uid: System.Windows.Automation.Provider.IRawElementProviderSimple[]
  parent: System.Windows.Automation.Provider
  isExternal: false
  name: IRawElementProviderSimple
  nameWithType: IRawElementProviderSimple
  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple[]
  spec.csharp:
  - uid: System.Windows.Automation.Provider.IRawElementProviderSimple
    name: IRawElementProviderSimple
    nameWithType: IRawElementProviderSimple
    fullName: IRawElementProviderSimple[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetEnclosingElement()
  nameWithType: ITextRangeProvider.GetEnclosingElement()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()
- uid: System.Windows.Automation.Provider.IRawElementProviderSimple
  parent: System.Windows.Automation.Provider
  isExternal: false
  name: IRawElementProviderSimple
  nameWithType: IRawElementProviderSimple
  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetText(Int32)
  nameWithType: ITextRangeProvider.GetText(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Move(TextUnit,Int32)
  nameWithType: ITextRangeProvider.Move(TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit,Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: RemoveFromSelection()
  nameWithType: ITextRangeProvider.RemoveFromSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(Boolean)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Select()
  nameWithType: ITextRangeProvider.Select()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: AddToSelection
  nameWithType: ITextRangeProvider.AddToSelection
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Clone
  nameWithType: ITextRangeProvider.Clone
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Compare
  nameWithType: ITextRangeProvider.Compare
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: CompareEndpoints
  nameWithType: ITextRangeProvider.CompareEndpoints
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ExpandToEnclosingUnit
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindAttribute
  nameWithType: ITextRangeProvider.FindAttribute
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindText
  nameWithType: ITextRangeProvider.FindText
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetAttributeValue
  nameWithType: ITextRangeProvider.GetAttributeValue
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetBoundingRectangles
  nameWithType: ITextRangeProvider.GetBoundingRectangles
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetChildren
  nameWithType: ITextRangeProvider.GetChildren
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetEnclosingElement
  nameWithType: ITextRangeProvider.GetEnclosingElement
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetText
  nameWithType: ITextRangeProvider.GetText
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Move
  nameWithType: ITextRangeProvider.Move
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByRange
  nameWithType: ITextRangeProvider.MoveEndpointByRange
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByUnit
  nameWithType: ITextRangeProvider.MoveEndpointByUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: RemoveFromSelection
  nameWithType: ITextRangeProvider.RemoveFromSelection
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ScrollIntoView
  nameWithType: ITextRangeProvider.ScrollIntoView
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Select
  nameWithType: ITextRangeProvider.Select
