### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.WSDualHttpBinding
  id: WSDualHttpBinding
  children:
  - System.ServiceModel.WSDualHttpBinding.#ctor
  - System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  - System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  - System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  - System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  - System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  - System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  - System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  - System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  - System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  - System.ServiceModel.WSDualHttpBinding.MessageEncoding
  - System.ServiceModel.WSDualHttpBinding.ProxyAddress
  - System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  - System.ServiceModel.WSDualHttpBinding.ReliableSession
  - System.ServiceModel.WSDualHttpBinding.Scheme
  - System.ServiceModel.WSDualHttpBinding.Security
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  - System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  - System.ServiceModel.WSDualHttpBinding.TextEncoding
  - System.ServiceModel.WSDualHttpBinding.TransactionFlow
  - System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  langs:
  - csharp
  name: WSDualHttpBinding
  nameWithType: WSDualHttpBinding
  fullName: System.ServiceModel.WSDualHttpBinding
  type: Class
  summary: "Um segura e interoperável enlace que foi concebido para utilização com contratos de serviço duplex, que permite que os serviços e os clientes para enviar e receber mensagens."
  remarks: "O WSDualHttpBinding fornece o mesmo suporte de protocolos de serviço Web, como o <xref:System.ServiceModel.WSHttpBinding>, mas para utilização com contratos duplex.</xref:System.ServiceModel.WSHttpBinding> WSDualHttpBinding só suporta a segurança SOAP e necessita de mensagens fiáveis. Este enlace requer que o cliente tem um URI público que fornece um ponto final da chamada de retorno para o serviço. Isto é fornecido pela <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A>.</xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> Um enlace duplo expõe o endereço IP do cliente para o serviço. O cliente deve utilizar a segurança para se certificar de que é apenas ligado aos serviços, as confianças de entidades.       Por predefinição, o WSDualHttpBinding gera a pilha de elemento de enlace seguintes:- <xref:System.ServiceModel.Channels.TransactionFlowBindingElement>- <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>- <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>- <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement>- <xref:System.ServiceModel.Channels.OneWayBindingElement>- <xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement>- <xref:System.ServiceModel.Channels.HttpTransportBindingElement></xref:System.ServiceModel.Channels.HttpTransportBindingElement> </xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement> </xref:System.ServiceModel.Channels.OneWayBindingElement> </xref:System.ServiceModel.Channels.CompositeDuplexBindingElement> </xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> </xref:System.ServiceModel.Channels.ReliableSessionBindingElement> </xref:System.ServiceModel.Channels.TransactionFlowBindingElement>"
  example:
  - "The following example shows how to specify the `wsDualHttpBinding` binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#134](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#134)]"
  syntax:
    content: 'public class WSDualHttpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences'
  inheritance:
  - System.ServiceModel.Channels.Binding
  implements:
  - System.ServiceModel.Channels.IBindingRuntimePreferences
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor
  id: '#ctor'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding()
  nameWithType: WSDualHttpBinding.WSDualHttpBinding()
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following example shows how to use the default constructor for wsDualHttpBinding.  \n  \n [!code-cs[S_dualhttp#1](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#1)]\n [!code-vb[S_dualhttp#1](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#1)]"
  syntax:
    content: public WSDualHttpBinding ();
    parameters: []
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  id: '#ctor(System.ServiceModel.WSDualHttpSecurityMode)'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding(WSDualHttpSecurityMode)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref> classe com um tipo de segurança utilizado pelo enlace especificado."
  remarks: "Mensagens fiáveis necessita de <xref:System.ServiceModel.WSDualHttpBinding>pelo que não existe nenhum construtor que fornece um comutador para ativá-la fora que estejam no <xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29>construtor para <xref:System.ServiceModel.WSHttpBinding>.</xref:System.ServiceModel.WSHttpBinding> </xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29> </xref:System.ServiceModel.WSDualHttpBinding>"
  example:
  - "The following example shows how to use the `wsDualHttpBinding` constructor with a security mode.  \n  \n [!code-cs[S_dualhttp#3](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#3)]\n [!code-vb[S_dualhttp#3](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#3)]"
  syntax:
    content: public WSDualHttpBinding (System.ServiceModel.WSDualHttpSecurityMode securityMode);
    parameters:
    - id: securityMode
      type: System.ServiceModel.WSDualHttpSecurityMode
      description: "O valor de <xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref> que especifica o tipo de segurança que é utilizado com a mensagem SOAP e para o cliente."
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding(String)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(String)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(String)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref> classe com um enlace especificado pelo respetivo nome de configuração."
  syntax:
    content: public WSDualHttpBinding (string configName);
    parameters:
    - id: configName
      type: System.String
      description: "O nome de configuração de enlace para o <xref href=&quot;System.ServiceModel.Configuration.WSHttpBindingElement&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "O elemento de enlace com o nome <code> configurationName </code> não foi encontrado."
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  id: BypassProxyOnLocal
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
  fullName: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um valor que indica se pretende ignorar o servidor proxy para endereços locais."
  remarks: "Um recurso de Internet é local, se tiver um endereço local. Um endereço local é aquele que está no mesmo computador, local LAN ou da intranet e for identificado, sintaticamente, por falta de um ponto (.), como os URIs &quot;http://webserver/&quot; e &quot;http://localhost/&quot;.       Definir o BypassProxyOnLocal propriedade determina se os pontos finais configurados com o <xref:System.ServiceModel.WSDualHttpBinding>utilizar o servidor proxy quando acedem a recursos locais.</xref:System.ServiceModel.WSDualHttpBinding>       Se for BypassProxyOnLocal `true`, pedidos de recursos locais de Internet não utilizam o servidor proxy. Utilize o nome de anfitrião (vez `localhost`) se pretende que os clientes passar por um proxy quando se fala para serviços no mesmo computador quando esta propriedade está definida como `true`.       Quando é BypassProxyOnLocal `false`, todos os pedidos de Internet são efetuados através do servidor proxy."
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The following example sets this property to indicate that the proxy should be bypassed for local resources.  \n  \n [!code-cs[S_dualhttp#6](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#6)]\n [!code-vb[S_dualhttp#6](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#6)]  \n  \n The value of this property can also be set in the configuration file.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool BypassProxyOnLocal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para ignorar o servidor proxy para endereços locais; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  id: ClientBaseAddress
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define o endereço base do cliente."
  remarks: "Este URI público para o cliente fornece o ponto final de chamada de retorno necessário para o serviço de contactar o cliente quando o contrato é duplex."
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#8](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#8)]\n [!code-vb[S_dualhttp#8](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#8)]"
  syntax:
    content: public Uri ClientBaseAddress { get; set; }
    return:
      type: System.Uri
      description: "O <xref:System.Uri>que é o endereço base do cliente.</xref:System.Uri> O valor predefinido é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  id: CreateBindingElements
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: CreateBindingElements()
  nameWithType: WSDualHttpBinding.CreateBindingElements()
  fullName: System.ServiceModel.WSDualHttpBinding.CreateBindingElements()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Devolve uma coleção ordenada de enlace elementos contidos no enlace atual."
  remarks: ''
  example:
  - "The following example shows how to get an ordered collection of binding elements contained in the current binding.  \n  \n [!code-cs[S_dualhttp#20](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#20)]\n [!code-vb[S_dualhttp#20](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#20)]"
  syntax:
    content: public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.BindingElementCollection
      description: "A <xref:System.ServiceModel.Channels.BindingElementCollection>que inclua um <xref href=&quot;System.ServiceModel.Channels.TransactionFlowBindingElement&quot;> </xref> e, porque uma sessão fiável não é necessária para o <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref>, um <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref>.</xref:System.ServiceModel.Channels.BindingElementCollection>"
  overload: System.ServiceModel.WSDualHttpBinding.CreateBindingElements*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  id: EnvelopeVersion
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
  fullName: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém a versão de SOAP que é utilizado para mensagens que são processadas por este enlace."
  remarks: ''
  example:
  - "The following example shows how to get the version of SOAP that is used for messages that are processed by this binding.  \n  \n [!code-cs[S_dualhttp#21](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#21)]\n [!code-vb[S_dualhttp#21](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#21)]"
  syntax:
    content: public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }
    return:
      type: System.ServiceModel.EnvelopeVersion
      description: "O valor da <xref:System.ServiceModel.EnvelopeVersion>que é utilizado com este enlace.</xref:System.ServiceModel.EnvelopeVersion> O valor tem de ser sempre SOAP 1.2."
  overload: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  id: HostNameComparisonMode
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
  fullName: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um valor que indica se o nome do anfitrião é utilizado para alcançar o serviço aquando da correspondência de URI."
  remarks: ''
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#9](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#9)]\n [!code-vb[S_dualhttp#9](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#9)]"
  syntax:
    content: public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }
    return:
      type: System.ServiceModel.HostNameComparisonMode
      description: "O <xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode*>valor que indica se o nome do anfitrião é utilizado para alcançar o serviço aquando da correspondência no URI.</xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode*> O valor predefinido é <xref href=&quot;System.ServiceModel.HostNameComparisonMode&quot;> </xref>, que ignora o nome de anfitrião a correspondência."
  overload: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  id: MaxBufferPoolSize
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define a quantidade máxima de memória, em bytes, o que podem ser alocados para o Gestor de memórias intermédias de mensagem que receber mensagens com os pontos finais configurados com este enlace."
  remarks: "O <xref:System.ServiceModel.Channels.BufferManager>minimiza o custo de utilização de memórias intermédias com um conjunto de memória intermédia.</xref:System.ServiceModel.Channels.BufferManager> Memórias intermédias são necessárias para processar mensagens pelo serviço quando entram fora do canal. Se não existir memória suficiente no agrupamento de memória intermédia para processar a carga de mensagem, o <xref:System.ServiceModel.Channels.BufferManager>tem de alocar memória adicional da pilha CLR, o que aumenta a sobrecarga de recolha de lixo.</xref:System.ServiceModel.Channels.BufferManager> Um vasto conjunto de pilha de libertação da memória CLR é uma indicação de que o tamanho do conjunto de memória intermédia é demasiado pequeno e de que o desempenho pode ser melhorado com uma alocação de maior aumentar o limite de MaxBufferPoolSize.       As limitações de tamanho de memória intermédia definido aqui são para otimizar o desempenho das trocas de mensagens. Se uma mensagem excede o valor máximo definido para a memória intermédia, não é removido. Em vez disso, é pedida ao mais memória a pilha CLR e isto implica a recolha de lixo mais sobrecarga a utilização de memórias intermédias."
  example:
  - "The following example shows how to set the `MaxBufferPoolSize`.  \n  \n [!code-cs[S_dualhttp#10](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#10)]\n [!code-vb[S_dualhttp#10](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#10)]"
  syntax:
    content: public long MaxBufferPoolSize { get; set; }
    return:
      type: System.Int64
      description: "O tamanho máximo, em bytes, para o conjunto de memórias intermédias utilizado por um ponto final configurado com este enlace. O valor predefinido é 524288 bytes."
  overload: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  id: MaxReceivedMessageSize
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define o tamanho máximo, em bytes, para uma mensagem que pode ser recebido num canal configurado com este enlace."
  remarks: "O tamanho das mensagens que pode ser recebido em risco pelos serviços utilizando a <xref:System.ServiceModel.WSDualHttpBinding>tem um vínculo pela quantidade de memória alocada para cada mensagem.</xref:System.ServiceModel.WSDualHttpBinding> Este limite no tamanho da mensagem destina-se para limitar a exposição a ataques de estilo de linha.       Tenha em atenção que as definições para <xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A>e <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A>local definições comportamental.</xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A> </xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A> Isto significa que não são transmitidas para outros pontos finais nos metadados. Se a gerar um proxy para um serviço com um tamanho da mensagem máximo de 2GB de metadados, o proxy ainda tem um valor predefinido de 64K. Esta opção deixa o controlo dos limites adequados para a mensagem e o tamanho de memória intermédia de mensagens no âmbito dos administradores locais."
  example:
  - "The following example shows how to get the MaxReceivedMessageSize property.  \n  \n [!code-cs[S_dualhttp#22](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#22)]\n [!code-vb[S_dualhttp#22](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#22)]"
  syntax:
    content: public long MaxReceivedMessageSize { get; set; }
    return:
      type: System.Int64
      description: "O tamanho máximo, em bytes, para uma mensagem que é processada pelo enlace. O valor predefinido é 65,536 bytes."
  overload: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor é menor do que zero."
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  id: MessageEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define se MTOM ou texto/XML é utilizado para codificar mensagens SOAP."
  remarks: ''
  example:
  - "The following example shows how to set the `WSMessageEncoding` property to MTOM.  \n  \n [!code-cs[S_dualhttp#11](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#11)]\n [!code-vb[S_dualhttp#11](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#11)]"
  syntax:
    content: public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }
    return:
      type: System.ServiceModel.WSMessageEncoding
      description: "O valor de <xref href=&quot;System.ServiceModel.WSMessageEncoding&quot;> </xref> que indica que MTOM ou texto/XML é utilizado para codificar mensagens SOAP. O valor predefinido é <xref href=&quot;System.ServiceModel.WSMessageEncoding&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.MessageEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  id: ProxyAddress
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define o endereço URI do HTTP proxy."
  remarks: "Se o <xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A>está definido como `true`, o valor da /proxyaddress é ignorado.</xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A>"
  example:
  - "The following example shows how to specify the address of the HTTP proxy.  \n  \n [!code-cs[S_dualhttp#12](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#12)]\n [!code-vb[S_dualhttp#12](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#12)]"
  syntax:
    content: public Uri ProxyAddress { get; set; }
    return:
      type: System.Uri
      description: "A <xref:System.Uri>que funciona como o endereço do HTTP proxy.</xref:System.Uri> O valor predefinido é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.ProxyAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  id: ReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
  fullName: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define as restrições sobre a complexidade das mensagens SOAP que podem ser processados por pontos finais configurados com este enlace."
  remarks: "As restrições de complexidade incluem itens, tais como uma profundidade de elemento máximo e um comprimento máximo para o conteúdo de cadeia dentro da mensagem. As restrições protegem contra uma classe de ataques denial of service (DOS) que tentam utilizar a complexidade de mensagem para significar recursos de processamento de ponto final."
  example:
  - "The following example shows how to get the `ReaderQuotas` property.  \n  \n [!code-cs[S_dualhttp#13](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#13)]\n [!code-vb[S_dualhttp#13](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#13)]"
  syntax:
    content: public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }
    return:
      type: System.Xml.XmlDictionaryReaderQuotas
      description: "O <xref:System.Xml.XmlDictionaryReaderQuotas>que especifica as restrições de complexidade.</xref:System.Xml.XmlDictionaryReaderQuotas>"
  overload: System.ServiceModel.WSDualHttpBinding.ReaderQuotas*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession
  id: ReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
  fullName: System.ServiceModel.WSDualHttpBinding.ReliableSession
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém um objeto que fornece acesso prático para as propriedades de um elemento de enlace da sessão fiável que estão disponíveis ao utilizar uma dos enlaces fornecidos pelo sistema."
  remarks: "A sessão fiável não é necessária para o serviço configurado com um <xref:System.ServiceModel.WSDualHttpBinding>.</xref:System.ServiceModel.WSDualHttpBinding>"
  example:
  - "The following example shows how to get the ReliableSession property.  \n  \n [!code-cs[S_dualhttp#14](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#14)]\n [!code-vb[S_dualhttp#14](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#14)]"
  syntax:
    content: public System.ServiceModel.ReliableSession ReliableSession { get; set; }
    return:
      type: System.ServiceModel.ReliableSession
      description: "O <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> que fornece acesso prático para as propriedades de um elemento de enlace da sessão fiável que estão disponíveis ao utilizar uma dos enlaces fornecidos pelo sistema."
  overload: System.ServiceModel.WSDualHttpBinding.ReliableSession*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.Scheme
  id: Scheme
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
  fullName: System.ServiceModel.WSDualHttpBinding.Scheme
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém o esquema de URI do transporte de canais e os serviços de escuta que estão configurados com este enlace."
  remarks: ''
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#15](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#15)]\n [!code-vb[S_dualhttp#15](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#15)]"
  syntax:
    content: public override string Scheme { get; }
    return:
      type: System.String
      description: 'O esquema de transporte: &quot;http&quot;.'
  overload: System.ServiceModel.WSDualHttpBinding.Scheme*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.Security
  id: Security
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: Security
  nameWithType: WSDualHttpBinding.Security
  fullName: System.ServiceModel.WSDualHttpBinding.Security
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém um objeto que especifica as definições de segurança utilizadas com este enlace."
  remarks: "Um enlace duplo expõe o endereço IP do cliente para o serviço. O cliente deve utilizar a segurança para se certificar de que é apenas ligado aos serviços, as confianças de entidades."
  example:
  - "The following example shows how to get the type of security of the binding.  \n  \n [!code-cs[S_dualhttp#16](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#16)]\n [!code-vb[S_dualhttp#16](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#16)]"
  syntax:
    content: public System.ServiceModel.WSDualHttpSecurity Security { get; set; }
    return:
      type: System.ServiceModel.WSDualHttpSecurity
      description: "O <xref href=&quot;System.ServiceModel.WSDualHttpSecurity&quot;> </xref> que especifica as definições de segurança utilizadas com o enlace. O valor predefinido de <xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref> é <xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.Security*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  id: ShouldSerializeReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeReaderQuotas()
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Devolve um valor que indica se o <xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>propriedade foi alterado de valor predefinido e devem ser serializada.</xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>"
  syntax:
    content: public bool ShouldSerializeReaderQuotas ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>valor da propriedade deve ser serializada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  id: ShouldSerializeReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeReliableSession()
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Devolve um valor que indica se o <xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>propriedade foi alterado de valor predefinido e devem ser serializada.</xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>"
  syntax:
    content: public bool ShouldSerializeReliableSession ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>valor da propriedade deve ser serializada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  id: ShouldSerializeSecurity
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeSecurity()
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Devolve um valor que indica se o <xref:System.ServiceModel.WSDualHttpBinding.Security*>propriedade foi alterado de valor predefinido e devem ser serializada.</xref:System.ServiceModel.WSDualHttpBinding.Security*>"
  syntax:
    content: public bool ShouldSerializeSecurity ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.ServiceModel.WSDualHttpBinding.Security*>valor da propriedade deve ser serializada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.Security*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  id: ShouldSerializeTextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeTextEncoding()
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Devolve um valor que indica se o <xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>propriedade foi alterado de valor predefinido e devem ser serializada.</xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>"
  syntax:
    content: public bool ShouldSerializeTextEncoding ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>valor da propriedade deve ser serializada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  id: System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  isEii: true
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  fullName: System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém um valor que indica se os pedidos recebidos são processados de forma síncrona ou assíncrona."
  remarks: "Este valor pode ser alterado utilizando um comportamento de modelo de serviço."
  example:
  - "The following examples show how to get the <xref:System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A> value.  \n  \n [!code-cs[S_dualhttp#23](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#23)]\n [!code-vb[S_dualhttp#23](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#23)]  \n  \n [!code-cs[S_dualhttp#24](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#24)]\n [!code-vb[S_dualhttp#24](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#24)]"
  syntax:
    content: bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os pedidos são processados de forma síncrona; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se processadas de forma assíncrona. O valor devolvido é sempre é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, para processar pedidos de forma assíncrona."
  overload: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding
  id: TextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.TextEncoding
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define a codificação de carateres que é utilizado para o texto da mensagem."
  remarks: ''
  example:
  - "The following example shows how to get the character encoding that is used for the message text.  \n  \n [!code-cs[S_dualhttp#17](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#17)]\n [!code-vb[S_dualhttp#17](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#17)]"
  syntax:
    content: public System.Text.Encoding TextEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "O <xref:System.Text.Encoding>que indica a codificação de carateres que é utilizado.</xref:System.Text.Encoding> A predefinição é <xref:System.Text.UTF8Encoding>.</xref:System.Text.UTF8Encoding>"
  overload: System.ServiceModel.WSDualHttpBinding.TextEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  id: TransactionFlow
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
  fullName: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um valor que indica se este enlace deve suportar o fluxo de transações de WS."
  remarks: "O valor predefinido Especifica que os clientes não fluxo de transações e serviços rejeitar mensagens com um cabeçalho de mensagem de transação em fluxo."
  example:
  - "The following example shows how to set the `TransactionFlow` property to support the flowing of transactions.  \n  \n [!code-cs[S_dualhttp#18](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#18)]\n [!code-vb[S_dualhttp#18](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#18)]"
  syntax:
    content: public bool TransactionFlow { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo de transações é suportada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.TransactionFlow*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  id: UseDefaultWebProxy
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
  fullName: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um valor que indica se deve ser utilizado o proxy HTTP automaticamente configurados do sistema, se disponível."
  remarks: ''
  example:
  - "The following example shows how to set the `UseDefaultWebProxy` property to use the auto-configured HTTP proxy of the system.  \n  \n [!code-cs[S_dualhttp#19](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#19)]\n [!code-vb[S_dualhttp#19](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#19)]"
  syntax:
    content: public bool UseDefaultWebProxy { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>se deve ser utilizado o proxy HTTP automaticamente configurados do sistema, se disponível. caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.Binding
  isExternal: false
  name: System.ServiceModel.Channels.Binding
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.WSDualHttpBinding.#ctor
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding()
  nameWithType: WSDualHttpBinding.WSDualHttpBinding()
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding()
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding(WSDualHttpSecurityMode)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
- uid: System.ServiceModel.WSDualHttpSecurityMode
  parent: System.ServiceModel
  isExternal: false
  name: WSDualHttpSecurityMode
  nameWithType: WSDualHttpSecurityMode
  fullName: System.ServiceModel.WSDualHttpSecurityMode
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding(String)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(String)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
  fullName: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: CreateBindingElements()
  nameWithType: WSDualHttpBinding.CreateBindingElements()
  fullName: System.ServiceModel.WSDualHttpBinding.CreateBindingElements()
- uid: System.ServiceModel.Channels.BindingElementCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingElementCollection
  nameWithType: BindingElementCollection
  fullName: System.ServiceModel.Channels.BindingElementCollection
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
  fullName: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
- uid: System.ServiceModel.EnvelopeVersion
  parent: System.ServiceModel
  isExternal: true
  name: EnvelopeVersion
  nameWithType: EnvelopeVersion
  fullName: System.ServiceModel.EnvelopeVersion
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
  fullName: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
- uid: System.ServiceModel.HostNameComparisonMode
  parent: System.ServiceModel
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: HostNameComparisonMode
  fullName: System.ServiceModel.HostNameComparisonMode
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.MessageEncoding
- uid: System.ServiceModel.WSMessageEncoding
  parent: System.ServiceModel
  isExternal: false
  name: WSMessageEncoding
  nameWithType: WSMessageEncoding
  fullName: System.ServiceModel.WSMessageEncoding
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ProxyAddress
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
  fullName: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
- uid: System.Xml.XmlDictionaryReaderQuotas
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryReaderQuotas
  nameWithType: XmlDictionaryReaderQuotas
  fullName: System.Xml.XmlDictionaryReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
  fullName: System.ServiceModel.WSDualHttpBinding.ReliableSession
- uid: System.ServiceModel.ReliableSession
  parent: System.ServiceModel
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.Scheme
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
  fullName: System.ServiceModel.WSDualHttpBinding.Scheme
- uid: System.ServiceModel.WSDualHttpBinding.Security
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Security
  nameWithType: WSDualHttpBinding.Security
  fullName: System.ServiceModel.WSDualHttpBinding.Security
- uid: System.ServiceModel.WSDualHttpSecurity
  parent: System.ServiceModel
  isExternal: false
  name: WSDualHttpSecurity
  nameWithType: WSDualHttpSecurity
  fullName: System.ServiceModel.WSDualHttpSecurity
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReaderQuotas()
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReliableSession()
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeSecurity()
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeTextEncoding()
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding()
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  fullName: System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.TextEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
  fullName: System.ServiceModel.WSDualHttpBinding.TransactionFlow
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
  fullName: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
- uid: System.ServiceModel.WSDualHttpBinding.#ctor*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding
  nameWithType: WSDualHttpBinding.WSDualHttpBinding
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: CreateBindingElements
  nameWithType: WSDualHttpBinding.CreateBindingElements
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.Scheme*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
- uid: System.ServiceModel.WSDualHttpBinding.Security*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Security
  nameWithType: WSDualHttpBinding.Security
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReaderQuotas
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReliableSession
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeSecurity
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeTextEncoding
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
