### YamlMime:ManagedReference
items:
- uid: System.Web.ClientServices.Providers.ClientRoleProvider
  id: ClientRoleProvider
  children:
  - System.Web.ClientServices.Providers.ClientRoleProvider.#ctor
  - System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles(System.String[],System.String[])
  - System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName
  - System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole(System.String)
  - System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole(System.String,System.Boolean)
  - System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole(System.String,System.String)
  - System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles
  - System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser(System.String)
  - System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole(System.String)
  - System.Web.ClientServices.Providers.ClientRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole(System.String,System.String)
  - System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache
  - System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists(System.String)
  - System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri
  langs:
  - csharp
  name: ClientRoleProvider
  nameWithType: ClientRoleProvider
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider
  type: Class
  summary: "Gets role information for Windows-based applications from an [!INCLUDE[ajax_current_short](~/add/includes/ajax-current-short-md.md)] roles service."
  remarks: "You can use client application services to retrieve role information from an existing roles service by configuring your application to use the ClientRoleProvider class. After configuration, you can determine whether an authenticated user is in a particular role by calling the <xref:System.Security.Principal.IPrincipal.IsInRole%2A> method of the <xref:System.Security.Principal.IPrincipal> returned by the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property. For applications configured to use client application services, this property returns a <xref:System.Web.ClientServices.ClientRolePrincipal>. Because this class implements the <xref:System.Security.Principal.IPrincipal> interface, you do not need to reference it explicitly. The <xref:System.Web.ClientServices.ClientRolePrincipal.IsInRole%2A?displayProperty=fullName> method internally calls the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole%2A?displayProperty=fullName> method.       The ClientRoleProvider class is a read-only role membership provider that retrieves role information for authenticated users from the roles service indicated by the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri%2A> property. The value of the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri%2A> property is typically retrieved from the application configuration file along with other configuration values. For more information, see [How to: Configure Client Application Services](~/add/includes/ajax-current-ext-md.md).       You can retrieve the current ClientRoleProvider instance through the `static` <xref:System.Web.Security.Roles.Provider%2A?displayProperty=fullName> property.       The ClientRoleProvider class supports only the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A> and <xref:System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole%2A> methods of the <xref:System.Web.Security.RoleProvider> abstract class. When you call one of these methods for a particular user, the service provider first checks the local data cache for role information. If the cache does not contain any role information or the cache has expired, the service provider retrieves the role information from the roles service and adds it to the cache.       You can specify the time-out period for the roles cache when you configure client application services. To force the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A> method to retrieve role data from the service instead of the local cache, call the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache%2A> method first.       You cannot use the ClientRoleProvider class to create or delete roles, or to modify the role membership of users. To create or modify role information, you must change the configuration of the role service on the server."
  example:
  - "The following example code demonstrates how to use this property to programmatically set the roles service location.  \n  \n [!code-vb[ClientApplicationServices#302](~/add/codesnippet/visualbasic/ClientAppServicesDemo/Class1.vb#302)]\n [!code-cs[ClientApplicationServices#302](~/add/codesnippet/csharp/ClientAppServicesDemo/Class1.cs#302)]"
  syntax:
    content: 'public class ClientRoleProvider : System.Web.Security.RoleProvider'
  inheritance:
  - System.Web.Security.RoleProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.#ctor
  id: '#ctor'
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: ClientRoleProvider()
  nameWithType: ClientRoleProvider.ClientRoleProvider()
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ClientRoleProvider()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.ClientServices.Providers.ClientRoleProvider&quot;></xref> class."
  syntax:
    content: public ClientRoleProvider ();
    parameters: []
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: ClientRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Not used."
    - id: roleNames
      type: System.String[]
      description: "Not used."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName
  id: ApplicationName
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: ClientRoleProvider.ApplicationName
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This property is not used by this class."
  remarks: "Setting this property has no effect."
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "The name of the application for the provider."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: ClientRoleProvider.CreateRole(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Not used."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: ClientRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "Not used."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "Not used."
    return:
      type: System.Boolean
      description: "Not applicable. This method always throws an exception."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: ClientRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "Not used."
    - id: usernameToMatch
      type: System.String
      description: "Not used."
    return:
      type: System.String[]
      description: "Not applicable. This method always throws an exception."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles
  id: GetAllRoles
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: ClientRoleProvider.GetAllRoles()
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "Not applicable. This method always throws an exception."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: ClientRoleProvider.GetRolesForUser(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "Gets the names of the roles that the specified user belongs to."
  remarks: "The GetRolesForUser method retrieves role information for the current, authenticated user, which you must specify in the `username` parameter. You can get the user name through the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property as follows: `Thread.CurrentPrincipal.Identity.Name`.       The service provider caches role information about the local file system to avoid unnecessary service calls. For more information, see the <xref:System.Web.ClientServices.Providers.ClientRoleProvider> class overview."
  example:
  - "The following example code demonstrates how to use this method to determine whether the user login has expired before testing role membership. This code assumes that all valid users are associated with one or more roles. In this case, the GetRolesForUser method will not return any roles for a previously-authenticated user whose login has expired. If the user login has expired, this code displays the login dialog box. Otherwise, it calls the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole%2A> method to determine whether the user is in the \"manager\" role. The restricted code is in a `PerformManagerTask` method, which is not provided.  \n  \n [!code-vb[ClientApplicationServices#321](~/add/codesnippet/visualbasic/ClientAppServicesDemo/Class1.vb#321)]\n [!code-cs[ClientApplicationServices#321](~/add/codesnippet/csharp/ClientAppServicesDemo/Class1.cs#321)]"
  syntax:
    content: public override string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "The name of the user to retrieve roles for."
    return:
      type: System.String[]
      description: "The role names that <code>username</code> belongs to or an empty array if the user is not authenticated."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code> is <xref:System.String> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is not the user name of the current, authenticated user."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: ClientRoleProvider.GetUsersInRole(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Not used."
    return:
      type: System.String[]
      description: "Not applicable. This method always throws an exception."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: ClientRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "Initializes the provider."
  remarks: "The [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] extensibility model calls the Initialize method to initialize the <xref:System.Web.ClientServices.Providers.ClientRoleProvider> using information in your application configuration file. This method recognizes the following role service configuration attributes:      -   `name`      -   `description`      -   `cacheTimeout`      -   `connectionStringName`      -   `serviceUri`      -   `honorCookieExpiry`       For more information about these attributes, see [How to: Configure Client Application Services](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "The friendly name of the provider."
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "A collection of name/value pairs representing the provider-specific attributes specified in the configuration for this provider."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>config</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> is empty.       -or-       <code>config</code> contains an unrecognized value. For more information, see the Remarks section."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This <xref href=&quot;System.Web.ClientServices.Providers.ClientRoleProvider&quot;></xref> has already been initialized."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>config</code> contains a `cacheTimeout` value that is not in the correct format for conversion to an <xref:System.Int32> value."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>config</code> contains a `cacheTimeout` value that represents a number less than <xref:System.Int32.MinValue> or greater than <xref:System.Int32.MaxValue>."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: ClientRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "Gets a value indicating whether the specified user is in the specified role."
  remarks: "You can determine whether an authenticated user is in a particular role by calling the <xref:System.Security.Principal.IPrincipal.IsInRole%2A> method of the <xref:System.Security.Principal.IPrincipal> returned by the `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> property. For applications configured to use client application services, this property returns a <xref:System.Web.ClientServices.ClientRolePrincipal>. Because this class implements the <xref:System.Security.Principal.IPrincipal> interface, you do not need to reference it explicitly. The <xref:System.Web.ClientServices.ClientRolePrincipal.IsInRole%2A?displayProperty=fullName> method internally calls the IsUserInRole method. The IsUserInRole method uses the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A> method to determine whether the user indicated by `username` is in the role indicated by `roleName`.       The service provider caches role information about the local file system to avoid unnecessary service calls. For more information, see the <xref:System.Web.ClientServices.Providers.ClientRoleProvider> class overview."
  example:
  - "The following example code demonstrates how to access this method directly to determine whether the user is in a particular role. This code first tests whether the user login has expired. An explicit <xref:System.Web.ClientServices.Providers.ClientRoleProvider> reference is required to call the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A> method, so the same reference is used to call the IsUserInRole method. If the user is in the \"manager\" role, this code calls a `PerformManagerTask` method, which is not provided.  \n  \n [!code-vb[ClientApplicationServices#321](~/add/codesnippet/visualbasic/ClientAppServicesDemo/Class1.vb#321)]\n [!code-cs[ClientApplicationServices#321](~/add/codesnippet/csharp/ClientAppServicesDemo/Class1.cs#321)]"
  syntax:
    content: public override bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "The name of the user."
    - id: roleName
      type: System.String
      description: "The name of the role."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified user is in the specified role; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the specified user is not authenticated or is not in the specified role."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code> is <xref:System.String> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is not the user name of the current, authenticated user."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The user is no longer authenticated.       -or-       The roles service is not available."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: ClientRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Not used."
    - id: roleNames
      type: System.String[]
      description: "Not used."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache
  id: ResetCache
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: ResetCache()
  nameWithType: ClientRoleProvider.ResetCache()
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "Clears the cached role information and resets the cache time-out period."
  remarks: "The ResetCache method removes all role information from the local cache and causes the cache to expire. After you call this method, your next call to the <xref:System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser%2A> or <xref:System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole%2A> method will retrieve role information from the configured role service instead of the local cache.       You can use this method to enable users to refresh the roles cache when their role has changed but the cache has not yet expired. For information about how to set the roles cache time-out interval, see [How to: Configure Client Application Services](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example code demonstrates how to use this method to reset the local roles cache.  \n  \n [!code-vb[ClientApplicationServices#314](~/add/codesnippet/visualbasic/ClientAppServicesDemo/Class1.vb#314)]\n [!code-cs[ClientApplicationServices#314](~/add/codesnippet/csharp/ClientAppServicesDemo/Class1.cs#314)]"
  syntax:
    content: public void ResetCache ();
    parameters: []
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: ClientRoleProvider.RoleExists(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "This method is not used by this class."
  syntax:
    content: public override bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Not used."
    return:
      type: System.Boolean
      description: "Not applicable. This method always throws an exception."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Always thrown."
  platform:
  - net462
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri
  id: ServiceUri
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  langs:
  - csharp
  name: ServiceUri
  nameWithType: ClientRoleProvider.ServiceUri
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ClientServices.Providers
  summary: "Gets or sets the URI of the role service."
  remarks: "You can set the ServiceUri property in your application code, but you will typically set the value in your application configuration file. This enables you to change the service location without recompiling your code. For more information, see [How to: Configure Client Application Services](~/add/includes/ajax-current-ext-md.md).       When you set the service location programmatically, you must specify the complete service URI, which will always end with &quot;Role_JSON_AppService.axd&quot;."
  example:
  - "The following example code demonstrates how to use this property to programmatically set the roles service location.  \n  \n [!code-vb[ClientApplicationServices#302](~/add/codesnippet/visualbasic/ClientAppServicesDemo/Class1.vb#302)]\n [!code-cs[ClientApplicationServices#302](~/add/codesnippet/csharp/ClientAppServicesDemo/Class1.cs#302)]"
  syntax:
    content: public string ServiceUri { get; set; }
    return:
      type: System.String
      description: "The role service URI."
  overload: System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "When getting this property, no service URI was found in the application configuration file, and this property has not been previously set."
  platform:
  - net462
references:
- uid: System.Web.Security.RoleProvider
  isExternal: false
  name: System.Web.Security.RoleProvider
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.OverflowException
  isExternal: true
  name: System.OverflowException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.#ctor
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ClientRoleProvider()
  nameWithType: ClientRoleProvider.ClientRoleProvider()
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ClientRoleProvider()
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: ClientRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles(String[],String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: ClientRoleProvider.ApplicationName
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: CreateRole(String)
  nameWithType: ClientRoleProvider.CreateRole(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole(String)
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole(System.String,System.Boolean)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: ClientRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole(System.String,System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: ClientRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole(String,String)
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: GetAllRoles()
  nameWithType: ClientRoleProvider.GetAllRoles()
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles()
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: ClientRoleProvider.GetRolesForUser(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser(String)
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: ClientRoleProvider.GetUsersInRole(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole(String)
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: ClientRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole(System.String,System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: ClientRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole(String,String)
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: ClientRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ResetCache()
  nameWithType: ClientRoleProvider.ResetCache()
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache()
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists(System.String)
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: RoleExists(String)
  nameWithType: ClientRoleProvider.RoleExists(String)
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists(String)
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ServiceUri
  nameWithType: ClientRoleProvider.ServiceUri
  fullName: System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.#ctor*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ClientRoleProvider
  nameWithType: ClientRoleProvider.ClientRoleProvider
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.AddUsersToRoles*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: AddUsersToRoles
  nameWithType: ClientRoleProvider.AddUsersToRoles
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ApplicationName*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: ClientRoleProvider.ApplicationName
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.CreateRole*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: CreateRole
  nameWithType: ClientRoleProvider.CreateRole
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.DeleteRole*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: DeleteRole
  nameWithType: ClientRoleProvider.DeleteRole
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.FindUsersInRole*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: FindUsersInRole
  nameWithType: ClientRoleProvider.FindUsersInRole
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetAllRoles*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: GetAllRoles
  nameWithType: ClientRoleProvider.GetAllRoles
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetRolesForUser*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: GetRolesForUser
  nameWithType: ClientRoleProvider.GetRolesForUser
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.GetUsersInRole*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: GetUsersInRole
  nameWithType: ClientRoleProvider.GetUsersInRole
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.Initialize*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: Initialize
  nameWithType: ClientRoleProvider.Initialize
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.IsUserInRole*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: IsUserInRole
  nameWithType: ClientRoleProvider.IsUserInRole
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.RemoveUsersFromRoles*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: ClientRoleProvider.RemoveUsersFromRoles
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ResetCache*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ResetCache
  nameWithType: ClientRoleProvider.ResetCache
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.RoleExists*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: RoleExists
  nameWithType: ClientRoleProvider.RoleExists
- uid: System.Web.ClientServices.Providers.ClientRoleProvider.ServiceUri*
  parent: System.Web.ClientServices.Providers.ClientRoleProvider
  isExternal: false
  name: ServiceUri
  nameWithType: ClientRoleProvider.ServiceUri
