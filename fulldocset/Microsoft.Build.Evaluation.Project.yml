### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Evaluation.Project
  id: Project
  children:
  - Microsoft.Build.Evaluation.Project.#ctor
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  - Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  - Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  - Microsoft.Build.Evaluation.Project.Build
  - Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  - Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String)
  - Microsoft.Build.Evaluation.Project.Build(System.String[])
  - Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.ConditionedProperties
  - Microsoft.Build.Evaluation.Project.CreateProjectInstance
  - Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  - Microsoft.Build.Evaluation.Project.DirectoryPath
  - Microsoft.Build.Evaluation.Project.DisableMarkDirty
  - Microsoft.Build.Evaluation.Project.EvaluationCounter
  - Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  - Microsoft.Build.Evaluation.Project.FullPath
  - Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  - Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  - Microsoft.Build.Evaluation.Project.GetItems(System.String)
  - Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  - Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  - Microsoft.Build.Evaluation.Project.GetLogicalProject
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  - Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  - Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  - Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  - Microsoft.Build.Evaluation.Project.GlobalProperties
  - Microsoft.Build.Evaluation.Project.Imports
  - Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  - Microsoft.Build.Evaluation.Project.IsBuildEnabled
  - Microsoft.Build.Evaluation.Project.IsDirty
  - Microsoft.Build.Evaluation.Project.ItemDefinitions
  - Microsoft.Build.Evaluation.Project.Items
  - Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  - Microsoft.Build.Evaluation.Project.ItemTypes
  - Microsoft.Build.Evaluation.Project.MarkDirty
  - Microsoft.Build.Evaluation.Project.ProjectCollection
  - Microsoft.Build.Evaluation.Project.ProjectFileLocation
  - Microsoft.Build.Evaluation.Project.Properties
  - Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  - Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  - Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  - Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  - Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  - Microsoft.Build.Evaluation.Project.Save
  - Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  - Microsoft.Build.Evaluation.Project.Save(System.String)
  - Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  - Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  - Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  - Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.SkipEvaluation
  - Microsoft.Build.Evaluation.Project.SubToolsetVersion
  - Microsoft.Build.Evaluation.Project.Targets
  - Microsoft.Build.Evaluation.Project.ToolsVersion
  - Microsoft.Build.Evaluation.Project.Xml
  langs:
  - csharp
  name: Project
  nameWithType: Project
  fullName: Microsoft.Build.Evaluation.Project
  type: Class
  summary: "Represents a project with design time semantics. This class can load project files, edit items and properties and build projects."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} #GlobalProperties={data.globalProperties.Count} #Properties={data.Properties.Count} #ItemTypes={data.ItemTypes.Count} #ItemDefinitions={data.ItemDefinitions.Count} #Items={data.Items.Count} #Targets={data.Targets.Count}")]

      public class Project
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor
  id: '#ctor'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project()
  nameWithType: Project.Project()
  fullName: Microsoft.Build.Evaluation.Project.Project()
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs an empty project using the global project collection global properties and default tools version."
  remarks: "This project is added to the global project collection when it is given the full path to the source project file, typically by saving the project."
  syntax:
    content: public Project ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement)
  nameWithType: Project.Project(ProjectRootElement)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs an empty project and evaluates it using the given project root and the global project collection global properties and default tools version."
  remarks: "This project is added to the global project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "ProjectRootElement to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectCollection)
  nameWithType: Project.Project(ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs an empty project using the given project collection global properties and default tools version."
  remarks: "This project is added to the given project collection when it is given the full path to the source project file, typically by saving the project."
  syntax:
    content: public Project (Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection that the new project is added to."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String)
  nameWithType: Project.Project(String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it from the given source project file and with the global project collection global properties and default tools version."
  remarks: "The project is added to the global project collection.       Throws InvalidOperationException if there is already a project in the project collection that evaluates this source project file. May throw IO-related exceptions."
  syntax:
    content: public Project (string projectFile);
    parameters:
    - id: projectFile
      type: System.String
      description: "The source project file to be evaluated."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions:
  - type: Microsoft.Build.Exceptions.InvalidProjectFileException
    commentId: T:Microsoft.Build.Exceptions.InvalidProjectFileException
    description: "If the evaluation fails."
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  id: '#ctor(System.Xml.XmlReader)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader)
  nameWithType: Project.Project(XmlReader)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates the source code from the given XML reader. The source code is evaluated with the global project collection global properties and default tools version."
  remarks: "This project is added to the global project collection when it is given the full path to the source project file, typically by saving the project.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "Xml reader to read project source code from."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs an empty project and evaluates it using the given project root and with the given global properties and given tools version."
  remarks: "This project is added to the global project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "The project root to use for evaluation."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs an empty project, to be evaluated with the given project collection and with the given global properties and given tools version."
  remarks: "The project is added to the specified project collection when it is given the full path to the source project file, typically by saving the project."
  syntax:
    content: public Project (System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "The tools version used to evaluate the project. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the new project will be added to."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String)
  nameWithType: Project.Project(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it from the given source project file and with the given global properties and given tools version."
  remarks: "The project is added to the global project collection.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection. May throw IO-related exceptions."
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: projectFile
      type: System.String
      description: "The path to the source project file to be evaluated."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates the source code from the given XML reader. The source code is evaluated with the given global properties and given tools version."
  remarks: "This project is added to the global project collection when it is given the full path to the source project file, typically by saving the project.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "Xml reader to read project source code from."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it using the given project root and with the given global properties and given tools version."
  remarks: "This project is added to the given project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "The project root to use for evaluation."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it from the given source project file and with the given global properties and given tools version."
  remarks: "The project is added to the given project collection.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection. May throw IO-related exceptions."
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectFile
      type: System.String
      description: "The path to the source project file to be evaluated."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "The global properties. May be null."
    - id: toolsVersion
      type: System.String
      description: "The tools version. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates the source code from the given XML reader. The source code is evaluated with the given global properties and given tools version."
  remarks: "This project is added to the given project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "Xml reader to read project source code from."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it using the given project root and with the given global properties, given tools version, and given load settings."
  remarks: "This project is added to the given project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "The project root to use for evaluation."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "The load settings to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it from the given source project file and with the given global properties, given tools version, and given load settings."
  remarks: "The project is added to the given project collection.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection. May throw IO-related exceptions."
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: projectFile
      type: System.String
      description: "The path to the source project file to be evaluated."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "The tools version. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "The load settings to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates the source code from the given XML reader. The source code is evaluated with the given global properties and given tools version."
  remarks: "This project is added to the given project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "Xml reader from which to read project source code."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "The load settings to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it using the given project root and with the given global properties, tools and sub-toolset versions, project collection, and load settings."
  remarks: "This project is added to the given project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "The project root to use for evaluation."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
    - id: subToolsetVersion
      type: System.String
      description: "Sub toolset version to evaluate with. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "The load settings to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates it from the given source project file and with the given global properties, tools and sub-toolset versions, project collection, and load settings."
  remarks: "The project is added to the given project collection.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection. May throw IO-related exceptions."
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: projectFile
      type: System.String
      description: "The path to the source project file to be evaluated."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "The tools version. May be null."
    - id: subToolsetVersion
      type: System.String
      description: "The sub toolset version. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "The load settings to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Constructs a project and evaluates the source code from the given XML reader. The source code is evaluated with the given global properties, tools and sub-toolset versions, project collection, and load settings."
  remarks: "This project is added to the given project collection when either this project or the given project root is given the full path to the source project file.       Throws InvalidProjectFileException if the evaluation fails. Throws InvalidOperationException if there is already an equivalent project loaded in the project collection."
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "Xml reader to read project source code from."
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Global properties to evaluate with. May be null in which case the containing project collection&quot;s global properties will be used."
    - id: toolsVersion
      type: System.String
      description: "Tools version to evaluate with. May be null."
    - id: subToolsetVersion
      type: System.String
      description: "Sub Toolset version to evaluate with. May be null."
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "The project collection the project is added to. May not be null."
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "The load settings to use for evaluation."
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  id: AddItem(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItem(String,String)
  nameWithType: Project.AddItem(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Adds an item with no metadata to the project."
  remarks: "Any metadata can be added later. Does not modify the project source if a wildcard expression already includes the new item.       Evaluation takes place on a best-effort basis. Items that are defined in the project source following the new item may be used for evaluation. Only this item is evaluated. Other items that might depend on it are not affected."
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItem (string itemType, string unevaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "The item type of the added item."
    - id: unevaluatedInclude
      type: System.String
      description: "Include attribute of the item to be added."
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns the added item."
  overload: Microsoft.Build.Evaluation.Project.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Adds an item with the given metadata to the project."
  remarks: "The metadata may be null, which indicates no metadata.       Evaluation takes place on a best-effort basis. Items that are defined in the project source following the new item may be used for evaluation. Only this item is evaluated. Other items that might depend on it are not affected."
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItem (string itemType, string unevaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "The item type of the added item."
    - id: unevaluatedInclude
      type: System.String
      description: "Include attribute of the item to be added."
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "The metadata of the added item."
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns the added item."
  overload: Microsoft.Build.Evaluation.Project.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  id: AddItemFast(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItemFast(String,String)
  nameWithType: Project.AddItemFast(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Adds an item with no metadata to the project.  Makes no effort to see if an existing wildcard would already match the new item, unless it is the first item in an item group.  Makes no effort to locate the new item near similar items."
  remarks: "Appends the item to the first item group that does not have a condition and has either no children or whose first child is an item of the same type.       Evaluates on a best-effort basis: -expands with all items. Items that are defined in the XML below the new item may be used, even though in a real evaluation they would not be.       Only this item is evaluated. Other items that might depend on it are not affected.       This is a convenience that it is understood does not necessarily leave the project in a perfectly self consistent state until reevaluation."
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItemFast (string itemType, string unevaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "The item type to be added."
    - id: unevaluatedInclude
      type: System.String
      description: "The unevaluated Include attribute to be added to the item."
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns a list of the project items added."
  overload: Microsoft.Build.Evaluation.Project.AddItemFast*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Adds an item with metadata to the project. Metadata may be null, indicating no metadata. Makes no effort to see if an existing wildcard would already match the new item, unless it is the first item in an item group. Makes no effort to locate the new item near similar items."
  remarks: "Appends the item to the first item group that does not have a condition and has either no children or whose first child is an item of the same type.       Evaluates on a best-effort basis: -expands with all items. Items that are defined in the XML below the new item may be used, even though in a real evaluation they would not be.       Only this item is evaluated. Other items that might depend on it is not affected.       This is a convenience that it is understood does not necessarily leave the project in a perfectly self consistent state until reevaluation."
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItemFast (string itemType, string unevaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "The item type to be added."
    - id: unevaluatedInclude
      type: System.String
      description: "The unevaluated Include attribute to be added to the item."
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "The metadata to be added."
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns a list of the project items added."
  overload: Microsoft.Build.Evaluation.Project.AddItemFast*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  id: AllEvaluatedItemDefinitionMetadata
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets all item definition metadata encountered during evaluation."
  remarks: "Item metadata is read during the second evaluation pass. Unlike metadata returned by the ItemDefinitions property, this metadata is ordered, and includes any metadata subsequently overridden with the same name and item type."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectMetadata> AllEvaluatedItemDefinitionMetadata { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectMetadata}
      description: "Returns all item definition metadata encountered during evaluation. This does not include any elements whose conditions did not evaluate to true, nor any item definition metadata added since the last evaluation."
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  id: AllEvaluatedItems
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets an enumerator over all items encountered during evaluation. These are read during the third evaluation pass."
  remarks: "Unlike those items returned by the Items property, these are ordered with respect to all other items encountered during evaluation, not just ordered with respect to items of the same item type.       In some applications, this complete mutual ordering is significant, and such hosts can use this property.       The enumeration does not include any elements whose conditions did not evaluate to true, nor does it include any items added since the last evaluation."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> AllEvaluatedItems { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns an enumerator over all items encountered during evaluation. These are read during the third evaluation pass."
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  id: AllEvaluatedProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets all properties encountered during evaluation."
  remarks: "These properties are read during the first evaluation pass. Unlike properties returned by the Properties property, these are ordered, and includes any properties subsequently overridden with the same name."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty> AllEvaluatedProperties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
      description: "Returns all properties encountered during evaluation. This does not include any properties whose conditions did not evaluate to true, nor any properties added since the last evaluation."
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build
  id: Build
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build()
  nameWithType: Project.Build()
  fullName: Microsoft.Build.Evaluation.Project.Build()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, using the default targets."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build ();
    parameters: []
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  id: Build(Microsoft.Build.Framework.ILogger)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(ILogger)
  nameWithType: Project.Build(ILogger)
  fullName: Microsoft.Build.Evaluation.Project.Build(ILogger)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, using the default targets and the given logger."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (Microsoft.Build.Framework.ILogger logger);
    parameters:
    - id: logger
      type: Microsoft.Build.Framework.ILogger
      description: "The logger to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>)
  nameWithType: Project.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, using the default targets and the given loggers."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "An enumerator over all loggers to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String)
  id: Build(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String)
  nameWithType: Project.Build(String)
  fullName: Microsoft.Build.Evaluation.Project.Build(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, building the given target."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (string target);
    parameters:
    - id: target
      type: System.String
      description: "The target to be built."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[])
  id: Build(System.String[])
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[])
  nameWithType: Project.Build(String[])
  fullName: Microsoft.Build.Evaluation.Project.Build(String[])
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, building the given targets."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (string[] targets);
    parameters:
    - id: targets
      type: System.String[]
      description: "An array of targets to be built."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, using the default targets and the given loggers and remote loggers."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "The loggers to be used during the build."
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "The remote loggers to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, building the given target and using the given loggers."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: target
      type: System.String
      description: "The target to be built."
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "The loggers to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, building the given targets and using the given loggers."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "The targets to be built."
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "The loggers to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, building the given target and using the given loggers and remote loggers."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: target
      type: System.String
      description: "The target to be built."
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "The loggers to be used during the build."
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "The remote loggers to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Builds this project, building the given targets and using the given loggers and remote loggers."
  remarks: "To set or get virtual items for build purposes, clone a project instance explicitly and build that. This method does not modify the project object."
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "The targets to be built."
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "The loggers to be used during the build."
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "The remote loggers to be used during the build."
    return:
      type: System.Boolean
      description: "Returns true on success; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties
  id: ConditionedProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
  fullName: Microsoft.Build.Evaluation.Project.ConditionedProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a collection of possible property values for properties used to evaluate conditions found on properties, property groups, imports, and whens."
  remarks: 'For example, if the following conditions existed on properties in a project: Condition="''$(Configuration)&#124;$(Platform)'' == ''Debug&#124;x86''" Condition="''$(Configuration)'' == ''Release''" the table would be populated with { "Configuration", { "Debug", "Release" }} { "Platform", { "x86" }} This collection is used by Visual Studio to determine the configurations defined in the project'
  syntax:
    content: public System.Collections.Generic.IDictionary<string,System.Collections.Generic.List<string>> ConditionedProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
      description: "Returns a collection of possible property values for properties used to evaluate conditions found on properties, property groups, imports, and whens. The collection is in canonical form. The name of the entry is the name of the property to be evaluated, and the value is a list of possible property values."
  overload: Microsoft.Build.Evaluation.Project.ConditionedProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance
  id: CreateProjectInstance
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: CreateProjectInstance()
  nameWithType: Project.CreateProjectInstance()
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Creates a project instance based on this project, but completely disconnected from it."
  remarks: "Can be used to build independently. The original project is evaluated before creating the instance, if necessary, so that the original project is marked as unmodified."
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance ();
    parameters: []
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "Returns the project instance."
  overload: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  id: CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: CreateProjectInstance(ProjectInstanceSettings)
  nameWithType: Project.CreateProjectInstance(ProjectInstanceSettings)
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance(ProjectInstanceSettings)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Creates a project instance based on this project, but completely disconnected from it."
  remarks: "Can be used to build independently. The original project is evaluated before creating the instance, if necessary, so that the original project is marked as unmodified."
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance (Microsoft.Build.Execution.ProjectInstanceSettings settings);
    parameters:
    - id: settings
      type: Microsoft.Build.Execution.ProjectInstanceSettings
      description: "Determines whether created project instance is immutable and whether it contains a look up table to improve performance."
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "Returns the project instance."
  overload: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath
  id: DirectoryPath
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
  fullName: Microsoft.Build.Evaluation.Project.DirectoryPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the root directory for this project."
  syntax:
    content: public string DirectoryPath { get; }
    return:
      type: System.String
      description: "Returns the root directory for this project. The root directory is never null; in-memory projects use the current directory at the time of project load."
  overload: Microsoft.Build.Evaluation.Project.DirectoryPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  id: DisableMarkDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
  fullName: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets or sets a flag the determines whether <xref:Microsoft.Build.Evaluation.Project.MarkDirty*> is temporarily disabled. This allows, for example, a global property to be set without the project getting marked dirty for reevaluation as a consequence."
  syntax:
    content: public bool DisableMarkDirty { get; set; }
    return:
      type: System.Boolean
      description: "Returns a flag the determines whether <xref uid=&quot;langword_csharp_MarkDirty&quot; name=&quot;MarkDirty&quot; href=&quot;&quot;></xref> is temporarily disabled."
  overload: Microsoft.Build.Evaluation.Project.DisableMarkDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter
  id: EvaluationCounter
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
  fullName: Microsoft.Build.Evaluation.Project.EvaluationCounter
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a number that is incremented every time that project is re-evaluated."
  remarks: "This value should be compared with previous values to see if the project has been re-evaluated. It should not be used to determine how many times the project has been re-evaluated since it may be incremented by more than one for a given re-evaluation."
  syntax:
    content: public int EvaluationCounter { get; }
    return:
      type: System.Int32
      description: "Returns the incremented value."
  overload: Microsoft.Build.Evaluation.Project.EvaluationCounter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  id: ExpandString(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ExpandString(String)
  nameWithType: Project.ExpandString(String)
  fullName: Microsoft.Build.Evaluation.Project.ExpandString(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Evaluates the given string by expanding items and properties. The string is evaluated as if it were found at the very end of the project file."
  remarks: "This method can be used when best-effort evaluation is sufficient."
  syntax:
    content: public string ExpandString (string unexpandedValue);
    parameters:
    - id: unexpandedValue
      type: System.String
      description: "The string to be evaluated."
    return:
      type: System.String
      description: "Returns the evaluated string."
  overload: Microsoft.Build.Evaluation.Project.ExpandString*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.FullPath
  id: FullPath
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: FullPath
  nameWithType: Project.FullPath
  fullName: Microsoft.Build.Evaluation.Project.FullPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets or sets the full path to the project source file."
  remarks: "Setting this property on a project in a project collection renames the project."
  syntax:
    content: public string FullPath { get; set; }
    return:
      type: System.String
      description: "Returns the full path to the project source file. Returns an empty string if the project was not loaded from disk."
  overload: Microsoft.Build.Evaluation.Project.FullPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItem)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets evaluated, escaped value of the Include attribute of the provided items."
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Evaluation.ProjectItem item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "The item to be evaluated and escaped."
    return:
      type: System.String
      description: "Returns the evaluated, escaped value of the Include attribute of the provided items."
  overload: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the evaluated, escaped value of the Include attribute of the provided item definition."
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Evaluation.ProjectItemDefinition item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItemDefinition
      description: "The item definition to be evaluated and escaped."
    return:
      type: System.String
      description: "Returns the value of the Include attribute."
  overload: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItems(System.String)
  id: GetItems(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItems(String)
  nameWithType: Project.GetItems(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItems(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets all the items in the project of the given item type. If there are none, returns an empty list. Use AddItem or RemoveItem to modify items in this project."
  remarks: "Use AddItem or RemoveItem to modify items in this project."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItems (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "The item type to be retrieved."
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns all the items in the project of the given item type. Returns an empty list if there are no items with the given item name."
  overload: Microsoft.Build.Evaluation.Project.GetItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  id: GetItemsByEvaluatedInclude(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItemsByEvaluatedInclude(String)
  nameWithType: Project.GetItemsByEvaluatedInclude(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets all items that have the given evaluated Include attribute."
  remarks: "For example, this method might return all items that have the evaluated Include attribute &quot;component.cpp&quot;. Typically zero or one items are returned. However, there may be multiple items with the same path and different item types, or even with the same item types."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItemsByEvaluatedInclude (string evaluatedInclude);
    parameters:
    - id: evaluatedInclude
      type: System.String
      description: "The evaluated Include attribute."
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns all items that have the given evaluated Include attribute."
  overload: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  id: GetItemsIgnoringCondition(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItemsIgnoringCondition(String)
  nameWithType: Project.GetItemsIgnoringCondition(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: 'Gets all the items in the project of the given type, whether or not their Condition attribute evaluates to true. This is a read-only list: use AddItem or RemoveItem to modify items in this project.'
  remarks: "This is a read-only list. Use AddItem or RemoveItem to modify items in this project."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItemsIgnoringCondition (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "The item type to be retrieved."
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns all the items in the project of the given type, whether or not their Condition attribute evaluates to true."
  overload: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject
  id: GetLogicalProject
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetLogicalProject()
  nameWithType: Project.GetLogicalProject()
  fullName: Microsoft.Build.Evaluation.Project.GetLogicalProject()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets an enumerator over all the elements in the &quot;logical project&quot;. The logical project is defined as the unevaluated project obtained from the single MSBuild file that is the result of inlining the text of all imports of the original MSBuild project manifest file."
  remarks: "The logical project is defined as the unevaluated project obtained from the single MSBuild file that is the result of including inline the text of all imports of the original MSBuild project manifest file."
  syntax:
    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement> GetLogicalProject ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
      description: "Returns an enumerator over all the elements in the &quot;logical project&quot;."
  overload: Microsoft.Build.Evaluation.Project.GetLogicalProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectMetadata)
  nameWithType: Project.GetMetadataValueEscaped(ProjectMetadata)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectMetadata)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the escaped value of the provided metadatum."
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectMetadata metadatum);
    parameters:
    - id: metadatum
      type: Microsoft.Build.Evaluation.ProjectMetadata
      description: "The metadatum to be escaped."
    return:
      type: System.String
      description: "Gets the escaped value of the provided metadatum."
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItem,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItem,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItem,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the escaped value of the metadatum with the provided name on the provided item."
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectItem item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "The item whose metadata is to be escaped."
    - id: name
      type: System.String
      description: "The name of the metadata to be escaped."
    return:
      type: System.String
      description: "Gets the escaped value of the metadatum with the provided name on the provided item."
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItemDefinition,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the escaped value of the metadatum with the provided name on the provided item definition."
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectItemDefinition item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItemDefinition
      description: "The item definition whose metadata is to be escaped."
    - id: name
      type: System.String
      description: "The name of the metadata to be escaped."
    return:
      type: System.String
      description: "Returns the escaped value of the metadatum with the provided name on the provided item definition."
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetProperty(String)
  nameWithType: Project.GetProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.GetProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets any property in the project that has the specified name."
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectProperty GetProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the property to retrieve."
    return:
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "Returns any property in the project that has the specified name. Returns null if no property of that name exists."
  overload: Microsoft.Build.Evaluation.Project.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  id: GetPropertyValue(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetPropertyValue(String)
  nameWithType: Project.GetPropertyValue(String)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValue(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the value of the given property in this project."
  remarks: "A property with a value of empty string and no property at all are not distinguished between by this method. To determine if a property is set at all in the project, use GetProperty(name)."
  syntax:
    content: public string GetPropertyValue (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the property whose value is retrieved."
    return:
      type: System.String
      description: "Returns the value of the given property in this project. Return an empty string if no property of that name exists. Escape sequences are converted before returning the string."
  overload: Microsoft.Build.Evaluation.Project.GetPropertyValue*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  id: GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetPropertyValueEscaped(ProjectProperty)
  nameWithType: Project.GetPropertyValueEscaped(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(ProjectProperty)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Get the escaped value of the provided property."
  syntax:
    content: public static string GetPropertyValueEscaped (Microsoft.Build.Evaluation.ProjectProperty property);
    parameters:
    - id: property
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "The property to be escaped."
    return:
      type: System.String
      description: "Returns the escaped value of the provided property."
  overload: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties
  id: GlobalProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
  fullName: Microsoft.Build.Evaluation.Project.GlobalProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a dictionary of the global properties used for the evaluation of this project."
  remarks: "This is the publicly exposed getter, that translates into a read-only dead IDictionary\\<string, string>.  \n  \n In order to easily tell when we're dirtied, setting and removing global properties is done with <xref:Microsoft.Build.Evaluation.Project.SetGlobalProperty%2A> and <xref:Microsoft.Build.Evaluation.Project.RemoveGlobalProperty%2A>."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> GlobalProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Returns a dictionary of the global properties used for the evaluation of this project."
  overload: Microsoft.Build.Evaluation.Project.GlobalProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Imports
  id: Imports
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Imports
  nameWithType: Project.Imports
  fullName: Microsoft.Build.Evaluation.Project.Imports
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a list of all the files that contributed to the evaluation of this project."
  remarks: "The project root of this project is not included."
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport> Imports { get; }
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
      description: "Returns a list of all the files that contributed to the evaluation of this project.       The name of each item is the Import element that caused the file to be imported. The value of each item is the project root of the imported project. Import elements whose Condition attribute evaluated to false are not included."
  overload: Microsoft.Build.Evaluation.Project.Imports*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  id: ImportsIncludingDuplicates
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
  fullName: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a list of duplicate imports if an import was imported multiple times. However, only the first import was used in evaluation."
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport> ImportsIncludingDuplicates { get; }
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
      description: "Returns a list of duplicate imports."
  overload: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  id: IsBuildEnabled
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
  fullName: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets or sets a property that selects whether the targets and tasks of this project can be built."
  remarks: "Can be used for security purposes. By default, a new project has the same IsBuildEnabled setting as the parent project collection that contains it. When IsBuildEnabled is false, the Build method on this project fails."
  syntax:
    content: public bool IsBuildEnabled { get; set; }
    return:
      type: System.Boolean
      description: "Returns true if the targets and tasks of this project can be built; false otherwise."
  overload: Microsoft.Build.Evaluation.Project.IsBuildEnabled*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.IsDirty
  id: IsDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: IsDirty
  nameWithType: Project.IsDirty
  fullName: Microsoft.Build.Evaluation.Project.IsDirty
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a property that indicates whether this project has been modified so that it must be reevaluated."
  remarks: "A project is modified and must be reevaluated when the underlying project source code, including changes to imported files. A project is also modified must be reevaluated if the project tool set changes."
  syntax:
    content: public bool IsDirty { get; }
    return:
      type: System.Boolean
      description: "Returns a property that indicates whether this project has been modified so that it must be reevaluated."
  overload: Microsoft.Build.Evaluation.Project.IsDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions
  id: ItemDefinitions
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
  fullName: Microsoft.Build.Evaluation.Project.ItemDefinitions
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a dictionary of item definitions in this project, keyed by item type."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Evaluation.ProjectItemDefinition> ItemDefinitions { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItemDefinition}
      description: "Returns a dictionary of item definitions in this project, keyed by item type."
  overload: Microsoft.Build.Evaluation.Project.ItemDefinitions*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Items
  id: Items
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Items
  nameWithType: Project.Items
  fullName: Microsoft.Build.Evaluation.Project.Items
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets an enumerator over all items in this project, ordered within groups of item types."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> Items { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns an enumerator over all items in this project, ordered within groups of item types."
  overload: Microsoft.Build.Evaluation.Project.Items*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  id: ItemsIgnoringCondition
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
  fullName: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets an enumerator over all items in this project, ordered within groups of item types."
  remarks: "Can be used to display all items, even if they are not part of the build in the current configuration."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> ItemsIgnoringCondition { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "Returns an enumerator over all items in this project., ordered within groups of item types, including items whose conditions evaluate to false, or are contained within item groups whose condition evaluates to false."
  overload: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemTypes
  id: ItemTypes
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemTypes
  nameWithType: Project.ItemTypes
  fullName: Microsoft.Build.Evaluation.Project.ItemTypes
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets an enumerator over all item types in this project."
  syntax:
    content: public System.Collections.Generic.ICollection<string> ItemTypes { get; }
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "Returns an enumerator over all item types in this project. This is an ordered collection."
  overload: Microsoft.Build.Evaluation.Project.ItemTypes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.MarkDirty
  id: MarkDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: MarkDirty()
  nameWithType: Project.MarkDirty()
  fullName: Microsoft.Build.Evaluation.Project.MarkDirty()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Marks this project as modified."
  remarks: "It is seldom necessary to call this method explicitly, because all edits affecting a project automatically mark it as modified.       Sometimes, however, this method must be called. For example, a project may have an Import element whose condition depends on a file that exists on a disk. If that file does not exist at evaluation time, and it is created after evaluation, then the project must be explicitly marked as modified.       The <xref:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary%2A> method uses this property to determine if an evaluation is necessary."
  syntax:
    content: public void MarkDirty ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.MarkDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection
  id: ProjectCollection
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
  fullName: Microsoft.Build.Evaluation.Project.ProjectCollection
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the project collection which contains this project."
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectCollection ProjectCollection { get; }
    return:
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "Returns the project collection which contains this project, which is never null."
  overload: Microsoft.Build.Evaluation.Project.ProjectCollection*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  id: ProjectFileLocation
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
  fullName: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "The location of the originating file itself, not any specific content within it. If the file has not been given a name, this is an empty location. This is a legitimate case of having no location."
  syntax:
    content: public Microsoft.Build.Construction.ElementLocation ProjectFileLocation { get; }
    return:
      type: Microsoft.Build.Construction.ElementLocation
      description: "Returns the originating file location or an empty location."
  overload: Microsoft.Build.Evaluation.Project.ProjectFileLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Properties
  id: Properties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Properties
  nameWithType: Project.Properties
  fullName: Microsoft.Build.Evaluation.Project.Properties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets an enumerator over all properties in this project. This is an unordered collection."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty> Properties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
      description: "Returns an enumerator over all properties in this project. Since properties are evaluated as they appear, this is an unordered collection."
  overload: Microsoft.Build.Evaluation.Project.Properties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  id: ReevaluateIfNecessary
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ReevaluateIfNecessary()
  nameWithType: Project.ReevaluateIfNecessary()
  fullName: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Reevaluates the project to incorporate any changes."
  remarks: "The project is reevaluated only if it is marked as modified. Reevaluation incorporates all changes made to the project source code.       Throws InvalidProjectFileException if the evaluation fails."
  syntax:
    content: public void ReevaluateIfNecessary ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  id: RemoveGlobalProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveGlobalProperty(String)
  nameWithType: Project.RemoveGlobalProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Removes a global property and marks the project as modified."
  syntax:
    content: public bool RemoveGlobalProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the global property to be removed."
    return:
      type: System.Boolean
      description: "Returns true if the value of the global property was set."
  overload: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  id: RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveItem(ProjectItem)
  nameWithType: Project.RemoveItem(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItem(ProjectItem)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Removes an item from the project. The item to be removed must be present in the project, and must not originate from an imported file."
  remarks: "If the item group containing the item becomes empty, it is also removed.       If the item originates from a wildcard or semicolon-separated expression, the expression is first expanded into multiple items.       The project is updated, but no further evaluation occurs until reevaluation. For example, if an item of type &quot;i&quot; is removed, &quot;j&quot; which is evaluated from &quot;@(i)&quot; is not modified until reevaluation."
  syntax:
    content: public bool RemoveItem (Microsoft.Build.Evaluation.ProjectItem item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "The item to be removed."
    return:
      type: System.Boolean
      description: "Returns true if the item is present in this evaluated project; otherwise false. Normally this method returns true, since if the requested item is not present, the method throws an exception. If the item is present only in the ItemsIgnoringCondition collection, however, the method returns false."
  overload: Microsoft.Build.Evaluation.Project.RemoveItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  id: RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveItems(IEnumerable<ProjectItem>)
  nameWithType: Project.RemoveItems(IEnumerable<ProjectItem>)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItems(IEnumerable<ProjectItem>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Removes all the given items from the project, unless they originate from an imported project."
  remarks: "If an item originates from an imported project, it is simply skipped."
  syntax:
    content: public void RemoveItems (System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem}
      description: "The items to be removed."
  overload: Microsoft.Build.Evaluation.Project.RemoveItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  id: RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveProperty(ProjectProperty)
  nameWithType: Project.RemoveProperty(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Removes an property from the project. The property to be removed must be present in the project, and must not originate from an imported file."
  remarks: "If the property group containing the property becomes empty, it is also removed.       The project is updated, but no further evaluation occurs until reevaluation. For example, if &quot;p&quot; is removed, &quot;q&quot; which is evaluated from &quot;$(p)&quot; is not modified until reevaluation."
  syntax:
    content: public bool RemoveProperty (Microsoft.Build.Evaluation.ProjectProperty property);
    parameters:
    - id: property
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "The property to remove."
    return:
      type: System.Boolean
      description: "Returns true if the property is present in this evaluated project; otherwise false."
  overload: Microsoft.Build.Evaluation.Project.RemoveProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save
  id: Save
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save()
  nameWithType: Project.Save()
  fullName: Microsoft.Build.Evaluation.Project.Save()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Saves the project to the file system, if modified, using the default character encoding."
  syntax:
    content: public void Save ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: Project.Save(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.Save(TextWriter)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Saves the project to the provided text writer, whether or not the project has been modified. Uses the character encoding of the text writer and marks the project as unmodified."
  syntax:
    content: public void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The text writer to save the project to."
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.String)
  id: Save(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(String)
  nameWithType: Project.Save(String)
  fullName: Microsoft.Build.Evaluation.Project.Save(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Saves the project to the file system, if modified or if the path to the project source code changes, using the default character encoding."
  syntax:
    content: public void Save (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to the project source code."
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  id: Save(System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(Encoding)
  nameWithType: Project.Save(Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(Encoding)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Saves the project to the file system, if modified, using the given character encoding."
  syntax:
    content: public void Save (System.Text.Encoding encoding);
    parameters:
    - id: encoding
      type: System.Text.Encoding
      description: "The character encoding used to save the project."
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  id: Save(System.String,System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(String,Encoding)
  nameWithType: Project.Save(String,Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Saves the project to the file system, if modified or if the path to the project source code changes, using the given character encoding."
  syntax:
    content: public void Save (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "The path to the project source code."
    - id: encoding
      type: System.Text.Encoding
      description: "The character encoding used to save the project."
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  id: SaveLogicalProject(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SaveLogicalProject(TextWriter)
  nameWithType: Project.SaveLogicalProject(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.SaveLogicalProject(TextWriter)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Saves a &quot;logical&quot; or &quot;preprocessed&quot; project file, that includes all the imported files as if they formed a single file."
  syntax:
    content: public void SaveLogicalProject (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The writer that saves the project file."
  overload: Microsoft.Build.Evaluation.Project.SaveLogicalProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  id: SetGlobalProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SetGlobalProperty(String,String)
  nameWithType: Project.SetGlobalProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetGlobalProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Sets a global property after the project has been evaluated. If the value changes, the project is marked to require reevaluation."
  syntax:
    content: public bool SetGlobalProperty (string name, string escapedValue);
    parameters:
    - id: name
      type: System.String
      description: "The name of the global property to set."
    - id: escapedValue
      type: System.String
      description: "The new value of the global property."
    return:
      type: System.Boolean
      description: "Returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the value changes, otherwise returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.Build.Evaluation.Project.SetGlobalProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  id: SetProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SetProperty(String,String)
  nameWithType: Project.SetProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Sets or adds a property with the given name and value to the project. Overwrites the value of a property with the same name if it did not originate in an imported file."
  remarks: "If there is no property with the given name, updates the last existing property with the given name that has no condition on itself or its property group, unless it originated in an imported file.       Otherwise, adds a new property in the first property group without a condition, creating a property group if necessary after the last existing property group, else at the start of the project.       Evaluation takes place on a best-effort basis. Properties that are defined in the project source following the new property may be used for evaluation. Only this property is evaluated. Other properties that might depend on it are not affected."
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectProperty SetProperty (string name, string unevaluatedValue);
    parameters:
    - id: name
      type: System.String
      description: "The name of the property to set."
    - id: unevaluatedValue
      type: System.String
      description: "The new unevaluated value of the property."
    return:
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "Returns the property."
  overload: Microsoft.Build.Evaluation.Project.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation
  id: SkipEvaluation
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
  fullName: Microsoft.Build.Evaluation.Project.SkipEvaluation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets or sets a flag the determines whether ReevaluateIfNecessary is temporarily disabled. This is useful when the host expects to make a number of reads and writes to the project, and wants to temporarily sacrifice correctness for performance."
  syntax:
    content: public bool SkipEvaluation { get; set; }
    return:
      type: System.Boolean
      description: "Returns a flag the determines whether ReevaluateIfNecessary is temporarily disabled."
  overload: Microsoft.Build.Evaluation.Project.SkipEvaluation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  id: SubToolsetVersion
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
  fullName: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the value of the SubToolsetVersion attribute, if any. This value was combined with the value of the ToolsVersion attribute to determine the toolset properties for this project."
  syntax:
    content: public string SubToolsetVersion { get; }
    return:
      type: System.String
      description: "Returns the SubToolsetVersion attribute value. Returns an empty string if the attribute is not present."
  overload: Microsoft.Build.Evaluation.Project.SubToolsetVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Targets
  id: Targets
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Targets
  nameWithType: Project.Targets
  fullName: Microsoft.Build.Evaluation.Project.Targets
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets a dictionary of all targets in this project, keyed by target name."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.ProjectTargetInstance> Targets { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
      description: "Returns a dictionary of all targets in this project, keyed by target name. Overridden targets are not included in this collection. This dictionary is read-only."
  overload: Microsoft.Build.Evaluation.Project.Targets*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion
  id: ToolsVersion
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
  fullName: Microsoft.Build.Evaluation.Project.ToolsVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the tools version that this project was evaluated with, if any."
  remarks: "Set by the constructor. This is not necessarily the same as the tools version on the Project tag, if any; it may have been externally specified, for example with a /tv switch on the command line. The actual tools version on the Project tag can be obtained from <xref:Microsoft.Build.Evaluation.Project.Xml%2A>. The tools version cannot be changed once the project has been created."
  syntax:
    content: public string ToolsVersion { get; }
    return:
      type: System.String
      description: "Gets the tools version that this project was evaluated with, if any."
  overload: Microsoft.Build.Evaluation.Project.ToolsVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Xml
  id: Xml
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Xml
  nameWithType: Project.Xml
  fullName: Microsoft.Build.Evaluation.Project.Xml
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "Gets the root project associated with this project. Can never be null"
  remarks: "There is no way to set this property. If you have a new project root, evaluate it into a new project."
  syntax:
    content: public Microsoft.Build.Construction.ProjectRootElement Xml { get; }
    return:
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "Returns the root project associated with this project, which can never be null."
  overload: Microsoft.Build.Evaluation.Project.Xml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.Exceptions.InvalidProjectFileException
  parent: Microsoft.Build.Exceptions
  isExternal: false
  name: InvalidProjectFileException
  nameWithType: InvalidProjectFileException
  fullName: Microsoft.Build.Exceptions.InvalidProjectFileException
- uid: Microsoft.Build.Evaluation.Project.#ctor
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project()
  nameWithType: Project.Project()
  fullName: Microsoft.Build.Evaluation.Project.Project()
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement)
  nameWithType: Project.Project(ProjectRootElement)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement)
- uid: Microsoft.Build.Construction.ProjectRootElement
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ProjectRootElement
  nameWithType: ProjectRootElement
  fullName: Microsoft.Build.Construction.ProjectRootElement
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectCollection)
  nameWithType: Project.Project(ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectCollection)
- uid: Microsoft.Build.Evaluation.ProjectCollection
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectCollection
  nameWithType: ProjectCollection
  fullName: Microsoft.Build.Evaluation.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String)
  nameWithType: Project.Project(String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader)
  nameWithType: Project.Project(XmlReader)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String)
  nameWithType: Project.Project(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.ProjectLoadSettings
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectLoadSettings
  nameWithType: ProjectLoadSettings
  fullName: Microsoft.Build.Evaluation.ProjectLoadSettings
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem(String,String)
  nameWithType: Project.AddItem(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String)
- uid: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ProjectItem>
  nameWithType: IList<ProjectItem>
  fullName: System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,String>>
  nameWithType: IEnumerable<KeyValuePair<String,String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast(String,String)
  nameWithType: Project.AddItemFast(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String)
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectMetadata}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectMetadata>
  nameWithType: ICollection<ProjectMetadata>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectMetadata>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectMetadata>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectMetadata
    name: ProjectMetadata
    nameWithType: ProjectMetadata
    fullName: ProjectMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectItem>
  nameWithType: ICollection<ProjectItem>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectProperty>
  nameWithType: ICollection<ProjectProperty>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectProperty>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectProperty
    name: ProjectProperty
    nameWithType: ProjectProperty
    fullName: ProjectProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build()
  nameWithType: Project.Build()
  fullName: Microsoft.Build.Evaluation.Project.Build()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(ILogger)
  nameWithType: Project.Build(ILogger)
  fullName: Microsoft.Build.Evaluation.Project.Build(ILogger)
- uid: Microsoft.Build.Framework.ILogger
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Build.Framework.ILogger
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(IEnumerable<ILogger>)
  nameWithType: Project.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ILogger>
  nameWithType: IEnumerable<ILogger>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Framework.ILogger>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Framework.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String)
  nameWithType: Project.Build(String)
  fullName: Microsoft.Build.Evaluation.Project.Build(String)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[])
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[])
  nameWithType: Project.Build(String[])
  fullName: Microsoft.Build.Evaluation.Project.Build(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ForwardingLoggerRecord>
  nameWithType: IEnumerable<ForwardingLoggerRecord>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Logging.ForwardingLoggerRecord
    name: ForwardingLoggerRecord
    nameWithType: ForwardingLoggerRecord
    fullName: ForwardingLoggerRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
  fullName: Microsoft.Build.Evaluation.Project.ConditionedProperties
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,List<String>>
  nameWithType: IDictionary<String,List<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.List<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.List<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance()
  nameWithType: Project.CreateProjectInstance()
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance()
- uid: Microsoft.Build.Execution.ProjectInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstance
  nameWithType: ProjectInstance
  fullName: Microsoft.Build.Execution.ProjectInstance
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance(ProjectInstanceSettings)
  nameWithType: Project.CreateProjectInstance(ProjectInstanceSettings)
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance(ProjectInstanceSettings)
- uid: Microsoft.Build.Execution.ProjectInstanceSettings
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstanceSettings
  nameWithType: ProjectInstanceSettings
  fullName: Microsoft.Build.Execution.ProjectInstanceSettings
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
  fullName: Microsoft.Build.Evaluation.Project.DirectoryPath
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
  fullName: Microsoft.Build.Evaluation.Project.DisableMarkDirty
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
  fullName: Microsoft.Build.Evaluation.Project.EvaluationCounter
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ExpandString(String)
  nameWithType: Project.ExpandString(String)
  fullName: Microsoft.Build.Evaluation.Project.ExpandString(String)
- uid: Microsoft.Build.Evaluation.Project.FullPath
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: FullPath
  nameWithType: Project.FullPath
  fullName: Microsoft.Build.Evaluation.Project.FullPath
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItem)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
- uid: Microsoft.Build.Evaluation.ProjectItem
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectItem
  nameWithType: ProjectItem
  fullName: Microsoft.Build.Evaluation.ProjectItem
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
- uid: Microsoft.Build.Evaluation.ProjectItemDefinition
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectItemDefinition
  nameWithType: ProjectItemDefinition
  fullName: Microsoft.Build.Evaluation.ProjectItemDefinition
- uid: Microsoft.Build.Evaluation.Project.GetItems(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItems(String)
  nameWithType: Project.GetItems(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItems(String)
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsByEvaluatedInclude(String)
  nameWithType: Project.GetItemsByEvaluatedInclude(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(String)
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsIgnoringCondition(String)
  nameWithType: Project.GetItemsIgnoringCondition(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(String)
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetLogicalProject()
  nameWithType: Project.GetLogicalProject()
  fullName: Microsoft.Build.Evaluation.Project.GetLogicalProject()
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectElement>
  nameWithType: IEnumerable<ProjectElement>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Construction.ProjectElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Construction.ProjectElement
    name: ProjectElement
    nameWithType: ProjectElement
    fullName: ProjectElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectMetadata)
  nameWithType: Project.GetMetadataValueEscaped(ProjectMetadata)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectMetadata)
- uid: Microsoft.Build.Evaluation.ProjectMetadata
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectMetadata
  nameWithType: ProjectMetadata
  fullName: Microsoft.Build.Evaluation.ProjectMetadata
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItem,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItem,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItem,String)
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItemDefinition,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
- uid: Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetProperty(String)
  nameWithType: Project.GetProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.GetProperty(String)
- uid: Microsoft.Build.Evaluation.ProjectProperty
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectProperty
  nameWithType: ProjectProperty
  fullName: Microsoft.Build.Evaluation.ProjectProperty
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValue(String)
  nameWithType: Project.GetPropertyValue(String)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValue(String)
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValueEscaped(ProjectProperty)
  nameWithType: Project.GetPropertyValueEscaped(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(ProjectProperty)
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
  fullName: Microsoft.Build.Evaluation.Project.GlobalProperties
- uid: Microsoft.Build.Evaluation.Project.Imports
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Imports
  nameWithType: Project.Imports
  fullName: Microsoft.Build.Evaluation.Project.Imports
- uid: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ResolvedImport>
  nameWithType: IList<ResolvedImport>
  fullName: System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<Microsoft.Build.Evaluation.ResolvedImport>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ResolvedImport
    name: ResolvedImport
    nameWithType: ResolvedImport
    fullName: ResolvedImport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
  fullName: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
  fullName: Microsoft.Build.Evaluation.Project.IsBuildEnabled
- uid: Microsoft.Build.Evaluation.Project.IsDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsDirty
  nameWithType: Project.IsDirty
  fullName: Microsoft.Build.Evaluation.Project.IsDirty
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
  fullName: Microsoft.Build.Evaluation.Project.ItemDefinitions
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItemDefinition}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectItemDefinition>
  nameWithType: IDictionary<String,ProjectItemDefinition>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Evaluation.ProjectItemDefinition>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Evaluation.ProjectItemDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Evaluation.ProjectItemDefinition
    name: ProjectItemDefinition
    nameWithType: ProjectItemDefinition
    fullName: ProjectItemDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Items
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Items
  nameWithType: Project.Items
  fullName: Microsoft.Build.Evaluation.Project.Items
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
  fullName: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.ItemTypes
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemTypes
  nameWithType: Project.ItemTypes
  fullName: Microsoft.Build.Evaluation.Project.ItemTypes
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.MarkDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: MarkDirty()
  nameWithType: Project.MarkDirty()
  fullName: Microsoft.Build.Evaluation.Project.MarkDirty()
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
  fullName: Microsoft.Build.Evaluation.Project.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
  fullName: Microsoft.Build.Evaluation.Project.ProjectFileLocation
- uid: Microsoft.Build.Construction.ElementLocation
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ElementLocation
  nameWithType: ElementLocation
  fullName: Microsoft.Build.Construction.ElementLocation
- uid: Microsoft.Build.Evaluation.Project.Properties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Properties
  nameWithType: Project.Properties
  fullName: Microsoft.Build.Evaluation.Project.Properties
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ReevaluateIfNecessary()
  nameWithType: Project.ReevaluateIfNecessary()
  fullName: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveGlobalProperty(String)
  nameWithType: Project.RemoveGlobalProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(String)
- uid: Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItem(ProjectItem)
  nameWithType: Project.RemoveItem(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItem(ProjectItem)
- uid: Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItems(IEnumerable<ProjectItem>)
  nameWithType: Project.RemoveItems(IEnumerable<ProjectItem>)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItems(IEnumerable<ProjectItem>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectItem>
  nameWithType: IEnumerable<ProjectItem>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveProperty(ProjectProperty)
  nameWithType: Project.RemoveProperty(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty)
- uid: Microsoft.Build.Evaluation.Project.Save
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save()
  nameWithType: Project.Save()
  fullName: Microsoft.Build.Evaluation.Project.Save()
- uid: Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(TextWriter)
  nameWithType: Project.Save(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: Microsoft.Build.Evaluation.Project.Save(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(String)
  nameWithType: Project.Save(String)
  fullName: Microsoft.Build.Evaluation.Project.Save(String)
- uid: Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(Encoding)
  nameWithType: Project.Save(Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(String,Encoding)
  nameWithType: Project.Save(String,Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(String,Encoding)
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SaveLogicalProject(TextWriter)
  nameWithType: Project.SaveLogicalProject(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.SaveLogicalProject(TextWriter)
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetGlobalProperty(String,String)
  nameWithType: Project.SetGlobalProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetGlobalProperty(String,String)
- uid: Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetProperty(String,String)
  nameWithType: Project.SetProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetProperty(String,String)
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
  fullName: Microsoft.Build.Evaluation.Project.SkipEvaluation
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
  fullName: Microsoft.Build.Evaluation.Project.SubToolsetVersion
- uid: Microsoft.Build.Evaluation.Project.Targets
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Targets
  nameWithType: Project.Targets
  fullName: Microsoft.Build.Evaluation.Project.Targets
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectTargetInstance>
  nameWithType: IDictionary<String,ProjectTargetInstance>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Execution.ProjectTargetInstance
    name: ProjectTargetInstance
    nameWithType: ProjectTargetInstance
    fullName: ProjectTargetInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
  fullName: Microsoft.Build.Evaluation.Project.ToolsVersion
- uid: Microsoft.Build.Evaluation.Project.Xml
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Xml
  nameWithType: Project.Xml
  fullName: Microsoft.Build.Evaluation.Project.Xml
- uid: Microsoft.Build.Evaluation.Project.#ctor*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project
  nameWithType: Project.Project
- uid: Microsoft.Build.Evaluation.Project.AddItem*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem
  nameWithType: Project.AddItem
- uid: Microsoft.Build.Evaluation.Project.AddItemFast*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast
  nameWithType: Project.AddItemFast
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
- uid: Microsoft.Build.Evaluation.Project.Build*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build
  nameWithType: Project.Build
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance
  nameWithType: Project.CreateProjectInstance
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
- uid: Microsoft.Build.Evaluation.Project.ExpandString*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ExpandString
  nameWithType: Project.ExpandString
- uid: Microsoft.Build.Evaluation.Project.FullPath*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: FullPath
  nameWithType: Project.FullPath
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped
  nameWithType: Project.GetEvaluatedItemIncludeEscaped
- uid: Microsoft.Build.Evaluation.Project.GetItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItems
  nameWithType: Project.GetItems
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsByEvaluatedInclude
  nameWithType: Project.GetItemsByEvaluatedInclude
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsIgnoringCondition
  nameWithType: Project.GetItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetLogicalProject
  nameWithType: Project.GetLogicalProject
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped
  nameWithType: Project.GetMetadataValueEscaped
- uid: Microsoft.Build.Evaluation.Project.GetProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetProperty
  nameWithType: Project.GetProperty
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValue
  nameWithType: Project.GetPropertyValue
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValueEscaped
  nameWithType: Project.GetPropertyValueEscaped
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
- uid: Microsoft.Build.Evaluation.Project.Imports*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Imports
  nameWithType: Project.Imports
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
- uid: Microsoft.Build.Evaluation.Project.IsDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsDirty
  nameWithType: Project.IsDirty
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
- uid: Microsoft.Build.Evaluation.Project.Items*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Items
  nameWithType: Project.Items
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.ItemTypes*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemTypes
  nameWithType: Project.ItemTypes
- uid: Microsoft.Build.Evaluation.Project.MarkDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: MarkDirty
  nameWithType: Project.MarkDirty
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
- uid: Microsoft.Build.Evaluation.Project.Properties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Properties
  nameWithType: Project.Properties
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ReevaluateIfNecessary
  nameWithType: Project.ReevaluateIfNecessary
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveGlobalProperty
  nameWithType: Project.RemoveGlobalProperty
- uid: Microsoft.Build.Evaluation.Project.RemoveItem*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItem
  nameWithType: Project.RemoveItem
- uid: Microsoft.Build.Evaluation.Project.RemoveItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItems
  nameWithType: Project.RemoveItems
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveProperty
  nameWithType: Project.RemoveProperty
- uid: Microsoft.Build.Evaluation.Project.Save*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save
  nameWithType: Project.Save
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SaveLogicalProject
  nameWithType: Project.SaveLogicalProject
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetGlobalProperty
  nameWithType: Project.SetGlobalProperty
- uid: Microsoft.Build.Evaluation.Project.SetProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetProperty
  nameWithType: Project.SetProperty
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
- uid: Microsoft.Build.Evaluation.Project.Targets*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Targets
  nameWithType: Project.Targets
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
- uid: Microsoft.Build.Evaluation.Project.Xml*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Xml
  nameWithType: Project.Xml
