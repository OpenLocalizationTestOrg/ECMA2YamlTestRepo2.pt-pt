### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CanExecuteRoutedEventArgs
  id: CanExecuteRoutedEventArgs
  children:
  - System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute
  - System.Windows.Input.CanExecuteRoutedEventArgs.Command
  - System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting
  - System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.CanExecuteRoutedEventArgs.Parameter
  langs:
  - csharp
  name: CanExecuteRoutedEventArgs
  nameWithType: CanExecuteRoutedEventArgs
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs
  type: Class
  summary: "Disponibiliza dados para o <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> e <xref:System.Windows.Input.CommandManager.PreviewCanExecute>os eventos encaminhados.</xref:System.Windows.Input.CommandManager.PreviewCanExecute>"
  remarks: "Normalmente, uma origem de comando tais um <xref:System.Windows.Controls.MenuItem>, irá chamar o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>método num <xref:System.Windows.Input.RoutedCommand>para determinar se o comando pode ou não é possível executar o destino de comando atual.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Controls.MenuItem>  Se <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>está definido como `false` de um processador de eventos, a origem de comando irá desativar a próprio.</xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>  Por exemplo, se um <xref:System.Windows.Controls.MenuItem>está a agir como a origem de comando para um comando e o comando não é possível executar no destino atual do comando, o <xref:System.Windows.Controls.MenuItem>será gray próprio out.</xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.MenuItem>       O <xref:System.Windows.Input.ICommand.CanExecuteChanged>eventos notifica uma origem de comando quando a capacidade de um comando a executar pode ter sido alterado.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
  example:
  - "The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.  First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.  If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcanexecute)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcanexecute)]"
  syntax:
    content: 'public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  langs:
  - csharp
  name: CanExecute
  nameWithType: CanExecuteRoutedEventArgs.CanExecute
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> associada a este evento pode ser executado no destino do comando."
  remarks: "Muitas comando origens, tal como <xref:System.Windows.Controls.MenuItem>e <xref:System.Windows.Controls.Button>, estão desativadas quando CanExecute ser `false` e ativado quando o CanExecute ser `true`.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.MenuItem>"
  example:
  - "The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.  First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.  If it is a <xref:System.Windows.Controls.Control>, CanExecute is set to `true`; otherwise, it is set to `false`.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcanexecute)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcanexecute)]"
  syntax:
    content: public bool CanExecute { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o evento pode ser executado no destino comando; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  O valor predefinido é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command
  id: Command
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  langs:
  - csharp
  name: Command
  nameWithType: CanExecuteRoutedEventArgs.Command
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém o comando associado este evento."
  remarks: "Para obter mais informações sobre commanding, consulte o [descrição geral do Commanding](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.  If the Command property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.  If the Command property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewmultiplecanexecute)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "O comando. A menos que o comando comandos personalizados, isto é, geralmente, um <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>. Não há nenhum valor predefinido."
  overload: System.Windows.Input.CanExecuteRoutedEventArgs.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting
  id: ContinueRouting
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  langs:
  - csharp
  name: ContinueRouting
  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Determina se o evento encaminhado de entrada que invocar o comando deve continuar encaminhar através de árvore do elemento."
  syntax:
    content: public bool ContinueRouting { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o evento encaminhado deve continuar a encaminhar através de árvore do elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.   O valor predefinido é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object target);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "A adicionar."
    - id: target
      type: System.Object
      description: "A adicionar."
  overload: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter
  id: Parameter
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  langs:
  - csharp
  name: Parameter
  nameWithType: CanExecuteRoutedEventArgs.Parameter
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém os dados específicos de comando."
  remarks: "O parâmetro de comando é utilizado para transmitir informações específicas para o comando quando é executada.  O tipo de dados é definido pelo comando.       O parâmetro pode ser `null`. Vários comandos não processam ou esperar parâmetros de comando."
  example:
  - "The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.  The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customComand`and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.  This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.  The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n [!code-xml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/add/codesnippet/xaml/InvalidateRequeryWithDispatcherTimer/Window1.xaml#invalidatesampleslidercommandparameter)]"
  syntax:
    content: public object Parameter { get; }
    return:
      type: System.Object
      description: "Os dados de comandos.  O valor predefinido é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.RoutedEventArgs
  isExternal: false
  name: System.Windows.RoutedEventArgs
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: CanExecute
  nameWithType: CanExecuteRoutedEventArgs.CanExecute
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: Command
  nameWithType: CanExecuteRoutedEventArgs.Command
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: ContinueRouting
  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: Parameter
  nameWithType: CanExecuteRoutedEventArgs.Parameter
  fullName: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute*
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: CanExecute
  nameWithType: CanExecuteRoutedEventArgs.CanExecute
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command*
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: Command
  nameWithType: CanExecuteRoutedEventArgs.Command
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting*
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: ContinueRouting
  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler
- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter*
  parent: System.Windows.Input.CanExecuteRoutedEventArgs
  isExternal: false
  name: Parameter
  nameWithType: CanExecuteRoutedEventArgs.Parameter
