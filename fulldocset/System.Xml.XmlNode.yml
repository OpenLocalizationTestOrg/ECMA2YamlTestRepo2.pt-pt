### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlNode
  id: XmlNode
  children:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.BaseURI
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CloneNode(System.Boolean)
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InnerText
  - System.Xml.XmlNode.InnerXml
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.IsReadOnly
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.LocalName
  - System.Xml.XmlNode.Name
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.NodeType
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.OwnerDocument
  - System.Xml.XmlNode.ParentNode
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SchemaInfo
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  - System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
  type: Class
  summary: "Represents a single node in the XML document."
  remarks: "This class implements the W3C Document Object Model (DOM) Level 1 Core and the Core DOM Level 2. The DOM is an in-memory (cache) tree representation of an XML document. `XmlNode` is the base class in the .NET implementation of the DOM. It supports XPath selections and provides editing capabilities. The <xref:System.Xml.XmlDocument> class extends `XmlNode` and represents an XML document. You can use `XmlDocument` to load and save XML data. It also includes methods for node creation. See [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\\(DOM\\).md) for more information.  \n  \n> [!IMPORTANT]\n>  Exceptions raised as a result of using the XmlNode class, such as the <xref:System.Xml.XmlException> class may contain sensitive information that should not be exposed in untrusted scenarios. Exceptions should be properly handled so that this sensitive information is not exposed in untrusted scenarios."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")]

      public abstract class XmlNode : ICloneable, System.Collections.IEnumerable, System.Xml.XPath.IXPathNavigable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.ICloneable
  - System.Xml.XPath.IXPathNavigable
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  id: AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: AppendChild(XmlNode)
  nameWithType: XmlNode.AppendChild(XmlNode)
  fullName: System.Xml.XmlNode.AppendChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Adds the specified node to the end of the list of child nodes, of this node."
  remarks: "If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).       If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document."
  example:
  - "The following example adds a new node to the XML document.  \n  \n [!code-cpp[Classic WebData XmlNode.AppendChild Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.app_1.cpp)]\n [!code-cs[Classic WebData XmlNode.AppendChild Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.app_1.cs)]\n [!code-vb[Classic WebData XmlNode.AppendChild Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.app_1.vb)]  \n  \n **Output:**  \n  \n```  \nDisplay the modified XML...  \n<?xml version=\"1.0\" encoding=\"IBM437\"?>  \n<book genre=\"novel\" ISBN=\"1-861001-57-5\">  \n  <title>Pride And Prejudice</title>  \n  <price>19.95</price>  \n```"
  syntax:
    content: public virtual System.Xml.XmlNode AppendChild (System.Xml.XmlNode newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The node to add. All the contents of the node to be added are moved into the specified location."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.AppendChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This node is of a type that does not allow child nodes of the type of the newChild node.       The newChild is an ancestor of this node."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The newChild was created from a different document than the one that created this node.       This node is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Attributes
  id: Attributes
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Attributes
  nameWithType: XmlNode.Attributes
  fullName: System.Xml.XmlNode.Attributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets an <see cref=&quot;T:System.Xml.XmlAttributeCollection&quot;></see> containing the attributes of this node."
  remarks: ''
  example:
  - "The following example adds a new attribute to the XML document.  \n  \n [!code-cpp[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.att_1.cpp)]\n [!code-vb[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.att_1.vb)]\n [!code-cs[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.att_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlAttributeCollection Attributes { get; }
    return:
      type: System.Xml.XmlAttributeCollection
      description: "An <xref uid=&quot;langword_csharp_XmlAttributeCollection&quot; name=&quot;XmlAttributeCollection&quot; href=&quot;&quot;></xref> containing the attributes of the node.       If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlNode.Attributes*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.BaseURI
  id: BaseURI
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlNode.BaseURI
  fullName: System.Xml.XmlNode.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the base URI of the current node."
  remarks: "A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. The `BaseURI` tells you where these nodes came from.       The value of this property varies depending on the node type. For example, Document nodes return the location of the <xref:System.Xml.XmlDocument> object. Nodes which are child nodes of external EntityReference nodes return the location of the entity itself. For example, consider the following XML document:      ```   <!DOCTYPE item [   <!ENTITY xyz SYSTEM &quot;a/b.xml&quot;>   ]>   <item num=&quot;123&quot;>&xyz;</item>   ```       where the external entity `a/b.xml` contains the XML text: `<test>123</test>`.       If the document is loaded from http://server/mydata.xml, `BaseURI` returns the following:      |NodeType|Name|BaseURI|   |--------------|----------|-------------|   |Attribute|num|http://server/mydata.xml|   |Document|#document|http://server/mydata.xml|   |DocumentType|item|http://server/mydata.xml|   |Entity|xyz|http://server/mydata.xml|   |Element|item|http://server/mydata.xml|   |EntityReference|xyz|http://server/mydata.xml|   |Element|test|http://server/a/b.xml|   |Text|#text|http://server/a/b.xml|       `BaseURI` looks for entity reference boundaries, so if entities are expanded this information is not preserved and this property returns the location of the `XmlDocument` object in all cases.       As a second example, given the following XML document:      ```   <!DOCTYPE Mydata SYSTEM &quot;http://localhost/doctype.dtd&quot;>   <baa>&xyz;</baa>   ```       where the DTD file contains the following:      ```   <!ENTITY xyz <E1>My Data</E1>   <!ELEMENT baa #PCDATA>   <!ATTLIST baa attr1 &quot;woof&quot;>   ```       If the XML document is loaded from http://localhost/mydata.xml, `BaseURI` returns the following for each of the nodes:      |NodeType|Name|BaseURI|   |--------------|----------|-------------|   |Document|#document|http://localhost/mydata.xml|   |DocumentType|Mydata|http://localhost/mydata.xml<br /><br /> The <xref:System.Xml.XmlDocumentType.SystemId%2A?displayProperty=fullName> or <xref:System.Xml.XmlDocumentType.PublicId%2A?displayProperty=fullName> properties can be used to identify where the DTD file was loaded from.|   |Element|baa|http://localhost/mydata.xml|   |Entity|xyz|http://localhost/doctype.dtd|   |EntityReference|xyz|http://localhost/mydata.xml|   |Attribute|woof|http://localhost/mydata.xml|      > [!NOTE] >  The base URI of a default attribute is the same as the base URI of the element to which they belong.       This property is a Microsoft extension to the Document Object Model (DOM)."
  syntax:
    content: public virtual string BaseURI { get; }
    return:
      type: System.String
      description: "The location from which the node was loaded or String.Empty if the node has no base URI."
  overload: System.Xml.XmlNode.BaseURI*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.ChildNodes
  id: ChildNodes
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: ChildNodes
  nameWithType: XmlNode.ChildNodes
  fullName: System.Xml.XmlNode.ChildNodes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets all the child nodes of the node."
  remarks: "For information about child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)"
  example:
  - "The following example displays all the child nodes of the root element.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.chi_1.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.chi_1.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.chi_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList ChildNodes { get; }
    return:
      type: System.Xml.XmlNodeList
      description: "An object that contains all the child nodes of the node.       If there are no child nodes, this property returns an empty <see cref=&quot;T:System.Xml.XmlNodeList&quot;></see>."
  overload: System.Xml.XmlNode.ChildNodes*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Clone
  id: Clone
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlNode.Clone()
  fullName: System.Xml.XmlNode.Clone()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a duplicate of this node."
  remarks: "Cloning an <xref:System.Xml.XmlElement> copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes. This method recursively clones the node and the subtree underneath it.       `Clone` is equivalent to calling `CloneNode(true)`.       The following table describes the specific behavior for each <xref:System.Xml.XmlNodeType>.      |XmlNodeType|Clone|   |-----------------|-----------|   |Attribute|Clones the attribute node, including child nodes.|   |CData|Clones the CData node, including its data content.|   |Comment|Clones the comment node, including its text content.|   |Document|Clones the document node, including any child nodes.|   |DocumentFragment|Clones the document fragment node, including any child nodes.|   |DocumentType|Clones the document type node.|   |Element|Clones the element node, its attributes, and any child nodes.|   |Entity|Entity nodes cannot be cloned.|   |EntityReference|Clones the entity reference node. The replacement text is not included.|   |Notation|Notation nodes cannot be cloned.|   |ProcessingInstruction|Clones the processing instruction node, including its target and data.|   |SignificantWhitespace|Clones the significant white space node, including its data value.|   |Text|Clones the text node, including its data value.|   |Whitespace|Clones the white space node, including its data value.|   |XmlDeclaration|Clones the XmlDeclaration node, including its data value.|   |All other node types.|These node types cannot be cloned.|       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example clones the root node of the XML document.  \n  \n [!code-vb[Classic WebData XmlNode.Clone Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.clone_1.vb)]\n [!code-cs[Classic WebData XmlNode.Clone Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.clone_1.cs)]\n [!code-cpp[Classic WebData XmlNode.Clone Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.clone_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlNode Clone ();
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.Clone*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlNode.CloneNode(Boolean)
  fullName: System.Xml.XmlNode.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a duplicate of the node, when overridden in a derived class."
  remarks: "This method serves as a copy constructor for nodes. The duplicate node has no parent (<xref:System.Xml.XmlNode.ParentNode%2A> returns `null`).       The following table describes the specific behavior for each <xref:System.Xml.XmlNodeType>.      |XmlNodeType|CloneNode(true)|CloneNode(false)|   |-----------------|-----------------------|------------------------|   |Attribute|Clones the attribute node, including child nodes.|Clones the attribute node, including child nodes.|   |CData|Clones the CData node, including its data content.|Clones the CData node, including its data content.|   |Comment|Clones the comment node, including its text content.|Clones the comment node, including its text content.|   |Document|Clones the document node, including any child nodes.|Clones the document node.|   |DocumentFragment|Clones the document fragment node, including any child nodes.|Clones the document fragment node.|   |DocumentType|Clones the document type node.|Clones the document type node.|   |Element|Clones the element node, its attributes, and any child nodes.|Clones the element node and its attributes, including any default attributes.|   |Entity|Entity nodes cannot be cloned.|Entity nodes cannot be cloned.|   |EntityReference|Clones the entity reference node. The replacement text is not included.|Clones the entity reference node. The replacement text is not included.|   |Notation|Notation nodes cannot be cloned.|Notation nodes cannot be cloned.|   |ProcessingInstruction|Clones the processing instruction node, including its target and data.|Clones the processing instruction node, including its target and data.|   |SignificantWhitespace|Clones the significant white space node, including its data value.|Clones the significant white space node, including its data value.|   |Text|Clones the text node, including its data value.|Clones the text node, including its data value.|   |Whitespace|Clones the white space node, including its data value.|Clones the white space node, including its data value.|   |XmlDeclaration|Clones the XmlDeclaration node, including its data value.|Clones the XmlDeclaration node, including its data value.|   |All other node types.|These node types cannot be cloned.|These node types cannot be cloned.|"
  example:
  - "The following example shows the difference between a deep and shallow clone.  \n  \n [!code-cpp[Classic WebData XmlNode.CloneNode Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.clo_1.cpp)]\n [!code-vb[Classic WebData XmlNode.CloneNode Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.clo_1.vb)]\n [!code-cs[Classic WebData XmlNode.CloneNode Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.clo_1.cs)]"
  syntax:
    content: public abstract System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "\n     to recursively clone the subtree under the specified node;  to clone only the node itself."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.CloneNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling this method on a node type that cannot be cloned."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XmlNode.CreateNavigator()
  fullName: System.Xml.XmlNode.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates an <see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot;></see> for navigating this object."
  remarks: "The `XPathNavigator` provides read-only, random access to data. Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example loads and edits an XML document before performing an XSLT transform.  \n  \n [!code-vb[XslTransform.Transform2#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.cre_1.vb)]\n [!code-cs[XslTransform.Transform2#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.cre_1.cs)]\n [!code-cpp[XslTransform.Transform2#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.cre_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "To be added."
  overload: System.Xml.XmlNode.CreateNavigator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.FirstChild
  id: FirstChild
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: FirstChild
  nameWithType: XmlNode.FirstChild
  fullName: System.Xml.XmlNode.FirstChild
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the first child of the node."
  remarks: "For information about child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)"
  example:
  - "The following example displays the title element.  \n  \n [!code-cpp[Classic WebData XmlNode.FirstChild Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.fir_1.cpp)]\n [!code-cs[Classic WebData XmlNode.FirstChild Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.fir_1.cs)]\n [!code-vb[Classic WebData XmlNode.FirstChild Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.fir_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode FirstChild { get; }
    return:
      type: System.Xml.XmlNode
      description: "The first child of the node. If there is no such node, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Xml.XmlNode.FirstChild*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.GetEnumerator
  id: GetEnumerator
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: XmlNode.GetEnumerator()
  fullName: System.Xml.XmlNode.GetEnumerator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Get an enumerator that iterates through the child nodes in the current node."
  remarks: "Provides support for the “for each” style iteration over the nodes in the `XmlNode`.       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example displays all the books in the XML document.  \n  \n [!code-cpp[Classic WebData XmlNode.GetEnumerator Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.get_2_1.cpp)]\n [!code-cs[Classic WebData XmlNode.GetEnumerator Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.get_2_1.cs)]\n [!code-vb[Classic WebData XmlNode.GetEnumerator Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.get_2_1.vb)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlNode.GetEnumerator Example#2](~/add/codesnippet/XML/m-system.xml.xmlnode.get_2_2.xml)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Xml.XmlNode.GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  id: GetNamespaceOfPrefix(System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: GetNamespaceOfPrefix(String)
  nameWithType: XmlNode.GetNamespaceOfPrefix(String)
  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Looks up the closest **xmlns** declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new attribute to the XML document.  \n  \n [!code-cpp[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.get_1_1.cpp)]\n [!code-vb[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.get_1_1.vb)]\n [!code-cs[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.get_1_1.cs)]"
  syntax:
    content: public virtual string GetNamespaceOfPrefix (string prefix);
    parameters:
    - id: prefix
      type: System.String
      description: "The prefix whose namespace URI you want to find."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlNode.GetNamespaceOfPrefix*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  id: GetPrefixOfNamespace(System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: GetPrefixOfNamespace(String)
  nameWithType: XmlNode.GetPrefixOfNamespace(String)
  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Looks up the closest **xmlns** declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the XML document.  \n  \n [!code-cs[Classic WebData XmlNode.GetPrefixOfNamespace Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.get_0_1.cs)]\n [!code-cpp[Classic WebData XmlNode.GetPrefixOfNamespace Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.get_0_1.cpp)]\n [!code-vb[Classic WebData XmlNode.GetPrefixOfNamespace Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.get_0_1.vb)]"
  syntax:
    content: public virtual string GetPrefixOfNamespace (string namespaceURI);
    parameters:
    - id: namespaceURI
      type: System.String
      description: "The namespace URI whose prefix you want to find."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlNode.GetPrefixOfNamespace*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.HasChildNodes
  id: HasChildNodes
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: HasChildNodes
  nameWithType: XmlNode.HasChildNodes
  fullName: System.Xml.XmlNode.HasChildNodes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets a value indicating whether this node has any child nodes."
  remarks: "For information about child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)"
  example:
  - "The following example displays all the child nodes of the root element.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.has_1.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.has_1.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.has_1.vb)]"
  syntax:
    content: public virtual bool HasChildNodes { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the node has child nodes; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlNode.HasChildNodes*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.InnerText
  id: InnerText
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlNode.InnerText
  fullName: System.Xml.XmlNode.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the concatenated values of the node and all its child nodes."
  remarks: "Setting this property replaces all the child nodes with the parsed contents of the given string.       For leaf nodes, `InnerText` returns the same content as the <xref:System.Xml.XmlNode.Value%2A> property.       This property is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example compares the `InnerText` and <xref:System.Xml.XmlNode.InnerXml%2A> properties.  \n  \n [!code-vb[Classic WebData XmlNode.InnerText Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.inn_1_1.vb)]\n [!code-cs[Classic WebData XmlNode.InnerText Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.inn_1_1.cs)]\n [!code-cpp[Classic WebData XmlNode.InnerText Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.inn_1_1.cpp)]  \n  \n **Output:**  \n  \n```  \nDisplay the InnerText of the element...  \nsome textmore text  \nDisplay the InnerXml of the element...  \nsome text<child />more text  \n<elem>Text containing <markup/> will have char(<) and char(>) escape  \nd.</elem>  \n<elem>Text containing <markup />.</elem>  \n```"
  syntax:
    content: public virtual string InnerText { get; set; }
    return:
      type: System.String
      description: "The concatenated values of the node and all its child nodes."
  overload: System.Xml.XmlNode.InnerText*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.InnerXml
  id: InnerXml
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlNode.InnerXml
  fullName: System.Xml.XmlNode.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the markup representing only the child nodes of this node."
  remarks: "Attempting to set this property from a node that cannot have child nodes, for example a Text node, throws an exception. Otherwise, setting `InnerXml` replaces the child nodes, of the node, with the parsed contents of the given string. The parsing is done in the current namespace context.       This property is a Microsoft extension to the Document Object Model (DOM).      > [!NOTE] >  `InnerXml` is not an efficient way to modify the DOM. There may be performance issues when replacing complex nodes. It is more efficient to construct nodes and use methods such as `InsertBefore`, `InsertAfter`, `AppendChild`, and `RemoveChild` to modify the Xml document."
  example:
  - "The following example compares the <xref:System.Xml.XmlNode.InnerText%2A> and `InnerXml` properties.  \n  \n [!code-vb[Classic WebData XmlNode.InnerText Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.inn_0_1.vb)]\n [!code-cs[Classic WebData XmlNode.InnerText Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.inn_0_1.cs)]\n [!code-cpp[Classic WebData XmlNode.InnerText Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.inn_0_1.cpp)]"
  syntax:
    content: public virtual string InnerXml { get; set; }
    return:
      type: System.String
      description: "The markup of the child nodes of this node.       <div class=&quot;alert NOTE&quot;><xref uid=&quot;langword_csharp_InnerXml&quot; name=&quot;InnerXml&quot; href=&quot;&quot;></xref> does not return default attributes.      </div>"
  overload: System.Xml.XmlNode.InnerXml*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Setting this property on a node that cannot have child nodes."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The XML specified when setting this property is not well-formed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  id: InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: InsertAfter(XmlNode,XmlNode)
  nameWithType: XmlNode.InsertAfter(XmlNode,XmlNode)
  fullName: System.Xml.XmlNode.InsertAfter(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inserts the specified node immediately after the specified reference node."
  remarks: "If `refChild` is `null`, insert `newChild` at the beginning of the list of child nodes. All the contents of the `newChild` are inserted, in the same order, after `refChild`. If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).       If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new node to the XML document.  \n  \n [!code-cs[Classic WebData XmlNode.InsertAfter Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.ins_1_1.cs)]\n [!code-vb[Classic WebData XmlNode.InsertAfter Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.ins_1_1.vb)]\n [!code-cpp[Classic WebData XmlNode.InsertAfter Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.ins_1_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlNode InsertAfter (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The  to insert."
    - id: refChild
      type: System.Xml.XmlNode
      description: "The  that is the reference node. The `newNode` is placed after the `refNode`."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.InsertAfter*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This node is of a type that does not allow child nodes of the type of the newChild node.       The newChild is an ancestor of this node."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The newChild was created from a different document than the one that created this node.       The refChild is not a child of this node.       This node is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  id: InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: InsertBefore(XmlNode,XmlNode)
  nameWithType: XmlNode.InsertBefore(XmlNode,XmlNode)
  fullName: System.Xml.XmlNode.InsertBefore(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inserts the specified node immediately before the specified reference node."
  remarks: "If `refChild` is `null`, insert `newChild` at the end of the list of child nodes. All the contents of the `newChild` are inserted, in the same order, before `refChild`. If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).       If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document."
  example:
  - "The following example adds a new node to the XML document.  \n  \n [!code-cs[Classic WebData XmlNode.InsertBefore Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.ins_0_1.cs)]\n [!code-vb[Classic WebData XmlNode.InsertBefore Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.ins_0_1.vb)]\n [!code-cpp[Classic WebData XmlNode.InsertBefore Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.ins_0_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlNode InsertBefore (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The  to insert."
    - id: refChild
      type: System.Xml.XmlNode
      description: "The  that is the reference node. The `newChild` is placed before this node."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.InsertBefore*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The current node is of a type that does not allow child nodes of the type of the newChild node.       The newChild is an ancestor of this node."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The newChild was created from a different document than the one that created this node.       The refChild is not a child of this node.       This node is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlNode.IsReadOnly
  fullName: System.Xml.XmlNode.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets a value indicating whether the node is read-only."
  remarks: "A read-only node is one whose properties, attributes, or child nodes cannot be changed. You can remove a read-only node from the tree and insert it somewhere else. For example, Entity nodes are always read-only.       This property is a Microsoft extension to the Document Object Model (DOM)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the node is read-only; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlNode.IsReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Item(System.String)
  id: Item(System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Item(String)
  nameWithType: XmlNode.Item(String)
  fullName: System.Xml.XmlNode.Item(String)
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the first child element with the specified &lt;xref:System.Xml.XmlNode.Name%2A&gt;."
  remarks: "This property is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example displays the title element.  \n  \n [!code-vb[Classic WebData XmlNode.this Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.ite_1.vb)]\n [!code-cs[Classic WebData XmlNode.this Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.ite_1.cs)]\n [!code-cpp[Classic WebData XmlNode.this Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.ite_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "The qualified name of the element to retrieve."
    return:
      type: System.Xml.XmlElement
      description: "The first <see cref=&quot;T:System.Xml.XmlElement&quot;></see> that matches the specified name. It returns a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic) if there is no match."
  overload: System.Xml.XmlNode.Item*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Item(System.String,System.String)
  id: Item(System.String,System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Item(String,String)
  nameWithType: XmlNode.Item(String,String)
  fullName: System.Xml.XmlNode.Item(String,String)
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the first child element with the specified &lt;xref:System.Xml.XmlNode.LocalName%2A&gt; and &lt;xref:System.Xml.XmlNode.NamespaceURI%2A&gt;."
  remarks: "This property is a Microsoft extension to the Document Object Model (DOM)."
  syntax:
    content: public virtual System.Xml.XmlElement this[string localname, string ns] { get; }
    parameters:
    - id: localname
      type: System.String
      description: "The local name of the element."
    - id: ns
      type: System.String
      description: "The namespace URI of the element."
    return:
      type: System.Xml.XmlElement
      description: "The first <see cref=&quot;T:System.Xml.XmlElement&quot;></see> with the matching <span class=&quot;paramref&quot;>localname</span> and <span class=&quot;paramref&quot;>ns</span>. . It returns a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic) if there is no match."
  overload: System.Xml.XmlNode.Item*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.LastChild
  id: LastChild
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: LastChild
  nameWithType: XmlNode.LastChild
  fullName: System.Xml.XmlNode.LastChild
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the last child of the node."
  remarks: ''
  example:
  - "The following example displays the price element.  \n  \n [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.las_1.cpp)]\n [!code-cs[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.las_1.cs)]\n [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.las_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode LastChild { get; }
    return:
      type: System.Xml.XmlNode
      description: "The last child of the node. If there is no such node, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Xml.XmlNode.LastChild*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.LocalName
  id: LocalName
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlNode.LocalName
  fullName: System.Xml.XmlNode.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the local name of the node, when overridden in a derived class."
  remarks: "If the node does not have a prefix, LocalName is the same as <xref:System.Xml.XmlNode.Name%2A>."
  syntax:
    content: public abstract string LocalName { get; }
    return:
      type: System.String
      description: "The name of the node with the prefix removed. For example, <xref uid=&quot;langword_csharp_LocalName&quot; name=&quot;LocalName&quot; href=&quot;&quot;></xref> is book for the element \\"
  overload: System.Xml.XmlNode.LocalName*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Name
  id: Name
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Name
  nameWithType: XmlNode.Name
  fullName: System.Xml.XmlNode.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the qualified name of the node, when overridden in a derived class."
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "The qualified name of the node. The name returned is dependent on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node:       <table><thead><tr><th> Type       </th><th> Name       </th></tr></thead><tbody><tr><td> Attribute       </td><td> The qualified name of the attribute.       </td></tr><tr><td> CDATA       </td><td> #cdata-section       </td></tr><tr><td> Comment       </td><td> #comment       </td></tr><tr><td> Document       </td><td> #document       </td></tr><tr><td> DocumentFragment       </td><td> #document-fragment       </td></tr><tr><td> DocumentType       </td><td> The document type name.       </td></tr><tr><td> Element       </td><td> The qualified name of the element.       </td></tr><tr><td> Entity       </td><td> The name of the entity.       </td></tr><tr><td> EntityReference       </td><td> The name of the entity referenced.       </td></tr><tr><td> Notation       </td><td> The notation name.       </td></tr><tr><td> ProcessingInstruction       </td><td> The target of the processing instruction.       </td></tr><tr><td> Text       </td><td> #text       </td></tr><tr><td> Whitespace       </td><td> #whitespace       </td></tr><tr><td> SignificantWhitespace       </td><td> #significant-whitespace       </td></tr><tr><td> XmlDeclaration       </td><td> #xml-declaration       </td></tr></tbody></table>"
  overload: System.Xml.XmlNode.Name*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: NamespaceURI
  nameWithType: XmlNode.NamespaceURI
  fullName: System.Xml.XmlNode.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the namespace URI of this node."
  remarks: "This is the namespace URI specified at creation time. For example, `NamespaceURI` is urn:samples for the element \\<bk:book xmlns:bk= \"urn:samples\">  \n  \n An attribute does not inherit its namespace from the element it is attached to. If an attribute is not explicitly given a namespace, it simply has no namespace."
  syntax:
    content: public virtual string NamespaceURI { get; }
    return:
      type: System.String
      description: "The namespace URI of this node. If there is no namespace URI, this property returns String.Empty."
  overload: System.Xml.XmlNode.NamespaceURI*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.NextSibling
  id: NextSibling
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: NextSibling
  nameWithType: XmlNode.NextSibling
  fullName: System.Xml.XmlNode.NextSibling
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the node immediately following this node."
  remarks: ''
  example:
  - "The following example displays all the books in the XML document.  \n  \n [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.nex_1.vb)]\n [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.nex_1.cpp)]\n [!code-cs[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.nex_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode NextSibling { get; }
    return:
      type: System.Xml.XmlNode
      description: "The next <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>. If there is no next node, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Xml.XmlNode.NextSibling*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.NodeType
  id: NodeType
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlNode.NodeType
  fullName: System.Xml.XmlNode.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the type of the current node, when overridden in a derived class."
  remarks: "This property never returns the `XmlNodeType` EndElement, EndEntity or None."
  syntax:
    content: public abstract System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "One of the &lt;xref:System.Xml.XmlNodeType&gt; values."
  overload: System.Xml.XmlNode.NodeType*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Normalize
  id: Normalize
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Normalize()
  nameWithType: XmlNode.Normalize()
  fullName: System.Xml.XmlNode.Normalize()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a &quot;normal&quot; form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes."
  remarks: "This method can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, and is useful when operations (such as XPointer lookups) that depend on a particular document tree structure are to be used."
  syntax:
    content: public virtual void Normalize ();
    parameters: []
  overload: System.Xml.XmlNode.Normalize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.OuterXml
  id: OuterXml
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: OuterXml
  nameWithType: XmlNode.OuterXml
  fullName: System.Xml.XmlNode.OuterXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the markup containing this node and all its child nodes."
  remarks: "This property is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example compares output from the <xref:System.Xml.XmlNode.InnerXml%2A> and `OuterXml` properties.  \n  \n [!code-cpp[Classic WebData XmlNode.OuterXml Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.out_1.cpp)]\n [!code-vb[Classic WebData XmlNode.OuterXml Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.out_1.vb)]\n [!code-cs[Classic WebData XmlNode.OuterXml Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.out_1.cs)]"
  syntax:
    content: public virtual string OuterXml { get; }
    return:
      type: System.String
      description: "The markup containing this node and all its child nodes.       <div class=&quot;alert NOTE&quot;><xref uid=&quot;langword_csharp_OuterXml&quot; name=&quot;OuterXml&quot; href=&quot;&quot;></xref> does not return default attributes.      </div>"
  overload: System.Xml.XmlNode.OuterXml*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlNode.OwnerDocument
  fullName: System.Xml.XmlNode.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the <see cref=&quot;T:System.Xml.XmlDocument&quot;></see> to which this node belongs."
  remarks: "When adding nodes to the current node, use the <xref:System.Xml.XmlDocument> returned by the OwnerDocument property to create the node."
  example:
  - See <xref:System.Xml.XmlElement.OwnerDocument%2A> (in the XmlElement class) for an example using this property.
  syntax:
    content: public virtual System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "The <see cref=&quot;T:System.Xml.XmlDocument&quot;></see> to which this node belongs.       If the node is an <see cref=&quot;T:System.Xml.XmlDocument&quot;></see> (NodeType equals XmlNodeType.Document), this property returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlNode.OwnerDocument*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.ParentNode
  id: ParentNode
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlNode.ParentNode
  fullName: System.Xml.XmlNode.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the parent of this node (for nodes that can have parents)."
  remarks: "For information about parent and child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)"
  syntax:
    content: public virtual System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "The <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. For all other nodes, the value returned depends on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node. The following table describes the possible return values for the <xref uid=&quot;langword_csharp_ParentNode&quot; name=&quot;ParentNode&quot; href=&quot;&quot;></xref> property.       <table><thead><tr><th> NodeType       </th><th> Return Value of ParentNode       </th></tr></thead><tbody><tr><td> Attribute, Document, DocumentFragment, Entity, Notation       </td><td> Returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>; these nodes do not have parents.       </td></tr><tr><td> CDATA       </td><td> Returns the element or entity reference containing the CDATA section.       </td></tr><tr><td> Comment       </td><td> Returns the element, entity reference, document type, or document containing the comment.       </td></tr><tr><td> DocumentType       </td><td> Returns the document node.       </td></tr><tr><td> Element       </td><td> Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node.       </td></tr><tr><td> EntityReference       </td><td> Returns the element, attribute, or entity reference containing the entity reference.       </td></tr><tr><td> ProcessingInstruction       </td><td> Returns the document, element, document type, or entity reference containing the processing instruction.       </td></tr><tr><td> Text       </td><td> Returns the parent element, attribute, or entity reference containing the text node.       </td></tr></tbody></table>"
  overload: System.Xml.XmlNode.ParentNode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Prefix
  id: Prefix
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Prefix
  nameWithType: XmlNode.Prefix
  fullName: System.Xml.XmlNode.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the namespace prefix of this node."
  remarks: "Setting this property, when permitted, changes the <xref:System.Xml.XmlNode.Name%2A> property, which holds the qualified name, on Element and Attribute nodes. Setting this property on node types that cannot have a prefix (such as Text, Comment, EntityReference, CDATA, ProcessingInstruction, Document, and DocumentFragment) has no effect. Changing the prefix of an attribute that is known to have a default value, does not make a new attribute with the default value and the original prefix appear, since the namespace URI and local name do not change."
  syntax:
    content: public virtual string Prefix { get; set; }
    return:
      type: System.String
      description: "The namespace prefix of this node. For example, <xref uid=&quot;langword_csharp_Prefix&quot; name=&quot;Prefix&quot; href=&quot;&quot;></xref> is bk for the element \\"
  overload: System.Xml.XmlNode.Prefix*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "This node is read-only."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The specified prefix contains an invalid character.       The specified prefix is malformed.       The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from &quot;http://www.w3.org/XML/1998/namespace&quot;.       This node is an attribute and the specified prefix is &quot;xmlns&quot; and the namespaceURI of this node is different from &quot;http://www.w3.org/2000/xmlns/ &quot;.       This node is an attribute and the qualifiedName of this node is &quot;xmlns&quot;."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  id: PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: PrependChild(XmlNode)
  nameWithType: XmlNode.PrependChild(XmlNode)
  fullName: System.Xml.XmlNode.PrependChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Adds the specified node to the beginning of the list of child nodes for this node."
  remarks: "If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).       If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new node to the XML document.  \n  \n [!code-cs[Classic WebData XmlNode.PrependChild Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.pre_1.cs)]\n [!code-cpp[Classic WebData XmlNode.PrependChild Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.pre_1.cpp)]\n [!code-vb[Classic WebData XmlNode.PrependChild Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.pre_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode PrependChild (System.Xml.XmlNode newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The node to add. All the contents of the node to be added are moved into the specified location."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.PrependChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This node is of a type that does not allow child nodes of the type of the newChild node.       The newChild is an ancestor of this node."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The newChild was created from a different document than the one that created this node.       This node is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.PreviousSibling
  id: PreviousSibling
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: PreviousSibling
  nameWithType: XmlNode.PreviousSibling
  fullName: System.Xml.XmlNode.PreviousSibling
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the node immediately preceding this node."
  remarks: ''
  example:
  - "The following example displays all the books in the XML document.  \n  \n [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.pre_1.cs)]\n [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.pre_1.cpp)]\n [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.pre_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode PreviousSibling { get; }
    return:
      type: System.Xml.XmlNode
      description: "The preceding <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>. If there is no preceding node, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Xml.XmlNode.PreviousSibling*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.PreviousText
  id: PreviousText
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: PreviousText
  nameWithType: XmlNode.PreviousText
  fullName: System.Xml.XmlNode.PreviousText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the text node that immediately precedes this node."
  remarks: "This property has faster performance than the <xref:System.Xml.XmlNode.PreviousSibling%2A> property but you can use it only to get a node of type <xref:System.Xml.XmlNodeType>. To get any other type of node that that precedes this node, use the <xref:System.Xml.XmlNode.PreviousSibling%2A> property."
  syntax:
    content: public virtual System.Xml.XmlNode PreviousText { get; }
    return:
      type: System.Xml.XmlNode
      description: "Returns <see cref=&quot;T:System.Xml.XmlNode&quot;></see>."
  overload: System.Xml.XmlNode.PreviousText*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.RemoveAll
  id: RemoveAll
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: XmlNode.RemoveAll()
  fullName: System.Xml.XmlNode.RemoveAll()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes all the child nodes and/or attributes of the current node."
  remarks: "If a removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix.       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example removes all child and attribute nodes from the root node.  \n  \n [!code-cs[Classic WebData XmlNode.RemoveAll Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.rem_1_1.cs)]\n [!code-cpp[Classic WebData XmlNode.RemoveAll Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.rem_1_1.cpp)]\n [!code-vb[Classic WebData XmlNode.RemoveAll Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.rem_1_1.vb)]"
  syntax:
    content: public virtual void RemoveAll ();
    parameters: []
  overload: System.Xml.XmlNode.RemoveAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  id: RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: RemoveChild(XmlNode)
  nameWithType: XmlNode.RemoveChild(XmlNode)
  fullName: System.Xml.XmlNode.RemoveChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes specified child node."
  remarks: ''
  example:
  - "The following example removes a node from the XML document.  \n  \n [!code-cs[Classic WebData XmlNode.RemoveChild Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.rem_0_1.cs)]\n [!code-vb[Classic WebData XmlNode.RemoveChild Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.rem_0_1.vb)]\n [!code-cpp[Classic WebData XmlNode.RemoveChild Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.rem_0_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlNode RemoveChild (System.Xml.XmlNode oldChild);
    parameters:
    - id: oldChild
      type: System.Xml.XmlNode
      description: "The node being removed."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.RemoveChild*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The oldChild is not a child of this node. Or this node is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  id: ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: ReplaceChild(XmlNode,XmlNode)
  nameWithType: XmlNode.ReplaceChild(XmlNode,XmlNode)
  fullName: System.Xml.XmlNode.ReplaceChild(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Replaces the child node <span class=&quot;paramref&quot;>oldChild</span> with <span class=&quot;paramref&quot;>newChild</span> node."
  remarks: "If the `newChild` is already in the tree, it is first removed.       If the `newChild` was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be passed to the `ReplaceChild` method."
  example:
  - "The following example replaces the title element in the XML document.  \n  \n [!code-cpp[Classic WebData XmlNode.ReplaceChild Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.rep_1.cpp)]\n [!code-cs[Classic WebData XmlNode.ReplaceChild Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.rep_1.cs)]\n [!code-vb[Classic WebData XmlNode.ReplaceChild Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.rep_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode ReplaceChild (System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The new node to put in the child list."
    - id: oldChild
      type: System.Xml.XmlNode
      description: "The node being replaced in the list."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.ReplaceChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This node is of a type that does not allow child nodes of the type of the newChild node.       The newChild is an ancestor of this node."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The newChild was created from a different document than the one that created this node.       This node is read-only.       The oldChild is not a child of this node."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlNode.SchemaInfo
  fullName: System.Xml.XmlNode.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the post schema validation infoset that has been assigned to this node as a result of schema validation."
  remarks: "The SchemaInfo property is set when this node is validatied."
  syntax:
    content: public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "An <see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot;></see> object containing the post schema validation infoset of this node."
  overload: System.Xml.XmlNode.SchemaInfo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.SelectNodes(System.String)
  id: SelectNodes(System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: SelectNodes(String)
  nameWithType: XmlNode.SelectNodes(String)
  fullName: System.Xml.XmlNode.SelectNodes(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Selects a list of nodes matching the XPath expression."
  remarks: "If the XPath expression requires namespace resolution, you must use the `SelectNodes` overload which takes an <xref:System.Xml.XmlNamespaceManager> as its argument. The `XmlNamespaceManager` is used to resolve namespaces.      > [!NOTE] >  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still use the `XmlNamespaceManager` and add a prefix and namespace URI to it; otherwise, you will not get any nodes selected. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).      > [!NOTE] >  A common issue when formulating XPath expressions is how to include a single quote (&quot;) or double quote (&quot;) in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.       For example, suppose you have the following XML:      ```   <bookstore>     <book>       <title>&quot;Emma&quot;</title>     </book>   </bookstore>   ```       The following Visual Basic code selects an element that contains single quotes:      ```   nodeList = root.SelectNodes(&quot;//book[contains(title,&quot;&quot;&quot;Emma&quot;&quot;&quot;)]&quot;)   ```       This method is a Microsoft extension to the Document Object Model (DOM).       The <xref:System.Xml.XmlNodeList> object returned by this method will be valid while the underlying document remains unchanged. If the underlying document changes, unexpected results may be returned (no exception will be thrown)."
  example:
  - "The following example selects all books where the author's last name is Austen, and then changes the price of those books.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.sel_1_1.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.sel_1_1.cs)]\n [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.sel_1_1.vb)]  \n  \n This example uses the following XML:  \n  \n [!code-xml[Classic WebData XmlNode.SelectNodes Example#2](~/add/codesnippet/XML/m-system.xml.xmlnode.sel_1_2.xml)]"
  syntax:
    content: public System.Xml.XmlNodeList SelectNodes (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "The XPath expression."
    return:
      type: System.Xml.XmlNodeList
      description: "To be added."
  overload: System.Xml.XmlNode.SelectNodes*
  exceptions:
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "The XPath expression contains a prefix. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  id: SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: SelectNodes(String,XmlNamespaceManager)
  nameWithType: XmlNode.SelectNodes(String,XmlNamespaceManager)
  fullName: System.Xml.XmlNode.SelectNodes(String,XmlNamespaceManager)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;xref:System.Xml.XmlNamespaceManager&gt;."
  remarks: "XPath expressions can include namespaces. Namespace resolution is supported using the `XmlNamespaceManager`. If the XPath expression includes a prefix, the prefix and namespace URI pair must be added to the `XmlNamespaceManager`.      > [!NOTE] >  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still add a prefix and namespace URI to the `XmlNamespaceManager`; otherwise, you will not get any nodes selected. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).       For example, if you had the following XML:      ```   <bookstore xmlns=&quot;http://www.lucernepublishing.com&quot;>    <book>      <title>Pride And Prejudice</title>    </book>   </bookstore>   ```       The following C# code selects all book nodes:      ```   XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);   nsmgr.AddNamespace(&quot;ab&quot;, &quot;http://www.lucernepublishing.com&quot;);   XmlNodeList nodelist = doc.SelectNodes(&quot;//ab:book&quot;, nsmgr);   ```      > [!NOTE] >  A common issue when formulating XPath expressions is how to include a single quote (&quot;) or double quote (&quot;) in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.       For example, suppose you have the following XML:      ```   <bookstore xmlns=&quot;http://www.lucernepublishing.com&quot;>     <book>       <title>&quot;Emma&quot;</title>     </book>   </bookstore>   ```       The following Visual Basic code selects an element that contains single quotes:      ```   Dim nsmgr As XmlNamespaceManager = New XmlNamespaceManager(doc.NameTable)   nsmgr.AddNamespace(&quot;ab&quot;, &quot;http://www.lucernepublishing.com&quot;)   nodeList = root.SelectNodes(&quot;//ab:book[contains(ab:title,&quot;&quot;&quot;Emma&quot;&quot;&quot;)]&quot;, nsmgr)   ```       This method is a Microsoft extension to the Document Object Model (DOM).       The <xref:System.Xml.XmlNodeList> object returned by this method will be valid while the underlying document remains unchanged. If the underlying document changes, unexpected results may be returned (no exception will be thrown)."
  example:
  - "The following example displays the values of each of the ISBN attributes. This example uses an <xref:System.Xml.XmlElement> object, which inherits from the <xref:System.Xml.XmlNode> class.  \n  \n [!code-cpp[XmlNode.SelectNodes1#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.sel_2_1.cpp)]\n [!code-vb[XmlNode.SelectNodes1#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.sel_2_1.vb)]\n [!code-cs[XmlNode.SelectNodes1#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.sel_2_1.cs)]  \n  \n The example uses the file, `booksort.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlNode.SelectNodes Example#2](~/add/codesnippet/XML/m-system.xml.xmlnode.sel_2_2.xml)]"
  syntax:
    content: public System.Xml.XmlNodeList SelectNodes (string xpath, System.Xml.XmlNamespaceManager nsmgr);
    parameters:
    - id: xpath
      type: System.String
      description: "The XPath expression. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041)."
    - id: nsmgr
      type: System.Xml.XmlNamespaceManager
      description: "An <xref:System.Xml.XmlNamespaceManager> to use for resolving namespaces for prefixes in the XPath expression."
    return:
      type: System.Xml.XmlNodeList
      description: "To be added."
  overload: System.Xml.XmlNode.SelectNodes*
  exceptions:
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "The XPath expression contains a prefix which is not defined in the ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.SelectSingleNode(System.String)
  id: SelectSingleNode(System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: SelectSingleNode(String)
  nameWithType: XmlNode.SelectSingleNode(String)
  fullName: System.Xml.XmlNode.SelectSingleNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Selects the first <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref> that matches the XPath expression."
  remarks: "If the XPath expression requires namespace resolution, you must use the `SelectSingleNode` overload which takes an <xref:System.Xml.XmlNamespaceManager> as its argument. The `XmlNamespaceManager` is used to resolve namespaces.      > [!NOTE] >  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still use the `XmlNamespaceManager` and add a prefix and namespace URI to it; otherwise, you will not get a selected node. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).      > [!NOTE] >  A common issue when formulating XPath expressions is how to include a single quote (&quot;) or double quote (&quot;) in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.       For example, suppose you have the following XML:      ```   <bookstore>     <book>       <title>&quot;Emma&quot;</title>     </book>   </bookstore>   ```       The following Visual Basic code selects an element that contains single quotes:      ```   book = root.SelectSingleNode(&quot;descendant::book[title=&quot;&quot;&quot;Emma&quot;&quot;&quot;]&quot;)   ```       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example changes the price of the first Jane Austen book.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectSingleNode Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.sel_0_1.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectSingleNode Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.sel_0_1.cs)]\n [!code-vb[Classic WebData XmlNode.SelectSingleNode Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.sel_0_1.vb)]  \n  \n The example uses the file, `booksort.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlNode.SelectSingleNode Example#2](~/add/codesnippet/XML/m-system.xml.xmlnode.sel_0_2.xml)]"
  syntax:
    content: public System.Xml.XmlNode SelectSingleNode (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "The XPath expression. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041)."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.SelectSingleNode*
  exceptions:
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "The XPath expression contains a prefix."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  id: SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: SelectSingleNode(String,XmlNamespaceManager)
  nameWithType: XmlNode.SelectSingleNode(String,XmlNamespaceManager)
  fullName: System.Xml.XmlNode.SelectSingleNode(String,XmlNamespaceManager)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Selects the first <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref> that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;xref:System.Xml.XmlNamespaceManager&gt;."
  remarks: "XPath expressions can include namespaces. Namespace resolution is supported using the `XmlNamespaceManager`. If the XPath expression includes a prefix, the prefix and namespace URI pair must be added to the `XmlNamespaceManager`.      > [!NOTE] >  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still add a prefix and namespace URI to the `XmlNamespaceManager`; otherwise, you will not get a node selected. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).       For example, if you had the following XML:      ```   <bookstore xmlns=&quot;http://www.lucernepublishing.com&quot;>    <book>      <title>Pride And Prejudice</title>    </book>   </bookstore>   ```       The following C# code selects the first book node:      ```   XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);   nsmgr.AddNamespace(&quot;ab&quot;, &quot;http://www.lucernepublishing.com&quot;);   XmlNode book = doc.SelectSingleNode(&quot;//ab:book&quot;, nsmgr);   ```      > [!NOTE] >  A common issue when formulating XPath expressions is how to include a single quote (&quot;) or double quote (&quot;) in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.       For example, suppose you have the following XML:      ```   <bookstore xmlns=&quot;http://www.lucernepublishing.com&quot;>     <book>       <title>&quot;Emma&quot;</title>     </book>   </bookstore>   ```       The following Visual Basic code selects an element that contains single quotes:      ```   Dim nsmgr As XmlNamespaceManager = New XmlNamespaceManager(doc.NameTable)   nsmgr.AddNamespace(&quot;ab&quot;, &quot;http://www.lucernepublishing.com&quot;)   book = root.SelectSingleNode(&quot;descendant::ab:book[ab:title=&quot;&quot;&quot;Emma&quot;&quot;&quot;]&quot;, nsmgr)   ```       This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example selects the book with the matching ISBN value.  \n  \n [!code-cpp[XmlNode.SelectSingleNode1#1](~/add/codesnippet/CPP/8cab234d-8de2-4705-b32f-_1.cpp)]\n [!code-cs[XmlNode.SelectSingleNode1#1](~/add/codesnippet/CSharp/8cab234d-8de2-4705-b32f-_1.cs)]\n [!code-vb[XmlNode.SelectSingleNode1#1](~/add/codesnippet/VisualBasic/8cab234d-8de2-4705-b32f-_1.vb)]  \n  \n The example uses the file, `booksort.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlNode.SelectNodes Example#2](~/add/codesnippet/XML/8cab234d-8de2-4705-b32f-_2.xml)]"
  syntax:
    content: public System.Xml.XmlNode SelectSingleNode (string xpath, System.Xml.XmlNamespaceManager nsmgr);
    parameters:
    - id: xpath
      type: System.String
      description: "The XPath expression. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041)."
    - id: nsmgr
      type: System.Xml.XmlNamespaceManager
      description: "An <xref:System.Xml.XmlNamespaceManager> to use for resolving namespaces for prefixes in the XPath expression."
    return:
      type: System.Xml.XmlNode
      description: "To be added."
  overload: System.Xml.XmlNode.SelectSingleNode*
  exceptions:
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "The XPath expression contains a prefix which is not defined in the ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Supports(System.String,System.String)
  id: Supports(System.String,System.String)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Supports(String,String)
  nameWithType: XmlNode.Supports(String,String)
  fullName: System.Xml.XmlNode.Supports(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Tests if the DOM implementation implements a specific feature."
  syntax:
    content: public virtual bool Supports (string feature, string version);
    parameters:
    - id: feature
      type: System.String
      description: "The package name of the feature to test. This name is not case-sensitive."
    - id: version
      type: System.String
      description: "The version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlNode.Supports*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: XmlNode.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "For a description of this member, see &lt;xref:System.Xml.XmlNode.GetEnumerator%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlNode> instance is cast to an <xref:System.Collections.IEnumerable> interface."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: XmlNode.System.ICloneable.Clone()
  fullName: System.Xml.XmlNode.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "For a description of this member, see &lt;xref:System.Xml.XmlNode.Clone%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlNode> instance is cast to an <xref:System.ICloneable> interface."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "To be added."
  overload: System.Xml.XmlNode.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.Value
  id: Value
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: Value
  nameWithType: XmlNode.Value
  fullName: System.Xml.XmlNode.Value
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the value of the node."
  remarks: ''
  example:
  - "The following example adds a new attribute to the XML document and sets the Value property of the new attribute.  \n  \n [!code-cpp[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/CPP/p-system.xml.xmlnode.value_1.cpp)]\n [!code-vb[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlnode.value_1.vb)]\n [!code-cs[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](~/add/codesnippet/CSharp/p-system.xml.xmlnode.value_1.cs)]"
  syntax:
    content: public virtual string Value { get; set; }
    return:
      type: System.String
      description: 'The value returned depends on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node:'
  overload: System.Xml.XmlNode.Value*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Setting the value of a node that is read-only."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Setting the value of a node that is not supposed to have a value (for example, an Element node)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlNode.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Saves all the child nodes of the node to the specified &lt;xref:System.Xml.XmlWriter&gt;, when overridden in a derived class."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <xref:System.Xml.XmlNode.InnerXml%2A> property."
  example:
  - "The following example displays the contents of the root node to the console.  \n  \n [!code-cpp[Classic WebData XmlNode.WriteContentTo Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.wri_0_1.cpp)]\n [!code-cs[Classic WebData XmlNode.WriteContentTo Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.wri_0_1.cs)]\n [!code-vb[Classic WebData XmlNode.WriteContentTo Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.wri_0_1.vb)]"
  syntax:
    content: public abstract void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "The  to which you want to save."
  overload: System.Xml.XmlNode.WriteContentTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlNode.WriteTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Saves the current node to the specified &lt;xref:System.Xml.XmlWriter&gt;, when overridden in a derived class."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <xref:System.Xml.XmlNode.OuterXml%2A> property."
  example:
  - "The following example displays the root node to the console.  \n  \n [!code-cpp[Classic WebData XmlNode.WriteTo Example#1](~/add/codesnippet/CPP/m-system.xml.xmlnode.wri_1_1.cpp)]\n [!code-cs[Classic WebData XmlNode.WriteTo Example#1](~/add/codesnippet/CSharp/m-system.xml.xmlnode.wri_1_1.cs)]\n [!code-vb[Classic WebData XmlNode.WriteTo Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmlnode.wri_1_1.vb)]"
  syntax:
    content: public abstract void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "The  to which you want to save."
  overload: System.Xml.XmlNode.WriteTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: AppendChild(XmlNode)
  nameWithType: XmlNode.AppendChild(XmlNode)
  fullName: System.Xml.XmlNode.AppendChild(XmlNode)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml.XmlNode.Attributes
  parent: System.Xml.XmlNode
  isExternal: false
  name: Attributes
  nameWithType: XmlNode.Attributes
  fullName: System.Xml.XmlNode.Attributes
- uid: System.Xml.XmlAttributeCollection
  parent: System.Xml
  isExternal: false
  name: XmlAttributeCollection
  nameWithType: XmlAttributeCollection
  fullName: System.Xml.XmlAttributeCollection
- uid: System.Xml.XmlNode.BaseURI
  parent: System.Xml.XmlNode
  isExternal: false
  name: BaseURI
  nameWithType: XmlNode.BaseURI
  fullName: System.Xml.XmlNode.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlNode.ChildNodes
  parent: System.Xml.XmlNode
  isExternal: false
  name: ChildNodes
  nameWithType: XmlNode.ChildNodes
  fullName: System.Xml.XmlNode.ChildNodes
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlNode.Clone
  parent: System.Xml.XmlNode
  isExternal: false
  name: Clone()
  nameWithType: XmlNode.Clone()
  fullName: System.Xml.XmlNode.Clone()
- uid: System.Xml.XmlNode.CloneNode(System.Boolean)
  parent: System.Xml.XmlNode
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlNode.CloneNode(Boolean)
  fullName: System.Xml.XmlNode.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlNode.CreateNavigator
  parent: System.Xml.XmlNode
  isExternal: false
  name: CreateNavigator()
  nameWithType: XmlNode.CreateNavigator()
  fullName: System.Xml.XmlNode.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlNode.FirstChild
  parent: System.Xml.XmlNode
  isExternal: false
  name: FirstChild
  nameWithType: XmlNode.FirstChild
  fullName: System.Xml.XmlNode.FirstChild
- uid: System.Xml.XmlNode.GetEnumerator
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetEnumerator()
  nameWithType: XmlNode.GetEnumerator()
  fullName: System.Xml.XmlNode.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetNamespaceOfPrefix(String)
  nameWithType: XmlNode.GetNamespaceOfPrefix(String)
  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(String)
- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetPrefixOfNamespace(String)
  nameWithType: XmlNode.GetPrefixOfNamespace(String)
  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(String)
- uid: System.Xml.XmlNode.HasChildNodes
  parent: System.Xml.XmlNode
  isExternal: false
  name: HasChildNodes
  nameWithType: XmlNode.HasChildNodes
  fullName: System.Xml.XmlNode.HasChildNodes
- uid: System.Xml.XmlNode.InnerText
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerText
  nameWithType: XmlNode.InnerText
  fullName: System.Xml.XmlNode.InnerText
- uid: System.Xml.XmlNode.InnerXml
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerXml
  nameWithType: XmlNode.InnerXml
  fullName: System.Xml.XmlNode.InnerXml
- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertAfter(XmlNode,XmlNode)
  nameWithType: XmlNode.InsertAfter(XmlNode,XmlNode)
  fullName: System.Xml.XmlNode.InsertAfter(XmlNode,XmlNode)
- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertBefore(XmlNode,XmlNode)
  nameWithType: XmlNode.InsertBefore(XmlNode,XmlNode)
  fullName: System.Xml.XmlNode.InsertBefore(XmlNode,XmlNode)
- uid: System.Xml.XmlNode.IsReadOnly
  parent: System.Xml.XmlNode
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlNode.IsReadOnly
  fullName: System.Xml.XmlNode.IsReadOnly
- uid: System.Xml.XmlNode.Item(System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: Item(String)
  nameWithType: XmlNode.Item(String)
  fullName: System.Xml.XmlNode.Item(String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlNode.Item(System.String,System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: Item(String,String)
  nameWithType: XmlNode.Item(String,String)
  fullName: System.Xml.XmlNode.Item(String,String)
- uid: System.Xml.XmlNode.LastChild
  parent: System.Xml.XmlNode
  isExternal: false
  name: LastChild
  nameWithType: XmlNode.LastChild
  fullName: System.Xml.XmlNode.LastChild
- uid: System.Xml.XmlNode.LocalName
  parent: System.Xml.XmlNode
  isExternal: false
  name: LocalName
  nameWithType: XmlNode.LocalName
  fullName: System.Xml.XmlNode.LocalName
- uid: System.Xml.XmlNode.Name
  parent: System.Xml.XmlNode
  isExternal: false
  name: Name
  nameWithType: XmlNode.Name
  fullName: System.Xml.XmlNode.Name
- uid: System.Xml.XmlNode.NamespaceURI
  parent: System.Xml.XmlNode
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlNode.NamespaceURI
  fullName: System.Xml.XmlNode.NamespaceURI
- uid: System.Xml.XmlNode.NextSibling
  parent: System.Xml.XmlNode
  isExternal: false
  name: NextSibling
  nameWithType: XmlNode.NextSibling
  fullName: System.Xml.XmlNode.NextSibling
- uid: System.Xml.XmlNode.NodeType
  parent: System.Xml.XmlNode
  isExternal: false
  name: NodeType
  nameWithType: XmlNode.NodeType
  fullName: System.Xml.XmlNode.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlNode.Normalize
  parent: System.Xml.XmlNode
  isExternal: false
  name: Normalize()
  nameWithType: XmlNode.Normalize()
  fullName: System.Xml.XmlNode.Normalize()
- uid: System.Xml.XmlNode.OuterXml
  parent: System.Xml.XmlNode
  isExternal: false
  name: OuterXml
  nameWithType: XmlNode.OuterXml
  fullName: System.Xml.XmlNode.OuterXml
- uid: System.Xml.XmlNode.OwnerDocument
  parent: System.Xml.XmlNode
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlNode.OwnerDocument
  fullName: System.Xml.XmlNode.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlNode.ParentNode
  parent: System.Xml.XmlNode
  isExternal: false
  name: ParentNode
  nameWithType: XmlNode.ParentNode
  fullName: System.Xml.XmlNode.ParentNode
- uid: System.Xml.XmlNode.Prefix
  parent: System.Xml.XmlNode
  isExternal: false
  name: Prefix
  nameWithType: XmlNode.Prefix
  fullName: System.Xml.XmlNode.Prefix
- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: PrependChild(XmlNode)
  nameWithType: XmlNode.PrependChild(XmlNode)
  fullName: System.Xml.XmlNode.PrependChild(XmlNode)
- uid: System.Xml.XmlNode.PreviousSibling
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousSibling
  nameWithType: XmlNode.PreviousSibling
  fullName: System.Xml.XmlNode.PreviousSibling
- uid: System.Xml.XmlNode.PreviousText
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousText
  nameWithType: XmlNode.PreviousText
  fullName: System.Xml.XmlNode.PreviousText
- uid: System.Xml.XmlNode.RemoveAll
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveAll()
  nameWithType: XmlNode.RemoveAll()
  fullName: System.Xml.XmlNode.RemoveAll()
- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveChild(XmlNode)
  nameWithType: XmlNode.RemoveChild(XmlNode)
  fullName: System.Xml.XmlNode.RemoveChild(XmlNode)
- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: ReplaceChild(XmlNode,XmlNode)
  nameWithType: XmlNode.ReplaceChild(XmlNode,XmlNode)
  fullName: System.Xml.XmlNode.ReplaceChild(XmlNode,XmlNode)
- uid: System.Xml.XmlNode.SchemaInfo
  parent: System.Xml.XmlNode
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlNode.SchemaInfo
  fullName: System.Xml.XmlNode.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlNode.SelectNodes(System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: SelectNodes(String)
  nameWithType: XmlNode.SelectNodes(String)
  fullName: System.Xml.XmlNode.SelectNodes(String)
- uid: System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  parent: System.Xml.XmlNode
  isExternal: false
  name: SelectNodes(String,XmlNamespaceManager)
  nameWithType: XmlNode.SelectNodes(String,XmlNamespaceManager)
  fullName: System.Xml.XmlNode.SelectNodes(String,XmlNamespaceManager)
- uid: System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: System.Xml.XmlNode.SelectSingleNode(System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: SelectSingleNode(String)
  nameWithType: XmlNode.SelectSingleNode(String)
  fullName: System.Xml.XmlNode.SelectSingleNode(String)
- uid: System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  parent: System.Xml.XmlNode
  isExternal: false
  name: SelectSingleNode(String,XmlNamespaceManager)
  nameWithType: XmlNode.SelectSingleNode(String,XmlNamespaceManager)
  fullName: System.Xml.XmlNode.SelectSingleNode(String,XmlNamespaceManager)
- uid: System.Xml.XmlNode.Supports(System.String,System.String)
  parent: System.Xml.XmlNode
  isExternal: false
  name: Supports(String,String)
  nameWithType: XmlNode.Supports(String,String)
  fullName: System.Xml.XmlNode.Supports(String,String)
- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  parent: System.Xml.XmlNode
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: XmlNode.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Xml.XmlNode.System#ICloneable#Clone
  parent: System.Xml.XmlNode
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: XmlNode.System.ICloneable.Clone()
  fullName: System.Xml.XmlNode.System.ICloneable.Clone()
- uid: System.Xml.XmlNode.Value
  parent: System.Xml.XmlNode
  isExternal: false
  name: Value
  nameWithType: XmlNode.Value
  fullName: System.Xml.XmlNode.Value
- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlNode.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlNode.WriteTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteTo(XmlWriter)
- uid: System.Xml.XmlNode.AppendChild*
  parent: System.Xml.XmlNode
  isExternal: false
  name: AppendChild
  nameWithType: XmlNode.AppendChild
- uid: System.Xml.XmlNode.Attributes*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Attributes
  nameWithType: XmlNode.Attributes
- uid: System.Xml.XmlNode.BaseURI*
  parent: System.Xml.XmlNode
  isExternal: false
  name: BaseURI
  nameWithType: XmlNode.BaseURI
- uid: System.Xml.XmlNode.ChildNodes*
  parent: System.Xml.XmlNode
  isExternal: false
  name: ChildNodes
  nameWithType: XmlNode.ChildNodes
- uid: System.Xml.XmlNode.Clone*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Clone
  nameWithType: XmlNode.Clone
- uid: System.Xml.XmlNode.CloneNode*
  parent: System.Xml.XmlNode
  isExternal: false
  name: CloneNode
  nameWithType: XmlNode.CloneNode
- uid: System.Xml.XmlNode.CreateNavigator*
  parent: System.Xml.XmlNode
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlNode.CreateNavigator
- uid: System.Xml.XmlNode.FirstChild*
  parent: System.Xml.XmlNode
  isExternal: false
  name: FirstChild
  nameWithType: XmlNode.FirstChild
- uid: System.Xml.XmlNode.GetEnumerator*
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetEnumerator
  nameWithType: XmlNode.GetEnumerator
- uid: System.Xml.XmlNode.GetNamespaceOfPrefix*
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetNamespaceOfPrefix
  nameWithType: XmlNode.GetNamespaceOfPrefix
- uid: System.Xml.XmlNode.GetPrefixOfNamespace*
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetPrefixOfNamespace
  nameWithType: XmlNode.GetPrefixOfNamespace
- uid: System.Xml.XmlNode.HasChildNodes*
  parent: System.Xml.XmlNode
  isExternal: false
  name: HasChildNodes
  nameWithType: XmlNode.HasChildNodes
- uid: System.Xml.XmlNode.InnerText*
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerText
  nameWithType: XmlNode.InnerText
- uid: System.Xml.XmlNode.InnerXml*
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerXml
  nameWithType: XmlNode.InnerXml
- uid: System.Xml.XmlNode.InsertAfter*
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertAfter
  nameWithType: XmlNode.InsertAfter
- uid: System.Xml.XmlNode.InsertBefore*
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertBefore
  nameWithType: XmlNode.InsertBefore
- uid: System.Xml.XmlNode.IsReadOnly*
  parent: System.Xml.XmlNode
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlNode.IsReadOnly
- uid: System.Xml.XmlNode.Item*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Item
  nameWithType: XmlNode.Item
- uid: System.Xml.XmlNode.LastChild*
  parent: System.Xml.XmlNode
  isExternal: false
  name: LastChild
  nameWithType: XmlNode.LastChild
- uid: System.Xml.XmlNode.LocalName*
  parent: System.Xml.XmlNode
  isExternal: false
  name: LocalName
  nameWithType: XmlNode.LocalName
- uid: System.Xml.XmlNode.Name*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Name
  nameWithType: XmlNode.Name
- uid: System.Xml.XmlNode.NamespaceURI*
  parent: System.Xml.XmlNode
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlNode.NamespaceURI
- uid: System.Xml.XmlNode.NextSibling*
  parent: System.Xml.XmlNode
  isExternal: false
  name: NextSibling
  nameWithType: XmlNode.NextSibling
- uid: System.Xml.XmlNode.NodeType*
  parent: System.Xml.XmlNode
  isExternal: false
  name: NodeType
  nameWithType: XmlNode.NodeType
- uid: System.Xml.XmlNode.Normalize*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Normalize
  nameWithType: XmlNode.Normalize
- uid: System.Xml.XmlNode.OuterXml*
  parent: System.Xml.XmlNode
  isExternal: false
  name: OuterXml
  nameWithType: XmlNode.OuterXml
- uid: System.Xml.XmlNode.OwnerDocument*
  parent: System.Xml.XmlNode
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlNode.OwnerDocument
- uid: System.Xml.XmlNode.ParentNode*
  parent: System.Xml.XmlNode
  isExternal: false
  name: ParentNode
  nameWithType: XmlNode.ParentNode
- uid: System.Xml.XmlNode.Prefix*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Prefix
  nameWithType: XmlNode.Prefix
- uid: System.Xml.XmlNode.PrependChild*
  parent: System.Xml.XmlNode
  isExternal: false
  name: PrependChild
  nameWithType: XmlNode.PrependChild
- uid: System.Xml.XmlNode.PreviousSibling*
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousSibling
  nameWithType: XmlNode.PreviousSibling
- uid: System.Xml.XmlNode.PreviousText*
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousText
  nameWithType: XmlNode.PreviousText
- uid: System.Xml.XmlNode.RemoveAll*
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveAll
  nameWithType: XmlNode.RemoveAll
- uid: System.Xml.XmlNode.RemoveChild*
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveChild
  nameWithType: XmlNode.RemoveChild
- uid: System.Xml.XmlNode.ReplaceChild*
  parent: System.Xml.XmlNode
  isExternal: false
  name: ReplaceChild
  nameWithType: XmlNode.ReplaceChild
- uid: System.Xml.XmlNode.SchemaInfo*
  parent: System.Xml.XmlNode
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlNode.SchemaInfo
- uid: System.Xml.XmlNode.SelectNodes*
  parent: System.Xml.XmlNode
  isExternal: false
  name: SelectNodes
  nameWithType: XmlNode.SelectNodes
- uid: System.Xml.XmlNode.SelectSingleNode*
  parent: System.Xml.XmlNode
  isExternal: false
  name: SelectSingleNode
  nameWithType: XmlNode.SelectSingleNode
- uid: System.Xml.XmlNode.Supports*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Supports
  nameWithType: XmlNode.Supports
- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Xml.XmlNode
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: XmlNode.System.Collections.IEnumerable.GetEnumerator
- uid: System.Xml.XmlNode.System#ICloneable#Clone*
  parent: System.Xml.XmlNode
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: XmlNode.System.ICloneable.Clone
- uid: System.Xml.XmlNode.Value*
  parent: System.Xml.XmlNode
  isExternal: false
  name: Value
  nameWithType: XmlNode.Value
- uid: System.Xml.XmlNode.WriteContentTo*
  parent: System.Xml.XmlNode
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlNode.WriteContentTo
- uid: System.Xml.XmlNode.WriteTo*
  parent: System.Xml.XmlNode
  isExternal: false
  name: WriteTo
  nameWithType: XmlNode.WriteTo
