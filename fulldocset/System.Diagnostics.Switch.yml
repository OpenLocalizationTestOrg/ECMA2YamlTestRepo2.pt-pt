### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Switch
  id: Switch
  children:
  - System.Diagnostics.Switch.#ctor(System.String,System.String)
  - System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.Switch.Attributes
  - System.Diagnostics.Switch.Description
  - System.Diagnostics.Switch.DisplayName
  - System.Diagnostics.Switch.GetSupportedAttributes
  - System.Diagnostics.Switch.OnSwitchSettingChanged
  - System.Diagnostics.Switch.OnValueChanged
  - System.Diagnostics.Switch.SwitchSetting
  - System.Diagnostics.Switch.Value
  langs:
  - csharp
  name: Switch
  nameWithType: Switch
  fullName: System.Diagnostics.Switch
  type: Class
  summary: "Provides an abstract base class to create new debugging and tracing switches."
  remarks: "A switch provides an efficient mechanism for controlling tracing and debugging output at run time using external settings. The Switch class implements default behavior for switches, allowing you to change the switch level at run time.       This class is the base class for the <xref:System.Diagnostics.BooleanSwitch>, <xref:System.Diagnostics.SourceSwitch> and the <xref:System.Diagnostics.TraceSwitch> classes. These switches meet most debugging and tracing needs. For more information about trace switches, see [Trace Switches](~/add/includes/ajax-current-ext-md.md).       You must enable tracing or debugging to use a switch. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.      -   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.      -   To enable tracing using in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.       To set the level of your switch, edit the configuration file that corresponds to the name of your application. Within this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;true&quot; />       </switches>     </system.diagnostics>   </configuration>   ```       This example configuration section defines a <xref:System.Diagnostics.BooleanSwitch> with the <xref:System.Diagnostics.Switch.DisplayName%2A> property set to `mySwitch` and the <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> value set to `true`. Within your application, you can use the configured switch value by creating a <xref:System.Diagnostics.BooleanSwitch> with the same name, as shown in the following code example.       [!code-cpp[Classic Switch Example#4](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_1.cpp)]  [!code-cs[Classic Switch Example#4](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_1.cs)]"
  example:
  - "The following example shows how to define a new Switch class with four levels of tracing that can be used to trace a call stack. You can use the switch to instrument your application to log each time the method is entered or exited.  \n  \n The first example creates the enumeration used to set the level of the switch.  \n  \n [!code-cpp[Classic Switch Example#1](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_2.cpp)]\n [!code-cs[Classic Switch Example#1](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_2.cs)]\n [!code-vb[Classic Switch Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.swi_0_2.vb)]  \n  \n The following example creates the new switch. The code implements a `Level` property to set the value of the new switch. `Level` calls the protected property <xref:System.Diagnostics.Switch.SwitchSetting%2A> that assigns the value to the new switch. This example also implements two assessor properties to get the assigned value of the switch.  \n  \n [!code-cpp[Classic Switch Example#2](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_3.cpp)]\n [!code-cs[Classic Switch Example#2](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_3.cs)]\n [!code-vb[Classic Switch Example#2](~/add/codesnippet/visualbasic/t-system.diagnostics.swi_0_3.vb)]  \n  \n The following example creates a new switch in `Main`. It creates a new switch and assigns it a value. Then, depending on the switch settings, it outputs debugging messages for entering and leaving the method.  \n  \n [!code-cpp[Classic Switch Example#3](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_4.cpp)]\n [!code-cs[Classic Switch Example#3](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_4.cs)]\n [!code-vb[Classic Switch Example#3](~/add/codesnippet/visualbasic/t-system.diagnostics.swi_0_4.vb)]"
  syntax:
    content: public abstract class Switch
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Switch(String,String)
  nameWithType: Switch.Switch(String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.Switch&quot;></xref> class."
  remarks: "When you create a new <xref:System.Diagnostics.Switch> object, the value of the `displayName` parameter is used to find initial switch settings. The default value is an empty string (&quot;&quot;).       Within the XML configuration file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. Dynamic changes to the configuration file are not detected while the application is executing. You must stop and restart an application before changes to the configuration file take effect. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;10&quot; />         <add name=&quot;myNewSwitch&quot; value=&quot;20&quot; />         <remove name=&quot;mySwitch&quot; />         <clear/>       </switches>     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: protected Switch (string displayName, string description);
    parameters:
    - id: displayName
      type: System.String
      description: "The name of the switch."
    - id: description
      type: System.String
      description: "The description for the switch."
  overload: System.Diagnostics.Switch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Switch(String,String,String)
  nameWithType: Switch.Switch(String,String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.Switch&quot;></xref> class, specifying the display name, description, and default value for the switch."
  remarks: "The `displayName` parameter is used to set the value of the <xref:System.Diagnostics.Switch.DisplayName%2A> property, and the `description` parameter is use to set the value of the <xref:System.Diagnostics.Switch.Description%2A> property. The `defaultSwitchValue` parameter is the value for the switch if the <xref:System.Diagnostics.Switch.Value%2A> property is not set by code or by the configuration file attribute. See the <xref:System.Diagnostics.Switch.%23ctor%28System.String%2CSystem.String%29> overload for additional information."
  syntax:
    content: protected Switch (string displayName, string description, string defaultSwitchValue);
    parameters:
    - id: displayName
      type: System.String
      description: "The name of the switch."
    - id: description
      type: System.String
      description: "The description of the switch."
    - id: defaultSwitchValue
      type: System.String
      description: "The default value for the switch."
  overload: System.Diagnostics.Switch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.Attributes
  id: Attributes
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Attributes
  nameWithType: Switch.Attributes
  fullName: System.Diagnostics.Switch.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the custom switch attributes defined in the application configuration file."
  remarks: "The Attributes property identifies the custom attributes referenced in the application&quot;s configuration file. Unreferenced custom attributes are not enumerated. Classes that inherit from the <xref:System.Diagnostics.Switch> class can add custom attributes by overriding the <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A> method and returning a string array of custom attribute names."
  example:
  - "The following code sample shows how to display the unrecognized attributes for a custom switch.  \n  \n [!code-cs[System.Diagnostics.TraceSource#15](~/add/codesnippet/csharp/p-system.diagnostics.swi_1_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource#15](~/add/codesnippet/visualbasic/p-system.diagnostics.swi_1_1.vb)]"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "A <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref> containing the case-insensitive custom attributes for the trace switch."
  overload: System.Diagnostics.Switch.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.Description
  id: Description
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Description
  nameWithType: Switch.Description
  fullName: System.Diagnostics.Switch.Description
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets a description of the switch."
  remarks: "This property should indicate the function of the switch; for example, &quot;Enables tracing for a directory watcher component.&quot; The value is set by the `descriptor` parameter in the <xref:System.Diagnostics.Switch.%23ctor%2A> constructor."
  syntax:
    content: public string Description { get; }
    return:
      type: System.String
      description: "The description of the switch. The default value is an empty string (&quot;&quot;)."
  overload: System.Diagnostics.Switch.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.DisplayName
  id: DisplayName
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: DisplayName
  nameWithType: Switch.DisplayName
  fullName: System.Diagnostics.Switch.DisplayName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets a name used to identify the switch."
  remarks: 'When you create a new <xref:System.Diagnostics.Switch> object, the DisplayName finds initial switch settings. For more information, see the <xref:System.Diagnostics.Switch.%23ctor%2A> constructor and [How to: Create, Initialize and Configure Trace Switches](~/add/includes/ajax-current-ext-md.md) in the Visual Studio documentation.'
  example:
  - "The following code example displays the display name for the switch in use by a trace source.  This code example is part of a larger example that can be found in the <xref:System.Diagnostics.TraceSource> class summary.  \n  \n [!code-cs[System.Diagnostics.TraceSource#10](~/add/codesnippet/csharp/p-system.diagnostics.swi_0_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource#10](~/add/codesnippet/visualbasic/p-system.diagnostics.swi_0_1.vb)]"
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "The name used to identify the switch. The default value is an empty string (&quot;&quot;)."
  overload: System.Diagnostics.Switch.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: Switch.GetSupportedAttributes()
  fullName: System.Diagnostics.Switch.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the custom attributes supported by the switch."
  remarks: "The default implementation for the GetSupportedAttributes method returns `null`. If a switch is added in a configuration file and custom attributes are specified that are not included in the string array returned by GetSupportedAttributes, a <xref:System.Configuration.ConfigurationException> is thrown when the switch is loaded."
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom switch.  \n  \n [!code-cs[System.Diagnostics.TraceSource#34](~/add/codesnippet/csharp/m-system.diagnostics.swi_1_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource#34](~/add/codesnippet/visualbasic/m-system.diagnostics.swi_1_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "A string array that contains the names of the custom attributes supported by the switch, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if there no custom attributes are supported."
  overload: System.Diagnostics.Switch.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged
  id: OnSwitchSettingChanged
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: OnSwitchSettingChanged()
  nameWithType: Switch.OnSwitchSettingChanged()
  fullName: System.Diagnostics.Switch.OnSwitchSettingChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Invoked when the <xref:System.Diagnostics.Switch.SwitchSetting*> property is changed."
  remarks: "OnSwitchSettingChanged is invoked the first time a switch reads the <xref:System.Diagnostics.Switch.SwitchSetting%2A> value from the configuration file and is invoked again each time the switch&quot;s value is changed."
  syntax:
    content: protected virtual void OnSwitchSettingChanged ();
    parameters: []
  overload: System.Diagnostics.Switch.OnSwitchSettingChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.OnValueChanged
  id: OnValueChanged
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: OnValueChanged()
  nameWithType: Switch.OnValueChanged()
  fullName: System.Diagnostics.Switch.OnValueChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Invoked when the <xref:System.Diagnostics.Switch.Value*> property is changed."
  remarks: "The default implementation parses the new value of the <xref:System.Diagnostics.Switch.Value%2A> property to an integer value which it uses to set the <xref:System.Diagnostics.Switch.SwitchSetting%2A> property."
  syntax:
    content: protected virtual void OnValueChanged ();
    parameters: []
  overload: System.Diagnostics.Switch.OnValueChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.SwitchSetting
  id: SwitchSetting
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: SwitchSetting
  nameWithType: Switch.SwitchSetting
  fullName: System.Diagnostics.Switch.SwitchSetting
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the current setting for this switch."
  syntax:
    content: protected int SwitchSetting { get; set; }
    return:
      type: System.Int32
      description: "The current setting for this switch. The default is zero."
  overload: System.Diagnostics.Switch.SwitchSetting*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.Value
  id: Value
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Value
  nameWithType: Switch.Value
  fullName: System.Diagnostics.Switch.Value
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the value of the switch."
  remarks: "The <xref:System.Diagnostics.Switch.OnValueChanged%2A> method is called when the value of the Value property is changed. The <xref:System.Diagnostics.Switch.OnValueChanged%2A> method parses the value of this property and converts it to an integer value, which is then used to set the <xref:System.Diagnostics.Switch.SwitchSetting%2A> property."
  syntax:
    content: protected string Value { get; set; }
    return:
      type: System.String
      description: "A string representing the value of the switch."
  overload: System.Diagnostics.Switch.Value*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The value does not consist solely of an optional negative sign followed by a sequence of digits ranging from 0 to 9.       -or-       The value represents a number less than <xref:System.Int32.MinValue> or greater than <xref:System.Int32.MaxValue>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String)
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Switch(String,String)
  nameWithType: Switch.Switch(String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Switch(String,String,String)
  nameWithType: Switch.Switch(String,String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String,String)
- uid: System.Diagnostics.Switch.Attributes
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Attributes
  nameWithType: Switch.Attributes
  fullName: System.Diagnostics.Switch.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.Switch.Description
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Description
  nameWithType: Switch.Description
  fullName: System.Diagnostics.Switch.Description
- uid: System.Diagnostics.Switch.DisplayName
  parent: System.Diagnostics.Switch
  isExternal: false
  name: DisplayName
  nameWithType: Switch.DisplayName
  fullName: System.Diagnostics.Switch.DisplayName
- uid: System.Diagnostics.Switch.GetSupportedAttributes
  parent: System.Diagnostics.Switch
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: Switch.GetSupportedAttributes()
  fullName: System.Diagnostics.Switch.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnSwitchSettingChanged()
  nameWithType: Switch.OnSwitchSettingChanged()
  fullName: System.Diagnostics.Switch.OnSwitchSettingChanged()
- uid: System.Diagnostics.Switch.OnValueChanged
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnValueChanged()
  nameWithType: Switch.OnValueChanged()
  fullName: System.Diagnostics.Switch.OnValueChanged()
- uid: System.Diagnostics.Switch.SwitchSetting
  parent: System.Diagnostics.Switch
  isExternal: false
  name: SwitchSetting
  nameWithType: Switch.SwitchSetting
  fullName: System.Diagnostics.Switch.SwitchSetting
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Switch.Value
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Value
  nameWithType: Switch.Value
  fullName: System.Diagnostics.Switch.Value
- uid: System.Diagnostics.Switch.#ctor*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Switch
  nameWithType: Switch.Switch
- uid: System.Diagnostics.Switch.Attributes*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Attributes
  nameWithType: Switch.Attributes
- uid: System.Diagnostics.Switch.Description*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Description
  nameWithType: Switch.Description
- uid: System.Diagnostics.Switch.DisplayName*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: DisplayName
  nameWithType: Switch.DisplayName
- uid: System.Diagnostics.Switch.GetSupportedAttributes*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: Switch.GetSupportedAttributes
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnSwitchSettingChanged
  nameWithType: Switch.OnSwitchSettingChanged
- uid: System.Diagnostics.Switch.OnValueChanged*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnValueChanged
  nameWithType: Switch.OnValueChanged
- uid: System.Diagnostics.Switch.SwitchSetting*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: SwitchSetting
  nameWithType: Switch.SwitchSetting
- uid: System.Diagnostics.Switch.Value*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Value
  nameWithType: Switch.Value
