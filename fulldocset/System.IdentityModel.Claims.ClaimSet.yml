### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Claims.ClaimSet
  id: ClaimSet
  children:
  - System.IdentityModel.Claims.ClaimSet.#ctor
  - System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)
  - System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  - System.IdentityModel.Claims.ClaimSet.Count
  - System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)
  - System.IdentityModel.Claims.ClaimSet.GetEnumerator
  - System.IdentityModel.Claims.ClaimSet.Issuer
  - System.IdentityModel.Claims.ClaimSet.Item(System.Int32)
  - System.IdentityModel.Claims.ClaimSet.System
  - System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator
  - System.IdentityModel.Claims.ClaimSet.Windows
  langs:
  - csharp
  name: ClaimSet
  nameWithType: ClaimSet
  fullName: System.IdentityModel.Claims.ClaimSet
  type: Class
  summary: "Represents the collection of claims that are associated with an entity."
  remarks: "After the ClaimSet class has been created, it cannot be changed.       Examining the content of a ClaimSet for particular types of claims is a common task when using claim-based authorization. To examine a ClaimSet for the presence of particular claims, use the <xref:System.IdentityModel.Claims.ClaimSet.FindClaims%2A> method. The method provides better performance than iterating directly over the ClaimSet."
  example:
  - >-
    [!code-cs[c_ClaimSet#1](~/add/codesnippet/csharp/t-system.identitymodel.c_1_1.cs)]
     [!code-vb[c_ClaimSet#1](~/add/codesnippet/visualbasic/t-system.identitymodel.c_1_1.vb)]
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract(Namespace="http://schemas.xmlsoap.org/ws/2005/05/identity")]

      public abstract class ClaimSet : System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim>
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: ClaimSet()
  nameWithType: ClaimSet.ClaimSet()
  fullName: System.IdentityModel.Claims.ClaimSet.ClaimSet()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> class."
  remarks: "Reserved for future use."
  syntax:
    content: protected ClaimSet ();
    parameters: []
  overload: System.IdentityModel.Claims.ClaimSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)
  id: ContainsClaim(System.IdentityModel.Claims.Claim)
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: ContainsClaim(Claim)
  nameWithType: ClaimSet.ContainsClaim(Claim)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "Determines whether the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> contains the specified <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>."
  remarks: "To find the specified claim, call the <xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29> method."
  syntax:
    content: public virtual bool ContainsClaim (System.IdentityModel.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.IdentityModel.Claims.Claim
      description: "The <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> for which to search."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified claim is contained in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Claims.ClaimSet.ContainsClaim*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  id: ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: ContainsClaim(Claim,IEqualityComparer<Claim>)
  nameWithType: ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "Determines whether the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> contains the specified <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>, by using the specified &lt;xref:System.Collections.Generic.IEqualityComparer%601&gt; object."
  remarks: "To find the specified claim, call the <xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29> method."
  syntax:
    content: public virtual bool ContainsClaim (System.IdentityModel.Claims.Claim claim, System.Collections.Generic.IEqualityComparer<System.IdentityModel.Claims.Claim> comparer);
    parameters:
    - id: claim
      type: System.IdentityModel.Claims.Claim
      description: "The <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> for which to search."
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim}
      description: "The &lt;xref:System.Collections.Generic.IEqualityComparer%601&gt; object used to make the comparison."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified claim is contained in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>; otherwise <xref uid=&quot;langword_csharp_false.&quot; name=&quot;false.&quot; href=&quot;&quot;></xref>"
  overload: System.IdentityModel.Claims.ClaimSet.ContainsClaim*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Count
  id: Count
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Count
  nameWithType: ClaimSet.Count
  fullName: System.IdentityModel.Claims.ClaimSet.Count
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "When overridden in a derived class, gets the number of claims in this claim set."
  remarks: "To get an individual claim, use the <xref:System.IdentityModel.Claims.ClaimSet.Item%2A> property."
  syntax:
    content: public abstract int Count { get; }
    return:
      type: System.Int32
      description: "The number of claims in this <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  overload: System.IdentityModel.Claims.ClaimSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)
  id: FindClaims(System.String,System.String)
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: FindClaims(String,String)
  nameWithType: ClaimSet.FindClaims(String,String)
  fullName: System.IdentityModel.Claims.ClaimSet.FindClaims(String,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "When overridden in a derived class, searches for a <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> object that matches the specified claim type and rights in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  remarks: "To determine if this <xref:System.IdentityModel.Claims.ClaimSet> contains the claim without returning the claim, call the <xref:System.IdentityModel.Claims.ClaimSet.ContainsClaim%2A> method."
  example:
  - >-
    [!code-cs[c_ClaimSet#2](~/add/codesnippet/csharp/m-system.identitymodel.c_1.cs)]
     [!code-vb[c_ClaimSet#2](~/add/codesnippet/visualbasic/m-system.identitymodel.c_1.vb)]
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim> FindClaims (string claimType, string right);
    parameters:
    - id: claimType
      type: System.String
      description: "The uniform resource identifier (URI) of a claim type. Several claim types are available as static properties of the <xref href=&quot;System.IdentityModel.Claims.ClaimTypes&quot;></xref> class."
    - id: right
      type: System.String
      description: "The URI of the right associated with the new claim. Several rights are available as static properties of the <xref href=&quot;System.IdentityModel.Claims.Rights&quot;></xref> class."
    return:
      type: System.Collections.Generic.IEnumerable{System.IdentityModel.Claims.Claim}
      description: "A &lt;xref:System.Collections.Generic.IEnumerable%601&gt; of type <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> that enables you to enumerate the claims that matches the specified criteria."
  overload: System.IdentityModel.Claims.ClaimSet.FindClaims*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.GetEnumerator
  id: GetEnumerator
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ClaimSet.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.GetEnumerator()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "When overridden in a derived class, gets a &lt;xref:System.Collections.Generic.IEnumerator%601&gt; that can be used to enumerate the <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> object in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection."
  syntax:
    content: public abstract System.Collections.Generic.IEnumerator<System.IdentityModel.Claims.Claim> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.IdentityModel.Claims.Claim}
      description: "A &lt;xref:System.Collections.Generic.IEnumerator%601&gt; that can be used to enumerate the <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> object in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  overload: System.IdentityModel.Claims.ClaimSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Issuer
  id: Issuer
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Issuer
  nameWithType: ClaimSet.Issuer
  fullName: System.IdentityModel.Claims.ClaimSet.Issuer
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "When overridden in a derived class, gets the entity that issued this <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  remarks: "The issuer of the claim set that is returned by the <xref:System.IdentityModel.Claims.ClaimSet.System%2A> property is the <xref:System.IdentityModel.Claims.DefaultClaimSet>."
  syntax:
    content: public abstract System.IdentityModel.Claims.ClaimSet Issuer { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "The <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> object that issued this <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> object."
  overload: System.IdentityModel.Claims.ClaimSet.Issuer*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ClaimSet.Item(Int32)
  fullName: System.IdentityModel.Claims.ClaimSet.Item(Int32)
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "When overridden in a derived class, gets the <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> for the specified index."
  syntax:
    content: public abstract System.IdentityModel.Claims.Claim this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "The index of the claim to be retrieved."
    return:
      type: System.IdentityModel.Claims.Claim
      description: "The <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> at the specified index."
  overload: System.IdentityModel.Claims.ClaimSet.Item*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.System
  id: System
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: System
  nameWithType: ClaimSet.System
  fullName: System.IdentityModel.Claims.ClaimSet.System
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "Gets a <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> object that represents an application trusted issuer."
  remarks: "This type of <xref:System.IdentityModel.Claims.ClaimSet> object is typically used as the value of the <xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> property for a <xref:System.IdentityModel.Claims.ClaimSet> that is issued by the current application.       For example, after an application authenticates a username and password, it creates a <xref:System.IdentityModel.Claims.ClaimSet> that represents the user with the <xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> property set to System."
  syntax:
    content: public static System.IdentityModel.Claims.ClaimSet System { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "The system <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> object."
  overload: System.IdentityModel.Claims.ClaimSet.System*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ClaimSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "Gets an &lt;xref:System.Collections.Generic.IEnumerator%601&gt; that can be used to enumerate the <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> object in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "A &lt;xref:System.Collections.Generic.IEnumerator%601&gt; that can be used to enumerate the <xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref> object in the <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>."
  overload: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Windows
  id: Windows
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Windows
  nameWithType: ClaimSet.Windows
  fullName: System.IdentityModel.Claims.ClaimSet.Windows
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "Gets a set of claims that contains Windows security identifiers."
  remarks: "This type of <xref:System.IdentityModel.Claims.ClaimSet> object is typically used as the value of the <xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> property for a <xref:System.IdentityModel.Claims.ClaimSet> that is issued by the Windows. For example, after an application authenticates a username and password using Windows authentication, it creates the <xref:System.IdentityModel.Claims.ClaimSet> with the <xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> property set to Windows."
  syntax:
    content: public static System.IdentityModel.Claims.ClaimSet Windows { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "A <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> that contains at least one claim of type <xref:System.IdentityModel.Claims.ClaimTypes.Sid*>."
  overload: System.IdentityModel.Claims.ClaimSet.Windows*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Claims.ClaimSet.#ctor
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ClaimSet()
  nameWithType: ClaimSet.ClaimSet()
  fullName: System.IdentityModel.Claims.ClaimSet.ClaimSet()
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ContainsClaim(Claim)
  nameWithType: ClaimSet.ContainsClaim(Claim)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Claims.Claim
  parent: System.IdentityModel.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.IdentityModel.Claims.Claim
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ContainsClaim(Claim,IEqualityComparer<Claim>)
  nameWithType: ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
- uid: System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<Claim>
  nameWithType: IEqualityComparer<Claim>
  fullName: System.Collections.Generic.IEqualityComparer<System.IdentityModel.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<System.IdentityModel.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Claims.ClaimSet.Count
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Count
  nameWithType: ClaimSet.Count
  fullName: System.IdentityModel.Claims.ClaimSet.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: FindClaims(String,String)
  nameWithType: ClaimSet.FindClaims(String,String)
  fullName: System.IdentityModel.Claims.ClaimSet.FindClaims(String,String)
- uid: System.Collections.Generic.IEnumerable{System.IdentityModel.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IdentityModel.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Claims.ClaimSet.GetEnumerator
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: ClaimSet.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.IdentityModel.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<Claim>
  nameWithType: IEnumerator<Claim>
  fullName: System.Collections.Generic.IEnumerator<System.IdentityModel.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.IdentityModel.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Claims.ClaimSet.Issuer
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Issuer
  nameWithType: ClaimSet.Issuer
  fullName: System.IdentityModel.Claims.ClaimSet.Issuer
- uid: System.IdentityModel.Claims.ClaimSet
  parent: System.IdentityModel.Claims
  isExternal: false
  name: ClaimSet
  nameWithType: ClaimSet
  fullName: System.IdentityModel.Claims.ClaimSet
- uid: System.IdentityModel.Claims.ClaimSet.Item(System.Int32)
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Item(Int32)
  nameWithType: ClaimSet.Item(Int32)
  fullName: System.IdentityModel.Claims.ClaimSet.Item(Int32)
- uid: System.IdentityModel.Claims.ClaimSet.System
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System
  nameWithType: ClaimSet.System
  fullName: System.IdentityModel.Claims.ClaimSet.System
- uid: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ClaimSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IdentityModel.Claims.ClaimSet.Windows
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Windows
  nameWithType: ClaimSet.Windows
  fullName: System.IdentityModel.Claims.ClaimSet.Windows
- uid: System.IdentityModel.Claims.ClaimSet.#ctor*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ClaimSet
  nameWithType: ClaimSet.ClaimSet
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ContainsClaim
  nameWithType: ClaimSet.ContainsClaim
- uid: System.IdentityModel.Claims.ClaimSet.Count*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Count
  nameWithType: ClaimSet.Count
- uid: System.IdentityModel.Claims.ClaimSet.FindClaims*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: FindClaims
  nameWithType: ClaimSet.FindClaims
- uid: System.IdentityModel.Claims.ClaimSet.GetEnumerator*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: GetEnumerator
  nameWithType: ClaimSet.GetEnumerator
- uid: System.IdentityModel.Claims.ClaimSet.Issuer*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Issuer
  nameWithType: ClaimSet.Issuer
- uid: System.IdentityModel.Claims.ClaimSet.Item*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Item
  nameWithType: ClaimSet.Item
- uid: System.IdentityModel.Claims.ClaimSet.System*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System
  nameWithType: ClaimSet.System
- uid: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ClaimSet.System.Collections.IEnumerable.GetEnumerator
- uid: System.IdentityModel.Claims.ClaimSet.Windows*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Windows
  nameWithType: ClaimSet.Windows
