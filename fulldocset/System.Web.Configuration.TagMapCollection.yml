### YamlMime:ManagedReference
items:
- uid: System.Web.Configuration.TagMapCollection
  id: TagMapCollection
  children:
  - System.Web.Configuration.TagMapCollection.#ctor
  - System.Web.Configuration.TagMapCollection.Add(System.Web.Configuration.TagMapInfo)
  - System.Web.Configuration.TagMapCollection.Clear
  - System.Web.Configuration.TagMapCollection.CreateNewElement
  - System.Web.Configuration.TagMapCollection.GetElementKey(System.Configuration.ConfigurationElement)
  - System.Web.Configuration.TagMapCollection.Item(System.Int32)
  - System.Web.Configuration.TagMapCollection.Properties
  - System.Web.Configuration.TagMapCollection.Remove(System.Web.Configuration.TagMapInfo)
  langs:
  - csharp
  name: TagMapCollection
  nameWithType: TagMapCollection
  fullName: System.Web.Configuration.TagMapCollection
  type: Class
  summary: "Contains a collection of <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> objects."
  remarks: "The <xref:System.Web.Configuration.TagMapInfo> class allows you to remap the types of tags at compile time. This remapping causes the mapped type to be used in place of the original tag type for all pages and controls in the ASP.NET application in the scope of the configuration file.       The TagMapCollection class allows you to programmatically access and modify the `tagMapping` subsection of the `pages` section of a configuration file. Within the `tagMapping` subsection, you can add and remove mappings between tag types by specifying the fully qualified strong names of the types.      > [!NOTE] >  Unlike other attributes and collections in the `pages` section, tag remapping has no matching ASP.NET page directive."
  example:
  - "The following configuration file excerpt shows how to declaratively specify values for several properties of the TagMapCollection type.  \n  \n```  \n<system.web>  \n  <pages>  \n    <tagMapping>  \n      <clear />  \n      <add  \n        tagType=  \n          \"System.Web.UI.WebControls.WebParts.WebPartManager\"  \n        mappedTagType=  \n          \"Microsoft.Sharepoint.WebPartPartManager,   \n           MSPS.Web.dll, Version='2.0.0.0'\"   \n      />  \n      <remove tagType=\"SomeOtherNS.Class, Assemblyname\" />  \n    </tagMapping>  \n   </pages>  \n</system.web>  \n```  \n  \n The following code example shows how to use the TagMapCollection class to programmatically modify tag-mapping settings. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  \n  \n [!code-cs[System.Web.Configuration.PagesSection#17](~/add/codesnippet/csharp/t-system.web.configurati_62_1.cs)]\n [!code-vb[System.Web.Configuration.PagesSection#17](~/add/codesnippet/visualbasic/t-system.web.configurati_62_1.vb)]"
  syntax:
    content: >-
      [System.Configuration.ConfigurationCollection(typeof(System.Web.Configuration.TagMapInfo))]

      public sealed class TagMapCollection : System.Configuration.ConfigurationElementCollection
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  - System.Configuration.ConfigurationElementCollection
  implements: []
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElementCollection.AddElementName
  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)
  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.BaseClear
  - System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)
  - System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)
  - System.Configuration.ConfigurationElementCollection.BaseGetAllKeys
  - System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)
  - System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)
  - System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)
  - System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)
  - System.Configuration.ConfigurationElementCollection.ClearElementName
  - System.Configuration.ConfigurationElementCollection.CollectionType
  - System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)
  - System.Configuration.ConfigurationElementCollection.Count
  - System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)
  - System.Configuration.ConfigurationElementCollection.ElementName
  - System.Configuration.ConfigurationElementCollection.EmitClear
  - System.Configuration.ConfigurationElementCollection.Equals(System.Object)
  - System.Configuration.ConfigurationElementCollection.GetEnumerator
  - System.Configuration.ConfigurationElementCollection.GetHashCode
  - System.Configuration.ConfigurationElementCollection.IsElementName(System.String)
  - System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.IsModified
  - System.Configuration.ConfigurationElementCollection.IsReadOnly
  - System.Configuration.ConfigurationElementCollection.IsSynchronized
  - System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElementCollection.RemoveElementName
  - System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.ResetModified
  - System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElementCollection.SetReadOnly
  - System.Configuration.ConfigurationElementCollection.SyncRoot
  - System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate
  - System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.#ctor
  id: '#ctor'
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: TagMapCollection()
  nameWithType: TagMapCollection.TagMapCollection()
  fullName: System.Web.Configuration.TagMapCollection.TagMapCollection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Configuration.TagMapCollection&quot;></xref> class."
  remarks: "The <xref:System.Web.Configuration.PagesSection.TagMapping%2A> property of the <xref:System.Web.Configuration.PagesSection> class always contains an instance of the <xref:System.Web.Configuration.TagMapCollection> type. Use this instance, rather than creating your own."
  syntax:
    content: public TagMapCollection ();
    parameters: []
  overload: System.Web.Configuration.TagMapCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.Add(System.Web.Configuration.TagMapInfo)
  id: Add(System.Web.Configuration.TagMapInfo)
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: Add(TagMapInfo)
  nameWithType: TagMapCollection.Add(TagMapInfo)
  fullName: System.Web.Configuration.TagMapCollection.Add(TagMapInfo)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  summary: "Adds a <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> object to the collection."
  remarks: "The collection must not already contain a <xref:System.Web.Configuration.TagMapInfo> object with the same <xref:System.Web.Configuration.TagMapInfo.TagType%2A> property value. If it does, a <xref:System.Configuration.ConfigurationException> will be thrown."
  example:
  - "The following code example shows how to use the Add method. This code example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  \n  \n [!code-cs[System.Web.Configuration.PagesSection#42](~/add/codesnippet/csharp/355b41cd-8c30-46e6-ad2a-_1.cs)]\n [!code-vb[System.Web.Configuration.PagesSection#42](~/add/codesnippet/visualbasic/355b41cd-8c30-46e6-ad2a-_1.vb)]"
  syntax:
    content: public void Add (System.Web.Configuration.TagMapInfo tagMapInformation);
    parameters:
    - id: tagMapInformation
      type: System.Web.Configuration.TagMapInfo
      description: "A <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> object to add to the collection."
  overload: System.Web.Configuration.TagMapCollection.Add*
  exceptions:
  - type: System.Configuration.ConfigurationException
    commentId: T:System.Configuration.ConfigurationException
    description: "The <xref href=\"System.Web.Configuration.TagMapInfo\"></xref> object to add already exists in the collection.  \n  \n \\- or -  \n  \n The collection is read-only."
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.Clear
  id: Clear
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: TagMapCollection.Clear()
  fullName: System.Web.Configuration.TagMapCollection.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  summary: "Clears all object from the collection."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.Configuration.TagMapCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.CreateNewElement
  id: CreateNewElement
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: CreateNewElement()
  nameWithType: TagMapCollection.CreateNewElement()
  fullName: System.Web.Configuration.TagMapCollection.CreateNewElement()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationElement CreateNewElement ();
    parameters: []
    return:
      type: System.Configuration.ConfigurationElement
      description: "To be added."
  overload: System.Web.Configuration.TagMapCollection.CreateNewElement*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.GetElementKey(System.Configuration.ConfigurationElement)
  id: GetElementKey(System.Configuration.ConfigurationElement)
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: GetElementKey(ConfigurationElement)
  nameWithType: TagMapCollection.GetElementKey(ConfigurationElement)
  fullName: System.Web.Configuration.TagMapCollection.GetElementKey(ConfigurationElement)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  syntax:
    content: protected override object GetElementKey (System.Configuration.ConfigurationElement element);
    parameters:
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "To be added."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Web.Configuration.TagMapCollection.GetElementKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: TagMapCollection.Item(Int32)
  fullName: System.Web.Configuration.TagMapCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  summary: "Gets or sets the <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> object at the specified index location."
  remarks: "If a <xref:System.Web.Configuration.TagMapInfo> object already exists at the specified index, this property overwrites it; otherwise, it creates a new object and adds it to the collection."
  example:
  - "The following code example shows how to use the Item property. This example is part of a larger example provided for the <xref:System.Web.Configuration.PagesSection> class.  \n  \n [!code-cs[System.Web.Configuration.PagesSection#40](~/add/codesnippet/csharp/p-system.web.configurati_16_1.cs)]\n [!code-vb[System.Web.Configuration.PagesSection#40](~/add/codesnippet/visualbasic/p-system.web.configurati_16_1.vb)]"
  syntax:
    content: public System.Web.Configuration.TagMapInfo this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The index of a <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> object in the collection."
    return:
      type: System.Web.Configuration.TagMapInfo
      description: "The <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> object at the specified index, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if there is no object at that index."
  overload: System.Web.Configuration.TagMapCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.Properties
  id: Properties
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: Properties
  nameWithType: TagMapCollection.Properties
  fullName: System.Web.Configuration.TagMapCollection.Properties
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "To be added."
  overload: System.Web.Configuration.TagMapCollection.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Configuration.TagMapCollection.Remove(System.Web.Configuration.TagMapInfo)
  id: Remove(System.Web.Configuration.TagMapInfo)
  parent: System.Web.Configuration.TagMapCollection
  langs:
  - csharp
  name: Remove(TagMapInfo)
  nameWithType: TagMapCollection.Remove(TagMapInfo)
  fullName: System.Web.Configuration.TagMapCollection.Remove(TagMapInfo)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Configuration
  summary: "Removes the specified object from the collection."
  syntax:
    content: public void Remove (System.Web.Configuration.TagMapInfo tagMapInformation);
    parameters:
    - id: tagMapInformation
      type: System.Web.Configuration.TagMapInfo
      description: "A <xref href=&quot;System.Web.Configuration.TagMapInfo&quot;></xref> object in the collection."
  overload: System.Web.Configuration.TagMapCollection.Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: System.Configuration.ConfigurationElementCollection
- uid: System.Configuration.ConfigurationException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationException
  nameWithType: ConfigurationException
  fullName: System.Configuration.ConfigurationException
- uid: System.Web.Configuration.TagMapCollection.#ctor
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: TagMapCollection()
  nameWithType: TagMapCollection.TagMapCollection()
  fullName: System.Web.Configuration.TagMapCollection.TagMapCollection()
- uid: System.Web.Configuration.TagMapCollection.Add(System.Web.Configuration.TagMapInfo)
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Add(TagMapInfo)
  nameWithType: TagMapCollection.Add(TagMapInfo)
  fullName: System.Web.Configuration.TagMapCollection.Add(TagMapInfo)
- uid: System.Web.Configuration.TagMapInfo
  parent: System.Web.Configuration
  isExternal: false
  name: TagMapInfo
  nameWithType: TagMapInfo
  fullName: System.Web.Configuration.TagMapInfo
- uid: System.Web.Configuration.TagMapCollection.Clear
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Clear()
  nameWithType: TagMapCollection.Clear()
  fullName: System.Web.Configuration.TagMapCollection.Clear()
- uid: System.Web.Configuration.TagMapCollection.CreateNewElement
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: CreateNewElement()
  nameWithType: TagMapCollection.CreateNewElement()
  fullName: System.Web.Configuration.TagMapCollection.CreateNewElement()
- uid: System.Configuration.ConfigurationElement
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
- uid: System.Web.Configuration.TagMapCollection.GetElementKey(System.Configuration.ConfigurationElement)
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: GetElementKey(ConfigurationElement)
  nameWithType: TagMapCollection.GetElementKey(ConfigurationElement)
  fullName: System.Web.Configuration.TagMapCollection.GetElementKey(ConfigurationElement)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Configuration.TagMapCollection.Item(System.Int32)
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: TagMapCollection.Item(Int32)
  fullName: System.Web.Configuration.TagMapCollection.Item(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Configuration.TagMapCollection.Properties
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Properties
  nameWithType: TagMapCollection.Properties
  fullName: System.Web.Configuration.TagMapCollection.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Web.Configuration.TagMapCollection.Remove(System.Web.Configuration.TagMapInfo)
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Remove(TagMapInfo)
  nameWithType: TagMapCollection.Remove(TagMapInfo)
  fullName: System.Web.Configuration.TagMapCollection.Remove(TagMapInfo)
- uid: System.Web.Configuration.TagMapCollection.#ctor*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: TagMapCollection
  nameWithType: TagMapCollection.TagMapCollection
- uid: System.Web.Configuration.TagMapCollection.Add*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Add
  nameWithType: TagMapCollection.Add
- uid: System.Web.Configuration.TagMapCollection.Clear*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Clear
  nameWithType: TagMapCollection.Clear
- uid: System.Web.Configuration.TagMapCollection.CreateNewElement*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: CreateNewElement
  nameWithType: TagMapCollection.CreateNewElement
- uid: System.Web.Configuration.TagMapCollection.GetElementKey*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: GetElementKey
  nameWithType: TagMapCollection.GetElementKey
- uid: System.Web.Configuration.TagMapCollection.Item*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Item
  nameWithType: TagMapCollection.Item
- uid: System.Web.Configuration.TagMapCollection.Properties*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Properties
  nameWithType: TagMapCollection.Properties
- uid: System.Web.Configuration.TagMapCollection.Remove*
  parent: System.Web.Configuration.TagMapCollection
  isExternal: false
  name: Remove
  nameWithType: TagMapCollection.Remove
