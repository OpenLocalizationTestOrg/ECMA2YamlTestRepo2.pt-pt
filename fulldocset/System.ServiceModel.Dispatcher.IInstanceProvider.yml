### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "Declares methods that provide a service object or recycle a service object for a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service."
  remarks: "Implement the IInstanceProvider interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.       Once the IInstanceProvider interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).       If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file. If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute. (For an example of the contract behavior approach, see the Example section.)       IInstanceProvider has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object. Service object pooling is one example of custom IInstanceProvider functionality.       Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.       There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed. The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode> or <xref:System.ServiceModel.ReleaseInstanceMode>. The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method. If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher&quot;s instance provider. If a new message arrives after the instance has been released, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.      > [!NOTE] >  If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>."
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object."
  remarks: "Use the GetInstance method to control the exact service object that a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service receives when it attempts to create a new one."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "The current <xref:System.ServiceModel.InstanceContext> object."
    return:
      type: System.Object
      description: "A user-defined service object."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Returns a service object given the specified <xref:System.ServiceModel.InstanceContext> object."
  remarks: "Use the GetInstance method to control the exact service object that a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service receives when it attempts to create a new one."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "The current <xref:System.ServiceModel.InstanceContext> object."
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "The message that triggered the creation of a service object."
    return:
      type: System.Object
      description: "The service object."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Called when an <xref:System.ServiceModel.InstanceContext> object recycles a service object."
  remarks: "Use the ReleaseInstance method to perform some custom resource disposal or other recycling customization when a service recycles a service object."
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "The service&quot;s instance context."
    - id: instance
      type: System.Object
      description: "The service object to be recycled."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
