### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Provides properties and methods to add a license to a component and to manage a <xref href=&quot;System.ComponentModel.LicenseProvider&quot;></xref>. This class cannot be inherited."
  remarks: "The LicenseManager class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>. The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.       When you create a component that you want to license, you must do the following:      1.  Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.      2.  Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.      3.  Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.       For more information on licensing, see [How to: License Components and Controls](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Creates an instance of the specified type, given a context in which you can use the licensed instance."
  remarks: "The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. The CreateWithContext method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing CreateWithContext to behave as an atomic operation."
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the type to create."
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref> that specifies when you can use the licensed instance."
    return:
      type: System.Object
      description: "An instance of the specified type."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance."
  remarks: "The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation."
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the type to create."
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref> that specifies when you can use the licensed instance."
    - id: args
      type: System.Object[]
      description: "An array of type <xref:System.Object> that represents the arguments for the type."
    return:
      type: System.Object
      description: "An instance of the specified type with the given array of arguments."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets the current <xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref>, which specifies when you can use the licensed object."
  remarks: "When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes."
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref> that specifies when you can use the licensed object."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The CurrentContext property is currently locked and cannot be changed."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns whether the given type has a valid license."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> to find a valid license for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the given type is licensed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether a valid license can be granted for the specified type."
  remarks: "The IsValid method returns `true` when the type is either not licensed, or is licensed and the license is valid.       This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions."
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the type of object that requests the <xref href=&quot;System.ComponentModel.License&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a valid license can be granted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  remarks: "The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.       This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.       If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized."
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the type of object that requests the license."
    - id: instance
      type: System.Object
      description: "An object of the specified type or a type derived from the specified type."
    - id: license
      type: System.ComponentModel.License
      description: "A <xref href=&quot;System.ComponentModel.License&quot;></xref> that is a valid license, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if a valid license cannot be granted."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a valid <xref href=&quot;System.ComponentModel.License&quot;></xref> can be granted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Prevents changes being made to the current <xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref> of the given object."
  remarks: "Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved."
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "The object whose current context you want to lock."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The context is already locked."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Allows changes to be made to the current <xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref> of the given object."
  remarks: "Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved."
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "The object whose current context you want to unlock."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code> represents a different user than the one specified in a previous call to <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;></xref> which specifies when you can use the licensed object for the <xref:System.ComponentModel.LicenseManager.CurrentContext*>."
  remarks: "If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode>."
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "One of the <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;></xref> values, as specified in the <xref:System.ComponentModel.LicenseManager.CurrentContext*> property."
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether a license can be granted for the specified type."
  remarks: "This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception."
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the type of object that requests the license."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "A <xref href=&quot;System.ComponentModel.License&quot;></xref> cannot be granted."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether a license can be granted for the instance of the specified type."
  remarks: "This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.       All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized."
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that represents the type of object that requests the license."
    - id: instance
      type: System.Object
      description: "An <xref:System.Object> of the specified type or a type derived from the specified type."
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "The type is licensed, but a <xref href=&quot;System.ComponentModel.License&quot;></xref> cannot be granted."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
