### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IOperationInvoker
  id: IOperationInvoker
  children:
  - System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs
  - System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)
  - System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  - System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  - System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  langs:
  - csharp
  name: IOperationInvoker
  nameWithType: IOperationInvoker
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker
  type: Interface
  summary: "Declara métodos que coloque um objeto e uma matriz de parâmetros extraídos a partir de uma mensagem, invocam um método nesse objecto com esses parâmetros e devolvem o valor de retorno do método e parâmetros de saída."
  remarks: "Implemente a interface IOperationInvoker para controlar a conversão de um objeto sem tipo e a matriz de parâmetros para uma chamada de método de tipo seguro nesse objecto. Tem um síncrona <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A>método, o que utiliza uma instância e o conjunto de entradas de objeto de tipo e devolve um objeto e um conjunto de saídas do objeto de tipo.</xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A> Também tem um <xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A>e [InvokeEnd (objeto, objeto\\[\\], IAsyncResult)](assetId:///M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)?qualifyHint=False&autoUpgrade=True) variante.</xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A>  O <xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A>propriedade especifica se deve ser utilizado o método síncrono ou assíncrono.</xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A>"
  syntax:
    content: public interface IOperationInvoker
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs
  id: AllocateInputs
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: AllocateInputs()
  nameWithType: IOperationInvoker.AllocateInputs()
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Devolve um &lt;xref:System.Array?displayProperty=fullName&gt; de objetos de parâmetro."
  remarks: "Implemente esta opção para devolver uma matriz de parâmetros para a operação. Esta matriz é preenchida pelo formatador e reenviada para a invocador quando <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A>é chamado.</xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A>"
  syntax:
    content: public object[] AllocateInputs ();
    parameters: []
    return:
      type: System.Object[]
      description: "Os parâmetros que estão a ser utilizado como argumentos para a operação."
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)
  id: Invoke(System.Object,System.Object[],System.Object[]@)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: Invoke(Object,Object[],Object[])
  nameWithType: IOperationInvoker.Invoke(Object,Object[],Object[])
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(Object,Object[],Object[])
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Devolve um objeto e um conjunto de objetos de resultado de uma instância e o conjunto de objetos de entrada."
  syntax:
    content: public object Invoke (object instance, object[] inputs, out object[] outputs);
    parameters:
    - id: instance
      type: System.Object
      description: "O objeto para ser invocado."
    - id: inputs
      type: System.Object[]
      description: "As entradas para o método."
    - id: outputs
      type: System.Object[]
      description: "As saídas do método."
    return:
      type: System.Object
      description: "O valor de retorno."
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  id: InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: InvokeBegin(Object,Object[],AsyncCallback,Object)
  nameWithType: IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Uma implementação assíncrona do <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*>método.</xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*>"
  syntax:
    content: public IAsyncResult InvokeBegin (object instance, object[] inputs, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "O objeto para ser invocado."
    - id: inputs
      type: System.Object[]
      description: "As entradas para o método."
    - id: callback
      type: System.AsyncCallback
      description: "O objeto de chamada de retorno assíncrona."
    - id: state
      type: System.Object
      description: "Dados de estado associados."
    return:
      type: System.IAsyncResult
      description: "A &lt;xref:System.IAsyncResult?displayProperty=fullName&gt; utilizado para concluir a chamada assíncrona."
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  id: InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: InvokeEnd(Object,Object[],IAsyncResult)
  nameWithType: IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "O método end assíncrono."
  syntax:
    content: public object InvokeEnd (object instance, out object[] outputs, IAsyncResult result);
    parameters:
    - id: instance
      type: System.Object
      description: "O objeto invocado."
    - id: outputs
      type: System.Object[]
      description: "As saídas do método."
    - id: result
      type: System.IAsyncResult
      description: "O &lt;xref:System.IAsyncResult?displayProperty=fullName&gt; objeto."
    return:
      type: System.Object
      description: "O valor de retorno."
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  id: IsSynchronous
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: IsSynchronous
  nameWithType: IOperationInvoker.IsSynchronous
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Obtém um valor que especifica se o <> </> *> ou <> </> *> método é denominado pelo dispatcher."
  remarks: "O invocador predefinido dispatches mensagens para a operação síncrona por predefinição. Este valor é colocado em cache, o emissor e, por conseguinte, não deve alterar durante a duração do objeto que implementa <xref:System.ServiceModel.Dispatcher.IOperationInvoker>.</xref:System.ServiceModel.Dispatcher.IOperationInvoker>"
  syntax:
    content: public bool IsSynchronous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o distribuidor invoca a operação síncrona; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: AllocateInputs()
  nameWithType: IOperationInvoker.AllocateInputs()
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: Invoke(Object,Object[],Object[])
  nameWithType: IOperationInvoker.Invoke(Object,Object[],Object[])
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(Object,Object[],Object[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeBegin(Object,Object[],AsyncCallback,Object)
  nameWithType: IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeEnd(Object,Object[],IAsyncResult)
  nameWithType: IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: IsSynchronous
  nameWithType: IOperationInvoker.IsSynchronous
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: AllocateInputs
  nameWithType: IOperationInvoker.AllocateInputs
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: Invoke
  nameWithType: IOperationInvoker.Invoke
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeBegin
  nameWithType: IOperationInvoker.InvokeBegin
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeEnd
  nameWithType: IOperationInvoker.InvokeEnd
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: IsSynchronous
  nameWithType: IOperationInvoker.IsSynchronous
