### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoStream
  id: CryptoStream
  children:
  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  - System.Security.Cryptography.CryptoStream.CanRead
  - System.Security.Cryptography.CryptoStream.CanSeek
  - System.Security.Cryptography.CryptoStream.CanWrite
  - System.Security.Cryptography.CryptoStream.Clear
  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  - System.Security.Cryptography.CryptoStream.Flush
  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.FlushFinalBlock
  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  - System.Security.Cryptography.CryptoStream.Length
  - System.Security.Cryptography.CryptoStream.Position
  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  name: CryptoStream
  nameWithType: CryptoStream
  fullName: System.Security.Cryptography.CryptoStream
  type: Class
  summary: "Define um fluxo que liga os fluxos de dados para transformações de criptografia."
  remarks: "O language runtime utiliza uma estrutura orientado para o fluxo de criptografia. O núcleo desta estrutura é CryptoStream. Quaisquer objetos criptográficos que implementam CryptoStream podem ser ligadas em cadeia, juntamente com quaisquer objetos que implementem <xref:System.IO.Stream>, por isso, o resultado de transmissão em fluxo a partir de um objeto pode ser sejam fornecido a entrada de outro objeto.</xref:System.IO.Stream> O resultado intermédio (o resultado do objeto primeiro) não precisa de ser armazenados em separado.      > [!IMPORTANT] > Este tipo implementa o <xref:System.IDisposable>interface.</xref:System.IDisposable> Quando tiver terminado com o tipo, deve eliminar-direta ou indiretamente ao chamar o <xref:System.Security.Cryptography.CryptoStream.Clear%2A>método, o que por sua vez chama o <xref:System.IDisposable>implementação.</xref:System.IDisposable> </xref:System.Security.Cryptography.CryptoStream.Clear%2A> Para eliminar diretamente do tipo, chame o <xref:System.Security.Cryptography.CryptoStream.Clear%2A>método um `try` / `catch` bloco.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> Para eliminar indiretamente dele, utilize uma construção de idioma, tais como `using` (em c#) ou `Using` (em Visual Basic). Para obter mais informações, consulte a secção &quot;Utilizar um objeto que implementa IDisposable&quot; o <xref:System.IDisposable>tópico de interface.</xref:System.IDisposable>       Deve fechar sempre explicitamente o objeto de CryptoStream depois de terminar a utilizá-la ao chamar o <xref:System.Security.Cryptography.CryptoStream.Clear%2A>método.</xref:System.Security.Cryptography.CryptoStream.Clear%2A>  Ao fazê-lo, por isso, o fluxo subjacente os remove da cache e faz com que todos os restantes blocos de dados a serem processados pelo objeto CryptoStream.  No entanto, se uma exceção ocorrer antes de chamar o <xref:System.IO.Stream.Close%2A>método, CryptoStream objeto não pode ser fechado.</xref:System.IO.Stream.Close%2A>  Para se certificar de que o <xref:System.IO.Stream.Close%2A>sempre obtém chamar método, coloque a chamada para o <xref:System.Security.Cryptography.CryptoStream.Clear%2A>método dentro o `finally` bloquear de um `try` / `catch` instrução.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> </xref:System.IO.Stream.Close%2A>"
  example:
  - "The following example demonstrates how to use a CryptoStream to encrypt a string. This method uses <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).  \n  \n [!code-cs[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/csharp/t-system.security.crypto_78_1.cs)]\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/visualbasic/t-system.security.crypto_78_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CryptoStream : System.IO.Stream
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> classe com um fluxo de dados de destino, a transformação a utilizar e o modo da transmissão em fluxo."
  remarks: "Qualquer objeto que deriva de <xref:System.IO.Stream>pode ser transmitido para o `stream` parâmetro.</xref:System.IO.Stream> Qualquer objeto que implementa <xref:System.Security.Cryptography.ICryptoTransform>(tais como <xref:System.Security.Cryptography.HashAlgorithm>) pode ser transmitido para o `transform` parâmetro.</xref:System.Security.Cryptography.HashAlgorithm> </xref:System.Security.Cryptography.ICryptoTransform>"
  syntax:
    content: public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O fluxo para efetuar a transformação criptográfica."
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
      description: "A transformação criptográfica que está a ser efetuada no fluxo."
    - id: mode
      type: System.Security.Cryptography.CryptoStreamMode
      description: "Um do <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> valores."
  overload: System.Security.Cryptography.CryptoStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>Não é válido."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanRead
  id: CanRead
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém um valor que indica se atual <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> é legível."
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo actual é legível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  id: CanSeek
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém um valor que indica se podem recuar a dentro atual <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "Para procurar não está ativado num <xref:System.Security.Cryptography.CryptoStream>, pelo que este método devolve sempre `false`.</xref:System.Security.Cryptography.CryptoStream>"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  id: CanWrite
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém um valor que indica se atual <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> é gravável."
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo actual é gravável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Versões de todos os recursos utilizados pelo <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "Este método encapsula num wrapper uma chamada para o tipo <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>implementação.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       Chamar `Dispose` permite que os recursos utilizados pelo <xref:System.Security.Cryptography.CryptoStream>para possível reatribuir porque para outros fins.</xref:System.Security.Cryptography.CryptoStream> Para obter mais informações sobre `Dispose`, consulte [recursos geridos de limpeza](~/add/includes/ajax-current-ext-md.md)"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público `Dispose()` método e o `Finalize` método. `Dispose()`invoca protegida `Dispose(Boolean)` método com o parâmetro disposing definido como `true`. `Finalize`invoca `Dispose` com disposing definido como `false`.       Quando o `disposing` parâmetro é `true`, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Security.Cryptography.CryptoStream>referências.</xref:System.Security.Cryptography.CryptoStream> Este método invoca o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Security.Cryptography.CryptoStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Flush
  id: Flush
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Limpa todas as memórias intermédias para o fluxo actual e faz com que todos os dados colocados em memória intermédia para serem escritos para o dispositivo subjacente."
  remarks: "Flushing o fluxo não será esvaziar o codificador subjacente, exceto se chamar explicitamente o esvaziamento ou <xref:System.IO.Stream.Close%2A>.</xref:System.IO.Stream.Close%2A> Definição <xref:System.IO.StreamWriter.AutoFlush%2A>para `true` significa que dados serão descarregados da memória intermédia no fluxo, mas o estado de codificador não irá ser esvaziado.</xref:System.IO.StreamWriter.AutoFlush%2A> Isto permite que o codificador manter o estado (parciais carateres) para que o se codificar o próximo bloco de carateres corretamente. Este cenário afeta UTF8 e UTF7 onde determinados caracteres só podem ser codificados depois do codificador recebe o caráter adjacente ou carateres.      > [!NOTE] > Deve chamar um o <xref:System.IO.Stream.Close%2A>método ou <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>método para concluir a limpar a memória intermédia.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> </xref:System.IO.Stream.Close%2A>"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Limpa todas as memórias intermédias para o fluxo actual de forma assíncrona, faz com que todos os dados colocados em memória intermédia para serem escritos para o dispositivo subjacente e monitoriza os pedidos de cancelamento."
  remarks: "Tem a precede a chamada para FlushAsync com o `await` (c#) ou `Await` operador (Visual Basic) para suspender a execução do método até que a tarefa esteja concluída. Para obter mais informações, consulte [programação assíncrona com Async-Await](~/add/includes/ajax-current-ext-md.md).       Se a operação é cancelada antes de concluir, a tarefa devolvida contém o <xref:System.Threading.Tasks.TaskStatus>valor para o <xref:System.Threading.Tasks.Task.Status%2A>propriedade.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token para monitorizar os pedidos de cancelamento. O valor predefinido é <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "Uma tarefa que representa a operação assíncrona."
  overload: System.Security.Cryptography.CryptoStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O fluxo foi eliminado."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  id: FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "A origem de dados subjacente ou um repositório de atualizações com o estado atual da memória intermédia, em seguida, limpa a memória intermédia."
  remarks: "Chamar o <xref:System.IO.Stream.Close%2A>será chamada de método FlushFinalBlock.</xref:System.IO.Stream.Close%2A> Se não chame <xref:System.IO.Stream.Close%2A>, chamar FlushFinalBlock para concluir a limpar a memória intermédia.</xref:System.IO.Stream.Close%2A> Chame FlushFinalBlock apenas quando todas as atividades de fluxo está concluída."
  syntax:
    content: public void FlushFinalBlock ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "A chave está danificado, que pode fazer com que o preenchimento inválido no fluxo."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O fluxo actual não é gravável.       - ou - o bloco final já ter sido transformado."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  id: HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém um valor que indica se o bloco de memória intermédia final foi escrito no fluxo subjacente."
  remarks: "Esta propriedade for definida `true` quando o <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>método é chamado.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>"
  syntax:
    content: public bool HasFlushedFinalBlock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o bloco final tem foram descarregado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Length
  id: Length
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém o comprimento em bytes da sequência."
  remarks: "Esta propriedade não existe apenas para suportar a herança de <xref:System.IO.Stream>e não pode ser utilizado.</xref:System.IO.Stream>"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "Esta propriedade não é suportada."
  overload: System.Security.Cryptography.CryptoStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Esta propriedade não é suportada."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Position
  id: Position
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define a posição dentro do fluxo actual."
  remarks: "Esta propriedade não existe apenas para suportar a herança de <xref:System.IO.Stream>e não pode ser utilizado.</xref:System.IO.Stream>"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "Esta propriedade não é suportada."
  overload: System.Security.Cryptography.CryptoStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Esta propriedade não é suportada."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Lê uma sequência de bytes do fluxo atual e avança a posição dentro do fluxo de pelo número de bytes lidos."
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Uma matriz de bytes. Um máximo de `count` bytes são leem o fluxo actual e armazenados no `buffer`."
    - id: offset
      type: System.Int32
      description: "O deslocamento de byte no `buffer` no qual pretende começar a armazenar os dados lido do fluxo atual."
    - id: count
      type: System.Int32
      description: "O número máximo de bytes a possível ler o fluxo actual."
    return:
      type: System.Int32
      description: "O número total de bytes na memória intermédia de leitura. Isto pode ser inferior ao número de bytes se que não estão atualmente disponíveis muitas bytes ou pedido zero se o fim do fluxo foi atingido."
  overload: System.Security.Cryptography.CryptoStream.Read*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> associado atual <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> objeto não coincide com o fluxo subjacente.  Por exemplo, esta exceção é acionada quando utilizar <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> com um fluxo subjacente que é só de escrita."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> offset </code> parâmetro é menor que zero.       - ou - <code> count </code> parâmetro é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Thesum do <code> count </code> e <code> offset </code> parâmetros é superior ao comprimento da memória intermédia."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Lê uma sequência de bytes da sequência atual no modo assíncrono, avança a posição dentro do fluxo de pelo número de bytes lidos e monitoriza os pedidos de cancelamento."
  remarks: "Tem a precede a chamada para ReadAsync com o `await` (c#) ou `Await` operador (Visual Basic) para suspender a execução do método até que a tarefa esteja concluída. Para obter mais informações, consulte [programação assíncrona com Async-Await](~/add/includes/ajax-current-ext-md.md).       Se a operação é cancelada antes de concluir, a tarefa devolvida contém o <xref:System.Threading.Tasks.TaskStatus>valor para o <xref:System.Threading.Tasks.Task.Status%2A>propriedade.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A memória intermédia para escrever dados no."
    - id: offset
      type: System.Int32
      description: "O deslocamento de byte no `buffer` no qual pretende iniciar a escrita de dados da sequência."
    - id: count
      type: System.Int32
      description: "O número máximo de bytes a ler."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token para monitorizar os pedidos de cancelamento. O valor predefinido é <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Operação de leitura de uma tarefa que representa o assíncrona. O valor do objeto de tarefa <code> TResult </code> parâmetro contém o número total de bytes na memória intermédia de leitura. O resultado pode ser inferior ao número de bytes se o número de bytes atualmente disponíveis é inferior ao número pedido ou pode ser 0 (zero) se foi atingido o fim do fluxo de pedido."
  overload: System.Security.Cryptography.CryptoStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>ou <code>count</code> é negativo."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A soma de <code> offset </code> e <code> count </code> é maior do que o comprimento da memória intermédia."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O fluxo não suporta leitura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O fluxo foi eliminado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está a ser utilizado por uma operação de leitura anterior."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Define a posição dentro do fluxo actual."
  remarks: "Este método existe apenas para suportar a herança de <xref:System.IO.Stream>e não pode ser utilizado.</xref:System.IO.Stream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Um deslocamento de byte relativa a `origin` parâmetro."
    - id: origin
      type: System.IO.SeekOrigin
      description: "A <xref:System.IO.SeekOrigin>objeto que indica que o ponto de referência utilizado para obter a posição de novo.</xref:System.IO.SeekOrigin>"
    return:
      type: System.Int64
      description: "Este método não é suportado."
  overload: System.Security.Cryptography.CryptoStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Este método não é suportado."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Define o comprimento do fluxo de atual."
  remarks: "Esta propriedade não existe apenas para suportar a herança de <xref:System.IO.Stream>e não pode ser utilizado.</xref:System.IO.Stream>"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "O comprimento pretendido do fluxo de atual em bytes."
  overload: System.Security.Cryptography.CryptoStream.SetLength*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Esta propriedade não existe apenas para suportar a herança de <xref:System.IO.Stream>e não pode ser utilizado.</xref:System.IO.Stream>"
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Escreve uma sequência de bytes atual <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> e avança a posição atual no fluxo de pelo número de bytes escritos."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Uma matriz de bytes. Este método copia `count` bytes do `buffer` para o fluxo actual."
    - id: offset
      type: System.Int32
      description: "O deslocamento de byte no `buffer` no qual pretende começar a copiar bytes no fluxo atual."
    - id: count
      type: System.Int32
      description: "O número de bytes a escrever para o fluxo actual."
  overload: System.Security.Cryptography.CryptoStream.Write*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> associado atual <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> objeto não coincide com o fluxo subjacente.  Por exemplo, esta exceção é acionada quando utilizar <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> com um fluxo subjacente que é só de leitura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> offset </code> parâmetro é menor que zero.       - ou - <code> count </code> parâmetro é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A soma do <code> count </code> e <code> offset </code> parâmetros é superior ao comprimento da memória intermédia."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Escreve uma sequência de bytes no fluxo atual no modo assíncrono, avança a posição atual no fluxo de pelo número de bytes escritos e monitoriza os pedidos de cancelamento."
  remarks: "Tem a precede a chamada para WriteAsync com o `await` (c#) ou `Await` operador (Visual Basic) para suspender a execução do método até que a tarefa esteja concluída. Para obter mais informações, consulte [programação assíncrona com Async-Await](~/add/includes/ajax-current-ext-md.md).       Se a operação é cancelada antes de concluir, a tarefa devolvida contém o <xref:System.Threading.Tasks.TaskStatus>valor para o <xref:System.Threading.Tasks.Task.Status%2A>propriedade.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A memória intermédia para escrever dados a partir de."
    - id: offset
      type: System.Int32
      description: "O deslocamento de byte baseado em zero no `buffer` partir do qual pode começar a escrever bytes no fluxo."
    - id: count
      type: System.Int32
      description: "O número máximo de bytes para escrita."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token para monitorizar os pedidos de cancelamento. O valor predefinido é <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "Uma tarefa que representa a operação de escrita assíncrona."
  overload: System.Security.Cryptography.CryptoStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>ou <code>count</code> é negativo."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A soma de <code> offset </code> e <code> count </code> é maior do que o comprimento da memória intermédia."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O fluxo não suporta escrita."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O fluxo foi eliminado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está a ser utilizado por uma operação de escrita anterior."
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.CryptoStreamMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptoStreamMode
  nameWithType: CryptoStreamMode
  fullName: System.Security.Cryptography.CryptoStreamMode
- uid: System.Security.Cryptography.CryptoStream.CanRead
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
- uid: System.Security.Cryptography.CryptoStream.Flush
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Security.Cryptography.CryptoStream.Position
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Security.Cryptography.CryptoStream.#ctor*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream
  nameWithType: CryptoStream.CryptoStream
- uid: System.Security.Cryptography.CryptoStream.CanRead*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
- uid: System.Security.Cryptography.CryptoStream.CanSeek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear
  nameWithType: CryptoStream.Clear
- uid: System.Security.Cryptography.CryptoStream.Dispose*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose
  nameWithType: CryptoStream.Dispose
- uid: System.Security.Cryptography.CryptoStream.Flush*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush
  nameWithType: CryptoStream.Flush
- uid: System.Security.Cryptography.CryptoStream.FlushAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync
  nameWithType: CryptoStream.FlushAsync
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock
  nameWithType: CryptoStream.FlushFinalBlock
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
- uid: System.Security.Cryptography.CryptoStream.Position*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read
  nameWithType: CryptoStream.Read
- uid: System.Security.Cryptography.CryptoStream.ReadAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync
  nameWithType: CryptoStream.ReadAsync
- uid: System.Security.Cryptography.CryptoStream.Seek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek
  nameWithType: CryptoStream.Seek
- uid: System.Security.Cryptography.CryptoStream.SetLength*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength
  nameWithType: CryptoStream.SetLength
- uid: System.Security.Cryptography.CryptoStream.Write*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write
  nameWithType: CryptoStream.Write
- uid: System.Security.Cryptography.CryptoStream.WriteAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync
  nameWithType: CryptoStream.WriteAsync
