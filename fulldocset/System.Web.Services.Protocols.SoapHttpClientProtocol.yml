### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol
  id: SoapHttpClientProtocol
  children:
  - System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  - System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  - System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  langs:
  - csharp
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol
  type: Class
  summary: "Especifica o cliente de classe que derivam de proxies de quando utilizar SOAP."
  remarks: "Se está a criar um cliente do serviço XML Web, em seguida, uma classe proxy que deriva de indiretamente ou diretamente <xref:System.Web.Services.Protocols.WebClientProtocol>tem de ser criada para o serviço Web de XML.</xref:System.Web.Services.Protocols.WebClientProtocol> Quando o cliente do serviço XML Web chama SOAP a utilizar, a classe de proxy tem de derivar de SoapHttpClientProtocol, que deriva de <xref:System.Web.Services.Protocols.HttpWebClientProtocol>.</xref:System.Web.Services.Protocols.HttpWebClientProtocol> <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, por sua vez, deriva de <xref:System.Web.Services.Protocols.WebClientProtocol>.</xref:System.Web.Services.Protocols.WebClientProtocol></xref:System.Web.Services.Protocols.HttpWebClientProtocol>       Para comunicar com um serviço Web de XML, crie uma classe proxy que derive indiretamente ou diretamente <xref:System.Web.Services.Protocols.WebClientProtocol>para o serviço XML Web que pretende ligar.</xref:System.Web.Services.Protocols.WebClientProtocol> Em vez de criar a classe de proxy manualmente, utilize a ferramenta de linguagem de descrição de serviços Web (Wsdl.exe) para criar uma classe de proxy para a descrição do serviço de um serviço Web de XML especificada. Quando uma classe de proxy é gerada para o protocolo SOAP, chamadas síncronas para os métodos do serviço XML Web são efetuadas através do <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>método, enquanto chamadas assíncronas são efetuadas utilizando o <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>método e o <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>método.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  \n  \n [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]\n [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.Services.Protocols.SoapHttpClientProtocol&quot;> </xref> classe."
  syntax:
    content: public SoapHttpClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Inicia uma invocação assíncrona de um método do serviço XML Web SOAP a utilizar."
  remarks: "Normalmente, seria não chamar o método BeginInvoke diretamente, a menos que foram criar a sua própria classe de proxy para um serviço XML Web service.       Uma classe de proxy gerada pela ferramenta de linguagem de descrição de serviços Web (Wsdl.exe) a partir de uma descrição de serviço expõe os métodos do serviço XML Web como nomes derivados da classe de proxy para chamar os métodos do serviço XML Web de forma síncrona. Para chamar os métodos do serviço XML Web no modo assíncrono, os dois métodos adicionais são adicionados para a classe de proxy para cada método do serviço XML Web, uma com a `Begin` prefixo adicionado para o nome do método de serviço XML Web e uma com a `End` prefixo adicionado.       A classe de proxy chama o método de BeginInvoke para iniciar uma chamada de invocação assíncrono para o método do serviço Web de XML. Por exemplo, se um serviço XML Web service expõe um método do serviço XML Web com o nome `Add`, a classe de proxy contém um método denominado `BeginAdd`, para iniciar uma invocação para XML Web service método. No código para o `BeginAdd`, é efetuada uma chamada ao método BeginInvoke e os resultados são colocados no tipo de retorno esperado para `Add`.       O `methodName` é utilizado para localizar os atributos personalizados que foram adicionados para o método, tais como <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>Fornece informações adicionais sobre o método derivado que é necessário para o protocolo SOAP.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`é transmitido `callback` e está incluído no <xref:System.IAsyncResult>que é devolvido do método BeginInvoke.</xref:System.IAsyncResult> O `asyncState` parâmetro pode ser utilizado para transmitir informações sobre o contexto da chamada assíncrona, especificada no `callback` parâmetro, delegado que processa o resultado."
  example:
  - "The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método do serviço XML Web na classe derivada que é a invocar o método BeginInvoke."
    - id: parameters
      type: System.Object[]
      description: "Uma matriz de objetos que contém os parâmetros a transmitir ao serviço Web de XML. A ordem dos valores na matriz correspondem conformidade os parâmetros no método de chamada de classe derivada."
    - id: callback
      type: System.AsyncCallback
      description: "O delegado para chamar quando o invoke assíncrona for concluída. Se `callback` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o delegado não está a ser chamado."
    - id: asyncState
      type: System.Object
      description: "Informações adicionais fornecidas pelo chamador."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>é passado para o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*>método para obter os valores de retorno da chamada do método remota.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "O pedido atingiu o computador do servidor, mas não foi processado com êxito."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O pedido não era válido para o estado do objeto atual."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Ocorreu um erro ao aceder à rede."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  id: Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Dinamicamente está vinculada a um serviço XML Web service descrito no documento de identificação em <xref:System.Web.Services.Protocols.WebClientProtocol.Url*>.</xref:System.Web.Services.Protocols.WebClientProtocol.Url*>"
  remarks: "Um cliente do serviço XML Web dinamicamente pode vincular a um serviço Web de XML diferente daquela referenciada na classe de proxy a utilizar o método de deteção. Normalmente, o <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>propriedade refere-se para o endereço base do serviço Web de XML.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> No entanto, antes de invocar o método de deteção, definir o <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>propriedade para um URL de um documento de deteção.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> O método Discover tenta localizar uma correspondência no documento de identificação para o enlace definido na classe de proxy e, em seguida, dinamicamente vincule-lo. Se tiver êxito, chamadas de método subsequentes são direcionadas para o serviço XML Web service descrito no documento de identificação.       Se a classe de proxy é compilada com a ferramenta de linguagem de descrição de serviços Web (Wsdl.exe), a classe de proxy define o enlace implementado através dos métodos do serviço XML Web invoca utilizando <xref:System.Web.Services.WebServiceBindingAttribute>.</xref:System.Web.Services.WebServiceBindingAttribute> Quando um serviço XML Web service implementa vários enlaces, Wsdl.exe cria uma classe de proxy para cada enlace. Aplicado a cada classe de proxy é um <xref:System.Web.Services.WebServiceBindingAttribute>que define o nome do enlace e o respetivo espaço de nomes.</xref:System.Web.Services.WebServiceBindingAttribute> O documento de deteção, definir o <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>propriedade tem de conter uma referência a um serviço XML Web que implementa o mesmo nome de enlace e espaço de nomes ou, é emitida uma exceção.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>"
  example:
  - "The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]\n [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  \n  \n The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]"
  syntax:
    content: public void Discover ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "A classe de proxy não tem um enlace definido."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Termina uma invocação assíncrona de um método do serviço XML Web SOAP a utilizar."
  remarks: "Normalmente, seria não chamar o método EndInvoke diretamente, a menos que foram criar a sua própria classe de proxy para um serviço XML Web service.       Uma classe de proxy gerada pela ferramenta de linguagem de descrição de serviços Web (Wsdl.exe) para um serviço XML Web service expõe os métodos do serviço XML Web como nomes retire a classe de proxy para chamar os métodos do serviço XML Web de forma síncrona. Para chamar os métodos do serviço XML Web no modo assíncrono, os dois métodos adicionais são adicionados para a classe de proxy para cada método do serviço XML Web, uma com a `Begin` prefixo adicionado para o nome do método de serviço XML Web e uma com a `End` prefixo adicionado.       A classe de proxy chama o método de EndInvoke para concluir uma chamada de invocação assíncrono para o método do serviço Web de XML. Por exemplo, se um serviço XML Web service expõe um método do serviço XML Web com o nome `Add`, a classe de proxy contém um método denominado `EndAdd`, para concluir uma invocação assíncrona de um XML Web service método. No código para o `EndAdd` é efetuada uma chamada ao método EndInvoke e, em seguida, os resultados são colocados no tipo de retorno esperado para `Add`."
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]\n [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]\n [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "O <xref:System.IAsyncResult>devolveu o <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>método.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object[]
      description: "Uma matriz de objetos que contém o valor de retorno e qualquer por referência ou <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> parâmetros do método de classe derivada."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>Não é o valor devolvido do <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> método."
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "O pedido atingiu o computador do servidor, mas não foi processado com êxito."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O pedido não era válido para o estado do objeto atual."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Ocorreu um erro ao aceder à rede."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Devolve um <xref:System.Xml.XmlReader>inicializado com o <xref:System.Web.Services.Protocols.SoapMessage.Stream*>propriedade o <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> parâmetro.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  syntax:
    content: protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> que fornece <xref:System.Web.Services.Protocols.SoapMessage.Stream*>ao inicializar o <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "O tamanho de memória intermédia inicial do <xref:System.IO.StreamReader>utilizado pelo <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.IO.StreamReader>"
    return:
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>inicializado com o <xref:System.Web.Services.Protocols.SoapMessage.Stream*>propriedade o <code> message </code> parâmetro.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Cria um <xref:System.Net.WebRequest>para especificado <code> uri </code>.</xref:System.Net.WebRequest>"
  remarks: "Este método pode ser substituído para personalizar o <xref:System.Net.WebRequest>antes da Web de XML é efetuado o pedido de serviço.</xref:System.Net.WebRequest> Por exemplo, pode adicionar um cabeçalho personalizado para o pedido."
  syntax:
    content: protected override System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri>Para utilizar quando criar <xref:System.Net.WebRequest>.</xref:System.Net.WebRequest> </xref:System.Uri>"
    return:
      type: System.Net.WebRequest
      description: "O <xref:System.Net.WebRequest>para o URI especificado.</xref:System.Net.WebRequest>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Devolve um <xref:System.Xml.XmlWriter>inicializado com o <xref:System.Web.Services.Protocols.SoapMessage.Stream*>propriedade o <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> parâmetro.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  syntax:
    content: protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> que fornece <xref:System.Web.Services.Protocols.SoapMessage.Stream*>ao inicializar o <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> </xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "O tamanho de memória intermédia inicial do <xref:System.IO.StreamWriter>utilizado pelo <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> </xref:System.IO.StreamWriter>"
    return:
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>inicializado com o <xref:System.Web.Services.Protocols.SoapMessage.Stream*>propriedade o <code> message </code> parâmetro.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invoca um método do serviço XML Web em sincronia com SOAP."
  remarks: "Normalmente, a não chame o método Invoke diretamente, a menos que está a criar sua própria classe de proxy para um serviço XML Web service.       Uma classe de proxy gerada pela ferramenta de linguagem de descrição de serviços Web (Wsdl.exe) para um serviço XML Web service expõe os métodos do serviço XML Web como nomes retire a classe de proxy. A classe de proxy chama o método de invocação para invocar uma chamada de método do serviço Web de XML. Por exemplo, se um serviço XML Web service expõe um método do serviço XML Web com o nome `Add`, a classe de proxy também contém um método denominado `Add`. No código para o `Add` método na classe de proxy, é efetuada uma chamada síncrona para o método do serviço XML Web através do método Invoke e, em seguida, os resultados são colocados no tipo de retorno esperado para `Add`.       O `methodName` parâmetro é utilizado para localizar os atributos personalizados que foram adicionados ao método, tais como <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>Fornece informações adicionais sobre o método derivado que é necessário para o protocolo SOAP.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] Invoke (string methodName, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método de serviço Web de XML."
    - id: parameters
      type: System.Object[]
      description: "Uma matriz de objetos que contém os parâmetros a transmitir ao serviço Web de XML. Corresponde a ordem dos valores na matriz da conformidade os parâmetros no método de chamada de classe derivada."
    return:
      type: System.Object[]
      description: "Uma matriz de objetos que contém o valor de retorno e quaisquer <xref uid=&quot;langword_csharp_reference&quot; name=&quot;reference&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> parâmetros do método de classe derivada."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "O pedido atingiu o computador do servidor, mas não foi processado com êxito."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O pedido não era válido para o estado do objeto atual."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Ocorreu um erro ao aceder à rede."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invoca o método especificado no modo assíncrono."
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método a invocar."
    - id: parameters
      type: System.Object[]
      description: "Os parâmetros a transmitir ao método."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "O delegado chamado quando a invocação do método foi concluída."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invoca o método especificado no modo assíncrono."
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método a invocar."
    - id: parameters
      type: System.Object[]
      description: "Os parâmetros a transmitir ao método."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "O delegado chamado quando a invocação do método foi concluída."
    - id: userState
      type: System.Object
      description: "Um objecto utilizado para transferir informações de estado para o `callback` delegar."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Obtém ou define a versão do protocolo SOAP utilizado para efetuar o pedido SOAP para o serviço XML Web service."
  remarks: "A propriedade SoapVersion está definida na classe de proxy gerado pela ferramenta de linguagem de descrição de serviços Web (Wsdl.exe) para <xref:System.Web.Services.Protocols.SoapProtocolVersion>por predefinição, quando um documento WSDL para um serviço XML Web service suporta SOAP versão 1.1.</xref:System.Web.Services.Protocols.SoapProtocolVersion> No entanto, quando um serviço XML Web só suporta SOAP 1.2, Wsdl.exe define a propriedade SoapVersion <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion> Para escolher a versão do protocolo SOAP ao gerar a classe de proxy com Wsdl.exe, utilize o `/protocol` mudar com o `SOAP` ou `SOAP12` definições para definir a propriedade de SoapVersion <xref:System.Web.Services.Protocols.SoapProtocolVersion>e <xref:System.Web.Services.Protocols.SoapProtocolVersion>, respetivamente.</xref:System.Web.Services.Protocols.SoapProtocolVersion> </xref:System.Web.Services.Protocols.SoapProtocolVersion>"
  example:
  - "The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  \n  \n [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]\n [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "Um do <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref> valores. A predefinição é <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Web.Services.Protocols.SoapException
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapException
  nameWithType: SoapException
  fullName: System.Web.Services.Protocols.SoapException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.Services.Protocols.SoapClientMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapClientMessage
  nameWithType: SoapClientMessage
  fullName: System.Web.Services.Protocols.SoapClientMessage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: SoapHttpClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover
  nameWithType: SoapHttpClientProtocol.Discover
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: SoapHttpClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: SoapHttpClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: SoapHttpClientProtocol.Invoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: SoapHttpClientProtocol.InvokeAsync
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
