### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Tasks.CodeTaskFactory
  id: CodeTaskFactory
  children:
  - Microsoft.Build.Tasks.CodeTaskFactory.#ctor
  - Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)
  - Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)
  - Microsoft.Build.Tasks.CodeTaskFactory.FactoryName
  - Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters
  - Microsoft.Build.Tasks.CodeTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  - Microsoft.Build.Tasks.CodeTaskFactory.TaskType
  langs:
  - csharp
  name: CodeTaskFactory
  nameWithType: CodeTaskFactory
  fullName: Microsoft.Build.Tasks.CodeTaskFactory
  type: Class
  summary: "A task factory which can take a code DOM supported language and create a task from it."
  syntax:
    content: 'public class CodeTaskFactory : Microsoft.Build.Framework.ITaskFactory'
  inheritance:
  - System.Object
  implements:
  - Microsoft.Build.Framework.ITaskFactory
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.#ctor
  id: '#ctor'
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: CodeTaskFactory()
  nameWithType: CodeTaskFactory.CodeTaskFactory()
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CodeTaskFactory()
  type: Constructor
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "Creates the task factory."
  syntax:
    content: public CodeTaskFactory ();
    parameters: []
  overload: Microsoft.Build.Tasks.CodeTaskFactory.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)
  id: CleanupTask(Microsoft.Build.Framework.ITask)
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: CleanupTask(ITask)
  nameWithType: CodeTaskFactory.CleanupTask(ITask)
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(ITask)
  type: Method
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "Cleans up any context or state used in a task."
  syntax:
    content: public void CleanupTask (Microsoft.Build.Framework.ITask task);
    parameters:
    - id: task
      type: Microsoft.Build.Framework.ITask
      description: "The task to clean up."
  overload: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)
  id: CreateTask(Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: CreateTask(IBuildEngine)
  nameWithType: CodeTaskFactory.CreateTask(IBuildEngine)
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(IBuildEngine)
  type: Method
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "Create a `taskfactory` instance which contains the data that needs to be refreshed between task invocations."
  syntax:
    content: public Microsoft.Build.Framework.ITask CreateTask (Microsoft.Build.Framework.IBuildEngine loggingHost);
    parameters:
    - id: loggingHost
      type: Microsoft.Build.Framework.IBuildEngine
      description: "The host that logs information from the task factory."
    return:
      type: Microsoft.Build.Framework.ITask
      description: "Returns the new task."
  overload: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName
  id: FactoryName
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: FactoryName
  nameWithType: CodeTaskFactory.FactoryName
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName
  type: Property
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "The MSBuild engine uses this for logging."
  syntax:
    content: public string FactoryName { get; }
    return:
      type: System.String
      description: "Returns the name of the task."
  overload: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters
  id: GetTaskParameters
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: GetTaskParameters()
  nameWithType: CodeTaskFactory.GetTaskParameters()
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters()
  type: Method
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "Gets the type information for all task parameters."
  syntax:
    content: public Microsoft.Build.Framework.TaskPropertyInfo[] GetTaskParameters ();
    parameters: []
    return:
      type: Microsoft.Build.Framework.TaskPropertyInfo[]
      description: "Returns an array of the type information for all task parameters."
  overload: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  id: Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  nameWithType: CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  type: Method
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "Initialzes the task factory."
  syntax:
    content: public bool Initialize (string taskName, System.Collections.Generic.IDictionary<string,Microsoft.Build.Framework.TaskPropertyInfo> taskParameters, string taskElementContents, Microsoft.Build.Framework.IBuildEngine taskFactoryLoggingHost);
    parameters:
    - id: taskName
      type: System.String
      description: "The name of the task."
    - id: taskParameters
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo}
      description: "The parameters for the task."
    - id: taskElementContents
      type: System.String
      description: "The element contents for the task."
    - id: taskFactoryLoggingHost
      type: Microsoft.Build.Framework.IBuildEngine
      description: "The logging host that gets information about tasks."
    return:
      type: System.Boolean
      description: "Returns the new task factory."
  overload: Microsoft.Build.Tasks.CodeTaskFactory.Initialize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Tasks.CodeTaskFactory.TaskType
  id: TaskType
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  langs:
  - csharp
  name: TaskType
  nameWithType: CodeTaskFactory.TaskType
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.TaskType
  type: Property
  assemblies:
  - Microsoft.Build.Tasks.v4.0
  namespace: Microsoft.Build.Tasks
  summary: "Represents the type of task."
  syntax:
    content: public Type TaskType { get; }
    return:
      type: System.Type
      description: "Returns the task type."
  overload: Microsoft.Build.Tasks.CodeTaskFactory.TaskType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.Tasks.CodeTaskFactory.#ctor
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: CodeTaskFactory()
  nameWithType: CodeTaskFactory.CodeTaskFactory()
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CodeTaskFactory()
- uid: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: CleanupTask(ITask)
  nameWithType: CodeTaskFactory.CleanupTask(ITask)
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask(ITask)
- uid: Microsoft.Build.Framework.ITask
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ITask
  nameWithType: ITask
  fullName: Microsoft.Build.Framework.ITask
- uid: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: CreateTask(IBuildEngine)
  nameWithType: CodeTaskFactory.CreateTask(IBuildEngine)
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask(IBuildEngine)
- uid: Microsoft.Build.Framework.IBuildEngine
  parent: Microsoft.Build.Framework
  isExternal: false
  name: IBuildEngine
  nameWithType: IBuildEngine
  fullName: Microsoft.Build.Framework.IBuildEngine
- uid: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: FactoryName
  nameWithType: CodeTaskFactory.FactoryName
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: GetTaskParameters()
  nameWithType: CodeTaskFactory.GetTaskParameters()
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters()
- uid: Microsoft.Build.Framework.TaskPropertyInfo[]
  parent: Microsoft.Build.Framework
  isExternal: false
  name: TaskPropertyInfo
  nameWithType: TaskPropertyInfo
  fullName: Microsoft.Build.Framework.TaskPropertyInfo[]
  spec.csharp:
  - uid: Microsoft.Build.Framework.TaskPropertyInfo
    name: TaskPropertyInfo
    nameWithType: TaskPropertyInfo
    fullName: TaskPropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  nameWithType: CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,TaskPropertyInfo>
  nameWithType: IDictionary<String,TaskPropertyInfo>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Framework.TaskPropertyInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Framework.TaskPropertyInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Framework.TaskPropertyInfo
    name: TaskPropertyInfo
    nameWithType: TaskPropertyInfo
    fullName: TaskPropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Tasks.CodeTaskFactory.TaskType
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: TaskType
  nameWithType: CodeTaskFactory.TaskType
  fullName: Microsoft.Build.Tasks.CodeTaskFactory.TaskType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Build.Tasks.CodeTaskFactory.#ctor*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: CodeTaskFactory
  nameWithType: CodeTaskFactory.CodeTaskFactory
- uid: Microsoft.Build.Tasks.CodeTaskFactory.CleanupTask*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: CleanupTask
  nameWithType: CodeTaskFactory.CleanupTask
- uid: Microsoft.Build.Tasks.CodeTaskFactory.CreateTask*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: CreateTask
  nameWithType: CodeTaskFactory.CreateTask
- uid: Microsoft.Build.Tasks.CodeTaskFactory.FactoryName*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: FactoryName
  nameWithType: CodeTaskFactory.FactoryName
- uid: Microsoft.Build.Tasks.CodeTaskFactory.GetTaskParameters*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: GetTaskParameters
  nameWithType: CodeTaskFactory.GetTaskParameters
- uid: Microsoft.Build.Tasks.CodeTaskFactory.Initialize*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: Initialize
  nameWithType: CodeTaskFactory.Initialize
- uid: Microsoft.Build.Tasks.CodeTaskFactory.TaskType*
  parent: Microsoft.Build.Tasks.CodeTaskFactory
  isExternal: false
  name: TaskType
  nameWithType: CodeTaskFactory.TaskType
