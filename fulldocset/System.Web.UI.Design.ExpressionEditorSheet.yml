### YamlMime:ManagedReference
items:
- uid: System.Web.UI.Design.ExpressionEditorSheet
  id: ExpressionEditorSheet
  children:
  - System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)
  - System.Web.UI.Design.ExpressionEditorSheet.GetExpression
  - System.Web.UI.Design.ExpressionEditorSheet.IsValid
  - System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider
  langs:
  - csharp
  name: ExpressionEditorSheet
  nameWithType: ExpressionEditorSheet
  fullName: System.Web.UI.Design.ExpressionEditorSheet
  type: Class
  summary: "Represents a design-time editor sheet for a custom expression. This class must be inherited."
  remarks: "A custom expression editor sheet lets a developer set properties on a custom expression at design-time. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.       When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property. You can select the expression type based on a list of expression prefixes. When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and ExpressionEditorSheet objects to evaluate and convert the expression string based on the syntax for that type of expression. The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.       Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations. Optionally, you can provide a custom ExpressionEditorSheet implementation that defines properties that are used to form the expression. To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.       The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression. Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation. Typically, a custom editor sheet contains multiple properties that are used to build the expression string. The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.       For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time. The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation. The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.       When you inherit from the ExpressionEditorSheet class, you must override the following members:      -   The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.      -   The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation."
  syntax:
    content: public abstract class ExpressionEditorSheet
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: System.Web.UI.Design.ExpressionEditorSheet
  langs:
  - csharp
  name: ExpressionEditorSheet(IServiceProvider)
  nameWithType: ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)
  fullName: System.Web.UI.Design.ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.Design.ExpressionEditorSheet&quot;></xref> class."
  remarks: "Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the ExpressionEditorSheet constructor."
  syntax:
    content: protected ExpressionEditorSheet (IServiceProvider serviceProvider);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "A service provider implementation supplied by the designer host, used to obtain additional design-time services."
  overload: System.Web.UI.Design.ExpressionEditorSheet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.Design.ExpressionEditorSheet.GetExpression
  id: GetExpression
  parent: System.Web.UI.Design.ExpressionEditorSheet
  langs:
  - csharp
  name: GetExpression()
  nameWithType: ExpressionEditorSheet.GetExpression()
  fullName: System.Web.UI.Design.ExpressionEditorSheet.GetExpression()
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values."
  remarks: "A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.       The GetExpression method returns an expression string that is built from the current expression properties. The visual designer allows you to set the expression sheet properties, and then calls the GetExpression method to get the expression string and set the control property value."
  syntax:
    content: public abstract string GetExpression ();
    parameters: []
    return:
      type: System.String
      description: "The custom expression string for the current property values."
  overload: System.Web.UI.Design.ExpressionEditorSheet.GetExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.Design.ExpressionEditorSheet.IsValid
  id: IsValid
  parent: System.Web.UI.Design.ExpressionEditorSheet
  langs:
  - csharp
  name: IsValid
  nameWithType: ExpressionEditorSheet.IsValid
  fullName: System.Web.UI.Design.ExpressionEditorSheet.IsValid
  type: Property
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Gets a value that indicates whether the expression string is valid."
  remarks: "This base implementation always returns `true`."
  syntax:
    content: public virtual bool IsValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the expression string is valid; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.Design.ExpressionEditorSheet.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider
  id: ServiceProvider
  parent: System.Web.UI.Design.ExpressionEditorSheet
  langs:
  - csharp
  name: ServiceProvider
  nameWithType: ExpressionEditorSheet.ServiceProvider
  fullName: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider
  type: Property
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Gets the service provider implementation that is used by the expression editor sheet."
  remarks: "Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the ServiceProvider implementation for a custom expression editor sheet.       The ServiceProvider property can be used to access services that are provided by the designer host. For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer."
  syntax:
    content: public IServiceProvider ServiceProvider { get; }
    return:
      type: System.IServiceProvider
      description: "An <xref:System.IServiceProvider>, typically provided by the design host, that can be used to obtain additional design-time services."
  overload: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: ExpressionEditorSheet(IServiceProvider)
  nameWithType: ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)
  fullName: System.Web.UI.Design.ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Web.UI.Design.ExpressionEditorSheet.GetExpression
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: GetExpression()
  nameWithType: ExpressionEditorSheet.GetExpression()
  fullName: System.Web.UI.Design.ExpressionEditorSheet.GetExpression()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.Design.ExpressionEditorSheet.IsValid
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: IsValid
  nameWithType: ExpressionEditorSheet.IsValid
  fullName: System.Web.UI.Design.ExpressionEditorSheet.IsValid
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: ServiceProvider
  nameWithType: ExpressionEditorSheet.ServiceProvider
  fullName: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider
- uid: System.Web.UI.Design.ExpressionEditorSheet.#ctor*
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: ExpressionEditorSheet
  nameWithType: ExpressionEditorSheet.ExpressionEditorSheet
- uid: System.Web.UI.Design.ExpressionEditorSheet.GetExpression*
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: GetExpression
  nameWithType: ExpressionEditorSheet.GetExpression
- uid: System.Web.UI.Design.ExpressionEditorSheet.IsValid*
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: IsValid
  nameWithType: ExpressionEditorSheet.IsValid
- uid: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider*
  parent: System.Web.UI.Design.ExpressionEditorSheet
  isExternal: false
  name: ServiceProvider
  nameWithType: ExpressionEditorSheet.ServiceProvider
