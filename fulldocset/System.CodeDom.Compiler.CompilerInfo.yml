### YamlMime:ManagedReference
items:
- uid: System.CodeDom.Compiler.CompilerInfo
  id: CompilerInfo
  children:
  - System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType
  - System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters
  - System.CodeDom.Compiler.CompilerInfo.CreateProvider
  - System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})
  - System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)
  - System.CodeDom.Compiler.CompilerInfo.GetExtensions
  - System.CodeDom.Compiler.CompilerInfo.GetHashCode
  - System.CodeDom.Compiler.CompilerInfo.GetLanguages
  - System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid
  langs:
  - csharp
  name: CompilerInfo
  nameWithType: CompilerInfo
  fullName: System.CodeDom.Compiler.CompilerInfo
  type: Class
  summary: "Represents the configuration settings of a language provider. This class cannot be inherited."
  remarks: "Use the CompilerInfo class to determine whether a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation is configured on the computer, or to examine the configuration and compiler settings for a specific language provider.  \n  \n The [\\<system.codedom> Element](../Topic/%3Csystem.codedom%3E%20Element.md) in the machine configuration file contains the language provider and compiler configuration settings. Each configured language provider has a corresponding compiler configuration element. Each element defines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation type, supported language names, supported file name extensions, and compiler parameters.  \n  \n The .NET Framework defines the initial compiler settings in the machine configuration file. Developers and compiler vendors can add configuration settings for a new <xref:System.CodeDom.Compiler.CodeDomProvider> implementation.  \n  \n The CompilerInfo class provides read-only access to these settings in the machine configuration file. Use the <xref:System.CodeDom.Compiler.CompilerInfo.GetLanguages%2A>, <xref:System.CodeDom.Compiler.CompilerInfo.GetExtensions%2A>, and <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A> members to examine the corresponding configuration attributes for a language provider. Use the <xref:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters%2A> method to obtain the compiler options and warning level attribute values for a language provider.  \n  \n For more details on language provider settings in the configuration file, see [Compiler and Language Provider Settings Schema](../Topic/Compiler%20and%20Language%20Provider%20Settings%20Schema.md).  \n  \n> [!NOTE]\n>  This class contains a link demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the immediate caller does not have full-trust permission. For details about link demands, see [Link Demands](../Topic/Link%20Demands.md)."
  example:
  - "The following code example displays language provider configuration settings. Command-line arguments are used to specify a language, file name extension, or provider type. For the given input, the example determines the corresponding language provider and displays the configured language compiler settings.  \n  \n [!code-cpp[CodeDom_CompilerInfo#1](~/add/codesnippet/CPP/t-system.codedom.compile_6_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#1](~/add/codesnippet/VisualBasic/t-system.codedom.compile_6_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#1](~/add/codesnippet/CSharp/t-system.codedom.compile_6_1.cs)]"
  syntax:
    content: public sealed class CompilerInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType
  id: CodeDomProviderType
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: CodeDomProviderType
  nameWithType: CompilerInfo.CodeDomProviderType
  fullName: System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Gets the type of the configured <see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot;></see> implementation."
  remarks: "The machine configuration file contains the fully qualified type name for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. The CodeDomProviderType property value is a <xref:System.Type> instance that represents a configured language provider implementation."
  example:
  - "The following code example determines whether the input language has a configured <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. If there is a provider configured for the specified language, the example displays the language provider configuration settings. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#7](~/add/codesnippet/CPP/p-system.codedom.compile_0_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#7](~/add/codesnippet/VisualBasic/p-system.codedom.compile_0_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#7](~/add/codesnippet/CSharp/p-system.codedom.compile_0_1.cs)]"
  syntax:
    content: public Type CodeDomProviderType { get; }
    return:
      type: System.Type
      description: "A read-only &lt;xref:System.Type&gt; instance that represents the configured language provider type."
  overload: System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType*
  exceptions:
  - type: System.Configuration.ConfigurationException
    commentId: T:System.Configuration.ConfigurationException
    description: "The language provider is not configured on this computer."
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Cannot locate the type because it is a  or empty string.       -or-       Cannot locate the type because the name for the  cannot be found in the configuration file."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters
  id: CreateDefaultCompilerParameters
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: CreateDefaultCompilerParameters()
  nameWithType: CompilerInfo.CreateDefaultCompilerParameters()
  fullName: System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters()
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Gets the configured compiler settings for the language provider implementation."
  remarks: "Use the CreateDefaultCompilerParameters method to examine the compiler settings of the <xref:System.CodeDom.Compiler.CompilerInfo> instances returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A?displayProperty=fullName> and <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A?displayProperty=fullName> methods.  \n  \n The [\\<system.codedom> Element](../Topic/%3Csystem.codedom%3E%20Element.md) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. Each language provider configuration element can contain optional `compilerOptions` and `warningLevel` attributes. These attributes define the default values for the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A?displayProperty=fullName> and <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A?displayProperty=fullName> properties.  \n  \n If the language provider configuration element does not define the `compilerOptions` attribute, the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A?displayProperty=fullName> property value is an empty string (\"\"). If the language provider configuration element does not define the `warningLevel` attribute, the <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A?displayProperty=fullName> property value is â€“1."
  example:
  - "The following code example determines whether the input language has a configured <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. If there is a provider configured for the specified language, the example displays the language provider configuration settings. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#7](~/add/codesnippet/CPP/m-system.codedom.compile_0_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#7](~/add/codesnippet/VisualBasic/m-system.codedom.compile_0_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#7](~/add/codesnippet/CSharp/m-system.codedom.compile_0_1.cs)]"
  syntax:
    content: public System.CodeDom.Compiler.CompilerParameters CreateDefaultCompilerParameters ();
    parameters: []
    return:
      type: System.CodeDom.Compiler.CompilerParameters
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.CreateProvider
  id: CreateProvider
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: CreateProvider()
  nameWithType: CompilerInfo.CreateProvider()
  fullName: System.CodeDom.Compiler.CompilerInfo.CreateProvider()
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Returns a <see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot;></see> instance for the current language provider settings."
  remarks: "The CreateProvider method returns a <xref:System.CodeDom.Compiler.CodeDomProvider> instance for the current language provider settings.       Use the CreateProvider method to get a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a <xref:System.CodeDom.Compiler.CompilerInfo> instance returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A?displayProperty=fullName> or <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A?displayProperty=fullName> method."
  example:
  - "The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#8](~/add/codesnippet/CPP/m-system.codedom.compile_3_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#8](~/add/codesnippet/VisualBasic/m-system.codedom.compile_3_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#8](~/add/codesnippet/CSharp/m-system.codedom.compile_3_1.cs)]"
  syntax:
    content: public System.CodeDom.Compiler.CodeDomProvider CreateProvider ();
    parameters: []
    return:
      type: System.CodeDom.Compiler.CodeDomProvider
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.CreateProvider*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})
  id: CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: CreateProvider(IDictionary<String,String>)
  nameWithType: CompilerInfo.CreateProvider(IDictionary<String,String>)
  fullName: System.CodeDom.Compiler.CompilerInfo.CreateProvider(IDictionary<String,String>)
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Returns a <see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot;></see> instance for the current language provider settings and specified options."
  remarks: "The CreateProvider method returns a <xref:System.CodeDom.Compiler.CodeDomProvider> instance for the current language provider settings and the specified provider options. For information about supported provider options, see the specific CodeDOM provider documentation.       Use the CreateProvider method to get a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a <xref:System.CodeDom.Compiler.CompilerInfo> instance returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A?displayProperty=fullName> or <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A?displayProperty=fullName> method."
  syntax:
    content: public System.CodeDom.Compiler.CodeDomProvider CreateProvider (System.Collections.Generic.IDictionary<string,string> providerOptions);
    parameters:
    - id: providerOptions
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A collection of provider options from the configuration file."
    return:
      type: System.CodeDom.Compiler.CodeDomProvider
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.CreateProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    providerOptions is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The provider does not support options."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CompilerInfo.Equals(Object)
  fullName: System.CodeDom.Compiler.CompilerInfo.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Determines whether the specified object represents the same language provider and compiler settings as the current <see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot;></see>."
  remarks: "This method overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method.       The two instances are considered equal if the values of the following properties are equal:      -   The <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A> property.      -   The <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A>, <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A>, and <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> properties of the <xref:System.CodeDom.Compiler.CompilerParameters> instance returned by the <xref:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters%2A> method."
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "The object to compare with the current ."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.GetExtensions
  id: GetExtensions
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: GetExtensions()
  nameWithType: CompilerInfo.GetExtensions()
  fullName: System.CodeDom.Compiler.CompilerInfo.GetExtensions()
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Returns the file name extensions supported by the language provider."
  remarks: "The [\\<system.codedom> Element](../Topic/%3Csystem.codedom%3E%20Element.md) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. Each configured language provider supports one or more file name extensions. For example, a <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=fullName> might support the file name extensions &quot;.cs&quot; and &quot;.c#&quot;."
  example:
  - "The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#8](~/add/codesnippet/CPP/m-system.codedom.compile_7_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#8](~/add/codesnippet/VisualBasic/m-system.codedom.compile_7_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#8](~/add/codesnippet/CSharp/m-system.codedom.compile_7_1.cs)]"
  syntax:
    content: public string[] GetExtensions ();
    parameters: []
    return:
      type: System.String[]
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.GetExtensions*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.GetHashCode
  id: GetHashCode
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CompilerInfo.GetHashCode()
  fullName: System.CodeDom.Compiler.CompilerInfo.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Returns the hash code for the current instance."
  remarks: "This method overrides the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method.       This method generates the same hash code for two objects that are equal according to the <xref:System.CodeDom.Compiler.CompilerInfo.Equals%2A> method."
  example:
  - "The following code example creates an instance of the <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=fullName> class. The example displays the provider name, hash code, and default file name extension for the new provider instance. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#3](~/add/codesnippet/CPP/m-system.codedom.compile_5_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#3](~/add/codesnippet/VisualBasic/m-system.codedom.compile_5_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#3](~/add/codesnippet/CSharp/m-system.codedom.compile_5_1.cs)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.GetHashCode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.GetLanguages
  id: GetLanguages
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: GetLanguages()
  nameWithType: CompilerInfo.GetLanguages()
  fullName: System.CodeDom.Compiler.CompilerInfo.GetLanguages()
  type: Method
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Gets the language names supported by the language provider."
  remarks: "The [\\<system.codedom> Element](../Topic/%3Csystem.codedom%3E%20Element.md) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. Each configured language provider supports one or more language names. For example, the <xref:System.CodeDom.Compiler.CompilerInfo> object for a <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=fullName> might return an array with the language names &quot;c#&quot;, &quot;cs&quot;, and &quot;csharp&quot;."
  example:
  - "The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#8](~/add/codesnippet/CPP/m-system.codedom.compile_9_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#8](~/add/codesnippet/VisualBasic/m-system.codedom.compile_9_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#8](~/add/codesnippet/CSharp/m-system.codedom.compile_9_1.cs)]"
  syntax:
    content: public string[] GetLanguages ();
    parameters: []
    return:
      type: System.String[]
      description: "To be added."
  overload: System.CodeDom.Compiler.CompilerInfo.GetLanguages*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid
  id: IsCodeDomProviderTypeValid
  parent: System.CodeDom.Compiler.CompilerInfo
  langs:
  - csharp
  name: IsCodeDomProviderTypeValid
  nameWithType: CompilerInfo.IsCodeDomProviderTypeValid
  fullName: System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom.Compiler
  summary: "Returns a value indicating whether the language provider implementation is configured on the computer."
  remarks: "Use the IsCodeDomProviderTypeValid property to check the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation before accessing the provider properties or methods. For example, after you get the language provider settings from the <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method, use the IsCodeDomProviderTypeValid property to verify the provider type implementation before calling the <xref:System.CodeDom.Compiler.CompilerInfo.CreateProvider%2A> method or using the <xref:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType%2A> property."
  example:
  - "The following code example determines whether the input language has a configured <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer. If there is a provider configured for the specified language, the example displays the language provider configuration settings. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.  \n  \n [!code-cpp[CodeDom_CompilerInfo#7](~/add/codesnippet/CPP/p-system.codedom.compile_12_1.cpp)]\n [!code-vb[CodeDom_CompilerInfo#7](~/add/codesnippet/VisualBasic/p-system.codedom.compile_12_1.vb)]\n [!code-cs[CodeDom_CompilerInfo#7](~/add/codesnippet/CSharp/p-system.codedom.compile_12_1.cs)]"
  syntax:
    content: public bool IsCodeDomProviderTypeValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the language provider implementation type is configured on the computer; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CodeDomProviderType
  nameWithType: CompilerInfo.CodeDomProviderType
  fullName: System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CreateDefaultCompilerParameters()
  nameWithType: CompilerInfo.CreateDefaultCompilerParameters()
  fullName: System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters()
- uid: System.CodeDom.Compiler.CompilerParameters
  parent: System.CodeDom.Compiler
  isExternal: false
  name: CompilerParameters
  nameWithType: CompilerParameters
  fullName: System.CodeDom.Compiler.CompilerParameters
- uid: System.CodeDom.Compiler.CompilerInfo.CreateProvider
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CreateProvider()
  nameWithType: CompilerInfo.CreateProvider()
  fullName: System.CodeDom.Compiler.CompilerInfo.CreateProvider()
- uid: System.CodeDom.Compiler.CodeDomProvider
  parent: System.CodeDom.Compiler
  isExternal: false
  name: CodeDomProvider
  nameWithType: CodeDomProvider
  fullName: System.CodeDom.Compiler.CodeDomProvider
- uid: System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CreateProvider(IDictionary<String,String>)
  nameWithType: CompilerInfo.CreateProvider(IDictionary<String,String>)
  fullName: System.CodeDom.Compiler.CompilerInfo.CreateProvider(IDictionary<String,String>)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: CompilerInfo.Equals(Object)
  fullName: System.CodeDom.Compiler.CompilerInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CodeDom.Compiler.CompilerInfo.GetExtensions
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: GetExtensions()
  nameWithType: CompilerInfo.GetExtensions()
  fullName: System.CodeDom.Compiler.CompilerInfo.GetExtensions()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.CodeDom.Compiler.CompilerInfo.GetHashCode
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: CompilerInfo.GetHashCode()
  fullName: System.CodeDom.Compiler.CompilerInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.CodeDom.Compiler.CompilerInfo.GetLanguages
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: GetLanguages()
  nameWithType: CompilerInfo.GetLanguages()
  fullName: System.CodeDom.Compiler.CompilerInfo.GetLanguages()
- uid: System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: IsCodeDomProviderTypeValid
  nameWithType: CompilerInfo.IsCodeDomProviderTypeValid
  fullName: System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid
- uid: System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CodeDomProviderType
  nameWithType: CompilerInfo.CodeDomProviderType
- uid: System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CreateDefaultCompilerParameters
  nameWithType: CompilerInfo.CreateDefaultCompilerParameters
- uid: System.CodeDom.Compiler.CompilerInfo.CreateProvider*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: CreateProvider
  nameWithType: CompilerInfo.CreateProvider
- uid: System.CodeDom.Compiler.CompilerInfo.Equals*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: Equals
  nameWithType: CompilerInfo.Equals
- uid: System.CodeDom.Compiler.CompilerInfo.GetExtensions*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: GetExtensions
  nameWithType: CompilerInfo.GetExtensions
- uid: System.CodeDom.Compiler.CompilerInfo.GetHashCode*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: GetHashCode
  nameWithType: CompilerInfo.GetHashCode
- uid: System.CodeDom.Compiler.CompilerInfo.GetLanguages*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: GetLanguages
  nameWithType: CompilerInfo.GetLanguages
- uid: System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid*
  parent: System.CodeDom.Compiler.CompilerInfo
  isExternal: false
  name: IsCodeDomProviderTypeValid
  nameWithType: CompilerInfo.IsCodeDomProviderTypeValid
