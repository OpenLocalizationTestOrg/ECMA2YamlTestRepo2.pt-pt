### YamlMime:ManagedReference
items:
- uid: System.Data.Metadata.Edm.ComplexType
  id: ComplexType
  children:
  - System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind
  - System.Data.Metadata.Edm.ComplexType.Properties
  langs:
  - csharp
  name: ComplexType
  nameWithType: ComplexType
  fullName: System.Data.Metadata.Edm.ComplexType
  type: Class
  summary: "Represents a complex type in a conceptual model."
  remarks: 'The ComplexType in a conceptual model represents a type that includes a set of properties like an entity type but does not include a key property. For more information about the complex types in a conceptual model, see [Complex Type](http://msdn.microsoft.com/en-us/271d59a2-990e-4d24-b427-27a1c3e99b42) and [How to: Define a Model with Complex Types (Entity Framework)](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6).'
  example:
  - "The following code sample gets a metadata workspace from the connection and uses that metadata workspace to retrieve information about the properties of the complex types in the specified model. Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.  \n  \n The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace> to specify the model. The <xref:System.Data.Metadata.Edm.DataSpace> represents the default name for the conceptual model. The code sample uses the CustomerComplexAddr model that is provided in [How to: Define a Model with Complex Types (Entity Framework)](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6) topic. For an example of the application config file, see [Implementing Complex Type (EDM)](http://msdn.microsoft.com/en-us/82f7fc69-808c-40ff-a23f-ee3fb8dbd9e2) topic.  \n  \n```c#  \nusing System;  \nusing System.Data;  \nusing System.Collections.ObjectModel;  \nusing System.Data.EntityClient;  \nusing System.Data.Metadata.Edm;  \n  \nclass GetComplexTypeMembersExample  \n{  \n  static void Main()  \n  {  \n    try  \n    {  \n      // Establish a connection to the underlying data provider by   \n      // using the connection string specified in the config file.  \n      using (EntityConnection connection =  \n        new EntityConnection(\"Name=CustomerWComplexAddrEntities\"))  \n      {  \n         // Open the connection.  \n         connection.Open();  \n  \n         // Access the metadata workspace.  \n         MetadataWorkspace workspace =   \n            connection.GetMetadataWorkspace();  \n  \n         // Get properties of complex types.  \n         GetProperties(workspace, DataSpace.CSpace);  \n      }  \n    }  \n    catch (MetadataException exceptionMetadata)  \n    {  \n       Console.WriteLine(\"MetadataException: {0}\",  \n              exceptionMetadata.Message);  \n    }  \n    catch (System.Data.MappingException exceptionMapping)  \n    {  \n       Console.WriteLine(\"MappingException: {0}\",  \n               exceptionMapping.Message);  \n    }  \n  }  \n  \n  public static void GetProperties(MetadataWorkspace workspace,   \n      DataSpace model)  \n  {  \n    // Get a collection of complex types.  \n    ReadOnlyCollection<ComplexType> complexTypes =  \n       workspace.GetItems<ComplexType>(model);  \n  \n    // Iterate through the collection to get each complex type.  \n    foreach (ComplexType complexType in complexTypes)  \n    {  \n       Console.WriteLine(  \n         \"\\n\\n***ComplexType Name: {0}, Namespace: {1}\",  \n         complexType.Name,  \n         complexType.NamespaceName);  \n  \n       Console.WriteLine(  \n          \"\\nGet the properties of this \" +  \n          \"ComplexType object ==>\");  \n          // Iterate through the collection to get each property of the   \n          // current ComplexType object.  \n          foreach (EdmProperty property in complexType.Properties)  \n          {  \n            Console.Write(\"   Property Name: {0} \", property.Name);  \n  \n            Console.WriteLine(  \n               \"   Property declaring Type: {0}, edmtype: {1},\" +  \n               \" default: {2}, nullable: {3} \",  \n               property.DeclaringType, property.TypeUsage.EdmType,  \n               property.Default, property.Nullable);  \n          }  \n      }  \n  }  \n}  \n```  \n  \n```vb  \nImports System  \nImports System.Collections.ObjectModel  \nImports System.Data  \nImports System.Data.EntityClient  \nImports System.Data.Metadata.Edm  \n  \nClass GetComplexTypeMembersExample  \n  Public Shared Sub Main()  \n    Try  \n      ' Establish a connection to the underlying data provider by   \n      ' using the connection string specified in the config file.  \n      Using connection As EntityConnection = _  \n         New EntityConnection(\"Name=CustomerWComplexAddrEntities\")  \n  \n         ' Open the conection.  \n         connection.Open()  \n  \n         ' Access the metadata workspace.  \n         Dim workspace As MetadataWorkspace = _  \n            connection.GetMetadataWorkspace  \n  \n         ' Get properties of complex types.  \n         GetProperties(workspace, DataSpace.CSpace)  \n      End Using  \n    Catch exceptionMetadata As MetadataException  \n       Console.WriteLine(\"MetadataException: {0}\", _  \n           exceptionMetadata.Message)  \n    Catch exceptionMapping As MappingException  \n       Console.WriteLine(\"MappingException: {0}\", _  \n           exceptionMapping.Message)  \n     End Try  \n  End Sub  \n  \n  Public Shared Sub GetProperties( _  \n    ByVal workspace As MetadataWorkspace, ByVal model As DataSpace)  \n  \n    ' Get a collection of complex types.  \n    Dim complexTypes As ReadOnlyCollection(Of ComplexType) = _  \n       workspace.GetItems(Of ComplexType)(model)  \n  \n    ' Iterate through the collection to get each complex type.  \n    Dim complexType As ComplexType  \n    For Each complexType In complexTypes  \n       Console.WriteLine( _  \n          ControlChars.Lf & ControlChars.Lf & _  \n          \"***ComplexType Name: {0}, Namespace: {1}\", _  \n          complexType.Name, complexType.NamespaceName)  \n  \n       Console.WriteLine(ControlChars.Lf & _  \n          \"Get the properties of this ComplexType object ==>\")  \n  \n          ' Iterate through the collection to get each property of the   \n          ' current ComplexType object.  \n          Dim property1 As EdmProperty  \n          For Each property1 In complexType.Properties  \n            Console.Write(\"   Property Name: {0} \", property1.Name)  \n            Console.WriteLine( _  \n              \"   Property declaring Type: {0}, edmtype: {1}, \" + _  \n              \"default: {2}, nullable: {3} \", _  \n              New Object() {property1.DeclaringType, _  \n              property1.TypeUsage.EdmType, _  \n              property1.Default, property1.Nullable})  \n          Next  \n        Next  \n    End Sub  \nEnd Class  \n```"
  syntax:
    content: 'public class ComplexType : System.Data.Metadata.Edm.StructuralType'
  inheritance:
  - System.Object
  - System.Data.Metadata.Edm.MetadataItem
  - System.Data.Metadata.Edm.GlobalItem
  - System.Data.Metadata.Edm.EdmType
  - System.Data.Metadata.Edm.StructuralType
  implements: []
  inheritedMembers:
  - System.Data.Metadata.Edm.EdmType.Abstract
  - System.Data.Metadata.Edm.EdmType.BaseType
  - System.Data.Metadata.Edm.EdmType.FullName
  - System.Data.Metadata.Edm.EdmType.GetCollectionType
  - System.Data.Metadata.Edm.EdmType.Name
  - System.Data.Metadata.Edm.EdmType.NamespaceName
  - System.Data.Metadata.Edm.EdmType.ToString
  - System.Data.Metadata.Edm.MetadataItem.Documentation
  - System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)
  - System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions
  - System.Data.Metadata.Edm.MetadataItem.MetadataProperties
  - System.Data.Metadata.Edm.StructuralType.Members
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind
  id: BuiltInTypeKind
  parent: System.Data.Metadata.Edm.ComplexType
  langs:
  - csharp
  name: BuiltInTypeKind
  nameWithType: ComplexType.BuiltInTypeKind
  fullName: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  summary: "Gets the built-in type kind for this <xref href=&quot;System.Data.Metadata.Edm.ComplexType&quot;></xref>."
  syntax:
    content: public override System.Data.Metadata.Edm.BuiltInTypeKind BuiltInTypeKind { get; }
    return:
      type: System.Data.Metadata.Edm.BuiltInTypeKind
      description: "A <xref href=&quot;System.Data.Metadata.Edm.BuiltInTypeKind&quot;></xref> object that represents the built-in type kind for this <xref href=&quot;System.Data.Metadata.Edm.ComplexType&quot;></xref>."
  overload: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ComplexType.Properties
  id: Properties
  parent: System.Data.Metadata.Edm.ComplexType
  langs:
  - csharp
  name: Properties
  nameWithType: ComplexType.Properties
  fullName: System.Data.Metadata.Edm.ComplexType.Properties
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  summary: "Gets the list of properties for this <xref href=&quot;System.Data.Metadata.Edm.ComplexType&quot;></xref>."
  syntax:
    content: public System.Data.Metadata.Edm.ReadOnlyMetadataCollection<System.Data.Metadata.Edm.EdmProperty> Properties { get; }
    return:
      type: System.Data.Metadata.Edm.ReadOnlyMetadataCollection{System.Data.Metadata.Edm.EdmProperty}
      description: "A collection of type &lt;xref:System.Data.Metadata.Edm.ReadOnlyMetadataCollection%601&gt; that contains the list of properties for this <xref href=&quot;System.Data.Metadata.Edm.ComplexType&quot;></xref>."
  overload: System.Data.Metadata.Edm.ComplexType.Properties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Metadata.Edm.StructuralType
  isExternal: false
  name: System.Data.Metadata.Edm.StructuralType
- uid: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind
  parent: System.Data.Metadata.Edm.ComplexType
  isExternal: false
  name: BuiltInTypeKind
  nameWithType: ComplexType.BuiltInTypeKind
  fullName: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind
- uid: System.Data.Metadata.Edm.BuiltInTypeKind
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: BuiltInTypeKind
  nameWithType: BuiltInTypeKind
  fullName: System.Data.Metadata.Edm.BuiltInTypeKind
- uid: System.Data.Metadata.Edm.ComplexType.Properties
  parent: System.Data.Metadata.Edm.ComplexType
  isExternal: false
  name: Properties
  nameWithType: ComplexType.Properties
  fullName: System.Data.Metadata.Edm.ComplexType.Properties
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection{System.Data.Metadata.Edm.EdmProperty}
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: ReadOnlyMetadataCollection<EdmProperty>
  nameWithType: ReadOnlyMetadataCollection<EdmProperty>
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<System.Data.Metadata.Edm.EdmProperty>
  spec.csharp:
  - uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1
    name: ReadOnlyMetadataCollection
    nameWithType: ReadOnlyMetadataCollection
    fullName: ReadOnlyMetadataCollection<System.Data.Metadata.Edm.EdmProperty>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Metadata.Edm.EdmProperty
    name: EdmProperty
    nameWithType: EdmProperty
    fullName: EdmProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind*
  parent: System.Data.Metadata.Edm.ComplexType
  isExternal: false
  name: BuiltInTypeKind
  nameWithType: ComplexType.BuiltInTypeKind
- uid: System.Data.Metadata.Edm.ComplexType.Properties*
  parent: System.Data.Metadata.Edm.ComplexType
  isExternal: false
  name: Properties
  nameWithType: ComplexType.Properties
