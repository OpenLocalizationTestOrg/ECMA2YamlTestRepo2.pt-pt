### YamlMime:ManagedReference
items:
- uid: System.Web.Security.UrlAuthorizationModule
  id: UrlAuthorizationModule
  children:
  - System.Web.Security.UrlAuthorizationModule.#ctor
  - System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  - System.Web.Security.UrlAuthorizationModule.Dispose
  - System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  langs:
  - csharp
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule
  fullName: System.Web.Security.UrlAuthorizationModule
  type: Class
  summary: "Verifies that the user has permission to access the URL requested. This class cannot be inherited."
  remarks: "The UrlAuthorizationModule determines whether the current user is permitted access to the requested URL, based on the user <xref:System.Security.Principal.IIdentity.Name%2A> or the list of roles that a user is a member of. For information about how the user name is determined, see [ASP.NET Authentication](~/add/includes/ajax-current-ext-md.md). For information about how to manage user roles, see [Managing Authorization Using Roles](~/add/includes/ajax-current-ext-md.md).       Authorization for a user or a role is managed using the  configuration element. You can allow or deny a user or a role using the `allow` or `deny` subelements, respectively. The `allow` and `deny` subelements are interpreted in the order they appear in the configuration. Once an element specifies that access is allowed or denied, the UrlAuthorizationModule completes its authorization check. For example, the following  section from a Web.config file requires users to log on (by denying anonymous users), and then allows only users in the Administrators role to have access. Users not in the Administrators role are denied.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```       A user or role must be specifically denied to refuse the user or role permission to a URL. That is, if the previous example had not specified the `<deny users=&quot;*&quot; />` element, then all authenticated users would have been allowed access to the requested URL, regardless of what role they were a member of."
  example:
  - "The following code example grants access to Kim and members of the Admins role, while denying it to John and all anonymous users.  \n  \n```  \n<authorization>  \n  <allow users=\"Kim\"/>  \n  <allow roles=\"Admins\"/>  \n  <deny users=\"John\"/>  \n  <deny users=\"?\"/>  \n</authorization>  \n```"
  syntax:
    content: 'public sealed class UrlAuthorizationModule : System.Web.IHttpModule'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpModule
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  id: '#ctor'
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates an instance of the <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref> class."
  remarks: "This constructor is not intended to be called from application code.       ASP.NET calls this constructor to create an instance of the <xref:System.Web.Security.UrlAuthorizationModule> class. After calling the constructor, it calls the <xref:System.Web.Security.UrlAuthorizationModule.Init%2A> method to initialize the new <xref:System.Web.Security.UrlAuthorizationModule> object."
  syntax:
    content: public UrlAuthorizationModule ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  id: CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Determines whether the user has access to the requested file."
  remarks: "The CheckUrlAccessForPrincipal method checks to see whether the current user is granted access to the requested file in the Web.config file for the application.       If the HTTP verb used to make the request is `GET`, `POST`, or `HEAD`, the CheckUrlAccessForPrincipal method checks for read access to the file. If any other verb is used, the CheckUrlAccessForPrincipal checks for read/write access to the file.       For more information and an example Web.config file, see the <xref:System.Web.Security.UrlAuthorizationModule> class documentation."
  syntax:
    content: public static bool CheckUrlAccessForPrincipal (string virtualPath, System.Security.Principal.IPrincipal user, string verb);
    parameters:
    - id: virtualPath
      type: System.String
      description: "The virtual path to the file."
    - id: user
      type: System.Security.Principal.IPrincipal
      description: "An <xref:System.Security.Principal.IPrincipal> object representing the current user."
    - id: verb
      type: System.String
      description: "The HTTP verb used to make the request."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current user can access the file; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>virtualPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>user</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>verb</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>virtualPath</code> is outside of the application root path."
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  id: Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Releases all resources, other than memory, used by the <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref>."
  remarks: "This method is not intended to be called from application code."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  id: Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Initializes the <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref> object."
  remarks: "This method is not intended to be called from application code.       The Init method ensures that the <xref:System.Web.Security.UrlAuthorizationModule> is included in the processing of the <xref:System.Web.HttpApplication.AuthorizeRequest> event."
  syntax:
    content: public void Init (System.Web.HttpApplication app);
    parameters:
    - id: app
      type: System.Web.HttpApplication
      description: "The current <xref href=&quot;System.Web.HttpApplication&quot;></xref> instance."
  overload: System.Web.Security.UrlAuthorizationModule.Init*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.Security.UrlAuthorizationModule.#ctor*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose
  nameWithType: UrlAuthorizationModule.Dispose
- uid: System.Web.Security.UrlAuthorizationModule.Init*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init
  nameWithType: UrlAuthorizationModule.Init
