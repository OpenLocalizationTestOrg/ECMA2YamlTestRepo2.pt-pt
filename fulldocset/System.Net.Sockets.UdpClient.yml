### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "Fornece serviços de rede do protocolo UDP (User Datagram)."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe."
  remarks: "Este construtor cria uma nova <xref:System.Net.Sockets.UdpClient>e permite que o fornecedor de serviço subjacente atribuir o mais adequado local IPv4 endereço e número de porta.</xref:System.Net.Sockets.UdpClient> Se for utilizado este construtor, o <xref:System.Net.Sockets.UdpClient>instância está definida com uma família de endereços de IPv4 que não podem ser alteradas ou substituído por uma chamada de método de ligação com um destino de IPv6.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Este construtor não é adequado para efetuar a adesão de um grupo de multicast porque não efetuar o enlace de socket. Além disso, funciona apenas com os tipos de endereços IPv4."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e associa o número de porta local fornecido."
  remarks: "Este construtor cria um subjacente <xref:System.Net.Sockets.Socket>e associa a partir do qual pretende comunicar o número de porta.</xref:System.Net.Sockets.Socket> Utilize este construtor caso só esteja interessado na definir o número de porta local. O fornecedor subjacente do serviço irá atribuir o endereço IP local. Se passar 0 para o construtor, o fornecedor subjacente do serviço atribuirá um número de porta. Se for utilizado este construtor, o <xref:System.Net.Sockets.UdpClient>instância está definida com uma família de endereços de IPv4 que não podem ser alteradas ou substituído por uma chamada de método de ligação com um destino de IPv6.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Este construtor funciona apenas com os tipos de endereços IPv4."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "O número de porta local que pretende comunicar."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> port </code> parâmetro é maior <xref:System.Net.IPEndPoint.MaxPort>ou menor do que <xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort> </xref:System.Net.IPEndPoint.MaxPort>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e associa ao ponto final local especificado."
  remarks: "Este construtor cria uma nova <xref:System.Net.Sockets.UdpClient>ligando- se de que o <xref:System.Net.IPEndPoint>especificada pelo `localEP` parâmetro.</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> Antes de chamar este construtor, tem de criar um <xref:System.Net.IPEndPoint>utilizando o número de porta e o endereço IP do qual pretende enviar e receber dados.</xref:System.Net.IPEndPoint> Não é necessário especificar um número de porta e o endereço IP local para enviar e receber dados. Se não o fizer, o fornecedor subjacente do serviço atribuirá o mais adequado local IP endereço e número de porta.       Se for utilizado este construtor, o <xref:System.Net.Sockets.UdpClient>instância está definida com a família de endereços especificada pelo `localEP` parâmetro que não pode ser alterado ou substituído por uma chamada de método ligar com uma família de endereços diferente.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>esse respresents o ponto final local para o qual vincular a ligação do UDP.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe."
  remarks: "O `family` parâmetro determina se o serviço de escuta utiliza um endereço de versão 4 de IP (IPv4) ou uma IP versão 6 (IPv6) endereço. Para utilizar um endereço IPv4, passar o <xref:System.Net.Sockets.AddressFamily>valor.</xref:System.Net.Sockets.AddressFamily> Para utilizar um endereço IPv6, passar o <xref:System.Net.Sockets.AddressFamily>valor.</xref:System.Net.Sockets.AddressFamily> Transmissão de qualquer outro valor irá fazer com que o método emitir um <xref:System.ArgumentException>.</xref:System.ArgumentException>       Se for utilizado este construtor, o <xref:System.Net.Sockets.UdpClient>instância está definida com a família de endereços especificada pelo `family` parâmetro que não pode ser alterado ou substituído por uma chamada de método ligar com uma família de endereços diferente.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       O UdpClient não é adequado para efetuar a adesão de um grupo de multicast porque não efetuar o enlace de socket."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Um do <xref:System.Net.Sockets.AddressFamily>valores que especifica o esquema de endereçamento de socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e associa o número de porta local fornecido."
  remarks: "Este construtor cria um subjacente <xref:System.Net.Sockets.Socket>e associa a partir do qual pretende comunicar o número de porta.</xref:System.Net.Sockets.Socket>       O `family` parâmetro determina se o serviço de escuta utiliza um endereço de versão 4 de IP (IPv4) ou uma IP versão 6 (IPv6) endereço. Para utilizar um endereço IPv4, passar o <xref:System.Net.Sockets.AddressFamily>valor.</xref:System.Net.Sockets.AddressFamily> Para utilizar um endereço IPv6, passar o <xref:System.Net.Sockets.AddressFamily>valor.</xref:System.Net.Sockets.AddressFamily> Transmissão de qualquer outro valor irá fazer com que o método emitir um <xref:System.ArgumentException>.</xref:System.ArgumentException>       Se for utilizado este construtor, o <xref:System.Net.Sockets.UdpClient>instância está definida com a família de endereços especificada pelo `family` parâmetro que não pode ser alterado ou substituído por uma chamada de método ligar com uma família de endereços diferente.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, consulte o Sockets do Windows versão 2 API erro código documentação no MSDN para uma descrição detalhada do erro."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "A porta na qual escutar de entrada de tentativas de ligação."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Um do <xref:System.Net.Sockets.AddressFamily>valores que especifica o esquema de endereçamento de socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>é maior do que <xref:System.Net.IPEndPoint.MaxPort> ou inferior a <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e estabelece um anfitrião remoto predefinido."
  remarks: "Este construtor inicializa uma nova <xref:System.Net.Sockets.UdpClient>e estabelece um anfitrião remoto utilizando o `hostname` e `port` parâmetros.</xref:System.Net.Sockets.UdpClient> Estabelecer um anfitrião remoto predefinido é opcional. Se utilizar este construtor, não é necessário especificar um anfitrião remoto em cada chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A> Especificação de um anfitrião remoto predefinido, limita a esse anfitrião apenas. Pode alterar o anfitrião remoto predefinido em qualquer altura ao chamar o <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se pretender especificar um anfitrião remoto na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método, não utilize este construtor.</xref:System.Net.Sockets.UdpClient.Send%2A>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "O nome de anfitrião DNS remoto ao qual pretende ligar."
    - id: port
      type: System.Int32
      description: "O número de porta remoto ao qual pretende ligar."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>Não é entre <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um valor que indica se um anfitrião remoto predefinido foi estabelecido."
  remarks: "Classes derivadas de <xref:System.Net.Sockets.UdpClient>pode utilizar esta propriedade para determinar se um anfitrião remoto predefinido foi estabelecido.</xref:System.Net.Sockets.UdpClient> Pode estabelecer um anfitrião remoto predefinido utilizando o construtor adequado ou ao chamar o <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se estabelecer um anfitrião remoto predefinido, não é possível especificar um anfitrião remoto na sua chamada para <xref:System.Net.Sockets.UdpClient.Send%2A>.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a ligação ativa; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ativa ou desativa a transversal tradução de endereços de rede (NAT) num <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> instância."
  remarks: "O método de AllowNatTraversal é utilizado para ativar ou desativar transversal NAT para um <xref:System.Net.Sockets.UdpClient>instância.</xref:System.Net.Sockets.UdpClient> A transversal NAT pode ser fornecida a utilizar Teredo, 6to4 ou um túnel ISATAP.       Quando o `allowed` parâmetro seja falso, a <xref:System.Net.Sockets.SocketOptionName>opção de socket associado está definida como <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Isto desativa explicitamente transversal NAT para um <xref:System.Net.Sockets.UdpClient>instância.</xref:System.Net.Sockets.UdpClient>       Quando o `allowed` parâmetro for VERDADEIRO, a <xref:System.Net.Sockets.SocketOptionName>opção de socket associado está definida como <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Isto poderá permitir transversal NAT para um <xref:System.Net.Sockets.UdpClient>consoante as regras de firewall no local no sistema.</xref:System.Net.Sockets.UdpClient>       Um endereço Teredo é um endereço IPv6 com o prefixo de 2001:: / 32. Endereços de Teredo podem ser devolvidos através da resolução de nome DNS normal ou enumerados como um endereço de IPv6 atribuído a uma interface local."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "Um valor booleano que especifica se pretende ativar ou desativar a transversal NAT."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém a quantidade de dados recebidos a partir da rede que está disponível para leitura."
  remarks: "A propriedade disponível é utilizada para determinar que a quantidade de dados em fila na memória intermédia de rede para leitura. Se os dados estão disponíveis, chamar <xref:System.Net.Sockets.NetworkStream.Read%2A>para obter os dados.</xref:System.Net.Sockets.NetworkStream.Read%2A> Se não estão disponíveis dados, a propriedade disponível devolve 0.       Se o anfitrião remoto encerra ou fecha a ligação, a propriedade disponível emite <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico e consulte a documentação de código de erro de API de versão 2 do Sockets do Windows na biblioteca do MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ para uma descrição detalhada do erro.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "O número de bytes de dados recebidos a partir da rede."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à socket. Consulte a secção observações para obter mais informações."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Recebe uma datagrama de um anfitrião remoto no modo assíncrono."
  remarks: "A operação de pedido BeginReceive assíncrona têm de ser concluída por chamar a <xref:System.Net.Sockets.UdpClient.EndReceive%2A>método.</xref:System.Net.Sockets.UdpClient.EndReceive%2A> Normalmente, o método é invocado pelo `requestCallback` delegar.       Este método não bloqueia até que a operação foi concluída. Para bloquear até que a operação foi concluída, utilize o <xref:System.Net.Sockets.UdpClient.Receive%2A>método.</xref:System.Net.Sockets.UdpClient.Receive%2A>       Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação foi concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo utilizador que contém informações sobre a operação de receção. Este objeto é passado para o `requestCallback` delegar quando a operação foi concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que faça referência a recepção assíncrona.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia uma datagrama para um anfitrião remoto no modo assíncrono. O destino foi anteriormente especificado por uma chamada para <xref:System.Net.Sockets.UdpClient.Connect*>.</xref:System.Net.Sockets.UdpClient.Connect*>"
  remarks: "Deve ser concluir a operação de BeginSend assíncrona, chamando o <xref:System.Net.Sockets.UdpClient.EndSend%2A>método.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Normalmente, o método é invocado pelo `requestCallback` delegar.       Este método não bloqueia enquanto a operação for concluída. Para bloquear até que a operação foi concluída, utilize um do <xref:System.Net.Sockets.UdpClient.Send%2A>sobrecargas do método.</xref:System.Net.Sockets.UdpClient.Send%2A>       Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que contém os dados a serem enviados.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes a enviar."
    - id: requestCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação foi concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo utilizador que contém informações sobre a operação de envio. Este objeto é passado para o `requestCallback` delegar quando a operação foi concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que referencia o envio assíncrono.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia uma datagrama para um destino de forma assíncrona. O destino é especificado por <xref:System.Net.EndPoint>.</xref:System.Net.EndPoint>"
  remarks: "Deve ser concluir a operação de BeginSend assíncrona, chamando o <xref:System.Net.Sockets.UdpClient.EndSend%2A>método.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Normalmente, o método é invocado pelo `requestCallback` delegar.       Este método não bloqueia até que a operação foi concluída. Para bloquear até que a operação foi concluída, utilize um do <xref:System.Net.Sockets.UdpClient.Send%2A>sobrecargas do método.</xref:System.Net.Sockets.UdpClient.Send%2A>       Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que contém os dados a serem enviados.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes a enviar."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "O <xref:System.Net.EndPoint>que representa o destino para os dados.</xref:System.Net.EndPoint>"
    - id: requestCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação foi concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo utilizador que contém informações sobre a operação de envio. Este objeto é passado para o `requestCallback` delegar quando a operação foi concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que referencia o envio assíncrono.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia uma datagrama para um destino de forma assíncrona. O destino é especificado pelo nome de anfitrião e o número de porta."
  remarks: "Deve ser concluir a operação de BeginSend assíncrona, chamando o <xref:System.Net.Sockets.UdpClient.EndSend%2A>método.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Normalmente, o método é invocado pelo `requestCallback` delegar.       Este método não bloqueia até que a operação foi concluída. Para bloquear até que a operação foi concluída, utilize um do <xref:System.Net.Sockets.UdpClient.Send%2A>sobrecargas do método.</xref:System.Net.Sockets.UdpClient.Send%2A>       Para obter informações detalhadas sobre como utilizar o modelo de programação assíncrono, consulte [chamada síncrona métodos de forma assíncrona](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que contém os dados a serem enviados.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes a enviar."
    - id: hostname
      type: System.String
      description: "O anfitrião de destino."
    - id: port
      type: System.Int32
      description: "O número de porta de destino."
    - id: requestCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>delegado que referencia o método a invocar quando a operação foi concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo utilizador que contém informações sobre a operação de envio. Este objeto é passado para o `requestCallback` delegar quando a operação foi concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objeto que referencia o envio assíncrono.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define a rede subjacente <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.UdpClient>cria um <xref:System.Net.Sockets.Socket>utilizado para enviar e receber dados através de uma rede.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient> Classes derivadas de <xref:System.Net.Sockets.UdpClient>pode utilizar esta propriedade obter ou definir esta <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient> Utilize o subjacente <xref:System.Net.Sockets.Socket>devolvidos por cliente se necessitar de acesso para além disso que <xref:System.Net.Sockets.UdpClient>fornece.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket> Também pode utilizar o cliente para definir o subjacente <xref:System.Net.Sockets.Socket>para um <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> existente</xref:System.Net.Sockets.Socket> Isto é útil se pretender tirar partido de simplicidade da <xref:System.Net.Sockets.UdpClient>utilização de um <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> já existente</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "Rede subjacente <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Fecha a ligação do UDP."
  remarks: "O fecho desativa o subjacente <xref:System.Net.Sockets.Socket>e disponibiliza todos os recursos geridos e associados <xref:System.Net.Sockets.UdpClient>.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Estabelece um anfitrião remoto da predefinição utilizando o ponto final de rede especificado."
  remarks: "O <xref:System.Net.Sockets.UdpClient.Connect%2A>método estabelece um anfitrião remoto da predefinição com o valor especificado no `endPoint` parâmetro.</xref:System.Net.Sockets.UdpClient.Connect%2A> Depois de estabelecido, não terá de especificar um anfitrião remoto em cada chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A>       Estabelecer um anfitrião remoto predefinido é opcional. Especificação de um anfitrião remoto predefinido, limita a esse anfitrião apenas. Se pretende enviar os datagramas para outro anfitrião remoto, tem de se outra chamada para o <xref:System.Net.Sockets.UdpClient.Connect%2A>método ou criar outro <xref:System.Net.Sockets.UdpClient>sem um anfitrião remoto predefinido.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se estabelecer uma predefinição remota anfitrião e também de fornecer um anfitrião remoto na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método, <xref:System.Net.Sockets.UdpClient.Send%2A>irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Se chama o <xref:System.Net.Sockets.Socket.Connect%2A>método, qualquer datagramas que chegam a partir de um endereço que a predefinição especificada será eliminada.</xref:System.Net.Sockets.Socket.Connect%2A> Não é possível definir o anfitrião remoto predefinido para um endereço de difusão através deste método, a menos que herda <xref:System.Net.Sockets.UdpClient>, utilize o método de cliente para obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Pode, contudo, dados difusão predefinido difundem endereço, 255.255.255.255, se especificar <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Se a sua aplicação requer maior controlo sobre os endereços de difusão, também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Protocolo UDP o, uma vez que é a transmissão, o <xref:System.Net.Sockets.UdpClient.Connect%2A>não bloqueia o método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Não chame o <xref:System.Net.Sockets.UdpClient.Connect%2A>método se pretender receber multicasted datagramas.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que especifica o ponto final da rede para o qual pretende enviar dados.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> está fechado."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Estabelece um anfitrião remoto da predefinição utilizando o número de porta e o endereço IP especificado."
  remarks: "O <xref:System.Net.Sockets.UdpClient.Connect%2A>método estabelece anfitrião remoto predefinido utilizando os valores especificados no `addr` e `port` parâmetros.</xref:System.Net.Sockets.UdpClient.Connect%2A> Depois de estabelecido, não terá de especificar um anfitrião remoto em cada chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A>       Estabelecer um anfitrião remoto predefinido é opcional. Especificação de um anfitrião remoto predefinido, limita a esse anfitrião apenas. Se pretende enviar os datagramas para outro anfitrião remoto, tem de se outra chamada para o <xref:System.Net.Sockets.UdpClient.Connect%2A>método ou criar outro <xref:System.Net.Sockets.UdpClient>sem um anfitrião remoto predefinido.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se estabelecer uma predefinição remota anfitrião e também de fornecer um anfitrião remoto na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método, <xref:System.Net.Sockets.UdpClient.Send%2A>irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Se chama o <xref:System.Net.Sockets.Socket.Connect%2A>método, qualquer datagramas que chegam a partir de um endereço que a predefinição especificada será eliminada.</xref:System.Net.Sockets.Socket.Connect%2A> Não é possível definir o anfitrião remoto predefinido para um endereço de difusão através deste método, a menos que herda <xref:System.Net.Sockets.UdpClient>, utilize o método de cliente para obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Pode, contudo, dados difusão predefinido difundem endereço, 255.255.255.255, se especificar <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Se a sua aplicação requer maior controlo sobre os endereços de difusão, também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Protocolo UDP o, uma vez que é a transmissão, o <xref:System.Net.Sockets.UdpClient.Connect%2A>não bloqueia o método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Não chame o <xref:System.Net.Sockets.UdpClient.Connect%2A>método se pretender receber multicasted datagramas.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "O <xref:System.Net.IPAddress>do anfitrião remoto ao qual pretende enviar dados.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "O número de porta para o qual pretende enviar dados."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>está fechado."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>Não é entre <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Estabelece um anfitrião remoto de predefinição utilizando especificado número de porta e nome de anfitrião."
  remarks: "O método de ligar estabelece anfitrião remoto predefinido utilizando os valores especificados no `port` e `hostname` parâmetros. Depois de estabelecido, não terá de especificar um anfitrião remoto em cada chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A>       Estabelecer um anfitrião remoto predefinido é opcional. Especificação de um anfitrião remoto predefinido, limita a esse anfitrião apenas. Se pretende enviar os datagramas para outro anfitrião remoto, tem de se outra chamada para o método de ligar ou criar outro <xref:System.Net.Sockets.UdpClient>sem um anfitrião remoto predefinido.</xref:System.Net.Sockets.UdpClient>       Se estabelecer uma predefinição remota anfitrião e também de fornecer um anfitrião remoto na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método, <xref:System.Net.Sockets.UdpClient.Send%2A>irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Se chama o <xref:System.Net.Sockets.Socket.Connect%2A>método, qualquer datagramas que chegam a partir de um endereço que a predefinição especificada será eliminada.</xref:System.Net.Sockets.Socket.Connect%2A> Não é possível definir o anfitrião remoto predefinido para um endereço de difusão através deste método, a menos que herda <xref:System.Net.Sockets.UdpClient>, utilize o método de cliente para obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Pode, contudo, dados difusão predefinido difundem endereço, 255.255.255.255, se especificar <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>na sua chamada para o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Se a sua aplicação requer maior controlo sobre os endereços de difusão, também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Protocolo UDP o, uma vez que é a transmissão, o método de ligação não bloquear. Não chame o método de ligação se pretender receber multicasted datagramas."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "O nome DNS do anfitrião remoto ao qual pretende enviar dados."
    - id: port
      type: System.Int32
      description: "O número da porta no anfitrião remoto ao qual pretende enviar dados."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> está fechado."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>Não é entre <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Liberta os recursos geridos e utilizados pelo <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público `Dispose()`método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca protegida `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro for true, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Net.Sockets.UdpClient>referências.</xref:System.Net.Sockets.UdpClient> Este método invoca o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um <xref:System.Boolean>valor que especifica se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> permite que os datagramas de Internet Protocol (IP) ser fragmentados.</xref:System.Boolean>"
  remarks: "Os datagramas necessitam de fragmentação ao respetivo tamanho excede a transferência de unidade máxima (MTU) a média de transmissão. Os datagramas poderão ser fragmentados através do envio de anfitrião ou um router intermédio. Se um datagrama tem de ser fragmentada e o <xref:System.Net.Sockets.Socket.DontFragment%2A>opção estiver definida, o datagrama é rejeitado e é enviada uma mensagem de erro do controlo mensagem ICMP (Internet Protocol) para o remetente de datagrama.</xref:System.Net.Sockets.Socket.DontFragment%2A>"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> permite a fragmentação de datagrama; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Esta propriedade pode ser definida apenas para sockets que utilizam o <xref:System.Net.Sockets.AddressFamily>sinalizador ou <xref:System.Net.Sockets.AddressFamily>sinalizador.</xref:System.Net.Sockets.AddressFamily> </xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Deixa a um grupo de multicast."
  remarks: "O método DropMulticastGroup withdraws <xref:System.Net.Sockets.UdpClient>do grupo de multicast identificado por <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> especificado</xref:System.Net.Sockets.UdpClient> Depois de chamar o método de DropMulticastGroup subjacentes <xref:System.Net.Sockets.Socket>envia um pacote de Internet Group Management Protocol (IGMP) para o router, remover o router do grupo de multicast.</xref:System.Net.Sockets.Socket> Após um <xref:System.Net.Sockets.UdpClient>withdraws do grupo já não será possível receber os datagramas enviados nesse grupo.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "O <xref:System.Net.IPAddress>do grupo de multicast para deixar.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O endereço IP não é compatível com o <xref:System.Net.Sockets.AddressFamily>valor que define o esquema de endereçamento de socket.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Deixa a um grupo de multicast."
  remarks: "O método DropMulticastGroup withdraws <xref:System.Net.Sockets.UdpClient>do grupo de multicast identificado por <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> especificado</xref:System.Net.Sockets.UdpClient> Depois de chamar o método de DropMulticastGroup subjacentes <xref:System.Net.Sockets.Socket>envia um pacote de Internet Group Management Protocol (IGMP) para o router, remover o router do grupo de multicast.</xref:System.Net.Sockets.Socket> Após um <xref:System.Net.Sockets.UdpClient>withdraws do grupo já não será possível receber os datagramas enviados nesse grupo.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se receber um <xref:System.Net.Sockets.SocketException>, utilize o <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>propriedade para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Após obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "O <xref:System.Net.IPAddress>do grupo de multicast para deixar.</xref:System.Net.IPAddress>"
    - id: ifindex
      type: System.Int32
      description: "O endereço local do grupo de multicast, a sair."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O endereço IP não é compatível com o <xref:System.Net.Sockets.AddressFamily>valor que define o esquema de endereçamento de socket.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um <xref:System.Boolean>valor que especifica se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> pode enviar ou receber pacotes de difusão.</xref:System.Boolean>"
  remarks: "Difusão está limitado a uma sub-rede específica. Pode difusão para a sub-rede local através do envio de um pacote para 255.255.255.255; em alternativa, pode utilizar o endereço de difusão, que é a parte da rede de um endereço Internet Protocol (IP) com todos os bits definidos na parte do anfitrião. Por exemplo, se o seu endereço IP é 192.168.1.40 (um endereço de classe C, com a parte de rede, como os três primeiros octetos e parte do anfitrião é o último octeto), o seu endereço de difusão é 192.168.1.255."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> permite que os pacotes de difusão; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Termina uma assíncronas pendentes receber."
  remarks: "Este blocos de método até que a operação esteja concluída.       Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Sockets.UdpClient.Receive%2A>método.</xref:System.Net.Sockets.UdpClient.Receive%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objecto devolvido por uma chamada para <xref:System.Net.Sockets.UdpClient.BeginReceive*>.</xref:System.Net.Sockets.UdpClient.BeginReceive*> </xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "O ponto final remoto especificado."
    return:
      type: System.Byte[]
      description: "Se tiver êxito, o número de bytes recebidos. Se não, este método devolve 0."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>Não foi devolvido por uma chamada para o <xref:System.Net.Sockets.UdpClient.BeginReceive*> método."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive anteriormente foi chamado para a leitura assíncrona."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder a <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> subjacente Consulte a secção observações para obter mais informações."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Termina um envio assíncrono pendente."
  remarks: "Este blocos de método até que a operação esteja concluída.       Para efetuar esta operação de forma síncrona, utilize o <xref:System.Net.Sockets.UdpClient.Send%2A>método.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>objecto devolvido por uma chamada para <xref:System.Net.Sockets.UdpClient.BeginSend*>.</xref:System.Net.Sockets.UdpClient.BeginSend*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Se tiver êxito, o número de bytes enviados para o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>Não foi devolvido por uma chamada para o <xref:System.Net.Sockets.Socket.BeginSend*> método."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>anteriormente foi chamado para a leitura assíncrona.</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à socket subjacente. Consulte a secção observações para obter mais informações."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um <xref:System.Boolean>valor que especifica se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> permite que apenas um cliente utilizar uma porta.</xref:System.Boolean>"
  remarks: "Por predefinição, vários clientes podem utilizar uma porta específica; No entanto, apenas um dos clientes possa realizar operações sobre o tráfego de rede enviado para a porta. Pode utilizar a propriedade ExclusiveAddressUse para impedir que vários clientes utilizar uma porta específica.       Esta propriedade tem de ser definida antes do socket subjacente está vinculado a uma porta de cliente. Se chamar <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, ou <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, a porta de cliente está vinculada como efeito colateral construtor, e, subsequentemente, não é possível definir a propriedade ExclusiveAddressUse</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> permite que apenas um cliente utilizar uma porta específica; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> no Windows Server 2003 e Windows XP Service Pack 2 e posterior, e <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para todas as outras versões."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao tentar aceder à socket subjacente."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adiciona um <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a um grupo de multicast."
  remarks: "O método JoinMulticastGroup subscreve o <xref:System.Net.Sockets.UdpClient>para um grupo de multicast utilizando o <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> especificado</xref:System.Net.Sockets.UdpClient> Depois de chamar o método de JoinMulticastGroup subjacentes <xref:System.Net.Sockets.Socket>envia um pacote de Internet Group Management Protocol (IGMP) para o router pedir associação ao grupo de multicast.</xref:System.Net.Sockets.Socket> O intervalo de endereços multicast é 224.0.0.0 a 239.255.255.255. Se especificar um endereço fora deste intervalo ou se o router para os quais é efetuado o pedido não é transferida por multicast ativados, <xref:System.Net.Sockets.UdpClient>irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro. Uma vez a <xref:System.Net.Sockets.UdpClient>está listado com o router como membro do grupo de multicast, será capaz de receber os datagramas multicasted enviados para o <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> especificado</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Tem de criar o <xref:System.Net.Sockets.UdpClient>utilizando o número de porta multicast; caso contrário, não será capaz de receber os datagramas multicasted.</xref:System.Net.Sockets.UdpClient> Não chame o <xref:System.Net.Sockets.UdpClient.Connect%2A>método antes de chamar o método JoinMulticastGroup, ou o <xref:System.Net.Sockets.UdpClient.Receive%2A>método não funcionará.</xref:System.Net.Sockets.UdpClient.Receive%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Não é necessário pertence a um grupo de multicast para enviar os datagramas para um endereço IP multicast.       Antes de a associar um grupo de multicast, certifique-se de que socket está vinculado à porta ou o ponto final. Pode fazê-lo ao chamar um dos construtores que aceita uma porta ou um ponto final como parâmetro.       Para parar a receção multicasted datagramas, chame o <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>método e forneça o <xref:System.Net.IPAddress>do grupo a partir da qual gostaria de abandonar.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > No caso de IPv6, existem vários intervalos de endereços multicast, pode escolher. Consulte o 2375 de RFC da IETF.      > [!NOTE] > Não é possível chamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>num <xref:System.Net.Sockets.UdpClient>construído sem uma porta específica local (ou seja, utilizando o <xref:System.Net.Sockets.UdpClient.%23ctor>ou <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>construtor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "O multicast <xref:System.Net.IPAddress>do grupo que pretende associar.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O endereço IP não é compatível com o <xref:System.Net.Sockets.AddressFamily>valor que define o esquema de endereçamento de socket.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adiciona um <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a um grupo de multicast."
  remarks: "Antes de a associar um grupo de multicast, lembre-se de que o socket está vinculado à porta ou o ponto final. Pode fazê-lo ao chamar um dos construtores que aceita uma porta ou um ponto final como parâmetro.       O `infindex` parâmetro é utilizado para identificar uma interface de hardware na mesma ligação.      > [!NOTE] > Existem vários intervalos de endereços multicast à sua escolha. Consulte o RFC da IEFT 2375.      > [!NOTE] > Não é possível chamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>num <xref:System.Net.Sockets.UdpClient>construído sem uma porta específica local (ou seja, utilizando o <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>ou <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>construtor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "O índice da interface associado com o endereço IP local em que pretende aderir ao grupo de multicast."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "O multicast <xref:System.Net.IPAddress>do grupo que pretende associar.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adiciona um <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a um grupo de multicast com a hora especificada em direto (TTL)."
  remarks: "O <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>método subscreve <xref:System.Net.Sockets.UdpClient>um grupo de multicast utilizando o <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> especificada</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Após a chamada de <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>método, subjacentes <xref:System.Net.Sockets.Socket>envia um pacote de Internet Group Management Protocol (IGMP) para o router pedir associação ao grupo de multicast.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> O intervalo de endereços multicast é 224.0.0.0 a 239.255.255.255. Se especificar um endereço fora deste intervalo ou se o router para os quais é efetuado o pedido não é transferida por multicast ativados, <xref:System.Net.Sockets.UdpClient>irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro. O `timeToLive` parâmetro especifica quantos saltos de router serão permitidos para uma datagrama multicasted antes de ser eliminadas. Uma vez a <xref:System.Net.Sockets.UdpClient>está listado com o router como membro do grupo de multicast, será capaz de receber os datagramas multicasted enviados para o <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> especificado</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Tem de criar o <xref:System.Net.Sockets.UdpClient>utilizando o número de porta multicast caso contrário não poderá receber os datagramas multicasted.</xref:System.Net.Sockets.UdpClient> Não chame o <xref:System.Net.Sockets.UdpClient.Connect%2A>método antes de chamar o <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>método ou o método receive não funcionará.</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Não é necessário pertence a um grupo de multicast para enviar os datagramas para um endereço IP multicast.       Antes de a associar um grupo de multicast certificar-se de que o socket está vinculado à porta ou o ponto final. Pode fazê-lo ao chamar um dos construtores que aceita como parâmetro de uma porta ou um ponto final.       Para parar a receção multicasted datagramas, chame o <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>método e forneça o <xref:System.Net.IPAddress>do grupo a partir da qual gostaria de abandonar.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > Não é possível chamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>num <xref:System.Net.Sockets.UdpClient>construído sem uma porta específica local (ou seja, utilizando o <xref:System.Net.Sockets.UdpClient.%23ctor>ou <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>construtor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "O <xref:System.Net.IPAddress>do grupo de multicast para associar.</xref:System.Net.IPAddress>"
    - id: timeToLive
      type: System.Int32
      description: "O tempo para em direto (TTL), medido em saltos de routers."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de TTL fornecido não se situa entre 0 e 255"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O endereço IP não é compatível com o <xref:System.Net.Sockets.AddressFamily>valor que define o esquema de endereçamento de socket.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adiciona um <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a um grupo de multicast."
  remarks: "Antes de aderir a um grupo de multicast, lembre-se de que o socket está vinculado à porta ou o ponto final. Pode fazê-lo ao chamar um dos construtores que aceita uma porta ou um ponto final como parâmetro.      > [!NOTE] > Existem vários intervalos de endereços multicast à sua escolha. Pode encontrá-los no 2375 de RFC da IETF.      > [!NOTE] > Não é possível chamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>num <xref:System.Net.Sockets.UdpClient>construído sem uma porta específica local (ou seja, utilizando o <xref:System.Net.Sockets.UdpClient.%23ctor>ou <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>construtor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "O multicast <xref:System.Net.IPAddress>do grupo que pretende associar.</xref:System.Net.IPAddress>"
    - id: localAddress
      type: System.Net.IPAddress
      description: "O local <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um <xref:System.Boolean>valor que especifica se os pacotes multicast de saída são entregues à aplicação de envio.</xref:System.Boolean>"
  remarks: "Multicast é um método dimensionável para a comunicação de muitos para muitos na Internet. Se um processo subscreve um endereço multicast, quaisquer pacotes enviados pelo que o processo são recebidos pelo todos os outros processos que tem subscrito ao endereço multicast."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> recebe o envio de pacotes multicast; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Devolve um datagrama UDP foi enviado por um anfitrião remoto."
  remarks: "O método Receive irá bloquear até uma datagrama chega a partir de um anfitrião remoto. Quando os dados estão disponíveis, o método Receive irá ler o primeiro datagrama de colocados em fila e voltar a parte de dados como uma matriz de bytes. Este método preenche a `remoteEP` parâmetro com o <xref:System.Net.IPAddress>e o número de porta do remetente.</xref:System.Net.IPAddress>       Se especificar um anfitrião remoto predefinido no <xref:System.Net.Sockets.UdpClient.Connect%2A>método, o método Receive aceitará os datagramas partir desse anfitrião apenas.</xref:System.Net.Sockets.UdpClient.Connect%2A> Todos os outros datagramas serão eliminados.       Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.      > [!NOTE] > Se pretender receber multicasted datagramas, não chame o <xref:System.Net.Sockets.UdpClient.Connect%2A>método antes de chamar o método Receive.</xref:System.Net.Sockets.UdpClient.Connect%2A> O <xref:System.Net.Sockets.UdpClient>que utiliza para receber os datagramas devem ser criados utilizando o número de porta de multicast.</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que representa o anfitrião remoto a partir da qual os dados foram enviados.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que contém dados de datagrama.</xref:System.Byte>"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Devolve um datagrama UDP no modo assíncrono que foi enviado por um anfitrião remoto."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>> objeto será concluída após o pacote UDP foi recebido.</xref:System.Threading.Tasks.Task%601>       Se especificar um anfitrião remoto predefinido no <xref:System.Net.Sockets.UdpClient.Connect%2A>método, este método aceita os datagramas partir desse anfitrião apenas.</xref:System.Net.Sockets.UdpClient.Connect%2A> Todos os outros datagramas serão eliminados.       Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.      > [!WARNING] > Se pretender receber multicasted datagramas, não chame o <xref:System.Net.Sockets.UdpClient.Connect%2A>método antes de chamar este método.</xref:System.Net.Sockets.UdpClient.Connect%2A> O <xref:System.Net.Sockets.UdpClient>que utiliza para receber os datagramas devem ser criados utilizando o número de porta de multicast.</xref:System.Net.Sockets.UdpClient>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Subjacentes <xref:System.Net.Sockets.Socket>foi fechada.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia um datagrama UDP para um anfitrião remoto."
  remarks: "Esta sobrecarga de envia os datagramas para o anfitrião remoto estabelecido no <xref:System.Net.Sockets.UdpClient.Connect%2A>método e devolve o número de bytes enviado.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se não chame <xref:System.Net.Sockets.UdpClient.Connect%2A>antes de chamar esta sobrecarga de <xref:System.Net.Sockets.UdpClient.Send%2A>método irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Se pretender enviar os datagramas para outro anfitrião remoto, tem de chamar o <xref:System.Net.Sockets.UdpClient.Connect%2A>método e especifique o anfitrião remoto pretendido.</xref:System.Net.Sockets.UdpClient.Connect%2A> Utilizar qualquer um dos outros <xref:System.Net.Sockets.UdpClient.Send%2A>sobrecargas do método para enviar os datagramas para um endereço de difusão.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que especifica o datagrama UDP que pretende enviar representada como uma matriz de bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes de datagrama."
    return:
      type: System.Int32
      description: "O número de bytes enviados."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> já tenha estabelecido um anfitrião remoto predefinido."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> está fechado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia um datagrama UDP para o anfitrião de ponto final remoto especificado."
  remarks: "O método Send envia os datagramas para o ponto final especificado e devolve o número de bytes enviados com êxito. Antes de chamar esta sobrecarga de, primeiro tem de criar um <xref:System.Net.IPEndPoint>utilizando o número de porta e o endereço IP do anfitrião remoto ao qual os datagramas serão entregues.</xref:System.Net.IPEndPoint> Pode enviar os datagramas para o endereço de difusão predefinido, 255.255.255.255, especificando <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>para a <xref:System.Net.IPAddress.Address%2A>propriedade de <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Depois de criar este <xref:System.Net.IPEndPoint>, transmita-o para o método de envio como o `endPoint` parâmetro.</xref:System.Net.IPEndPoint>       Se pretende enviar os datagramas para qualquer endereço de difusão, utilize o <xref:System.Net.Sockets.UdpClient.Client%2A>método obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Não fornecem um `endPoint` parâmetro para este método se já tiver estabelecido um anfitrião remoto com o <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se o fizer, o método Send irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que especifica o datagrama UDP que pretende enviar, representada como uma matriz de bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes de datagrama."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que representa o anfitrião e a porta para o qual pretende enviar o datagrama.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Int32
      description: "O número de bytes enviados."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>já tenha estabelecido um anfitrião remoto predefinido."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>está fechado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia um datagrama UDP para uma porta especificada num anfitrião remoto especificada."
  remarks: "O <xref:System.Net.Sockets.UdpClient.Send%2A>método envia os datagramas para os valores especificados pelo `hostname` e `port` parâmetros e devolve o número de bytes enviado com êxito.</xref:System.Net.Sockets.UdpClient.Send%2A> Pode enviar os datagramas para o endereço de difusão predefinido com a especificação de &quot;255.255.255.255&quot; para o `hostname` valor do parâmetro.       Se pretende enviar os datagramas para qualquer endereço de difusão, utilize o <xref:System.Net.Sockets.UdpClient.Client%2A>método obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Não forneça um nome de anfitrião ou número a este método de porta, se já tiver estabelecido um anfitrião remoto com o <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se o fizer, o <xref:System.Net.Sockets.UdpClient.Send%2A>método irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que especifica o datagrama UDP que pretende enviar representada como uma matriz de bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes de datagrama."
    - id: hostname
      type: System.String
      description: "O nome do anfitrião remoto ao qual pretende enviar o datagrama."
    - id: port
      type: System.Int32
      description: "O número de porta remoto com o qual pretende comunicar."
    return:
      type: System.Int32
      description: "O número de bytes enviados."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> já tenha estabelecido um anfitrião remoto predefinido."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> está fechado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia um datagrama UDP de forma assíncrona para um anfitrião remoto."
  remarks: "Esta sobrecarga de envia os datagramas para o anfitrião remoto estabelecido no <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se não chame <xref:System.Net.Sockets.UdpClient.Connect%2A>antes desta sobrecarga de chamar o método irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro.       Se pretender enviar os datagramas para outro anfitrião remoto, tem de chamar o <xref:System.Net.Sockets.UdpClient.Connect%2A>método e especifique o anfitrião remoto pretendido.</xref:System.Net.Sockets.UdpClient.Connect%2A> Utilizar qualquer um dos outros <xref:System.Net.Sockets.UdpClient.SendAsync%2A>sobrecargas do método para enviar os datagramas para um endereço de difusão.</xref:System.Net.Sockets.UdpClient.SendAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que especifica o datagrama UDP que pretende enviar representada como uma matriz de bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes de datagrama."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> já tenha estabelecido um anfitrião remoto predefinido."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> está fechado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia um datagrama UDP de forma assíncrona para um anfitrião remoto."
  remarks: "Este método envia os datagramas para o ponto final especificado. Antes de chamar esta sobrecarga de, primeiro tem de criar um <xref:System.Net.IPEndPoint>utilizando o número de porta e o endereço IP do anfitrião remoto ao qual os datagramas serão entregues.</xref:System.Net.IPEndPoint> Pode enviar os datagramas para o endereço de difusão predefinido, 255.255.255.255, especificando <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>para a <xref:System.Net.IPAddress.Address%2A>propriedade de <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Depois de criar este <xref:System.Net.IPEndPoint>, transmita-a este método, como o `endPoint` parâmetro.</xref:System.Net.IPEndPoint>       Se pretende enviar os datagramas para qualquer endereço de difusão, utilize o <xref:System.Net.Sockets.UdpClient.Client%2A>método obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Não fornecem um `endPoint` parâmetro para este método se já tiver estabelecido um anfitrião remoto com o <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se o fizer, este método irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que especifica o datagrama UDP que pretende enviar representada como uma matriz de bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes de datagrama."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que representa o anfitrião e a porta para o qual pretende enviar o datagrama.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>já tenha estabelecido um anfitrião remoto predefinido."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>está fechado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Envia um datagrama UDP de forma assíncrona para um anfitrião remoto."
  remarks: "Este método envia os datagramas para os valores especificados pelo `hostname` e `port` parâmetros. Pode enviar os datagramas para o endereço de difusão predefinido com a especificação de &quot;255.255.255.255&quot; para o `hostname` valor do parâmetro.       Se pretende enviar os datagramas para qualquer endereço de difusão, utilize o <xref:System.Net.Sockets.UdpClient.Client%2A>método obter subjacentes <xref:System.Net.Sockets.Socket>e definir a opção de socket para <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Também pode reverter para utilizar a <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Não forneça um nome de anfitrião ou número a este método de porta, se já tiver estabelecido um anfitrião remoto com o <xref:System.Net.Sockets.UdpClient.Connect%2A>método.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se o fizer, este método irá gerar um <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Se receber um <xref:System.Net.Sockets.SocketException>, utilize <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>para obter o código de erro específico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Depois de obter este código, pode consultar a Sockets do Windows versão 2 erro código documentação da API no MSDN para obter uma descrição detalhada do erro."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Uma matriz do tipo <xref:System.Byte>que especifica o datagrama UDP que pretende enviar representada como uma matriz de bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "O número de bytes de datagrama."
    - id: hostname
      type: System.String
      description: "O nome do anfitrião remoto ao qual pretende enviar o datagrama."
    - id: port
      type: System.Int32
      description: "O número de porta remoto com o qual pretende comunicar."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> já tenha estabelecido um anfitrião remoto predefinido."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> está fechado."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Ocorreu um erro ao aceder o socket. Consulte a secção observações para obter mais informações."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Obtém ou define um valor que especifica o tempo de valor em direto (TTL) de pacotes de protocolo IP (Internet) enviados pelo <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  remarks: "O valor de TTL indica o número máximo de routers um pacote pode atravessar antes do router elimina o pacote e um controlo mensagem ICMP (Internet Protocol) &quot;TTL excedido&quot; mensagem de erro é devolvida para o remetente."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "O valor TTL."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
