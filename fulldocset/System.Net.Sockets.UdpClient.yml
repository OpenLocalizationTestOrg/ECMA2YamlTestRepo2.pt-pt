### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "Provides User Datagram Protocol (UDP) network services."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class."
  remarks: "This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class and binds it to the local port number provided."
  remarks: "This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       This constructor works only with IPv4 address types."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "The local port number from which you intend to communicate."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>port</code> parameter is greater than <xref:System.Net.IPEndPoint.MaxPort> or less than <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class and binds it to the specified local endpoint."
  remarks: "This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "An <xref:System.Net.IPEndPoint> that respresents the local endpoint to which you bind the UDP connection."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class."
  remarks: "The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       The UdpClient is not suitable for joining a multicast group because it does not perform socket binding."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code> is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class and binds it to the local port number provided."
  remarks: "This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.       The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "The port on which to listen for incoming connection attempts."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code> is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code> is greater than <xref:System.Net.IPEndPoint.MaxPort> or less than <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class and establishes a default remote host."
  remarks: "This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "The name of the remote DNS host to which you intend to connect."
    - id: port
      type: System.Int32
      description: "The remote port number to which you intend to connect."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets a value indicating whether a default remote host has been established."
  remarks: "Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>."
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a connection is active; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Enables or disables Network Address Translation (NAT) traversal on a <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> instance."
  remarks: "The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.       When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.       When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.       A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "A Boolean value that specifies whether to enable or disable NAT traversal."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets the amount of data received from the network that is available to read."
  remarks: "The Available property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the Available property returns 0.       If the remote host shuts down or closes the connection, the Available property throws a <xref:System.Net.Sockets.SocketException>.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error."
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "The number of bytes of data received from the network."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred while attempting to access the socket. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref:System.Net.Sockets.Socket> has been closed."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Receives a datagram from a remote host asynchronously."
  remarks: "The asynchronous BeginReceive operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the `requestCallback` delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that references the asynchronous receive."
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref:System.Net.Sockets.UdpClient.Connect*>."
  remarks: "The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte> array that contains the data to be sent."
    - id: bytes
      type: System.Int32
      description: "The number of bytes to send."
    - id: requestCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that references the asynchronous send."
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a datagram to a destination asynchronously. The destination is specified by a <xref:System.Net.EndPoint>."
  remarks: "The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte> array that contains the data to be sent."
    - id: bytes
      type: System.Int32
      description: "The number of bytes to send."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "The <xref:System.Net.EndPoint> that represents the destination for the data."
    - id: requestCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that references the asynchronous send."
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number."
  remarks: "The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A <xref:System.Byte> array that contains the data to be sent."
    - id: bytes
      type: System.Int32
      description: "The number of bytes to send."
    - id: hostname
      type: System.String
      description: "The destination host."
    - id: port
      type: System.Int32
      description: "The destination port number."
    - id: requestCallback
      type: System.AsyncCallback
      description: "An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that references the asynchronous send."
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets the underlying network <xref:System.Net.Sockets.Socket>."
  remarks: "<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from Client if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use Client to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>."
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "The underlying Network <xref:System.Net.Sockets.Socket>."
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Closes the UDP connection."
  remarks: "The Close disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Establishes a default remote host using the specified network endpoint."
  remarks: "The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.       Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "An <xref:System.Net.IPEndPoint> that specifies the network endpoint to which you intend to send data."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Establishes a default remote host using the specified IP address and port number."
  remarks: "The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.       Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "The <xref:System.Net.IPAddress> of the remote host to which you intend to send data."
    - id: port
      type: System.Int32
      description: "The port number to which you intend send data."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Establishes a default remote host using the specified host name and port number."
  remarks: "The Connect method establishes a default remote host using the values specified in the `port` and `hostname` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.       Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the Connect method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.       If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Since the UDP protocol is connectionless, the Connect method does not block. Do not call the Connect method if you intend to receive multicasted datagrams."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "The DNS name of the remote host to which you intend send data."
    - id: port
      type: System.Int32
      description: "The port number on the remote host to which you intend to send data."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Releases the managed and unmanaged resources used by the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> allows Internet Protocol (IP) datagrams to be fragmented."
  remarks: "Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram."
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> allows datagram fragmentation; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "This property can be set only for sockets that use the <xref:System.Net.Sockets.AddressFamily> flag or the <xref:System.Net.Sockets.AddressFamily> flag."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Leaves a multicast group."
  remarks: "The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "The <xref:System.Net.IPAddress> of the multicast group to leave."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Leaves a multicast group."
  remarks: "The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "The <xref:System.Net.IPAddress> of the multicast group to leave."
    - id: ifindex
      type: System.Int32
      description: "The local address of the multicast group to leave."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> may send or receive broadcast packets."
  remarks: "Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> allows broadcast packets; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ends a pending asynchronous receive."
  remarks: "This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginReceive*>."
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "The specified remote endpoint."
    return:
      type: System.Byte[]
      description: "If successful, the number of bytes received. If unsuccessful, this method returns 0."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> was not returned by a call to the <xref:System.Net.Sockets.UdpClient.BeginReceive*> method."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive was previously called for the asynchronous read."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when attempting to access the underlying <xref:System.Net.Sockets.Socket>. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ends a pending asynchronous send."
  remarks: "This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginSend*>."
    return:
      type: System.Int32
      description: "If successful, the number of bytes sent to the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code> was not returned by a call to the <xref:System.Net.Sockets.Socket.BeginSend*> method."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*> was previously called for the asynchronous read."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when attempting to access the underlying socket. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> allows only one client to use a port."
  remarks: "By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the ExclusiveAddressUse property to prevent multiple clients from using a specific port.       This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> allows only one client to use a specific port; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> for all other versions."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when attempting to access the underlying socket."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adds a <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> to a multicast group."
  remarks: "The JoinMulticastGroup method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the JoinMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.      > [!NOTE] >  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the JoinMulticastGroup method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.       Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.       To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.      > [!NOTE] >  In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "The multicast <xref:System.Net.IPAddress> of the group you want to join."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adds a <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> to a multicast group."
  remarks: "Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.       The `infindex` parameter is used to identify a hardware interface on the same link.      > [!NOTE] >  There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor)."
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "The interface index associated with the local IP address on which to join the multicast group."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "The multicast <xref:System.Net.IPAddress> of the group you want to join."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adds a <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> to a multicast group with the specified Time to Live (TTL)."
  remarks: "The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.      > [!NOTE] >  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.       Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.       To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "The <xref:System.Net.IPAddress> of the multicast group to join."
    - id: timeToLive
      type: System.Int32
      description: "The Time to Live (TTL), measured in router hops."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The TTL provided is not between 0 and 255"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Adds a <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> to a multicast group."
  remarks: "Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.      > [!NOTE] >  There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "The multicast <xref:System.Net.IPAddress> of the group you want to join."
    - id: localAddress
      type: System.Net.IPAddress
      description: "The local <xref:System.Net.IPAddress>."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets a <xref:System.Boolean> value that specifies whether outgoing multicast packets are delivered to the sending application."
  remarks: "Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> receives outgoing multicast packets; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Returns a UDP datagram that was sent by a remote host."
  remarks: "The Receive method will block until a datagram arrives from a remote host. When data is available, the Receive method will read the first enqueued datagram and return the data portion as a byte array. This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.       If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the Receive method will accept datagrams from that host only. All other datagrams will be discarded.       If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.      > [!NOTE] >  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the Receive method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number."
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "An <xref:System.Net.IPEndPoint> that represents the remote host from which the data was sent."
    return:
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that contains datagram data."
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Returns a UDP datagram asynchronously that was sent by a remote host."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.       If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.       If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.      > [!WARNING] >  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The underlying <xref:System.Net.Sockets.Socket> has been closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a UDP datagram to a remote host."
  remarks: "This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."
    - id: bytes
      type: System.Int32
      description: "The number of bytes in the datagram."
    return:
      type: System.Int32
      description: "The number of bytes sent."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> has already established a default remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a UDP datagram to the host at the specified remote endpoint."
  remarks: "The Send method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to the Send method as the `endPoint` parameter.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the Send method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send, represented as an array of bytes."
    - id: bytes
      type: System.Int32
      description: "The number of bytes in the datagram."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram."
    return:
      type: System.Int32
      description: "The number of bytes sent."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> has already established a default remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a UDP datagram to a specified port on a specified remote host."
  remarks: "The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying &quot;255.255.255.255&quot; for the `hostname` parameter value.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."
    - id: bytes
      type: System.Int32
      description: "The number of bytes in the datagram."
    - id: hostname
      type: System.String
      description: "The name of the remote host to which you intend to send the datagram."
    - id: port
      type: System.Int32
      description: "The remote port number with which you intend to communicate."
    return:
      type: System.Int32
      description: "The number of bytes sent."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> has already established a default remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a UDP datagram asynchronously to a remote host."
  remarks: "This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."
    - id: bytes
      type: System.Int32
      description: "The number of bytes in the datagram."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> has already established a default remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a UDP datagram asynchronously to a remote host."
  remarks: "This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!WARNING] >  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."
    - id: bytes
      type: System.Int32
      description: "The number of bytes in the datagram."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> has already established a default remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sends a UDP datagram asynchronously to a remote host."
  remarks: "This method sends datagrams to the values specified by the `hostname` and `port` parameters. You can send datagrams to the default broadcast address by specifying &quot;255.255.255.255&quot; for the `hostname` parameter value.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!WARNING] >  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."
    - id: bytes
      type: System.Int32
      description: "The number of bytes in the datagram."
    - id: hostname
      type: System.String
      description: "The name of the remote host to which you intend to send the datagram."
    - id: port
      type: System.Int32
      description: "The remote port number with which you intend to communicate."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> has already established a default remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> is closed."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when accessing the socket. See the Remarks section for more information."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>."
  remarks: "The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) &quot;TTL exceeded&quot; error message is returned to the sender."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "The TTL value."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
