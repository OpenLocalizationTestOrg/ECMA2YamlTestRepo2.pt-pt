### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.SpeakProgressEventArgs
  id: SpeakProgressEventArgs
  children:
  - System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition
  - System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount
  - System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition
  - System.Speech.Synthesis.SpeakProgressEventArgs.Text
  langs:
  - csharp
  name: SpeakProgressEventArgs
  nameWithType: SpeakProgressEventArgs
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs
  type: Class
  summary: "Devolve os dados a partir de <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&quot;> </xref> eventos."
  remarks: "É criada uma instância do SpeakProgressEventArgs quando o <xref:System.Speech.Synthesis.SpeechSynthesizer>objeto gera o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>eventos.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> </xref:System.Speech.Synthesis.SpeechSynthesizer> O <xref:System.Speech.Synthesis.SpeechSynthesizer>desencadeia este evento para cada palavra novo que-speaks numa linha com qualquer um do <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>métodos.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer>       Os dados devolvidos são baseados no reconhecimento de voz Synthesis Markup Language (SSML) que gera o código. Os valores devolvidos para <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>incluir espaços e os carateres e o conteúdo das etiquetas SSML gerados pelo código da.</xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>"
  example:
  - "The following example demonstrates the information that is available from SpeakProgressEventArgs. Note how the <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> methods affect the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> by their addition of **\\<p>**, **\\</p>**, **\\<s>**, and **\\</s>** tags to the generated SSML. Also, there are two entries in the output for \"30%\", one for each word to speak this number string (thirty percent). The <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> and <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> are the same for each entry and represent the characters \"30%. However, the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> changes to reflect the speaking of the words \"thirty\" and \"percent\" by the <xref:System.Speech.Synthesis.SpeechSynthesizer>.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt containing a paragraph and two sentences.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.StartParagraph();  \n        builder.StartSentence();  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n        builder.EndSentence();  \n        builder.StartSentence();  \n        builder.AppendText(  \n          \"Tonight's weather will be cloudy with a 30% chance of showers.\");  \n        builder.EndSentence();  \n        builder.EndParagraph();  \n  \n        // Add a handler for the SpeakProgress event.  \n        synth.SpeakProgress +=  \n          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write each word and its character postion to the console.  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(\"CharPos: {0}   CharCount: {1}   AudioPos: {2}    \\\"{3}\\\"\",  \n        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs'
  inheritance:
  - System.ComponentModel.AsyncCompletedEventArgs
  - System.Speech.Synthesis.PromptEventArgs
  implements: []
  inheritedMembers:
  - System.Speech.Synthesis.PromptEventArgs.Prompt
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition
  id: AudioPosition
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  langs:
  - csharp
  name: AudioPosition
  nameWithType: SpeakProgressEventArgs.AudioPosition
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Obtém a posição de áudio do evento."
  remarks: "O <xref:System.Speech.Synthesis.SpeechSynthesizer>normaliza números para as palavras que correspondem a forma como o número irá ser ditas.</xref:System.Speech.Synthesis.SpeechSynthesizer> Por exemplo, o sintetizador speaks o número de &quot;4003&quot; como &quot;quatro thousand três&quot;. Gera um <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>eventos para cada uma das palavras ditas e devolve o AudioPosition para cada palavra.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>"
  syntax:
    content: public TimeSpan AudioPosition { get; }
    return:
      type: System.TimeSpan
      description: "Devolve a posição do evento na sequência de saída de áudio."
  overload: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount
  id: CharacterCount
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  langs:
  - csharp
  name: CharacterCount
  nameWithType: SpeakProgressEventArgs.CharacterCount
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Obtém o número de carateres no word que foi autenticação ditas imediatamente antes do evento foi gerado."
  remarks: "O <xref:System.Speech.Synthesis.SpeechSynthesizer>normaliza números para as palavras que correspondem a forma como o número irá ser ditas.</xref:System.Speech.Synthesis.SpeechSynthesizer> Por exemplo, o sintetizador speaks o número de &quot;4003&quot; como &quot;quatro thousand três&quot;. Gera um <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>eventos para cada uma das palavras ditas.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> No entanto, a propriedade CharacterCount para cada uma das três palavras é o mesmo. Neste caso, é o número de carateres no número de &quot;4003&quot; no texto da linha de comandos, quatro."
  syntax:
    content: public int CharacterCount { get; }
    return:
      type: System.Int32
      description: "Devolve o número de carateres no word que foi autenticação ditas imediatamente antes do evento foi gerado."
  overload: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition
  id: CharacterPosition
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  langs:
  - csharp
  name: CharacterPosition
  nameWithType: SpeakProgressEventArgs.CharacterPosition
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Obtém o número de carateres e espaços de início da linha de comandos para a posição antes da primeira letra do word que apenas foi autenticação ditas."
  remarks: "The CharacterPosition includes the count for characters in XML tags, including their enclosing brackets. When using any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods, the contents are added to an SSML prompt that includes the opening and closing `speak` elements. The opening `speak` element adds an offset of 82 characters and spaces to the CharacterPosition of the all the words and letters in the prompt. For example, in the following snippet, the CharacterPosition of the first word, “this”, is 82.  \n  \n```c#  \nbuilder.AppendText(\"This is a test\");  \nSynthesizer.Speak(builder);  \n```  \n  \n In the above example the CharacterPosition of the word “test” is 92. In the following snippet the CharacterPosition of the word “test” is 23 characters higher (115) because the opening **\\<prosody pitch=\"high\">**  tag that precedes it contains 23 characters and spaces (the two escape characters \"\\\\\" are not counted).  \n  \n```c#  \nbuilder.AppendSsmlMarkup(\"This is a <prosody pitch=\\\"high\\\"> test </prosody>.\");   \nSynthesizer.Speak(builder);  \n```  \n  \n If you use the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods to add content to a prompt by specifying a file, the opening `xml` declaration and `speak` elements in the file are not used or counted. The first character in the file after the opening `speak` tag will be at position 82 if it is the first content in the prompt.  \n  \n By contrast, the string parameter of a <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method does not get added to an SSML prompt before being spoken. Therefore, the CharacterPosition of the first word, “this”, in the following snippet is zero.  \n  \n```c#  \nSynthesizer.Speak(“This is a test.”);  \n```  \n  \n The <xref:System.Speech.Synthesis.SpeechSynthesizer> normalizes numbers to the words that correspond to how the number will be spoken. For example, the synthesizer speaks the number “4003” as “four thousand three”. It raises a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event for each of the three spoken words. However, the CharacterPosition property for each of the three words is the same. It is the position before the first character of the number “4003” in the text of the prompt."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> and appends the SSML contents of an XML file using <xref:System.Xml.XmlReader>. The example outputs speech to a WAV file for playback. The contents of the XML file containing the SSML appear below the code example.  \n  \n```c#  \nusing System;  \nusing System.Xml;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a path to the file that contains SSML.  \n        string weatherFile = Path.GetFullPath(\"c:\\\\test\\\\Weather.ssml\");  \n  \n        // Create an XML Reader from the file, create a PromptBuilder and   \n        // append the XmlReader.  \n        PromptBuilder builder = new PromptBuilder();  \n  \n        if (File.Exists(weatherFile))  \n        {  \n          XmlReader reader = XmlReader.Create(weatherFile);  \n          builder.AppendSsml(reader);  \n          reader.Close();  \n        }  \n  \n        // Add a handler for the SpeakProgress event.  \n        synth.SpeakProgress +=  \n          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write each word and its character position to the console.  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(\"Speak progress: {0} {1}\",  \n        e.CharacterPosition, e.Text);  \n    }  \n  }  \n}  \n  \n```  \n  \n```xml  \n<!-- The following are the contents of the file Weather.ssml.   \nNote that because of the <p> tag and the space that follows it,   \nthat the character position of the first word \"The\" will be 86. -->  \n  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <p> The weather forecast for today is partly cloudy with   \nsome sun breaks. </p>  \n  \n  <break strength=\"medium\" />  \n  \n  <p> Tonight's weather will be cloudy with a 30% chance of   \nshowers. </p>  \n  \n</speak>  \n  \n```"
  syntax:
    content: public int CharacterPosition { get; }
    return:
      type: System.Int32
      description: "Devolve o número de carateres e espaços de início da linha de comandos para a posição antes da primeira letra do word que apenas foi autenticação ditas."
  overload: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.Text
  id: Text
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  langs:
  - csharp
  name: Text
  nameWithType: SpeakProgressEventArgs.Text
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "O texto que apenas foi autenticação ditas quando o evento foi gerado."
  remarks: "O <xref:System.Speech.Synthesis.SpeechSynthesizer>normaliza números para as palavras que correspondem a forma como o número irá ser ditas.</xref:System.Speech.Synthesis.SpeechSynthesizer> Por exemplo, o sintetizador speaks o número de &quot;4003&quot; como &quot;quatro thousand três&quot;. Gera um <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>eventos para cada uma das palavras ditas.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> No entanto, a propriedade de texto para cada uma das três palavras é o mesmo. É o texto &quot;4003&quot; a partir da linha."
  example:
  - "The following example illustrates the how the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> event reports the <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> and Text properties for strings that contain numbers.  \n  \n```c#  \nusing System;  \nusing System.Xml;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create an XML Reader from the file, create a PromptBuilder and   \n        // append the XmlReader.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"4003\");  \n  \n        // Add a handler for the SpeakProgress event.  \n        synth.SpeakProgress +=  \n          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write each word and its character position to the console.  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(\"Speak progress -    Character position:  {0}    Text:  {1}\",  \n        e.CharacterPosition, e.Text);  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "Devolve o texto que apenas foi autenticação ditas quando o evento foi gerado."
  overload: System.Speech.Synthesis.SpeakProgressEventArgs.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Speech.Synthesis.PromptEventArgs
  isExternal: false
  name: System.Speech.Synthesis.PromptEventArgs
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: AudioPosition
  nameWithType: SpeakProgressEventArgs.AudioPosition
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: CharacterCount
  nameWithType: SpeakProgressEventArgs.CharacterCount
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: CharacterPosition
  nameWithType: SpeakProgressEventArgs.CharacterPosition
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.Text
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: Text
  nameWithType: SpeakProgressEventArgs.Text
  fullName: System.Speech.Synthesis.SpeakProgressEventArgs.Text
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition*
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: AudioPosition
  nameWithType: SpeakProgressEventArgs.AudioPosition
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount*
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: CharacterCount
  nameWithType: SpeakProgressEventArgs.CharacterCount
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition*
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: CharacterPosition
  nameWithType: SpeakProgressEventArgs.CharacterPosition
- uid: System.Speech.Synthesis.SpeakProgressEventArgs.Text*
  parent: System.Speech.Synthesis.SpeakProgressEventArgs
  isExternal: false
  name: Text
  nameWithType: SpeakProgressEventArgs.Text
