### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "Seleciona um membro de uma lista de candidatos e efetua o tipo de conversão do tipo de argumento real para o tipo de argumento formal."
  remarks: "Implementações da classe Binder são utilizadas por métodos como <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, de que seleciona a partir de um conjunto de membros possíveis para executar, com base num conjunto de tipos de parâmetros e valores de argumento; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, que seleciona um método com base nos tipos de parâmetro e assim sucessivamente.</xref:System.Type.GetMethod%2A?displayProperty=fullName> </xref:System.Type.InvokeMember%2A?displayProperty=fullName>       Uma implementação de predefinida da classe de Gestor de enlaces é fornecida pelo <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>propriedade.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName>"
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Reflection.Binder&quot;> </xref> classe."
  remarks: "Este construtor é designado pelos construtores de classes derivadas, ao inicializar o estado deste tipo."
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona um campo de conjunto de campos, com base nos critérios especificados indicado."
  remarks: "Se `bindingAttr` não inclui <xref:System.Reflection.BindingFlags?displayProperty=fullName>, a implementação do Gestor de enlaces de predefinida fornecida pelo <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>simplesmente devolve o primeiro elemento da `match`.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Não foi efectuada nenhuma selecção.       Este método controla o enlace fornecido pelo <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "O conjunto de campos que são candidatos para a correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é utilizado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, este parâmetro especifica o conjunto de campos que reflexão determinou para ser possível corresponde, normalmente porque têm o nome de membro correto. A implementação predefinida fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; a ordem desta matriz é alterado."
    - id: value
      type: System.Object
      description: "O valor do campo utilizado para localizar um campo correspondente."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>que é utilizada para controlar a adesão dos tipos de dados, em implementações de Gestor de enlaces coerce tipos.</xref:System.Globalization.CultureInfo> Se `culture` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, a <xref:System.Globalization.CultureInfo>para o thread actual é utilizado.</xref:System.Globalization.CultureInfo>       Nota. por exemplo, se uma implementação do Gestor de enlaces permite a adesão de valores de cadeia para tipos numéricos, este parâmetro é necessário para converter um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> valor, porque 1000 é representado de forma diferente pelo culturas diferentes. O Gestor de enlaces de predefinição não coercions essa cadeia."
    return:
      type: System.Reflection.FieldInfo
      description: "O campo correspondente."
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o dossier predefinido, <code> bindingAttr </code> inclui <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, e <code> match </code> contém vários campos que são igualmente boas correspondências para <code> value </code>. Por exemplo, <code> value </code> contém um `MyClass` objeto que implementa o `IMyClass` interface, e <code> match </code> contém um campo do tipo `MyClass` e um campo do tipo `IMyClass`."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "Para o dossier predefinido, <code> bindingAttr </code> inclui <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, e <code> match </code> contém campos não podem aceitar <code> value </code>."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "Para o dossier predefinido, <code> bindingAttr </code> inclui <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, e <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia.       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona um método a invocar do conjunto especificado de métodos, com base nos argumentos fornecidos."
  remarks: "O Gestor de enlaces de predefinição tem em consideração os dois parâmetros que têm valores e `params` matrizes (`ParamArray` matrizes no Visual Basic). Assim, é possível encontrar uma correspondência nos casos em que `args` e `match` não contêm o mesmo número de elementos.       O Gestor de enlaces permite que um cliente mapear a matriz de argumentos de volta para o respetivo formulário original se a matriz de argumentos tem sido manipulado por BindToMethod. Utilize esta capacidade remapear para voltar a argumentos por referência quando esses argumentos estão presentes. Quando passar os argumentos com nome, o Gestor de enlaces reordena a matriz de argumentos. O `state` parâmetro mantém um registo dos argumento reordenação, permitindo o Gestor de enlaces <xref:System.Reflection.Binder.ReorderArgumentArray%2A>método para reordenar a matriz de argumentos para o respetivo formulário original.</xref:System.Reflection.Binder.ReorderArgumentArray%2A>       O método BindToMethod é utilizado pelo <xref:System.Type.InvokeMember%2A?displayProperty=fullName>método.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "O conjunto de métodos que são candidatos para a correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é utilizado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, este parâmetro especifica o conjunto de métodos de reflexão determinou para ser possível corresponde, normalmente porque têm o nome de membro correto. A implementação predefinida fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; a ordem desta matriz é alterado."
    - id: args
      type: System.Object[]
      description: "Os argumentos são transmitidos. O Gestor de enlaces pode alterar a ordem dos argumentos nesta matriz; Por exemplo, o Gestor de enlaces de predefinição altera a ordem dos argumentos se o `names` parâmetro é utilizado para especificar uma ordem diferente posicional ordem. Se uma implementação do Gestor de enlaces coerces tipos de argumento, os tipos e valores dos argumentos podem ser alterados, bem como."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz de modificadores de parâmetro que permitem o enlace trabalhar com assinaturas de parâmetro nos quais os tipos de tem sido modificados. A implementação do Gestor de enlaces de predefinida não utilize este parâmetro."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>que é utilizada para controlar a adesão dos tipos de dados, em implementações de Gestor de enlaces coerce tipos.</xref:System.Globalization.CultureInfo> Se `culture` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, a <xref:System.Globalization.CultureInfo>para o thread actual é utilizado.</xref:System.Globalization.CultureInfo>       Nota. por exemplo, se uma implementação do Gestor de enlaces permite a adesão de valores de cadeia para tipos numéricos, este parâmetro é necessário para converter um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> valor, porque 1000 é representado de forma diferente pelo culturas diferentes. O Gestor de enlaces de predefinição não coercions essa cadeia."
    - id: names
      type: System.String[]
      description: "Os nomes de parâmetro, se os nomes de parâmetros devem ser considerados ao correspondência, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se os argumentos são deve ser tratado como puramente posicionais. Por exemplo, os nomes de parâmetro tem de ser utilizados se argumentos não são fornecidos por ordem posicional."
    - id: state
      type: System.Object
      description: "Depois do método devolve, `state` contém um objeto de Gestor de enlaces fornecidos pelo mantém um registo dos reordenação de argumento. O Gestor de enlaces cria este objeto e o Gestor de enlaces é o único consumidor deste objeto. Se `state` não é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> quando <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref> devolve, tem de transmitir `state` para o <xref:System.Reflection.Binder.ReorderArgumentArray*>método se pretender restaurar `args` ao respetivo original de ordem, por exemplo, para que possa obter os valores de <xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;> </xref> parâmetros (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref> parâmetros no Visual Basic).</xref:System.Reflection.Binder.ReorderArgumentArray*>"
    return:
      type: System.Reflection.MethodBase
      description: "O método correspondente."
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o dossier predefinido, <code> match </code> contém vários métodos que são igualmente boas correspondências para <code> args </code>. Por exemplo, <code> args </code> contém um `MyClass` objeto que implementa o `IMyClass` interface, e <code> match </code> contém um método que utiliza `MyClass` e um método que utiliza `IMyClass`."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "Para o dossier predefinido, <code> match </code> contém sem métodos que podem aceitar os argumentos fornecidos no <code> args </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Para o dossier predefinido, <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia."
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Muda o tipo da determinada <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> para a determinada <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Reflexão modelos de regras de acessibilidade do sistema de tipo comum. Por exemplo, se o autor da chamada for na mesma assemblagem, o chamador não tem permissões especiais para membros internos. Caso contrário, a função chamadora tem <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission> Este é consistente com a pesquisa de membros protegidos, privada e outros.       O princípio geral é que `ChangeType` deve executar apenas widening coercions, que nunca perdem dados. Um exemplo de uma adesão para alargar é coercing um valor que é um número inteiro com sinal de 32 bits para um valor que é um número inteiro com sinal de 64 bits. Isto é único a partir de uma adesão para diminuir, que pode perder dados. Um exemplo de uma adesão para diminuir é coercing um número inteiro com sinal de 64 bits para um número inteiro com sinal de 32 bits.       A tabela seguinte lista coercions efetuadas por predefinição `ChangeType`.      | Tipo de origem | Tipo de destino |   |-----------------|-----------------|   | Qualquer tipo | O tipo base. |   | Qualquer tipo | A interface implementa. |   | Char | UInt16 UInt32, Int32, UInt64, Int64, Single, duplo |   | Bytes | Duplo char, UInt16 Int16, UInt32, Int32, UInt64, Int64, único |   | SByte | Int16, Int32, Int64, Single, duplo |   | UInt16 | UInt32, Int32, UInt64, Int64, Single, duplo |   | Int16 | Int32, Int64, Single, duplo |   | UInt32 | UInt64, Int64, Single, duplo |   | Int32 | Int64, único, faça duplo |   | UInt64 | Único, duplo |   | Int64 | Único, duplo |   | Único | Duplo |   | Referência não | Por referência. |"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "O objeto a alterar para um novo <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
    - id: type
      type: System.Type
      description: "A nova <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> que `value` irá tornar-se."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>que é utilizada para controlar a adesão dos tipos de dados.</xref:System.Globalization.CultureInfo> Se `culture` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, a <xref:System.Globalization.CultureInfo>para o thread actual é utilizado.</xref:System.Globalization.CultureInfo>       Nota. por exemplo, este parâmetro é necessário para converter um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> valor, porque 1000 é representado de forma diferente pelo culturas diferentes."
    return:
      type: System.Object
      description: "Um objeto que contém o valor especificado como o novo tipo."
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Após a devolução da <xref:System.Reflection.Binder.BindToMethod*>, restaura o <code> args </code> argumento para o que estava quando provém <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.Binder.BindToMethod*>"
  remarks: "O language runtime chama este método se `state` não é `null` após uma devolvida por `BindToMethod`."
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "Os argumentos reais que são transmitidos. Os tipos e os valores dos argumentos podem ser alterados."
    - id: state
      type: System.Object
      description: "Um objeto de Gestor de enlaces fornecidos pelo que mantém um registo dos reordenação de argumento."
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona um método de conjunto de métodos, consoante o tipo de argumento indicado."
  remarks: "Este método deverá devolver `null` se nenhum método corresponde aos critérios. Este método controla a seleção que forneceu o `GetConstructor` e `GetMethod` métodos em `Type`."
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "O conjunto de métodos que são candidatos para a correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é utilizado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, este parâmetro especifica o conjunto de métodos de reflexão determinou para ser possível corresponde, normalmente porque têm o nome de membro correto. A implementação predefinida fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; a ordem desta matriz é alterado."
    - id: types
      type: System.Type[]
      description: "Os tipos de parâmetro utilizados para localizar um método correspondente."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz de modificadores de parâmetro que permitem o enlace trabalhar com assinaturas de parâmetro nos quais os tipos de tem sido modificados."
    return:
      type: System.Reflection.MethodBase
      description: "O método de correspondência se encontrado; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o dossier predefinido, <code> match </code> contém vários métodos que são igualmente boas correspondências para os tipos de parâmetro descritas através de <code> types </code>. Por exemplo, a matriz no <code> types </code> contém um <xref:System.Type>do objeto para `MyClass` e a matriz no <code> match </code> contém um método que utiliza uma classe base da `MyClass` e um método que utiliza uma interface que `MyClass` implementa.</xref:System.Type>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Para o dossier predefinido, <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia.       - ou - um elemento de <code> types </code> deriva de <xref:System.Type>, mas não é do tipo <xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona uma propriedade de conjunto de propriedades, com base nos critérios especificados indicado."
  remarks: "Este método controla a seleção que forneceu o `GetProperty` método no `Type`."
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "O conjunto de propriedades que são candidatos para a correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é utilizado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, este parâmetro especifica o conjunto de propriedades reflexão determinou para ser possível corresponde, normalmente porque têm o nome de membro correto. A implementação predefinida fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; a ordem desta matriz é alterado."
    - id: returnType
      type: System.Type
      description: "O valor de retorno a corresponddência da propriedade tem de ter."
    - id: indexes
      type: System.Type[]
      description: "Os tipos de índice da propriedade que está a ser procurado. Utilizado para propriedades de índice, tais como o indexador para uma classe."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz de modificadores de parâmetro que permitem o enlace trabalhar com assinaturas de parâmetro nos quais os tipos de tem sido modificados."
    return:
      type: System.Reflection.PropertyInfo
      description: "A propriedade correspondente."
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o dossier predefinido, <code> match </code> contém várias propriedades que são igualmente boas correspondências para <code> returnType </code> e <code> indexes </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Para o dossier predefinido, <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
