### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type."
  remarks: "Implementations of the Binder class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.       A default implementation of the Binder class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property."
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Initializes a new instance of the <xref href=&quot;System.Reflection.Binder&quot;></xref> class."
  remarks: "This constructor is called by the constructors of derived classes, to initialize state in this type."
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Selects a field from the given set of fields, based on the specified criteria."
  remarks: "If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`. No selection is done.       This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>."
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitwise combination of <xref href=&quot;System.Reflection.BindingFlags&quot;></xref> values."
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "The set of fields that are candidates for matching. For example, when a <xref href=&quot;System.Reflection.Binder&quot;></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."
    - id: value
      type: System.Object
      description: "The field value used to locate a matching field."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types. If `culture` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.       Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> that represents 1000 to a <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions."
    return:
      type: System.Reflection.FieldInfo
      description: "The matching field."
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "For the default binder, <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>. For example, <code>value</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a field of type `MyClass` and a field of type `IMyClass`."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "For the default binder, <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>match</code> contains no fields that can accept <code>value</code>."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "For the default binder, <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>match</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty array.       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Selects a method to invoke from the given set of methods, based on the supplied arguments."
  remarks: "The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic). Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.       The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by BindToMethod. Use this remap capability to get back by-reference arguments when such arguments are present. When you pass arguments by name, the binder reorders the argument array. The `state` parameter keeps track of argument reordering, thus enabling the binder&quot;s <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.       The BindToMethod method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method."
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitwise combination of <xref href=&quot;System.Reflection.BindingFlags&quot;></xref> values."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "The set of methods that are candidates for matching. For example, when a <xref href=&quot;System.Reflection.Binder&quot;></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."
    - id: args
      type: System.Object[]
      description: "The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the `names` parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types. If `culture` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.       Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> that represents 1000 to a <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions."
    - id: names
      type: System.String[]
      description: "The parameter names, if parameter names are to be considered when matching, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order."
    - id: state
      type: System.Object
      description: "After the method returns, `state` contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If `state` is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> when <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;></xref> returns, you must pass `state` to the <xref:System.Reflection.Binder.ReorderArgumentArray*> method if you want to restore `args` to its original order, for example, so that you can retrieve the values of <xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;></xref> parameters (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;></xref> parameters in Visual Basic)."
    return:
      type: System.Reflection.MethodBase
      description: "The matching method."
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>. For example, <code>args</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a method that takes `MyClass` and a method that takes `IMyClass`."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "For the default binder, <code>match</code> contains no methods that can accept the arguments supplied in <code>args</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "For the default binder, <code>match</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty array."
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Changes the type of the given <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> to the given <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;></xref>."
  remarks: "Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.       The general principle is that `ChangeType` should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.       The following table lists the coercions performed by the default `ChangeType`.      |Source type|Target type|   |-----------------|-----------------|   |Any type|Its base type.|   |Any type|The interface it implements.|   |Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|   |Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|   |SByte|Int16, Int32, Int64, Single, Double|   |UInt16|UInt32, Int32, UInt64, Int64, Single, Double|   |Int16|Int32, Int64, Single, Double|   |UInt32|UInt64, Int64, Single, Double|   |Int32|Int64, Single, Double|   |UInt64|Single, Double|   |Int64|Single, Double|   |Single|Double|   |Non-reference|By-reference.|"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "The object to change into a new <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;></xref>."
    - id: type
      type: System.Type
      description: "The new <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;></xref> that `value` will become."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types. If `culture` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.       Note   For example, this parameter is necessary to convert a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> that represents 1000 to a <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref> value, because 1000 is represented differently by different cultures."
    return:
      type: System.Object
      description: "An object that contains the given value as the new type."
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Upon returning from <xref:System.Reflection.Binder.BindToMethod*>, restores the <code>args</code> argument to what it was when it came from <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;></xref>."
  remarks: "The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`."
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "The actual arguments that are passed in. Both the types and values of the arguments can be changed."
    - id: state
      type: System.Object
      description: "A binder-provided object that keeps track of argument reordering."
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Selects a method from the given set of methods, based on the argument type."
  remarks: "This method should return `null` if no method matches the criteria. This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`."
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitwise combination of <xref href=&quot;System.Reflection.BindingFlags&quot;></xref> values."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "The set of methods that are candidates for matching. For example, when a <xref href=&quot;System.Reflection.Binder&quot;></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."
    - id: types
      type: System.Type[]
      description: "The parameter types used to locate a matching method."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified."
    return:
      type: System.Reflection.MethodBase
      description: "The matching method, if found; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>. For example, the array in <code>types</code> contains a <xref:System.Type> object for `MyClass` and the array in <code>match</code> contains a method that takes a base class of `MyClass` and a method that takes an interface that `MyClass` implements."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "For the default binder, <code>match</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty array.       -or-       An element of <code>types</code> derives from <xref:System.Type>, but is not of type <xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Selects a property from the given set of properties, based on the specified criteria."
  remarks: "This method controls the selection provided by the `GetProperty` method on `Type`."
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitwise combination of <xref href=&quot;System.Reflection.BindingFlags&quot;></xref> values."
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "The set of properties that are candidates for matching. For example, when a <xref href=&quot;System.Reflection.Binder&quot;></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."
    - id: returnType
      type: System.Type
      description: "The return value the matching property must have."
    - id: indexes
      type: System.Type[]
      description: "The index types of the property being searched for. Used for index properties such as the indexer for a class."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified."
    return:
      type: System.Reflection.PropertyInfo
      description: "The matching property."
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "For the default binder, <code>match</code> contains multiple properties that are equally good matches for <code>returnType</code> and <code>indexes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "For the default binder, <code>match</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty array."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
