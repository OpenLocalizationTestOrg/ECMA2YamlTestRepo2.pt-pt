### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  id: SafePipeHandle
  children:
  - Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle
  langs:
  - csharp
  name: SafePipeHandle
  nameWithType: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
  type: Class
  summary: "Represents a wrapper class for a pipe handle."
  remarks: "This class is derived from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>. A value of 0 or -1 is an invalid pipe handle.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public sealed class SafePipeHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  inheritance:
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  implements: []
  inheritedMembers:
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  langs:
  - csharp
  name: SafePipeHandle(IntPtr,Boolean)
  nameWithType: SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
  type: Constructor
  assemblies:
  - System.Core
  namespace: Microsoft.Win32.SafeHandles
  summary: "Initializes a new instance of the <xref href=&quot;Microsoft.Win32.SafeHandles.SafePipeHandle&quot;></xref> class."
  syntax:
    content: public SafePipeHandle (IntPtr preexistingHandle, bool ownsHandle);
    parameters:
    - id: preexistingHandle
      type: System.IntPtr
      description: "An <xref:System.IntPtr> object that represents the pre-existing handle to use."
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to reliably release the handle during the finalization phase; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to prevent reliable release (not recommended)."
  overload: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafePipeHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle()
  type: Method
  assemblies:
  - System.Core
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: SafePipeHandle(IntPtr,Boolean)
  nameWithType: SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafePipeHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle()
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor*
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: SafePipeHandle
  nameWithType: SafePipeHandle.SafePipeHandle
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle*
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafePipeHandle.ReleaseHandle
