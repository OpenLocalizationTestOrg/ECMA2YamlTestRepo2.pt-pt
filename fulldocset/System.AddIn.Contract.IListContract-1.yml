### YamlMime:ManagedReference
items:
- uid: System.AddIn.Contract.IListContract`1
  id: IListContract`1
  children:
  - System.AddIn.Contract.IListContract`1.Add(`0)
  - System.AddIn.Contract.IListContract`1.Clear
  - System.AddIn.Contract.IListContract`1.Contains(`0)
  - System.AddIn.Contract.IListContract`1.GetCount
  - System.AddIn.Contract.IListContract`1.GetEnumeratorContract
  - System.AddIn.Contract.IListContract`1.GetIsReadOnly
  - System.AddIn.Contract.IListContract`1.GetItem(System.Int32)
  - System.AddIn.Contract.IListContract`1.IndexOf(`0)
  - System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)
  - System.AddIn.Contract.IListContract`1.Remove(`0)
  - System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)
  - System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)
  langs:
  - csharp
  name: IListContract<T>
  nameWithType: IListContract<T>
  fullName: System.AddIn.Contract.IListContract<T>
  type: Interface
  syntax:
    content: 'public interface IListContract<T> : System.AddIn.Contract.IContract'
    typeParameters:
    - id: T
      description: "To be added."
  implements:
  - System.AddIn.Contract.IContract
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.Add(`0)
  id: Add(`0)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: IListContract<T>.Add(T)
  fullName: System.AddIn.Contract.IListContract<T>.Add(T)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.Add*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.Clear
  id: Clear
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: Clear()
  nameWithType: IListContract<T>.Clear()
  fullName: System.AddIn.Contract.IListContract<T>.Clear()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.AddIn.Contract.IListContract`1.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.Contains(`0)
  id: Contains(`0)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: IListContract<T>.Contains(T)
  fullName: System.AddIn.Contract.IListContract<T>.Contains(T)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.GetCount
  id: GetCount
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: GetCount()
  nameWithType: IListContract<T>.GetCount()
  fullName: System.AddIn.Contract.IListContract<T>.GetCount()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public int GetCount ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.GetCount*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.GetEnumeratorContract
  id: GetEnumeratorContract
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: GetEnumeratorContract()
  nameWithType: IListContract<T>.GetEnumeratorContract()
  fullName: System.AddIn.Contract.IListContract<T>.GetEnumeratorContract()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public System.AddIn.Contract.IEnumeratorContract<T> GetEnumeratorContract ();
    parameters: []
    return:
      type: System.AddIn.Contract.IEnumeratorContract`1
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.GetEnumeratorContract*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.GetIsReadOnly
  id: GetIsReadOnly
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: GetIsReadOnly()
  nameWithType: IListContract<T>.GetIsReadOnly()
  fullName: System.AddIn.Contract.IListContract<T>.GetIsReadOnly()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public bool GetIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.GetIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.GetItem(System.Int32)
  id: GetItem(System.Int32)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: GetItem(Int32)
  nameWithType: IListContract<T>.GetItem(Int32)
  fullName: System.AddIn.Contract.IListContract<T>.GetItem(Int32)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public T GetItem (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    return:
      type: T
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.GetItem*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: IListContract<T>.IndexOf(T)
  fullName: System.AddIn.Contract.IListContract<T>.IndexOf(T)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: "To be added."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: Insert(Int32,T)
  nameWithType: IListContract<T>.Insert(Int32,T)
  fullName: System.AddIn.Contract.IListContract<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: item
      type: T
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.Remove(`0)
  id: Remove(`0)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: IListContract<T>.Remove(T)
  fullName: System.AddIn.Contract.IListContract<T>.Remove(T)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IListContract<T>.RemoveAt(Int32)
  fullName: System.AddIn.Contract.IListContract<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.AddIn.Contract.IListContract`1
  langs:
  - csharp
  name: SetItem(Int32,T)
  nameWithType: IListContract<T>.SetItem(Int32,T)
  fullName: System.AddIn.Contract.IListContract<T>.SetItem(Int32,T)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public void SetItem (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: item
      type: T
      description: "To be added."
  overload: System.AddIn.Contract.IListContract`1.SetItem*
  exceptions: []
  platform:
  - net462
references:
- uid: System.AddIn.Contract.IListContract`1.Add(`0)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Add(T)
  nameWithType: IListContract<T>.Add(T)
  fullName: System.AddIn.Contract.IListContract<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.AddIn.Contract.IListContract`1.Clear
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Clear()
  nameWithType: IListContract<T>.Clear()
  fullName: System.AddIn.Contract.IListContract<T>.Clear()
- uid: System.AddIn.Contract.IListContract`1.Contains(`0)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Contains(T)
  nameWithType: IListContract<T>.Contains(T)
  fullName: System.AddIn.Contract.IListContract<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Contract.IListContract`1.GetCount
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetCount()
  nameWithType: IListContract<T>.GetCount()
  fullName: System.AddIn.Contract.IListContract<T>.GetCount()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.AddIn.Contract.IListContract`1.GetEnumeratorContract
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetEnumeratorContract()
  nameWithType: IListContract<T>.GetEnumeratorContract()
  fullName: System.AddIn.Contract.IListContract<T>.GetEnumeratorContract()
- uid: System.AddIn.Contract.IEnumeratorContract`1
  parent: System.AddIn.Contract
  isExternal: false
  name: IEnumeratorContract<T>
  nameWithType: IEnumeratorContract<T>
  fullName: System.AddIn.Contract.IEnumeratorContract<T>
- uid: System.AddIn.Contract.IListContract`1.GetIsReadOnly
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetIsReadOnly()
  nameWithType: IListContract<T>.GetIsReadOnly()
  fullName: System.AddIn.Contract.IListContract<T>.GetIsReadOnly()
- uid: System.AddIn.Contract.IListContract`1.GetItem(System.Int32)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetItem(Int32)
  nameWithType: IListContract<T>.GetItem(Int32)
  fullName: System.AddIn.Contract.IListContract<T>.GetItem(Int32)
- uid: System.AddIn.Contract.IListContract`1.IndexOf(`0)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: IListContract<T>.IndexOf(T)
  fullName: System.AddIn.Contract.IListContract<T>.IndexOf(T)
- uid: System.AddIn.Contract.IListContract`1.Insert(System.Int32,`0)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Insert(Int32,T)
  nameWithType: IListContract<T>.Insert(Int32,T)
  fullName: System.AddIn.Contract.IListContract<T>.Insert(Int32,T)
- uid: System.AddIn.Contract.IListContract`1.Remove(`0)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Remove(T)
  nameWithType: IListContract<T>.Remove(T)
  fullName: System.AddIn.Contract.IListContract<T>.Remove(T)
- uid: System.AddIn.Contract.IListContract`1.RemoveAt(System.Int32)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IListContract<T>.RemoveAt(Int32)
  fullName: System.AddIn.Contract.IListContract<T>.RemoveAt(Int32)
- uid: System.AddIn.Contract.IListContract`1.SetItem(System.Int32,`0)
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: SetItem(Int32,T)
  nameWithType: IListContract<T>.SetItem(Int32,T)
  fullName: System.AddIn.Contract.IListContract<T>.SetItem(Int32,T)
- uid: System.AddIn.Contract.IListContract`1.Add*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Add
  nameWithType: IListContract<T>.Add
- uid: System.AddIn.Contract.IListContract`1.Clear*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Clear
  nameWithType: IListContract<T>.Clear
- uid: System.AddIn.Contract.IListContract`1.Contains*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Contains
  nameWithType: IListContract<T>.Contains
- uid: System.AddIn.Contract.IListContract`1.GetCount*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetCount
  nameWithType: IListContract<T>.GetCount
- uid: System.AddIn.Contract.IListContract`1.GetEnumeratorContract*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetEnumeratorContract
  nameWithType: IListContract<T>.GetEnumeratorContract
- uid: System.AddIn.Contract.IListContract`1.GetIsReadOnly*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetIsReadOnly
  nameWithType: IListContract<T>.GetIsReadOnly
- uid: System.AddIn.Contract.IListContract`1.GetItem*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: GetItem
  nameWithType: IListContract<T>.GetItem
- uid: System.AddIn.Contract.IListContract`1.IndexOf*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: IndexOf
  nameWithType: IListContract<T>.IndexOf
- uid: System.AddIn.Contract.IListContract`1.Insert*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Insert
  nameWithType: IListContract<T>.Insert
- uid: System.AddIn.Contract.IListContract`1.Remove*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: Remove
  nameWithType: IListContract<T>.Remove
- uid: System.AddIn.Contract.IListContract`1.RemoveAt*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: RemoveAt
  nameWithType: IListContract<T>.RemoveAt
- uid: System.AddIn.Contract.IListContract`1.SetItem*
  parent: System.AddIn.Contract.IListContract`1
  isExternal: false
  name: SetItem
  nameWithType: IListContract<T>.SetItem
