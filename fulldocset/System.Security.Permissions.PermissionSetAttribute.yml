### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PermissionSetAttribute
  id: PermissionSetAttribute
  children:
  - System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.PermissionSetAttribute.CreatePermission
  - System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet
  - System.Security.Permissions.PermissionSetAttribute.File
  - System.Security.Permissions.PermissionSetAttribute.Hex
  - System.Security.Permissions.PermissionSetAttribute.Name
  - System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded
  - System.Security.Permissions.PermissionSetAttribute.XML
  langs:
  - csharp
  name: PermissionSetAttribute
  nameWithType: PermissionSetAttribute
  fullName: System.Security.Permissions.PermissionSetAttribute
  type: Class
  summary: "Allows security actions for a <xref href=&quot;System.Security.PermissionSet&quot;></xref> to be applied to code using declarative security. This class cannot be inherited."
  remarks: "The PermissionSetAttribute properties <xref:System.Security.Permissions.PermissionSetAttribute.Name%2A>, <xref:System.Security.Permissions.PermissionSetAttribute.File%2A>, and <xref:System.Security.Permissions.PermissionSetAttribute.XML%2A> are mutually exclusive, meaning that a permission set can have as its source only one of the following: a named permission set, a file containing an XML representation of a permission set, or a string containing an XML representation of a permission set.       The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used. A <xref:System.Security.Permissions.SecurityAction> performed on a <xref:System.Security.PermissionSet> is the equivalent of performing that action on each of the permissions within the set.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class."
  example:
  - "The following example shows the use of the PermissionSetAttribute Class.  \n  \n [!code-vb[System.Security.Permissions.PermissionSetAttribute#1](~/add/codesnippet/visualbasic/t-system.security.permis_5_1.vb)]\n [!code-cs[System.Security.Permissions.PermissionSetAttribute#1](~/add/codesnippet/csharp/t-system.security.permis_5_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PermissionSetAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: PermissionSetAttribute(SecurityAction)
  nameWithType: PermissionSetAttribute.PermissionSetAttribute(SecurityAction)
  fullName: System.Security.Permissions.PermissionSetAttribute.PermissionSetAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.PermissionSetAttribute&quot;></xref> class with the specified security action."
  syntax:
    content: public PermissionSetAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "One of the enumeration values that specifies a security action."
  overload: System.Security.Permissions.PermissionSetAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: PermissionSetAttribute.CreatePermission()
  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "This method is not used."
  remarks: "This method is not used; it is included only to support inheritance from <xref:System.Security.Permissions.SecurityAttribute>."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A null reference (<xref uid=&quot;langword_csharp_nothing&quot; name=&quot;nothing&quot; href=&quot;&quot;></xref> in Visual Basic) in all cases."
  overload: System.Security.Permissions.PermissionSetAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet
  id: CreatePermissionSet
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: CreatePermissionSet()
  nameWithType: PermissionSetAttribute.CreatePermissionSet()
  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a new permission set based on this permission set attribute object."
  remarks: "This method should be called only by the security system, never by application code.       Attributes are used at compile time to convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission object that this method returns, which corresponds to this attribute instance."
  syntax:
    content: public System.Security.PermissionSet CreatePermissionSet ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "A new permission set."
  overload: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.File
  id: File
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: File
  nameWithType: PermissionSetAttribute.File
  fullName: System.Security.Permissions.PermissionSetAttribute.File
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a file containing the XML representation of a custom permission set to be declared."
  remarks: "If the file specified is Unicode, set the <xref:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded%2A> property to `true`."
  example:
  - "The following code shows the use of the File property. This code example is part of a larger example provided for the <xref:System.Security.Permissions.PermissionSetAttribute> class.  \n  \n [!code-vb[System.Security.Permissions.PermissionSetAttribute#2](~/add/codesnippet/visualbasic/p-system.security.permis_27_1.vb)]\n [!code-cs[System.Security.Permissions.PermissionSetAttribute#2](~/add/codesnippet/csharp/p-system.security.permis_27_1.cs)]"
  syntax:
    content: public string File { get; set; }
    return:
      type: System.String
      description: "The physical path to the file containing the XML representation of the permission set."
  overload: System.Security.Permissions.PermissionSetAttribute.File*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.Hex
  id: Hex
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: Hex
  nameWithType: PermissionSetAttribute.Hex
  fullName: System.Security.Permissions.PermissionSetAttribute.Hex
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the hexadecimal representation of the XML encoded permission set."
  syntax:
    content: public string Hex { get; set; }
    return:
      type: System.String
      description: "The hexadecimal representation of the XML encoded permission set."
  overload: System.Security.Permissions.PermissionSetAttribute.Hex*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.Name
  id: Name
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: Name
  nameWithType: PermissionSetAttribute.Name
  fullName: System.Security.Permissions.PermissionSetAttribute.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the name of the permission set."
  remarks: "Because named permission sets can vary from computer to computer, the use of named permission sets for declarative security is restricted to the immutable named permission sets included as part of the default policy. This ensures that the permissions contained in the permission set referenced will be the same wherever the code is run. A compiler error will be thrown if a mutable or unrecognized named permission set is used."
  example:
  - "The following code shows the use of the Name property. This code example is part of a larger example provided for the <xref:System.Security.Permissions.PermissionSetAttribute> class.  \n  \n [!code-vb[System.Security.Permissions.PermissionSetAttribute#3](~/add/codesnippet/visualbasic/p-system.security.permis_28_1.vb)]\n [!code-cs[System.Security.Permissions.PermissionSetAttribute#3](~/add/codesnippet/csharp/p-system.security.permis_28_1.cs)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "The name of an immutable <xref href=&quot;System.Security.NamedPermissionSet&quot;></xref> (one of several permission sets that are contained in the default policy and cannot be altered)."
  overload: System.Security.Permissions.PermissionSetAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded
  id: UnicodeEncoded
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: UnicodeEncoded
  nameWithType: PermissionSetAttribute.UnicodeEncoded
  fullName: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether the file specified by <xref:System.Security.Permissions.PermissionSetAttribute.File*> is Unicode or ASCII encoded."
  remarks: "If this property is not set, the file is assumed to be ASCII.       If <xref:System.Security.Permissions.PermissionSetAttribute.File%2A> is `null` this property is not used."
  syntax:
    content: public bool UnicodeEncoded { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the file is Unicode encoded; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PermissionSetAttribute.XML
  id: XML
  parent: System.Security.Permissions.PermissionSetAttribute
  langs:
  - csharp
  name: XML
  nameWithType: PermissionSetAttribute.XML
  fullName: System.Security.Permissions.PermissionSetAttribute.XML
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the XML representation of a permission set."
  syntax:
    content: public string XML { get; set; }
    return:
      type: System.String
      description: "The XML representation of a permission set."
  overload: System.Security.Permissions.PermissionSetAttribute.XML*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: PermissionSetAttribute(SecurityAction)
  nameWithType: PermissionSetAttribute.PermissionSetAttribute(SecurityAction)
  fullName: System.Security.Permissions.PermissionSetAttribute.PermissionSetAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermission
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: PermissionSetAttribute.CreatePermission()
  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: CreatePermissionSet()
  nameWithType: PermissionSetAttribute.CreatePermissionSet()
  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet()
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.Permissions.PermissionSetAttribute.File
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: File
  nameWithType: PermissionSetAttribute.File
  fullName: System.Security.Permissions.PermissionSetAttribute.File
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PermissionSetAttribute.Hex
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: Hex
  nameWithType: PermissionSetAttribute.Hex
  fullName: System.Security.Permissions.PermissionSetAttribute.Hex
- uid: System.Security.Permissions.PermissionSetAttribute.Name
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: Name
  nameWithType: PermissionSetAttribute.Name
  fullName: System.Security.Permissions.PermissionSetAttribute.Name
- uid: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: UnicodeEncoded
  nameWithType: PermissionSetAttribute.UnicodeEncoded
  fullName: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PermissionSetAttribute.XML
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: XML
  nameWithType: PermissionSetAttribute.XML
  fullName: System.Security.Permissions.PermissionSetAttribute.XML
- uid: System.Security.Permissions.PermissionSetAttribute.#ctor*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: PermissionSetAttribute
  nameWithType: PermissionSetAttribute.PermissionSetAttribute
- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermission*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: PermissionSetAttribute.CreatePermission
- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: CreatePermissionSet
  nameWithType: PermissionSetAttribute.CreatePermissionSet
- uid: System.Security.Permissions.PermissionSetAttribute.File*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: File
  nameWithType: PermissionSetAttribute.File
- uid: System.Security.Permissions.PermissionSetAttribute.Hex*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: Hex
  nameWithType: PermissionSetAttribute.Hex
- uid: System.Security.Permissions.PermissionSetAttribute.Name*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: Name
  nameWithType: PermissionSetAttribute.Name
- uid: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: UnicodeEncoded
  nameWithType: PermissionSetAttribute.UnicodeEncoded
- uid: System.Security.Permissions.PermissionSetAttribute.XML*
  parent: System.Security.Permissions.PermissionSetAttribute
  isExternal: false
  name: XML
  nameWithType: PermissionSetAttribute.XML
