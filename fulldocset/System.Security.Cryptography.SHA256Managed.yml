### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SHA256Managed
  id: SHA256Managed
  children:
  - System.Security.Cryptography.SHA256Managed.#ctor
  - System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.SHA256Managed.HashFinal
  - System.Security.Cryptography.SHA256Managed.Initialize
  langs:
  - csharp
  name: SHA256Managed
  nameWithType: SHA256Managed
  fullName: System.Security.Cryptography.SHA256Managed
  type: Class
  summary: "Computes the <xref href=&quot;System.Security.Cryptography.SHA256&quot;></xref> hash for the input data using the managed library."
  remarks: "The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       The hash size for the SHA256Managed algorithm is 256 bits."
  example:
  - "The following example calculates the SHA-256 hash for all files in a directory.  \n  \n [!code-cpp[Classic SHA256 Example#1](~/add/codesnippet/cpp/t-system.security.crypto_6_1.cpp)]\n [!code-cs[Classic SHA256 Example#1](~/add/codesnippet/csharp/t-system.security.crypto_6_1.cs)]\n [!code-vb[Classic SHA256 Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_6_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SHA256Managed : System.Security.Cryptography.SHA256
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.SHA256
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.SHA256.Create
  - System.Security.Cryptography.SHA256.Create(System.String)
  platform:
  - net462
- uid: System.Security.Cryptography.SHA256Managed.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SHA256Managed
  langs:
  - csharp
  name: SHA256Managed()
  nameWithType: SHA256Managed.SHA256Managed()
  fullName: System.Security.Cryptography.SHA256Managed.SHA256Managed()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref> class using the managed library."
  remarks: "The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       The hash size for the <xref:System.Security.Cryptography.SHA256Managed> algorithm is 256 bits.       **Important** If you enable the following security setting either in the Local Security Policy or as part of Group Policy you will get an <xref:System.InvalidOperationException> when you attempt to use this constructor:       **System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing**"
  syntax:
    content: public SHA256Managed ();
    parameters: []
  overload: System.Security.Cryptography.SHA256Managed.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The Federal Information Processing Standards (FIPS) security setting is enabled. This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms."
  platform:
  - net462
- uid: System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.SHA256Managed
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: SHA256Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.SHA256Managed.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, routes data written to the object into the <xref href=&quot;System.Security.Cryptography.SHA256&quot;></xref> hash algorithm for computing the hash."
  remarks: "This method is not called by application code.       This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream."
  syntax:
    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "The input data."
    - id: ibStart
      type: System.Int32
      description: "The offset into the byte array from which to begin using data."
    - id: cbSize
      type: System.Int32
      description: "The number of bytes in the array to use as data."
  overload: System.Security.Cryptography.SHA256Managed.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SHA256Managed.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.SHA256Managed
  langs:
  - csharp
  name: HashFinal()
  nameWithType: SHA256Managed.HashFinal()
  fullName: System.Security.Cryptography.SHA256Managed.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object."
  remarks: "This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream."
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "The computed hash code."
  overload: System.Security.Cryptography.SHA256Managed.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SHA256Managed.Initialize
  id: Initialize
  parent: System.Security.Cryptography.SHA256Managed
  langs:
  - csharp
  name: Initialize()
  nameWithType: SHA256Managed.Initialize()
  fullName: System.Security.Cryptography.SHA256Managed.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes an instance of <xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref>."
  remarks: "The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.       The hash size for the <xref:System.Security.Cryptography.SHA256Managed> algorithm is 256 bits."
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.SHA256Managed.Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SHA256
  isExternal: false
  name: System.Security.Cryptography.SHA256
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.SHA256Managed.#ctor
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: SHA256Managed()
  nameWithType: SHA256Managed.SHA256Managed()
  fullName: System.Security.Cryptography.SHA256Managed.SHA256Managed()
- uid: System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: SHA256Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.SHA256Managed.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SHA256Managed.HashFinal
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: HashFinal()
  nameWithType: SHA256Managed.HashFinal()
  fullName: System.Security.Cryptography.SHA256Managed.HashFinal()
- uid: System.Security.Cryptography.SHA256Managed.Initialize
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: Initialize()
  nameWithType: SHA256Managed.Initialize()
  fullName: System.Security.Cryptography.SHA256Managed.Initialize()
- uid: System.Security.Cryptography.SHA256Managed.#ctor*
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: SHA256Managed
  nameWithType: SHA256Managed.SHA256Managed
- uid: System.Security.Cryptography.SHA256Managed.HashCore*
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: HashCore
  nameWithType: SHA256Managed.HashCore
- uid: System.Security.Cryptography.SHA256Managed.HashFinal*
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: HashFinal
  nameWithType: SHA256Managed.HashFinal
- uid: System.Security.Cryptography.SHA256Managed.Initialize*
  parent: System.Security.Cryptography.SHA256Managed
  isExternal: false
  name: Initialize
  nameWithType: SHA256Managed.Initialize
