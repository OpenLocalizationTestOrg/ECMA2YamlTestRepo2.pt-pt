### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "Fornece um serviço de escuta simple que direciona o rastreio ou depuração de saída para um <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "Uma instância deste EventLogTraceListener pode ser adicionada para o <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, ou de <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>coleções para enviar o resultado do rastreio ou depuração para um <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> Pode adicionar a instância no seu código ou de especificá-lo no ficheiro de configuração de aplicação. Para adicionar um EventLogTraceListener utilizando um ficheiro de configuração de aplicação, edite o ficheiro que corresponde ao nome da sua aplicação ou o ficheiro App. config num [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] projeto. Neste ficheiro, inserir um elemento de um tipo de EventLogTraceListener.       O exemplo seguinte adiciona um objeto de EventLogTraceListener com o nome `myListener` para o <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>coleção.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> O `initializeData` parâmetro especifica o nome da origem do registo de eventos que está a ser transmitido para o <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>construtor.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```Para obter mais informações sobre como adicionar serviços de escuta de rastreio no ficheiro de configuração de aplicação, consulte o artigo ou.      > [!NOTE] > Se o <xref:System.Diagnostics.EventLog.Source%2A>para o registo de eventos que estão associado com a instância de EventLogTraceListener não existe, é criada uma nova origem de evento.</xref:System.Diagnostics.EventLog.Source%2A> Para criar uma origem de evento no Windows Vista, Windows XP Professional ou Windows Server 2003, tem de ter privilégios administrativos.   >> A razão para este requisito é que todos os registos de eventos, incluindo a segurança, tem de ser procurados para determinar se a origem do evento é exclusiva. No Windows Vista, os utilizadores não têm permissão para aceder ao registo de segurança; Por conseguinte, um <xref:System.Security.SecurityException>é emitida.</xref:System.Security.SecurityException>   >> No Windows Vista, o controlo de conta de utilizador (UAC) determina os privilégios de utilizador. Se for um membro do grupo Administradores incorporado, são atribuídos dois tokens de acesso de tempo de execução: um token de acesso de utilizador padrão e um token de acesso de administrador. Por predefinição, está na função de utilizador padrão. Para executar o código que acede ao registo de segurança, deve primeiro elevar os privilégios de utilizador padrão ao administrador. Pode fazê-lo quando iniciar uma aplicação ao clicar no ícone de aplicação e com a indicação de que pretende executar como administrador.       A classe fornece o <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>propriedade obter ou definir o registo de eventos que recebe o rastreio ou o resultado, a depuração e o <xref:System.Diagnostics.EventLogTraceListener.Name%2A>propriedade para conter o nome do EventLogTraceListener.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       O <xref:System.Diagnostics.EventLogTraceListener.Close%2A>método fecha o registo de eventos, pelo que já não recebe rastreio ou saída de depuração.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> A <xref:System.Diagnostics.EventLogTraceListener.Write%2A>e <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>métodos de escrita de uma mensagem para registo de eventos.</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> </xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > Para evitar a possibilidade de grandes quantidades de dados a escrever o registo de eventos, o EventLogTraceListener não dados de saída dos rastreio opcional especificados pelo <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>propriedade.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe sem um serviço de escuta de rastreio."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe utilizando o registo de eventos especificado."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "O registo de eventos para escrever."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe com a origem especificada."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "O nome de uma origem de registo de eventos existente."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Fecha o registo de eventos, para que deixará de receber saída de rastreio ou depuração."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "A adicionar."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o registo de eventos para escrever."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "O registo de eventos para escrever."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome deste <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>."
  remarks: "Esta propriedade está predefinida para o nome da origem do registo de eventos."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "O nome do serviço de escuta de rastreio."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Escreve informações de rastreio, um objeto de dados e informações de evento no registo de eventos."
  remarks: "> [!IMPORTANT]> O <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>métodos não se destinam a ser chamado pelo código da aplicação.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> São denominados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes de dados de rastreio de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>método, como o <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se ferramentas automatizadas mas também permite que a ligação dos objetos adicionais, por exemplo uma instância de exceção, para o rastreio.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       O `eventCache` e `source` parâmetros são utilizados para determinar se o evento deve ser rastreado. `id`é utilizado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>é equated para um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é escrito no registo de eventos com o `data` objeto, a formatados como uma cadeia, utilizando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65535. Se o `id` valor especificado é maior que 65535, será utilizado o valor máximo."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém atual processar o ID, ID de thread e informações de rastreio da pilha."
    - id: source
      type: System.String
      description: "Um nome utilizado para identificar a saída; Normalmente, o nome da aplicação que gerou o evento de rastreio."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores da enumeração que especifica o tipo de evento que provocou o rastreio."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: data
      type: System.Object
      description: "Um objeto de dados a escrever o ficheiro de saída ou fluxo."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Não foi especificado.       - ou - a cadeia de entrada de registo excede 32,766 carateres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Escritas de rastreio informações, uma matriz de objetos de dados e informações de evento no registo de eventos."
  remarks: "> [!IMPORTANT]> O <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>métodos não se destinam a ser chamado pelo código da aplicação.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> São denominados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes de dados de rastreio de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>método, como o <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se ferramentas automatizadas mas também permite que a ligação dos objetos adicionais, por exemplo uma instância de exceção, para o rastreio.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       O `severity` e `id` dados de parâmetro são utilizados para criar um <xref:System.Diagnostics.EventInstance>objeto, que é escrito no registo de eventos com os dados da matriz de objetos de dados.</xref:System.Diagnostics.EventInstance>       O `eventCache` e `source` parâmetros são utilizados para determinar se o evento deve ser rastreado. `id`é utilizado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>é equated para um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é escrito no registo de eventos com o `data` matriz de objetos, a formatados como uma matriz de cadeia, utilizando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65535. Se o `id` valor especificado é maior que 65535, será utilizado o valor máximo."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém atual processar o ID, ID de thread e informações de rastreio da pilha."
    - id: source
      type: System.String
      description: "Um nome utilizado para identificar a saída; Normalmente, o nome da aplicação que gerou o evento de rastreio."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores da enumeração que especifica o tipo de evento que provocou o rastreio."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: data
      type: System.Object[]
      description: "Uma matriz de objetos de dados."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Não foi especificado.       - ou - a cadeia de entrada de registo excede 32,766 carateres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Escritas de rastreio informações, uma mensagem e informações de evento no registo de eventos."
  remarks: "> [!IMPORTANT]> O <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>métodos não se destinam a ser chamado pelo código da aplicação.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Estes métodos são denominados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para escrever dados de rastreio.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se os eventos de rastreio que podem ser processados pelas ferramentas automaticamente.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Por exemplo uma ferramenta monitorização pode indicar um administrador, se um evento específico é rastreado por uma origem específica.       O `eventCache` e `source` parâmetros são utilizados para determinar se o evento deve ser rastreado. `id`é utilizado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>é equated para um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é escrito no registo de eventos com o `message` dados utilizando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65535. Se o `id` valor especificado é maior que 65535, será utilizado o valor máximo."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém atual processar o ID, ID de thread e informações de rastreio da pilha."
    - id: source
      type: System.String
      description: "Um nome utilizado para identificar a saída; Normalmente, o nome da aplicação que gerou o evento de rastreio."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores da enumeração que especifica o tipo de evento que provocou o rastreio."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: message
      type: System.String
      description: "A mensagem de rastreio."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Não foi especificado.       - ou - a cadeia de entrada de registo excede 32,766 carateres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Escritas de rastreio informações, uma matriz de objetos e informações de evento no registo de eventos formatada."
  remarks: "> [!IMPORTANT]> O <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>métodos não se destinam a ser chamado pelo código da aplicação.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Estes métodos são denominados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para escrever dados de rastreio.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se os eventos de rastreio que podem ser processados pelas ferramentas automaticamente.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Por exemplo uma ferramenta monitorização pode indicar um administrador, se um evento específico é rastreado por uma origem específica.       O `eventCache` e `source` parâmetros são utilizados para determinar se o evento deve ser rastreado. `id`é utilizado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>é equated para um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é escrito no registo de eventos, utilizando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método, com a mensagem obtido a partir de `format` e `args` parâmetros.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> O `args` matriz object é convertido para uma cadeia utilizando a <xref:System.String.Format%2A>método, transmitir o `format` cadeia e `args` matriz para a cadeia de formatação que a mensagem para registo de eventos.</xref:System.String.Format%2A>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65535. Se o `id` valor especificado é maior que 65535, será utilizado o valor máximo."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém atual processar o ID, ID de thread e informações de rastreio da pilha."
    - id: source
      type: System.String
      description: "Um nome utilizado para identificar a saída; Normalmente, o nome da aplicação que gerou o evento de rastreio."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores da enumeração que especifica o tipo de evento que provocou o rastreio."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: format
      type: System.String
      description: "Uma cadeia de formato contém zero ou mais itens de formato que correspondem a objetos de `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matriz que contenha zero ou mais objetos para formatar."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>Não foi especificado.       - ou - a cadeia de entrada de registo excede 32,766 carateres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Escreve uma mensagem para registo de eventos para esta instância."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem a escrever."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>excede 32,766 caracteres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Escreve uma mensagem para registo de eventos para esta instância."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem a escrever."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>excede 32,766 caracteres."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
