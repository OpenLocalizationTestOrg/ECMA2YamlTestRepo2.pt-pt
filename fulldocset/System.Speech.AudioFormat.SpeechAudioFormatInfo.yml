### YamlMime:ManagedReference
items:
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
  id: SpeechAudioFormatInfo
  children:
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode
  - System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond
  langs:
  - csharp
  name: SpeechAudioFormatInfo
  nameWithType: SpeechAudioFormatInfo
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo
  type: Class
  summary: "Represents information about an audio format."
  syntax:
    content: public class SpeechAudioFormatInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)
  id: '#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)'
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)
  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.AudioFormat.SpeechAudioFormatInfo&quot;></xref> class and specifies the samples per second, bits per sample, and the number of channels."
  remarks: ''
  example:
  - "The following example shows a typical use of SpeechAudioFormatInfo to specify the format of audio to output to a WAV file. The SpeechAudioFormatInfo instance is an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\temp\\test.wav\",   \n          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \n  \n        // Create a SoundPlayer instance to play output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =   \n          new System.Media.SoundPlayer(@\"C:\\temp\\test.wav\");  \n  \n        // Build a prompt.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"This is sample output to a WAVE file.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public SpeechAudioFormatInfo (int samplesPerSecond, System.Speech.AudioFormat.AudioBitsPerSample bitsPerSample, System.Speech.AudioFormat.AudioChannel channel);
    parameters:
    - id: samplesPerSecond
      type: System.Int32
      description: "The value for the samples per second."
    - id: bitsPerSample
      type: System.Speech.AudioFormat.AudioBitsPerSample
      description: "The value for the bits per sample."
    - id: channel
      type: System.Speech.AudioFormat.AudioChannel
      description: "A member of the <xref href=&quot;System.Speech.AudioFormat.AudioChannel&quot;></xref> enumeration (indicating `Mono` or `Stereo`)."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])
  id: '#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])'
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])
  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.AudioFormat.SpeechAudioFormatInfo&quot;></xref> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data."
  syntax:
    content: public SpeechAudioFormatInfo (System.Speech.AudioFormat.EncodingFormat encodingFormat, int samplesPerSecond, int bitsPerSample, int channelCount, int averageBytesPerSecond, int blockAlign, byte[] formatSpecificData);
    parameters:
    - id: encodingFormat
      type: System.Speech.AudioFormat.EncodingFormat
      description: "The encoding format."
    - id: samplesPerSecond
      type: System.Int32
      description: "The value for the samples per second."
    - id: bitsPerSample
      type: System.Int32
      description: "The value for the bits per sample."
    - id: channelCount
      type: System.Int32
      description: "The value for the channel count."
    - id: averageBytesPerSecond
      type: System.Int32
      description: "The value for the average bytes per second."
    - id: blockAlign
      type: System.Int32
      description: "The value for the BlockAlign."
    - id: formatSpecificData
      type: System.Byte[]
      description: "A byte array containing the format-specific data."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond
  id: AverageBytesPerSecond
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: AverageBytesPerSecond
  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Gets the average bytes per second of the audio."
  syntax:
    content: public int AverageBytesPerSecond { get; }
    return:
      type: System.Int32
      description: "The value for the average bytes per second."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample
  id: BitsPerSample
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: BitsPerSample
  nameWithType: SpeechAudioFormatInfo.BitsPerSample
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Gets the bits per sample of the audio."
  syntax:
    content: public int BitsPerSample { get; }
    return:
      type: System.Int32
      description: "The value for the bits per sample."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign
  id: BlockAlign
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: BlockAlign
  nameWithType: SpeechAudioFormatInfo.BlockAlign
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Gets and sets the block alignment in bytes."
  remarks: "Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the BlockAlign property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:      -   Block Alignment = Bytes per Sample x Number of Channels       For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.       Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned)."
  syntax:
    content: public int BlockAlign { get; }
    return:
      type: System.Int32
      description: "The value for the block alignment."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount
  id: ChannelCount
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: ChannelCount
  nameWithType: SpeechAudioFormatInfo.ChannelCount
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Gets the channel count of the audio."
  syntax:
    content: public int ChannelCount { get; }
    return:
      type: System.Int32
      description: "The value for the channel count."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat
  id: EncodingFormat
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: EncodingFormat
  nameWithType: SpeechAudioFormatInfo.EncodingFormat
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Gets the encoding format of the audio."
  syntax:
    content: public System.Speech.AudioFormat.EncodingFormat EncodingFormat { get; }
    return:
      type: System.Speech.AudioFormat.EncodingFormat
      description: "The encoding format of the audio."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SpeechAudioFormatInfo.Equals(Object)
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Returns whether a given object is an instance of <xref href=&quot;System.Speech.AudioFormat.SpeechAudioFormatInfo&quot;></xref> and equal to the current instance of <xref href=&quot;System.Speech.AudioFormat.SpeechAudioFormatInfo&quot;></xref>."
  remarks: "The method returns `false` if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo>."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to be compared."
    return:
      type: System.Boolean
      description: "Returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current instance of <xref href=&quot;System.Speech.AudioFormat.SpeechAudioFormatInfo&quot;></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData
  id: FormatSpecificData
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: FormatSpecificData()
  nameWithType: SpeechAudioFormatInfo.FormatSpecificData()
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Returns the format-specific data of the audio format."
  syntax:
    content: public byte[] FormatSpecificData ();
    parameters: []
    return:
      type: System.Byte[]
      description: "A byte array containing the format-specific data."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode
  id: GetHashCode
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SpeechAudioFormatInfo.GetHashCode()
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Returns the hash code of the audio format."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "The value for the hash code."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond
  id: SamplesPerSecond
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  langs:
  - csharp
  name: SamplesPerSecond
  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.AudioFormat
  summary: "Gets the samples per second of the audio format."
  syntax:
    content: public int SamplesPerSecond { get; }
    return:
      type: System.Int32
      description: "The value for the samples per second."
  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)
  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.AudioFormat.AudioBitsPerSample
  parent: System.Speech.AudioFormat
  isExternal: false
  name: AudioBitsPerSample
  nameWithType: AudioBitsPerSample
  fullName: System.Speech.AudioFormat.AudioBitsPerSample
- uid: System.Speech.AudioFormat.AudioChannel
  parent: System.Speech.AudioFormat
  isExternal: false
  name: AudioChannel
  nameWithType: AudioChannel
  fullName: System.Speech.AudioFormat.AudioChannel
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])
  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])
- uid: System.Speech.AudioFormat.EncodingFormat
  parent: System.Speech.AudioFormat
  isExternal: false
  name: EncodingFormat
  nameWithType: EncodingFormat
  fullName: System.Speech.AudioFormat.EncodingFormat
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: AverageBytesPerSecond
  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: BitsPerSample
  nameWithType: SpeechAudioFormatInfo.BitsPerSample
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: BlockAlign
  nameWithType: SpeechAudioFormatInfo.BlockAlign
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: ChannelCount
  nameWithType: SpeechAudioFormatInfo.ChannelCount
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: EncodingFormat
  nameWithType: SpeechAudioFormatInfo.EncodingFormat
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: SpeechAudioFormatInfo.Equals(Object)
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: FormatSpecificData()
  nameWithType: SpeechAudioFormatInfo.FormatSpecificData()
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData()
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: SpeechAudioFormatInfo.GetHashCode()
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode()
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: SamplesPerSecond
  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: SpeechAudioFormatInfo
  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: AverageBytesPerSecond
  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: BitsPerSample
  nameWithType: SpeechAudioFormatInfo.BitsPerSample
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: BlockAlign
  nameWithType: SpeechAudioFormatInfo.BlockAlign
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: ChannelCount
  nameWithType: SpeechAudioFormatInfo.ChannelCount
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: EncodingFormat
  nameWithType: SpeechAudioFormatInfo.EncodingFormat
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: Equals
  nameWithType: SpeechAudioFormatInfo.Equals
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: FormatSpecificData
  nameWithType: SpeechAudioFormatInfo.FormatSpecificData
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: GetHashCode
  nameWithType: SpeechAudioFormatInfo.GetHashCode
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond*
  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo
  isExternal: false
  name: SamplesPerSecond
  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond
