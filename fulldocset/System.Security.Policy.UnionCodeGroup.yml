### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.UnionCodeGroup
  id: UnionCodeGroup
  children:
  - System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)
  - System.Security.Policy.UnionCodeGroup.Copy
  - System.Security.Policy.UnionCodeGroup.MergeLogic
  - System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)
  - System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  langs:
  - csharp
  name: UnionCodeGroup
  nameWithType: UnionCodeGroup
  fullName: System.Security.Policy.UnionCodeGroup
  type: Class
  summary: "Represents a code group whose policy statement is the union of the current code group&quot;s policy statement and the policy statement of all its matching child code groups. This class cannot be inherited."
  remarks: "Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups (and so on), forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it or not, based on the evidence for that assembly. Only code groups whose membership conditions match a given assembly and their child code groups apply policy.       UnionCodeGroup is the most common type of code group; the policy statement of all matching child code groups (and by extension their child code groups) are combined with the permission set of the matching parent code group. Thus, if its membership condition matches, this code group forms the union of its policy statement and those of all its child code groups that also match the evidence.       UnionCodeGroup code groups are the code groups created by the CASPOL utility (see [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md))."
  syntax:
    content: >-
      [System.Obsolete("This type is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class UnionCodeGroup : System.Security.Policy.CodeGroup
  inheritance:
  - System.Object
  - System.Security.Policy.CodeGroup
  implements: []
  inheritedMembers:
  - System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)
  - System.Security.Policy.CodeGroup.AttributeString
  - System.Security.Policy.CodeGroup.Children
  - System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)
  - System.Security.Policy.CodeGroup.Description
  - System.Security.Policy.CodeGroup.Equals(System.Object)
  - System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)
  - System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)
  - System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)
  - System.Security.Policy.CodeGroup.GetHashCode
  - System.Security.Policy.CodeGroup.MembershipCondition
  - System.Security.Policy.CodeGroup.Name
  - System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)
  - System.Security.Policy.CodeGroup.PermissionSetName
  - System.Security.Policy.CodeGroup.PolicyStatement
  - System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)
  - System.Security.Policy.CodeGroup.ToXml
  - System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)
  platform:
  - net462
- uid: System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)
  id: '#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)'
  parent: System.Security.Policy.UnionCodeGroup
  langs:
  - csharp
  name: UnionCodeGroup(IMembershipCondition,PolicyStatement)
  nameWithType: UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)
  fullName: System.Security.Policy.UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Policy.UnionCodeGroup&quot;></xref> class."
  remarks: "This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups by using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method."
  syntax:
    content: public UnionCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);
    parameters:
    - id: membershipCondition
      type: System.Security.Policy.IMembershipCondition
      description: "A membership condition that tests evidence to determine whether this code group applies policy."
    - id: policy
      type: System.Security.Policy.PolicyStatement
      description: "The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition."
  overload: System.Security.Policy.UnionCodeGroup.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The type of the <code>membershipCondition</code> parameter is not valid.       -or-       The type of the <code>policy</code> parameter is not valid."
  platform:
  - net462
- uid: System.Security.Policy.UnionCodeGroup.Copy
  id: Copy
  parent: System.Security.Policy.UnionCodeGroup
  langs:
  - csharp
  name: Copy()
  nameWithType: UnionCodeGroup.Copy()
  fullName: System.Security.Policy.UnionCodeGroup.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Makes a deep copy of the current code group."
  remarks: "This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made."
  syntax:
    content: public override System.Security.Policy.CodeGroup Copy ();
    parameters: []
    return:
      type: System.Security.Policy.CodeGroup
      description: "An equivalent copy of the current code group, including its membership conditions and child code groups."
  overload: System.Security.Policy.UnionCodeGroup.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.UnionCodeGroup.MergeLogic
  id: MergeLogic
  parent: System.Security.Policy.UnionCodeGroup
  langs:
  - csharp
  name: MergeLogic
  nameWithType: UnionCodeGroup.MergeLogic
  fullName: System.Security.Policy.UnionCodeGroup.MergeLogic
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Gets the merge logic."
  syntax:
    content: public override string MergeLogic { get; }
    return:
      type: System.String
      description: "Always the string &quot;Union&quot;."
  overload: System.Security.Policy.UnionCodeGroup.MergeLogic*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)
  id: Resolve(System.Security.Policy.Evidence)
  parent: System.Security.Policy.UnionCodeGroup
  langs:
  - csharp
  name: Resolve(Evidence)
  nameWithType: UnionCodeGroup.Resolve(Evidence)
  fullName: System.Security.Policy.UnionCodeGroup.Resolve(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Resolves policy for the code group and its descendants for a set of evidence."
  remarks: "Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.       For union code groups, all child code groups whose membership condition match the evidence are also resolved, and all resulting policy statements form a union with the policy statement of the parent union code group. Each child code group type determines how its child groups are applied, depending on how their respective Resolve methods work.       The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.       If the membership condition does not match the specified evidence, this method returns `null`; otherwise, it sets the permission set to be returned (P) equal to the code group&quot;s policy statement, and then continues. For each child code group, the method resolves the code group with the same evidence; if the result is not `null`, it sets P equal to the union of P and the child code group&quot;s policy statement. It then returns P, which is now the union of the current code group&quot;s policy statement and all child group policy statements."
  syntax:
    content: public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "The evidence for the assembly."
    return:
      type: System.Security.Policy.PolicyStatement
      description: "A policy statement consisting of the permissions granted by the code group with optional attributes, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the code group does not apply (the membership condition does not match the specified evidence)."
  overload: System.Security.Policy.UnionCodeGroup.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>evidence</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "More than one code group (including the parent code group and any child code groups) is marked <xref href=&quot;System.Security.Policy.PolicyStatementAttribute&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  id: ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  parent: System.Security.Policy.UnionCodeGroup
  langs:
  - csharp
  name: ResolveMatchingCodeGroups(Evidence)
  nameWithType: UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)
  fullName: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Resolves matching code groups."
  remarks: "Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a root code group. The code group that is returned may contain child code groups, which, in turn, may also contain child code groups, so the return value reflects the complete set of code groups that were matched by the evidence provided."
  syntax:
    content: public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "The evidence for the assembly."
    return:
      type: System.Security.Policy.CodeGroup
      description: "The complete set of code groups that were matched by the evidence."
  overload: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>evidence</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Policy.CodeGroup
  isExternal: false
  name: System.Security.Policy.CodeGroup
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: UnionCodeGroup(IMembershipCondition,PolicyStatement)
  nameWithType: UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)
  fullName: System.Security.Policy.UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)
- uid: System.Security.Policy.IMembershipCondition
  parent: System.Security.Policy
  isExternal: false
  name: IMembershipCondition
  nameWithType: IMembershipCondition
  fullName: System.Security.Policy.IMembershipCondition
- uid: System.Security.Policy.PolicyStatement
  parent: System.Security.Policy
  isExternal: false
  name: PolicyStatement
  nameWithType: PolicyStatement
  fullName: System.Security.Policy.PolicyStatement
- uid: System.Security.Policy.UnionCodeGroup.Copy
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: Copy()
  nameWithType: UnionCodeGroup.Copy()
  fullName: System.Security.Policy.UnionCodeGroup.Copy()
- uid: System.Security.Policy.UnionCodeGroup.MergeLogic
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: MergeLogic
  nameWithType: UnionCodeGroup.MergeLogic
  fullName: System.Security.Policy.UnionCodeGroup.MergeLogic
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: Resolve(Evidence)
  nameWithType: UnionCodeGroup.Resolve(Evidence)
  fullName: System.Security.Policy.UnionCodeGroup.Resolve(Evidence)
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: ResolveMatchingCodeGroups(Evidence)
  nameWithType: UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)
  fullName: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)
- uid: System.Security.Policy.UnionCodeGroup.#ctor*
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: UnionCodeGroup
  nameWithType: UnionCodeGroup.UnionCodeGroup
- uid: System.Security.Policy.UnionCodeGroup.Copy*
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: Copy
  nameWithType: UnionCodeGroup.Copy
- uid: System.Security.Policy.UnionCodeGroup.MergeLogic*
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: MergeLogic
  nameWithType: UnionCodeGroup.MergeLogic
- uid: System.Security.Policy.UnionCodeGroup.Resolve*
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: Resolve
  nameWithType: UnionCodeGroup.Resolve
- uid: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups*
  parent: System.Security.Policy.UnionCodeGroup
  isExternal: false
  name: ResolveMatchingCodeGroups
  nameWithType: UnionCodeGroup.ResolveMatchingCodeGroups
