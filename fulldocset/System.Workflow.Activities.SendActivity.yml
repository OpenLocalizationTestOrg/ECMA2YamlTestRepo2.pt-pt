### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.SendActivity
  id: SendActivity
  children:
  - System.Workflow.Activities.SendActivity.#ctor
  - System.Workflow.Activities.SendActivity.#ctor(System.String)
  - System.Workflow.Activities.SendActivity.AfterResponse
  - System.Workflow.Activities.SendActivity.AfterResponseEvent
  - System.Workflow.Activities.SendActivity.BeforeSend
  - System.Workflow.Activities.SendActivity.BeforeSendEvent
  - System.Workflow.Activities.SendActivity.ChannelToken
  - System.Workflow.Activities.SendActivity.Context
  - System.Workflow.Activities.SendActivity.CustomAddress
  - System.Workflow.Activities.SendActivity.CustomAddressProperty
  - System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  - System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  - System.Workflow.Activities.SendActivity.InitializeProperties
  - System.Workflow.Activities.SendActivity.ParameterBindings
  - System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  - System.Workflow.Activities.SendActivity.ServiceOperationInfo
  - System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  langs:
  - csharp
  name: SendActivity
  nameWithType: SendActivity
  fullName: System.Workflow.Activities.SendActivity
  type: Class
  summary: "Client activity that models the synchronous invocation of a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service operation."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The SendActivity activity enables you to participate in a conversation with a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service using a predefined message exchange pattern.      > [!NOTE] >  The SendActivity activity is a blocking activity, meaning that workflow execution is blocked until the activity completes execution.       The message exchange patterns supported by the SendActivity activity include:      -   One-way Send Message           The SendActivity activity sends a message but does not expect a response from the service.      -   Send Request - Receive Reply           The SendActivity activity sends a message and waits until a response is received from the service.      -   Send Request - Receive Fault           The SendActivity activity sends a message and waits until a response or a fault is received from the service. During execution, the send activity throws all of the faults that were received from the server. <xref:System.Workflow.ComponentModel.FaultHandlerActivity> activities can be used to handle the faults in the client workflow.      > [!NOTE] >  This activity is part of [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]. For the equivalent activity in [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Send>."
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.SendActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.SendActivity), "Design.Resources.SendActivity.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.SendActivityValidator))]

      public sealed class SendActivity : System.Workflow.ComponentModel.Activity
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  implements: []
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SendActivity()
  nameWithType: SendActivity.SendActivity()
  fullName: System.Workflow.Activities.SendActivity.SendActivity()
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> class."
  remarks: "The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer."
  example:
  - "The following example shows how to create a new instance of the <xref:System.Workflow.Activities.SendActivity> class.  This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#16](~/add/codesnippet/csharp/m-system.workflow.activi_9_1.cs)]"
  syntax:
    content: public SendActivity ();
    parameters: []
  overload: System.Workflow.Activities.SendActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SendActivity(String)
  nameWithType: SendActivity.SendActivity(String)
  fullName: System.Workflow.Activities.SendActivity.SendActivity(String)
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> class with the specified <xref uid=&quot;langword_csharp_name&quot; name=&quot;name&quot; href=&quot;&quot;></xref> property."
  remarks: "The <xref:System.Workflow.Activities.SendActivity> constructor is typically invoked in the code-beside file created by the workflow designer."
  example:
  - "The following example shows how to create a new instance of the <xref:System.Workflow.Activities.SendActivity> class.  \n  \n [!code-cs[SendActivity#17](~/add/codesnippet/csharp/m-system.workflow.activi_17_1.cs)]"
  syntax:
    content: public SendActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "The value assigned to <xref:System.Workflow.ComponentModel.Activity.Name*> when the activity is initialized."
  overload: System.Workflow.Activities.SendActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.AfterResponse
  id: AfterResponse
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: AfterResponse
  nameWithType: SendActivity.AfterResponse
  fullName: System.Workflow.Activities.SendActivity.AfterResponse
  type: Event
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Occurs after the response has been received from the service."
  remarks: "This event handler associated with this event can be used to read the return value from the service operation invoked."
  example:
  - "The following example shows how to use the `AfterResponse` event.  \n  \n [!code-cs[SendActivity#2](~/add/codesnippet/csharp/e-system.workflow.activi_4_1.cs)]"
  syntax:
    content: public event EventHandler<System.Workflow.Activities.SendActivityEventArgs> AfterResponse;
    return:
      type: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.AfterResponseEvent
  id: AfterResponseEvent
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: AfterResponseEvent
  nameWithType: SendActivity.AfterResponseEvent
  fullName: System.Workflow.Activities.SendActivity.AfterResponseEvent
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents the <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref> that targets the <xref href=&quot;System.Workflow.Activities.SendActivity.AfterResponse&quot;></xref> event."
  remarks: "This dependency event property can be used to bind the send activity&quot;s <xref:System.Workflow.Activities.SendActivity.AfterResponse> event to a public event handler on the workflow class."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.BeforeSend
  id: BeforeSend
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: BeforeSend
  nameWithType: SendActivity.BeforeSend
  fullName: System.Workflow.Activities.SendActivity.BeforeSend
  type: Event
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Occurs before the <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> activity sends the message to the service."
  remarks: "This event handler associated with this event can be used to set the parameter values for the service operation being invoked.      > [!NOTE] >  The context of a <xref:System.Workflow.Activities.SendActivity> cannot be set in this event handler."
  example:
  - "The following example shows how to use the `BeforeSend` event. This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#3](~/add/codesnippet/csharp/e-system.workflow.activi_3_1.cs)]"
  syntax:
    content: public event EventHandler<System.Workflow.Activities.SendActivityEventArgs> BeforeSend;
    return:
      type: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.BeforeSendEvent
  id: BeforeSendEvent
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: BeforeSendEvent
  nameWithType: SendActivity.BeforeSendEvent
  fullName: System.Workflow.Activities.SendActivity.BeforeSendEvent
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents the <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref> that targets the <xref href=&quot;System.Workflow.Activities.SendActivity.BeforeSend&quot;></xref> event."
  remarks: "This dependency event property can be used to bind the send activity&quot;s <xref:System.Workflow.Activities.SendActivity.BeforeSend> event to a public event handler on the workflow class."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ChannelToken
  id: ChannelToken
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ChannelToken
  nameWithType: SendActivity.ChannelToken
  fullName: System.Workflow.Activities.SendActivity.ChannelToken
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "<xref href=&quot;System.Workflow.Activities.ChannelToken&quot;></xref> used by the <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> to associate itself with a client channel."
  remarks: "A channel token specifies the name of the channel, the scope of the channel, and the endpoint configuration name to be used in establishing the channel. The endpoint name in the configuration file has the address, binding, and contract information for a service that the <xref:System.Workflow.Activities.SendActivity> activity communicates with.       The channel token also specifies a unique channel name and an owner activity name for the token. A channel token can be shared between multiple send activities that want to use the same endpoint to communicate with a service."
  example:
  - "The following example shows how to access the `ChannelToken` property. This example was adapted from the `CalculatorClient` SDK sample.  \n  \n [!code-cs[SendActivity#7](~/add/codesnippet/csharp/p-system.workflow.activi_31_1.cs)]"
  syntax:
    content: public System.Workflow.Activities.ChannelToken ChannelToken { get; set; }
    return:
      type: System.Workflow.Activities.ChannelToken
      description: "A <xref href=&quot;System.Workflow.Activities.ChannelToken&quot;></xref> defining a client channel that a <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> uses to communicate with a service."
  overload: System.Workflow.Activities.SendActivity.ChannelToken*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.Context
  id: Context
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: Context
  nameWithType: SendActivity.Context
  fullName: System.Workflow.Activities.SendActivity.Context
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to access the `Context` property. This example was adapted from the `CalculatorClient` SDK sample.  \n  \n [!code-cs[SendActivity#8](~/add/codesnippet/csharp/p-system.workflow.activi_10_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Context { get; set; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A dictionary-based collection that contains <xref:System.Xml.XmlQualifiedName> keys and their associated <xref:System.String> values."
  overload: System.Workflow.Activities.SendActivity.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.CustomAddress
  id: CustomAddress
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: CustomAddress
  nameWithType: SendActivity.CustomAddress
  fullName: System.Workflow.Activities.SendActivity.CustomAddress
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets or sets the custom address used to communicate with a service."
  remarks: "If present, this value is used to define the endpoint address for the operation."
  example:
  - "The following example shows how to access the `CustomAddress` property. This example was adapted from the `CalculatorClient` SDK sample.  \n  \n [!code-cs[SendActivity#9](~/add/codesnippet/csharp/p-system.workflow.activi_11_1.cs)]"
  syntax:
    content: public string CustomAddress { get; set; }
    return:
      type: System.String
      description: "String value whose value is the address a service is listening on."
  overload: System.Workflow.Activities.SendActivity.CustomAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.CustomAddressProperty
  id: CustomAddressProperty
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: CustomAddressProperty
  nameWithType: SendActivity.CustomAddressProperty
  fullName: System.Workflow.Activities.SendActivity.CustomAddressProperty
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents the <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref> for the <xref:System.Workflow.Activities.SendActivity.CustomAddress*> property."
  remarks: "If present, this value is used to define the endpoint address for the operation."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: SendActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.SendActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.Activities.SendActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  id: GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: GetContext(Activity,ChannelToken,Type)
  nameWithType: SendActivity.GetContext(Activity,ChannelToken,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,ChannelToken,Type)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets or sets the context information for a send operation."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to use the `GetContext` method.  \n  \n [!code-cs[SendActivity#12](~/add/codesnippet/csharp/b396dd3f-071b-4a03-8e75-_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Activity whose context information is required."
    - id: endpoint
      type: System.Workflow.Activities.ChannelToken
      description: "Endpoint information for correlation with a service."
    - id: contractType
      type: System.Type
      description: "The <xref:System.Type> of the contract implemented by a service."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A dictionary-based collection that contains <xref:System.Xml.XmlQualifiedName> keys and their associated <xref:System.String> values."
  overload: System.Workflow.Activities.SendActivity.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  id: GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: GetContext(Activity,String,String,Type)
  nameWithType: SendActivity.GetContext(Activity,String,String,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,String,String,Type)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <xref:System.Type> object that represents the type of the contract."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to use the `GetContext` method.  \n  \n [!code-cs[SendActivity#15](~/add/codesnippet/csharp/3882c89a-5f09-4566-9b94-_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Activity whose context information is required."
    - id: endpointName
      type: System.String
      description: "Name of the endpoint used for correlation with a service."
    - id: ownerActivityName
      type: System.String
      description: "The name of the owning activity."
    - id: contractType
      type: System.Type
      description: "The <xref:System.Type> of the contract implemented by a service."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A dictionary-based collection that contains <xref:System.Xml.XmlQualifiedName> keys and their associated <xref:System.String> values."
  overload: System.Workflow.Activities.SendActivity.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.InitializeProperties
  id: InitializeProperties
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: InitializeProperties()
  nameWithType: SendActivity.InitializeProperties()
  fullName: System.Workflow.Activities.SendActivity.InitializeProperties()
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override void InitializeProperties ();
    parameters: []
  overload: System.Workflow.Activities.SendActivity.InitializeProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ParameterBindings
  id: ParameterBindings
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ParameterBindings
  nameWithType: SendActivity.ParameterBindings
  fullName: System.Workflow.Activities.SendActivity.ParameterBindings
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets the collection of bindable parameters as found in the [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service&quot;s formal parameter list."
  remarks: "ParameterBindings can be used to specify bindings between the service operation parameters and public field and properties of the workflow that contains the <xref:System.Workflow.Activities.SendActivity> activity. When the <xref:System.Workflow.Activities.SendActivity> activity executes, the corresponding parameter values are read from the workflow properties they are bound to and are sent to the service as service operation parameters.       ParameterBindings can also be used to retrieve the return values from a service operation.       All parameters of the service operation should be bound. Unbound service operation parameters produce compiler warnings and the default values of the parameter are sent when the <xref:System.Workflow.Activities.SendActivity> is invoked."
  example:
  - "The following example shows how to access the `ParameterBindings` property. This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#0](~/add/codesnippet/csharp/p-system.workflow.activi_32_1.cs)]"
  syntax:
    content: public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }
    return:
      type: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
      description: "The <xref href=&quot;System.Workflow.ComponentModel.WorkflowParameterBindingCollection&quot;></xref> of parameters to bind to."
  overload: System.Workflow.Activities.SendActivity.ParameterBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  id: ReturnValuePropertyName
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ReturnValuePropertyName
  nameWithType: SendActivity.ReturnValuePropertyName
  fullName: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Name of the property that is used for the return value sent by the service that the <xref uid=&quot;langword_csharp_SendActivity&quot; name=&quot;SendActivity&quot; href=&quot;&quot;></xref> activity is communicating with."
  remarks: "This string can be used to retrieve the return value from the <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> associated with the <xref:System.Workflow.Activities.SendActivity> activity in the <xref:System.Workflow.Activities.SendActivity.AfterResponse> event handler."
  example:
  - "The following example shows how to access the `ReturnValuePropertyName` field.  \n  \n [!code-cs[SendActivity#6](~/add/codesnippet/csharp/f-system.workflow.activi_2_1.cs)]"
  syntax:
    content: public const string ReturnValuePropertyName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo
  id: ServiceOperationInfo
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ServiceOperationInfo
  nameWithType: SendActivity.ServiceOperationInfo
  fullName: System.Workflow.Activities.SendActivity.ServiceOperationInfo
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Defines the contract and operation of the service that the <xref uid=&quot;langword_csharp_SendActivity&quot; name=&quot;SendActivity&quot; href=&quot;&quot;></xref> activity communicates with."
  remarks: "The <xref:System.Workflow.Activities.SendActivity> activity always refers to an existing contract and its defined operations. There is no provision that allows a <xref:System.Workflow.Activities.SendActivity> activity to define a contract itself."
  example:
  - "The following example shows how to access the `ServiceOperationInfo` property. This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#1](~/add/codesnippet/csharp/p-system.workflow.activi_13_1.cs)]"
  syntax:
    content: public System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo { get; set; }
    return:
      type: System.Workflow.Activities.TypedOperationInfo
      description: "A <xref href=&quot;System.Workflow.Activities.TypedOperationInfo&quot;></xref> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation."
  overload: System.Workflow.Activities.SendActivity.ServiceOperationInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "A static method that sets context information for a <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> activity, given an activity instance, an endpoint used by that activity, a <xref:System.Type> object that represents the type of the contract, and the context information itself."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to use the `SetContext` method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static void SetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType, System.Collections.Generic.IDictionary<string,string> context);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "The Activity instance to associate the context information with."
    - id: endpoint
      type: System.Workflow.Activities.ChannelToken
      description: "The endpoint used for correlation with a service."
    - id: contractType
      type: System.Type
      description: "The <xref:System.Type> of the contract implemented by a service."
    - id: context
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "The context information to set."
  overload: System.Workflow.Activities.SendActivity.SetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SetContext(Activity,String,String,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "A static method that sets context information for a <xref href=&quot;System.Workflow.Activities.SendActivity&quot;></xref> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <xref:System.Type> object that represents the type of the contract, and the context information itself."
  remarks: ''
  example:
  - "The following example shows how to use the `SetContext` method.  \n  \n [!code-cs[SendActivity#15](~/add/codesnippet/csharp/c25fc5a7-578b-454d-aade-_1.cs)]"
  syntax:
    content: public static void SetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType, System.Collections.Generic.IDictionary<string,string> context);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "The Activity instance to associate the context information with."
    - id: endpointName
      type: System.String
      description: "The name of an endpoint used for correlation with a service."
    - id: ownerActivityName
      type: System.String
      description: "The name of the owning activity"
    - id: contractType
      type: System.Type
      description: "The <xref:System.Type> of the contract implemented by a service."
    - id: context
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "The context information to set."
  overload: System.Workflow.Activities.SendActivity.SetContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.Activity
  isExternal: false
  name: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Activities.SendActivity.#ctor
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SendActivity()
  nameWithType: SendActivity.SendActivity()
  fullName: System.Workflow.Activities.SendActivity.SendActivity()
- uid: System.Workflow.Activities.SendActivity.#ctor(System.String)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SendActivity(String)
  nameWithType: SendActivity.SendActivity(String)
  fullName: System.Workflow.Activities.SendActivity.SendActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Activities.SendActivity.AfterResponse
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: AfterResponse
  nameWithType: SendActivity.AfterResponse
  fullName: System.Workflow.Activities.SendActivity.AfterResponse
- uid: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SendActivityEventArgs>
  nameWithType: EventHandler<SendActivityEventArgs>
  fullName: System.EventHandler<System.Workflow.Activities.SendActivityEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Workflow.Activities.SendActivityEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Activities.SendActivityEventArgs
    name: SendActivityEventArgs
    nameWithType: SendActivityEventArgs
    fullName: SendActivityEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.SendActivity.AfterResponseEvent
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: AfterResponseEvent
  nameWithType: SendActivity.AfterResponseEvent
  fullName: System.Workflow.Activities.SendActivity.AfterResponseEvent
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.Activities.SendActivity.BeforeSend
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: BeforeSend
  nameWithType: SendActivity.BeforeSend
  fullName: System.Workflow.Activities.SendActivity.BeforeSend
- uid: System.Workflow.Activities.SendActivity.BeforeSendEvent
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: BeforeSendEvent
  nameWithType: SendActivity.BeforeSendEvent
  fullName: System.Workflow.Activities.SendActivity.BeforeSendEvent
- uid: System.Workflow.Activities.SendActivity.ChannelToken
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ChannelToken
  nameWithType: SendActivity.ChannelToken
  fullName: System.Workflow.Activities.SendActivity.ChannelToken
- uid: System.Workflow.Activities.ChannelToken
  parent: System.Workflow.Activities
  isExternal: false
  name: ChannelToken
  nameWithType: ChannelToken
  fullName: System.Workflow.Activities.ChannelToken
- uid: System.Workflow.Activities.SendActivity.Context
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Context
  nameWithType: SendActivity.Context
  fullName: System.Workflow.Activities.SendActivity.Context
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.SendActivity.CustomAddress
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: CustomAddress
  nameWithType: SendActivity.CustomAddress
  fullName: System.Workflow.Activities.SendActivity.CustomAddress
- uid: System.Workflow.Activities.SendActivity.CustomAddressProperty
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: CustomAddressProperty
  nameWithType: SendActivity.CustomAddressProperty
  fullName: System.Workflow.Activities.SendActivity.CustomAddressProperty
- uid: System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: SendActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.SendActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: GetContext(Activity,ChannelToken,Type)
  nameWithType: SendActivity.GetContext(Activity,ChannelToken,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,ChannelToken,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: GetContext(Activity,String,String,Type)
  nameWithType: SendActivity.GetContext(Activity,String,String,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,String,String,Type)
- uid: System.Workflow.Activities.SendActivity.InitializeProperties
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: InitializeProperties()
  nameWithType: SendActivity.InitializeProperties()
  fullName: System.Workflow.Activities.SendActivity.InitializeProperties()
- uid: System.Workflow.Activities.SendActivity.ParameterBindings
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ParameterBindings
  nameWithType: SendActivity.ParameterBindings
  fullName: System.Workflow.Activities.SendActivity.ParameterBindings
- uid: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowParameterBindingCollection
  nameWithType: WorkflowParameterBindingCollection
  fullName: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
- uid: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ReturnValuePropertyName
  nameWithType: SendActivity.ReturnValuePropertyName
  fullName: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ServiceOperationInfo
  nameWithType: SendActivity.ServiceOperationInfo
  fullName: System.Workflow.Activities.SendActivity.ServiceOperationInfo
- uid: System.Workflow.Activities.TypedOperationInfo
  parent: System.Workflow.Activities
  isExternal: false
  name: TypedOperationInfo
  nameWithType: TypedOperationInfo
  fullName: System.Workflow.Activities.TypedOperationInfo
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SetContext(Activity,String,String,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
- uid: System.Workflow.Activities.SendActivity.#ctor*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SendActivity
  nameWithType: SendActivity.SendActivity
- uid: System.Workflow.Activities.SendActivity.ChannelToken*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ChannelToken
  nameWithType: SendActivity.ChannelToken
- uid: System.Workflow.Activities.SendActivity.Context*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Context
  nameWithType: SendActivity.Context
- uid: System.Workflow.Activities.SendActivity.CustomAddress*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: CustomAddress
  nameWithType: SendActivity.CustomAddress
- uid: System.Workflow.Activities.SendActivity.Execute*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Execute
  nameWithType: SendActivity.Execute
- uid: System.Workflow.Activities.SendActivity.GetContext*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: GetContext
  nameWithType: SendActivity.GetContext
- uid: System.Workflow.Activities.SendActivity.InitializeProperties*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: InitializeProperties
  nameWithType: SendActivity.InitializeProperties
- uid: System.Workflow.Activities.SendActivity.ParameterBindings*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ParameterBindings
  nameWithType: SendActivity.ParameterBindings
- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ServiceOperationInfo
  nameWithType: SendActivity.ServiceOperationInfo
- uid: System.Workflow.Activities.SendActivity.SetContext*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SetContext
  nameWithType: SendActivity.SetContext
