### YamlMime:ManagedReference
items:
- uid: System.AddIn.Contract.IEnumeratorContract`1
  id: IEnumeratorContract`1
  children:
  - System.AddIn.Contract.IEnumeratorContract`1.GetCurrent
  - System.AddIn.Contract.IEnumeratorContract`1.MoveNext
  - System.AddIn.Contract.IEnumeratorContract`1.Reset
  langs:
  - csharp
  name: IEnumeratorContract<T>
  nameWithType: IEnumeratorContract<T>
  fullName: System.AddIn.Contract.IEnumeratorContract<T>
  type: Interface
  syntax:
    content: 'public interface IEnumeratorContract<T> : IDisposable'
    typeParameters:
    - id: T
      description: "To be added."
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.AddIn.Contract.IEnumeratorContract`1.GetCurrent
  id: GetCurrent
  parent: System.AddIn.Contract.IEnumeratorContract`1
  langs:
  - csharp
  name: GetCurrent()
  nameWithType: IEnumeratorContract<T>.GetCurrent()
  fullName: System.AddIn.Contract.IEnumeratorContract<T>.GetCurrent()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public T GetCurrent ();
    parameters: []
    return:
      type: T
      description: "To be added."
  overload: System.AddIn.Contract.IEnumeratorContract`1.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IEnumeratorContract`1.MoveNext
  id: MoveNext
  parent: System.AddIn.Contract.IEnumeratorContract`1
  langs:
  - csharp
  name: MoveNext()
  nameWithType: IEnumeratorContract<T>.MoveNext()
  fullName: System.AddIn.Contract.IEnumeratorContract<T>.MoveNext()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.AddIn.Contract.IEnumeratorContract`1.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.IEnumeratorContract`1.Reset
  id: Reset
  parent: System.AddIn.Contract.IEnumeratorContract`1
  langs:
  - csharp
  name: Reset()
  nameWithType: IEnumeratorContract<T>.Reset()
  fullName: System.AddIn.Contract.IEnumeratorContract<T>.Reset()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.AddIn.Contract.IEnumeratorContract`1.Reset*
  exceptions: []
  platform:
  - net462
references:
- uid: System.AddIn.Contract.IEnumeratorContract`1.GetCurrent
  parent: System.AddIn.Contract.IEnumeratorContract`1
  isExternal: false
  name: GetCurrent()
  nameWithType: IEnumeratorContract<T>.GetCurrent()
  fullName: System.AddIn.Contract.IEnumeratorContract<T>.GetCurrent()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.AddIn.Contract.IEnumeratorContract`1.MoveNext
  parent: System.AddIn.Contract.IEnumeratorContract`1
  isExternal: false
  name: MoveNext()
  nameWithType: IEnumeratorContract<T>.MoveNext()
  fullName: System.AddIn.Contract.IEnumeratorContract<T>.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Contract.IEnumeratorContract`1.Reset
  parent: System.AddIn.Contract.IEnumeratorContract`1
  isExternal: false
  name: Reset()
  nameWithType: IEnumeratorContract<T>.Reset()
  fullName: System.AddIn.Contract.IEnumeratorContract<T>.Reset()
- uid: System.AddIn.Contract.IEnumeratorContract`1.GetCurrent*
  parent: System.AddIn.Contract.IEnumeratorContract`1
  isExternal: false
  name: GetCurrent
  nameWithType: IEnumeratorContract<T>.GetCurrent
- uid: System.AddIn.Contract.IEnumeratorContract`1.MoveNext*
  parent: System.AddIn.Contract.IEnumeratorContract`1
  isExternal: false
  name: MoveNext
  nameWithType: IEnumeratorContract<T>.MoveNext
- uid: System.AddIn.Contract.IEnumeratorContract`1.Reset*
  parent: System.AddIn.Contract.IEnumeratorContract`1
  isExternal: false
  name: Reset
  nameWithType: IEnumeratorContract<T>.Reset
