### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.Touch
  id: Touch
  children:
  - System.Windows.Input.Touch.FrameReported
  langs:
  - csharp
  name: Touch
  nameWithType: Touch
  fullName: System.Windows.Input.Touch
  type: Class
  summary: "Fornece um serviço de nível de aplicação que processa multitouch de entrada do sistema operativo e gera o <xref href=&quot;System.Windows.Input.Touch.FrameReported&quot;> </xref> eventos."
  remarks: "O <xref:System.Windows.Input.Touch.FrameReported>evento está incluído no [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] para suportar a compatibilidade com o Silverlight.</xref:System.Windows.Input.Touch.FrameReported> Se não tiver que garantir a compatibilidade com o Silverlight, utilize os eventos de touch, tais como <xref:System.Windows.UIElement.TouchDown>e <xref:System.Windows.UIElement.TouchMove>, no <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, ou <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown>       O <xref:System.Windows.Input.Touch.FrameReported>evento não utiliza o mesmo modelo de evento que outros eventos de entrada do WPF, tais como <xref:System.Windows.UIElement.TouchDown>e <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.Touch.FrameReported> Em vez de ser exposta como um evento de elemento específicos que potencialmente encaminha através da árvore de objetos de uma IU, o <xref:System.Windows.Input.Touch.FrameReported>eventos são um único evento é processado ao nível da aplicação.</xref:System.Windows.Input.Touch.FrameReported> Por conseguinte, não é possível utilizar o `sender` parâmetro do processador de eventos para determinar o elemento é touched.       Utilize o <xref:System.Windows.Input.TouchFrameEventArgs>para obter o <xref:System.Windows.Input.TouchPoint>valores que são relevantes para o evento de touch.</xref:System.Windows.Input.TouchPoint> </xref:System.Windows.Input.TouchFrameEventArgs> Do <xref:System.Windows.Input.TouchPoint>, pode obter o <xref:System.Windows.Input.TouchPoint.Position%2A>do touch e determinar se o <xref:System.Windows.Input.TouchAction>foi um <xref:System.Windows.Input.TouchAction>, <xref:System.Windows.Input.TouchAction>, ou <xref:System.Windows.Input.TouchAction>ação.</xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchPoint.Position%2A> </xref:System.Windows.Input.TouchPoint> Também pode utilizar <xref:System.Windows.Input.TouchPoint>para obter <xref:System.Windows.Input.TouchDevice>.</xref:System.Windows.Input.TouchDevice> </xref:System.Windows.Input.TouchPoint> Do <xref:System.Windows.Input.TouchDevice>, pode determinar o dispositivo <xref:System.Windows.Input.TouchDevice.Id%2A>e obter informações sobre o elemento que é touched.</xref:System.Windows.Input.TouchDevice.Id%2A> </xref:System.Windows.Input.TouchDevice>"
  example:
  - "The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers across a touchscreen. Each touch is represented by a <xref:System.Windows.Input.TouchDevice>.The pattern is created by drawing a line between the touch points provided by the touches. This example requires a Windows Touch–compatible screen.  \n  \n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a <xref:System.Windows.Controls.Grid>.  \n  \n [!code-xml[TouchFrameSample#000](~/add/codesnippet/xaml/wpftouchframesample/mainwindow.xaml#000)]  \n  \n The following code handles the <xref:System.Windows.Input.Touch.FrameReported> event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n [!code-vb[TouchFrameSample#100](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#100)]\n [!code-cs[TouchFrameSample#100](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#100)]"
  syntax:
    content: public static class Touch
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.Touch.FrameReported
  id: FrameReported
  parent: System.Windows.Input.Touch
  langs:
  - csharp
  name: FrameReported
  nameWithType: Touch.FrameReported
  fullName: System.Windows.Input.Touch.FrameReported
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ocorre quando é enviada uma mensagem de touch."
  remarks: "Uma moldura é um de uma série de mensagens multitouch ou pontos de touch. Pode responder a detalhes ao processar o evento FrameReported e aceder aos detalhes do <xref:System.Windows.Input.TouchPoint>do <xref:System.Windows.Input.TouchFrameEventArgs>dados de eventos.</xref:System.Windows.Input.TouchFrameEventArgs> </xref:System.Windows.Input.TouchPoint>       O evento FrameReported não utiliza o mesmo modelo de evento como outros [!INCLUDE[TLA#tla_titlewinclient](~/add/includes/tlasharptla-titlewinclient-md.md)] eventos, tais como <xref:System.Windows.UIElement.TouchDown>e <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown> de entrada Em vez de ser exposta como um evento de elemento específicos que potencialmente encaminha através da árvore de objetos de uma IU, o evento FrameReported é um único evento é processado ao nível da aplicação. Por conseguinte, não é possível utilizar o `sender` parâmetro do processador de eventos para determinar o elemento é touched."
  example:
  - "The following example handles the FrameReported event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \n  \n [!code-vb[TouchFrameSample#110](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#110)]\n [!code-cs[TouchFrameSample#110](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#110)]"
  syntax:
    content: public static event System.Windows.Input.TouchFrameEventHandler FrameReported;
    return:
      type: System.Windows.Input.TouchFrameEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.Touch.FrameReported
  parent: System.Windows.Input.Touch
  isExternal: false
  name: FrameReported
  nameWithType: Touch.FrameReported
  fullName: System.Windows.Input.Touch.FrameReported
- uid: System.Windows.Input.TouchFrameEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TouchFrameEventHandler
  nameWithType: TouchFrameEventHandler
  fullName: System.Windows.Input.TouchFrameEventHandler
