### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.FontDialog
  id: FontDialog
  children:
  - System.Windows.Forms.FontDialog.#ctor
  - System.Windows.Forms.FontDialog.AllowScriptChange
  - System.Windows.Forms.FontDialog.AllowSimulations
  - System.Windows.Forms.FontDialog.AllowVectorFonts
  - System.Windows.Forms.FontDialog.AllowVerticalFonts
  - System.Windows.Forms.FontDialog.Apply
  - System.Windows.Forms.FontDialog.Color
  - System.Windows.Forms.FontDialog.EventApply
  - System.Windows.Forms.FontDialog.FixedPitchOnly
  - System.Windows.Forms.FontDialog.Font
  - System.Windows.Forms.FontDialog.FontMustExist
  - System.Windows.Forms.FontDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.FontDialog.MaxSize
  - System.Windows.Forms.FontDialog.MinSize
  - System.Windows.Forms.FontDialog.OnApply(System.EventArgs)
  - System.Windows.Forms.FontDialog.Options
  - System.Windows.Forms.FontDialog.Reset
  - System.Windows.Forms.FontDialog.RunDialog(System.IntPtr)
  - System.Windows.Forms.FontDialog.ScriptsOnly
  - System.Windows.Forms.FontDialog.ShowApply
  - System.Windows.Forms.FontDialog.ShowColor
  - System.Windows.Forms.FontDialog.ShowEffects
  - System.Windows.Forms.FontDialog.ShowHelp
  - System.Windows.Forms.FontDialog.ToString
  langs:
  - csharp
  name: FontDialog
  nameWithType: FontDialog
  fullName: System.Windows.Forms.FontDialog
  type: Class
  summary: "Prompts the user to choose a font from among those installed on the local computer."
  remarks: "The inherited member <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> must be invoked to create this specific common dialog box. <xref:System.Windows.Forms.CommonDialog.HookProc%2A> can be overridden to implement specific dialog box hook functionality.       When you create an instance of FontDialog, some of the read/write properties are set to initial values. For a list of these values, see the <xref:System.Windows.Forms.FontDialog.%23ctor%2A> constructor."
  example:
  - "The following code example uses <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> to display a FontDialog. This code requires that a <xref:System.Windows.Forms.Form> has already been created with a <xref:System.Windows.Forms.TextBox> and button placed on it. It also requires that the `fontDialog1` has been created. The <xref:System.Drawing.Font> contains the size information but not the color information.  \n  \n [!code-cs[Classic FontDialog Example#1](~/add/codesnippet/csharp/t-system.windows.forms.f_0_1.cs)]\n [!code-vb[Classic FontDialog Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.f_0_1.vb)]\n [!code-cpp[Classic FontDialog Example#1](~/add/codesnippet/cpp/t-system.windows.forms.f_0_1.cpp)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Apply")]

      [System.ComponentModel.DefaultProperty("Font")]

      public class FontDialog : System.Windows.Forms.CommonDialog
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Windows.Forms.CommonDialog
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Windows.Forms.CommonDialog.HelpRequest
  - System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)
  - System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.CommonDialog.ShowDialog
  - System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)
  - System.Windows.Forms.CommonDialog.Tag
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: FontDialog()
  nameWithType: FontDialog.FontDialog()
  fullName: System.Windows.Forms.FontDialog.FontDialog()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.FontDialog&quot;></xref> class."
  remarks: "When you create an instance of <xref:System.Windows.Forms.FontDialog>, the following read/write properties are initialized.      |Property|Initial Value|   |--------------|-------------------|   |<xref:System.Windows.Forms.FontDialog.AllowSimulations%2A>|`true`|   |<xref:System.Windows.Forms.FontDialog.AllowVectorFonts%2A>|`true`|   |<xref:System.Windows.Forms.FontDialog.AllowVerticalFonts%2A>|`true`|   |<xref:System.Windows.Forms.FontDialog.AllowScriptChange%2A>|`true`|   |<xref:System.Windows.Forms.FontDialog.Color%2A>|`Color.Black`|   |<xref:System.Windows.Forms.FontDialog.FixedPitchOnly%2A>|`false`|   |<xref:System.Windows.Forms.FontDialog.MaxSize%2A>|0|   |<xref:System.Windows.Forms.FontDialog.MinSize%2A>|0|   |<xref:System.Windows.Forms.FontDialog.ScriptsOnly%2A>|`false`|   |<xref:System.Windows.Forms.FontDialog.ShowApply%2A>|`false`|   |<xref:System.Windows.Forms.FontDialog.ShowColor%2A>|`false`|   |<xref:System.Windows.Forms.FontDialog.ShowEffects%2A>|`true`|   |<xref:System.Windows.Forms.FontDialog.ShowHelp%2A>|`false`|       You can change the value for any of these properties through a separate call to the property."
  syntax:
    content: public FontDialog ();
    parameters: []
  overload: System.Windows.Forms.FontDialog.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.AllowScriptChange
  id: AllowScriptChange
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: AllowScriptChange
  nameWithType: FontDialog.AllowScriptChange
  fullName: System.Windows.Forms.FontDialog.AllowScriptChange
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the user can change the character set specified in the **Script** combo box to display a character set other than the one currently displayed."
  remarks: "The **Script** combo box found on the **Font** dialog box contains character sets associated with the selected font."
  syntax:
    content: public bool AllowScriptChange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the user can change the character set specified in the **Script** combo box; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.AllowScriptChange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.AllowSimulations
  id: AllowSimulations
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: AllowSimulations
  nameWithType: FontDialog.AllowSimulations
  fullName: System.Windows.Forms.FontDialog.AllowSimulations
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box allows graphics device interface (GDI) font simulations."
  syntax:
    content: public bool AllowSimulations { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if font simulations are allowed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.AllowSimulations*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.AllowVectorFonts
  id: AllowVectorFonts
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: AllowVectorFonts
  nameWithType: FontDialog.AllowVectorFonts
  fullName: System.Windows.Forms.FontDialog.AllowVectorFonts
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box allows vector font selections."
  syntax:
    content: public bool AllowVectorFonts { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if vector fonts are allowed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.AllowVectorFonts*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.AllowVerticalFonts
  id: AllowVerticalFonts
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: AllowVerticalFonts
  nameWithType: FontDialog.AllowVerticalFonts
  fullName: System.Windows.Forms.FontDialog.AllowVerticalFonts
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box displays both vertical and horizontal fonts or only horizontal fonts."
  syntax:
    content: public bool AllowVerticalFonts { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if both vertical and horizontal fonts are allowed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.AllowVerticalFonts*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.Apply
  id: Apply
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: Apply
  nameWithType: FontDialog.Apply
  fullName: System.Windows.Forms.FontDialog.Apply
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user clicks the **Apply** button in the font dialog box."
  remarks: "Every time the **Apply** button is clicked, another Apply event is raised.       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.FontDialog.MinSize%2A>, <xref:System.Windows.Forms.FontDialog.MaxSize%2A>, <xref:System.Windows.Forms.FontDialog.ShowEffects%2A> and <xref:System.Windows.Forms.FontDialog.FontMustExist%2A> members and handling the Apply event. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.FontDialog> named `FontDialog1` and a <xref:System.Windows.Forms.Button> named `Button1`.  \n  \n [!code-cs[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/csharp/e-system.windows.forms.f_8_1.cs)]\n [!code-vb[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/visualbasic/e-system.windows.forms.f_8_1.vb)]\n [!code-cpp[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/cpp/e-system.windows.forms.f_8_1.cpp)]"
  syntax:
    content: public event EventHandler Apply;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.Color
  id: Color
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: Color
  nameWithType: FontDialog.Color
  fullName: System.Windows.Forms.FontDialog.Color
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the selected font color."
  remarks: ''
  example:
  - "The following code example uses <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> to display a <xref:System.Windows.Forms.FontDialog>. This code requires that a <xref:System.Windows.Forms.Form> has already been created with a <xref:System.Windows.Forms.TextBox> and button placed on it. It also requires that the `fontDialog1` has been created. The <xref:System.Drawing.Font> contains the size information but not the color information.  \n  \n [!code-cs[Classic FontDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_43_1.cs)]\n [!code-vb[Classic FontDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_43_1.vb)]\n [!code-cpp[Classic FontDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_43_1.cpp)]"
  syntax:
    content: public System.Drawing.Color Color { get; set; }
    return:
      type: System.Drawing.Color
      description: "The color of the selected font. The default value is <xref:System.Drawing.Color.Black*>."
  overload: System.Windows.Forms.FontDialog.Color*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.EventApply
  id: EventApply
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: EventApply
  nameWithType: FontDialog.EventApply
  fullName: System.Windows.Forms.FontDialog.EventApply
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Owns the <xref href=&quot;System.Windows.Forms.FontDialog.Apply&quot;></xref> event."
  syntax:
    content: protected static readonly object EventApply;
    return:
      type: System.Object
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.FixedPitchOnly
  id: FixedPitchOnly
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: FixedPitchOnly
  nameWithType: FontDialog.FixedPitchOnly
  fullName: System.Windows.Forms.FontDialog.FixedPitchOnly
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box allows only the selection of fixed-pitch fonts."
  syntax:
    content: public bool FixedPitchOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if only fixed-pitch fonts can be selected; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.FixedPitchOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.Font
  id: Font
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: Font
  nameWithType: FontDialog.Font
  fullName: System.Windows.Forms.FontDialog.Font
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the selected font."
  remarks: ''
  example:
  - "The following code example uses <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> to display a <xref:System.Windows.Forms.FontDialog>. This code requires that a <xref:System.Windows.Forms.Form> has already been created with a <xref:System.Windows.Forms.TextBox> and button placed on it. It also requires that the `fontDialog1` has been created. The <xref:System.Drawing.Font> contains the size information but not the color information.  \n  \n [!code-cs[Classic FontDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_19_1.cs)]\n [!code-vb[Classic FontDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_19_1.vb)]\n [!code-cpp[Classic FontDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_19_1.cpp)]"
  syntax:
    content: public System.Drawing.Font Font { get; set; }
    return:
      type: System.Drawing.Font
      description: "The selected font."
  overload: System.Windows.Forms.FontDialog.Font*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.FontMustExist
  id: FontMustExist
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: FontMustExist
  nameWithType: FontDialog.FontMustExist
  fullName: System.Windows.Forms.FontDialog.FontMustExist
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box specifies an error condition if the user attempts to select a font or style that does not exist."
  remarks: ''
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.FontDialog.MinSize%2A>, <xref:System.Windows.Forms.FontDialog.MaxSize%2A>, <xref:System.Windows.Forms.FontDialog.ShowEffects%2A> and FontMustExist members and handling the <xref:System.Windows.Forms.FontDialog.Apply> event. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.FontDialog> named `FontDialog1` and a <xref:System.Windows.Forms.Button> named `Button1`.  \n  \n [!code-cs[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/csharp/p-system.windows.forms.f_55_1.cs)]\n [!code-vb[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_55_1.vb)]\n [!code-cpp[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/cpp/p-system.windows.forms.f_55_1.cpp)]"
  syntax:
    content: public bool FontMustExist { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box specifies an error condition when the user tries to select a font or style that does not exist; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.FontMustExist*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  id: HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: HookProc(IntPtr,Int32,IntPtr,IntPtr)
  nameWithType: FontDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  fullName: System.Windows.Forms.FontDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Specifies the common dialog box hook procedure that is overridden to add specific functionality to a common dialog box."
  remarks: "A hook procedure is a mechanism by which a function can intercept events before they reach an application. When you override the <xref:System.Windows.Forms.CommonDialog.HookProc%2A?displayProperty=fullName> method for a <xref:System.Windows.Forms.CommonDialog> class, the operating system invokes your override of the function to post operating system messages to the window."
  example:
  - "The following code example demonstrates how to override the HookProc method. The example consists of a class that inherits the <xref:System.Windows.Forms.FontDialog> class. In the class's HookProc override, the example evaluates the method's `msg` parameter against constant values for particular Windows messages. If the `msg` parameter equals the specified constant, the example writes trace output identifying the Windows message that was passed to the HookProc method. This example requires that the class in which the HookProc method is declared inherits the <xref:System.Windows.Forms.FontDialog> class.  \n  \n [!code-cs[HookProc Example#1](~/add/codesnippet/csharp/bd49e7cd-b816-4271-bb4a-_1.cs)]\n [!code-cpp[HookProc Example#1](~/add/codesnippet/cpp/bd49e7cd-b816-4271-bb4a-_1.cpp)]\n [!code-vb[HookProc Example#1](~/add/codesnippet/visualbasic/bd49e7cd-b816-4271-bb4a-_1.vb)]"
  syntax:
    content: protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    parameters:
    - id: hWnd
      type: System.IntPtr
      description: "The handle to the dialog box window."
    - id: msg
      type: System.Int32
      description: "The message being received."
    - id: wparam
      type: System.IntPtr
      description: "Additional information about the message."
    - id: lparam
      type: System.IntPtr
      description: "Additional information about the message."
    return:
      type: System.IntPtr
      description: "A zero value if the default dialog box procedure processes the message; a nonzero value if the default dialog box procedure ignores the message."
  overload: System.Windows.Forms.FontDialog.HookProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.MaxSize
  id: MaxSize
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: MaxSize
  nameWithType: FontDialog.MaxSize
  fullName: System.Windows.Forms.FontDialog.MaxSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the maximum point size a user can select."
  remarks: "In order for the maximum and minimum size settings to take effect, MaxSize must be greater than <xref:System.Windows.Forms.FontDialog.MinSize%2A>, and both must be greater than 0.       Attempts to set this property to values less than 0 will result in a value of 0 being used. If you set MaxSize to a value less than <xref:System.Windows.Forms.FontDialog.MinSize%2A>, <xref:System.Windows.Forms.FontDialog.MinSize%2A> is set to MaxSize. The effect of setting <xref:System.Windows.Forms.FontDialog.MinSize%2A> and MaxSize to the same values is to limit the size selection to a single font size.       When the point size is 0, there are no font size limits."
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.FontDialog.MinSize%2A>, MaxSize, <xref:System.Windows.Forms.FontDialog.ShowEffects%2A> and <xref:System.Windows.Forms.FontDialog.FontMustExist%2A> members and handling the <xref:System.Windows.Forms.FontDialog.Apply> event. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.FontDialog> named `FontDialog1` and a <xref:System.Windows.Forms.Button> named `Button1`.  \n  \n [!code-cs[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/csharp/p-system.windows.forms.f_10_1.cs)]\n [!code-vb[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_10_1.vb)]\n [!code-cpp[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/cpp/p-system.windows.forms.f_10_1.cpp)]"
  syntax:
    content: public int MaxSize { get; set; }
    return:
      type: System.Int32
      description: "The maximum point size a user can select. The default is 0."
  overload: System.Windows.Forms.FontDialog.MaxSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.MinSize
  id: MinSize
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: MinSize
  nameWithType: FontDialog.MinSize
  fullName: System.Windows.Forms.FontDialog.MinSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the minimum point size a user can select."
  remarks: "In order for the maximum and minimum size settings to take effect, <xref:System.Windows.Forms.FontDialog.MaxSize%2A> must be greater than MinSize, and both must be greater than 0.       Attempts to set this property to values less than 0 will result in a value of 0 being used. If you set MinSize to a value greater than <xref:System.Windows.Forms.FontDialog.MaxSize%2A>, <xref:System.Windows.Forms.FontDialog.MaxSize%2A> is set to the value of MinSize. The effect of setting MinSize and <xref:System.Windows.Forms.FontDialog.MaxSize%2A> to the same value is to limit the size selection to a single font size.       When the point size is 0, there are no font size limits."
  example:
  - "The following code example demonstrates using the MinSize, <xref:System.Windows.Forms.FontDialog.MaxSize%2A>, <xref:System.Windows.Forms.FontDialog.ShowEffects%2A> and <xref:System.Windows.Forms.FontDialog.FontMustExist%2A> members and handling the <xref:System.Windows.Forms.FontDialog.Apply> event. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.FontDialog> named `FontDialog1` and a <xref:System.Windows.Forms.Button> named `Button1`.  \n  \n [!code-cs[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/csharp/p-system.windows.forms.f_56_1.cs)]\n [!code-vb[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_56_1.vb)]\n [!code-cpp[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/cpp/p-system.windows.forms.f_56_1.cpp)]"
  syntax:
    content: public int MinSize { get; set; }
    return:
      type: System.Int32
      description: "The minimum point size a user can select. The default is 0."
  overload: System.Windows.Forms.FontDialog.MinSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.OnApply(System.EventArgs)
  id: OnApply(System.EventArgs)
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: OnApply(EventArgs)
  nameWithType: FontDialog.OnApply(EventArgs)
  fullName: System.Windows.Forms.FontDialog.OnApply(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.FontDialog.Apply&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For an overview, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnApply (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the data."
  overload: System.Windows.Forms.FontDialog.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.Options
  id: Options
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: Options
  nameWithType: FontDialog.Options
  fullName: System.Windows.Forms.FontDialog.Options
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets values to initialize the <xref href=&quot;System.Windows.Forms.FontDialog&quot;></xref>."
  remarks: "The Options property corresponds to the flags used to initialize a color dialog box using Win32. Use the properties of the <xref:System.Windows.Forms.FontDialog> class to get and set the options."
  syntax:
    content: protected int Options { get; }
    return:
      type: System.Int32
      description: "A bitwise combination of internal values that initializes the <xref href=&quot;System.Windows.Forms.FontDialog&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.Options*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.Reset
  id: Reset
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: Reset()
  nameWithType: FontDialog.Reset()
  fullName: System.Windows.Forms.FontDialog.Reset()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Resets all dialog box options to their default values."
  remarks: "When the options are reset, the strikethrough, underline, and color effects are enabled. The fonts listed include only the screen fonts supported by the system."
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Windows.Forms.FontDialog.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.RunDialog(System.IntPtr)
  id: RunDialog(System.IntPtr)
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: RunDialog(IntPtr)
  nameWithType: FontDialog.RunDialog(IntPtr)
  fullName: System.Windows.Forms.FontDialog.RunDialog(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Specifies a file dialog box."
  remarks: "The RunDialog method is invoked when the user of a font dialog box calls the <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> method."
  syntax:
    content: protected override bool RunDialog (IntPtr hWndOwner);
    parameters:
    - id: hWndOwner
      type: System.IntPtr
      description: "The window handle of the owner window for the common dialog box."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box was successfully run; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.RunDialog*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.ScriptsOnly
  id: ScriptsOnly
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: ScriptsOnly
  nameWithType: FontDialog.ScriptsOnly
  fullName: System.Windows.Forms.FontDialog.ScriptsOnly
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box allows selection of fonts for all non-OEM and Symbol character sets, as well as the ANSI character set."
  syntax:
    content: public bool ScriptsOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if selection of fonts for all non-OEM and Symbol character sets, as well as the ANSI character set, is allowed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.ScriptsOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.ShowApply
  id: ShowApply
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: ShowApply
  nameWithType: FontDialog.ShowApply
  fullName: System.Windows.Forms.FontDialog.ShowApply
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box contains an **Apply** button."
  remarks: ''
  example:
  - "The following code example shows how to apply the selections in a <xref:System.Windows.Forms.FontDialog> to the text in a <xref:System.Windows.Forms.RichTextBox>. In the event handler that displays the dialog box, the example initializes the ShowApply property to `true` and then displays the <xref:System.Windows.Forms.FontDialog>. In the <xref:System.Windows.Forms.FontDialog.Apply> event handler, the <xref:System.Windows.Forms.FontDialog.Font%2A> property is assigned to the <xref:System.Windows.Forms.Control.Font%2A?displayProperty=fullName> property.  \n  \n [!code-cs[FontDialog.ShowApply#1](~/add/codesnippet/csharp/p-system.windows.forms.f_52_1.cs)]\n [!code-vb[FontDialog.ShowApply#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_52_1.vb)]\n [!code-cpp[FontDialog.ShowApply#1](~/add/codesnippet/cpp/p-system.windows.forms.f_52_1.cpp)]"
  syntax:
    content: public bool ShowApply { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box contains an **Apply** button; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.ShowApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.ShowColor
  id: ShowColor
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: ShowColor
  nameWithType: FontDialog.ShowColor
  fullName: System.Windows.Forms.FontDialog.ShowColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box displays the color choice."
  remarks: ''
  example:
  - "The following code example uses <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> to display a <xref:System.Windows.Forms.FontDialog>. This code requires that a <xref:System.Windows.Forms.Form> has already been created with a <xref:System.Windows.Forms.TextBox> and button placed on it. It also requires that the `fontDialog1` has been created. The <xref:System.Drawing.Font> contains the size information but not the color information.  \n  \n [!code-cs[Classic FontDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_37_1.cs)]\n [!code-vb[Classic FontDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_37_1.vb)]\n [!code-cpp[Classic FontDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_37_1.cpp)]"
  syntax:
    content: public bool ShowColor { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box displays the color choice; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.ShowColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.ShowEffects
  id: ShowEffects
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: ShowEffects
  nameWithType: FontDialog.ShowEffects
  fullName: System.Windows.Forms.FontDialog.ShowEffects
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box contains controls that allow the user to specify strikethrough, underline, and text color options."
  remarks: ''
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.FontDialog.MinSize%2A>, <xref:System.Windows.Forms.FontDialog.MaxSize%2A>, ShowEffects and <xref:System.Windows.Forms.FontDialog.FontMustExist%2A> members and handling the <xref:System.Windows.Forms.FontDialog.Apply> event. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.FontDialog> named `FontDialog1` and a <xref:System.Windows.Forms.Button> named `Button1`.  \n  \n [!code-cs[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/csharp/p-system.windows.forms.f_12_1.cs)]\n [!code-vb[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_12_1.vb)]\n [!code-cpp[System.Windows.Forms.FontDialogMustExist#1](~/add/codesnippet/cpp/p-system.windows.forms.f_12_1.cpp)]"
  syntax:
    content: public bool ShowEffects { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box contains controls to set strikethrough, underline, and text color options; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.ShowEffects*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.ShowHelp
  id: ShowHelp
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: ShowHelp
  nameWithType: FontDialog.ShowHelp
  fullName: System.Windows.Forms.FontDialog.ShowHelp
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the dialog box displays a Help button."
  syntax:
    content: public bool ShowHelp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the dialog box displays a Help button; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.FontDialog.ShowHelp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FontDialog.ToString
  id: ToString
  parent: System.Windows.Forms.FontDialog
  langs:
  - csharp
  name: ToString()
  nameWithType: FontDialog.ToString()
  fullName: System.Windows.Forms.FontDialog.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves a string that includes the name of the current font selected in the dialog box."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string that includes the name of the currently selected font."
  overload: System.Windows.Forms.FontDialog.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.CommonDialog
  isExternal: false
  name: System.Windows.Forms.CommonDialog
- uid: System.Windows.Forms.FontDialog.#ctor
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: FontDialog()
  nameWithType: FontDialog.FontDialog()
  fullName: System.Windows.Forms.FontDialog.FontDialog()
- uid: System.Windows.Forms.FontDialog.AllowScriptChange
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowScriptChange
  nameWithType: FontDialog.AllowScriptChange
  fullName: System.Windows.Forms.FontDialog.AllowScriptChange
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.FontDialog.AllowSimulations
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowSimulations
  nameWithType: FontDialog.AllowSimulations
  fullName: System.Windows.Forms.FontDialog.AllowSimulations
- uid: System.Windows.Forms.FontDialog.AllowVectorFonts
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowVectorFonts
  nameWithType: FontDialog.AllowVectorFonts
  fullName: System.Windows.Forms.FontDialog.AllowVectorFonts
- uid: System.Windows.Forms.FontDialog.AllowVerticalFonts
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowVerticalFonts
  nameWithType: FontDialog.AllowVerticalFonts
  fullName: System.Windows.Forms.FontDialog.AllowVerticalFonts
- uid: System.Windows.Forms.FontDialog.Apply
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Apply
  nameWithType: FontDialog.Apply
  fullName: System.Windows.Forms.FontDialog.Apply
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.FontDialog.Color
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Color
  nameWithType: FontDialog.Color
  fullName: System.Windows.Forms.FontDialog.Color
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Windows.Forms.FontDialog.EventApply
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: EventApply
  nameWithType: FontDialog.EventApply
  fullName: System.Windows.Forms.FontDialog.EventApply
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.FontDialog.FixedPitchOnly
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: FixedPitchOnly
  nameWithType: FontDialog.FixedPitchOnly
  fullName: System.Windows.Forms.FontDialog.FixedPitchOnly
- uid: System.Windows.Forms.FontDialog.Font
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Font
  nameWithType: FontDialog.Font
  fullName: System.Windows.Forms.FontDialog.Font
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Windows.Forms.FontDialog.FontMustExist
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: FontMustExist
  nameWithType: FontDialog.FontMustExist
  fullName: System.Windows.Forms.FontDialog.FontMustExist
- uid: System.Windows.Forms.FontDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: HookProc(IntPtr,Int32,IntPtr,IntPtr)
  nameWithType: FontDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  fullName: System.Windows.Forms.FontDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.FontDialog.MaxSize
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: MaxSize
  nameWithType: FontDialog.MaxSize
  fullName: System.Windows.Forms.FontDialog.MaxSize
- uid: System.Windows.Forms.FontDialog.MinSize
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: MinSize
  nameWithType: FontDialog.MinSize
  fullName: System.Windows.Forms.FontDialog.MinSize
- uid: System.Windows.Forms.FontDialog.OnApply(System.EventArgs)
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: OnApply(EventArgs)
  nameWithType: FontDialog.OnApply(EventArgs)
  fullName: System.Windows.Forms.FontDialog.OnApply(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.FontDialog.Options
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Options
  nameWithType: FontDialog.Options
  fullName: System.Windows.Forms.FontDialog.Options
- uid: System.Windows.Forms.FontDialog.Reset
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Reset()
  nameWithType: FontDialog.Reset()
  fullName: System.Windows.Forms.FontDialog.Reset()
- uid: System.Windows.Forms.FontDialog.RunDialog(System.IntPtr)
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: RunDialog(IntPtr)
  nameWithType: FontDialog.RunDialog(IntPtr)
  fullName: System.Windows.Forms.FontDialog.RunDialog(IntPtr)
- uid: System.Windows.Forms.FontDialog.ScriptsOnly
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ScriptsOnly
  nameWithType: FontDialog.ScriptsOnly
  fullName: System.Windows.Forms.FontDialog.ScriptsOnly
- uid: System.Windows.Forms.FontDialog.ShowApply
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowApply
  nameWithType: FontDialog.ShowApply
  fullName: System.Windows.Forms.FontDialog.ShowApply
- uid: System.Windows.Forms.FontDialog.ShowColor
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowColor
  nameWithType: FontDialog.ShowColor
  fullName: System.Windows.Forms.FontDialog.ShowColor
- uid: System.Windows.Forms.FontDialog.ShowEffects
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowEffects
  nameWithType: FontDialog.ShowEffects
  fullName: System.Windows.Forms.FontDialog.ShowEffects
- uid: System.Windows.Forms.FontDialog.ShowHelp
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowHelp
  nameWithType: FontDialog.ShowHelp
  fullName: System.Windows.Forms.FontDialog.ShowHelp
- uid: System.Windows.Forms.FontDialog.ToString
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ToString()
  nameWithType: FontDialog.ToString()
  fullName: System.Windows.Forms.FontDialog.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.FontDialog.#ctor*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: FontDialog
  nameWithType: FontDialog.FontDialog
- uid: System.Windows.Forms.FontDialog.AllowScriptChange*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowScriptChange
  nameWithType: FontDialog.AllowScriptChange
- uid: System.Windows.Forms.FontDialog.AllowSimulations*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowSimulations
  nameWithType: FontDialog.AllowSimulations
- uid: System.Windows.Forms.FontDialog.AllowVectorFonts*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowVectorFonts
  nameWithType: FontDialog.AllowVectorFonts
- uid: System.Windows.Forms.FontDialog.AllowVerticalFonts*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: AllowVerticalFonts
  nameWithType: FontDialog.AllowVerticalFonts
- uid: System.Windows.Forms.FontDialog.Color*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Color
  nameWithType: FontDialog.Color
- uid: System.Windows.Forms.FontDialog.FixedPitchOnly*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: FixedPitchOnly
  nameWithType: FontDialog.FixedPitchOnly
- uid: System.Windows.Forms.FontDialog.Font*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Font
  nameWithType: FontDialog.Font
- uid: System.Windows.Forms.FontDialog.FontMustExist*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: FontMustExist
  nameWithType: FontDialog.FontMustExist
- uid: System.Windows.Forms.FontDialog.HookProc*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: HookProc
  nameWithType: FontDialog.HookProc
- uid: System.Windows.Forms.FontDialog.MaxSize*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: MaxSize
  nameWithType: FontDialog.MaxSize
- uid: System.Windows.Forms.FontDialog.MinSize*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: MinSize
  nameWithType: FontDialog.MinSize
- uid: System.Windows.Forms.FontDialog.OnApply*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: OnApply
  nameWithType: FontDialog.OnApply
- uid: System.Windows.Forms.FontDialog.Options*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Options
  nameWithType: FontDialog.Options
- uid: System.Windows.Forms.FontDialog.Reset*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: Reset
  nameWithType: FontDialog.Reset
- uid: System.Windows.Forms.FontDialog.RunDialog*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: RunDialog
  nameWithType: FontDialog.RunDialog
- uid: System.Windows.Forms.FontDialog.ScriptsOnly*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ScriptsOnly
  nameWithType: FontDialog.ScriptsOnly
- uid: System.Windows.Forms.FontDialog.ShowApply*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowApply
  nameWithType: FontDialog.ShowApply
- uid: System.Windows.Forms.FontDialog.ShowColor*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowColor
  nameWithType: FontDialog.ShowColor
- uid: System.Windows.Forms.FontDialog.ShowEffects*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowEffects
  nameWithType: FontDialog.ShowEffects
- uid: System.Windows.Forms.FontDialog.ShowHelp*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ShowHelp
  nameWithType: FontDialog.ShowHelp
- uid: System.Windows.Forms.FontDialog.ToString*
  parent: System.Windows.Forms.FontDialog
  isExternal: false
  name: ToString
  nameWithType: FontDialog.ToString
