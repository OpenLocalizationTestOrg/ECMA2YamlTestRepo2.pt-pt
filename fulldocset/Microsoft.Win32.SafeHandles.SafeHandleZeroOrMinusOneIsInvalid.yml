### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  id: SafeHandleZeroOrMinusOneIsInvalid
  children:
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  langs:
  - csharp
  name: SafeHandleZeroOrMinusOneIsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  type: Class
  summary: "Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle."
  remarks: "This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleZeroOrMinusOneIsInvalid.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.       Use the SafeHandleZeroOrMinusOneIsInvalid class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
  inheritance:
  - System.Runtime.InteropServices.SafeHandle
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  langs:
  - csharp
  name: SafeHandleZeroOrMinusOneIsInvalid(Boolean)
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Initializes a new instance of the <xref href=&quot;Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid&quot;></xref> class, specifying whether the handle is to be reliably released."
  syntax:
    content: protected SafeHandleZeroOrMinusOneIsInvalid (bool ownsHandle);
    parameters:
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to reliably release the handle during the finalization phase; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to prevent reliable release (not recommended)."
  overload: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  langs:
  - csharp
  name: IsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  type: Property
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Gets a value that indicates whether the handle is invalid."
  remarks: "The common language runtime uses this property to determine whether critical finalization is required."
  syntax:
    content: public override bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the handle is not valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: System.Runtime.InteropServices.SafeHandle
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: SafeHandleZeroOrMinusOneIsInvalid(Boolean)
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor*
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: SafeHandleZeroOrMinusOneIsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid*
  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
