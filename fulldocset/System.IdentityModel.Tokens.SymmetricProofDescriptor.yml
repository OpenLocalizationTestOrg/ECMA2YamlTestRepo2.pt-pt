### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor
  id: SymmetricProofDescriptor
  children:
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials
  - System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials
  langs:
  - csharp
  name: SymmetricProofDescriptor
  nameWithType: SymmetricProofDescriptor
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor
  type: Class
  summary: "This class can be used for issuing the symmetric key based token."
  syntax:
    content: 'public class SymmetricProofDescriptor : System.IdentityModel.Tokens.ProofDescriptor'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.ProofDescriptor
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Tokens.SymmetricProofDescriptor&quot;></xref> class with the specified encrypting credentials."
  remarks: "Use this constructor if you want the STS to use the specified <xref:System.IdentityModel.Tokens.EncryptingCredentials>."
  syntax:
    content: public SymmetricProofDescriptor (System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);
    parameters:
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The <xref href=&quot;System.IdentityModel.Tokens.EncryptingCredentials&quot;></xref> to be used."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(Byte[],EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Tokens.SymmetricProofDescriptor&quot;></xref> class with the specified key material."
  remarks: "Use this constructor if you want the STS to use the specified key bytes. This happens when client sends the entropy, and the STS would just use that as the key for the issued token."
  syntax:
    content: public SymmetricProofDescriptor (byte[] key, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);
    parameters:
    - id: key
      type: System.Byte[]
      description: "The symmetric key that is used inside the issued token."
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the relying party."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Tokens.SymmetricProofDescriptor&quot;></xref> class with an auto-generated key."
  remarks: "Use this constructor if you want the STS to auto-generate the key using a random number generator and send it in the proof token as a binary secret."
  syntax:
    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials);
    parameters:
    - id: keySizeInBits
      type: System.Int32
      description: "The size of the symmetric key."
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the target of the request."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Tokens.SymmetricProofDescriptor&quot;></xref> class with an auto-generated key."
  remarks: "Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:      1.  The client sends the entropy, but the server rejects it.      2.  The client does not send the entropy, so the server&quot;s entropy is used."
  syntax:
    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials);
    parameters:
    - id: keySizeInBits
      type: System.Int32
      description: "The size of the symmetric key."
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the target of the request."
    - id: requestorWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the requestor."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keySizeInBits</code> is less than or equal to zero."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])
  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Tokens.SymmetricProofDescriptor&quot;></xref> class to use for sending combined entropy."
  remarks: "Use this constructor if you want to send a combined entropy."
  syntax:
    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, byte[] sourceEntropy);
    parameters:
    - id: keySizeInBits
      type: System.Int32
      description: "The size of the symmetric key."
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the target of the request."
    - id: requestorWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The encrypting credentials for the requestor used to encrypt the entropy or the proof token."
    - id: sourceEntropy
      type: System.Byte[]
      description: "The requestor&quot;s entropy."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceEntropy</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty array."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keySize</code> is less than zero."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)
  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Use this constructor to have the STS autogenerate a key and send it in the proof token as encrypted key. Two cases are covered here 1. client sends the entropy, but server rejects it 2. client did not send a entropy, so just use server&quot;s entropy"
  remarks: "If `encryptWith` is a DES algorithm, the key is guaranteed not to be a weak DES key.       Use this constructor if you want the STS to auto-generate the key and send it in the proof token as encrypted key. Two cases can be covered by using this constructor:      1.  The client sends the entropy, but the server rejects it.      2.  The client does not send the entropy, so the server&quot;s entropy is used."
  syntax:
    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, string encryptWith);
    parameters:
    - id: keySizeInBits
      type: System.Int32
      description: "The size of the symmetric key."
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the relying party."
    - id: requestorWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The key encrypting credentials for the requestor."
    - id: encryptWith
      type: System.String
      description: "The algorithm (URI) specified in the <xref uid=&quot;langword_csharp_&lt;EncryptWith&gt;&quot; name=&quot;&lt;EncryptWith&gt;&quot; href=&quot;&quot;></xref> element of the RST."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keySizeInBits</code> is less than or equal to zero."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)
  id: '#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)'
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Tokens.SymmetricProofDescriptor&quot;></xref> class to use for sending combined entropy."
  remarks: "Use this constructor to send combined entropy."
  syntax:
    content: public SymmetricProofDescriptor (int keySizeInBits, System.IdentityModel.Tokens.EncryptingCredentials targetWrappingCredentials, System.IdentityModel.Tokens.EncryptingCredentials requestorWrappingCredentials, byte[] sourceEntropy, string encryptWith);
    parameters:
    - id: keySizeInBits
      type: System.Int32
      description: "The size of the symmetric key."
    - id: targetWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The encrypting credentials for the relying party used to encrypt the key in the SecurityKeyIdentifier property."
    - id: requestorWrappingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The encrypting credentials for the requestor used to encrypt the entropy or the proof token."
    - id: sourceEntropy
      type: System.Byte[]
      description: "The requestor&quot;s entropy."
    - id: encryptWith
      type: System.String
      description: "The URI of the algorithm to use to encrypt the proof key."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keySizeInBits</code> is less than or equal to zero."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceEntropy</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty array."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)
  id: ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: ApplyTo(RequestSecurityTokenResponse)
  nameWithType: SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Modifies the specified RSTR based on the settings in this proof descriptor."
  remarks: "Sets the appropriate artifacts, such as the requested proof token, inside the RSTR based on what is inside the proof descriptor instance."
  syntax:
    content: public override void ApplyTo (System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse response);
    parameters:
    - id: response
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "The RSTR to which to apply the proof descriptor."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>response</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes
  id: GetKeyBytes
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: GetKeyBytes()
  nameWithType: SymmetricProofDescriptor.GetKeyBytes()
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gets the key material."
  syntax:
    content: public byte[] GetKeyBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: "A byte array that contains the key material."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy
  id: GetSourceEntropy
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: GetSourceEntropy()
  nameWithType: SymmetricProofDescriptor.GetSourceEntropy()
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gets the source entropy in plain bytes."
  syntax:
    content: protected byte[] GetSourceEntropy ();
    parameters: []
    return:
      type: System.Byte[]
      description: "A byte array that contains the source entropy."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy
  id: GetTargetEntropy
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: GetTargetEntropy()
  nameWithType: SymmetricProofDescriptor.GetTargetEntropy()
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gets the target entropy in plain bytes"
  syntax:
    content: protected byte[] GetTargetEntropy ();
    parameters: []
    return:
      type: System.Byte[]
      description: "A byte array that contains the target entropy."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier
  id: KeyIdentifier
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: KeyIdentifier
  nameWithType: SymmetricProofDescriptor.KeyIdentifier
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gets the key identifier that can be used inside the issued token to define the key. It is usually the binary secret or the encrypted key;"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityKeyIdentifier KeyIdentifier { get; }
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "The key identifier."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials
  id: RequestorEncryptingCredentials
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: RequestorEncryptingCredentials
  nameWithType: SymmetricProofDescriptor.RequestorEncryptingCredentials
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gets the requestor&quot;s encrypting credentials, which may be used to encrypt the requested proof token or the entropy in the response."
  syntax:
    content: protected System.IdentityModel.Tokens.EncryptingCredentials RequestorEncryptingCredentials { get; }
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The requestor’s encrypting credentials."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials
  id: TargetEncryptingCredentials
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  langs:
  - csharp
  name: TargetEncryptingCredentials
  nameWithType: SymmetricProofDescriptor.TargetEncryptingCredentials
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gets the relying party encrypting credentials, which may be used to encrypt the requested security token in the response."
  syntax:
    content: protected System.IdentityModel.Tokens.EncryptingCredentials TargetEncryptingCredentials { get; }
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The relying party encrypting credentials."
  overload: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.ProofDescriptor
  isExternal: false
  name: System.IdentityModel.Tokens.ProofDescriptor
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(EncryptingCredentials)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(Byte[],EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Byte[],EncryptingCredentials)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials)
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[])
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.SymmetricProofDescriptor(Int32,EncryptingCredentials,EncryptingCredentials,Byte[],String)
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: ApplyTo(RequestSecurityTokenResponse)
  nameWithType: SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(RequestSecurityTokenResponse)
- uid: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: RequestSecurityTokenResponse
  nameWithType: RequestSecurityTokenResponse
  fullName: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: GetKeyBytes()
  nameWithType: SymmetricProofDescriptor.GetKeyBytes()
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes()
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: GetSourceEntropy()
  nameWithType: SymmetricProofDescriptor.GetSourceEntropy()
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy()
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: GetTargetEntropy()
  nameWithType: SymmetricProofDescriptor.GetTargetEntropy()
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy()
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: KeyIdentifier
  nameWithType: SymmetricProofDescriptor.KeyIdentifier
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: RequestorEncryptingCredentials
  nameWithType: SymmetricProofDescriptor.RequestorEncryptingCredentials
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: TargetEncryptingCredentials
  nameWithType: SymmetricProofDescriptor.TargetEncryptingCredentials
  fullName: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: SymmetricProofDescriptor
  nameWithType: SymmetricProofDescriptor.SymmetricProofDescriptor
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: ApplyTo
  nameWithType: SymmetricProofDescriptor.ApplyTo
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: GetKeyBytes
  nameWithType: SymmetricProofDescriptor.GetKeyBytes
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: GetSourceEntropy
  nameWithType: SymmetricProofDescriptor.GetSourceEntropy
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: GetTargetEntropy
  nameWithType: SymmetricProofDescriptor.GetTargetEntropy
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: KeyIdentifier
  nameWithType: SymmetricProofDescriptor.KeyIdentifier
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: RequestorEncryptingCredentials
  nameWithType: SymmetricProofDescriptor.RequestorEncryptingCredentials
- uid: System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials*
  parent: System.IdentityModel.Tokens.SymmetricProofDescriptor
  isExternal: false
  name: TargetEncryptingCredentials
  nameWithType: SymmetricProofDescriptor.TargetEncryptingCredentials
