### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.StateChangedEventArgs
  id: StateChangedEventArgs
  children:
  - System.Speech.Recognition.StateChangedEventArgs.RecognizerState
  langs:
  - csharp
  name: StateChangedEventArgs
  nameWithType: StateChangedEventArgs
  fullName: System.Speech.Recognition.StateChangedEventArgs
  type: Class
  summary: "Returns data from the <xref href=&quot;System.Speech.Recognition.SpeechRecognizer.StateChanged&quot;></xref> event."
  remarks: "The <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> class. StateChangedEventArgs derives from <xref:System.EventArgs> and is passed to handlers for <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.       <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> is a read-only property. A shared speech recognizer&quot;s state cannot be changed programmatically. Users can change a shared speech recognizer&quot;s state using the Speech Recognition user interface (UI) or through the **Speech Recognition** member of the Windows **Control Panel**.       Both the **On** and **Sleep** settings in the Speech Recognition UI correspond to the `Listening` state. The **Off** setting in the Speech Recognition UI corresponds to <xref:System.Speech.Recognition.RecognizerState>."
  example:
  - "The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation. The example asynchronously loads all the created grammars to the recognizer.  A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in \"listening\" mode.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the SpeechRecognized event.  \n      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n      // Add a handler for the StateChanged event.  \n      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n  \n      // Create \"yesno\" grammar.  \n      Choices yesChoices = new Choices(new string[] { \"yes\", \"yup\", \"yah}\" });  \n      SemanticResultValue yesValue =  \n          new SemanticResultValue(yesChoices, (bool)true);  \n      Choices noChoices = new Choices(new string[] { \"no\", \"nope\", \"nah\" });  \n      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  \n      SemanticResultKey yesNoKey =  \n          new SemanticResultKey(\"yesno\", new Choices(new GrammarBuilder[] { yesValue, noValue }));  \n      Grammar yesnoGrammar = new Grammar(yesNoKey);  \n      yesnoGrammar.Name = \"yesNo\";  \n  \n      // Create \"done\" grammar.  \n      Grammar doneGrammar =  \n        new Grammar(new Choices(new string[] { \"done\", \"exit\", \"quit\", \"stop\" }));  \n      doneGrammar.Name = \"Done\";  \n  \n      // Create dictation grammar.  \n      Grammar dictation = new DictationGrammar();  \n      dictation.Name = \"Dictation\";  \n  \n      // Load grammars to the recognizer.  \n      recognizer.LoadGrammarAsync(yesnoGrammar);  \n      recognizer.LoadGrammarAsync(doneGrammar);  \n      recognizer.LoadGrammarAsync(dictation);  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Put the shared speech recognizer into \"listening\" mode.  \n    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n     if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  \n    // Write the grammar name and the text of the recognized phrase to the console.  \n    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n     Console.WriteLine(\"Grammar({0}): {1}\", e.Result.Grammar.Name, e.Result.Text);  \n  \n      // Add event handler code here.  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n     string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n      }  \n  \n      // Add exception handling code here.  \n      Console.WriteLine(\"Grammar {0} {1} loaded.\",  \n      grammarName, (grammarLoaded) ? \"is\" : \"is not\");  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public class StateChangedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.StateChangedEventArgs.RecognizerState
  id: RecognizerState
  parent: System.Speech.Recognition.StateChangedEventArgs
  langs:
  - csharp
  name: RecognizerState
  nameWithType: StateChangedEventArgs.RecognizerState
  fullName: System.Speech.Recognition.StateChangedEventArgs.RecognizerState
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Gets the current state of the shared speech recognition engine in Windows."
  remarks: ''
  example:
  - "The following example updates a display based on the state information provided by a <xref:System.Speech.Recognition.RecognizerState> instance that is obtained from the RecognizerState property of a <xref:System.Speech.Recognition.StateChangedEventArgs> instance passed to a handler for a <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event.  \n  \n```  \n  \n// Make sure that _recognizer and recognition start buttons are disabled if state is stopped.  \n// Re-enable the start button to allow manual re-enable if the speech recognizer is listening.  \n_recognizer.StateChanged +=  \n  delegate(object sender, StateChangedEventArgs eventArgs)   \n{  \n  _recognizerStateLabel.Text = \"Speech Recognizer State: \" + eventArgs.RecognizerState.ToString();  \n};  \n```"
  syntax:
    content: public System.Speech.Recognition.RecognizerState RecognizerState { get; }
    return:
      type: System.Speech.Recognition.RecognizerState
      description: "A <xref href=&quot;System.Speech.Recognition.RecognizerState&quot;></xref> instance that indicates whether the state of a shared speech recognition engine is <xref uid=&quot;langword_csharp_Listening&quot; name=&quot;Listening&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Stopped&quot; name=&quot;Stopped&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.StateChangedEventArgs.RecognizerState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Speech.Recognition.StateChangedEventArgs.RecognizerState
  parent: System.Speech.Recognition.StateChangedEventArgs
  isExternal: false
  name: RecognizerState
  nameWithType: StateChangedEventArgs.RecognizerState
  fullName: System.Speech.Recognition.StateChangedEventArgs.RecognizerState
- uid: System.Speech.Recognition.RecognizerState
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognizerState
  nameWithType: RecognizerState
  fullName: System.Speech.Recognition.RecognizerState
- uid: System.Speech.Recognition.StateChangedEventArgs.RecognizerState*
  parent: System.Speech.Recognition.StateChangedEventArgs
  isExternal: false
  name: RecognizerState
  nameWithType: StateChangedEventArgs.RecognizerState
