### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.XsdDataContractExporter
  id: XsdDataContractExporter
  children:
  - System.Runtime.Serialization.XsdDataContractExporter.#ctor
  - System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)
  - System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  - System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})
  - System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)
  - System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  - System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})
  - System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)
  - System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)
  - System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)
  - System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)
  - System.Runtime.Serialization.XsdDataContractExporter.Options
  - System.Runtime.Serialization.XsdDataContractExporter.Schemas
  langs:
  - csharp
  name: XsdDataContractExporter
  nameWithType: XsdDataContractExporter
  fullName: System.Runtime.Serialization.XsdDataContractExporter
  type: Class
  summary: "Allows the transformation of a set of [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] types that are used in data contracts into an XML schema file (.xsd)."
  remarks: "Use the XsdDataContractExporter class when you have created a Web service that incorporates data represented by common language runtime (CLR) types and when you need to export XML schemas for each type to be consumed by other Web services. That is, XsdDataContractExporter transforms a set of CLR types into XML schemas. (For more information about the types that can be used, see [Types Supported by the Data Contract Serializer](../Topic/Types%20Supported%20by%20the%20Data%20Contract%20Serializer.md).) The schemas can then be exposed through a Web Services Description Language (WSDL) document for use by others who need to interoperate with your service.       Conversely, if you are creating a Web service that must interoperate with an existing Web service, use the <xref:System.Runtime.Serialization.XsdDataContractImporter> to transform XML schemas and create the CLR types that represent the data in a selected programming language.       The XsdDataContractExporter generates an <xref:System.Xml.Schema.XmlSchemaSet> object that contains the collection of schemas. Access the set of schemas through the <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> property.      > [!NOTE] >  To quickly generate XML schema definition (XSD) files that other Web services can consume, use the XsdDataContractExporter.      ## Exporting Schemas Into an XmlSchemaSet    To create an instance of the <xref:System.Xml.Schema.XmlSchemaSet> class that contains XML schema files, you should be aware of the following.       The set of types you are exporting are recorded as an internal set of data contracts. Thus, you can call the <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> method multiple times to add new types to the schema set without degrading performance because only the new types will be added to the set. During the <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A> operation, the existing schemas are compared to the new schemas being added. If there are conflicts, an exception will be thrown. A conflict is usually detected if two types with the same data contract name but different contracts (different members) are exported by the same XsdDataContractExporter instance.      ## Using the Exporter    A recommended way of using this class is as follows:      1.  Use one of the <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> overloads to determine whether the specified type or set of types can be exported. Use one of the overloads that is appropriate to your requirements.      2.  Call the corresponding <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A> method.      3.  Retrieve the schemas from the <xref:System.Runtime.Serialization.XsdDataContractExporter.Schemas%2A>property."
  example:
  - "The following example creates an instance of the XsdDataContractExporter and calls the <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%28System.Type%29> method.  \n  \n [!code-vb[XsdDataContractExporter#0](~/add/codesnippet/VisualBasic/t-system.runtime.seriali_12_1.vb)]\n [!code-cs[XsdDataContractExporter#0](~/add/codesnippet/CSharp/t-system.runtime.seriali_12_1.cs)]"
  syntax:
    content: public class XsdDataContractExporter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.#ctor
  id: '#ctor'
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: XsdDataContractExporter()
  nameWithType: XsdDataContractExporter.XsdDataContractExporter()
  fullName: System.Runtime.Serialization.XsdDataContractExporter.XsdDataContractExporter()
  type: Constructor
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Runtime.Serialization.XsdDataContractExporter&quot;></see> class."
  syntax:
    content: public XsdDataContractExporter ();
    parameters: []
  overload: System.Runtime.Serialization.XsdDataContractExporter.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)
  id: '#ctor(System.Xml.Schema.XmlSchemaSet)'
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: XsdDataContractExporter(XmlSchemaSet)
  nameWithType: XsdDataContractExporter.XsdDataContractExporter(XmlSchemaSet)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.XsdDataContractExporter(XmlSchemaSet)
  type: Constructor
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Runtime.Serialization.XsdDataContractExporter&quot;></see> class with the specified set of schemas."
  remarks: "Use this overload when you have an existing <xref:System.Xml.Schema.XmlSchemaSet> to which you want to add new schemas. After you construct a <xref:System.Runtime.Serialization.XsdDataContractExporter> with this overload, call the <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A> method to add new types to the existing set."
  syntax:
    content: public XsdDataContractExporter (System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "An  that contains the schemas to be exported."
  overload: System.Runtime.Serialization.XsdDataContractExporter.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  id: CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: CanExport(ICollection<Assembly>)
  nameWithType: XsdDataContractExporter.CanExport(ICollection<Assembly>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.CanExport(ICollection<Assembly>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a set of assemblies can be exported."
  syntax:
    content: public bool CanExport (System.Collections.Generic.ICollection<System.Reflection.Assembly> assemblies);
    parameters:
    - id: assemblies
      type: System.Collections.Generic.ICollection{System.Reflection.Assembly}
      description: "A <xref:System.Collections.Generic.ICollection%601> of <xref:System.Reflection.Assembly> that contains the assemblies with the types to export."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Runtime.Serialization.XsdDataContractExporter.CanExport*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})
  id: CanExport(System.Collections.Generic.ICollection{System.Type})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: CanExport(ICollection<Type>)
  nameWithType: XsdDataContractExporter.CanExport(ICollection<Type>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.CanExport(ICollection<Type>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a &lt;xref:System.Collections.Generic.ICollection%601&gt; can be exported."
  syntax:
    content: public bool CanExport (System.Collections.Generic.ICollection<Type> types);
    parameters:
    - id: types
      type: System.Collections.Generic.ICollection{System.Type}
      description: "A <xref:System.Collections.Generic.ICollection%601> that contains the specified types to export."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Runtime.Serialization.XsdDataContractExporter.CanExport*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)
  id: CanExport(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: CanExport(Type)
  nameWithType: XsdDataContractExporter.CanExport(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.CanExport(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Gets a value that indicates whether the specified common language runtime (CLR) type can be exported."
  remarks: ''
  example:
  - "The following example calls the CanExport method before calling the <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%28System.Type%29> method.  \n  \n [!code-vb[XsdDataContractExporter#1](~/add/codesnippet/VisualBasic/m-system.runtime.seriali_1_1.vb)]\n [!code-cs[XsdDataContractExporter#1](~/add/codesnippet/CSharp/m-system.runtime.seriali_1_1.cs)]"
  syntax:
    content: public bool CanExport (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> to export."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Runtime.Serialization.XsdDataContractExporter.CanExport*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  id: Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: Export(ICollection<Assembly>)
  nameWithType: XsdDataContractExporter.Export(ICollection<Assembly>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Export(ICollection<Assembly>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Transforms the types contained in the specified collection of assemblies."
  syntax:
    content: public void Export (System.Collections.Generic.ICollection<System.Reflection.Assembly> assemblies);
    parameters:
    - id: assemblies
      type: System.Collections.Generic.ICollection{System.Reflection.Assembly}
      description: "A <xref:System.Collections.Generic.ICollection%601> (of <xref:System.Reflection.Assembly>) that contains the types to export."
  overload: System.Runtime.Serialization.XsdDataContractExporter.Export*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The assemblies argument is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An <xref:System.Reflection.Assembly> in the collection is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})
  id: Export(System.Collections.Generic.ICollection{System.Type})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: Export(ICollection<Type>)
  nameWithType: XsdDataContractExporter.Export(ICollection<Type>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Export(ICollection<Type>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Transforms the types contained in the &lt;xref:System.Collections.Generic.ICollection%601&gt; passed to this method."
  syntax:
    content: public void Export (System.Collections.Generic.ICollection<Type> types);
    parameters:
    - id: types
      type: System.Collections.Generic.ICollection{System.Type}
      description: "A  <xref:System.Collections.Generic.ICollection%601> (of <xref:System.Type>) that contains the types to export."
  overload: System.Runtime.Serialization.XsdDataContractExporter.Export*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The types argument is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A type in the collection is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)
  id: Export(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: Export(Type)
  nameWithType: XsdDataContractExporter.Export(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Export(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Transforms the specified [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] type into an XML schema definition language (XSD) schema."
  remarks: "Call the <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> to determine whether the type can be exported. After calling the Export method, the schema can be retrieved through the <xref:System.Runtime.Serialization.XsdDataContractExporter.Schemas%2A> property."
  syntax:
    content: public void Export (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> to transform into an XML schema."
  overload: System.Runtime.Serialization.XsdDataContractExporter.Export*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The type argument is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)
  id: GetRootElementName(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: GetRootElementName(Type)
  nameWithType: XsdDataContractExporter.GetRootElementName(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Returns the top-level name and namespace for the &lt;xref:System.Type&gt;."
  syntax:
    content: public System.Xml.XmlQualifiedName GetRootElementName (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> to query."
    return:
      type: System.Xml.XmlQualifiedName
      description: "To be added."
  overload: System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The type argument is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)
  id: GetSchemaType(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: GetSchemaType(Type)
  nameWithType: XsdDataContractExporter.GetSchemaType(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Returns the XML schema type for the specified type."
  remarks: "The main purpose of this method is to allow anonymous types in XML schema to be represented. Because anonymous types do not have a contract name and namespace, they cannot be looked up using the <xref:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName%2A>. This method returns the <xref:System.Xml.Schema.XmlSchemaType> definition for such types. The types for which the <xref:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName%2A> method returns a valid name, this method returns `null`."
  syntax:
    content: public System.Xml.Schema.XmlSchemaType GetSchemaType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The type to return a schema for."
    return:
      type: System.Xml.Schema.XmlSchemaType
      description: "To be added."
  overload: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The type argument is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)
  id: GetSchemaTypeName(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: GetSchemaTypeName(Type)
  nameWithType: XsdDataContractExporter.GetSchemaTypeName(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Returns the contract name and contract namespace for the &lt;xref:System.Type&gt;."
  syntax:
    content: public System.Xml.XmlQualifiedName GetSchemaTypeName (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> that was exported."
    return:
      type: System.Xml.XmlQualifiedName
      description: "To be added."
  overload: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The type argument is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.Options
  id: Options
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: Options
  nameWithType: XsdDataContractExporter.Options
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Options
  type: Property
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Gets or sets an <see cref=&quot;T:System.Runtime.Serialization.ExportOptions&quot;></see> that contains options that can be set for the export operation."
  syntax:
    content: public System.Runtime.Serialization.ExportOptions Options { get; set; }
    return:
      type: System.Runtime.Serialization.ExportOptions
      description: "An <see cref=&quot;T:System.Runtime.Serialization.ExportOptions&quot;></see> that contains options used to customize how types are exported to schemas."
  overload: System.Runtime.Serialization.XsdDataContractExporter.Options*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Serialization.XsdDataContractExporter.Schemas
  id: Schemas
  parent: System.Runtime.Serialization.XsdDataContractExporter
  langs:
  - csharp
  name: Schemas
  nameWithType: XsdDataContractExporter.Schemas
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Schemas
  type: Property
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Gets the collection of exported XML schemas."
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet Schemas { get; }
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "An <see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot;></see> that contains the schemas transformed from the set of common language runtime (CLR) types after calling the &lt;xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A&gt; method."
  overload: System.Runtime.Serialization.XsdDataContractExporter.Schemas*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Serialization.XsdDataContractExporter.#ctor
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: XsdDataContractExporter()
  nameWithType: XsdDataContractExporter.XsdDataContractExporter()
  fullName: System.Runtime.Serialization.XsdDataContractExporter.XsdDataContractExporter()
- uid: System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: XsdDataContractExporter(XmlSchemaSet)
  nameWithType: XsdDataContractExporter.XsdDataContractExporter(XmlSchemaSet)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.XsdDataContractExporter(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: CanExport(ICollection<Assembly>)
  nameWithType: XsdDataContractExporter.CanExport(ICollection<Assembly>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.CanExport(ICollection<Assembly>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<Assembly>
  nameWithType: ICollection<Assembly>
  fullName: System.Collections.Generic.ICollection<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: CanExport(ICollection<Type>)
  nameWithType: XsdDataContractExporter.CanExport(ICollection<Type>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.CanExport(ICollection<Type>)
- uid: System.Collections.Generic.ICollection{System.Type}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<Type>
  nameWithType: ICollection<Type>
  fullName: System.Collections.Generic.ICollection<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: CanExport(Type)
  nameWithType: XsdDataContractExporter.CanExport(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.CanExport(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Export(ICollection<Assembly>)
  nameWithType: XsdDataContractExporter.Export(ICollection<Assembly>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Export(ICollection<Assembly>)
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Export(ICollection<Type>)
  nameWithType: XsdDataContractExporter.Export(ICollection<Type>)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Export(ICollection<Type>)
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Export(Type)
  nameWithType: XsdDataContractExporter.Export(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Export(Type)
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: GetRootElementName(Type)
  nameWithType: XsdDataContractExporter.GetRootElementName(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(Type)
- uid: System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: GetSchemaType(Type)
  nameWithType: XsdDataContractExporter.GetSchemaType(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(Type)
- uid: System.Xml.Schema.XmlSchemaType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaType
  nameWithType: XmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: GetSchemaTypeName(Type)
  nameWithType: XsdDataContractExporter.GetSchemaTypeName(Type)
  fullName: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(Type)
- uid: System.Runtime.Serialization.XsdDataContractExporter.Options
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Options
  nameWithType: XsdDataContractExporter.Options
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Options
- uid: System.Runtime.Serialization.ExportOptions
  parent: System.Runtime.Serialization
  isExternal: false
  name: ExportOptions
  nameWithType: ExportOptions
  fullName: System.Runtime.Serialization.ExportOptions
- uid: System.Runtime.Serialization.XsdDataContractExporter.Schemas
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Schemas
  nameWithType: XsdDataContractExporter.Schemas
  fullName: System.Runtime.Serialization.XsdDataContractExporter.Schemas
- uid: System.Runtime.Serialization.XsdDataContractExporter.#ctor*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: XsdDataContractExporter
  nameWithType: XsdDataContractExporter.XsdDataContractExporter
- uid: System.Runtime.Serialization.XsdDataContractExporter.CanExport*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: CanExport
  nameWithType: XsdDataContractExporter.CanExport
- uid: System.Runtime.Serialization.XsdDataContractExporter.Export*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Export
  nameWithType: XsdDataContractExporter.Export
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: GetRootElementName
  nameWithType: XsdDataContractExporter.GetRootElementName
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: GetSchemaType
  nameWithType: XsdDataContractExporter.GetSchemaType
- uid: System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: GetSchemaTypeName
  nameWithType: XsdDataContractExporter.GetSchemaTypeName
- uid: System.Runtime.Serialization.XsdDataContractExporter.Options*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Options
  nameWithType: XsdDataContractExporter.Options
- uid: System.Runtime.Serialization.XsdDataContractExporter.Schemas*
  parent: System.Runtime.Serialization.XsdDataContractExporter
  isExternal: false
  name: Schemas
  nameWithType: XsdDataContractExporter.Schemas
