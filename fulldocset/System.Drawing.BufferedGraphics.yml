### YamlMime:ManagedReference
items:
- uid: System.Drawing.BufferedGraphics
  id: BufferedGraphics
  children:
  - System.Drawing.BufferedGraphics.Dispose
  - System.Drawing.BufferedGraphics.Finalize
  - System.Drawing.BufferedGraphics.Graphics
  - System.Drawing.BufferedGraphics.Render
  - System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)
  - System.Drawing.BufferedGraphics.Render(System.IntPtr)
  langs:
  - csharp
  name: BufferedGraphics
  nameWithType: BufferedGraphics
  fullName: System.Drawing.BufferedGraphics
  type: Class
  summary: "Provides a graphics buffer for double buffering."
  remarks: "The BufferedGraphics class allows you to implement custom double buffering for your graphics. It provides a wrapper for a graphics buffer, along with methods that you can use to write to the buffer and render its contents to an output device.       Graphics that use double buffering can reduce or eliminate flicker that is caused by redrawing a display surface. When you use double buffering, updated graphics are first drawn to a buffer in memory, and the contents of this buffer are then quickly written to some or all of the displayed surface. This relatively brief overwrite of the displayed graphics typically reduces or eliminates the flicker that sometimes occurs when graphics are updated.      > [!NOTE] >  The simplest way to use double buffering is to set the <xref:System.Windows.Forms.ControlStyles> control style flag on a control using the <xref:System.Windows.Forms.Control.SetStyle%2A> method. Setting the <xref:System.Windows.Forms.ControlStyles> flag for a control redirects all painting for the control through a default graphics buffer, without requiring any additional code. This flag is set to `true` by default.       The BufferedGraphics class has no public constructor and must be created by the <xref:System.Drawing.BufferedGraphicsContext> for an application domain using its <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method. You can retrieve the <xref:System.Drawing.BufferedGraphicsContext> for the current application domain from the static <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> property.       The <xref:System.Drawing.BufferedGraphics.Graphics%2A> property can be used for drawing to the graphics buffer. This property provides access to the <xref:System.Drawing.Graphics> object that draws to the graphics buffer allocated for this BufferedGraphics object.       The <xref:System.Drawing.BufferedGraphics.Render%2A> method with no arguments draws the contents of the graphics buffer to the surface specified when the buffer was allocated. Other overloads of the <xref:System.Drawing.BufferedGraphics.Render%2A> method allow you to specify a <xref:System.Drawing.Graphics> object or an <xref:System.IntPtr> object that points to a device context to which to draw the contents of the graphics buffer.       For more information about drawing double-buffered graphics, see [Double Buffered Graphics](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using a BufferedGraphics object to draw graphics using several types of buffering implementations. Clicking the form alternately starts and stops a timer that causes draw updates. The draw updates allow you to observe the effect of double buffering. Right-clicking the form cycles through the following drawing modes:  \n  \n-   Drawing directly to the <xref:System.Windows.Forms.Control.Handle%2A> for a <xref:System.Windows.Forms.Form>.  \n  \n-   Drawing by overriding the <xref:System.Windows.Forms.Form.OnPaint%2A> method using the <xref:System.Windows.Forms.ControlStyles> control style.  \n  \n-   Drawing by overriding the <xref:System.Windows.Forms.Form.OnPaint%2A> method for the form method without using the <xref:System.Windows.Forms.ControlStyles> control style.  \n  \n In each mode, text is drawn that identifies the current mode and describes the behavior that occurs when each mouse button is pressed.  \n  \n [!code-cpp[BufferedGraphicsExample#1](~/add/codesnippet/cpp/t-system.drawing.buffere_1_1.cpp)]\n [!code-cs[BufferedGraphicsExample#1](~/add/codesnippet/csharp/t-system.drawing.buffere_1_1.cs)]\n [!code-vb[BufferedGraphicsExample#1](~/add/codesnippet/visualbasic/t-system.drawing.buffere_1_1.vb)]"
  syntax:
    content: 'public sealed class BufferedGraphics : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Dispose
  id: Dispose
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Dispose()
  nameWithType: BufferedGraphics.Dispose()
  fullName: System.Drawing.BufferedGraphics.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Releases all resources used by the <xref href=&quot;System.Drawing.BufferedGraphics&quot;></xref> object."
  remarks: "Call Dispose when you are finished using the <xref:System.Drawing.BufferedGraphics> object. The Dispose method leaves the <xref:System.Drawing.BufferedGraphics> object in an unusable state. After calling Dispose, you must release all references to the <xref:System.Drawing.BufferedGraphics> object so the garbage collector can reclaim the memory that the <xref:System.Drawing.BufferedGraphics> object was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Drawing.BufferedGraphics> object. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.BufferedGraphics> object&quot;s `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.BufferedGraphics.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Finalize
  id: Finalize
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Finalize()
  nameWithType: BufferedGraphics.Finalize()
  fullName: System.Drawing.BufferedGraphics.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection."
  syntax:
    content: ~BufferedGraphics ();
    parameters: []
  overload: System.Drawing.BufferedGraphics.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Graphics
  id: Graphics
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Graphics
  nameWithType: BufferedGraphics.Graphics
  fullName: System.Drawing.BufferedGraphics.Graphics
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Gets a <xref href=&quot;System.Drawing.Graphics&quot;></xref> object that outputs to the graphics buffer."
  remarks: "This property provides a <xref:System.Drawing.Graphics> object that draws to the graphics buffer allocated for this <xref:System.Drawing.BufferedGraphics> object."
  syntax:
    content: public System.Drawing.Graphics Graphics { get; }
    return:
      type: System.Drawing.Graphics
      description: "A <xref href=&quot;System.Drawing.Graphics&quot;></xref> object that outputs to the graphics buffer."
  overload: System.Drawing.BufferedGraphics.Graphics*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Render
  id: Render
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Render()
  nameWithType: BufferedGraphics.Render()
  fullName: System.Drawing.BufferedGraphics.Render()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Writes the contents of the graphics buffer to the default device."
  remarks: "This method writes the contents of the graphics buffer to the device specified by calling the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method of the <xref:System.Drawing.BufferedGraphicsContext> used to create this <xref:System.Drawing.BufferedGraphics> object."
  syntax:
    content: public void Render ();
    parameters: []
  overload: System.Drawing.BufferedGraphics.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)
  id: Render(System.Drawing.Graphics)
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Render(Graphics)
  nameWithType: BufferedGraphics.Render(Graphics)
  fullName: System.Drawing.BufferedGraphics.Render(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Writes the contents of the graphics buffer to the specified <xref href=&quot;System.Drawing.Graphics&quot;></xref> object."
  remarks: "This method writes the contents of the graphics buffer to the specified <xref:System.Drawing.Graphics> object."
  example:
  - "The following code example demonstrates rendering the contents of the graphics buffer to a specified <xref:System.Drawing.Graphics> object. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#5](~/add/codesnippet/csharp/m-system.drawing.buffere_1_1.cs)]\n [!code-cpp[BufferingExamples#5](~/add/codesnippet/cpp/m-system.drawing.buffere_1_1.cpp)]\n [!code-vb[BufferingExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.buffere_1_1.vb)]"
  syntax:
    content: public void Render (System.Drawing.Graphics target);
    parameters:
    - id: target
      type: System.Drawing.Graphics
      description: "A <xref href=&quot;System.Drawing.Graphics&quot;></xref> object to which to write the contents of the graphics buffer."
  overload: System.Drawing.BufferedGraphics.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphics.Render(System.IntPtr)
  id: Render(System.IntPtr)
  parent: System.Drawing.BufferedGraphics
  langs:
  - csharp
  name: Render(IntPtr)
  nameWithType: BufferedGraphics.Render(IntPtr)
  fullName: System.Drawing.BufferedGraphics.Render(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Writes the contents of the graphics buffer to the device context associated with the specified <xref:System.IntPtr> handle."
  remarks: "This method writes the contents of the graphics buffer to the device context associated with the specified <xref:System.IntPtr> handle."
  example:
  - "The following code example demonstrates how to render the contents of the graphics buffer `grafx` to a specified device context. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#6](~/add/codesnippet/csharp/m-system.drawing.buffere_0_1.cs)]\n [!code-cpp[BufferingExamples#6](~/add/codesnippet/cpp/m-system.drawing.buffere_0_1.cpp)]\n [!code-vb[BufferingExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.buffere_0_1.vb)]"
  syntax:
    content: public void Render (IntPtr targetDC);
    parameters:
    - id: targetDC
      type: System.IntPtr
      description: "An <xref:System.IntPtr> that points to the device context to which to write the contents of the graphics buffer."
  overload: System.Drawing.BufferedGraphics.Render*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Drawing.BufferedGraphics.Dispose
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Dispose()
  nameWithType: BufferedGraphics.Dispose()
  fullName: System.Drawing.BufferedGraphics.Dispose()
- uid: System.Drawing.BufferedGraphics.Finalize
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Finalize()
  nameWithType: BufferedGraphics.Finalize()
  fullName: System.Drawing.BufferedGraphics.Finalize()
- uid: System.Drawing.BufferedGraphics.Graphics
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Graphics
  nameWithType: BufferedGraphics.Graphics
  fullName: System.Drawing.BufferedGraphics.Graphics
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.BufferedGraphics.Render
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render()
  nameWithType: BufferedGraphics.Render()
  fullName: System.Drawing.BufferedGraphics.Render()
- uid: System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render(Graphics)
  nameWithType: BufferedGraphics.Render(Graphics)
  fullName: System.Drawing.BufferedGraphics.Render(Graphics)
- uid: System.Drawing.BufferedGraphics.Render(System.IntPtr)
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render(IntPtr)
  nameWithType: BufferedGraphics.Render(IntPtr)
  fullName: System.Drawing.BufferedGraphics.Render(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.BufferedGraphics.Dispose*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Dispose
  nameWithType: BufferedGraphics.Dispose
- uid: System.Drawing.BufferedGraphics.Finalize*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Finalize
  nameWithType: BufferedGraphics.Finalize
- uid: System.Drawing.BufferedGraphics.Graphics*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Graphics
  nameWithType: BufferedGraphics.Graphics
- uid: System.Drawing.BufferedGraphics.Render*
  parent: System.Drawing.BufferedGraphics
  isExternal: false
  name: Render
  nameWithType: BufferedGraphics.Render
