### YamlMime:ManagedReference
items:
- uid: System.TypedReference
  id: TypedReference
  children:
  - System.TypedReference.Equals(System.Object)
  - System.TypedReference.GetHashCode
  - System.TypedReference.GetTargetType(System.TypedReference)
  - System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  - System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  - System.TypedReference.TargetTypeToken(System.TypedReference)
  - System.TypedReference.ToObject(System.TypedReference)
  langs:
  - csharp
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
  type: Struct
  summary: "Descreve os objetos que contêm um ponteiro gerido para uma localização e uma representação de tempo de execução do tipo que pode ser armazenado nessa localização."
  remarks: "Uma referência de tipo é uma combinação de tipo/valor utilizada para outro suporte e varargs. `TypedReference`é um tipo de valor incorporado que pode ser utilizado para parâmetros e variáveis locais.       As matrizes de `TypedReference` não não possível criar objetos. Por exemplo, a seguinte chamada é inválida: [!code-cs [System.TypedReference#1](~/add/codesnippet/csharp/t-system.typedreference_1.cs)][!code-cpp[System.TypedReference#1](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)][!code-vb[System.TypedReference#1    ](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public struct TypedReference
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.TypedReference.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.TypedReference
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TypedReference.Equals(Object)
  fullName: System.TypedReference.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Verifica se este objeto é igual para o objeto especificado."
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O objeto com o qual comparar o objeto atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este objeto é igual para o objeto especificado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.TypedReference.Equals*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Este método não está implementado."
  platform:
  - net462
- uid: System.TypedReference.GetHashCode
  id: GetHashCode
  parent: System.TypedReference
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TypedReference.GetHashCode()
  fullName: System.TypedReference.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Devolve o código hash deste objeto."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "O código hash deste objeto."
  overload: System.TypedReference.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.GetTargetType(System.TypedReference)
  id: GetTargetType(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: GetTargetType(TypedReference)
  nameWithType: TypedReference.GetTargetType(TypedReference)
  fullName: System.TypedReference.GetTargetType(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Devolve o tipo de destino especificado de <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>."
  syntax:
    content: public static Type GetTargetType (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "O valor de tipo cuja destino está a ser devolvido."
    return:
      type: System.Type
      description: "O tipo de destino especificado de <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>."
  overload: System.TypedReference.GetTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  id: MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  parent: System.TypedReference
  langs:
  - csharp
  name: MakeTypedReference(Object,FieldInfo[])
  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])
  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Faz uma <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref> de um campo identificado por um objeto especificado e uma lista de descrições de campo."
  remarks: "O método de MakeTypedReference devolve uma referência escrita para algumas campo terminal, onde o `target` parâmetro contém o campo descrito através do primeiro elemento de `flds`, o campo descrito através do primeiro elemento de `flds` contém o campo descrito por segundo elemento das `flds`, e assim sucessivamente até que o campo de terminal for atingido.      > [!NOTE] > Começando com o [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], este método pode ser utilizado para aceder a membros não público, se o autor da chamada foi concedido <xref:System.Security.Permissions.ReflectionPermission>com o <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>sinalizador e se o conjunto de permissões de membros não público é restringido da função invocadora conceder conjunto ou um subconjunto de ambos.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.ReflectionPermission> (Consulte [considerações de segurança para reflexão](~/add/includes/ajax-current-ext-md.md).)   >> Para utilizar esta funcionalidade, a aplicação deve visar o [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] ou posterior."
  syntax:
    content: public static TypedReference MakeTypedReference (object target, System.Reflection.FieldInfo[] flds);
    parameters:
    - id: target
      type: System.Object
      description: "Um objeto que contém o campo descrito através do primeiro elemento de `flds`."
    - id: flds
      type: System.Reflection.FieldInfo[]
      description: "Uma lista de descrições de campo onde cada elemento descreve um campo que contém o campo descrito pelo elemento succeeding. Cada campo descrito tem de ser um tipo de valor. As descrições de campo tem de ser <xref uid=&quot;langword_csharp_RuntimeFieldInfo&quot; name=&quot;RuntimeFieldInfo&quot; href=&quot;&quot;> </xref> fornecidos pelo sistema de tipos de objetos."
    return:
      type: System.TypedReference
      description: "A <xref href=&quot;System.TypedReference&quot;> </xref> para o campo descrito através do último elemento de <code> flds </code>."
  overload: System.TypedReference.MakeTypedReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>or <code>flds</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - um elemento de <code>flds</code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> flds </code> matriz não tem elementos.       - ou - um elemento de <code> flds </code> não é um <xref uid=&quot;langword_csharp_RuntimeFieldInfo&quot; name=&quot;RuntimeFieldInfo&quot; href=&quot;&quot;> </xref> objeto.       -or-       The <>*> or <>*> property of an element of <code>flds</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "Parâmetro <code> target </code> não contém o campo descrito através do primeiro elemento de <code> flds </code>, ou um elemento de <code> flds </code> descreve um campo que não está contido no campo descrito pelo elemento succeeding de <code> flds </code>.       - ou - o campo descrita através de um elemento de <code> flds </code> não é um tipo de valor."
  platform:
  - net462
- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  id: SetTypedReference(System.TypedReference,System.Object)
  parent: System.TypedReference
  langs:
  - csharp
  name: SetTypedReference(TypedReference,Object)
  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)
  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Converte o valor especificado para um <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>. Este método não é suportado."
  remarks: "Este método sempre emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  syntax:
    content: public static void SetTypedReference (TypedReference target, object value);
    parameters:
    - id: target
      type: System.TypedReference
      description: "O destino da conversão."
    - id: value
      type: System.Object
      description: "O valor para ser convertido."
  overload: System.TypedReference.SetTypedReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Em todos os casos."
  platform:
  - net462
- uid: System.TypedReference.TargetTypeToken(System.TypedReference)
  id: TargetTypeToken(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: TargetTypeToken(TypedReference)
  nameWithType: TypedReference.TargetTypeToken(TypedReference)
  fullName: System.TypedReference.TargetTypeToken(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Devolve o identificador de tipo de metadados interno para especificado <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>."
  syntax:
    content: public static RuntimeTypeHandle TargetTypeToken (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "O <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref> para que o identificador de tipo é solicitado."
    return:
      type: System.RuntimeTypeHandle
      description: "O identificador de tipo de metadados interno para especificado <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>."
  overload: System.TypedReference.TargetTypeToken*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.ToObject(System.TypedReference)
  id: ToObject(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: ToObject(TypedReference)
  nameWithType: TypedReference.ToObject(TypedReference)
  fullName: System.TypedReference.ToObject(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Converte especificado <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref> para um <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>."
  remarks: "Esta situação pode ser uma operação de boxing."
  syntax:
    content: public static object ToObject (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "O <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref> a converter."
    return:
      type: System.Object
      description: "Um <xref:System.Object>convertida a partir de um <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>.</xref:System.Object>"
  overload: System.TypedReference.ToObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingMemberException
  isExternal: true
  name: System.MissingMemberException
- uid: System.TypedReference.Equals(System.Object)
  parent: System.TypedReference
  isExternal: false
  name: Equals(Object)
  nameWithType: TypedReference.Equals(Object)
  fullName: System.TypedReference.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TypedReference.GetHashCode
  parent: System.TypedReference
  isExternal: false
  name: GetHashCode()
  nameWithType: TypedReference.GetHashCode()
  fullName: System.TypedReference.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TypedReference.GetTargetType(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: GetTargetType(TypedReference)
  nameWithType: TypedReference.GetTargetType(TypedReference)
  fullName: System.TypedReference.GetTargetType(TypedReference)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.TypedReference
  parent: System
  isExternal: false
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  parent: System.TypedReference
  isExternal: false
  name: MakeTypedReference(Object,FieldInfo[])
  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])
  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  parent: System.TypedReference
  isExternal: false
  name: SetTypedReference(TypedReference,Object)
  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)
  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)
- uid: System.TypedReference.TargetTypeToken(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: TargetTypeToken(TypedReference)
  nameWithType: TypedReference.TargetTypeToken(TypedReference)
  fullName: System.TypedReference.TargetTypeToken(TypedReference)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.TypedReference.ToObject(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: ToObject(TypedReference)
  nameWithType: TypedReference.ToObject(TypedReference)
  fullName: System.TypedReference.ToObject(TypedReference)
- uid: System.TypedReference.Equals*
  parent: System.TypedReference
  isExternal: false
  name: Equals
  nameWithType: TypedReference.Equals
- uid: System.TypedReference.GetHashCode*
  parent: System.TypedReference
  isExternal: false
  name: GetHashCode
  nameWithType: TypedReference.GetHashCode
- uid: System.TypedReference.GetTargetType*
  parent: System.TypedReference
  isExternal: false
  name: GetTargetType
  nameWithType: TypedReference.GetTargetType
- uid: System.TypedReference.MakeTypedReference*
  parent: System.TypedReference
  isExternal: false
  name: MakeTypedReference
  nameWithType: TypedReference.MakeTypedReference
- uid: System.TypedReference.SetTypedReference*
  parent: System.TypedReference
  isExternal: false
  name: SetTypedReference
  nameWithType: TypedReference.SetTypedReference
- uid: System.TypedReference.TargetTypeToken*
  parent: System.TypedReference
  isExternal: false
  name: TargetTypeToken
  nameWithType: TypedReference.TargetTypeToken
- uid: System.TypedReference.ToObject*
  parent: System.TypedReference
  isExternal: false
  name: ToObject
  nameWithType: TypedReference.ToObject
