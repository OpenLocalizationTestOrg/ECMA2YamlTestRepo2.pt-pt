### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "Represents an object that is associated with a <see cref=&quot;T:System.Windows.Threading.Dispatcher&quot;></see>."
  remarks: "Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the DispatcherObject directly.  To access a DispatcherObject from a thread other than the thread the DispatcherObject was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the DispatcherObject is associated with.       Subclasses of DispatcherObject that need to enforce thread safety can do so by calling <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> on all public methods.  This guarantees the calling thread is the thread that the DispatcherObject was created on.       A DispatcherObject cannot be independently instantiated; that is, all constructors are protected.       Objects that derive from DispatcherObject have thread affinity.       Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.  For more information, see the [Freezable Objects Overview](../Topic/Freezable%20Objects%20Overview.md)."
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot;></see> class."
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Determines whether the calling thread has access to this <see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot;></see>."
  remarks: "Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.       The difference between CheckAccess and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that CheckAccess returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.       Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object."
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/VisualBasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/CSharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets the <see cref=&quot;T:System.Windows.Threading.Dispatcher&quot;></see> this <see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot;></see> is associated with."
  remarks: "Only the thread that the Dispatcher was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.  To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with."
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "The dispatcher."
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Enforces that the calling thread has access to this <see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot;></see>."
  remarks: "Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.       Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.       The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and VerifyAccess is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and VerifyAccess throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>."
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/VisualBasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/CSharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "the calling thread does not have access to this ."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
