### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Framework.ICancelableTask
  id: ICancelableTask
  children:
  - Microsoft.Build.Framework.ICancelableTask.Cancel
  langs:
  - csharp
  name: ICancelableTask
  nameWithType: ICancelableTask
  fullName: Microsoft.Build.Framework.ICancelableTask
  type: Interface
  summary: "Interface for tasks which can be cancelled."
  syntax:
    content: 'public interface ICancelableTask : Microsoft.Build.Framework.ITask'
  implements:
  - Microsoft.Build.Framework.ITask
  platform:
  - net462
- uid: Microsoft.Build.Framework.ICancelableTask.Cancel
  id: Cancel
  parent: Microsoft.Build.Framework.ICancelableTask
  langs:
  - csharp
  name: Cancel()
  nameWithType: ICancelableTask.Cancel()
  fullName: Microsoft.Build.Framework.ICancelableTask.Cancel()
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: "Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method."
  remarks: "Cancel() may be called at any time after the task has been instantiated, even before <xref:Microsoft.Build.Framework.ITask.Execute%2A> is called.       Cancel calls may come in from any thread. The implementation of this method should not block indefinitely.       To cancel the build, both `Cancel` and `Execute` must return in any order."
  syntax:
    content: public void Cancel ();
    parameters: []
  overload: Microsoft.Build.Framework.ICancelableTask.Cancel*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Build.Framework.ICancelableTask.Cancel
  parent: Microsoft.Build.Framework.ICancelableTask
  isExternal: false
  name: Cancel()
  nameWithType: ICancelableTask.Cancel()
  fullName: Microsoft.Build.Framework.ICancelableTask.Cancel()
- uid: Microsoft.Build.Framework.ICancelableTask.Cancel*
  parent: Microsoft.Build.Framework.ICancelableTask
  isExternal: false
  name: Cancel
  nameWithType: ICancelableTask.Cancel
