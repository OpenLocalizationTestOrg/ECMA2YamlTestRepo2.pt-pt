### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  id: SecurityTokenHandler
  children:
  - System.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  - System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler
  type: Class
  summary: "A classe base abstrata de processadores de token de seguran√ßa."
  remarks: "The SecurityTokenHandler class is the base class from which all security token handlers derive. A security token handler is responsible for:  \n  \n-   Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.  \n  \n-   Serializing and deserializing security tokens of the type it is designed to process.  \n  \n-   Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements.  \n  \n-   Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n-   Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n Windows Identity Foundation (WIF) ships the following security token handlers out of the box:  \n  \n-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  \n  \n Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed. In many cases it may be better to derive from one of these classes rather than directly from the SecurityTokenHandler class.  \n  \n A security token handler can be added or removed from  a token handler collection by specifying the [\\&lt;add\\&gt;](../Topic/%3Cadd%3E.md), [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E.md), or [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E.md) elements under the [\\&lt;securityTokenHandlers\\&gt;](../Topic/%3CsecurityTokenHandlers%3E.md) element in a configuration file. The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property. You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.  \n  \n The SecurityTokenHandler class exposes several other properties and methods. Depending on the functionality that you choose to implement, you may override some or all of these members.  \n  \n You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.  \n  \n Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality. The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.  \n  \n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received. By default this method returns `false`, which indicates that the token has not already been received. You can override the method and provide logic to detect replayed tokens."
  example:
  - "The code examples in all of the SecurityTokenHandler topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following XML shows how to add the SWT token handler to the token handlers collection.  \n  \n```xml  \n<system.identityModel>  \n  <identityConfiguration saveBootstrapContext=\"true\">  \n    <issuerTokenResolver type=\"SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken\">  \n      <AddAudienceKeyPair  symmetricKey=\"wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=\" audience=\"http://localhost:19851/\" />  \n    </issuerTokenResolver>  \n    <issuerNameRegistry type=\"RelyingParty.TrustedIssuerNameRegistry, RelyingParty\"/>  \n    <audienceUris>  \n      <add value=\"http://localhost:19851/\"/>  \n    </audienceUris>  \n    <securityTokenHandlers>  \n      <add type=\"SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken\" />  \n    </securityTokenHandlers>  \n  </identityConfiguration>  \n</system.identityModel>  \n```"
  syntax:
    content: 'public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration'
  inheritance:
  - System.Object
  implements:
  - System.IdentityModel.Configuration.ICustomIdentityConfiguration
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: SecurityTokenHandler()
  nameWithType: SecurityTokenHandler.SecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.SecurityTokenHandler()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Chamado a partir de construtores em classes derivadas para inicializar o <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> classe."
  syntax:
    content: protected SecurityTokenHandler ();
    parameters: []
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  id: CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica que se o elemento XML referenciado pelo leitor de XML especificado √© uma cl√°usula do identificador da chave cuja serializa√ß√£o pode ser anulada por esta inst√¢ncia."
  remarks: "Devolve a implementa√ß√£o predefinida `false` para indicar que n√£o √© poss√≠vel ler a cl√°usula do identificador da chave.       Uma classe derivada verifica o elemento que o leitor faz refer√™ncia a para determinar se a inst√¢ncia pode anular a serializa√ß√£o de uma cl√°usula do identificador da chave. Isto √© normalmente conseguido atrav√©s de uma chamada para o <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName>m√©todo com cadeias adequadas de elemento e o espa√ßo de nomes especificado.</xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> Se substituir CanReadKeyIdentifierClause, tamb√©m tem de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>m√©todo para fornecer a l√≥gica para anular a serializa√ß√£o a cl√°usula do identificador da chave.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>"
  syntax:
    content: public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado o elemento de in√≠cio. O leitor n√£o deve ser avan√ßado atrav√©s deste m√©todo."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*>m√©todo pode ler o elemento; caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*> A predefini√ß√£o √© <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  id: CanReadToken(System.String)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(String)
  nameWithType: SecurityTokenHandler.CanReadToken(String)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica se a cadeia especificada pode ser anulada como um token do tipo processado por esta inst√¢ncia."
  remarks: "Devolve a implementa√ß√£o predefinida sempre `false`.       Se substituir este m√©todo, tamb√©m tem de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName>m√©todo para fornecer a l√≥gica para anular a serializa√ß√£o do token.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool CanReadToken (string tokenString);
    parameters:
    - id: tokenString
      type: System.String
      description: "A cadeia de token para ler."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o &lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt; m√©todo pode ler o elemento; caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefini√ß√£o √© <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica se o elemento XML referenciado pelo leitor de XML especificado pode ser lido como um token do tipo processado por esta inst√¢ncia."
  remarks: "Devolve a implementa√ß√£o predefinida sempre `false`.       Uma classe derivada verifica o elemento que o leitor faz refer√™ncia a para determinar se a inst√¢ncia pode anular a serializa√ß√£o de um token de seguran√ßa. Isto √© normalmente conseguido atrav√©s de uma chamada para o <xref:System.Xml.XmlReader.IsStartElement%2A>m√©todo com cadeias adequadas de elemento e o espa√ßo de nomes especificado.</xref:System.Xml.XmlReader.IsStartElement%2A> Se substituir <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, tamb√©m tem de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName>m√©todo ou <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName>m√©todo para fornecer a l√≥gica para anular a serializa√ß√£o a cl√°usula do identificador da chave.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>"
  example:
  - "The following code shows how to override the CanReadToken method to determine whether a token can be read by a handler. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#1](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#1)]"
  syntax:
    content: public virtual bool CanReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado no elemento de in√≠cio. O leitor n√£o deve ser avan√ßado atrav√©s deste m√©todo."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o &lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt; m√©todo pode ler o elemento; caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefini√ß√£o √© <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  id: CanValidateToken
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CanValidateToken
  nameWithType: SecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obt√©m um valor que indica se o processador suporta valida√ß√£o de tokens de seguran√ßa."
  remarks: "Para implementar a valida√ß√£o de uma classe derivada, ignorar esta propriedade para devolver `true` e substituir a <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>m√©todo para implementar a l√≥gica de valida√ß√£o.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>"
  example:
  - "The following code shows how to override the CanValidateToken property to indicate that a custom handler can validate tokens. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#2](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#2)]"
  syntax:
    content: public virtual bool CanValidateToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a classe √© capaz de validar os tokens de seguran√ßa caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefini√ß√£o √© <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica se a cl√°usula do identificador de chave especificado pode ser serializada por esta inst√¢ncia."
  remarks: "Devolve a implementa√ß√£o predefinida sempre `false`.       Se substituir CanWriteKeyIdentifierClause, tamb√©m tem de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>m√©todo para fornecer a l√≥gica a cl√°usula do identificador da chave de serializa√ß√£o.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>"
  syntax:
    content: public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);
    parameters:
    - id: securityKeyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A cl√°usula do identificador da chave a ser verificada."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a cl√°usula do identificador da chave pode ser serializada; caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefini√ß√£o √© <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CanWriteToken
  nameWithType: SecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obt√©m um valor que indica se o processador pode serializar tokens de seguran√ßa."
  remarks: "Para implementar a serializa√ß√£o de uma classe derivada, ignorar esta propriedade para devolver `true` e substituir a <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>m√©todos para implementar a l√≥gica de serializa√ß√£o.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>"
  example:
  - "The following code shows how to override the CanWriteToken property to indicate that a custom handler can serialize tokens. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#3](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#3)]"
  syntax:
    content: public virtual bool CanWriteToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a classe √© capaz de serializa√ß√£o tokens; caso contr√°rio <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefini√ß√£o √© <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  id: Configuration
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: Configuration
  nameWithType: SecurityTokenHandler.Configuration
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obt√©m ou define o <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&quot;> </xref> objeto que fornece a configura√ß√£o para a inst√¢ncia atual."
  remarks: "The Configuration property is typically set by the configuration infrastructure from the [\\&lt;securityTokenHandlerConfiguration\\&gt;](../Topic/%3CsecurityTokenHandlerConfiguration%3E.md) element in the configuration file during application start up.  \n  \n In derived classes, you use the Configuration property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> property of the configuration object."
  syntax:
    content: public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }
    return:
      type: System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
      description: "O objeto de configura√ß√£o para a inst√¢ncia atual."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  id: ContainingCollection
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: ContainingCollection
  nameWithType: SecurityTokenHandler.ContainingCollection
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obt√©m a cole√ß√£o de processador de token que cont√©m a inst√¢ncia atual."
  remarks: "Quando o processador de token √© adicionado a um <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection>inst√¢ncia, esta propriedade √© automaticamente definida.</xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection>"
  syntax:
    content: public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }
    return:
      type: System.IdentityModel.Tokens.SecurityTokenHandlerCollection
      description: "A cole√ß√£o de processador de token que cont√©m a inst√¢ncia atual."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  id: CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CreateSecurityTokenReference(SecurityToken,Boolean)
  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken,Boolean)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, cria a refer√™ncia de token de seguran√ßa para os tokens processados dessa classe. Normalmente, este m√©todo √© denominado por um servi√ßo de token de seguran√ßa (STS)."
  remarks: "Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Classes derivadas substituem este m√©todo para devolver uma cl√°usula do identificador da chave (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) que podem ser utilizados para criar um `<wsse:SecurityTokenReference>` elemento para o token especificado.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>       Chamado a partir de implementa√ß√µes da <xref:System.IdentityModel.SecurityTokenService>classe.</xref:System.IdentityModel.SecurityTokenService>       Normalmente, um <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>n√£o ser necess√°rio utilizar, diferente de quando √© criado um servi√ßo de token de seguran√ßa personalizada.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> Quando um servi√ßo de token de seguran√ßa devolve um token de seguran√ßa, o token de seguran√ßa emitido cont√©m refer√™ncias a tokens de seguran√ßa ligado e n√£o ligados. Consulte refer√™ncias anexadas tokens de seguran√ßa que s√£o contidos no cabe√ßalho de seguran√ßa de uma mensagem SOAP e refer√™ncias n√£o referenciam tokens de seguran√ßa que n√£o est√£o inclu√≠dos no cabe√ßalho de seguran√ßa de uma mensagem SOAP. Estas refer√™ncias afirma normalmente a autenticidade do token de seguran√ßa emitido."
  example:
  - "The following code shows how to override the CreateSecurityTokenReference method to create a key identifier clause from the specified token. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#5](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#5)]"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token para o qual a refer√™ncia est√° a ser criado."
    - id: attached
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>se deve ser criada uma refer√™ncia anexada; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se uma refer√™ncia deve ser criada."
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "Uma cl√°usula do identificador da chave que referencia o token especificado."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, cria um token de seguran√ßa utilizando o descritor de token especificado. Este m√©todo √© denominado por um servi√ßo de token de seguran√ßa (STS)."
  remarks: "Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Chamado a partir de implementa√ß√µes da <xref:System.IdentityModel.SecurityTokenService>classe.</xref:System.IdentityModel.SecurityTokenService>"
  example:
  - "The following code shows how to override the CreateToken method to create and return a token from a token descriptor. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#4](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#4)]"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
    parameters:
    - id: tokenDescriptor
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "O token descritor de seguran√ßa do que o token est√° a ser criado. Propriedades do descritor do token est√£o definidas antes deste m√©todo √© denominado."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "Um token de seguran√ßa que satisfa√ßa as propriedades do descritor do token."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  id: DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: DetectReplayedToken(SecurityToken)
  nameWithType: SecurityTokenHandler.DetectReplayedToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, emite uma exce√ß√£o se o token especificado √© detetado como a ser reproduzido."
  remarks: "The default implementation does nothing.  \n  \n Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.  \n  \n Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [\\&lt;tokenReplayCache\\&gt;](../Topic/%3CtokenReplayCache%3E.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the DetectReplayedToken method is up to the designer of the derived class."
  syntax:
    content: protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token para verificar a exist√™ncia de reprodu√ß√£o."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: GetTokenTypeIdentifiers()
  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, devolve o conjunto de URIs s√£o utilizados nos pedidos para identificar um token do tipo processado pela classe derivada."
  remarks: "O <xref:System.Type>do token processado pela inst√¢ncia atual √© acedida atrav√©s do <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>propriedade.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> </xref:System.Type> O m√©todo GetTokenTypeIdentifiers devolve o conjunto de identificadores aceit√°veis que podem ser utilizadas em mensagens referir-se para o tipo de token. Por exemplo, o valor URI utilizado no `<wst:TokenType>` elemento sob o `<wst:RequestSecurityToken>` elemento para um tipo espec√≠fico de token de pedido (representado pelo <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName>propriedade no modelo de objeto).</xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName>"
  example:
  - "The following code shows how to override the GetTokenTypeIdentifiers method to return the token type identifiers for a custom token. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#17](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#17)]  \n[!code-cs[WifRcCustomToken#6](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#6)]"
  syntax:
    content: public abstract string[] GetTokenTypeIdentifiers ();
    parameters: []
    return:
      type: System.String[]
      description: "O conjunto de URI que identifique o tipo de token que suporte este processador."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  id: LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, carrega a configura√ß√£o personalizada a partir de XML."
  remarks: "The LoadCustomConfiguration method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the token handler‚Äôs [\\&lt;add\\&gt;](../Topic/%3Cadd%3E.md) element from the configuration file. Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.  \n  \n The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your security token handler from a configuration file."
  syntax:
    content: public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);
    parameters:
    - id: nodelist
      type: System.Xml.XmlNodeList
      description: "Os elementos XML de configura√ß√£o. Cada n√≥ na lista √© do tipo <xref href=&quot;System.Xml.XmlElement&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  id: ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, deserializes XML referenciado pelo leitor de XML especificado para uma cl√°usula do identificador da chave que fa√ßa refer√™ncia a um token processado pela classe derivada."
  remarks: "Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Substitua este m√©todo para fornecer a l√≥gica para anular a serializa√ß√£o de uma cl√°usula do identificador da chave a partir de XML. Se substituir este m√©todo, tamb√©m deve de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName>m√©todo.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado o elemento de in√≠cio do XML ser serializa√ß√£o anulada para a cl√°usula do identificador da chave."
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A cl√°usula do identificador da chave que foi anulada a serializa√ß√£o de XML."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  id: ReadToken(System.String)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(String)
  nameWithType: SecurityTokenHandler.ReadToken(String)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, deserializes a cadeia especificada para um token do tipo processado pela classe derivada."
  remarks: "> [!IMPORTANT]> Chamar este m√©todo com dados n√£o fidedignos √© um risco de seguran√ßa. Chame este m√©todo apenas com dados fidedignos. Para obter mais informa√ß√µes, consulte [riscos de seguran√ßa de dados n√£o fidedignos](http://go.microsoft.com/fwlink/?LinkId=330378).       Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Este m√©todo para fornecer a funcionalidade que pode anular a serializa√ß√£o de um token de seguran√ßa de uma cadeia de substitui√ß√£o. Se substituir, este m√©todo, deve tamb√©m substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName>m√©todo.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);
    parameters:
    - id: tokenString
      type: System.String
      description: "A cadeia a poss√≠vel anular a serializa√ß√£o."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de seguran√ßa que foi anular a serializa√ß√£o da cadeia especificada."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, deserializes XML referenciado pelo leitor de XML especificado para um token do tipo processado pela classe derivada."
  remarks: "> [!IMPORTANT]> Chamar este m√©todo com dados n√£o fidedignos √© um risco de seguran√ßa. Chame este m√©todo apenas com dados fidedignos. Para obter mais informa√ß√µes, consulte [riscos de seguran√ßa de dados n√£o fidedignos](http://go.microsoft.com/fwlink/?LinkId=330378).       Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Substitua este m√©todo para fornecer a l√≥gica para anular a serializa√ß√£o de um token de seguran√ßa a partir de XML. Se substituir este m√©todo, tamb√©m deve de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName>m√©todo.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> Normalmente, em classes derivadas, se o m√©todo n√£o √© poss√≠vel anular a serializa√ß√£o do token a partir de XML referenciado,-emite um <xref:System.Xml.XmlException>.</xref:System.Xml.XmlException>"
  example:
  - "The following code shows how to override the ReadToken method to read a custom token from the specified XML reader. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#7](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#7)]  \n[!code-cs[WifRcCustomToken#8](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#8)]  \n[!code-cs[WifRcCustomToken#14](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#14)]"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado o elemento de in√≠cio do token."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de seguran√ßa que foi anulada a serializa√ß√£o de XML."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, deserializes XML referenciado pelo leitor de XML especificado para um token do tipo processado por classe derivada, utilizando a resolu√ß√£o de token especificada."
  remarks: "> [!IMPORTANT]> Chamar este m√©todo com dados n√£o fidedignos √© um risco de seguran√ßa. Chame este m√©todo apenas com dados fidedignos. Para obter mais informa√ß√µes, consulte [riscos de seguran√ßa de dados n√£o fidedignos](http://go.microsoft.com/fwlink/?LinkId=330378).       A implementa√ß√£o predefinida ignora a `tokenResolver` par√¢metro e delega a chamada para o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName>m√©todo.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName>       Substitua este m√©todo para fornecer a l√≥gica para anular a serializa√ß√£o de um token de seguran√ßa a partir de XML. Se substituir este m√©todo, tamb√©m deve de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName>m√©todo.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> Normalmente, em classes derivadas, se o m√©todo n√£o √© poss√≠vel anular a serializa√ß√£o do token a partir de XML referenciado,-emite um <xref:System.Xml.XmlException>.</xref:System.Xml.XmlException>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado o elemento de in√≠cio do token."
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "Resolu√ß√£o de token que cont√©m os tokens de fora de banda e em cache."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de seguran√ßa que foi anulada a serializa√ß√£o de XML."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  id: TokenType
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: TokenType
  nameWithType: SecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, obt√©m o tipo de token de seguran√ßa que √© processado por esta inst√¢ncia."
  remarks: "Tem de substituir esta propriedade em classes derivadas e devolver o <xref:System.Type>do token de seguran√ßa (<xref:System.IdentityModel.Tokens.SecurityToken>) que √© processada por classe derivada.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.Type>"
  example:
  - "The following code shows how to override the TokenType property to return the <xref:System.Type> of the security tokens that are processed by a custom handler. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#18](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#18)]"
  syntax:
    content: public abstract Type TokenType { get; }
    return:
      type: System.Type
      description: "O tipo de token de seguran√ßa que √© processado por esta inst√¢ncia."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  id: TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: TraceTokenValidationFailure(SecurityToken,String)
  nameWithType: SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken,String)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Analisa o evento de falha durante a valida√ß√£o de tokens de seguran√ßa quando o rastreio est√° ativado."
  remarks: "Este m√©todo deve ser chamado a partir de <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>m√©todo quando ocorre uma falha de valida√ß√£o do token.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>"
  syntax:
    content: protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de seguran√ßa que est√° a ser validado."
    - id: errorMessage
      type: System.String
      description: "A mensagem a escrever o rastreio."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  id: TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: TraceTokenValidationSuccess(SecurityToken)
  nameWithType: SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Analisa a valida√ß√£o com √™xito do evento de tokens de seguran√ßa quando o rastreio est√° ativado."
  remarks: "Este m√©todo deve ser chamado a partir de <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>m√©todo depois do token foi validado com √™xito.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>"
  syntax:
    content: protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token que foi validado."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SecurityToken)
  nameWithType: SecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, valida o token de seguran√ßa especificados. O token tem de ser do tipo processado pela classe derivada."
  remarks: "By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n The ValidateToken method is called by the infrastructure to validate and extract the claims from the deserialized security token. These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method. In the typical case, this collection will contain a single identity.  \n  \n In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. These URIs are typically set in the configuration file under the [\\&lt;audienceUris\\&gt;](../Topic/%3CaudienceUris%3E.md) element. If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.  \n  \n When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. The issuer name registry is typically configured through the [\\&lt;issuerNameRegistry\\&gt;](../Topic/%3CissuerNameRegistry%3E.md) element in the configuration file. The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer. This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName> property in claims contained in the token. If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`. In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class."
  example:
  - "The following code shows an override of the ValidateToken method for a security token handler that processes simple web tokens (SWT). The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#9](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#9)]  \n  \n The following code shows `CreateClaims` method that is invoked from the override of the ValidateToken method in the previous example. This method returns a <xref:System.Security.Claims.ClaimsIdentity> object that is created from the claims in the token. The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](../Topic/WIF%20Code%20Sample%20Index.md).  \n  \n [!code-cs[WifRcCustomToken#15](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#15)]  \n  \n The following code shows `ValidateSignature` method that is invoked from the override of the ValidateToken method in the simple web token handler. This method validates the signature on the token by using the configured <xref:System.IdentityModel.Tokens.IssuerTokenResolver>. The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](../Topic/WIF%20Code%20Sample%20Index.md).  \n  \n [!code-cs[WifRcCustomToken#12](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#12)]  \n[!code-cs[WifRcCustomToken#11](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#11)]  \n  \n The following code shows `ValidateAudience` method that is invoked from the override of the ValidateToken method in the simple web token handler. This method validates the audience contained in the token against the audience URIs that were specified in configuration. The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](../Topic/WIF%20Code%20Sample%20Index.md).  \n  \n [!code-cs[WifRcCustomToken#13](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#13)]"
  syntax:
    content: public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token para validar."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "As identidades contidas no token."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: WriteKeyIdentifierClause(XmlWriter,SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter,SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter,SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, serializa a cl√°usula do identificador de chave especificado em XML. A cl√°usula do identificador da chave tem de ser do tipo suportado pela classe derivada."
  remarks: "Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Substitua este m√©todo para fornecer a l√≥gica de serializa√ß√£o de uma cl√°usula do identificador da chave em XML. Se substituir este m√©todo, tamb√©m deve de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>m√©todo.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>"
  syntax:
    content: public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O escritor XML."
    - id: securityKeyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A cl√°usula do identificador da chave de serializa√ß√£o."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, serializa o token de seguran√ßa especificados para uma cadeia. O token tem de ser do tipo processado pela classe derivada."
  remarks: "Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Substitua este m√©todo para fornecer a l√≥gica de serializa√ß√£o de um token de seguran√ßa para XML. Se substituir este m√©todo, tamb√©m deve de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>propriedade.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>"
  syntax:
    content: public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de serializa√ß√£o."
    return:
      type: System.String
      description: "O token serializado."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substitu√≠-lo de uma classe derivada, serializa o token de seguran√ßa especificados para XML. O token tem de ser do tipo processado pela classe derivada."
  remarks: "Por predefini√ß√£o este m√©todo emite um <xref:System.NotImplementedException>exce√ß√£o.</xref:System.NotImplementedException>       Substitua este m√©todo para fornecer a l√≥gica de serializa√ß√£o de um token de seguran√ßa para XML. Se substituir este m√©todo, tamb√©m deve de substituir o <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>propriedade.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>"
  example:
  - "The following code shows how to override the WriteToken method to serialize a custom token. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WifRcCustomToken#10](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#10)]  \n[!code-cs[WifRcCustomToken#11](~/add/codesnippet/csharp/wifrccustomtoken.simplewebtoken/simplewebtokenhandler.cs#11)]"
  syntax:
    content: public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O escritor XML."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de serializa√ß√£o."
  overload: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: SecurityTokenHandler()
  nameWithType: SecurityTokenHandler.SecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.SecurityTokenHandler()
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanReadToken(String)
  nameWithType: SecurityTokenHandler.CanReadToken(String)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: Configuration
  nameWithType: SecurityTokenHandler.Configuration
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
- uid: System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenHandlerConfiguration
  nameWithType: SecurityTokenHandlerConfiguration
  fullName: System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ContainingCollection
  nameWithType: SecurityTokenHandler.ContainingCollection
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
- uid: System.IdentityModel.Tokens.SecurityTokenHandlerCollection
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenHandlerCollection
  nameWithType: SecurityTokenHandlerCollection
  fullName: System.IdentityModel.Tokens.SecurityTokenHandlerCollection
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CreateSecurityTokenReference(SecurityToken,Boolean)
  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken,Boolean)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken,Boolean)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: DetectReplayedToken(SecurityToken)
  nameWithType: SecurityTokenHandler.DetectReplayedToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(SecurityToken)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers()
  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ReadToken(String)
  nameWithType: SecurityTokenHandler.ReadToken(String)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(String)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: TraceTokenValidationFailure(SecurityToken,String)
  nameWithType: SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken,String)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken,String)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: TraceTokenValidationSuccess(SecurityToken)
  nameWithType: SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ValidateToken(SecurityToken)
  nameWithType: SecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(SecurityToken)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: WriteKeyIdentifierClause(XmlWriter,SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter,SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter,SecurityKeyIdentifierClause)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: WriteToken(SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(SecurityToken)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler.SecurityTokenHandler
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanReadKeyIdentifierClause
  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanReadToken
  nameWithType: SecurityTokenHandler.CanReadToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanWriteKeyIdentifierClause
  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: Configuration
  nameWithType: SecurityTokenHandler.Configuration
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ContainingCollection
  nameWithType: SecurityTokenHandler.ContainingCollection
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CreateSecurityTokenReference
  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: CreateToken
  nameWithType: SecurityTokenHandler.CreateToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: DetectReplayedToken
  nameWithType: SecurityTokenHandler.DetectReplayedToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers
  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration
  nameWithType: SecurityTokenHandler.LoadCustomConfiguration
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ReadKeyIdentifierClause
  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ReadToken
  nameWithType: SecurityTokenHandler.ReadToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SecurityTokenHandler.TokenType
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: TraceTokenValidationFailure
  nameWithType: SecurityTokenHandler.TraceTokenValidationFailure
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: TraceTokenValidationSuccess
  nameWithType: SecurityTokenHandler.TraceTokenValidationSuccess
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: ValidateToken
  nameWithType: SecurityTokenHandler.ValidateToken
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: WriteKeyIdentifierClause
  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*
  parent: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: WriteToken
  nameWithType: SecurityTokenHandler.WriteToken
