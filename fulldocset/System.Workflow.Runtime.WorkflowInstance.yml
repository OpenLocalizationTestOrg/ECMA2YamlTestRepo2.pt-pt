### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Workflow.Runtime.WorkflowInstance.Abort
  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  - System.Workflow.Runtime.WorkflowInstance.GetHashCode
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  - System.Workflow.Runtime.WorkflowInstance.InstanceId
  - System.Workflow.Runtime.WorkflowInstance.Load
  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  - System.Workflow.Runtime.WorkflowInstance.Resume
  - System.Workflow.Runtime.WorkflowInstance.Start
  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  - System.Workflow.Runtime.WorkflowInstance.TryUnload
  - System.Workflow.Runtime.WorkflowInstance.Unload
  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Workflow.Runtime.WorkflowInstance
  type: Class
  summary: "Represents a workflow instance."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The WorkflowInstance class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the WorkflowInstance class.  If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.      > [!NOTE] >  If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName> method."
  example:
  - "The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The WorkflowInstance is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  id: Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Aborts the workflow instance."
  remarks: "The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted. The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away. After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event. You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.       `Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point."
  example:
  - "The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \n  \n [!code-cs[WF_Samples#13](~/add/codesnippet/csharp/wf_snippets/snippets.cs#13)]\n [!code-vb[WF_Samples#13](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#13)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Applies changes to the workflow instance specified by the <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;></xref> object."
  remarks: "If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes."
  example:
  - "The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#89](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#89)]\n [!code-vb[WF_Samples#89](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#89)]"
  syntax:
    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "A <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;></xref> specifying dynamic updates for the workflow instance."
  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Posts a message to the specified workflow queue synchronously."
  remarks: "Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to EnqueueItem. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.       When using this method with a state machine workflow, you might get an exception with the message &quot;Queue &quot;{0}&quot; is not enabled.&quot; This happens when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue &quot;{0}&quot;.      > [!NOTE] >  Messages are not guaranteed to be received by the workflow instance in the order that they were sent. For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet. To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)"
  example:
  - "The following code example demonstrates how to use EnqueueItem. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "The name of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
    - id: item
      type: System.Object
      description: "The object to enqueue."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "An <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;></xref> that allows the sender to be notified when `item` is delivered."
    - id: workItem
      type: System.Object
      description: "An object to be passed to the <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;></xref> methods."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running.       -or-       The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> specified by <code>queueName</code> does not exist.       -or-       The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> specified by <code>queueName</code> is not enabled."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Posts a message to the specified workflow queue when the workflow is idle. EnqueueItemOnIdle waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed)."
  remarks: "Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you call EnqueueItemOnIdle while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.       When you are using this method with a state machine workflow, you might get an exception that contains the message &quot;Queue &quot;{0}&quot; is not enabled.&quot; This occurs when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue &quot;{0}&quot;."
  example:
  - "The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \n  \n [!code-cs[WF_Samples#12](~/add/codesnippet/csharp/wf_snippets/snippets.cs#12)]\n [!code-vb[WF_Samples#12](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#12)]"
  syntax:
    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "The name of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>."
    - id: item
      type: System.Object
      description: "The object to enqueue."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "An <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;></xref> that allows the sender to be notified when `item` is delivered."
    - id: workItem
      type: System.Object
      description: "An object to be passed to the <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;></xref> methods."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code> is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running.       -or-       The workflow instance is suspended.       -or-       The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> specified by <code>queueName</code> does not exist.       -or-       The <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> specified by <code>queueName</code> is not enabled."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Returns a value that indicates whether the specified object is equal to the <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>."
  remarks: "The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified object is equal to this <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  id: GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Returns the hash code for this workflow instance."
  remarks: "GetHashCode returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "The hash code for this <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  id: GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Retrieves the root activity for this workflow instance."
  remarks: "You can use the root activity to navigate the activity hierarchy of the workflow.       This method is not thread safe, so the host should synchronize its calls to this method."
  example:
  - "The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#86](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#86)]\n [!code-vb[WF_Samples#86](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#86)]"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();
    parameters: []
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "An <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref> object."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  id: GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Returns the next point in time that this <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref> is scheduled to be delivered a timer message."
  remarks: ''
  example:
  - "The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \n  \n [!code-cs[WF_Samples#284](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#284)]\n [!code-vb[WF_Samples#284](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#284)]"
  syntax:
    content: public DateTime GetWorkflowNextTimerExpiration ();
    parameters: []
    return:
      type: System.DateTime
      description: "A DateTime value that represents the next <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*> time this <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref> will be delivered a timer message."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  id: GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets a collection of <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;></xref> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance."
  remarks: "GetWorkflowQueueData returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>."
  example:
  - "The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;></xref> objects."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  id: InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets the unique identifier for the workflow instance."
  remarks: "You can use InstanceId to reference the workflow instance."
  example:
  - "The following code example demonstrates how you can use the InstanceId property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \n  \n [!code-cs[WF_Samples#210](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#210)]\n [!code-vb[WF_Samples#210](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#210)]  \n  \n The second snippet uses the InstanceId property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \n  \n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \n  \n [!code-cs[WF_Samples#211](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#211)]\n [!code-vb[WF_Samples#211](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#211)]"
  syntax:
    content: public Guid InstanceId { get; }
    return:
      type: System.Guid
      description: "The <xref:System.Guid> of the workflow instance."
  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  id: Load
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Loads a previously unloaded workflow instance."
  remarks: "Load is synchronous; if the workflow instance can be loaded, Load will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance."
  example:
  - "The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#10](~/add/codesnippet/csharp/wf_snippets/snippets.cs#10)]\n [!code-vb[WF_Samples#10](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#10)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Load*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  id: ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Reload the tracking profiles for this workflow instance."
  remarks: "The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels. If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded."
  syntax:
    content: public void ReloadTrackingProfiles ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  id: Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Resumes execution of a previously suspended workflow instance."
  remarks: "The host can call Resume to resume execution of a workflow instance that has been previously suspended. If the workflow instance is not in the suspended state, no action is taken. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed."
  example:
  - "The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \n  \n [!code-cs[WF_Samples#172](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#172)]\n [!code-vb[WF_Samples#172](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#172)]"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Resume*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  id: Start
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Starts the execution of the workflow instance."
  remarks: "Start calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance. If Start encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination."
  example:
  - "The following code example demonstrates how you can use the Start method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the Start method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running.       -or-       The workflow instance has already been started."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  id: Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Suspends the workflow instance."
  remarks: "The workflow instance is suspended in a synchronous manner. If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.      > [!NOTE] >  Suspend does not unload the workflow instance."
  example:
  - "The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#9](~/add/codesnippet/csharp/wf_snippets/snippets.cs#9)]\n [!code-vb[WF_Samples#9](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#9)]"
  syntax:
    content: public void Suspend (string error);
    parameters:
    - id: error
      type: System.String
      description: "A description of the reason for suspending the workflow instance."
  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  id: Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Terminates the workflow instance in a synchronous manner."
  remarks: "The workflow instance is terminated in a synchronous manner. The host calls Terminate to terminate the workflow instance. The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.       After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.       `Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point."
  example:
  - "The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#8](~/add/codesnippet/csharp/wf_snippets/snippets.cs#8)]\n [!code-vb[WF_Samples#8](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#8)]"
  syntax:
    content: public void Terminate (string error);
    parameters:
    - id: error
      type: System.String
      description: "A description of the reason for terminating the workflow instance."
  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The workflow runtime engine is not running."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  id: TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle."
  remarks: "If the workflow instance is idle or suspended, TryUnload uses the persistence service to remove the workflow instance from memory and persist it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, TryUnload throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`. <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.       The host can use TryUnload to reclaim system resources from an idle workflow."
  example:
  - "The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \n  \n [!code-cs[WF_Samples#280](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#280)]\n [!code-vb[WF_Samples#280](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#280)]"
  syntax:
    content: public bool TryUnload ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the workflow instance was unloaded; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is no persistence service registered with the workflow runtime engine."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  id: Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope."
  remarks: "Unload is synchronous; that is, it returns after completing any action that it performs. If the workflow instance is not idle, the runtime waits until the instance can be interrupted. An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method. However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted. Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, Unload throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.       The host can use Unload to reclaim system resources from an idle workflow."
  example:
  - "The following example demonstrates calling Unload on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#11](~/add/codesnippet/csharp/wf_snippets/snippets.cs#11)]\n [!code-vb[WF_Samples#11](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#11)]"
  syntax:
    content: public void Unload ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Unload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is no persistence service registered with the workflow runtime engine."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  id: WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Gets the <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;></xref> for this workflow instance."
  remarks: ''
  example:
  - "The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#7](~/add/codesnippet/csharp/wf_snippets/snippets.cs#7)]\n [!code-vb[WF_Samples#7](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#7)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "A <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;></xref> that represents the execution environment in which this workflow instance is running."
  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.IPendingWork
  parent: System.Workflow.Runtime
  isExternal: false
  name: IPendingWork
  nameWithType: IPendingWork
  fullName: System.Workflow.Runtime.IPendingWork
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<WorkflowQueueInfo>
  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Runtime.WorkflowQueueInfo
    name: WorkflowQueueInfo
    nameWithType: WorkflowQueueInfo
    fullName: WorkflowQueueInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowInstance.Abort*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort
  nameWithType: WorkflowInstance.Abort
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: WorkflowInstance.ApplyWorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem
  nameWithType: WorkflowInstance.EnqueueItem
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle
  nameWithType: WorkflowInstance.EnqueueItemOnIdle
- uid: System.Workflow.Runtime.WorkflowInstance.Equals*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals
  nameWithType: WorkflowInstance.Equals
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode
  nameWithType: WorkflowInstance.GetHashCode
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition
  nameWithType: WorkflowInstance.GetWorkflowDefinition
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData
  nameWithType: WorkflowInstance.GetWorkflowQueueData
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
- uid: System.Workflow.Runtime.WorkflowInstance.Load*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load
  nameWithType: WorkflowInstance.Load
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles
  nameWithType: WorkflowInstance.ReloadTrackingProfiles
- uid: System.Workflow.Runtime.WorkflowInstance.Resume*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume
  nameWithType: WorkflowInstance.Resume
- uid: System.Workflow.Runtime.WorkflowInstance.Start*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start
  nameWithType: WorkflowInstance.Start
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend
  nameWithType: WorkflowInstance.Suspend
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate
  nameWithType: WorkflowInstance.Terminate
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload
  nameWithType: WorkflowInstance.TryUnload
- uid: System.Workflow.Runtime.WorkflowInstance.Unload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload
  nameWithType: WorkflowInstance.Unload
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
