### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.IValueConverter
  id: IValueConverter
  children:
  - System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  - System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  langs:
  - csharp
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
  type: Interface
  summary: "Provides a way to apply custom logic to a binding."
  remarks: "If you want to associate a value converter with a binding, create a class that implements the IValueConverter interface and then implement the <xref:System.Windows.Data.IValueConverter.Convert%2A> and <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> methods. Converters can change data from one type to another, translate data based on cultural information, or modify other aspects of the presentation. For examples of some typical converter scenarios, see &quot;Data Conversion&quot; in [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).       Value converters are culture-aware. Both the <xref:System.Windows.Data.IValueConverter.Convert%2A> and <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> methods have a `culture` parameter that indicates the cultural information. If cultural information is irrelevant to the conversion, then you can ignore that parameter in your custom converter.       The <xref:System.Windows.Data.IValueConverter.Convert%2A> and <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> methods also have a parameter called `parameter` so that you can use the same instance of the converter with different parameters. For example, you can write a formatting converter that produces different formats of data based on the input parameter that you use. You can use the <xref:System.Windows.Data.Binding.ConverterParameter%2A> of the <xref:System.Windows.Data.Binding> class to pass a parameter as an argument into the <xref:System.Windows.Data.IValueConverter.Convert%2A> and <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> methods."
  syntax:
    content: public interface IValueConverter
  implements: []
  platform:
  - net462
- uid: System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  id: Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IValueConverter
  langs:
  - csharp
  name: Convert(Object,Type,Object,CultureInfo)
  nameWithType: IValueConverter.Convert(Object,Type,Object,CultureInfo)
  fullName: System.Windows.Data.IValueConverter.Convert(Object,Type,Object,CultureInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Converts a value."
  remarks: "The data binding engine calls this method when it propagates a value from the binding source to the binding target.       The data binding engine does not catch exceptions that are thrown by a user-supplied converter. Any exception that is thrown by the Convert method, or any uncaught exceptions that are thrown by methods that the Convert method calls, are treated as run-time errors. Handle anticipated problems by returning <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>.       A return value of <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> indicates that the converter produced no value and that the binding uses the <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, if available, or the default value instead.       A return value of <xref:System.Windows.Data.Binding.DoNothing?displayProperty=fullName> indicates that the binding does not transfer the value or use the <xref:System.Windows.Data.BindingBase.FallbackValue%2A> or default value."
  syntax:
    content: public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "The value produced by the binding source."
    - id: targetType
      type: System.Type
      description: "The type of the binding target property."
    - id: parameter
      type: System.Object
      description: "The converter parameter to use."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The culture to use in the converter."
    return:
      type: System.Object
      description: "A converted value. If the method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the valid null value is used."
  overload: System.Windows.Data.IValueConverter.Convert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  id: ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IValueConverter
  langs:
  - csharp
  name: ConvertBack(Object,Type,Object,CultureInfo)
  nameWithType: IValueConverter.ConvertBack(Object,Type,Object,CultureInfo)
  fullName: System.Windows.Data.IValueConverter.ConvertBack(Object,Type,Object,CultureInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Converts a value."
  remarks: "The data binding engine calls this method when it propagates a value from the binding target to the binding source.       The implementation of this method must be the inverse of the <xref:System.Windows.Data.IValueConverter.Convert%2A> method.       The data binding engine does not catch exceptions that are thrown by a user-supplied converter. Any exception that is thrown by the ConvertBack method, or any uncaught exceptions that are thrown by methods that the ConvertBack method calls, are treated as run-time errors. Handle anticipated problems by returning <xref:System.Windows.DependencyProperty>.<xref:System.Windows.DependencyProperty.UnsetValue>.       A return value of <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> indicates that the converter produced no value and that the binding uses the <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, if available, or the default value instead.       A return value of <xref:System.Windows.Data.Binding.DoNothing?displayProperty=fullName> indicates that the binding does not transfer the value or use the <xref:System.Windows.Data.BindingBase.FallbackValue%2A> or default value."
  syntax:
    content: public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "The value that is produced by the binding target."
    - id: targetType
      type: System.Type
      description: "The type to convert to."
    - id: parameter
      type: System.Object
      description: "The converter parameter to use."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The culture to use in the converter."
    return:
      type: System.Object
      description: "A converted value. If the method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the valid null value is used."
  overload: System.Windows.Data.IValueConverter.ConvertBack*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IValueConverter
  isExternal: false
  name: Convert(Object,Type,Object,CultureInfo)
  nameWithType: IValueConverter.Convert(Object,Type,Object,CultureInfo)
  fullName: System.Windows.Data.IValueConverter.Convert(Object,Type,Object,CultureInfo)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IValueConverter
  isExternal: false
  name: ConvertBack(Object,Type,Object,CultureInfo)
  nameWithType: IValueConverter.ConvertBack(Object,Type,Object,CultureInfo)
  fullName: System.Windows.Data.IValueConverter.ConvertBack(Object,Type,Object,CultureInfo)
- uid: System.Windows.Data.IValueConverter.Convert*
  parent: System.Windows.Data.IValueConverter
  isExternal: false
  name: Convert
  nameWithType: IValueConverter.Convert
- uid: System.Windows.Data.IValueConverter.ConvertBack*
  parent: System.Windows.Data.IValueConverter
  isExternal: false
  name: ConvertBack
  nameWithType: IValueConverter.ConvertBack
