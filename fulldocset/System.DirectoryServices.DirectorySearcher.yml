### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectorySearcher
  id: DirectorySearcher
  children:
  - System.DirectoryServices.DirectorySearcher.#ctor
  - System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectorySearcher.#ctor(System.String)
  - System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[])
  - System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[])
  - System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[],System.DirectoryServices.SearchScope)
  - System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[],System.DirectoryServices.SearchScope)
  - System.DirectoryServices.DirectorySearcher.Asynchronous
  - System.DirectoryServices.DirectorySearcher.AttributeScopeQuery
  - System.DirectoryServices.DirectorySearcher.CacheResults
  - System.DirectoryServices.DirectorySearcher.ClientTimeout
  - System.DirectoryServices.DirectorySearcher.DerefAlias
  - System.DirectoryServices.DirectorySearcher.DirectorySynchronization
  - System.DirectoryServices.DirectorySearcher.Dispose(System.Boolean)
  - System.DirectoryServices.DirectorySearcher.ExtendedDN
  - System.DirectoryServices.DirectorySearcher.Filter
  - System.DirectoryServices.DirectorySearcher.FindAll
  - System.DirectoryServices.DirectorySearcher.FindOne
  - System.DirectoryServices.DirectorySearcher.PageSize
  - System.DirectoryServices.DirectorySearcher.PropertiesToLoad
  - System.DirectoryServices.DirectorySearcher.PropertyNamesOnly
  - System.DirectoryServices.DirectorySearcher.ReferralChasing
  - System.DirectoryServices.DirectorySearcher.SearchRoot
  - System.DirectoryServices.DirectorySearcher.SearchScope
  - System.DirectoryServices.DirectorySearcher.SecurityMasks
  - System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit
  - System.DirectoryServices.DirectorySearcher.ServerTimeLimit
  - System.DirectoryServices.DirectorySearcher.SizeLimit
  - System.DirectoryServices.DirectorySearcher.Sort
  - System.DirectoryServices.DirectorySearcher.Tombstone
  - System.DirectoryServices.DirectorySearcher.VirtualListView
  langs:
  - csharp
  name: DirectorySearcher
  nameWithType: DirectorySearcher
  fullName: System.DirectoryServices.DirectorySearcher
  type: Class
  summary: "Performs queries against Active Directory Domain Services."
  remarks: "Use a DirectorySearcher object to search and perform queries against an Active Directory Domain Services hierarchy using Lightweight Directory Access Protocol (LDAP). LDAP is the only system-supplied Active Directory Service Interfaces (ADSI) provider that supports directory searching. An administrator can make, alter, and delete objects that are found in the hierarchy. For more information, see [Using System.DirectoryServices](http://msdn.microsoft.com/en-us/ffa2f003-3a9a-4e2a-815e-825c8ddd7949).       When you create an instance of DirectorySearcher, you specify the root you want to retrieve, and an optional list of properties to retrieve. The <xref:System.DirectoryServices.DirectorySearcher.SearchRoot%2A> property enables you to set additional properties to do the following tasks:      -   Cache the search results on the local computer. Set the <xref:System.DirectoryServices.DirectorySearcher.CacheResults%2A> property to `true` to store directory information on the local computer. Updates are made to this local cache and committed to Active Directory Domain Services only when the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A?displayProperty=fullName> method is called.      -   Specify the length of time to search, using the  <xref:System.DirectoryServices.DirectorySearcher.ServerTimeLimit%2A> property.      -   Retrieve attribute names only. Set the <xref:System.DirectoryServices.DirectorySearcher.PropertyNamesOnly%2A> property to `true` to retrieve only the names of attributes to which values have been assigned.      -   Perform a paged search. Set the <xref:System.DirectoryServices.DirectorySearcher.PageSize%2A> property to specify the maximum number of objects that are returned in a paged search. If you do not want to perform a paged search, set the <xref:System.DirectoryServices.DirectorySearcher.PageSize%2A> property to its default of zero.      -   Specify the maximum number of entries to return, using the <xref:System.DirectoryServices.DirectorySearcher.SizeLimit%2A> property. If you set the <xref:System.DirectoryServices.DirectorySearcher.SizeLimit%2A> property to its default of zero, the server-determined default is 1000 entries.      > [!NOTE] >  If the maximum number of returned entries and time limits exceed the limitations that are set on the server, the server settings override the component settings.       For a list of initial property values for an instance of the DirectorySearcher class, see the <xref:System.DirectoryServices.DirectorySearcher.%23ctor> constructor.      > [!NOTE] >  It is assumed that you have a general understanding of Active Directory Domain Services before using this class. For more information, see the <xref:System.DirectoryServices?displayProperty=fullName> overview."
  syntax:
    content: >-
      [System.DirectoryServices.DSDescription("DirectorySearcherDesc")]

      public class DirectorySearcher : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor
  id: '#ctor'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher()
  nameWithType: DirectorySearcher.DirectorySearcher()
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher()
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with default values."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.SearchRoot%2A>|A null reference (`Nothing` in Visual Basic)|   |<xref:System.DirectoryServices.DirectorySearcher.Filter%2A>|&quot;(objectClass=*)&quot;|   |<xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A>|An empty <xref:System.Collections.Specialized.StringCollection> object|   |<xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A>|<xref:System.DirectoryServices.SearchScope>|"
  syntax:
    content: public DirectorySearcher ();
    parameters: []
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry)
  id: '#ctor(System.DirectoryServices.DirectoryEntry)'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(DirectoryEntry)
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class using the specified search root."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.Filter%2A>|&quot;(objectClass=*)&quot;|   |<xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A>|An empty <xref:System.Collections.Specialized.StringCollection> object|   |<xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A>|<xref:System.DirectoryServices.SearchScope>|"
  syntax:
    content: public DirectorySearcher (System.DirectoryServices.DirectoryEntry searchRoot);
    parameters:
    - id: searchRoot
      type: System.DirectoryServices.DirectoryEntry
      description: "The node in the Active Directory Domain Services hierarchy where the search starts. The <xref:System.DirectoryServices.DirectorySearcher.SearchRoot*> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(String)
  nameWithType: DirectorySearcher.DirectorySearcher(String)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with the specified search filter."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.SearchRoot%2A>|A null reference (`Nothing` in Visual Basic)|   |<xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A>|An empty <xref:System.Collections.Specialized.StringCollection> object|   |<xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A>|<xref:System.DirectoryServices.SearchScope>|"
  syntax:
    content: public DirectorySearcher (string filter);
    parameters:
    - id: filter
      type: System.String
      description: "The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <xref:System.DirectoryServices.DirectorySearcher.Filter*> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String)
  id: '#ctor(System.DirectoryServices.DirectoryEntry,System.String)'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(DirectoryEntry,String)
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry,String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with the specified search root and search filter."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A>|An empty <xref:System.Collections.Specialized.StringCollection> object.|   |<xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A>|<xref:System.DirectoryServices.SearchScope>|"
  syntax:
    content: public DirectorySearcher (System.DirectoryServices.DirectoryEntry searchRoot, string filter);
    parameters:
    - id: searchRoot
      type: System.DirectoryServices.DirectoryEntry
      description: "The node in the Active Directory Domain Services hierarchy where the search starts. The <xref:System.DirectoryServices.DirectorySearcher.SearchRoot*> property is initialized to this value."
    - id: filter
      type: System.String
      description: "The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <xref:System.DirectoryServices.DirectorySearcher.Filter*> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(String,String[])
  nameWithType: DirectorySearcher.DirectorySearcher(String,String[])
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(String,String[])
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with the specified search filter and properties to retrieve."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.SearchRoot%2A>|A null reference (`Nothing` in Visual Basic)|   |<xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A>|<xref:System.DirectoryServices.SearchScope>|"
  syntax:
    content: public DirectorySearcher (string filter, string[] propertiesToLoad);
    parameters:
    - id: filter
      type: System.String
      description: "The search filter string in Lightweight Directory Access Protocol (LDAP) format. The  <xref:System.DirectoryServices.DirectorySearcher.Filter*> property is initialized to this value."
    - id: propertiesToLoad
      type: System.String[]
      description: "The set of properties to retrieve during the search. The <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[])
  id: '#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[])'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(DirectoryEntry,String,String[])
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[])
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[])
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with the specified search root, search filter, and properties to retrieve.."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A>|<xref:System.DirectoryServices.SearchScope>|"
  syntax:
    content: public DirectorySearcher (System.DirectoryServices.DirectoryEntry searchRoot, string filter, string[] propertiesToLoad);
    parameters:
    - id: searchRoot
      type: System.DirectoryServices.DirectoryEntry
      description: "The node in the Active Directory Domain Services hierarchy where the search starts. The <xref:System.DirectoryServices.DirectorySearcher.SearchRoot*> property is initialized to this value."
    - id: filter
      type: System.String
      description: "The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <xref:System.DirectoryServices.DirectorySearcher.Filter*> property is initialized to this value."
    - id: propertiesToLoad
      type: System.String[]
      description: "The set of properties that are retrieved during the search. The <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[],System.DirectoryServices.SearchScope)
  id: '#ctor(System.String,System.String[],System.DirectoryServices.SearchScope)'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(String,String[],SearchScope)
  nameWithType: DirectorySearcher.DirectorySearcher(String,String[],SearchScope)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(String,String[],SearchScope)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with the specified search filter, properties to retrieve, and search scope."
  remarks: "The following table shows the initial property values of the <xref:System.DirectoryServices.DirectorySearcher> object.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.DirectoryServices.DirectorySearcher.SearchRoot%2A>|A null reference (`Nothing` in Visual Basic)|"
  syntax:
    content: public DirectorySearcher (string filter, string[] propertiesToLoad, System.DirectoryServices.SearchScope scope);
    parameters:
    - id: filter
      type: System.String
      description: "The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <xref:System.DirectoryServices.DirectorySearcher.Filter*> property is initialized to this value."
    - id: propertiesToLoad
      type: System.String[]
      description: "The set of properties to retrieve during the search. The <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property is initialized to this value."
    - id: scope
      type: System.DirectoryServices.SearchScope
      description: "The scope of the search that is observed by the server. The <xref href=&quot;System.DirectoryServices.SearchScope&quot;></xref> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[],System.DirectoryServices.SearchScope)
  id: '#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[],System.DirectoryServices.SearchScope)'
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySearcher(DirectoryEntry,String,String[],SearchScope)
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[],SearchScope)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[],SearchScope)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Initializes a new instance of the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> class with the specified search root, search filter, properties to retrieve, and search scope."
  syntax:
    content: public DirectorySearcher (System.DirectoryServices.DirectoryEntry searchRoot, string filter, string[] propertiesToLoad, System.DirectoryServices.SearchScope scope);
    parameters:
    - id: searchRoot
      type: System.DirectoryServices.DirectoryEntry
      description: "The node in the Active Directory Domain Services hierarchy where the search starts. The <xref:System.DirectoryServices.DirectorySearcher.SearchRoot*> property is initialized to this value."
    - id: filter
      type: System.String
      description: "The search filter string in Lightweight Directory Access Protocol (LDAP) format. The <xref:System.DirectoryServices.DirectorySearcher.Filter*> property is initialized to this value."
    - id: propertiesToLoad
      type: System.String[]
      description: "The set of properties to retrieve during the search. The <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property is initialized to this value."
    - id: scope
      type: System.DirectoryServices.SearchScope
      description: "The scope of the search that is observed by the server. The <xref href=&quot;System.DirectoryServices.SearchScope&quot;></xref> property is initialized to this value."
  overload: System.DirectoryServices.DirectorySearcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.Asynchronous
  id: Asynchronous
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: Asynchronous
  nameWithType: DirectorySearcher.Asynchronous
  fullName: System.DirectoryServices.DirectorySearcher.Asynchronous
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value that indicates if the search is performed asynchronously."
  remarks: "An asynchronous search can show results as they are found while simultaneously searching for additional results. This is useful for tasks such as populating list boxes.       The default setting for this property is `false`."
  example:
  - "The following C# example shows how to create an asynchronous search.  \n  \n```c#  \nusing System.DirectoryServices;  \n...  \n// Bind to the users container.  \nDirectoryEntry entry = new DirectoryEntry(\"LDAP://CN=users,DC=fabrikam,DC=com\");  \n// Create a DirectorySearcher object.  \nDirectorySearcher mySearcher = new DirectorySearcher(entry);  \n//Set the Asynchronous property to true.  \nsrc.Asynchronous = true;  \n//Use the FindAll method to get search results.  \nSearchResultCollection res = src.FindAll();  \n  \n```"
  syntax:
    content: public bool Asynchronous { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the search is asynchronous; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> otherwise."
  overload: System.DirectoryServices.DirectorySearcher.Asynchronous*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.AttributeScopeQuery
  id: AttributeScopeQuery
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: AttributeScopeQuery
  nameWithType: DirectorySearcher.AttributeScopeQuery
  fullName: System.DirectoryServices.DirectorySearcher.AttributeScopeQuery
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets the LDAP display name of the distinguished name attribute to search in. Only one attribute can be used for this type of search."
  remarks: "The attribute that this property is set to must be a distinguished name attribute, such as member or managedBy. The attribute can be either single or multi-valued. For more information, see the adschema topics &quot;[Member](http://msdn.microsoft.com/library/default.asp?url=/library/en-us/adschema/adschema/a_member.asp)&quot; and &quot;[Managed-By](http://msdn.microsoft.com/library/default.asp?url=/library/en-us/adschema/adschema/a_managedby.asp)&quot; in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       The search is performed against the objects that are identified by the distinguished name that is specified in the attribute of the base object. For example, if the base object is an adschema group class and the AttributeScopeQuery is set to &quot;member,&quot; then the search will be performed against all objects that are members of the group. For more information, see the adschema &quot;Group&quot; class topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       When the AttributeScopeQuery property is used, the <xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A> property must be set to <xref:System.DirectoryServices.SearchScope>. If the <xref:System.DirectoryServices.DirectorySearcher.SearchScope%2A> property is set to any other value, setting the AttributeScopeQuery property will throw an <xref:System.ArgumentException>.       For more information, see the &quot;Performing an Attribute Scope Query&quot; topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library))."
  example:
  - "The following example shows how to use the AttributeScopeQuery property with the member attribute to get the members of a group. It then prints out the first and last names of the members and their telephone numbers.  \n  \n```c#  \nusing System.DirectoryServices;  \nDirectoryEntry group = new DirectoryEntry(\"LDAP://CN=MyGroup, …\");  \nDirectorySearcher src = new DirectorySearcher(group \"(&(objectClass=user)(objectCategory=Person))\");  \nsrc.AttributeScopedQuery = \"member\";  \nsrc.PropertiesToLoad.Add(\"sn\");  \nsrc.PropertiesToLoad.Add(\"givenName\");  \nsrc.PropertiesToLoad.Add(\"telephoneNumber\");  \nforeach(SearchResult res in src.FindAll())  \n{  \n    Console.WriteLine(\"…\");  \n}  \n```"
  syntax:
    content: public string AttributeScopeQuery { get; set; }
    return:
      type: System.String
      description: "The LDAP display name of the attribute to perform the search against, or an empty string of no attribute scope query is set."
  overload: System.DirectoryServices.DirectorySearcher.AttributeScopeQuery*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.DirectoryServices.DirectorySearcher.SearchScope*> property is set to a value other than <xref href=&quot;System.DirectoryServices.SearchScope&quot;></xref>."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.CacheResults
  id: CacheResults
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: CacheResults
  nameWithType: DirectorySearcher.CacheResults
  fullName: System.DirectoryServices.DirectorySearcher.CacheResults
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating whether the result is cached on the client computer."
  remarks: "If the search returns a large result set, the search will be more efficient if this property is set to `false` to avoid the transfer of the result set to the client computer.  If you do so, however, you will not be able to enumerate the results twice, because the <xref:System.DirectoryServices.SearchResultCollection> object creates a new enumerator object each time it is called."
  syntax:
    content: public bool CacheResults { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the result is cached on the client computer; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.DirectorySearcher.CacheResults*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.ClientTimeout
  id: ClientTimeout
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: ClientTimeout
  nameWithType: DirectorySearcher.ClientTimeout
  fullName: System.DirectoryServices.DirectorySearcher.ClientTimeout
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets the maximum amount of time that the client waits for the server to return results. If the server does not respond within this time, the search is aborted and no results are returned."
  remarks: "The minimum resolution of this property is one second. Fractions of seconds are ignored.       If the <xref:System.DirectoryServices.DirectorySearcher.ServerTimeLimit%2A> is reached before the client times out, the server returns its results and the client stops waiting. The maximum server time limit is 120 seconds."
  syntax:
    content: public TimeSpan ClientTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> structure that contains the maximum amount of time for the client to wait for the server to return results.       The default value is -1 second, which means to wait indefinitely."
  overload: System.DirectoryServices.DirectorySearcher.ClientTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.DerefAlias
  id: DerefAlias
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DerefAlias
  nameWithType: DirectorySearcher.DerefAlias
  fullName: System.DirectoryServices.DirectorySearcher.DerefAlias
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating how the aliases of objects that are found during a search should be resolved."
  remarks: ''
  example:
  - "The following C# example shows how to set the DerefAlias property to <xref:System.DirectoryServices.DereferenceAlias> , so that it dereferences aliases when both searching subordinates and locating base objects.  \n  \n```  \nusing System.DirectoryServices;  \n...  \n// Bind to the users container.  \nDirectoryEntry entry = new DirectoryEntry(\"LDAP://CN=users,DC=fabrikam,DC=com\");  \n// Create a DirectorySearcher object.  \nDirectorySearcher mySearcher = new DirectorySearcher(entry);  \n// Set DerefAlias to Always.  \nsrc.DerefAlias = DerefenceAlias.Always;  \n//Use the FindAll method to get search results.  \nSearchResultCollection res = src.FindAll();  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DereferenceAlias DerefAlias { get; set; }
    return:
      type: System.DirectoryServices.DereferenceAlias
      description: "A <xref href=&quot;System.DirectoryServices.DereferenceAlias&quot;></xref> value that specifies the behavior in which aliases are dereferenced. The default setting for this property is <xref href=&quot;System.DirectoryServices.DereferenceAlias&quot;></xref>."
  overload: System.DirectoryServices.DirectorySearcher.DerefAlias*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.DirectorySynchronization
  id: DirectorySynchronization
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: DirectorySynchronization
  nameWithType: DirectorySearcher.DirectorySynchronization
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySynchronization
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets an object that represents the directory synchronization control to use with the search."
  remarks: "The directory synchronization control, commonly referred to as the DirSync control, is an LDAP control that is used to search for objects that have changed since a previous state.       For more information, see the topic &quot;[Polling for Changes Using the DirSync Control](http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ad/ad/polling_for_changes_using_the_dirsync_control.asp)&quot; in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public System.DirectoryServices.DirectorySynchronization DirectorySynchronization { get; set; }
    return:
      type: System.DirectoryServices.DirectorySynchronization
      description: "The <xref href=&quot;System.DirectoryServices.DirectorySynchronization&quot;></xref> object for the search. <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the directory synchronization control should not be used."
  overload: System.DirectoryServices.DirectorySearcher.DirectorySynchronization*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DirectorySearcher.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectorySearcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Releases the managed resources that are used by the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> object and, optionally, releases unmanaged resources."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this method releases both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it releases only unmanaged resources."
  overload: System.DirectoryServices.DirectorySearcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.ExtendedDN
  id: ExtendedDN
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: ExtendedDN
  nameWithType: DirectorySearcher.ExtendedDN
  fullName: System.DirectoryServices.DirectorySearcher.ExtendedDN
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value that indicates the format of the distinguished names."
  remarks: ''
  example:
  - "The following example shows how to return a collection of distinguished names in hexadecimal format.  \n  \n```c#  \nusing System.DirectoryServices;  \n...  \nDirectorySearcher src = new DirectorySearcher(\"…\");  \nsrc.PropertiesToLoad = new string[] {ntSecurityDescriptor,…};  \nsrc.ExtendedDN = ExtendedDN.HexString;  \nSearchResultCollection res = src.FindAll();  \n  \n```"
  syntax:
    content: public System.DirectoryServices.ExtendedDN ExtendedDN { get; set; }
    return:
      type: System.DirectoryServices.ExtendedDN
      description: "One of the <xref href=&quot;System.DirectoryServices.ExtendedDN&quot;></xref> values."
  overload: System.DirectoryServices.DirectorySearcher.ExtendedDN*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.Filter
  id: Filter
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: Filter
  nameWithType: DirectorySearcher.Filter
  fullName: System.DirectoryServices.DirectorySearcher.Filter
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the Lightweight Directory Access Protocol (LDAP) format filter string."
  remarks: "The filter uses the following guidelines:  \n  \n1.  The string must be enclosed in parentheses.  \n  \n2.  Expressions can use the relational operators: <, \\<=, =, >=, and >. An example is \"(objectClass=user)\". Another example is \"(lastName>=Davis)\".  \n  \n3.  Compound expressions are formed with the prefix operators & and &#124;. An example is \"(&(objectClass=user)(lastName= Davis))\". Another example is \"(&(objectClass=printer)(&#124;(building=42)(building=43)))\".  \n  \n When the filter contains an attribute of ADS_UTC_TIME type, its value must be of the yyyymmddhhmmssZ format where y, m, d, h, m, and s stand for year, month, day, hour, minute, and second, respectively. The seconds (ss) value is optional. The final letter Z means there is no time differential. In this format, \"10:20:00 A.M. May 13, 1999\" becomes \"19990513102000Z\". Note that Active Directory Domain Services stores date and time as Coordinated Universal Time (Greenwich Mean Time). If you specify a time with no time differential, you are specifying the time in GMT time.  \n  \n If you are not in the Coordinated Universal Time time zone, you can add a differential value to the Coordinated Universal Time (instead of specifying Z) to specify a time according to your time zone. The differential is based on the following: differential = Coordinated Universal Time- Local. To specify a differential, use the following format: yyyymmddhhmmss[+/-]hhmm. For example, \"8:52:58 P.M. March 23, 1999\" New Zealand Standard Time (the differential is 12 hours) is specified as \"19990323205258.0+1200\".  \n  \n For more information about the LDAP search string format, see \"Search Filter Syntax\" in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "The search filter string in LDAP format, such as &quot;(objectClass=user)&quot;. The default is &quot;(objectClass=*)&quot;, which retrieves all objects."
  overload: System.DirectoryServices.DirectorySearcher.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.FindAll
  id: FindAll
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: FindAll()
  nameWithType: DirectorySearcher.FindAll()
  fullName: System.DirectoryServices.DirectorySearcher.FindAll()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Executes the search and returns a collection of the entries that are found."
  remarks: "Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed."
  syntax:
    content: public System.DirectoryServices.SearchResultCollection FindAll ();
    parameters: []
    return:
      type: System.DirectoryServices.SearchResultCollection
      description: "A <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;></xref> object that contains the results of the search."
  overload: System.DirectoryServices.DirectorySearcher.FindAll*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The specified <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> is not a container."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Searching is not supported by the provider that is being used."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.FindOne
  id: FindOne
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: FindOne()
  nameWithType: DirectorySearcher.FindOne()
  fullName: System.DirectoryServices.DirectorySearcher.FindOne()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Executes the search and returns only the first entry that is found."
  remarks: "If more than one entry is found during the search, only the first entry is returned. If no entries are found to match the search criteria, a null reference (`Nothing` in Visual Basic) is returned."
  syntax:
    content: public System.DirectoryServices.SearchResult FindOne ();
    parameters: []
    return:
      type: System.DirectoryServices.SearchResult
      description: "A <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object that contains the first entry that is found during the search."
  overload: System.DirectoryServices.DirectorySearcher.FindOne*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.PageSize
  id: PageSize
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: PageSize
  nameWithType: DirectorySearcher.PageSize
  fullName: System.DirectoryServices.DirectorySearcher.PageSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the page size in a paged search."
  remarks: "After the server has found the number of objects that are specified by the PageSize property, it will stop searching and return the results to the client. When the client requests more data, the server will restart the search where it left off."
  syntax:
    content: public int PageSize { get; set; }
    return:
      type: System.Int32
      description: "The maximum number of objects the server can return in a paged search. The default is zero, which means do not do a paged search."
  overload: System.DirectoryServices.DirectorySearcher.PageSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The new value is less than zero."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.PropertiesToLoad
  id: PropertiesToLoad
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: PropertiesToLoad
  nameWithType: DirectorySearcher.PropertiesToLoad
  fullName: System.DirectoryServices.DirectorySearcher.PropertiesToLoad
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets a value indicating the list of properties to retrieve during the search."
  remarks: "To retrieve specific properties, add them to this collection before you begin the search. For example, `searcher.PropertiesToLoad.Add(&quot;phone&quot;);` will add the phone property to the list of properties to retrieve in the search.       The property &quot;ADsPath&quot; is always retrieved during the search. On [!INCLUDE[Win2kFamily](~/add/includes/win2kfamily-md.md)] and earlier operating systems, the account that performs the search must be a member of the Administrators group to retrieve the ntSecurityDescriptor property. If this is not the case, the property value that is returned for ntSecurityDescriptor will be `null`. For more information, see the topic &quot;NT-Security-Descriptor&quot; in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public System.Collections.Specialized.StringCollection PropertiesToLoad { get; }
    return:
      type: System.Collections.Specialized.StringCollection
      description: "A <xref href=&quot;System.Collections.Specialized.StringCollection&quot;></xref> object that contains the set of properties to retrieve during the search.       The default is an empty <xref href=&quot;System.Collections.Specialized.StringCollection&quot;></xref>, which retrieves all properties."
  overload: System.DirectoryServices.DirectorySearcher.PropertiesToLoad*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.PropertyNamesOnly
  id: PropertyNamesOnly
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: PropertyNamesOnly
  nameWithType: DirectorySearcher.PropertyNamesOnly
  fullName: System.DirectoryServices.DirectorySearcher.PropertyNamesOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating whether the search retrieves only the names of attributes to which values have been assigned."
  syntax:
    content: public bool PropertyNamesOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the search obtains only the names of attributes to which values have been assigned; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the search obtains the names and values for all the requested attributes. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.DirectorySearcher.PropertyNamesOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.ReferralChasing
  id: ReferralChasing
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: ReferralChasing
  nameWithType: DirectorySearcher.ReferralChasing
  fullName: System.DirectoryServices.DirectorySearcher.ReferralChasing
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating how referrals are chased."
  remarks: "If the root search is not specified in the naming context of the server or when the search results cross a naming context (for example, when you have child domains and search in the parent domain), the server sends a referral message to the client that the client can either ignore or chase."
  syntax:
    content: public System.DirectoryServices.ReferralChasingOption ReferralChasing { get; set; }
    return:
      type: System.DirectoryServices.ReferralChasingOption
      description: "One of the <xref href=&quot;System.DirectoryServices.ReferralChasingOption&quot;></xref> values. The default is <xref href=&quot;System.DirectoryServices.ReferralChasingOption&quot;></xref>."
  overload: System.DirectoryServices.DirectorySearcher.ReferralChasing*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value is not one of the <xref href=&quot;System.DirectoryServices.ReferralChasingOption&quot;></xref> values."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.SearchRoot
  id: SearchRoot
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: SearchRoot
  nameWithType: DirectorySearcher.SearchRoot
  fullName: System.DirectoryServices.DirectorySearcher.SearchRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the node in the Active Directory Domain Services hierarchy where the search starts."
  remarks: "If SearchRoot is a null reference (`Nothing` in Visual Basic), the search root is set to the root of the domain that your server is currently using.       There are several ways to search in the global catalog:      -   Enumerate the global catalog and pick the first child.      -   Specify the server name. Use the DsGetDcName function to find the global catalog.  For more information on the DsGetDcName function, see the topic &quot;DsGetDcName&quot; in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).      -   Get the RootDSE  of the global catalog and ask for &quot;rootNamingContext&quot;.      -   Use the global catalog, specifying a search path as if using LDAP. For example, &quot;GC://OU=..., DC=..., DC=...&quot;.      -   The following C# code shows how to enumerate the global catalog and pick the first child.          ```c#       DirectoryEntry entry = new DirectoryEntry(&quot;GC://forestname&quot;);       IEnumerator ie = entry.Children.GetEnumerator();       ie.MoveNext();       entry = (DirectoryEntry)ie.Current;       DirectorySearcher search = new DirectorySearcher(entry);       ```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry SearchRoot { get; set; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "The <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> object in the Active Directory Domain Services hierarchy where the search starts. The default is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  overload: System.DirectoryServices.DirectorySearcher.SearchRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.SearchScope
  id: SearchScope
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: SearchScope
  nameWithType: DirectorySearcher.SearchScope
  fullName: System.DirectoryServices.DirectorySearcher.SearchScope
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the scope of the search that is observed by the server."
  syntax:
    content: public System.DirectoryServices.SearchScope SearchScope { get; set; }
    return:
      type: System.DirectoryServices.SearchScope
      description: "One of the <xref href=&quot;System.DirectoryServices.SearchScope&quot;></xref> values. The default is <xref href=&quot;System.DirectoryServices.SearchScope&quot;></xref>."
  overload: System.DirectoryServices.DirectorySearcher.SearchScope*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value is not one of the <xref href=&quot;System.DirectoryServices.ReferralChasingOption&quot;></xref> values."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.SecurityMasks
  id: SecurityMasks
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: SecurityMasks
  nameWithType: DirectorySearcher.SecurityMasks
  fullName: System.DirectoryServices.DirectorySearcher.SecurityMasks
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating which security access information for the specified attributes should be returned by the search."
  remarks: ''
  example:
  - "```c#  \nusing System.DirectoryServices;  \n...  \nDirectorySearcher src = new DirectorySearcher(\"…\");  \nsrc.PropertiesToLoad = new string[] {ntSecurityDescriptor,…};  \nsrc.SecurityMasks = SecurityMasks.Dacl | SecurityMasks.Owner;  \nSearchResultCollection res = src.FindAll();  \n  \n```"
  syntax:
    content: public System.DirectoryServices.SecurityMasks SecurityMasks { get; set; }
    return:
      type: System.DirectoryServices.SecurityMasks
      description: "One of the <xref href=&quot;System.DirectoryServices.SecurityMasks&quot;></xref> values."
  overload: System.DirectoryServices.DirectorySearcher.SecurityMasks*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit
  id: ServerPageTimeLimit
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: ServerPageTimeLimit
  nameWithType: DirectorySearcher.ServerPageTimeLimit
  fullName: System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the maximum amount of time the server should search for an individual page of results. This is not the same as the time limit for the entire search."
  remarks: "The minimum resolution of this property is one second. Fractions of seconds are ignored.       When the time limit is reached, the server stops searching and returns the results that have accumulated up to that point, along with a cookie containing the information about where to resume searching.      > [!NOTE] >  This property only applies to searches where <xref:System.DirectoryServices.DirectorySearcher.PageSize%2A> is set to a value that is not the default of -1."
  syntax:
    content: public TimeSpan ServerPageTimeLimit { get; set; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that represents the amount of time the server should search for a page of results.       The default value is -1 seconds, which means to search indefinitely."
  overload: System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.ServerTimeLimit
  id: ServerTimeLimit
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: ServerTimeLimit
  nameWithType: DirectorySearcher.ServerTimeLimit
  fullName: System.DirectoryServices.DirectorySearcher.ServerTimeLimit
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "The ServerTimeLimit property gets or sets a value indicating the maximum amount of time the server spends searching. If the time limit is reached, only entries that are found up to that point are returned."
  remarks: "The minimum resolution of this property is one second. Fractions of seconds are ignored.       Unlike the <xref:System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit%2A> property, the ServerTimeLimit property indicates the total amount of time that the server will spend on a search. When the time limit is reached, the server stops searching and returns the results that have accumulated up to that point.       Set ServerTimeLimit to -1 second to use the server-determined default.      > [!NOTE] >  If you set ServerTimeLimit to a value that is larger than the server-determined default of 120 seconds, the server-determined default is used. After the server time limit is reached, you cannot continue a search from where it left off."
  syntax:
    content: public TimeSpan ServerTimeLimit { get; set; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that represents the amount of time that the server should search.       The default value is -1 seconds, which means to use the server-determined default of 120 seconds."
  overload: System.DirectoryServices.DirectorySearcher.ServerTimeLimit*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.SizeLimit
  id: SizeLimit
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: SizeLimit
  nameWithType: DirectorySearcher.SizeLimit
  fullName: System.DirectoryServices.DirectorySearcher.SizeLimit
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the maximum number of objects that the server returns in a search."
  remarks: "The server stops searching after the size limit is reached and returns the results accumulated up to that point.      > [!NOTE] >  If you set SizeLimit to a value that is larger than the server-determined default of 1000 entries, the server-determined default is used."
  syntax:
    content: public int SizeLimit { get; set; }
    return:
      type: System.Int32
      description: "The maximum number of objects that the server returns in a search. The default value is zero, which means to use the server-determined default size limit of 1000 entries."
  overload: System.DirectoryServices.DirectorySearcher.SizeLimit*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The new value is less than zero."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.Sort
  id: Sort
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: Sort
  nameWithType: DirectorySearcher.Sort
  fullName: System.DirectoryServices.DirectorySearcher.Sort
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the property on which the results are sorted."
  syntax:
    content: public System.DirectoryServices.SortOption Sort { get; set; }
    return:
      type: System.DirectoryServices.SortOption
      description: "A <xref href=&quot;System.DirectoryServices.SortOption&quot;></xref> object that specifies the property and direction that the search results should be sorted on."
  overload: System.DirectoryServices.DirectorySearcher.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (Nothing in Visual Basic)."
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.Tombstone
  id: Tombstone
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: Tombstone
  nameWithType: DirectorySearcher.Tombstone
  fullName: System.DirectoryServices.DirectorySearcher.Tombstone
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating whether the search should also return deleted objects that match the search filter."
  remarks: ''
  example:
  - "The following C# example shows how to set the Tombstone property to `true`.  \n  \n```c#  \nusing System.DirectoryServices;  \n...  \n// Create a DirectorySearcher object.  \nDirectorySearcher src = new DirectorySearcher(\"(isDeleted=true)\");  \n//Set the Tombstone property to true.  \nsrc.Tombstone = true;  \n//Use the FindAll method to get search results.  \nSearchResultCollection res = src.FindAll();  \n  \n```"
  syntax:
    content: public bool Tombstone { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if deleted objects should be included in the search; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> otherwise. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.DirectorySearcher.Tombstone*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectorySearcher.VirtualListView
  id: VirtualListView
  parent: System.DirectoryServices.DirectorySearcher
  langs:
  - csharp
  name: VirtualListView
  nameWithType: DirectorySearcher.VirtualListView
  fullName: System.DirectoryServices.DirectorySearcher.VirtualListView
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets a value indicating the virtual list view options for the search."
  syntax:
    content: public System.DirectoryServices.DirectoryVirtualListView VirtualListView { get; set; }
    return:
      type: System.DirectoryServices.DirectoryVirtualListView
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryVirtualListView&quot;></xref> object that contains the virtual list view search information. The default value for this property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which means do not use the virtual list view search option."
  overload: System.DirectoryServices.DirectorySearcher.VirtualListView*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.DirectoryServices.DirectorySearcher.#ctor
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher()
  nameWithType: DirectorySearcher.DirectorySearcher()
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher()
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(DirectoryEntry)
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.String)
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(String)
  nameWithType: DirectorySearcher.DirectorySearcher(String)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(DirectoryEntry,String)
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[])
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(String,String[])
  nameWithType: DirectorySearcher.DirectorySearcher(String,String[])
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[])
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(DirectoryEntry,String,String[])
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[])
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[])
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.String,System.String[],System.DirectoryServices.SearchScope)
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(String,String[],SearchScope)
  nameWithType: DirectorySearcher.DirectorySearcher(String,String[],SearchScope)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(String,String[],SearchScope)
- uid: System.DirectoryServices.SearchScope
  parent: System.DirectoryServices
  isExternal: false
  name: SearchScope
  nameWithType: SearchScope
  fullName: System.DirectoryServices.SearchScope
- uid: System.DirectoryServices.DirectorySearcher.#ctor(System.DirectoryServices.DirectoryEntry,System.String,System.String[],System.DirectoryServices.SearchScope)
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher(DirectoryEntry,String,String[],SearchScope)
  nameWithType: DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[],SearchScope)
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySearcher(DirectoryEntry,String,String[],SearchScope)
- uid: System.DirectoryServices.DirectorySearcher.Asynchronous
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Asynchronous
  nameWithType: DirectorySearcher.Asynchronous
  fullName: System.DirectoryServices.DirectorySearcher.Asynchronous
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.DirectorySearcher.AttributeScopeQuery
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: AttributeScopeQuery
  nameWithType: DirectorySearcher.AttributeScopeQuery
  fullName: System.DirectoryServices.DirectorySearcher.AttributeScopeQuery
- uid: System.DirectoryServices.DirectorySearcher.CacheResults
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: CacheResults
  nameWithType: DirectorySearcher.CacheResults
  fullName: System.DirectoryServices.DirectorySearcher.CacheResults
- uid: System.DirectoryServices.DirectorySearcher.ClientTimeout
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ClientTimeout
  nameWithType: DirectorySearcher.ClientTimeout
  fullName: System.DirectoryServices.DirectorySearcher.ClientTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DirectoryServices.DirectorySearcher.DerefAlias
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DerefAlias
  nameWithType: DirectorySearcher.DerefAlias
  fullName: System.DirectoryServices.DirectorySearcher.DerefAlias
- uid: System.DirectoryServices.DereferenceAlias
  parent: System.DirectoryServices
  isExternal: false
  name: DereferenceAlias
  nameWithType: DereferenceAlias
  fullName: System.DirectoryServices.DereferenceAlias
- uid: System.DirectoryServices.DirectorySearcher.DirectorySynchronization
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySynchronization
  nameWithType: DirectorySearcher.DirectorySynchronization
  fullName: System.DirectoryServices.DirectorySearcher.DirectorySynchronization
- uid: System.DirectoryServices.DirectorySynchronization
  parent: System.DirectoryServices
  isExternal: false
  name: DirectorySynchronization
  nameWithType: DirectorySynchronization
  fullName: System.DirectoryServices.DirectorySynchronization
- uid: System.DirectoryServices.DirectorySearcher.Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DirectorySearcher.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectorySearcher.Dispose(Boolean)
- uid: System.DirectoryServices.DirectorySearcher.ExtendedDN
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ExtendedDN
  nameWithType: DirectorySearcher.ExtendedDN
  fullName: System.DirectoryServices.DirectorySearcher.ExtendedDN
- uid: System.DirectoryServices.ExtendedDN
  parent: System.DirectoryServices
  isExternal: false
  name: ExtendedDN
  nameWithType: ExtendedDN
  fullName: System.DirectoryServices.ExtendedDN
- uid: System.DirectoryServices.DirectorySearcher.Filter
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Filter
  nameWithType: DirectorySearcher.Filter
  fullName: System.DirectoryServices.DirectorySearcher.Filter
- uid: System.DirectoryServices.DirectorySearcher.FindAll
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: FindAll()
  nameWithType: DirectorySearcher.FindAll()
  fullName: System.DirectoryServices.DirectorySearcher.FindAll()
- uid: System.DirectoryServices.SearchResultCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResultCollection
  nameWithType: SearchResultCollection
  fullName: System.DirectoryServices.SearchResultCollection
- uid: System.DirectoryServices.DirectorySearcher.FindOne
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: FindOne()
  nameWithType: DirectorySearcher.FindOne()
  fullName: System.DirectoryServices.DirectorySearcher.FindOne()
- uid: System.DirectoryServices.SearchResult
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
- uid: System.DirectoryServices.DirectorySearcher.PageSize
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: PageSize
  nameWithType: DirectorySearcher.PageSize
  fullName: System.DirectoryServices.DirectorySearcher.PageSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.DirectorySearcher.PropertiesToLoad
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: PropertiesToLoad
  nameWithType: DirectorySearcher.PropertiesToLoad
  fullName: System.DirectoryServices.DirectorySearcher.PropertiesToLoad
- uid: System.Collections.Specialized.StringCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: StringCollection
  nameWithType: StringCollection
  fullName: System.Collections.Specialized.StringCollection
- uid: System.DirectoryServices.DirectorySearcher.PropertyNamesOnly
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: PropertyNamesOnly
  nameWithType: DirectorySearcher.PropertyNamesOnly
  fullName: System.DirectoryServices.DirectorySearcher.PropertyNamesOnly
- uid: System.DirectoryServices.DirectorySearcher.ReferralChasing
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ReferralChasing
  nameWithType: DirectorySearcher.ReferralChasing
  fullName: System.DirectoryServices.DirectorySearcher.ReferralChasing
- uid: System.DirectoryServices.ReferralChasingOption
  parent: System.DirectoryServices
  isExternal: false
  name: ReferralChasingOption
  nameWithType: ReferralChasingOption
  fullName: System.DirectoryServices.ReferralChasingOption
- uid: System.DirectoryServices.DirectorySearcher.SearchRoot
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SearchRoot
  nameWithType: DirectorySearcher.SearchRoot
  fullName: System.DirectoryServices.DirectorySearcher.SearchRoot
- uid: System.DirectoryServices.DirectorySearcher.SearchScope
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SearchScope
  nameWithType: DirectorySearcher.SearchScope
  fullName: System.DirectoryServices.DirectorySearcher.SearchScope
- uid: System.DirectoryServices.DirectorySearcher.SecurityMasks
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SecurityMasks
  nameWithType: DirectorySearcher.SecurityMasks
  fullName: System.DirectoryServices.DirectorySearcher.SecurityMasks
- uid: System.DirectoryServices.SecurityMasks
  parent: System.DirectoryServices
  isExternal: false
  name: SecurityMasks
  nameWithType: SecurityMasks
  fullName: System.DirectoryServices.SecurityMasks
- uid: System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ServerPageTimeLimit
  nameWithType: DirectorySearcher.ServerPageTimeLimit
  fullName: System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit
- uid: System.DirectoryServices.DirectorySearcher.ServerTimeLimit
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ServerTimeLimit
  nameWithType: DirectorySearcher.ServerTimeLimit
  fullName: System.DirectoryServices.DirectorySearcher.ServerTimeLimit
- uid: System.DirectoryServices.DirectorySearcher.SizeLimit
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SizeLimit
  nameWithType: DirectorySearcher.SizeLimit
  fullName: System.DirectoryServices.DirectorySearcher.SizeLimit
- uid: System.DirectoryServices.DirectorySearcher.Sort
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Sort
  nameWithType: DirectorySearcher.Sort
  fullName: System.DirectoryServices.DirectorySearcher.Sort
- uid: System.DirectoryServices.SortOption
  parent: System.DirectoryServices
  isExternal: false
  name: SortOption
  nameWithType: SortOption
  fullName: System.DirectoryServices.SortOption
- uid: System.DirectoryServices.DirectorySearcher.Tombstone
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Tombstone
  nameWithType: DirectorySearcher.Tombstone
  fullName: System.DirectoryServices.DirectorySearcher.Tombstone
- uid: System.DirectoryServices.DirectorySearcher.VirtualListView
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: VirtualListView
  nameWithType: DirectorySearcher.VirtualListView
  fullName: System.DirectoryServices.DirectorySearcher.VirtualListView
- uid: System.DirectoryServices.DirectoryVirtualListView
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryVirtualListView
  nameWithType: DirectoryVirtualListView
  fullName: System.DirectoryServices.DirectoryVirtualListView
- uid: System.DirectoryServices.DirectorySearcher.#ctor*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySearcher
  nameWithType: DirectorySearcher.DirectorySearcher
- uid: System.DirectoryServices.DirectorySearcher.Asynchronous*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Asynchronous
  nameWithType: DirectorySearcher.Asynchronous
- uid: System.DirectoryServices.DirectorySearcher.AttributeScopeQuery*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: AttributeScopeQuery
  nameWithType: DirectorySearcher.AttributeScopeQuery
- uid: System.DirectoryServices.DirectorySearcher.CacheResults*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: CacheResults
  nameWithType: DirectorySearcher.CacheResults
- uid: System.DirectoryServices.DirectorySearcher.ClientTimeout*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ClientTimeout
  nameWithType: DirectorySearcher.ClientTimeout
- uid: System.DirectoryServices.DirectorySearcher.DerefAlias*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DerefAlias
  nameWithType: DirectorySearcher.DerefAlias
- uid: System.DirectoryServices.DirectorySearcher.DirectorySynchronization*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: DirectorySynchronization
  nameWithType: DirectorySearcher.DirectorySynchronization
- uid: System.DirectoryServices.DirectorySearcher.Dispose*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Dispose
  nameWithType: DirectorySearcher.Dispose
- uid: System.DirectoryServices.DirectorySearcher.ExtendedDN*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ExtendedDN
  nameWithType: DirectorySearcher.ExtendedDN
- uid: System.DirectoryServices.DirectorySearcher.Filter*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Filter
  nameWithType: DirectorySearcher.Filter
- uid: System.DirectoryServices.DirectorySearcher.FindAll*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: FindAll
  nameWithType: DirectorySearcher.FindAll
- uid: System.DirectoryServices.DirectorySearcher.FindOne*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: FindOne
  nameWithType: DirectorySearcher.FindOne
- uid: System.DirectoryServices.DirectorySearcher.PageSize*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: PageSize
  nameWithType: DirectorySearcher.PageSize
- uid: System.DirectoryServices.DirectorySearcher.PropertiesToLoad*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: PropertiesToLoad
  nameWithType: DirectorySearcher.PropertiesToLoad
- uid: System.DirectoryServices.DirectorySearcher.PropertyNamesOnly*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: PropertyNamesOnly
  nameWithType: DirectorySearcher.PropertyNamesOnly
- uid: System.DirectoryServices.DirectorySearcher.ReferralChasing*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ReferralChasing
  nameWithType: DirectorySearcher.ReferralChasing
- uid: System.DirectoryServices.DirectorySearcher.SearchRoot*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SearchRoot
  nameWithType: DirectorySearcher.SearchRoot
- uid: System.DirectoryServices.DirectorySearcher.SearchScope*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SearchScope
  nameWithType: DirectorySearcher.SearchScope
- uid: System.DirectoryServices.DirectorySearcher.SecurityMasks*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SecurityMasks
  nameWithType: DirectorySearcher.SecurityMasks
- uid: System.DirectoryServices.DirectorySearcher.ServerPageTimeLimit*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ServerPageTimeLimit
  nameWithType: DirectorySearcher.ServerPageTimeLimit
- uid: System.DirectoryServices.DirectorySearcher.ServerTimeLimit*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: ServerTimeLimit
  nameWithType: DirectorySearcher.ServerTimeLimit
- uid: System.DirectoryServices.DirectorySearcher.SizeLimit*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: SizeLimit
  nameWithType: DirectorySearcher.SizeLimit
- uid: System.DirectoryServices.DirectorySearcher.Sort*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Sort
  nameWithType: DirectorySearcher.Sort
- uid: System.DirectoryServices.DirectorySearcher.Tombstone*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: Tombstone
  nameWithType: DirectorySearcher.Tombstone
- uid: System.DirectoryServices.DirectorySearcher.VirtualListView*
  parent: System.DirectoryServices.DirectorySearcher
  isExternal: false
  name: VirtualListView
  nameWithType: DirectorySearcher.VirtualListView
