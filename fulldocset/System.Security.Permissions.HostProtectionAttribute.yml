### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.HostProtectionAttribute
  id: HostProtectionAttribute
  children:
  - System.Security.Permissions.HostProtectionAttribute.#ctor
  - System.Security.Permissions.HostProtectionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.HostProtectionAttribute.CreatePermission
  - System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt
  - System.Security.Permissions.HostProtectionAttribute.ExternalThreading
  - System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort
  - System.Security.Permissions.HostProtectionAttribute.Resources
  - System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure
  - System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt
  - System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading
  - System.Security.Permissions.HostProtectionAttribute.SharedState
  - System.Security.Permissions.HostProtectionAttribute.Synchronization
  - System.Security.Permissions.HostProtectionAttribute.UI
  langs:
  - csharp
  name: HostProtectionAttribute
  nameWithType: HostProtectionAttribute
  fullName: System.Security.Permissions.HostProtectionAttribute
  type: Class
  summary: "Allows the use of declarative security actions to determine host protection requirements. This class cannot be inherited."
  remarks: "This attribute affects only unmanaged applications that host the common language runtime and implement host protection, such as SQL Server. If the code is run in a client application or on a server that is not host-protected, the attribute &quot;evaporates&quot;; it is not detected and therefore not applied. When applied, the security action results in the creation of a link demand based on the host resources the class or method exposes.      > [!IMPORTANT] >  The purpose of this attribute is to enforce host-specific programming model guidelines, not security behavior.  Although a link demand is used to check for conformance to programming model requirements, the HostProtectionAttribute is not a security permission.       If the host does not have programming model requirements, the link demands do not occur.       This attribute identifies the following:      -   Methods or classes that do not fit the host programming model, but are otherwise benign.      -   Methods or classes that do not fit the host programming model and could lead to destabilizing server-managed user code.      -   Methods or classes that do not fit the host programming model and could lead to a destabilization of the server process itself.      > [!NOTE] >  If you are creating a class library that is to be called by applications that may execute in a host protected environment, you should apply this attribute to members that expose <xref:System.Security.Permissions.HostProtectionResource> resource categories. The .NET Framework class library members with this attribute cause only the immediate caller to be checked.  Your library member must also cause a check of its immediate caller in the same manner.      > [!NOTE] >  Do not use the [Ngen.exe (Native Image Generator)](~/add/includes/ajax-current-ext-md.md) to create a native image of assemblies that are protected by the HostProtectionAttribute. In a full-trust environment, the image is always loaded, without regard to the HostProtectionAttribute, and in a partial-trust environment the image is not loaded."
  example:
  - "The following code example illustrates the use of the HostProtectionAttribute attribute with a variety of <xref:System.Security.Permissions.HostProtectionResource> values.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#1](~/add/codesnippet/csharp/t-system.security.permis_7_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#1](~/add/codesnippet/cpp/t-system.security.permis_7_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#1](~/add/codesnippet/visualbasic/t-system.security.permis_7_1.vb)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Delegate, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class HostProtectionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.#ctor
  id: '#ctor'
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: HostProtectionAttribute()
  nameWithType: HostProtectionAttribute.HostProtectionAttribute()
  fullName: System.Security.Permissions.HostProtectionAttribute.HostProtectionAttribute()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.HostProtectionAttribute&quot;></xref> class with default values."
  remarks: "This constructor creates a <xref:System.Security.Permissions.HostProtectionAttribute> with all Boolean properties set to `false`."
  syntax:
    content: public HostProtectionAttribute ();
    parameters: []
  overload: System.Security.Permissions.HostProtectionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: HostProtectionAttribute(SecurityAction)
  nameWithType: HostProtectionAttribute.HostProtectionAttribute(SecurityAction)
  fullName: System.Security.Permissions.HostProtectionAttribute.HostProtectionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.HostProtectionAttribute&quot;></xref> class with the specified <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref> value."
  remarks: "This constructor should not be used. It is intended for infrastructure use."
  syntax:
    content: public HostProtectionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "One of the <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref> values."
  overload: System.Security.Permissions.HostProtectionAttribute.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>action</code> is not <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: HostProtectionAttribute.CreatePermission()
  fullName: System.Security.Permissions.HostProtectionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a new host protection permission."
  remarks: "This method should be called only by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission corresponding to the attribute that this method returns."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "An <xref href=&quot;System.Security.IPermission&quot;></xref> that corresponds to the current attribute."
  overload: System.Security.Permissions.HostProtectionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt
  id: ExternalProcessMgmt
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: ExternalProcessMgmt
  nameWithType: HostProtectionAttribute.ExternalProcessMgmt
  fullName: System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether external process management is exposed."
  remarks: "Code that exposes external process management might create or destroy other processes."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the ExternalProcessMgmt property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#5](~/add/codesnippet/csharp/p-system.security.permis_2_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#5](~/add/codesnippet/cpp/p-system.security.permis_2_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#5](~/add/codesnippet/visualbasic/p-system.security.permis_2_1.vb)]"
  syntax:
    content: public bool ExternalProcessMgmt { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if external process management is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.ExternalThreading
  id: ExternalThreading
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: ExternalThreading
  nameWithType: HostProtectionAttribute.ExternalThreading
  fullName: System.Security.Permissions.HostProtectionAttribute.ExternalThreading
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether external threading is exposed."
  remarks: "Code that exposes external threading creates or manipulates threads other than its own, which might be harmful to the host."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the ExternalThreading property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/csharp/p-system.security.permis_8_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/cpp/p-system.security.permis_8_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/visualbasic/p-system.security.permis_8_1.vb)]"
  syntax:
    content: public bool ExternalThreading { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if external threading is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.ExternalThreading*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort
  id: MayLeakOnAbort
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: MayLeakOnAbort
  nameWithType: HostProtectionAttribute.MayLeakOnAbort
  fullName: System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether resources might leak memory if the operation is terminated."
  remarks: "Code might cause a resource leak on termination, if not protected by a safe handle or some other means of ensuring the release of resources."
  syntax:
    content: public bool MayLeakOnAbort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if resources might leak memory on termination; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.Resources
  id: Resources
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: Resources
  nameWithType: HostProtectionAttribute.Resources
  fullName: System.Security.Permissions.HostProtectionAttribute.Resources
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets flags specifying categories of functionality that are potentially harmful to the host."
  remarks: "The <xref:System.Security.Permissions.HostProtectionResource> flags specify the resources exposed by the method or class that are potentially harmful to the host."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the Resources property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/csharp/p-system.security.permis_17_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/cpp/p-system.security.permis_17_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/visualbasic/p-system.security.permis_17_1.vb)]"
  syntax:
    content: public System.Security.Permissions.HostProtectionResource Resources { get; set; }
    return:
      type: System.Security.Permissions.HostProtectionResource
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.HostProtectionResource&quot;></xref> values. The default is <xref href=&quot;System.Security.Permissions.HostProtectionResource&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.Resources*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure
  id: SecurityInfrastructure
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: SecurityInfrastructure
  nameWithType: HostProtectionAttribute.SecurityInfrastructure
  fullName: System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether the security infrastructure is exposed."
  remarks: "The use of a <xref:System.Security.Principal.WindowsIdentity> object to impersonate a user is an example of exposing the security infrastructure."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SecurityInfrastructure property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#4](~/add/codesnippet/csharp/p-system.security.permis_19_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#4](~/add/codesnippet/cpp/p-system.security.permis_19_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#4](~/add/codesnippet/visualbasic/p-system.security.permis_19_1.vb)]"
  syntax:
    content: public bool SecurityInfrastructure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the security infrastructure is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt
  id: SelfAffectingProcessMgmt
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: SelfAffectingProcessMgmt
  nameWithType: HostProtectionAttribute.SelfAffectingProcessMgmt
  fullName: System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether self-affecting process management is exposed."
  remarks: "Self-affecting process management code might exit the current process, terminating the server."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SelfAffectingProcessMgmt property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/csharp/p-system.security.permis_26_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/cpp/p-system.security.permis_26_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#2](~/add/codesnippet/visualbasic/p-system.security.permis_26_1.vb)]"
  syntax:
    content: public bool SelfAffectingProcessMgmt { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if self-affecting process management is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading
  id: SelfAffectingThreading
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: SelfAffectingThreading
  nameWithType: HostProtectionAttribute.SelfAffectingThreading
  fullName: System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether self-affecting threading is exposed."
  remarks: "Self-affecting threading manipulates threads in a way that only affects user code."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SelfAffectingThreading property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/csharp/p-system.security.permis_3_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/cpp/p-system.security.permis_3_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/visualbasic/p-system.security.permis_3_1.vb)]"
  syntax:
    content: public bool SelfAffectingThreading { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if self-affecting threading is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.SharedState
  id: SharedState
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: SharedState
  nameWithType: HostProtectionAttribute.SharedState
  fullName: System.Security.Permissions.HostProtectionAttribute.SharedState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether shared state is exposed."
  remarks: "When SharedState is `true`, it indicates that a state is exposed that might be shared between threads."
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the SharedState property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/csharp/p-system.security.permis_15_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/cpp/p-system.security.permis_15_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/visualbasic/p-system.security.permis_15_1.vb)]"
  syntax:
    content: public bool SharedState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if shared state is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.SharedState*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.Synchronization
  id: Synchronization
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: Synchronization
  nameWithType: HostProtectionAttribute.Synchronization
  fullName: System.Security.Permissions.HostProtectionAttribute.Synchronization
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether synchronization is exposed."
  remarks: ''
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the Synchronization property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/csharp/p-system.security.permis_4_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/cpp/p-system.security.permis_4_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#6](~/add/codesnippet/visualbasic/p-system.security.permis_4_1.vb)]"
  syntax:
    content: public bool Synchronization { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if synchronization is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.Synchronization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.HostProtectionAttribute.UI
  id: UI
  parent: System.Security.Permissions.HostProtectionAttribute
  langs:
  - csharp
  name: UI
  nameWithType: HostProtectionAttribute.UI
  fullName: System.Security.Permissions.HostProtectionAttribute.UI
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets a value indicating whether the user interface is exposed."
  remarks: ''
  example:
  - "The following code example illustrates the use of the <xref:System.Security.Permissions.HostProtectionAttribute> attribute with the UI property. This example is part of a larger example provided for the <xref:System.Security.Permissions.HostProtectionAttribute> class.  \n  \n [!code-cs[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/csharp/p-system.security.permis_12_1.cs)]\n [!code-cpp[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/cpp/p-system.security.permis_12_1.cpp)]\n [!code-vb[System.Security.Permissions.HostProtectionAttribute.1.1#3](~/add/codesnippet/visualbasic/p-system.security.permis_12_1.vb)]"
  syntax:
    content: public bool UI { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the user interface is exposed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.HostProtectionAttribute.UI*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Permissions.HostProtectionAttribute.#ctor
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: HostProtectionAttribute()
  nameWithType: HostProtectionAttribute.HostProtectionAttribute()
  fullName: System.Security.Permissions.HostProtectionAttribute.HostProtectionAttribute()
- uid: System.Security.Permissions.HostProtectionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: HostProtectionAttribute(SecurityAction)
  nameWithType: HostProtectionAttribute.HostProtectionAttribute(SecurityAction)
  fullName: System.Security.Permissions.HostProtectionAttribute.HostProtectionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.HostProtectionAttribute.CreatePermission
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: HostProtectionAttribute.CreatePermission()
  fullName: System.Security.Permissions.HostProtectionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: ExternalProcessMgmt
  nameWithType: HostProtectionAttribute.ExternalProcessMgmt
  fullName: System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.HostProtectionAttribute.ExternalThreading
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: ExternalThreading
  nameWithType: HostProtectionAttribute.ExternalThreading
  fullName: System.Security.Permissions.HostProtectionAttribute.ExternalThreading
- uid: System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: MayLeakOnAbort
  nameWithType: HostProtectionAttribute.MayLeakOnAbort
  fullName: System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort
- uid: System.Security.Permissions.HostProtectionAttribute.Resources
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: Resources
  nameWithType: HostProtectionAttribute.Resources
  fullName: System.Security.Permissions.HostProtectionAttribute.Resources
- uid: System.Security.Permissions.HostProtectionResource
  parent: System.Security.Permissions
  isExternal: false
  name: HostProtectionResource
  nameWithType: HostProtectionResource
  fullName: System.Security.Permissions.HostProtectionResource
- uid: System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SecurityInfrastructure
  nameWithType: HostProtectionAttribute.SecurityInfrastructure
  fullName: System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure
- uid: System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SelfAffectingProcessMgmt
  nameWithType: HostProtectionAttribute.SelfAffectingProcessMgmt
  fullName: System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt
- uid: System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SelfAffectingThreading
  nameWithType: HostProtectionAttribute.SelfAffectingThreading
  fullName: System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading
- uid: System.Security.Permissions.HostProtectionAttribute.SharedState
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SharedState
  nameWithType: HostProtectionAttribute.SharedState
  fullName: System.Security.Permissions.HostProtectionAttribute.SharedState
- uid: System.Security.Permissions.HostProtectionAttribute.Synchronization
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: Synchronization
  nameWithType: HostProtectionAttribute.Synchronization
  fullName: System.Security.Permissions.HostProtectionAttribute.Synchronization
- uid: System.Security.Permissions.HostProtectionAttribute.UI
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: UI
  nameWithType: HostProtectionAttribute.UI
  fullName: System.Security.Permissions.HostProtectionAttribute.UI
- uid: System.Security.Permissions.HostProtectionAttribute.#ctor*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: HostProtectionAttribute
  nameWithType: HostProtectionAttribute.HostProtectionAttribute
- uid: System.Security.Permissions.HostProtectionAttribute.CreatePermission*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: HostProtectionAttribute.CreatePermission
- uid: System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: ExternalProcessMgmt
  nameWithType: HostProtectionAttribute.ExternalProcessMgmt
- uid: System.Security.Permissions.HostProtectionAttribute.ExternalThreading*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: ExternalThreading
  nameWithType: HostProtectionAttribute.ExternalThreading
- uid: System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: MayLeakOnAbort
  nameWithType: HostProtectionAttribute.MayLeakOnAbort
- uid: System.Security.Permissions.HostProtectionAttribute.Resources*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: Resources
  nameWithType: HostProtectionAttribute.Resources
- uid: System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SecurityInfrastructure
  nameWithType: HostProtectionAttribute.SecurityInfrastructure
- uid: System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SelfAffectingProcessMgmt
  nameWithType: HostProtectionAttribute.SelfAffectingProcessMgmt
- uid: System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SelfAffectingThreading
  nameWithType: HostProtectionAttribute.SelfAffectingThreading
- uid: System.Security.Permissions.HostProtectionAttribute.SharedState*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: SharedState
  nameWithType: HostProtectionAttribute.SharedState
- uid: System.Security.Permissions.HostProtectionAttribute.Synchronization*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: Synchronization
  nameWithType: HostProtectionAttribute.Synchronization
- uid: System.Security.Permissions.HostProtectionAttribute.UI*
  parent: System.Security.Permissions.HostProtectionAttribute
  isExternal: false
  name: UI
  nameWithType: HostProtectionAttribute.UI
