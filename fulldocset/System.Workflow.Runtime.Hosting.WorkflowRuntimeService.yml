### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  id: WorkflowRuntimeService
  children:
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop
  langs:
  - csharp
  name: WorkflowRuntimeService
  nameWithType: WorkflowRuntimeService
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  type: Class
  summary: "Representa a classe base abstrata partir da qual derivam os serviços de principais de motor de runtime do fluxo de trabalho."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Serviços que derivam da classe de WorkflowRuntimeService podem ser iniciados e parados pelo motor de runtime de fluxo de trabalho. A ordem em que os serviços são iniciados ou parados, no entanto, é indeterminada, e serviços podem necessitar de suporte de outros serviços para inicializar próprios corretamente quando são iniciados e, por outro lado, pode necessitar de suportar corretamente de outros serviços para encerrar quando estão paradas. Para resolver este problema, o motor de execução do fluxo de trabalho fornece mecanismos de duas fases para iniciar e parar os serviços. Quando <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>denomina-se, o fluxo de trabalho motor de runtime invoca o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>método para cada um dos respetivos serviços que derivam da classe de WorkflowRuntimeService.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>  Depois de iniciado todos esses serviços, o motor de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName>evento, o que faz com que o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>método para ser invocado para cada serviço de motor de execução do fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> O serviço pode substituir o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>método participar neste processo de dois fase.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> Da mesma forma, quando <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>denomina-se, o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>método, o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>evento e o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>método fornecer este mecanismo de duas fases.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>  A propriedade de estado contém um <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>valor que indica se o serviço está no processo de início ou paragem ou de que é completamente tiver sido iniciado ou parado.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>       Serviços que derivam da classe de WorkflowRuntimeService podem aumentar o <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName>evento quando se deparam uma condição que provoca uma exceção não processada ao chamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName>       Serviços derivam de <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>classe, a <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>classe, a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>classe e a <xref:System.Workflow.Runtime.Tracking.TrackingService>classe basicamente deriva da classe de WorkflowRuntimeService.</xref:System.Workflow.Runtime.Tracking.TrackingService> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> </xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> </xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public abstract class WorkflowRuntimeService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor
  id: '#ctor'
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: WorkflowRuntimeService()
  nameWithType: WorkflowRuntimeService.WorkflowRuntimeService()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.WorkflowRuntimeService()
  type: Constructor
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada numa classe derivada, inicializa uma nova instância do <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowRuntimeService&quot;> </xref> classe."
  remarks: "<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>é inicializado <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState></xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>"
  syntax:
    content: protected WorkflowRuntimeService ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted
  id: OnStarted
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: OnStarted()
  nameWithType: WorkflowRuntimeService.OnStarted()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando substituí-lo de uma classe derivada, representa o método que será chamado quando o motor de execução do fluxo de trabalho gera o <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime.Started&quot;> </xref> eventos."
  remarks: "O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>classe implementa um mecanismo de partida em duas fases, para que os serviços de motor de execução do fluxo de trabalho podem efetuar qualquer inicialização que depende de outros serviços depois do motor de execução do fluxo de trabalho foi invocado o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>método para todos os respetivos serviços de motor de runtime do fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> Após o tempo de execução do fluxo de trabalho foi chamado motor a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>método de todos os respetivos serviços de motor de runtime do fluxo de trabalho, gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName>eventos.</xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> Pode substituir o método de OnStarted para fornecer qualquer funcionalidade de arranque final necessária para o seu serviço quando o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName>o evento é gerado.</xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> Mechanics de subscrever e anular a subscrição do <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName>evento é processado internamente.</xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName>      > [!NOTE] > Se o seu serviço é adicionado ao motor de execução do fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>depois do motor de execução do fluxo de trabalho já foi iniciado, o motor de execução do fluxo de trabalho irá chamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>no seu serviço.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> No entanto, nesta situação, o <xref:System.Workflow.Runtime.WorkflowRuntime.Started>evento já tiver ocorrido, por conseguinte, o serviço poderá ter de efetuar qualquer inicialização que executará normalmente no OnStarted a partir de dentro de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>método.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.Started> Pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>para determinar se o motor de execução do fluxo de trabalho foi iniciado.</xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>       <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>está definido como <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>antes de ser invocado OnStarted.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState></xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>  A implementação predefinida do OnStarted não executa qualquer ação."
  syntax:
    content: protected virtual void OnStarted ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped
  id: OnStopped
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: OnStopped()
  nameWithType: WorkflowRuntimeService.OnStopped()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando substituí-lo de uma classe derivada, representa o método que será chamado quando o motor de execução do fluxo de trabalho gera o <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime.Stopped&quot;> </xref> eventos."
  remarks: "O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>classe implementa um mecanismo de paragem em duas fases, para que os serviços de motor de execução do fluxo de trabalho podem manter a algumas funcionalidades após a respetiva <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>método é invocado pelo motor de runtime de fluxo de trabalho que pode, se necessário, suportam o encerramento de outros serviços.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> Após o tempo de execução do fluxo de trabalho foi chamado motor a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>método de todos os respetivos serviços de motor de runtime do fluxo de trabalho, gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>eventos.</xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> Pode substituir o método de OnStopped para fornecer qualquer funcionalidade de encerramento final necessária para o seu serviço quando o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>o evento é gerado.</xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> Mechanics de subscrever e anular a subscrição do <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>evento é processado internamente.</xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>      > [!NOTE] > Se sua <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>é removido do motor de runtime do fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>enquanto o motor de execução do fluxo de trabalho está em execução, o motor de execução do fluxo de trabalho irá chamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>no seu serviço.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> No entanto, esta situação, o método OnStopped não será chamado para o seu serviço. Por conseguinte, o serviço poderá ter de efetuar qualquer encerramento final que executará normalmente no OnStopped a partir de dentro de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>método.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> Pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>para determinar se o motor de execução do fluxo de trabalho está em execução.</xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>       <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>está definido como <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>antes de ser invocado OnStopped.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState></xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>  A implementação predefinida do OnStopped não executa qualquer ação."
  syntax:
    content: protected virtual void OnStopped ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)
  id: RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: RaiseServicesExceptionNotHandledEvent(Exception,Guid)
  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception,Guid)
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception,Guid)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Gera o <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled&quot;> </xref> eventos."
  remarks: "O serviço pode chamar RaiseServicesExceptionNotHandledEvent para aumentar o <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName>eventos quando encontra uma exceção que este não pode processar durante a execução.</xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=fullName> Deverá passar a <xref:System.Guid>da instância do fluxo de trabalho associada com a exceção não processada.</xref:System.Guid> Por exemplo, um serviço de temporizador pode passar o <xref:System.Guid>associados com temporizador para o qual ocorreu a exceção.</xref:System.Guid>"
  syntax:
    content: protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);
    parameters:
    - id: exception
      type: System.Exception
      description: "A exceção que não foi possível processar."
    - id: instanceId
      type: System.Guid
      description: "O <xref:System.Guid>da instância do fluxo de trabalho associada com a exceção não processada.</xref:System.Guid>"
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
  id: Runtime
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: Runtime
  nameWithType: WorkflowRuntimeService.Runtime
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Obtém o <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> para este serviço."
  remarks: "O motor de execução do fluxo de trabalho define esta propriedade antes de chama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>no serviço.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>"
  syntax:
    content: protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "O <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowRuntimeService&quot;> </xref> objeto."
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start
  id: Start
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowRuntimeService.Start()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando substituí-lo de uma classe derivada, inicia o serviço e as alterações a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*>para <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState&quot;> </xref>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*>"
  remarks: "Iniciar é invocado pelo motor de runtime de fluxo de trabalho em todos os seus serviços que derivem do <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>classe quando <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>é chamado.</xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>       Início também é invocado pelo motor de runtime de fluxo de trabalho quando um serviço de motor de execução do fluxo de trabalho é adicionado ao motor de execução do fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>depois do motor de execução do fluxo de trabalho já foi iniciado.</xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> A implementação predefinida do início controla se o serviço foi iniciado e utiliza estas informações para gerar a exceção adequada se o serviço é iniciado enquanto já está em execução.       Pode fornecer funcionalidades adicionais necessárias para que o serviço foi iniciado pelo motor de runtime de fluxo de trabalho através da substituição este método. Não há nenhuma garantia sobre que, se existirem, serviços estarão em execução quando o motor de execução do fluxo de trabalho chama o início do seu serviço. Por conseguinte, o método de início, só deverá de efetuar qualquer inicialização que não dependem da funcionalidade fornecida por outros serviços. Isto inclui a funcionalidade fornecida pelo serviços principais, tais como o serviço de agendador. O motor de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName>eventos depois de ter chamado o método de início de todos os respetivo fluxo de trabalho dos serviços de motor de runtime.</xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=fullName> Se o serviço necessitar inicialização adicional depois de todos os serviços de motor de runtime de fluxo de trabalho tem sido iniciados, pode substituir o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>método para efetuar esta inicialização quando o evento de início é acionado.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>      > [!NOTE] > Se o seu serviço é adicionado ao motor de execução do fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>depois do motor de execução do fluxo de trabalho já foi iniciado, o motor de execução do fluxo de trabalho irá chamar início no seu serviço.</xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> No entanto, nesta situação, o <xref:System.Workflow.Runtime.WorkflowRuntime.Started>evento já tiver ocorrido, por conseguinte, o serviço poderá ter de efetuar qualquer inicialização que normalmente iriam efetuar no <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>de dentro do método de início.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.Started> Pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>para determinar se o motor de execução do fluxo de trabalho foi iniciado.</xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>       Início só deve ser chamado pelo motor de runtime de fluxo de trabalho."
  example:
  - "The following example demonstrates calling the Start method on an object derived from <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService.  This example is from the Termination Tracking Service SDK sample.  For more information, see [Termination Tracking Service Sample](http://msdn.microsoft.com/en-us/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  \n  \n [!code-cs[WF_Samples#112](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#112)]\n [!code-vb[WF_Samples#112](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#112)]"
  syntax:
    content: protected virtual void Start ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*>é uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) - ou - o serviço já foi iniciado.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*>"
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
  id: State
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: State
  nameWithType: WorkflowRuntimeService.State
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Obtém o estado do <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowRuntimeService&quot;> </xref>."
  remarks: "O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>classe implementa mecanismos de duas fases para iniciar e parar um serviço de motor de execução do fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> A primeira fase do mecanismo de início tem início quando o motor de runtime do fluxo de trabalho chama a implementação do <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>método para o serviço.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> Este método deve chamar a implementação base, <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>que define o estado para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> A segunda fase ocorre depois do motor de execução do fluxo de trabalho inicia todos os respetivos serviços de motor de runtime do fluxo de trabalho quando gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Started>eventos.</xref:System.Workflow.Runtime.WorkflowRuntime.Started> O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>internamente gere uma subscrição para este evento e o respetivo processador irá definir o estado para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>       O mecanismo de duas fases para parar um serviço de motor de execução do fluxo de trabalho tem início quando o motor de runtime do fluxo de trabalho chama a implementação do <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>método para o serviço.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> Este método deve chamar a implementação base, <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>que define o estado para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> Depois de parado todos os respetivos serviços de motor de runtime do fluxo de trabalho, o motor de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>eventos.</xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> O <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>internamente gere uma subscrição para este evento e o respetivo processador irá definir o estado para <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>"
  syntax:
    content: protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }
    return:
      type: System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState
      description: "Um do <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState&quot;> </xref> valores."
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop
  id: Stop
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  langs:
  - csharp
  name: Stop()
  nameWithType: WorkflowRuntimeService.Stop()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando substituí-lo de uma classe derivada, para o serviço e as alterações a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*>para <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState&quot;> </xref>.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*>"
  remarks: "Parar é invocado pelo motor de runtime de fluxo de trabalho em todos os seus serviços que derivam a <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>classe quando <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>é chamado.</xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>  Parar também é invocado pelo motor de runtime de fluxo de trabalho quando um serviço de motor de execução do fluxo de trabalho é removido do motor de execução do fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>.</xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> A implementação predefinida do paragem controla se o serviço foi iniciado e utiliza estas informações para gerar a exceção adequada se o serviço está parado antes de que é iniciado.       Pode fornecer funcionalidades adicionais necessárias para que o serviço parou pelo motor de runtime de fluxo de trabalho através da substituição este método. Não há nenhuma garantia sobre que, se existir, será de serviços de ser parada ou em execução quando parar é chamado no seu serviço. O motor de execução do fluxo de trabalho gera o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>eventos depois de ter chamado o método de paragem de todos os respetivo fluxo de trabalho dos serviços de motor de runtime.</xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> O serviço poderá ter de manter algumas funcionalidades residuais para suportar outros serviços até que todos os os fluxo de trabalho em tempo de execução serviços de motor tem tido os respetivos métodos de paragem foi invocados pelo motor de runtime do fluxo de trabalho. Se o serviço tem de manter essa funcionalidade, pode substituir o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>método para efetuar qualquer ação adicional necessária para concluir a parar o serviço quando o <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName>o evento é gerado.</xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=fullName> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>      > [!NOTE] > Se sua <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>é removido do motor de runtime do fluxo de trabalho por uma chamada para <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>enquanto o motor de execução do fluxo de trabalho está em execução, o motor de execução do fluxo de trabalho irá chamar paragem do seu serviço.</xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> No entanto, nesta situação, o <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>método não será chamado para o seu serviço.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> Por conseguinte, o serviço poderá ter de efetuar qualquer funcionalidade de encerramento adicionais que normalmente iriam efetuar no <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>de dentro do método de paragem.</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> Pode testar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>para determinar se o motor de execução do fluxo de trabalho está em execução.</xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>       Parar só deve ser chamado pelo motor de runtime de fluxo de trabalho."
  syntax:
    content: protected virtual void Stop ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*>é uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic).</xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*>       - ou - o serviço ainda não foi iniciado."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: WorkflowRuntimeService()
  nameWithType: WorkflowRuntimeService.WorkflowRuntimeService()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.WorkflowRuntimeService()
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: OnStarted()
  nameWithType: WorkflowRuntimeService.OnStarted()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted()
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: OnStopped()
  nameWithType: WorkflowRuntimeService.OnStopped()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped()
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: RaiseServicesExceptionNotHandledEvent(Exception,Guid)
  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception,Guid)
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception,Guid)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: Runtime
  nameWithType: WorkflowRuntimeService.Runtime
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: Start()
  nameWithType: WorkflowRuntimeService.Start()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start()
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: State
  nameWithType: WorkflowRuntimeService.State
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState
  parent: System.Workflow.Runtime.Hosting
  isExternal: false
  name: WorkflowRuntimeServiceState
  nameWithType: WorkflowRuntimeServiceState
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: Stop()
  nameWithType: WorkflowRuntimeService.Stop()
  fullName: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop()
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: WorkflowRuntimeService
  nameWithType: WorkflowRuntimeService.WorkflowRuntimeService
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: OnStarted
  nameWithType: WorkflowRuntimeService.OnStarted
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: OnStopped
  nameWithType: WorkflowRuntimeService.OnStopped
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: RaiseServicesExceptionNotHandledEvent
  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: Runtime
  nameWithType: WorkflowRuntimeService.Runtime
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: Start
  nameWithType: WorkflowRuntimeService.Start
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: State
  nameWithType: WorkflowRuntimeService.State
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop*
  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: Stop
  nameWithType: WorkflowRuntimeService.Stop
