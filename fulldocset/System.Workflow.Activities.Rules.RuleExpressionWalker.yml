### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker
  id: RuleExpressionWalker
  children:
  - System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)
  - System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)
  - System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  - System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)
  - System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  - System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)
  langs:
  - csharp
  name: RuleExpressionWalker
  nameWithType: RuleExpressionWalker
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker
  type: Class
  summary: "Propagates the current behavior in the expression to child nodes. This class cannot be inherited."
  remarks: "This class is used by all <xref:System.Workflow.Activities.Rules.IRuleExpression> methods to propagate behavior to child nodes."
  syntax:
    content: public static class RuleExpressionWalker
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)
  id: AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  langs:
  - csharp
  name: AnalyzeUsage(RuleAnalysis,CodeExpression,Boolean,Boolean,RulePathQualifier)
  nameWithType: RuleExpressionWalker.AnalyzeUsage(RuleAnalysis,CodeExpression,Boolean,Boolean,RulePathQualifier)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(RuleAnalysis,CodeExpression,Boolean,Boolean,RulePathQualifier)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities.Rules
  summary: "Identifies the fields and properties used by an expression and adds these as symbols to the <see cref=&quot;T:System.Workflow.Activities.Rules.RuleAnalysis&quot;></see> instance."
  syntax:
    content: public static void AnalyzeUsage (System.Workflow.Activities.Rules.RuleAnalysis analysis, System.CodeDom.CodeExpression expression, bool isRead, bool isWritten, System.Workflow.Activities.Rules.RulePathQualifier qualifier);
    parameters:
    - id: analysis
      type: System.Workflow.Activities.Rules.RuleAnalysis
      description: "The  instance that stores symbols representing the properties and fields used by rule conditions and actions."
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "The expression being executed."
    - id: isRead
      type: System.Boolean
      description: "\n     if fields and properties read by a  are to be added to ; otherwise, ."
    - id: isWritten
      type: System.Boolean
      description: "\n     if fields and properties written by a  are to be added to ; otherwise, ."
    - id: qualifier
      type: System.Workflow.Activities.Rules.RulePathQualifier
      description: "The path of a field or property determined up to this point."
  overload: System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    analysis is a null reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)
  id: Clone(System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  langs:
  - csharp
  name: Clone(CodeExpression)
  nameWithType: RuleExpressionWalker.Clone(CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(CodeExpression)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities.Rules
  summary: "Creates a deep copy of the child nodes of the current <see cref=&quot;T:System.CodeDom.CodeExpression&quot;></see>."
  syntax:
    content: public static System.CodeDom.CodeExpression Clone (System.CodeDom.CodeExpression originalExpression);
    parameters:
    - id: originalExpression
      type: System.CodeDom.CodeExpression
      description: "The expression that the clone is based on."
    return:
      type: System.CodeDom.CodeExpression
      description: "To be added."
  overload: System.Workflow.Activities.Rules.RuleExpressionWalker.Clone*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  id: Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  langs:
  - csharp
  name: Decompile(StringBuilder,CodeExpression,CodeExpression)
  nameWithType: RuleExpressionWalker.Decompile(StringBuilder,CodeExpression,CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(StringBuilder,CodeExpression,CodeExpression)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities.Rules
  summary: "Decompiles the child nodes of the expression into string form."
  syntax:
    content: public static void Decompile (System.Text.StringBuilder stringBuilder, System.CodeDom.CodeExpression expression, System.CodeDom.CodeExpression parentExpression);
    parameters:
    - id: stringBuilder
      type: System.Text.StringBuilder
      description: "The <xref:System.Text.StringBuilder> that contains the mutable string of characters."
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "The current ."
    - id: parentExpression
      type: System.CodeDom.CodeExpression
      description: "The parent ."
  overload: System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)
  id: Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  langs:
  - csharp
  name: Evaluate(RuleExecution,CodeExpression)
  nameWithType: RuleExpressionWalker.Evaluate(RuleExecution,CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(RuleExecution,CodeExpression)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities.Rules
  summary: "Evaluates the expression and all child expressions."
  syntax:
    content: public static System.Workflow.Activities.Rules.RuleExpressionResult Evaluate (System.Workflow.Activities.Rules.RuleExecution execution, System.CodeDom.CodeExpression expression);
    parameters:
    - id: execution
      type: System.Workflow.Activities.Rules.RuleExecution
      description: "The  to execute the expression."
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "The  to evaluate."
    return:
      type: System.Workflow.Activities.Rules.RuleExpressionResult
      description: "To be added."
  overload: System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    execution is a null reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  id: Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  langs:
  - csharp
  name: Match(CodeExpression,CodeExpression)
  nameWithType: RuleExpressionWalker.Match(CodeExpression,CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Match(CodeExpression,CodeExpression)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities.Rules
  summary: "Compares the current expression and child nodes to another expression to determine whether they are equal."
  syntax:
    content: public static bool Match (System.CodeDom.CodeExpression firstExpression, System.CodeDom.CodeExpression secondExpression);
    parameters:
    - id: firstExpression
      type: System.CodeDom.CodeExpression
      description: "The first  in the comparison."
    - id: secondExpression
      type: System.CodeDom.CodeExpression
      description: "The second  in the comparison."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Workflow.Activities.Rules.RuleExpressionWalker.Match*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)
  id: Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  langs:
  - csharp
  name: Validate(RuleValidation,CodeExpression,Boolean)
  nameWithType: RuleExpressionWalker.Validate(RuleValidation,CodeExpression,Boolean)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(RuleValidation,CodeExpression,Boolean)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities.Rules
  summary: "Verifies that the expression and child nodes are configured correctly and has no errors."
  syntax:
    content: public static System.Workflow.Activities.Rules.RuleExpressionInfo Validate (System.Workflow.Activities.Rules.RuleValidation validation, System.CodeDom.CodeExpression expression, bool isWritten);
    parameters:
    - id: validation
      type: System.Workflow.Activities.Rules.RuleValidation
      description: "The  to manage the validation process."
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "The  to evaluate."
    - id: isWritten
      type: System.Boolean
      description: "\n     if fields and properties written by a  are stored in by ; otherwise, ."
    return:
      type: System.Workflow.Activities.Rules.RuleExpressionInfo
      description: "To be added."
  overload: System.Workflow.Activities.Rules.RuleExpressionWalker.Validate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    validation is a null reference ( in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The expression is null and the errors collection on the  object is a null reference ()."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: AnalyzeUsage(RuleAnalysis,CodeExpression,Boolean,Boolean,RulePathQualifier)
  nameWithType: RuleExpressionWalker.AnalyzeUsage(RuleAnalysis,CodeExpression,Boolean,Boolean,RulePathQualifier)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(RuleAnalysis,CodeExpression,Boolean,Boolean,RulePathQualifier)
- uid: System.Workflow.Activities.Rules.RuleAnalysis
  parent: System.Workflow.Activities.Rules
  isExternal: false
  name: RuleAnalysis
  nameWithType: RuleAnalysis
  fullName: System.Workflow.Activities.Rules.RuleAnalysis
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Activities.Rules.RulePathQualifier
  parent: System.Workflow.Activities.Rules
  isExternal: false
  name: RulePathQualifier
  nameWithType: RulePathQualifier
  fullName: System.Workflow.Activities.Rules.RulePathQualifier
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Clone(CodeExpression)
  nameWithType: RuleExpressionWalker.Clone(CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(CodeExpression)
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Decompile(StringBuilder,CodeExpression,CodeExpression)
  nameWithType: RuleExpressionWalker.Decompile(StringBuilder,CodeExpression,CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(StringBuilder,CodeExpression,CodeExpression)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Evaluate(RuleExecution,CodeExpression)
  nameWithType: RuleExpressionWalker.Evaluate(RuleExecution,CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(RuleExecution,CodeExpression)
- uid: System.Workflow.Activities.Rules.RuleExpressionResult
  parent: System.Workflow.Activities.Rules
  isExternal: false
  name: RuleExpressionResult
  nameWithType: RuleExpressionResult
  fullName: System.Workflow.Activities.Rules.RuleExpressionResult
- uid: System.Workflow.Activities.Rules.RuleExecution
  parent: System.Workflow.Activities.Rules
  isExternal: false
  name: RuleExecution
  nameWithType: RuleExecution
  fullName: System.Workflow.Activities.Rules.RuleExecution
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Match(CodeExpression,CodeExpression)
  nameWithType: RuleExpressionWalker.Match(CodeExpression,CodeExpression)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Match(CodeExpression,CodeExpression)
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Validate(RuleValidation,CodeExpression,Boolean)
  nameWithType: RuleExpressionWalker.Validate(RuleValidation,CodeExpression,Boolean)
  fullName: System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(RuleValidation,CodeExpression,Boolean)
- uid: System.Workflow.Activities.Rules.RuleExpressionInfo
  parent: System.Workflow.Activities.Rules
  isExternal: false
  name: RuleExpressionInfo
  nameWithType: RuleExpressionInfo
  fullName: System.Workflow.Activities.Rules.RuleExpressionInfo
- uid: System.Workflow.Activities.Rules.RuleValidation
  parent: System.Workflow.Activities.Rules
  isExternal: false
  name: RuleValidation
  nameWithType: RuleValidation
  fullName: System.Workflow.Activities.Rules.RuleValidation
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage*
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: AnalyzeUsage
  nameWithType: RuleExpressionWalker.AnalyzeUsage
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Clone*
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Clone
  nameWithType: RuleExpressionWalker.Clone
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile*
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Decompile
  nameWithType: RuleExpressionWalker.Decompile
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate*
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Evaluate
  nameWithType: RuleExpressionWalker.Evaluate
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Match*
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Match
  nameWithType: RuleExpressionWalker.Match
- uid: System.Workflow.Activities.Rules.RuleExpressionWalker.Validate*
  parent: System.Workflow.Activities.Rules.RuleExpressionWalker
  isExternal: false
  name: Validate
  nameWithType: RuleExpressionWalker.Validate
