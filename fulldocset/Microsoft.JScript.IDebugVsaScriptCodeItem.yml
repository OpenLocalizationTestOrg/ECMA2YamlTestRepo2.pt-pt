### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem
  id: IDebugVsaScriptCodeItem
  children:
  - Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  - Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  langs:
  - csharp
  name: IDebugVsaScriptCodeItem
  nameWithType: IDebugVsaScriptCodeItem
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem
  type: Interface
  summary: "Define os métodos que avaliar expressões e analisar cadeias. Esta interface é normalmente implementada por um objecto que representa um bloco de código e, normalmente é chamado por um depurador. Esta interface fornece funcionalidades adicionais que é necessário um anfitrião IActiveScript."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")]

      public interface IDebugVsaScriptCodeItem
  implements: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  id: Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Quando implementada numa classe, avalia o bloco, expressão ou instrução representado pelo item de código e devolve o valor. Normalmente, é denominado por um depurador que necessita para avaliar a expressão (por uma janela de monitorização, por exemplo). Para as expressões, o valor é o resultado da expressão. Para blocos e instruções, a expressão resultante é a última expressão calculada pelo bloco ou instrução."
  remarks: "Tenha em atenção que o método de Evaluate é funcionalmente idêntico do <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A>método.</xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> Apenas os atributos de empacotamento de referências diferem. Esta versão da interface permite um depurador não gerido obter o valor devolvido como uma `IUnknown` ponteiro em vez de um `VARIANT`."
  syntax:
    content: public object Evaluate ();
    parameters: []
    return:
      type: System.Object
      description: "Devolve um valor que representa a avaliação do bloco, expressão ou instrução."
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  id: ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: 'Quando implementada numa classe, analisa cadeias e devolve as informações de saída analisar. Este método é normalmente designado por um depurador que tem de analisar as informações sobre um ponto de interrupção que é representada como uma <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref>. O depurador pode ter um ponto de interrupção digitou pelo utilizador no formato *functionname-argumentos-ILoffset*. Uma cadeia com o nome do ponto de interrupção pode ter um formato complexo, por exemplo, `F.B(C.D[], int, arg : double ) : C.Abc + 123.` a lista de parâmetros é opcional, porque é o desfasamento do IL.'
  syntax:
    content: public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);
    parameters:
    - id: input
      type: System.String
      description: "Uma cadeia de formado de ponto de interrupção com nome conferindo a uma função, a lista de argumentos opcionais e o desfasamento do IL opcional."
    - id: functionName
      type: System.String
      description: "Parâmetro out devolver o nome da função analisar fora de cadeia de entrada ou a cadeia vazia se a cadeia de entrada não está corretamente formada."
    - id: nargs
      type: System.Int32
      description: "Parâmetro out a devolver o número de argumentos na lista de argumento opcional. Devolve zero se não houver nenhuma lista de argumentos ou se a cadeia não está corretamente formada."
    - id: arguments
      type: System.String
      description: "Parâmetro out a devolver uma lista separada por espaço dos nomes dos tipos de todos os argumentos na lista de argumentos ou uma cadeia vazia se a lista de argumentos estava em falta ou cadeia de entrada não foi corretamente formada."
    - id: returnType
      type: System.String
      description: "Parâmetro out devolver uma cadeia que contém o tipo de retorno da função com o nome na entrada, ou a cadeia vazia se o tipo de retorno estava em falta ou cadeia de entrada não foi corretamente formado."
    - id: offset
      type: System.UInt64
      description: "Muito número inteiro não assinado dar o desfasamento do IL da cadeia de entrada, ou zero não se ocorreu nenhum desfasamento do IL ou a cadeia não foi corretamente formada."
    return:
      type: System.Boolean
      description: "Devolve <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se o ponto de interrupção nomeado com êxito é analisado, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> caso contrário."
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate
  nameWithType: IDebugVsaScriptCodeItem.Evaluate
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint
