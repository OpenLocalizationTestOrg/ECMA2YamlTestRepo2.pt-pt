### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SearchResultCollection
  id: SearchResultCollection
  children:
  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  - System.DirectoryServices.SearchResultCollection.Count
  - System.DirectoryServices.SearchResultCollection.Dispose
  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  - System.DirectoryServices.SearchResultCollection.Finalize
  - System.DirectoryServices.SearchResultCollection.GetEnumerator
  - System.DirectoryServices.SearchResultCollection.Handle
  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: SearchResultCollection
  nameWithType: SearchResultCollection
  fullName: System.DirectoryServices.SearchResultCollection
  type: Class
  summary: "The SearchResultCollection class contains the <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> instances that the Active Directory hierarchy returned during a <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> query."
  remarks: "Due to implementation restrictions, the SearchResultCollection class cannot release all of its unmanaged resources when it is garbage collected. To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the SearchResultCollection object is no longer needed."
  syntax:
    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  id: Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Determines if a specified <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object is in this collection."
  syntax:
    content: public bool Contains (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "The <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object to find."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified property belongs to this collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.SearchResultCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copies all <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> objects in this collection to the specific array, starting at the specified index in the target array."
  syntax:
    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);
    parameters:
    - id: results
      type: System.DirectoryServices.SearchResult[]
      description: "The array of <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> objects that receives the elements of this collection."
    - id: index
      type: System.Int32
      description: "The zero-based index in `results` where this method starts copying this collection."
  overload: System.DirectoryServices.SearchResultCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Count
  id: Count
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets the number of <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> objects in this collection."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> objects in this collection."
  overload: System.DirectoryServices.SearchResultCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  id: Dispose
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Releases all resources that are used by the <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;></xref> object."
  remarks: "The Dispose method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).       The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, an application must call the Dispose method explicitly to prevent a memory leak."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Releases the unmanaged resources that are used by the <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;></xref> object and optionally releases the managed resources."
  remarks: "This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes Dispose with the `disposing` parameter set to `false`.       When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references.       The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object. Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.       This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.       For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  id: Finalize
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Overrides the &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; method."
  syntax:
    content: ~SearchResultCollection ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Returns an enumerator that you can use to iterate through this collection."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> object that you can use to iterate through this collection."
  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Handle
  id: Handle
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets the handle that is returned by the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method that performs the actual search. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  remarks: "The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) method, which makes the query results available to the T:System.DirectoryServices.SearchResultCollection object. For more information, see the [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) topic in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       Each time that a query is performed, a handle for the results of that query is associated with its  <xref:System.DirectoryServices.SearchResultCollection> object. This handle corresponds to the search handle in ADSI. This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak. The garbage collector does not free memory for this particular object."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "The ADS_SEARCH_HANDLE value that this collection uses."
  overload: System.DirectoryServices.SearchResultCollection.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  id: IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Returns the index of the first occurrence of the specified <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object in this collection."
  syntax:
    content: public int IndexOf (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "The <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object to search for in this collection."
    return:
      type: System.Int32
      description: "The zero-based index of the first matching object. Returns -1 if no member of this collection is identical to the <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object."
  overload: System.DirectoryServices.SearchResultCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets the <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object that is located at a specified index in this collection."
  remarks: "In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.       In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>."
  syntax:
    content: public System.DirectoryServices.SearchResult this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object to retrieve."
    return:
      type: System.DirectoryServices.SearchResult
      description: "The <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref> object that is located at the specified index."
  overload: System.DirectoryServices.SearchResultCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  id: PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets the <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref> properties that were specified before the search was executed."
  syntax:
    content: public string[] PropertiesLoaded { get; }
    return:
      type: System.String[]
      description: "An array of type <xref:System.String> that contains the properties that were specified in the <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> property collection before the search was executed."
  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copies the elements of the <xref:System.Collections.ICollection> to an <xref:System.Array>, starting at a particular <xref:System.Array> index."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "The one-dimensional <xref:System.Array> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <xref:System.Array> must have zero-based indexing."
    - id: index
      type: System.Int32
      description: "The zero-based index in `array` at which copying begins."
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref:System.Collections.ICollection> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "The type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination <code>array</code>."
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets a value indicating whether access to the <xref:System.Collections.ICollection> is synchronized (thread safe)."
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access to the <xref:System.Collections.ICollection> is synchronized (thread safe); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets an object that can be used to synchronize access to the <xref:System.Collections.ICollection>."
  remarks: "For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection&quot;s `SyncRoot` property.       Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.       In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:      ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ```       [Visual Basic]      ```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ```       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       [Visual Basic, C#]       The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:      ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ```      ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "An object that can be used to synchronize access to the <xref:System.Collections.ICollection>."
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SearchResult
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
- uid: System.DirectoryServices.SearchResult[]
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult[]
  spec.csharp:
  - uid: System.DirectoryServices.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: SearchResult[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SearchResultCollection.Count
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SearchResultCollection.Contains*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains
  nameWithType: SearchResultCollection.Contains
- uid: System.DirectoryServices.SearchResultCollection.CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo
  nameWithType: SearchResultCollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.Count*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose
  nameWithType: SearchResultCollection.Dispose
- uid: System.DirectoryServices.SearchResultCollection.Finalize*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize
  nameWithType: SearchResultCollection.Finalize
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SearchResultCollection.GetEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
- uid: System.DirectoryServices.SearchResultCollection.IndexOf*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf
  nameWithType: SearchResultCollection.IndexOf
- uid: System.DirectoryServices.SearchResultCollection.Item*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item
  nameWithType: SearchResultCollection.Item
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
