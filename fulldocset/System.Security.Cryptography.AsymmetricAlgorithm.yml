### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  id: AsymmetricAlgorithm
  children:
  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Create
  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  langs:
  - csharp
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
  type: Class
  summary: "Represents the abstract base class from which all implementations of asymmetric algorithms must inherit."
  remarks: "Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key. Both keys are unique to the entity. The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver. The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver&quot;s public key. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is an implementation of a public-key algorithm. For an in-depth discussion of public-key encryption and algorithms, see the &quot;Public-Key Encryption&quot; section in [Cryptographic Services](~/add/includes/ajax-current-ext-md.md). For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see [How to: Create a Public-Private Key Pair](~/add/includes/ajax-current-ext-md.md).       You can use public-key systems to form digital signatures. Digital signatures are used to help to protect the integrity of data. For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender&quot;s private key to create the sender&quot;s personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender&quot;s public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that anyone can verify a signature, because the sender&quot;s public key is common knowledge. This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.       The .NET Framework provides the following classes that implement digital signature algorithms: <xref:System.Security.Cryptography.DSACryptoServiceProvider>, <xref:System.Security.Cryptography.RSACryptoServiceProvider>, <xref:System.Security.Cryptography.ECDsa> (base class), and <xref:System.Security.Cryptography.ECDsaCng>.       The <xref:System.Security.Cryptography> namespace provides concrete classes for <xref:System.Security.Cryptography.RSA> and <xref:System.Security.Cryptography.DSA> only.       To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:      -   [How to: Encrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)      -   [How to: Decrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)      -   [How to: Sign XML Documents with Digital Signatures](~/add/includes/ajax-current-ext-md.md)      -   [How to: Verify the Digital Signatures of XML Documents](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the AsymmetricAlgorithm class.  An additional class is provided to demonstrate how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/csharp/t-system.security.crypto_0_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/cpp/t-system.security.crypto_0_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/visualbasic/t-system.security.crypto_0_1.vb)]  \n  \n Here's an additional class that demonstrates how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/csharp/t-system.security.crypto_0_2.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/visualbasic/t-system.security.crypto_0_2.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/cpp/t-system.security.crypto_0_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> class."
  remarks: "You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> and <xref:System.Security.Cryptography.DSACryptoServiceProvider> classes are the only currently supported implementations."
  syntax:
    content: protected AsymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The implementation of the derived class is not valid."
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases all resources used by the <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> class."
  remarks: "This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources of the current `customCrypto` object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_101_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_101_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_101_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates a default cryptographic object used to perform the asymmetric algorithm."
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/csharp/m-system.security.crypto_87_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/cpp/m-system.security.crypto_87_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/visualbasic/m-system.security.crypto_87_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "A new <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;></xref> instance, unless the default settings have been changed with the [&lt;cryptoClass&gt; element](../Topic/%3CcryptoClass%3E%20Element.md)."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates an instance of the specified implementation of an asymmetric algorithm."
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/csharp/m-system.security.crypto_118_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/cpp/m-system.security.crypto_118_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/visualbasic/m-system.security.crypto_118_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "The asymmetric algorithm implementation to use. The following table shows the valid values for the `algName` parameter and the algorithms they map to.       <table><thead><tr><th> Parameter value       </th><th> Implements       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref></td></tr><tr><td> RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> ECDsa       </td><td><xref href=&quot;System.Security.Cryptography.ECDsa&quot;></xref></td></tr><tr><td> ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> ECDH       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellman       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "A new instance of the specified asymmetric algorithm implementation."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases all resources used by the current instance of the <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> class."
  remarks: "Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.AsymmetricAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.AsymmetricAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.AsymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.AsymmetricAlgorithm> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.AsymmetricAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.AsymmetricAlgorithm> object&quot;s `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> class and optionally releases the managed resources."
  remarks: "This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.AsymmetricAlgorithm> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, reconstructs an <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> object from an XML string. Otherwise, throws a <xref:System.NotImplementedException>."
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the FromXmlString method to parse the specified XML string to populate the current <xref:System.Security.Cryptography.CspParameters> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/csharp/m-system.security.crypto_86_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/cpp/m-system.security.crypto_86_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/visualbasic/m-system.security.crypto_86_1.vb)]"
  syntax:
    content: public virtual void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "The XML string to use to reconstruct the <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> object."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <xref:System.NotImplementedException>."
  remarks: ''
  example:
  - "The following code example demonstrates how to override the KeyExchangeAlgorithm property to return the name for the key exchange algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/csharp/p-system.security.crypto_83_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/cpp/p-system.security.crypto_83_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/visualbasic/p-system.security.crypto_83_1.vb)]"
  syntax:
    content: public virtual string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "The name of the key exchange algorithm."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm."
  remarks: "The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property."
  example:
  - "The following code example demonstrates how to override the KeySize property to verify that it falls within the range identified in the local `keySizes` member variable. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/csharp/p-system.security.crypto_112_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/cpp/p-system.security.crypto_112_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/visualbasic/p-system.security.crypto_112_1.vb)]"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "The size, in bits, of the key modulus used by the asymmetric algorithm."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The key modulus size is invalid."
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Represents the size, in bits, of the key modulus used by the asymmetric algorithm."
  remarks: "The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A> property."
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the key sizes that are supported by the asymmetric algorithm."
  remarks: "The asymmetric algorithm supports only key sizes that match an entry in this array."
  example:
  - "The following code example demonstrates how to call the LegalKeySizes property to retrieve the <xref:System.Security.Cryptography.KeySizes.MinSize%2A>, <xref:System.Security.Cryptography.KeySizes.MaxSize%2A>, and <xref:System.Security.Cryptography.KeySizes.SkipSize%2A> properties. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/csharp/p-system.security.crypto_30_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/visualbasic/p-system.security.crypto_30_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/cpp/p-system.security.crypto_30_1.cpp)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "An array that contains the key sizes supported by the asymmetric algorithm."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Specifies the key sizes that are supported by the asymmetric algorithm."
  remarks: "The asymmetric algorithm supports only key sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property."
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <xref:System.NotImplementedException>."
  remarks: ''
  example:
  - "The following code example demonstrates how to override the SignatureAlgorithm property to return the name of the signature algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/csharp/p-system.security.crypto_43_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/cpp/p-system.security.crypto_43_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/visualbasic/p-system.security.crypto_43_1.vb)]"
  syntax:
    content: public virtual string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "The name of the signature algorithm."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, creates and returns an XML string representation of the current <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> object. Otherwise, throws a <xref:System.NotImplementedException>."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the ToXmlString method to create an XML representation of the parameters in the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/csharp/m-system.security.crypto_109_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/cpp/m-system.security.crypto_109_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/visualbasic/m-system.security.crypto_109_1.vb)]"
  syntax:
    content: public virtual string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include private parameters; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.String
      description: "An XML string encoding of the current <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> object."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: AsymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: AsymmetricAlgorithm.Create
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: AsymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString
  nameWithType: AsymmetricAlgorithm.FromXmlString
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString
  nameWithType: AsymmetricAlgorithm.ToXmlString
