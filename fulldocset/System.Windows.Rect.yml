### YamlMime:ManagedReference
items:
- uid: System.Windows.Rect
  id: Rect
  children:
  - System.Windows.Rect.#ctor(System.Windows.Size)
  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)
  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)
  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)
  - System.Windows.Rect.Bottom
  - System.Windows.Rect.BottomLeft
  - System.Windows.Rect.BottomRight
  - System.Windows.Rect.Contains(System.Windows.Point)
  - System.Windows.Rect.Contains(System.Windows.Rect)
  - System.Windows.Rect.Contains(System.Double,System.Double)
  - System.Windows.Rect.Empty
  - System.Windows.Rect.Equals(System.Object)
  - System.Windows.Rect.Equals(System.Windows.Rect)
  - System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.GetHashCode
  - System.Windows.Rect.Height
  - System.Windows.Rect.Inflate(System.Windows.Size)
  - System.Windows.Rect.Inflate(System.Double,System.Double)
  - System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)
  - System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)
  - System.Windows.Rect.Intersect(System.Windows.Rect)
  - System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.IntersectsWith(System.Windows.Rect)
  - System.Windows.Rect.IsEmpty
  - System.Windows.Rect.Left
  - System.Windows.Rect.Location
  - System.Windows.Rect.Offset(System.Windows.Vector)
  - System.Windows.Rect.Offset(System.Double,System.Double)
  - System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)
  - System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)
  - System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.Parse(System.String)
  - System.Windows.Rect.Right
  - System.Windows.Rect.Scale(System.Double,System.Double)
  - System.Windows.Rect.Size
  - System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Rect.Top
  - System.Windows.Rect.TopLeft
  - System.Windows.Rect.TopRight
  - System.Windows.Rect.ToString
  - System.Windows.Rect.ToString(System.IFormatProvider)
  - System.Windows.Rect.Transform(System.Windows.Media.Matrix)
  - System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  - System.Windows.Rect.Union(System.Windows.Point)
  - System.Windows.Rect.Union(System.Windows.Rect)
  - System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)
  - System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.Width
  - System.Windows.Rect.X
  - System.Windows.Rect.Y
  langs:
  - csharp
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
  type: Struct
  summary: "Describes the width, height, and location of a rectangle."
  remarks: "<a name=&quot;xamlAttributeUsage_Duration&quot;></a>    ## XAML Attribute Usage      ```   <objectÂ property=&quot;x,y,width,height&quot;/>   ```      <a name=&quot;xamlValues_MinWidth&quot;></a>    ## XAML Values    *x*    <xref:System.Double?displayProperty=fullName>       The x-coordinate location of the left side of the rectangle.       *y*    <xref:System.Double?displayProperty=fullName>       The y-coordinate location of the top side of the rectangle.       *width*    <xref:System.Double?displayProperty=fullName>       A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle.       *height*    <xref:System.Double?displayProperty=fullName>       A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle."
  example:
  - "The following example shows how to use a Rect structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))]

      public struct Rect : IFormattable
  inheritance:
  - System.ValueType
  implements:
  - System.IFormattable
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Size)
  id: '#ctor(System.Windows.Size)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Size)
  nameWithType: Rect.Rect(Size)
  fullName: System.Windows.Rect.Rect(Size)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Rect&quot;></xref> structure that is of the specified size and is located at (0,0)."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample2_csharp)]"
  syntax:
    content: public Rect (System.Windows.Size size);
    parameters:
    - id: size
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;></xref> structure that specifies the width and height of the rectangle."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)
  id: '#ctor(System.Windows.Point,System.Windows.Point)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Point,Point)
  nameWithType: Rect.Rect(Point,Point)
  fullName: System.Windows.Rect.Rect(Point,Point)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Rect&quot;></xref> structure that is exactly large enough to contain the two specified points."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample3_csharp)]"
  syntax:
    content: public Rect (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "The first point that the new rectangle must contain."
    - id: point2
      type: System.Windows.Point
      description: "The second point that the new rectangle must contain."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)
  id: '#ctor(System.Windows.Point,System.Windows.Size)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Point,Size)
  nameWithType: Rect.Rect(Point,Size)
  fullName: System.Windows.Rect.Rect(Point,Size)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Rect&quot;></xref> structure that has the specified top-left corner location and the specified width and height."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample4_csharp)]"
  syntax:
    content: public Rect (System.Windows.Point location, System.Windows.Size size);
    parameters:
    - id: location
      type: System.Windows.Point
      description: "A point that specifies the location of the top-left corner of the rectangle."
    - id: size
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;></xref> structure that specifies the width and height of the rectangle."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)
  id: '#ctor(System.Windows.Point,System.Windows.Vector)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Point,Vector)
  nameWithType: Rect.Rect(Point,Vector)
  fullName: System.Windows.Rect.Rect(Point,Vector)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Rect&quot;></xref> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample5_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample5_csharp)]"
  syntax:
    content: public Rect (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The first point the rectangle must contain."
    - id: vector
      type: System.Windows.Vector
      description: "The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Double,Double,Double,Double)
  nameWithType: Rect.Rect(Double,Double,Double,Double)
  fullName: System.Windows.Rect.Rect(Double,Double,Double,Double)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Rect&quot;></xref> structure that has the specified x-coordinate, y-coordinate, width, and height."
  remarks: "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.       [!code-cs[RectExamples_snip#CreateRectExample6_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)]"
  syntax:
    content: public Rect (double x, double y, double width, double height);
    parameters:
    - id: x
      type: System.Double
      description: "The x-coordinate of the top-left corner of the rectangle."
    - id: y
      type: System.Double
      description: "The y-coordinate of the top-left corner of the rectangle."
    - id: width
      type: System.Double
      description: "The width of the rectangle."
    - id: height
      type: System.Double
      description: "The height of the rectangle."
  overload: System.Windows.Rect.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>width</code> is a negative value.       -or-       <code>height</code> is a negative value."
  platform:
  - net462
- uid: System.Windows.Rect.Bottom
  id: Bottom
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: System.Windows.Rect.Bottom
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the y-axis value of the bottom of the rectangle."
  remarks: "The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Bottom { get; }
    return:
      type: System.Double
      description: "The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <xref:System.Double> ."
  overload: System.Windows.Rect.Bottom*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.BottomLeft
  id: BottomLeft
  parent: System.Windows.Rect
  langs:
  - csharp
  name: BottomLeft
  nameWithType: Rect.BottomLeft
  fullName: System.Windows.Rect.BottomLeft
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the position of the bottom-left corner of the rectangle"
  remarks: "The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>)."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point BottomLeft { get; }
    return:
      type: System.Windows.Point
      description: "The position of the bottom-left corner of the rectangle."
  overload: System.Windows.Rect.BottomLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.BottomRight
  id: BottomRight
  parent: System.Windows.Rect
  langs:
  - csharp
  name: BottomRight
  nameWithType: Rect.BottomRight
  fullName: System.Windows.Rect.BottomRight
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the position of the bottom-right corner of the rectangle."
  remarks: "The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>)."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point BottomRight { get; }
    return:
      type: System.Windows.Point
      description: "The position of the bottom-right corner of the rectangle."
  overload: System.Windows.Rect.BottomRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Contains(System.Windows.Point)
  id: Contains(System.Windows.Point)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: System.Windows.Rect.Contains(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the rectangle contains the specified point."
  remarks: ''
  example:
  - "The following example shows how to use the Contains method to determine if the rectangle contains the specified <xref:System.Windows.Point>.  \n  \n [!code-cs[RectExamples_snip#ContainsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample1_csharp)]"
  syntax:
    content: public bool Contains (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the rectangle contains the specified point; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Contains(System.Windows.Rect)
  id: Contains(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: System.Windows.Rect.Contains(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the rectangle contains the specified rectangle."
  remarks: ''
  example:
  - "The following example shows how to use the Contains method to determine if one rectangle is contained by another rectangle.  \n  \n [!code-cs[RectExamples_snip#ContainsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample2_csharp)]"
  syntax:
    content: public bool Contains (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The rectangle to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>rect</code> is entirely contained by the rectangle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Contains(System.Double,System.Double)
  id: Contains(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Contains(Double,Double)
  nameWithType: Rect.Contains(Double,Double)
  fullName: System.Windows.Rect.Contains(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the rectangle contains the specified x-coordinate and y-coordinate."
  remarks: ''
  example:
  - "The following example shows how to use the Contains method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.  \n  \n [!code-cs[RectExamples_snip#ContainsExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample3_csharp)]"
  syntax:
    content: public bool Contains (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: "The x-coordinate of the point to check."
    - id: y
      type: System.Double
      description: "The y-coordinate of the point to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if (<code>x</code>, <code>y</code>) is contained by the rectangle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Empty
  id: Empty
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Empty
  nameWithType: Rect.Empty
  fullName: System.Windows.Rect.Empty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets a special value that represents a rectangle with no position or area."
  remarks: "Avoid mathematical computations involving empty rectangles. Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations. Comparisons involving these values will not affect application performance."
  syntax:
    content: public static System.Windows.Rect Empty { get; }
    return:
      type: System.Windows.Rect
      description: "The empty rectangle, which has <xref:System.Windows.Rect.X*> and <xref:System.Windows.Rect.Y*> property values of <xref:System.Double.PositiveInfinity>, and has <xref:System.Windows.Rect.Width*> and <xref:System.Windows.Rect.Height*> property values of <xref:System.Double.NegativeInfinity>."
  overload: System.Windows.Rect.Empty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: System.Windows.Rect.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the specified object is equal to the current rectangle."
  remarks: "This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle&quot;s position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."
  example:
  - "The following example shows how to use the Equals method to determine if a rectangle is equal to a specified object.  \n  \n [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "The object to compare to the current rectangle."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>o</code> is a <xref href=&quot;System.Windows.Rect&quot;></xref> and has the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values as the current rectangle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Equals(System.Windows.Rect)
  id: Equals(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Equals(Rect)
  nameWithType: Rect.Equals(Rect)
  fullName: System.Windows.Rect.Equals(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the specified rectangle is equal to the current rectangle."
  remarks: "This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle&quot;s position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."
  example:
  - "The following example shows how to use the Equals method to determine if a rectangle is equal to a specified rectangle.  \n  \n [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]"
  syntax:
    content: public bool Equals (System.Windows.Rect value);
    parameters:
    - id: value
      type: System.Windows.Rect
      description: "The rectangle to compare to the current rectangle."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified rectangle has the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values as the current rectangle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)
  id: Equals(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Equals(Rect,Rect)
  nameWithType: Rect.Equals(Rect,Rect)
  fullName: System.Windows.Rect.Equals(Rect,Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the specified rectangles are equal."
  remarks: "This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle&quot;s position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."
  example:
  - "The following example shows how to use the Equals method to determine if one rectangle is equal to another.  \n  \n [!code-cs[RectExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample2_csharp)]"
  syntax:
    content: public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "The first rectangle to compare."
    - id: rect2
      type: System.Windows.Rect
      description: "The second rectangle to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the rectangles have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.GetHashCode
  id: GetHashCode
  parent: System.Windows.Rect
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: System.Windows.Rect.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a hash code for the rectangle."
  remarks: "This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values."
  example:
  - "The following example shows how to use the GetHashCode method to get the hash code of a <xref:System.Windows.Rect>.  \n  \n [!code-cs[RectExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#gethashcodeexample_csharp)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref href=&quot;System.Windows.Rect&quot;></xref> structure."
  overload: System.Windows.Rect.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Height
  id: Height
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Height
  nameWithType: Rect.Height
  fullName: System.Windows.Rect.Height
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the height of the rectangle."
  remarks: "The <xref:System.Windows.Rect.Empty%2A> rectangle has a Height of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Height cannot not be changed."
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Height { get; set; }
    return:
      type: System.Double
      description: "A positive number that represents the height of the rectangle. The default is 0."
  overload: System.Windows.Rect.Height*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Height is set to a negative value."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Height is set on an <xref:System.Windows.Rect.Empty*> rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Windows.Size)
  id: Inflate(System.Windows.Size)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: System.Windows.Rect.Inflate(Size)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expands the rectangle by using the specified <xref href=&quot;System.Windows.Size&quot;></xref>, in all directions."
  remarks: "The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure."
  example:
  - "The following example shows how to use the Inflate method to increase the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample1_csharp)]"
  syntax:
    content: public void Inflate (System.Windows.Size size);
    parameters:
    - id: size
      type: System.Windows.Size
      description: "Specifies the amount to expand the rectangle. The <xref href=&quot;System.Windows.Size&quot;></xref> structure&quot;s <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle&quot;s <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=&quot;System.Windows.Size&quot;></xref> structure&quot;s <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle&quot;s <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Double,System.Double)
  id: Inflate(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Double,Double)
  nameWithType: Rect.Inflate(Double,Double)
  fullName: System.Windows.Rect.Inflate(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expands or shrinks the rectangle by using the specified width and height amounts, in all directions."
  remarks: "The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.       If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>âgiving the rectangle a negative areaâthe rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle."
  example:
  - "The following example shows how to use the Inflate method to change the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample2_csharp)]"
  syntax:
    content: public void Inflate (double width, double height);
    parameters:
    - id: width
      type: System.Double
      description: "The amount by which to expand or shrink the left and right sides of the rectangle."
    - id: height
      type: System.Double
      description: "The amount by which to expand or shrink the top and bottom sides of the rectangle."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)
  id: Inflate(System.Windows.Rect,System.Windows.Size)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Rect,Size)
  nameWithType: Rect.Inflate(Rect,Size)
  fullName: System.Windows.Rect.Inflate(Rect,Size)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns the rectangle that results from expanding the specified rectangle by the specified <xref href=&quot;System.Windows.Size&quot;></xref>, in all directions."
  remarks: "The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure."
  example:
  - "The following example shows how to use the Inflate method to change the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample3_csharp)]"
  syntax:
    content: public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The <xref href=&quot;System.Windows.Rect&quot;></xref> structure to modify."
    - id: size
      type: System.Windows.Size
      description: "Specifies the amount to expand the rectangle. The <xref href=&quot;System.Windows.Size&quot;></xref> structure&quot;s <xref:System.Windows.Size.Width*> property specifies the amount to increase the rectangle&quot;s <xref:System.Windows.Rect.Left*> and <xref:System.Windows.Rect.Right*> properties. The <xref href=&quot;System.Windows.Size&quot;></xref> structure&quot;s <xref:System.Windows.Size.Height*> property specifies the amount to increase the rectangle&quot;s <xref:System.Windows.Rect.Top*> and <xref:System.Windows.Rect.Bottom*> properties."
    return:
      type: System.Windows.Rect
      description: "The resulting rectangle."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)
  id: Inflate(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Rect,Double,Double)
  nameWithType: Rect.Inflate(Rect,Double,Double)
  fullName: System.Windows.Rect.Inflate(Rect,Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions."
  remarks: "The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.       If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A>âgiving the rectangle a negative areaâthis method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>."
  example:
  - "The following example shows how to use the Inflate method to change the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample4_csharp)]"
  syntax:
    content: public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The <xref href=&quot;System.Windows.Rect&quot;></xref> structure to modify."
    - id: width
      type: System.Double
      description: "The amount by which to expand or shrink the left and right sides of the rectangle."
    - id: height
      type: System.Double
      description: "The amount by which to expand or shrink the top and bottom sides of the rectangle."
    return:
      type: System.Windows.Rect
      description: "The resulting rectangle."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code> is an &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Intersect(System.Windows.Rect)
  id: Intersect(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: System.Windows.Rect.Intersect(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle."
  remarks: "If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>."
  example:
  - "The following example shows how to use the Intersect method to find the intersection of two rectangles and store the result as a rectangle.  \n  \n [!code-cs[RectExamples_snip#IntersectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample1_csharp)]"
  syntax:
    content: public void Intersect (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The rectangle to intersect with the current rectangle."
  overload: System.Windows.Rect.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)
  id: Intersect(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Intersect(Rect,Rect)
  nameWithType: Rect.Intersect(Rect,Rect)
  fullName: System.Windows.Rect.Intersect(Rect,Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns the intersection of the specified rectangles."
  remarks: "The following example shows how to use the Intersect method to find the intersection of two rectangles.       [!code-cs[RectExamples_snip#IntersectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)]"
  syntax:
    content: public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "The first rectangle to compare."
    - id: rect2
      type: System.Windows.Rect
      description: "The second rectangle to compare."
    return:
      type: System.Windows.Rect
      description: "The intersection of the two rectangles, or &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; if no intersection exists."
  overload: System.Windows.Rect.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.IntersectsWith(System.Windows.Rect)
  id: IntersectsWith(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: System.Windows.Rect.IntersectsWith(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indicates whether the specified rectangle intersects with the current rectangle."
  remarks: ''
  example:
  - "The following example shows how to use the IntersectsWith method to determine if two rectangles intersect.  \n  \n [!code-cs[RectExamples_snip#IntersectsWithExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectswithexample_csharp)]"
  syntax:
    content: public bool IntersectsWith (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The rectangle to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified rectangle intersects with the current rectangle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.IntersectsWith*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.IsEmpty
  id: IsEmpty
  parent: System.Windows.Rect
  langs:
  - csharp
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: System.Windows.Rect.IsEmpty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets a value that indicates whether the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle."
  remarks: "Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle. For more information, see the <xref:System.Windows.Rect.Empty%2A> property."
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the rectangle is the <xref:System.Windows.Rect.Empty*> rectangle; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Left
  id: Left
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Left
  nameWithType: Rect.Left
  fullName: System.Windows.Rect.Left
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the x-axis value of the left side of the rectangle."
  remarks: "Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Left { get; }
    return:
      type: System.Double
      description: "The x-axis value of the left side of the rectangle."
  overload: System.Windows.Rect.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Location
  id: Location
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Location
  nameWithType: Rect.Location
  fullName: System.Windows.Rect.Location
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the position of the top-left corner of the rectangle."
  remarks: "The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>)."
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point Location { get; set; }
    return:
      type: System.Windows.Point
      description: "The position of the top-left corner of the rectangle. The default is (0, 0)."
  overload: System.Windows.Rect.Location*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Location is set on an <xref:System.Windows.Rect.Empty*> rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Windows.Vector)
  id: Offset(System.Windows.Vector)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Vector)
  nameWithType: Rect.Offset(Vector)
  fullName: System.Windows.Rect.Offset(Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Moves the rectangle by the specified vector."
  remarks: "Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer."
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample1_csharp)]"
  syntax:
    content: public void Offset (System.Windows.Vector offsetVector);
    parameters:
    - id: offsetVector
      type: System.Windows.Vector
      description: "A vector that specifies the horizontal and vertical amounts to move the rectangle."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Double,System.Double)
  id: Offset(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Double,Double)
  nameWithType: Rect.Offset(Double,Double)
  fullName: System.Windows.Rect.Offset(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Moves the rectangle by the specified horizontal and vertical amounts."
  remarks: "Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly. Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer."
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample2_csharp)]"
  syntax:
    content: public void Offset (double offsetX, double offsetY);
    parameters:
    - id: offsetX
      type: System.Double
      description: "The amount to move the rectangle horizontally."
    - id: offsetY
      type: System.Double
      description: "The amount to move the rectangle vertically."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This method is called on the &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)
  id: Offset(System.Windows.Rect,System.Windows.Vector)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Rect,Vector)
  nameWithType: Rect.Offset(Rect,Vector)
  fullName: System.Windows.Rect.Offset(Rect,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns a rectangle that is offset from the specified rectangle by using the specified vector."
  remarks: "Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed."
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample3_csharp)]"
  syntax:
    content: public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The original rectangle."
    - id: offsetVector
      type: System.Windows.Vector
      description: "A vector that specifies the horizontal and vertical offsets for the new rectangle."
    return:
      type: System.Windows.Rect
      description: "The resulting rectangle."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)
  id: Offset(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Rect,Double,Double)
  nameWithType: Rect.Offset(Rect,Double,Double)
  fullName: System.Windows.Rect.Offset(Rect,Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts."
  remarks: "Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) is not allowed."
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample4_csharp)]"
  syntax:
    content: public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The rectangle to move."
    - id: offsetX
      type: System.Double
      description: "The horizontal offset for the new rectangle."
    - id: offsetY
      type: System.Double
      description: "The vertical offset for the new rectangle."
    return:
      type: System.Windows.Rect
      description: "The resulting rectangle."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code> is &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)
  id: op_Equality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: op_Equality(Rect,Rect)
  nameWithType: Rect.op_Equality(Rect,Rect)
  fullName: System.Windows.Rect.op_Equality(Rect,Rect)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compares two rectangles for exact equality."
  remarks: "This operation tests for object equality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle&quot;s position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."
  example:
  - "The following example shows how to use the Equality operator to determine if two rectangles are exactly equal.  \n  \n [!code-cs[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedequalityoperatorexample)]\n [!code-vb[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedequalityoperatorexample)]"
  syntax:
    content: public static bool op_Equality (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "The first rectangle to compare."
    - id: rect2
      type: System.Windows.Rect
      description: "The second rectangle to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the rectangles have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)
  id: op_Inequality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: op_Inequality(Rect,Rect)
  nameWithType: Rect.op_Inequality(Rect,Rect)
  fullName: System.Windows.Rect.op_Inequality(Rect,Rect)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compares two rectangles for inequality."
  remarks: "This operation tests for object inequality.       In this comparison, two instances of <xref:System.Double.NaN?displayProperty=fullName> are considered equal.      > [!NOTE] >  A rectangle&quot;s position and dimensions are described by <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail."
  example:
  - "The following example shows how to use the Inequality operator to determine if two rectangles are not exactly equal.  \n  \n [!code-cs[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedinequalityoperatorexample)]\n [!code-vb[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedinequalityoperatorexample)]"
  syntax:
    content: public static bool op_Inequality (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "The first rectangle to compare."
    - id: rect2
      type: System.Windows.Rect
      description: "The second rectangle to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the rectangles do not have the same <xref:System.Windows.Rect.Location*> and <xref:System.Windows.Rect.Size*> values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Rect.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Rect.Parse(String)
  fullName: System.Windows.Rect.Parse(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a new rectangle from the specified string representation."
  remarks: ''
  example:
  - "The following example shows how to use the Parse method to convert a string representation of a rectangle into a <xref:System.Windows.Rect> structure.  \n  \n [!code-cs[RectExamples_snip#ParseExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#parseexample)]\n [!code-vb[RectExamples_snip#ParseExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#parseexample)]"
  syntax:
    content: public static System.Windows.Rect Parse (string source);
    parameters:
    - id: source
      type: System.String
      description: "The string representation of the rectangle, in the form &quot;x, y, width, height&quot;."
    return:
      type: System.Windows.Rect
      description: "The resulting rectangle."
  overload: System.Windows.Rect.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Right
  id: Right
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Right
  nameWithType: Rect.Right
  fullName: System.Windows.Rect.Right
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the x-axis value of the right side of the rectangle."
  remarks: "The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Right { get; }
    return:
      type: System.Double
      description: "The x-axis value of the right side of the rectangle."
  overload: System.Windows.Rect.Right*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Scale(System.Double,System.Double)
  id: Scale(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Scale(Double,Double)
  nameWithType: Rect.Scale(Double,Double)
  fullName: System.Windows.Rect.Scale(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Multiplies the size of the current rectangle by the specified x and y values."
  remarks: ''
  example:
  - "The following example shows how to use the Scale method to multiply the width and height of a rectangle by the specified amount.  \n  \n [!code-cs[RectExamples_snip#ScaleExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#scaleexample_csharp)]"
  syntax:
    content: public void Scale (double scaleX, double scaleY);
    parameters:
    - id: scaleX
      type: System.Double
      description: "The scale factor in the x-direction."
    - id: scaleY
      type: System.Double
      description: "The scale factor in the y-direction."
  overload: System.Windows.Rect.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Size
  id: Size
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Size
  nameWithType: Rect.Size
  fullName: System.Windows.Rect.Size
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the width and height of the rectangle."
  remarks: ''
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Size Size { get; set; }
    return:
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;></xref> structure that specifies the width and height of the rectangle."
  overload: System.Windows.Rect.Size*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Size is set on an <xref:System.Windows.Rect.Empty*> rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Rect
  langs:
  - csharp
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Rect.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Rect.System.IFormattable.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Formats the value of the current instance using the specified format."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface."
  syntax:
    content: string IFormattable.ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: "The format to use.       -or-       A null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic) to use the default format defined for the type of the <xref:System.IFormattable> implementation."
    - id: provider
      type: System.IFormatProvider
      description: "The provider to use to format the value.       -or-       A null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system."
    return:
      type: System.String
      description: "A string representation of the rectangle."
  overload: System.Windows.Rect.System#IFormattable#ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Top
  id: Top
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Top
  nameWithType: Rect.Top
  fullName: System.Windows.Rect.Top
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the y-axis position of the top of the rectangle."
  remarks: "Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Top { get; }
    return:
      type: System.Double
      description: "The y-axis position of the top of the rectangle."
  overload: System.Windows.Rect.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.TopLeft
  id: TopLeft
  parent: System.Windows.Rect
  langs:
  - csharp
  name: TopLeft
  nameWithType: Rect.TopLeft
  fullName: System.Windows.Rect.TopLeft
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the position of the top-left corner of the rectangle."
  remarks: "The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>)."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point TopLeft { get; }
    return:
      type: System.Windows.Point
      description: "The position of the top-left corner of the rectangle."
  overload: System.Windows.Rect.TopLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.TopRight
  id: TopRight
  parent: System.Windows.Rect
  langs:
  - csharp
  name: TopRight
  nameWithType: Rect.TopRight
  fullName: System.Windows.Rect.TopRight
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets the position of the top-right corner of the rectangle."
  remarks: "The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>)."
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point TopRight { get; }
    return:
      type: System.Windows.Point
      description: "The position of the top-right corner of the rectangle."
  overload: System.Windows.Rect.TopRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.ToString
  id: ToString
  parent: System.Windows.Rect
  langs:
  - csharp
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: System.Windows.Rect.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns a string representation of the rectangle."
  remarks: ''
  example:
  - "The following example shows how to use the ToString method to get a string representation of a <xref:System.Windows.Rect> structure.  \n  \n [!code-cs[RectExamples_snip#ToStringExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#tostringexample_csharp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: 'A string representation of the current rectangle. The string has the following form: &quot;<xref:System.Windows.Rect.X*>,<xref:System.Windows.Rect.Y*>,<xref:System.Windows.Rect.Width*>,<xref:System.Windows.Rect.Height*>&quot;.'
  overload: System.Windows.Rect.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Rect.ToString(IFormatProvider)
  fullName: System.Windows.Rect.ToString(IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns a string representation of the rectangle by using the specified format provider."
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "Culture-specific formatting information."
    return:
      type: System.String
      description: "A string representation of the current rectangle that is determined by the specified format provider."
  overload: System.Windows.Rect.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Transform(System.Windows.Media.Matrix)
  id: Transform(System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Transform(Matrix)
  nameWithType: Rect.Transform(Matrix)
  fullName: System.Windows.Rect.Transform(Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Transforms the rectangle by applying the specified matrix."
  remarks: ''
  example:
  - "The following example shows how to use the Transform method to transform a <xref:System.Windows.Rect> structure by using a <xref:System.Windows.Media.Matrix>.  \n  \n [!code-cs[RectExamples_snip#TransformExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample1_csharp)]"
  syntax:
    content: public void Transform (System.Windows.Media.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "A matrix that specifies the transformation to apply."
  overload: System.Windows.Rect.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  id: Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Transform(Rect,Matrix)
  nameWithType: Rect.Transform(Rect,Matrix)
  fullName: System.Windows.Rect.Transform(Rect,Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns the rectangle that results from applying the specified matrix to the specified rectangle."
  remarks: ''
  example:
  - "The following example shows how to use the Transform method to create a new <xref:System.Windows.Rect> structure that results from applying a <xref:System.Windows.Media.Matrix> to an existing rectangle.  \n  \n [!code-cs[RectExamples_snip#TransformExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample2_csharp)]"
  syntax:
    content: public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "A rectangle that is the basis for the transformation."
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "A matrix that specifies the transformation to apply."
    return:
      type: System.Windows.Rect
      description: "The rectangle that results from the operation."
  overload: System.Windows.Rect.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Point)
  id: Union(System.Windows.Point)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Point)
  nameWithType: Rect.Union(Point)
  fullName: System.Windows.Rect.Union(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expands the current rectangle exactly enough to contain the specified point."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to expand the current rectangle exactly enough to contain a given <xref:System.Windows.Point>.  \n  \n [!code-cs[RectExamples_snip#UnionExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample1_csharp)]"
  syntax:
    content: public void Union (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point to include."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Rect)
  id: Union(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Rect)
  nameWithType: Rect.Union(Rect)
  fullName: System.Windows.Rect.Union(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expands the current rectangle exactly enough to contain the specified rectangle."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to expand the current rectangle exactly enough to contain the specified rectangle.  \n  \n [!code-cs[RectExamples_snip#UnionExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample2_csharp)]"
  syntax:
    content: public void Union (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The rectangle to include."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)
  id: Union(System.Windows.Rect,System.Windows.Point)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Rect,Point)
  nameWithType: Rect.Union(Rect,Point)
  fullName: System.Windows.Rect.Union(Rect,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain a given rectangle and a given <xref:System.Windows.Point>.  \n  \n [!code-cs[RectExamples_snip#UnionExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample3_csharp)]"
  syntax:
    content: public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "The rectangle to include."
    - id: point
      type: System.Windows.Point
      description: "The point to include."
    return:
      type: System.Windows.Rect
      description: "A rectangle that is exactly large enough to contain the specified rectangle and the specified point."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)
  id: Union(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Rect,Rect)
  nameWithType: Rect.Union(Rect,Rect)
  fullName: System.Windows.Rect.Union(Rect,Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a rectangle that is exactly large enough to contain the two specified rectangles."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain two given rectangles.  \n  \n [!code-cs[RectExamples_snip#UnionExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample4_csharp)]"
  syntax:
    content: public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "The first rectangle to include."
    - id: rect2
      type: System.Windows.Rect
      description: "The second rectangle to include."
    return:
      type: System.Windows.Rect
      description: "The resulting rectangle."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Width
  id: Width
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Width
  nameWithType: Rect.Width
  fullName: System.Windows.Rect.Width
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the width of the rectangle."
  remarks: "The <xref:System.Windows.Rect.Empty%2A> rectangle has a Width of <xref:System.Double.NegativeInfinity>. The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its Width cannot not be changed."
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Width { get; set; }
    return:
      type: System.Double
      description: "A positive number that represents the width of the rectangle. The default is 0."
  overload: System.Windows.Rect.Width*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Width is set to a negative value."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Width is set on an <xref:System.Windows.Rect.Empty*> rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.X
  id: X
  parent: System.Windows.Rect
  langs:
  - csharp
  name: X
  nameWithType: Rect.X
  fullName: System.Windows.Rect.X
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the x-axis value of the left side of the rectangle."
  remarks: "Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property."
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double X { get; set; }
    return:
      type: System.Double
      description: "The x-axis value of the left side of the rectangle."
  overload: System.Windows.Rect.X*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "X is set on an <xref:System.Windows.Rect.Empty*> rectangle."
  platform:
  - net462
- uid: System.Windows.Rect.Y
  id: Y
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Y
  nameWithType: Rect.Y
  fullName: System.Windows.Rect.Y
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the y-axis value of the top side of the rectangle."
  remarks: "Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property."
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Y { get; set; }
    return:
      type: System.Double
      description: "The y-axis value of the top side of the rectangle."
  overload: System.Windows.Rect.Y*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Y is set on an <xref:System.Windows.Rect.Empty*> rectangle."
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Rect.#ctor(System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Size)
  nameWithType: Rect.Rect(Size)
  fullName: System.Windows.Rect.Rect(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Point,Point)
  nameWithType: Rect.Rect(Point,Point)
  fullName: System.Windows.Rect.Rect(Point,Point)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Point,Size)
  nameWithType: Rect.Rect(Point,Size)
  fullName: System.Windows.Rect.Rect(Point,Size)
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Point,Vector)
  nameWithType: Rect.Rect(Point,Vector)
  fullName: System.Windows.Rect.Rect(Point,Vector)
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Double,Double,Double,Double)
  nameWithType: Rect.Rect(Double,Double,Double,Double)
  fullName: System.Windows.Rect.Rect(Double,Double,Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Rect.Bottom
  parent: System.Windows.Rect
  isExternal: false
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: System.Windows.Rect.Bottom
- uid: System.Windows.Rect.BottomLeft
  parent: System.Windows.Rect
  isExternal: false
  name: BottomLeft
  nameWithType: Rect.BottomLeft
  fullName: System.Windows.Rect.BottomLeft
- uid: System.Windows.Rect.BottomRight
  parent: System.Windows.Rect
  isExternal: false
  name: BottomRight
  nameWithType: Rect.BottomRight
  fullName: System.Windows.Rect.BottomRight
- uid: System.Windows.Rect.Contains(System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: System.Windows.Rect.Contains(Point)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Rect.Contains(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: System.Windows.Rect.Contains(Rect)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Rect.Contains(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Contains(Double,Double)
  nameWithType: Rect.Contains(Double,Double)
  fullName: System.Windows.Rect.Contains(Double,Double)
- uid: System.Windows.Rect.Empty
  parent: System.Windows.Rect
  isExternal: false
  name: Empty
  nameWithType: Rect.Empty
  fullName: System.Windows.Rect.Empty
- uid: System.Windows.Rect.Equals(System.Object)
  parent: System.Windows.Rect
  isExternal: false
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: System.Windows.Rect.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Rect.Equals(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Equals(Rect)
  nameWithType: Rect.Equals(Rect)
  fullName: System.Windows.Rect.Equals(Rect)
- uid: System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Equals(Rect,Rect)
  nameWithType: Rect.Equals(Rect,Rect)
  fullName: System.Windows.Rect.Equals(Rect,Rect)
- uid: System.Windows.Rect.GetHashCode
  parent: System.Windows.Rect
  isExternal: false
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: System.Windows.Rect.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Rect.Height
  parent: System.Windows.Rect
  isExternal: false
  name: Height
  nameWithType: Rect.Height
  fullName: System.Windows.Rect.Height
- uid: System.Windows.Rect.Inflate(System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: System.Windows.Rect.Inflate(Size)
- uid: System.Windows.Rect.Inflate(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Double,Double)
  nameWithType: Rect.Inflate(Double,Double)
  fullName: System.Windows.Rect.Inflate(Double,Double)
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Rect,Size)
  nameWithType: Rect.Inflate(Rect,Size)
  fullName: System.Windows.Rect.Inflate(Rect,Size)
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Rect,Double,Double)
  nameWithType: Rect.Inflate(Rect,Double,Double)
  fullName: System.Windows.Rect.Inflate(Rect,Double,Double)
- uid: System.Windows.Rect.Intersect(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: System.Windows.Rect.Intersect(Rect)
- uid: System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Intersect(Rect,Rect)
  nameWithType: Rect.Intersect(Rect,Rect)
  fullName: System.Windows.Rect.Intersect(Rect,Rect)
- uid: System.Windows.Rect.IntersectsWith(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: System.Windows.Rect.IntersectsWith(Rect)
- uid: System.Windows.Rect.IsEmpty
  parent: System.Windows.Rect
  isExternal: false
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: System.Windows.Rect.IsEmpty
- uid: System.Windows.Rect.Left
  parent: System.Windows.Rect
  isExternal: false
  name: Left
  nameWithType: Rect.Left
  fullName: System.Windows.Rect.Left
- uid: System.Windows.Rect.Location
  parent: System.Windows.Rect
  isExternal: false
  name: Location
  nameWithType: Rect.Location
  fullName: System.Windows.Rect.Location
- uid: System.Windows.Rect.Offset(System.Windows.Vector)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Vector)
  nameWithType: Rect.Offset(Vector)
  fullName: System.Windows.Rect.Offset(Vector)
- uid: System.Windows.Rect.Offset(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Double,Double)
  nameWithType: Rect.Offset(Double,Double)
  fullName: System.Windows.Rect.Offset(Double,Double)
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Rect,Vector)
  nameWithType: Rect.Offset(Rect,Vector)
  fullName: System.Windows.Rect.Offset(Rect,Vector)
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Rect,Double,Double)
  nameWithType: Rect.Offset(Rect,Double,Double)
  fullName: System.Windows.Rect.Offset(Rect,Double,Double)
- uid: System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: op_Equality(Rect,Rect)
  nameWithType: Rect.op_Equality(Rect,Rect)
  fullName: System.Windows.Rect.op_Equality(Rect,Rect)
- uid: System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: op_Inequality(Rect,Rect)
  nameWithType: Rect.op_Inequality(Rect,Rect)
  fullName: System.Windows.Rect.op_Inequality(Rect,Rect)
- uid: System.Windows.Rect.Parse(System.String)
  parent: System.Windows.Rect
  isExternal: false
  name: Parse(String)
  nameWithType: Rect.Parse(String)
  fullName: System.Windows.Rect.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Rect.Right
  parent: System.Windows.Rect
  isExternal: false
  name: Right
  nameWithType: Rect.Right
  fullName: System.Windows.Rect.Right
- uid: System.Windows.Rect.Scale(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Scale(Double,Double)
  nameWithType: Rect.Scale(Double,Double)
  fullName: System.Windows.Rect.Scale(Double,Double)
- uid: System.Windows.Rect.Size
  parent: System.Windows.Rect
  isExternal: false
  name: Size
  nameWithType: Rect.Size
  fullName: System.Windows.Rect.Size
- uid: System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)
  parent: System.Windows.Rect
  isExternal: false
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Rect.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Rect.System.IFormattable.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Rect.Top
  parent: System.Windows.Rect
  isExternal: false
  name: Top
  nameWithType: Rect.Top
  fullName: System.Windows.Rect.Top
- uid: System.Windows.Rect.TopLeft
  parent: System.Windows.Rect
  isExternal: false
  name: TopLeft
  nameWithType: Rect.TopLeft
  fullName: System.Windows.Rect.TopLeft
- uid: System.Windows.Rect.TopRight
  parent: System.Windows.Rect
  isExternal: false
  name: TopRight
  nameWithType: Rect.TopRight
  fullName: System.Windows.Rect.TopRight
- uid: System.Windows.Rect.ToString
  parent: System.Windows.Rect
  isExternal: false
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: System.Windows.Rect.ToString()
- uid: System.Windows.Rect.ToString(System.IFormatProvider)
  parent: System.Windows.Rect
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Rect.ToString(IFormatProvider)
  fullName: System.Windows.Rect.ToString(IFormatProvider)
- uid: System.Windows.Rect.Transform(System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  isExternal: false
  name: Transform(Matrix)
  nameWithType: Rect.Transform(Matrix)
  fullName: System.Windows.Rect.Transform(Matrix)
- uid: System.Windows.Media.Matrix
  parent: System.Windows.Media
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  isExternal: false
  name: Transform(Rect,Matrix)
  nameWithType: Rect.Transform(Rect,Matrix)
  fullName: System.Windows.Rect.Transform(Rect,Matrix)
- uid: System.Windows.Rect.Union(System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Point)
  nameWithType: Rect.Union(Point)
  fullName: System.Windows.Rect.Union(Point)
- uid: System.Windows.Rect.Union(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Rect)
  nameWithType: Rect.Union(Rect)
  fullName: System.Windows.Rect.Union(Rect)
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Rect,Point)
  nameWithType: Rect.Union(Rect,Point)
  fullName: System.Windows.Rect.Union(Rect,Point)
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Rect,Rect)
  nameWithType: Rect.Union(Rect,Rect)
  fullName: System.Windows.Rect.Union(Rect,Rect)
- uid: System.Windows.Rect.Width
  parent: System.Windows.Rect
  isExternal: false
  name: Width
  nameWithType: Rect.Width
  fullName: System.Windows.Rect.Width
- uid: System.Windows.Rect.X
  parent: System.Windows.Rect
  isExternal: false
  name: X
  nameWithType: Rect.X
  fullName: System.Windows.Rect.X
- uid: System.Windows.Rect.Y
  parent: System.Windows.Rect
  isExternal: false
  name: Y
  nameWithType: Rect.Y
  fullName: System.Windows.Rect.Y
- uid: System.Windows.Rect.#ctor*
  parent: System.Windows.Rect
  isExternal: false
  name: Rect
  nameWithType: Rect.Rect
- uid: System.Windows.Rect.Bottom*
  parent: System.Windows.Rect
  isExternal: false
  name: Bottom
  nameWithType: Rect.Bottom
- uid: System.Windows.Rect.BottomLeft*
  parent: System.Windows.Rect
  isExternal: false
  name: BottomLeft
  nameWithType: Rect.BottomLeft
- uid: System.Windows.Rect.BottomRight*
  parent: System.Windows.Rect
  isExternal: false
  name: BottomRight
  nameWithType: Rect.BottomRight
- uid: System.Windows.Rect.Contains*
  parent: System.Windows.Rect
  isExternal: false
  name: Contains
  nameWithType: Rect.Contains
- uid: System.Windows.Rect.Empty*
  parent: System.Windows.Rect
  isExternal: false
  name: Empty
  nameWithType: Rect.Empty
- uid: System.Windows.Rect.Equals*
  parent: System.Windows.Rect
  isExternal: false
  name: Equals
  nameWithType: Rect.Equals
- uid: System.Windows.Rect.GetHashCode*
  parent: System.Windows.Rect
  isExternal: false
  name: GetHashCode
  nameWithType: Rect.GetHashCode
- uid: System.Windows.Rect.Height*
  parent: System.Windows.Rect
  isExternal: false
  name: Height
  nameWithType: Rect.Height
- uid: System.Windows.Rect.Inflate*
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate
  nameWithType: Rect.Inflate
- uid: System.Windows.Rect.Intersect*
  parent: System.Windows.Rect
  isExternal: false
  name: Intersect
  nameWithType: Rect.Intersect
- uid: System.Windows.Rect.IntersectsWith*
  parent: System.Windows.Rect
  isExternal: false
  name: IntersectsWith
  nameWithType: Rect.IntersectsWith
- uid: System.Windows.Rect.IsEmpty*
  parent: System.Windows.Rect
  isExternal: false
  name: IsEmpty
  nameWithType: Rect.IsEmpty
- uid: System.Windows.Rect.Left*
  parent: System.Windows.Rect
  isExternal: false
  name: Left
  nameWithType: Rect.Left
- uid: System.Windows.Rect.Location*
  parent: System.Windows.Rect
  isExternal: false
  name: Location
  nameWithType: Rect.Location
- uid: System.Windows.Rect.Offset*
  parent: System.Windows.Rect
  isExternal: false
  name: Offset
  nameWithType: Rect.Offset
- uid: System.Windows.Rect.op_Equality*
  parent: System.Windows.Rect
  isExternal: false
  name: op_Equality
  nameWithType: Rect.op_Equality
- uid: System.Windows.Rect.op_Inequality*
  parent: System.Windows.Rect
  isExternal: false
  name: op_Inequality
  nameWithType: Rect.op_Inequality
- uid: System.Windows.Rect.Parse*
  parent: System.Windows.Rect
  isExternal: false
  name: Parse
  nameWithType: Rect.Parse
- uid: System.Windows.Rect.Right*
  parent: System.Windows.Rect
  isExternal: false
  name: Right
  nameWithType: Rect.Right
- uid: System.Windows.Rect.Scale*
  parent: System.Windows.Rect
  isExternal: false
  name: Scale
  nameWithType: Rect.Scale
- uid: System.Windows.Rect.Size*
  parent: System.Windows.Rect
  isExternal: false
  name: Size
  nameWithType: Rect.Size
- uid: System.Windows.Rect.System#IFormattable#ToString*
  parent: System.Windows.Rect
  isExternal: false
  name: System.IFormattable.ToString
  nameWithType: Rect.System.IFormattable.ToString
- uid: System.Windows.Rect.Top*
  parent: System.Windows.Rect
  isExternal: false
  name: Top
  nameWithType: Rect.Top
- uid: System.Windows.Rect.TopLeft*
  parent: System.Windows.Rect
  isExternal: false
  name: TopLeft
  nameWithType: Rect.TopLeft
- uid: System.Windows.Rect.TopRight*
  parent: System.Windows.Rect
  isExternal: false
  name: TopRight
  nameWithType: Rect.TopRight
- uid: System.Windows.Rect.ToString*
  parent: System.Windows.Rect
  isExternal: false
  name: ToString
  nameWithType: Rect.ToString
- uid: System.Windows.Rect.Transform*
  parent: System.Windows.Rect
  isExternal: false
  name: Transform
  nameWithType: Rect.Transform
- uid: System.Windows.Rect.Union*
  parent: System.Windows.Rect
  isExternal: false
  name: Union
  nameWithType: Rect.Union
- uid: System.Windows.Rect.Width*
  parent: System.Windows.Rect
  isExternal: false
  name: Width
  nameWithType: Rect.Width
- uid: System.Windows.Rect.X*
  parent: System.Windows.Rect
  isExternal: false
  name: X
  nameWithType: Rect.X
- uid: System.Windows.Rect.Y*
  parent: System.Windows.Rect
  isExternal: false
  name: Y
  nameWithType: Rect.Y
