### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectoryEntry
  id: DirectoryEntry
  children:
  - System.DirectoryServices.DirectoryEntry.#ctor
  - System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  - System.DirectoryServices.DirectoryEntry.AuthenticationType
  - System.DirectoryServices.DirectoryEntry.Children
  - System.DirectoryServices.DirectoryEntry.Close
  - System.DirectoryServices.DirectoryEntry.CommitChanges
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.DeleteTree
  - System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  - System.DirectoryServices.DirectoryEntry.Exists(System.String)
  - System.DirectoryServices.DirectoryEntry.Guid
  - System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  - System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.Name
  - System.DirectoryServices.DirectoryEntry.NativeGuid
  - System.DirectoryServices.DirectoryEntry.NativeObject
  - System.DirectoryServices.DirectoryEntry.ObjectSecurity
  - System.DirectoryServices.DirectoryEntry.Options
  - System.DirectoryServices.DirectoryEntry.Parent
  - System.DirectoryServices.DirectoryEntry.Password
  - System.DirectoryServices.DirectoryEntry.Path
  - System.DirectoryServices.DirectoryEntry.Properties
  - System.DirectoryServices.DirectoryEntry.RefreshCache
  - System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  - System.DirectoryServices.DirectoryEntry.Rename(System.String)
  - System.DirectoryServices.DirectoryEntry.SchemaClassName
  - System.DirectoryServices.DirectoryEntry.SchemaEntry
  - System.DirectoryServices.DirectoryEntry.UsePropertyCache
  - System.DirectoryServices.DirectoryEntry.Username
  langs:
  - csharp
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
  type: Class
  summary: "A classe de DirectoryEntry encapsula um nó ou o objeto na hierarquia de serviços de domínio do Active Directory."
  remarks: "Utilize esta classe para o enlace para objetos, ou ler e atualizar atributos. DirectoryEntry, juntamente com classes de programa auxiliar, fornece suporte para ciclo de vida de gestão e navegação métodos. Estes incluem a criar, eliminar, mudar o nome, mover um nó subordinado e a enumerar os elementos subordinados. Depois de modificar um nó, deve consolidar as alterações serem guardados para a árvore. Para obter mais informações, consulte o <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>propriedade.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>       DirectoryEntry pode ser utilizado para aceder a entradas regulares e algumas, mas nem todas as informações de entradas de esquema.       A hierarquia de serviços de domínio do Active Directory contém até vários milhares nós. Cada nó representa um objeto, tal como uma impressora de rede ou um utilizador num domínio. Redes empresariais constantemente alterar como novos funcionários recrutados e objetos, tais como computadores e impressoras de rede são adicionados. A tecnologia de Interfaces de serviço de diretório (ADSI) Active Directory fornece formas de adicionar programaticamente estes objetos para a árvore de diretórios.       Para criar uma entrada de diretório na hierarquia, utilize o <xref:System.DirectoryServices.DirectoryEntry.Children%2A>propriedade.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> O <xref:System.DirectoryServices.DirectoryEntry.Children%2A>propriedade é uma coleção que fornece um <xref:System.DirectoryServices.DirectoryEntries.Add%2A>método, através do qual adicionar um nó para a coleção diretamente abaixo do nó principal que atualmente estão vinculados aos.</xref:System.DirectoryServices.DirectoryEntries.Add%2A> </xref:System.DirectoryServices.DirectoryEntry.Children%2A> Ao adicionar um nó para a coleção, tem de especificar um nome para o novo nó e o nome de um modelo de esquema que pretende associar o nó. Por exemplo, pode querer utilizar um esquema intitulado &quot;Computador&quot; para adicionar novos computadores na hierarquia.       Esta classe também contém atributo colocação em cache, que pode ser útil para otimizar o tráfego de rede. Para utilizar o atributo colocação em cache, consulte o <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>propriedade.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       As classes associadas com o componente de DirectoryEntry podem ser utilizadas com nenhum dos fornecedores de serviço de serviços de domínio do Active Directory. Alguns dos fornecedores atuais são serviços de informação Internet (IIS), acesso protocolo LDAP (Lightweight Directory), serviço de diretório de NetWare do Novell (NDS) e WinNT.      > [!NOTE] > Presume-se que tem uma compreensão geral dos serviços de domínio do Active Directory antes de utilizar esta classe. Para obter mais informações, consulte o <xref:System.DirectoryServices?displayProperty=fullName>Descrição geral do espaço de nomes.</xref:System.DirectoryServices?displayProperty=fullName>"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))]

      [System.DirectoryServices.DSDescription("DirectoryEntryDesc")]

      public class DirectoryEntry : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  id: '#ctor'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicializa uma nova instância do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> classe."
  syntax:
    content: public DirectoryEntry ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicializa uma nova instância do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> classe que está vinculado ao objeto de serviços de domínio do Active Directory nativo especificado."
  remarks: "Este construtor permite utilizar os métodos e propriedades de um programa a <xref:System.DirectoryServices.DirectoryEntry>classe num objeto de serviços de domínio do Active Directory nativo que implementa a interface IADs através de uma API nativa.</xref:System.DirectoryServices.DirectoryEntry> Para obter mais informações sobre a interface IADs, consulte o tópico [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) na biblioteca do MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public DirectoryEntry (object adsObject);
    parameters:
    - id: adsObject
      type: System.Object
      description: "O nome do objeto serviços de domínio do Active Directory nativo à qual vincular."
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicializa uma nova instância do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> classe que está vinculado esta instância para o nó do Active Directory Domain Services localizado no caminho especificado."
  remarks: ''
  example:
  - "The following example binds a <xref:System.DirectoryServices.DirectoryEntry> object to the directory entry at the specified path, and displays the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> property of each child entry that is specified by the node's <xref:System.DirectoryServices.DirectoryEntry.Children%2A> property.  \n  \n```vb  \nPublic Class PrintChildren  \n  \n    'Entry point which delegates to C-style main Private Function.  \n    Public Overloads Shared Sub Main()  \n        Main(System.Environment.GetCommandLineArgs())  \n    End Sub  \n  \n    Overloads Public Shared Sub Main(args() As String)  \n        Dim objDE As DirectoryEntry  \n        Dim strPath As String = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n        If args.Length > 0 Then  \n            strPath = args(1)  \n        End If   \n        ' Create a new DirectoryEntry with the given path.  \n        objDE = New DirectoryEntry(strPath)  \n  \n        Dim objChildDE As DirectoryEntry  \n        For Each objChildDE In  objDE.Children  \n            Console.WriteLine(objChildDE.Path)  \n        Next objChildDE  \n    End Sub 'Main  \nEnd Class 'PrintChildren  \n  \n```  \n  \n```c#  \npublic class PrintChildren{  \n   public static void Main(String[] args)  \n   {  \n      DirectoryEntry objDE;  \n      String strPath=\"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n      if(args.Length>0)strPath=args[1];  \n  \n      // Create a new DirectoryEntry with the given path.  \n      objDE=new DirectoryEntry(strPath);  \n  \n      foreach(DirectoryEntry objChildDE in objDE.Children)  \n        Console.WriteLine(objChildDE.Path);  \n   }  \n }  \n  \n```  \n  \n```cpp#  \nint main()  \n{  \n    String^ args[] = Environment::GetCommandLineArgs();  \n    DirectoryEntry^ objDE;  \n    String^ strPath = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n    if(args->Length>1)  \n    {  \n        strPath=args[1];  \n    }  \n  \n    // Create a new DirectoryEntry with the given path.  \n    objDE = gcnew DirectoryEntry(strPath);  \n  \n    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  \n    while (enum0->MoveNext())  \n    {  \n        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  \n        Console::WriteLine(objChildDE->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public DirectoryEntry (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho no qual se vincular a DirectoryEntry para o diretório. O <xref:System.DirectoryServices.DirectoryEntry.Path*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicializa uma nova instância do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> classe."
  syntax:
    content: public DirectoryEntry (string path, string username, string password);
    parameters:
    - id: path
      type: System.String
      description: "O caminho deste <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>. O <xref:System.DirectoryServices.DirectoryEntry.Path*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
    - id: username
      type: System.String
      description: "O nome de utilizador a utilizar durante a autenticação de cliente. O <xref:System.DirectoryServices.DirectoryEntry.Username*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Username*>"
    - id: password
      type: System.String
      description: "A palavra-passe para utilizar na autenticação de cliente. O <xref:System.DirectoryServices.DirectoryEntry.Password*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Password*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  id: '#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inicializa uma nova instância do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> classe."
  syntax:
    content: public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);
    parameters:
    - id: path
      type: System.String
      description: "O caminho deste <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>. O <xref:System.DirectoryServices.DirectoryEntry.Path*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Path*>"
    - id: username
      type: System.String
      description: "O nome de utilizador a utilizar durante a autenticação de cliente. O <xref:System.DirectoryServices.DirectoryEntry.Username*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Username*>"
    - id: password
      type: System.String
      description: "A palavra-passe para utilizar na autenticação de cliente. O <xref:System.DirectoryServices.DirectoryEntry.Password*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.Password*>"
    - id: authenticationType
      type: System.DirectoryServices.AuthenticationTypes
      description: "Um do <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref> valores. O <xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>propriedade é inicializada para este valor.</xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  id: AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém ou define o tipo de autenticação a utilizar."
  remarks: "Anteriores ao [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], o valor predefinido é <xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes> Começando com [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)], o valor predefinido é <xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes>"
  syntax:
    content: public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }
    return:
      type: System.DirectoryServices.AuthenticationTypes
      description: "Um do <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref> valores."
  overload: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Children
  id: Children
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o subordinado entradas deste nó da hierarquia de serviços de domínio do Active Directory."
  remarks: "As entradas de subordinados são os subordinados imediatos deste nó.       Utilize esta propriedade para localizar, obter ou criar uma entrada de diretório na hierarquia. Esta propriedade é uma coleção que, juntamente com as capacidades de iteração habitual, fornece uma <xref:System.DirectoryServices.DirectoryEntries.Add%2A>método através do qual adicionar um nó para a coleção diretamente abaixo do nó principal que atualmente estão vinculados aos.</xref:System.DirectoryServices.DirectoryEntries.Add%2A> Ao adicionar um nó para a coleção, tem de especificar um nome para o novo nó e o nome de um modelo de esquema que pretende associar o nó. Por exemplo, pode querer utilizar um esquema intitulado &quot;Computador&quot; para adicionar novos computadores na hierarquia.      > [!NOTE] > Por predefinição, as alterações são feitas localmente uma cache. Depois de modificar ou adicionar um nó, tem de chamar o <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>método para consolidar as alterações serem guardados para a árvore.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> Se chamar <xref:System.DirectoryServices.DirectoryEntry.RefreshCache>antes de chamar <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, quaisquer alterações não confirmadas para a cache de propriedade serão perdidas.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> Para obter mais informações, consulte o <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>e <xref:System.DirectoryServices.DirectoryEntry.RefreshCache>métodos e o <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>propriedade.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> </xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntries Children { get; }
    return:
      type: System.DirectoryServices.DirectoryEntries
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> objeto que contém as entradas de subordinado deste nó da hierarquia de serviços de domínio do Active Directory."
  overload: System.DirectoryServices.DirectoryEntry.Children*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Close
  id: Close
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Fecha o <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto e liberta os recursos do sistema que estão associados este componente."
  remarks: "Chame este método para libertar recursos do sistema não geridos, sem aguardar a recolha de lixo.       Após uma chamada de Close, quaisquer operações <xref:System.DirectoryServices.DirectoryEntry>poderá aumentar as exceções.</xref:System.DirectoryServices.DirectoryEntry>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.Close*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  id: CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Guarda as alterações efetuadas para uma entrada de diretório para o repositório subjacente do diretório."
  remarks: "Por predefinição, são feitas alterações às propriedades localmente para uma cache e valores de propriedade para ser de leitura são colocadas em cache após o primeiro de leitura. Para obter mais informações, consulte <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>.</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       As alterações efetuadas à cache incluem alterações às propriedades, bem como as chamadas para <xref:System.DirectoryServices.DirectoryEntries.Add%2A>(se esta entrada recém-criada).</xref:System.DirectoryServices.DirectoryEntries.Add%2A>      > [!CAUTION] > Se chamar <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>antes de chamar CommitChanges, quaisquer alterações não confirmadas para a cache de propriedade serão perdidas.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      ## Segurança – utilize o <xref:System.DirectoryServices.DirectoryServicesPermission>classe para ler, escrever, eliminar, alterar e adicionar à hierarquia de serviços de domínio do Active Directory.</xref:System.DirectoryServices.DirectoryServicesPermission> Associado a enumeração: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess>"
  syntax:
    content: public void CommitChanges ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.CommitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  id: CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Cria uma cópia desta entrada como elemento subordinado do principal especificado."
  remarks: "Se <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>é `true`, chamar <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>no novo objeto de fazer a cópia permanente.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>       O fornecedor de acesso protocolo LDAP (Lightweight Directory) não suporta atualmente o método CopyTo."
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "O nome único do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto que será o principal para a cópia que está a ser criada."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto que representa a cópia desta entrada como elemento subordinado do principal nova."
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> não é um contentor."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Cria uma cópia deste <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto, como elemento subordinado do principal especificado <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto, com o novo nome especificado."
  remarks: "O fornecedor de acesso protocolo LDAP (Lightweight Directory) não suporta este método.       Se <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>é `true`, chamar <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>no novo objeto de fazer a cópia permanente.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "DN do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto que será o principal para a cópia que está a ser criada."
    - id: newName
      type: System.String
      description: "O nome da cópia desta entrada."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "Uma cópia cujo nome foi alterada desta entrada como elemento subordinado do principal especificado."
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> o objeto não é um contentor."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  id: DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Elimina esta entrada e a respetiva subárvore completa da hierarquia de serviços de domínio do Active Directory."
  remarks: "Fornecedores de fornecido pelo sistema de Interfaces de serviço do Active Directory (ADSI), apenas o acesso protocolo LDAP (Lightweight Directory) suporta atualmente esta operação.      > [!CAUTION] > A entrada e a respetiva subárvore completa são eliminados da hierarquia de serviços de domínio do Active Directory.      ## Segurança – utilize <xref:System.DirectoryServices.DirectoryServicesPermission>para eliminar as entradas da hierarquia de serviços de domínio do Active Directory.</xref:System.DirectoryServices.DirectoryServicesPermission> Associado a enumeração: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>"
  syntax:
    content: public void DeleteTree ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.DeleteTree*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> não é um contentor."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Disposes recursos (que não seja memória) que são utilizados pelo <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  remarks: "Este método é denominado pelo público <xref:System.ComponentModel.Component.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>Invoca o método de Dispose protegido com o `disposing` parâmetro definido como `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>invoca <xref:System.ComponentModel.Component.Dispose%2A>com `disposing` definido como `false`.</xref:System.ComponentModel.Component.Dispose%2A></xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, este método versões todos os recursos que são detidos por quaisquer objetos geridos que este <xref:System.DirectoryServices.DirectoryEntry>referências de objeto.</xref:System.DirectoryServices.DirectoryEntry> Este método invoca o <xref:System.ComponentModel.Component.Dispose%2A>método de cada objeto referenciado.</xref:System.ComponentModel.Component.Dispose%2A>       Para obter mais informações sobre o <xref:System.ComponentModel.Component.Dispose%2A>e <xref:System.Object.Finalize%2A>métodos, consulte [a substituir o método Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.DirectoryServices.DirectoryEntry.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  id: Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Determina se o caminho especificado representa uma entrada no serviço de diretório real."
  remarks: ''
  example:
  - "The following example takes one argument and determines whether the path corresponds to a valid <xref:System.DirectoryServices.DirectoryEntry>.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n' Determine whether the given path is correct for the DirectoryEntry.  \nIf DirectoryEntry.Exists(myADSPath) Then  \n   Console.WriteLine(\"The path {0} is valid\",myADSPath)  \nElse  \n   Console.WriteLine(\"The path {0} is invalid\",myADSPath)  \nEnd If  \n  \n```  \n  \n```c#  \nstring myADSPath =\"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry.Exists(myADSPath))  \n{  \n    Console.WriteLine(\"The path {0} is valid\",myADSPath);  \n}  \n    else  \n{  \n    Console.WriteLine(\"The path {0} is invalid\",myADSPath);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry::Exists(myADSPath))   \n{  \n    Console::WriteLine(\"The path {0} is valid\", myADSPath);  \n}   \nelse   \n{  \n    Console::WriteLine(\"The path {0} is invalid\", myADSPath);  \n}  \n  \n```"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho de entrada para verificar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o caminho especificado representa uma entrada válida no serviço de diretório; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.DirectoryEntry.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Guid
  id: Guid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o GUID do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  remarks: "Quando se vincula a um objeto nos serviços de domínio do Active Directory, utilize o <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>propriedade.</xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>"
  example:
  - "The following example demonstrates the Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" + myDirectoryEntry.NativeGuid)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid);  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n  \n```"
  syntax:
    content: public Guid Guid { get; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>estrutura que representa o GUID do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>.</xref:System.Guid>"
  overload: System.DirectoryServices.DirectoryEntry.Guid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Chama um método do objeto de serviços de domínio do Active Directory nativo."
  remarks: "Se o valor devolvido do método nativo implementa a interface de IADs, um correspondente <xref:System.DirectoryServices.DirectoryEntry>é devolvido.</xref:System.DirectoryServices.DirectoryEntry> Para obter mais informações sobre a interface IADs, consulte o tópico [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) na biblioteca do MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp)."
  syntax:
    content: public object Invoke (string methodName, object[] args);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método a invocar."
    - id: args
      type: System.Object[]
      description: "Uma matriz do tipo <xref:System.Object>objetos que contém os argumentos do método a invocar.</xref:System.Object>"
    return:
      type: System.Object
      description: "O valor devolvido do método invocado."
  overload: System.DirectoryServices.DirectoryEntry.Invoke*
  exceptions:
  - type: System.DirectoryServices.DirectoryServicesCOMException
    commentId: T:System.DirectoryServices.DirectoryServicesCOMException
    description: "O método nativo emitiu um <xref:System.Runtime.InteropServices.COMException>exceção.</xref:System.Runtime.InteropServices.COMException>"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "O método nativo emitiu um <xref:System.Reflection.TargetInvocationException>exceção.</xref:System.Reflection.TargetInvocationException> O <xref:System.Exception.InnerException*>propriedade contém um <xref:System.Runtime.InteropServices.COMException>exceção que contém informações sobre o erro real que ocorreu.</xref:System.Runtime.InteropServices.COMException> </xref:System.Exception.InnerException*>"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  id: InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém uma propriedade do objeto serviços de domínio do Active Directory nativo."
  remarks: "Este método não deve ser utilizado. O <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>propriedade deve ser utilizada para aceder às propriedades do <xref:System.DirectoryServices.DirectoryEntry>objeto.</xref:System.DirectoryServices.DirectoryEntry> </xref:System.DirectoryServices.DirectoryEntry.Properties%2A>"
  syntax:
    content: public object InvokeGet (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "O nome da propriedade a obter."
    return:
      type: System.Object
      description: "Um objeto que representa a propriedade pedida."
  overload: System.DirectoryServices.DirectoryEntry.InvokeGet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  id: InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Define uma propriedade do objeto de serviços de domínio do Active Directory nativo."
  remarks: "Este método não deve ser utilizado. O <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>propriedade deve ser utilizada para aceder às propriedades do <xref:System.DirectoryServices.DirectoryEntry>objeto.</xref:System.DirectoryServices.DirectoryEntry> </xref:System.DirectoryServices.DirectoryEntry.Properties%2A>"
  syntax:
    content: public void InvokeSet (string propertyName, object[] args);
    parameters:
    - id: propertyName
      type: System.String
      description: "O nome da propriedade a definir."
    - id: args
      type: System.Object[]
      description: "O objeto serviços de domínio do Active Directory para definir."
  overload: System.DirectoryServices.DirectoryEntry.InvokeSet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  id: MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Move este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto principal especificado."
  remarks: "Se <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>é `true`, chame o <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>método no novo objeto para tornar a movimentação permanentes.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "O elemento principal ao qual pretende mover esta entrada."
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> não é um contentor."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Move este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto principal especificado e o respetivo nome é alterado para o valor especificado."
  remarks: "Se <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>é `true`, chamar <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>no novo objeto para tornar a movimentação permanentes.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "O elemento principal ao qual pretende mover esta entrada."
    - id: newName
      type: System.String
      description: "O novo nome desta entrada."
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Especificado <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> não é um contentor."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Name
  id: Name
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o nome do objeto conforme com o nome com o serviço de diretório subjacente."
  remarks: "Este nome, along com <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>, distingue esta entrada de respectivas e têm de ser exclusivos entre respectivas em cada contentor.</xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>"
  example:
  - "The following example creates a <xref:System.DirectoryServices.DirectoryEntry> for the node in the Active Directory Domain Services. It then displays the Name and <xref:System.DirectoryServices.DirectoryEntry.Path%2A> properties of its child nodes.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,  \n           _DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\" + myDirectoryEntry.Name)  \nConsole.WriteLine(ControlChars.NewLine _  \n        + \"The child entries for this node in the Active Directory Domain Services hierarchy\")  \n  \nDim myDirectoryEntryChild As DirectoryEntry  \nFor Each myDirectoryEntryChild In  myDirectoryEntry.Children  \n   Console.WriteLine(myDirectoryEntryChild.Path)  \nNext myDirectoryEntryChild  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\"+ myDirectoryEntry.Name);  \nConsole.WriteLine(\"\\nThe child entries for this node \"+  \n   \"in the Active Directory Domain Services hierarchy\");  \n  \nforeach(DirectoryEntry myDirectoryEntryChild in  \n   myDirectoryEntry.Children)  \n{  \n   Console.WriteLine(myDirectoryEntryChild.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \nConsole::WriteLine(\"DirectoryEntry Name : {0}\", myDirectoryEntry->Name);  \nConsole::WriteLine(\"\\nThe child entries for this node in the Active Directory Domain Services hierarchy\");  \n  \nCollections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnumerator->MoveNext())   \n{  \n    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  \n    Console::WriteLine(myDirectoryEntryChild->Path);  \n}  \n```"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "O nome do objeto conforme com o nome com o serviço de diretório subjacente."
  overload: System.DirectoryServices.DirectoryEntry.Name*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  id: NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o GUID do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>, tal como devolvido do fornecedor."
  remarks: "Utilize a propriedade de NativeGuid quando se vincula um objeto no Active Directory Domain Services.      > [!NOTE] > Fornecedor o acesso protocolo LDAP (Lightweight Directory) devolve o identificador exclusivo global de um <xref:System.DirectoryServices.DirectoryEntry>num formato diferente que os serviços de informação Internet (IIS), servidor de diretório de NetWare do Novell (NDS) e fornecedores de WinNT.</xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" +   \n             myDirectoryEntry.NativeGuid)  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid));  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n```"
  syntax:
    content: public string NativeGuid { get; }
    return:
      type: System.String
      description: "A <xref:System.Guid>estrutura que representa o GUID do <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>, tal como devolvido pelo fornecedor de.</xref:System.Guid>"
  overload: System.DirectoryServices.DirectoryEntry.NativeGuid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  id: NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o objeto de Interfaces de serviço do Active Directory (ADSI) nativo."
  remarks: "Utilize esta propriedade para converter o objeto serviços de domínio do Active Directory nativo, que implementa a interface de IADs, quando pretender utilizar uma interface COM. Para obter mais informações sobre a interface IADs, consulte o tópico [IADs](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) na biblioteca do MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).       Este objeto é para cenários avançados que não podem ser conseguidos com a <xref:System.DirectoryServices?displayProperty=fullName>classes individualmente.</xref:System.DirectoryServices?displayProperty=fullName> Para utilizá-la, terá de importar uma das COM interfaces de família IADs, em seguida, converter esta propriedade para que a interface."
  syntax:
    content: public object NativeObject { get; }
    return:
      type: System.Object
      description: "O objecto ADSI nativo."
  overload: System.DirectoryServices.DirectoryEntry.NativeObject*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  id: ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém ou define o descritor de segurança para esta entrada."
  syntax:
    content: public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }
    return:
      type: System.DirectoryServices.ActiveDirectorySecurity
      description: "Um <xref href=&quot;System.DirectoryServices.ActiveDirectorySecurity&quot;> </xref> objeto que representa o descritor de segurança para esta entrada de diretório."
  overload: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Options
  id: Options
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém as opções de específica do fornecedor para esta entrada."
  syntax:
    content: public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }
    return:
      type: System.DirectoryServices.DirectoryEntryConfiguration
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntryConfiguration&quot;> </xref> objeto que contém as opções de específica do fornecedor para esta entrada."
  overload: System.DirectoryServices.DirectoryEntry.Options*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Parent
  id: Parent
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o principal desta entrada na hierarquia de serviços de domínio do Active Directory."
  remarks: ''
  example:
  - "The following example searches a given <xref:System.DirectoryServices.DirectoryEntry> and displays the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> and Parent of the result.  \n  \n```vb  \nDim myADSPath As String = _   \n          \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \nConsole.WriteLine(\"Parent is :\" + myDirectoryEntry.Parent.Path)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole.WriteLine(\"Parent is :\"+myDirectoryEntry.Parent.Path);  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole::WriteLine(\"Parent is :{0}\", myDirectoryEntry->Parent->Path);  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Parent { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto que representa o principal desta entrada."
  overload: System.DirectoryServices.DirectoryEntry.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Password
  id: Password
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Define a palavra-passe para utilizar na autenticação de cliente."
  remarks: "Pode definir o <xref:System.DirectoryServices.DirectoryEntry.Username%2A>e propriedades de palavra-passe para especificar credenciais alternativas com a qual pretende aceder às informações nos serviços de domínio do Active Directory.</xref:System.DirectoryServices.DirectoryEntry.Username%2A> Todos os outros <xref:System.DirectoryServices.DirectoryEntry>objetos obtida esta instância (por exemplo, através de <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) são criados automaticamente com as mesmas credenciais alternativas.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> </xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Username%2A> and Password properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry   \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n         DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  \n             (myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Password { set; }
    return:
      type: System.String
      description: "A palavra-passe para utilizar na autenticação de cliente."
  overload: System.DirectoryServices.DirectoryEntry.Password*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Path
  id: Path
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém ou define o caminho para este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  remarks: "The Path property uniquely identifies this entry in a networked environment. This entry can always be retrieved using this Path.  \n  \n Setting the Path retrieves a new entry from the directory store; it does not change the path of the currently bound entry.  \n  \n The classes associated with the <xref:System.DirectoryServices.DirectoryEntry> component can be used with any of the Active Directory Domain Services service providers. Some of the current providers are Internet Information Services (IIS), Lightweight Directory Access Protocol (LDAP), Novell NetWare Directory Service (NDS), and WinNT.  \n  \n> [!NOTE]\n>  The section of the Path that identifies the provider (precedes \"://\") is case-sensitive. For example, \"LDAP://\" or \"WinNT://\".  \n  \n The syntax for the Path property varies according to the provider. Some common scenarios are:  \n  \n WinNT  \n  \n-   Connect to a group on a computer. For example, \"WinNT**://\\<domain name>/\\<computer name>/\\<group name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<group name>**\".  \n  \n-   Connect to a user on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<user name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<user name>**\".  \n  \n-   Connect to services on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<service name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<service name>**\".  \n  \n-   Discover all domains on the network. For example, \"WinNT:\" The domains can be found by enumerating the children of this entry.  \n  \n LDAP  \n  \n-   Connect to a group in a domain. For example, \"LDAP://CN=\\<group name>, CN =\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to a user in a domain. For example, \"LDAP://CN=\\<full user name>, CN=\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to computers in a domain. For example, \"LDAP://CN=\\<computer name>, CN=\\<Computers>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n IIS  \n  \n-   Connect to a Web directory. For example, \"IIS://LocalHost/W3SVC/1/ROOT/\\<Web directory name>\".  \n  \n To bind to the current domain using LDAP, use the path \"LDAP://RootDSE\", then get the default naming context and rebind the entry. For example:  \n  \n```c#  \nString str = ent.Properties[\"defaultNamingContext\"][0];  \nDirectoryEntry domain = new DirectoryEntry(\"LDAP://\" + str);  \n```  \n  \n For more information, see the documentation for your provider and the topic [Using Active Directory Service Interfaces](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "O caminho deste <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto. A predefinição é uma cadeia vazia (&quot;&quot;)."
  overload: System.DirectoryServices.DirectoryEntry.Path*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Properties
  id: Properties
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém as propriedades de serviços de domínio do Active Directory para este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto."
  remarks: "Se a propriedade não foi inicializada, propriedades chama a interface ADSI [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) método para obter o valor da cache. Se a cache de underling não terem sido carregada, [IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx) implicitamente chama [IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx). Este método carrega os valores das propriedades suportados que não foram definidas na cache o repositório subjacente do diretório. As chamadas subsequentes para propriedades obtém os valores de propriedade na cache apenas. Para controlar a cache de propriedade carregar, chame <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>       **Tenha em atenção** propriedades a propriedade não é suportada para utilização com a extensão de cliente do Active Directory (DSClient) para [!INCLUDE[WinNt4Family](~/add/includes/ajax-current-ext-md.md)]."
  syntax:
    content: public System.DirectoryServices.PropertyCollection Properties { get; }
    return:
      type: System.DirectoryServices.PropertyCollection
      description: "A <xref href=&quot;System.DirectoryServices.PropertyCollection&quot;> </xref> objeto que contém as propriedades que estão definidas nesta entrada."
  overload: System.DirectoryServices.DirectoryEntry.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  id: RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Carrega os valores de propriedade para este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto para a cache de propriedade."
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method to persist changes to the directory store.
  syntax:
    content: public void RefreshCache ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  id: RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Carrega os valores das propriedades especificadas para a cache de propriedade."
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> to persist changes to the directory store.
  syntax:
    content: public void RefreshCache (string[] propertyNames);
    parameters:
    - id: propertyNames
      type: System.String[]
      description: "Uma matriz de propriedades especificadas."
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  id: Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Altera o nome deste <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto."
  remarks: "> [!NOTE]> Isto afetará também o caminho que é utilizado para fazer referência a esta entrada.       Se <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>é `true`, certifique-se chamar o <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>método no novo objeto para tornar a movimentação permanentes.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>"
  syntax:
    content: public void Rename (string newName);
    parameters:
    - id: newName
      type: System.String
      description: "O novo nome da entrada."
  overload: System.DirectoryServices.DirectoryEntry.Rename*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  id: SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o nome da classe de esquema para este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto."
  remarks: "Este é o mesmo que o <xref:System.DirectoryServices.DirectoryEntry.Name%2A>propriedade o <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A>propriedade.</xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> </xref:System.DirectoryServices.DirectoryEntry.Name%2A>       A <xref:System.DirectoryServices.DirectoryEntry>esquema do objeto define as respetivas propriedades e métodos.</xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the SchemaClassName and <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and gets all of its children if the <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object.  The <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name, \"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, \"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public string SchemaClassName { get; }
    return:
      type: System.String
      description: "O nome da classe de esquema para este <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto."
  overload: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  id: SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o objeto de esquema para esta entrada."
  remarks: "Esquema de uma entrada determina uma lista dos respetivos nomes de propriedade obrigatórios e opcionais.       Pode utilizar esta propriedade para saber quais as propriedades e métodos estão disponíveis no objeto associado."
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> and SchemaEntry properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> object and gets all of its children if the SchemaEntry object is a container object.  The SchemaEntry is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\"+myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name,\"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object*.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, S\"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> objeto que representa a classe de esquema para esta entrada."
  overload: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  id: UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém ou define um valor que indica se a cache deve ser consolidada após cada operação."
  remarks: "Por predefinição, são feitas alterações às propriedades localmente para uma cache e valores de propriedade para ser de leitura são colocadas em cache após o primeiro de leitura. Quando a propriedade de UsePropertyCache é `true`, acesso a <xref:System.DirectoryServices.DirectoryEntry>Propriedades do objeto é mais rápido.</xref:System.DirectoryServices.DirectoryEntry> Definir este como `false` fará com que a cache de ser consolidada após cada operação.       Se a propriedade UsePropertyCache for `true` e pretende confirmar em cache as alterações, chame o <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>método.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> Para atualizar os valores na cache depois de serem efetuadas alterações ao diretório, chame o <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>método.</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      > [!CAUTION] > Se chamar <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>antes de chamar <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, quaisquer alterações não confirmadas para a cache de propriedade serão perdidas.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>      > [!NOTE] > Fornecedor o serviços de informação de Internet (IIS) não suporta a consolidar a cache após cada operação."
  syntax:
    content: public bool UsePropertyCache { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a cache não deve ser consolidada após cada operação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Username
  id: Username
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém ou define o nome de utilizador para utilizar na autenticação de cliente."
  remarks: "Pode definir o nome de utilizador e <xref:System.DirectoryServices.DirectoryEntry.Password%2A>para poder especificar credenciais alternativas com a qual pretende aceder às informações nos serviços de domínio do Active Directory.</xref:System.DirectoryServices.DirectoryEntry.Password%2A> Todos os outros <xref:System.DirectoryServices.DirectoryEntry>objetos obtida esta instância (por exemplo, através de <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) são criados automaticamente com as mesmas credenciais alternativas.</xref:System.DirectoryServices.DirectoryEntry.Children%2A> </xref:System.DirectoryServices.DirectoryEntry>"
  example:
  - "The following example demonstrates the Username and <xref:System.DirectoryServices.DirectoryEntry.Password%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "O nome de utilizador a utilizar durante a autenticação de cliente."
  overload: System.DirectoryServices.DirectoryEntry.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.DirectoryServices.DirectoryServicesCOMException
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryServicesCOMException
  nameWithType: DirectoryServicesCOMException
  fullName: System.DirectoryServices.DirectoryServicesCOMException
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
- uid: System.DirectoryServices.AuthenticationTypes
  parent: System.DirectoryServices
  isExternal: false
  name: AuthenticationTypes
  nameWithType: AuthenticationTypes
  fullName: System.DirectoryServices.AuthenticationTypes
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntries
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntries
  nameWithType: DirectoryEntries
  fullName: System.DirectoryServices.DirectoryEntries
- uid: System.DirectoryServices.DirectoryEntry.Close
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
- uid: System.DirectoryServices.DirectoryEntry.Guid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.Name
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.ActiveDirectorySecurity
  parent: System.DirectoryServices
  isExternal: false
  name: ActiveDirectorySecurity
  nameWithType: ActiveDirectorySecurity
  fullName: System.DirectoryServices.ActiveDirectorySecurity
- uid: System.DirectoryServices.DirectoryEntry.Options
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntryConfiguration
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntryConfiguration
  nameWithType: DirectoryEntryConfiguration
  fullName: System.DirectoryServices.DirectoryEntryConfiguration
- uid: System.DirectoryServices.DirectoryEntry.Parent
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
- uid: System.DirectoryServices.PropertyCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
- uid: System.DirectoryServices.DirectoryEntry.#ctor*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntry.Close*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close
  nameWithType: DirectoryEntry.Close
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges
  nameWithType: DirectoryEntry.CommitChanges
- uid: System.DirectoryServices.DirectoryEntry.CopyTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo
  nameWithType: DirectoryEntry.CopyTo
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree
  nameWithType: DirectoryEntry.DeleteTree
- uid: System.DirectoryServices.DirectoryEntry.Dispose*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose
  nameWithType: DirectoryEntry.Dispose
- uid: System.DirectoryServices.DirectoryEntry.Exists*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists
  nameWithType: DirectoryEntry.Exists
- uid: System.DirectoryServices.DirectoryEntry.Guid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke
  nameWithType: DirectoryEntry.Invoke
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet
  nameWithType: DirectoryEntry.InvokeGet
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet
  nameWithType: DirectoryEntry.InvokeSet
- uid: System.DirectoryServices.DirectoryEntry.MoveTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryEntry.MoveTo
- uid: System.DirectoryServices.DirectoryEntry.Name*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.DirectoryEntry.Options*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntry.Parent*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache
  nameWithType: DirectoryEntry.RefreshCache
- uid: System.DirectoryServices.DirectoryEntry.Rename*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename
  nameWithType: DirectoryEntry.Rename
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
