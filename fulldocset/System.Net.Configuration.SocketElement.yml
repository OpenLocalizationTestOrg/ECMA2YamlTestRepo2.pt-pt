### YamlMime:ManagedReference
items:
- uid: System.Net.Configuration.SocketElement
  id: SocketElement
  children:
  - System.Net.Configuration.SocketElement.#ctor
  - System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept
  - System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect
  - System.Net.Configuration.SocketElement.IPProtectionLevel
  - System.Net.Configuration.SocketElement.PostDeserialize
  - System.Net.Configuration.SocketElement.Properties
  langs:
  - csharp
  name: SocketElement
  nameWithType: SocketElement
  fullName: System.Net.Configuration.SocketElement
  type: Class
  summary: "Represents information used to configure <xref:System.Net.Sockets.Socket> objects. This class cannot be inherited."
  remarks: "This class corresponds to the [\\&lt;socket\\&gt; Element (Network Settings)](../Topic/%3Csocket%3E%20Element%20\\(Network%20Settings\\).md) configuration element.  \n  \n This class provides programmatic access to information that can be stored in configuration files.  \n  \n This class is used to specify whether completion ports are used for connecting, whether completion ports are used for accepting connections, and the default IP protection level for an IPv6 socket."
  syntax:
    content: 'public sealed class SocketElement : System.Configuration.ConfigurationElement'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  implements: []
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  platform:
  - net462
- uid: System.Net.Configuration.SocketElement.#ctor
  id: '#ctor'
  parent: System.Net.Configuration.SocketElement
  langs:
  - csharp
  name: SocketElement()
  nameWithType: SocketElement.SocketElement()
  fullName: System.Net.Configuration.SocketElement.SocketElement()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Configuration.SocketElement&quot;></xref> class."
  remarks: "This constructor adds the <xref:System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept%2A> and <xref:System.Net.Configuration.ConnectionManagementElement.MaxConnection%2A> properties to the <xref:System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept%2A> collection."
  syntax:
    content: public SocketElement ();
    parameters: []
  overload: System.Net.Configuration.SocketElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept
  id: AlwaysUseCompletionPortsForAccept
  parent: System.Net.Configuration.SocketElement
  langs:
  - csharp
  name: AlwaysUseCompletionPortsForAccept
  nameWithType: SocketElement.AlwaysUseCompletionPortsForAccept
  fullName: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Gets or sets a Boolean value that specifies whether completion ports are used when accepting connections."
  syntax:
    content: public bool AlwaysUseCompletionPortsForAccept { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to use completion ports; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect
  id: AlwaysUseCompletionPortsForConnect
  parent: System.Net.Configuration.SocketElement
  langs:
  - csharp
  name: AlwaysUseCompletionPortsForConnect
  nameWithType: SocketElement.AlwaysUseCompletionPortsForConnect
  fullName: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Gets or sets a Boolean value that specifies whether completion ports are used when making connections."
  syntax:
    content: public bool AlwaysUseCompletionPortsForConnect { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to use completion ports; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.SocketElement.IPProtectionLevel
  id: IPProtectionLevel
  parent: System.Net.Configuration.SocketElement
  langs:
  - csharp
  name: IPProtectionLevel
  nameWithType: SocketElement.IPProtectionLevel
  fullName: System.Net.Configuration.SocketElement.IPProtectionLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Gets or sets a value that specifies the default <xref href=&quot;System.Net.Sockets.IPProtectionLevel&quot;></xref> to use for a socket."
  remarks: "The IPProtectionLevel property enables configuration of a restriction for an IPv6 socket to a specified scope, such as addresses with the same link local or site local prefix. This option enables applications to place access restrictions on IPv6 sockets. Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks. This option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required. This option has three defined protection levels specified in the <xref:System.Net.Sockets.IPProtectionLevel?displayProperty=fullName> enumeration."
  syntax:
    content: public System.Net.Sockets.IPProtectionLevel IPProtectionLevel { get; set; }
    return:
      type: System.Net.Sockets.IPProtectionLevel
      description: "The value of the <xref href=&quot;System.Net.Sockets.IPProtectionLevel&quot;></xref> for the current instance."
  overload: System.Net.Configuration.SocketElement.IPProtectionLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.SocketElement.PostDeserialize
  id: PostDeserialize
  parent: System.Net.Configuration.SocketElement
  langs:
  - csharp
  name: PostDeserialize()
  nameWithType: SocketElement.PostDeserialize()
  fullName: System.Net.Configuration.SocketElement.PostDeserialize()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Configuration
  syntax:
    content: protected override void PostDeserialize ();
    parameters: []
  overload: System.Net.Configuration.SocketElement.PostDeserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.SocketElement.Properties
  id: Properties
  parent: System.Net.Configuration.SocketElement
  langs:
  - csharp
  name: Properties
  nameWithType: SocketElement.Properties
  fullName: System.Net.Configuration.SocketElement.Properties
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "To be added."
  overload: System.Net.Configuration.SocketElement.Properties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElement
  isExternal: false
  name: System.Configuration.ConfigurationElement
- uid: System.Net.Configuration.SocketElement.#ctor
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: SocketElement()
  nameWithType: SocketElement.SocketElement()
  fullName: System.Net.Configuration.SocketElement.SocketElement()
- uid: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: AlwaysUseCompletionPortsForAccept
  nameWithType: SocketElement.AlwaysUseCompletionPortsForAccept
  fullName: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: AlwaysUseCompletionPortsForConnect
  nameWithType: SocketElement.AlwaysUseCompletionPortsForConnect
  fullName: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect
- uid: System.Net.Configuration.SocketElement.IPProtectionLevel
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: IPProtectionLevel
  nameWithType: SocketElement.IPProtectionLevel
  fullName: System.Net.Configuration.SocketElement.IPProtectionLevel
- uid: System.Net.Sockets.IPProtectionLevel
  parent: System.Net.Sockets
  isExternal: false
  name: IPProtectionLevel
  nameWithType: IPProtectionLevel
  fullName: System.Net.Sockets.IPProtectionLevel
- uid: System.Net.Configuration.SocketElement.PostDeserialize
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: PostDeserialize()
  nameWithType: SocketElement.PostDeserialize()
  fullName: System.Net.Configuration.SocketElement.PostDeserialize()
- uid: System.Net.Configuration.SocketElement.Properties
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: Properties
  nameWithType: SocketElement.Properties
  fullName: System.Net.Configuration.SocketElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Net.Configuration.SocketElement.#ctor*
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: SocketElement
  nameWithType: SocketElement.SocketElement
- uid: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept*
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: AlwaysUseCompletionPortsForAccept
  nameWithType: SocketElement.AlwaysUseCompletionPortsForAccept
- uid: System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect*
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: AlwaysUseCompletionPortsForConnect
  nameWithType: SocketElement.AlwaysUseCompletionPortsForConnect
- uid: System.Net.Configuration.SocketElement.IPProtectionLevel*
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: IPProtectionLevel
  nameWithType: SocketElement.IPProtectionLevel
- uid: System.Net.Configuration.SocketElement.PostDeserialize*
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: PostDeserialize
  nameWithType: SocketElement.PostDeserialize
- uid: System.Net.Configuration.SocketElement.Properties*
  parent: System.Net.Configuration.SocketElement
  isExternal: false
  name: Properties
  nameWithType: SocketElement.Properties
