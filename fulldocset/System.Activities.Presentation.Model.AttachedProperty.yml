### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.Model.AttachedProperty
  id: AttachedProperty
  children:
  - System.Activities.Presentation.Model.AttachedProperty.#ctor
  - System.Activities.Presentation.Model.AttachedProperty.GetValue(System.Activities.Presentation.Model.ModelItem)
  - System.Activities.Presentation.Model.AttachedProperty.IsBrowsable
  - System.Activities.Presentation.Model.AttachedProperty.IsReadOnly
  - System.Activities.Presentation.Model.AttachedProperty.Name
  - System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)
  - System.Activities.Presentation.Model.AttachedProperty.OwnerType
  - System.Activities.Presentation.Model.AttachedProperty.ResetValue(System.Activities.Presentation.Model.ModelItem)
  - System.Activities.Presentation.Model.AttachedProperty.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  - System.Activities.Presentation.Model.AttachedProperty.Type
  langs:
  - csharp
  name: AttachedProperty
  nameWithType: AttachedProperty
  fullName: System.Activities.Presentation.Model.AttachedProperty
  type: Class
  summary: "Used in order to associate or attach additional information to the instance of an object."
  remarks: "This is used by the [!INCLUDE[wfd1](~/add/includes/wfd1-md.md)] in order to keep track of interesting pieces of data during an editing session for data that is otherwise transient, that will (mostly) be discarded at the end of an editing session. AttachedProperty is useful as items in the `View` can bind to the values and react to changes. For instance, this is the way that the selected item template is displayed (it keys off of an attached property for selection)."
  syntax:
    content: public abstract class AttachedProperty
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.#ctor
  id: '#ctor'
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: AttachedProperty()
  nameWithType: AttachedProperty.AttachedProperty()
  fullName: System.Activities.Presentation.Model.AttachedProperty.AttachedProperty()
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Initializes a new instance of the <xref href=&quot;System.Activities.Presentation.Model.AttachedProperty&quot;></xref> class."
  syntax:
    content: protected AttachedProperty ();
    parameters: []
  overload: System.Activities.Presentation.Model.AttachedProperty.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.GetValue(System.Activities.Presentation.Model.ModelItem)
  id: GetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: GetValue(ModelItem)
  nameWithType: AttachedProperty.GetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty.GetValue(ModelItem)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Retrieves the value of the specified model item."
  syntax:
    content: public abstract object GetValue (System.Activities.Presentation.Model.ModelItem modelItem);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "The model item."
    return:
      type: System.Object
      description: "Returns a <xref:System.Object> that contains the value of the model item."
  overload: System.Activities.Presentation.Model.AttachedProperty.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.IsBrowsable
  id: IsBrowsable
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: IsBrowsable
  nameWithType: AttachedProperty.IsBrowsable
  fullName: System.Activities.Presentation.Model.AttachedProperty.IsBrowsable
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Gets or sets a Boolean value that indicates whether the <xref href=&quot;System.Activities.Presentation.Model.AttachedProperty&quot;></xref> is browsable."
  remarks: "The primary impact of setting this to `true` is that the <xref:System.Activities.Presentation.Model.AttachedProperty> will be discoverable within the <xref:System.Activities.Presentation.Model.ModelItem.Properties%2A> collection of the <xref:System.Activities.Presentation.Model.ModelItem> to which it is attached."
  syntax:
    content: public bool IsBrowsable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Activities.Presentation.Model.AttachedProperty&quot;></xref> is browsable; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Activities.Presentation.Model.AttachedProperty.IsBrowsable*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.IsReadOnly
  id: IsReadOnly
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: AttachedProperty.IsReadOnly
  fullName: System.Activities.Presentation.Model.AttachedProperty.IsReadOnly
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Gets a value that determines whether the attached property is read-only."
  syntax:
    content: public abstract bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the property is read-only; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Activities.Presentation.Model.AttachedProperty.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.Name
  id: Name
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: Name
  nameWithType: AttachedProperty.Name
  fullName: System.Activities.Presentation.Model.AttachedProperty.Name
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Gets or sets the name of the property."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Returns a <xref:System.String> that contains the name of the property."
  overload: System.Activities.Presentation.Model.AttachedProperty.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)
  id: NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: NotifyPropertyChanged(ModelItem)
  nameWithType: AttachedProperty.NotifyPropertyChanged(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(ModelItem)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Creates a notification that indicates that the specified model item has changed."
  syntax:
    content: public void NotifyPropertyChanged (System.Activities.Presentation.Model.ModelItem modelItem);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "The item that has changed."
  overload: System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.OwnerType
  id: OwnerType
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: OwnerType
  nameWithType: AttachedProperty.OwnerType
  fullName: System.Activities.Presentation.Model.AttachedProperty.OwnerType
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Gets or sets the owner type."
  syntax:
    content: public Type OwnerType { get; set; }
    return:
      type: System.Type
      description: "Returns a <xref:System.Type> that contains the owner type."
  overload: System.Activities.Presentation.Model.AttachedProperty.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.ResetValue(System.Activities.Presentation.Model.ModelItem)
  id: ResetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: ResetValue(ModelItem)
  nameWithType: AttachedProperty.ResetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty.ResetValue(ModelItem)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Resets the specified model item to the default value."
  syntax:
    content: public abstract void ResetValue (System.Activities.Presentation.Model.ModelItem modelItem);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "The model item to reset."
  overload: System.Activities.Presentation.Model.AttachedProperty.ResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  id: SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: SetValue(ModelItem,Object)
  nameWithType: AttachedProperty.SetValue(ModelItem,Object)
  fullName: System.Activities.Presentation.Model.AttachedProperty.SetValue(ModelItem,Object)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Sets the specified model item to the specified value."
  syntax:
    content: public abstract void SetValue (System.Activities.Presentation.Model.ModelItem modelItem, object value);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "The model item to set."
    - id: value
      type: System.Object
      description: "The value to set."
  overload: System.Activities.Presentation.Model.AttachedProperty.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty.Type
  id: Type
  parent: System.Activities.Presentation.Model.AttachedProperty
  langs:
  - csharp
  name: Type
  nameWithType: AttachedProperty.Type
  fullName: System.Activities.Presentation.Model.AttachedProperty.Type
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Gets the type."
  syntax:
    content: public abstract Type Type { get; }
    return:
      type: System.Type
      description: "Returns a <xref:System.Type> that contains the type."
  overload: System.Activities.Presentation.Model.AttachedProperty.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.Presentation.Model.AttachedProperty.#ctor
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: AttachedProperty()
  nameWithType: AttachedProperty.AttachedProperty()
  fullName: System.Activities.Presentation.Model.AttachedProperty.AttachedProperty()
- uid: System.Activities.Presentation.Model.AttachedProperty.GetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: GetValue(ModelItem)
  nameWithType: AttachedProperty.GetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty.GetValue(ModelItem)
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Activities.Presentation.Model.AttachedProperty.IsBrowsable
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: IsBrowsable
  nameWithType: AttachedProperty.IsBrowsable
  fullName: System.Activities.Presentation.Model.AttachedProperty.IsBrowsable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Presentation.Model.AttachedProperty.IsReadOnly
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: IsReadOnly
  nameWithType: AttachedProperty.IsReadOnly
  fullName: System.Activities.Presentation.Model.AttachedProperty.IsReadOnly
- uid: System.Activities.Presentation.Model.AttachedProperty.Name
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: Name
  nameWithType: AttachedProperty.Name
  fullName: System.Activities.Presentation.Model.AttachedProperty.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: NotifyPropertyChanged(ModelItem)
  nameWithType: AttachedProperty.NotifyPropertyChanged(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(ModelItem)
- uid: System.Activities.Presentation.Model.AttachedProperty.OwnerType
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: OwnerType
  nameWithType: AttachedProperty.OwnerType
  fullName: System.Activities.Presentation.Model.AttachedProperty.OwnerType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Presentation.Model.AttachedProperty.ResetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: ResetValue(ModelItem)
  nameWithType: AttachedProperty.ResetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty.ResetValue(ModelItem)
- uid: System.Activities.Presentation.Model.AttachedProperty.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: SetValue(ModelItem,Object)
  nameWithType: AttachedProperty.SetValue(ModelItem,Object)
  fullName: System.Activities.Presentation.Model.AttachedProperty.SetValue(ModelItem,Object)
- uid: System.Activities.Presentation.Model.AttachedProperty.Type
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: Type
  nameWithType: AttachedProperty.Type
  fullName: System.Activities.Presentation.Model.AttachedProperty.Type
- uid: System.Activities.Presentation.Model.AttachedProperty.#ctor*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: AttachedProperty
  nameWithType: AttachedProperty.AttachedProperty
- uid: System.Activities.Presentation.Model.AttachedProperty.GetValue*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: GetValue
  nameWithType: AttachedProperty.GetValue
- uid: System.Activities.Presentation.Model.AttachedProperty.IsBrowsable*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: IsBrowsable
  nameWithType: AttachedProperty.IsBrowsable
- uid: System.Activities.Presentation.Model.AttachedProperty.IsReadOnly*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: IsReadOnly
  nameWithType: AttachedProperty.IsReadOnly
- uid: System.Activities.Presentation.Model.AttachedProperty.Name*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: Name
  nameWithType: AttachedProperty.Name
- uid: System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: NotifyPropertyChanged
  nameWithType: AttachedProperty.NotifyPropertyChanged
- uid: System.Activities.Presentation.Model.AttachedProperty.OwnerType*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: OwnerType
  nameWithType: AttachedProperty.OwnerType
- uid: System.Activities.Presentation.Model.AttachedProperty.ResetValue*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: ResetValue
  nameWithType: AttachedProperty.ResetValue
- uid: System.Activities.Presentation.Model.AttachedProperty.SetValue*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: SetValue
  nameWithType: AttachedProperty.SetValue
- uid: System.Activities.Presentation.Model.AttachedProperty.Type*
  parent: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: Type
  nameWithType: AttachedProperty.Type
