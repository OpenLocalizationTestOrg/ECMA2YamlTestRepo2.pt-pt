### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortKey
  id: SortKey
  children:
  - System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  - System.Globalization.SortKey.Equals(System.Object)
  - System.Globalization.SortKey.GetHashCode
  - System.Globalization.SortKey.KeyData
  - System.Globalization.SortKey.OriginalString
  - System.Globalization.SortKey.ToString
  langs:
  - csharp
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
  type: Class
  summary: "Representa o resultado de uma cadeia de mapeamento para a chave de ordenação."
  remarks: "Uma comparação de cultura sensíveis das duas cadeias depende de cada caráter nas cadeias ter várias categorias de peso de ordenação, incluindo script, alfabético, caso e diacritic ponderações. Uma chave de ordenação serve como o repositório destas ponderações para uma cadeia específica.       O <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>método devolve uma instância da classe SortKey que reflete o mapeamento de cultura sensíveis dos carateres existentes numa cadeia especificada.</xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName> O valor de um objeto de SortKey é os seus dados chaves, o que são devolvidos pelo <xref:System.Globalization.SortKey.KeyData%2A>propriedade.</xref:System.Globalization.SortKey.KeyData%2A> Estes dados de chaves é constituído por uma série de bytes que codificar a cadeia, regras de ordenação de cultura específica e opções de comparação de utilizador especificado. Uma comparação com as chaves de ordenação consiste numa bit a bit comparação dos dados de chaves correspondentes na cada chave de ordenação.  Por exemplo, se criar uma chave de ordenação ao chamar o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>método com um valor de <xref:System.Globalization.CompareOptions?displayProperty=fullName>, uma operação de comparação de cadeias que utiliza a chave de ordenação é sensível.</xref:System.Globalization.CompareOptions?displayProperty=fullName> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>       Depois de criar uma chave de ordenação para uma cadeia, comparar chaves de ordenação ao chamar a estática <xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName>método.</xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName> Este método efetua uma comparação de bytes por simple, pelo que é muito mais rápida do que o <xref:System.String.Compare%2A?displayProperty=fullName>ou <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.String.Compare%2A?displayProperty=fullName>      ## Considerações sobre o desempenho quando executar uma comparação de cadeias, o <xref:System.Globalization.SortKey.Compare%2A>e <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>métodos produzem os resultados da mesmos, mas estes apontar para diferentes cenários.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.Globalization.SortKey.Compare%2A>       Um nível elevado, o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método gera a chave de ordenação para cada cadeia, efetua a comparação e, em seguida, elimina a chave de ordenação e devolve o resultado da comparação.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> No entanto, o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método, na verdade, não gerar uma chave de ordenação completo para efetuar a comparação.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> Em vez disso, o método gera os dados de chave para cada elemento de texto (ou seja, caráter base, par de substituição ou combinação de sequência de carateres) na cadeia de cada. O método, em seguida, compara os dados de chave para os elementos de texto correspondente. A operação termina assim que o resultado ultimate a comparação é determinado. Informações de chave de ordenação são calculadas, mas nenhum objeto de SortKey é criado. Esta estratégia é económica em termos de desempenho se ambas as cadeias são comparadas uma vez, mas torna-se dispendiosas se o mesmas cadeias são comparadas demasiadas vezes.       O <xref:System.Globalization.SortKey.Compare%2A>método necessita de geração de um objeto de SortKey para cada cadeia antes de efetuar a comparação.</xref:System.Globalization.SortKey.Compare%2A> Esta estratégia é dispendiosa em termos de desempenho para a comparação primeiro devido ao tempo e memória investidos para gerar os objetos de SortKey. No entanto, torna-se económico se as mesmas chaves de ordenação são comparadas demasiadas vezes.       Por exemplo, suponha que escreve uma aplicação que procura uma tabela de base de dados para a linha em que a coluna de índice baseado em cadeia corresponde a uma cadeia de pesquisa especificada. A tabela contém milhares de linhas e comparar a cadeia de procura para o índice em cada linha irá demorar muito tempo. Por conseguinte, quando a aplicação armazena uma linha e a respetiva coluna de índice, também gera e armazena a chave de ordenação para o índice numa coluna dedicada para melhorar o desempenho da pesquisa. Quando a aplicação de procura de uma linha de destino, compara a chave de ordenação para a cadeia de procura para a chave de ordenação para a cadeia de índice, em vez de comparar a cadeia de procura para a cadeia de índice.      ## Considerações de segurança a <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>método devolve um objeto de SortKey com o valor com base na cadeia de carateres especificada e <xref:System.Globalization.CompareOptions>valor e a cultura associado subjacentes <xref:System.Globalization.CompareInfo>objeto.</xref:System.Globalization.CompareInfo> </xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> Se uma decisão de segurança depende de uma comparação de cadeias ou alterar maiúsculas, deve utilizar o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>método a cultura invariável para se certificar de que o comportamento da operação é consistente, independentemente das definições de idioma do sistema operativo.</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       Utilize os passos seguintes para obter uma chave de ordenação: 1.  Obter a cultura invariável do <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>propriedade.</xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>      2.  Obter um <xref:System.Globalization.CompareInfo>objeto para a cultura invariável do <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName>propriedade.</xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> </xref:System.Globalization.CompareInfo>      3.  Chamar o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>método.</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       Trabalhar com o valor de um SortKey o objeto é equivalente ao chamar o Windows `LCMapString` método com o valor LCMAP_SORTKEY especificado. No entanto, para o objeto de SortKey, as chaves de ordenação para inglês carateres preceder as chaves de ordenação para coreano carateres.       SortKey podem ser objetos serializados, mas apenas para que eles podem cruzada <xref:System.AppDomain>objetos.</xref:System.AppDomain> Se uma aplicação serializa um objeto de SortKey, a aplicação tem de regenerar as chaves de ordenação quando existe uma nova versão do .NET Framework.       Para obter mais informações sobre chaves de ordenação, consulte Unicode técnica padrão #10, &quot;Unicode agrupamento algoritmo&quot; sobre a [site Unicode Consortium](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following example compares the string \"llama\" using the \"en-US\" and \"es-ES\" cultures, and the \"en-US\" and \"es-ES\" traditional cultures.  \n  \n [!code-cpp[System.Globalization.SortKey.Compare#1](~/add/codesnippet/cpp/t-system.globalization.s_1_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Compare#1](~/add/codesnippet/csharp/t-system.globalization.s_1_1.cs)]\n [!code-vb[System.Globalization.SortKey.Compare#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_1.vb)]  \n  \n The following example shows how you can use the SortKey class to improve performance in an application that relies extensively on sorting and searching a large array. The example creates an unordered array of names, which in this case has 13 elements. It then stores the sort key of each name in a parallel array, which it passes to the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=fullName> method. The result is a sorted array. The example then searches the array for three strings. For each search string, it calls the <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method to retrieve the string's sort key, and then calls the <xref:System.Array.FindIndex%2A?displayProperty=fullName> method to retrieve the index of that sort key in the array of sort keys. Because the name and sort key arrays are parallel, the returned index is also the index of the name in the `names` array.  \n  \n [!code-vb[System.Globalization.SortKey.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_2.vb)]\n [!code-cs[System.Globalization.SortKey.Class#1](~/add/codesnippet/csharp/t-system.globalization.s_1_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  id: Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Compara duas chaves de ordenação."
  remarks: "O método de comparação compara o <xref:System.Globalization.SortKey.KeyData%2A>Propriedades do `sortkey1` e `sortkey2` parâmetros.</xref:System.Globalization.SortKey.KeyData%2A> O método gera os mesmos resultados que o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>       Para obter mais informações sobre o método de comparação e a comparação das chaves de ordenação, consulte o <xref:System.Globalization.SortKey>tópico de classe.</xref:System.Globalization.SortKey>"
  example:
  - "The following code example compares two strings using the Compare method and the equivalent <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method.  \n  \n [!code-cs[sys.glob.sortkey.compare#1](~/add/codesnippet/csharp/4647647d-ce80-4fb7-82b7-_1.cs)]\n [!code-vb[sys.glob.sortkey.compare#1](~/add/codesnippet/visualbasic/4647647d-ce80-4fb7-82b7-_1.vb)]"
  syntax:
    content: public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
    parameters:
    - id: sortkey1
      type: System.Globalization.SortKey
      description: "A primeira chave de ordenação para comparar."
    - id: sortkey2
      type: System.Globalization.SortKey
      description: "A segunda chave de ordenação para comparar."
    return:
      type: System.Int32
      description: "Um número inteiro com sinal que indica a relação entre <code> sortkey1 </code> e <code> sortkey2 </code>.       <table><thead><tr><th> Valor       </th><th> Condição       </th></tr></thead><tbody><tr><td> Menor que zero       </td><td><code>sortkey1</code>is less than <code>sortkey2</code>.       </td></tr><tr><td> Zero       </td><td><code>sortkey1</code>is equal to <code>sortkey2</code>.       </td></tr><tr><td> Maior que zero       </td><td><code>sortkey1</code>é maior do que <code> sortkey2 </code>.       </td></tr></tbody></table>"
  overload: System.Globalization.SortKey.Compare*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sortkey1</code>or <code>sortkey2</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determina se o objeto especificado é igual a atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: "Dois <xref:System.Globalization.SortKey>objetos são considerados igual se os seus <xref:System.Globalization.SortKey.KeyData%2A>propriedades são iguais.</xref:System.Globalization.SortKey.KeyData%2A> </xref:System.Globalization.SortKey>       Este método substitui <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>"
  example:
  - "The following code example shows the results of Equals when compared with different <xref:System.Globalization.SortKey> objects.  \n  \n [!code-vb[System.Globalization.SortKey.Equals#1](~/add/codesnippet/visualbasic/m-system.globalization.s_0_1.vb)]\n [!code-cpp[System.Globalization.SortKey.Equals#1](~/add/codesnippet/cpp/m-system.globalization.s_0_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Equals#1](~/add/codesnippet/csharp/m-system.globalization.s_0_1.cs)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O objeto para a comparação com a atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <code> value </code> parâmetro é igual a atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Globalization.SortKey.Equals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Funciona como uma função de hash para o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto que é adequado para codificar estruturas de dados e algoritmos, tais como uma tabela hash."
  remarks: "Este método gera o mesmo código hash para dois objetos que são iguais, de acordo com o <xref:System.Globalization.SortKey.Equals%2A>método.</xref:System.Globalization.SortKey.Equals%2A>       Este método substitui <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.KeyData
  id: KeyData
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a matriz de bytes que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: "Para obter mais informações sobre a utilização de dados devolvidos pela propriedade KeyData na comparação de cadeias, consulte o <xref:System.Globalization.SortKey>tópico de classe.</xref:System.Globalization.SortKey>"
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_0_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_0_1.cs)]"
  syntax:
    content: public virtual byte[] KeyData { get; }
    return:
      type: System.Byte[]
      description: "Uma matriz de bytes que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.KeyData*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.OriginalString
  id: OriginalString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a cadeia original utilizada para criar atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: ''
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_1_1.cs)]"
  syntax:
    content: public virtual string OriginalString { get; }
    return:
      type: System.String
      description: "A cadeia original utilizada para criar atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.OriginalString*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.ToString
  id: ToString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Devolve uma cadeia que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: "O valor de retorno é a concatenação de cadeia &quot;SortKey -&quot; o identificador de cultura comparar as opções e de atual <xref:System.Globalization.SortKey>objeto e o valor do <xref:System.Globalization.SortKey.OriginalString%2A>propriedade.</xref:System.Globalization.SortKey.OriginalString%2A> </xref:System.Globalization.SortKey>       Este método substitui <xref:System.Object.ToString%2A?displayProperty=fullName>.</xref:System.Object.ToString%2A?displayProperty=fullName>"
  example:
  - "The following code example displays an original string, the strings yielded by the ToString method for case-sensitive and case-insensitive sort keys, and the key data for case-sensitive and case-insensitive sort keys.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/m-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/m-system.globalization.s_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.SortKey
  parent: System.Globalization
  isExternal: false
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
- uid: System.Globalization.SortKey.Equals(System.Object)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortKey.GetHashCode
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
- uid: System.Globalization.SortKey.KeyData
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.SortKey.OriginalString
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.SortKey.ToString
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
- uid: System.Globalization.SortKey.Compare*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare
  nameWithType: SortKey.Compare
- uid: System.Globalization.SortKey.Equals*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals
  nameWithType: SortKey.Equals
- uid: System.Globalization.SortKey.GetHashCode*
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode
  nameWithType: SortKey.GetHashCode
- uid: System.Globalization.SortKey.KeyData*
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
- uid: System.Globalization.SortKey.OriginalString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
- uid: System.Globalization.SortKey.ToString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString
  nameWithType: SortKey.ToString
