### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices
  id: LifetimeServices
  children:
  - System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor
  - System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  - System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  - System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  - System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  langs:
  - csharp
  name: LifetimeServices
  nameWithType: LifetimeServices
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices
  type: Class
  summary: "Controls the.NET remoting lifetime services."
  remarks: "Distributed garbage collection is responsible for controlling the lifetimes of server applications, and for deleting them when their lifetimes have expired. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.       The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed.      > [!NOTE] >  This class makes a link demand. A SecurityException is thrown if the immediate caller does not have infrastructure permission. See [Link Demands](~/add/includes/ajax-current-ext-md.md) for more information."
  example:
  - >-
    [!code-cpp[System.Runtime.Remoting.Lifetime#2](~/add/codesnippet/cpp/t-system.runtime.remotin_69_1.cpp)]
     [!code-vb[System.Runtime.Remoting.Lifetime#2](~/add/codesnippet/visualbasic/t-system.runtime.remotin_69_1.vb)]
     [!code-cs[System.Runtime.Remoting.Lifetime#2](~/add/codesnippet/csharp/t-system.runtime.remotin_69_1.cs)]
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Security.SecurityCritical]

      public sealed class LifetimeServices
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor
  id: '#ctor'
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: LifetimeServices()
  nameWithType: LifetimeServices.LifetimeServices()
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LifetimeServices()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Creates an instance of <xref href=&quot;System.Runtime.Remoting.Lifetime.LifetimeServices&quot;></xref>."
  syntax:
    content: public LifetimeServices ();
    parameters: []
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  id: LeaseManagerPollTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: LeaseManagerPollTime
  nameWithType: LifetimeServices.LeaseManagerPollTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Gets or sets the time interval between each activation of the lease manager to clean up expired leases."
  remarks: "The current property defines the frequency at which the lease manager becomes active to clean up expired leases. For example, if LeaseManagerPollTime is set to 100 seconds, the lease list is inspected for cleanups and renewals every 100 seconds.       The default value of the LeaseManagerPollTime property is 10 seconds."
  syntax:
    content: public static TimeSpan LeaseManagerPollTime { get; set; }
    return:
      type: System.TimeSpan
      description: "The default amount of time the lease manager sleeps after checking for expired leases."
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  id: LeaseTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: LeaseTime
  nameWithType: LifetimeServices.LeaseTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Gets or sets the initial lease time span for an <xref href=&quot;System.AppDomain&quot;></xref>."
  remarks: "The default lease time span is 5 minutes."
  syntax:
    content: public static TimeSpan LeaseTime { get; set; }
    return:
      type: System.TimeSpan
      description: "The initial lease <xref:System.TimeSpan> for objects that can have leases in the <xref href=&quot;System.AppDomain&quot;></xref>."
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  id: RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: RenewOnCallTime
  nameWithType: LifetimeServices.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Gets or sets the amount of time by which the lease is extended every time a call comes in on the server object."
  remarks: "The default renewal time by which a lifetime lease is extended is 2 minutes."
  example:
  - >-
    [!code-cpp[ILease_ILease#3](~/add/codesnippet/cpp/p-system.runtime.remotin_103_1.cpp)]
     [!code-cs[ILease_ILease#3](~/add/codesnippet/csharp/p-system.runtime.remotin_103_1.cs)]
     [!code-vb[ILease_ILease#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_103_1.vb)]
  syntax:
    content: public static TimeSpan RenewOnCallTime { get; set; }
    return:
      type: System.TimeSpan
      description: "The <xref:System.TimeSpan> by which a lifetime lease in the current <xref href=&quot;System.AppDomain&quot;></xref> is extended after each call."
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  id: SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: SponsorshipTimeout
  nameWithType: LifetimeServices.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Gets or sets the amount of time the lease manager waits for a sponsor to return with a lease renewal time."
  remarks: "The default time until a call to a sponsor is timed out is 2 minutes."
  example:
  - >-
    [!code-cpp[ILease_ILease#3](~/add/codesnippet/cpp/p-system.runtime.remotin_75_1.cpp)]
     [!code-cs[ILease_ILease#3](~/add/codesnippet/csharp/p-system.runtime.remotin_75_1.cs)]
     [!code-vb[ILease_ILease#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_75_1.vb)]
  syntax:
    content: public static TimeSpan SponsorshipTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "The initial sponsorship time-out."
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LifetimeServices()
  nameWithType: LifetimeServices.LifetimeServices()
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LifetimeServices()
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseManagerPollTime
  nameWithType: LifetimeServices.LeaseManagerPollTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseTime
  nameWithType: LifetimeServices.LeaseTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: RenewOnCallTime
  nameWithType: LifetimeServices.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: LifetimeServices.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LifetimeServices
  nameWithType: LifetimeServices.LifetimeServices
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseManagerPollTime
  nameWithType: LifetimeServices.LeaseManagerPollTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseTime
  nameWithType: LifetimeServices.LeaseTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: RenewOnCallTime
  nameWithType: LifetimeServices.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: LifetimeServices.SponsorshipTimeout
