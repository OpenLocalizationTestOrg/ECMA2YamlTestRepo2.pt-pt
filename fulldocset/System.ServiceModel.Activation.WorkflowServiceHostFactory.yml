### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory
  id: WorkflowServiceHostFactory
  children:
  - System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor
  - System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])
  langs:
  - csharp
  name: WorkflowServiceHostFactory
  nameWithType: WorkflowServiceHostFactory
  fullName: System.ServiceModel.Activation.WorkflowServiceHostFactory
  type: Class
  summary: "Factory that provides instances of <xref href=&quot;System.ServiceModel.WorkflowServiceHost&quot;></xref> in managed hosting environments where the host instance is created dynamically in response to incoming messages."
  remarks: "The managed hosting environments that support dynamic activation are Internet Information Services (IIS) and Windows Process Activation Service (WAS).       If you have implemented a custom derivative of <xref:System.ServiceModel.WorkflowServiceHost>, consider also implementing a factory that derives from the WorkflowServiceHostFactory class.       If you have implemented a custom derivative of <xref:System.ServiceModel.ServiceHostBase> instead, then consider also implementing a factory that derives your factory from <xref:System.ServiceModel.Activation.ServiceHostFactoryBase> directly."
  syntax:
    content: >-
      [System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]

      public class WorkflowServiceHostFactory : System.ServiceModel.Activation.ServiceHostFactoryBase
  inheritance:
  - System.Object
  - System.ServiceModel.Activation.ServiceHostFactoryBase
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Activation.WorkflowServiceHostFactory
  langs:
  - csharp
  name: WorkflowServiceHostFactory()
  nameWithType: WorkflowServiceHostFactory.WorkflowServiceHostFactory()
  fullName: System.ServiceModel.Activation.WorkflowServiceHostFactory.WorkflowServiceHostFactory()
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Activation
  summary: "Initializes a new instance of the <xref href=&quot;System.ServiceModel.Activation.WorkflowServiceHostFactory&quot;></xref> class."
  syntax:
    content: public WorkflowServiceHostFactory ();
    parameters: []
  overload: System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])
  id: CreateServiceHost(System.String,System.Uri[])
  parent: System.ServiceModel.Activation.WorkflowServiceHostFactory
  langs:
  - csharp
  name: CreateServiceHost(String,Uri[])
  nameWithType: WorkflowServiceHostFactory.CreateServiceHost(String,Uri[])
  fullName: System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(String,Uri[])
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Activation
  summary: "Creates a <xref href=&quot;System.ServiceModel.WorkflowServiceHost&quot;></xref> from a string that contains either the file name of the workflow markup file or the type name of the workflow service type and the base address of the service specified."
  remarks: "The `constructorString` argument could be either a fully qualified workflow type name or it could be the relative file path of the workflow definition file declared in the .svc file in which <xref:System.ServiceModel.Activation.ServiceHostFactory> directives are placed.      > [!NOTE] >  To associate a rule definition with a workflow definition, name the rule definition file the same name as the workflow definition file with a .rules extension and place it in same directory as the workflow definition file. For example, the rules definition file CalculatorServiceWorkflow.rules must be in the same directory as CalculatorServiceWorkflow.xoml."
  example:
  - "The following is an example of a type-based reference to the workflow service CalculatorServiceWorkflow.  \n  \n```  \n<%@ServiceHost language=c# Debug=\"true\" Factory=\"System.ServiceModel.Activation.WorkflowServiceHostFactory\" Service=\"CalculatorServiceWorkflow\" %>  \n```  \n  \n The following is an example of a workflow definition file reference to the workflow service CalculatorServiceWorkflow.  \n  \n```  \n<%@ServiceHost language=c# Debug=\"true\" Factory=\"System.ServiceModel.Activation.WorkflowServiceHostFactory\" Service=\"CalculatorServiceWorkflow.xoml\" %>  \n```"
  syntax:
    content: public override System.ServiceModel.ServiceHostBase CreateServiceHost (string constructorString, Uri[] baseAddresses);
    parameters:
    - id: constructorString
      type: System.String
      description: "The file name of the workflow markup file that defines the workflow service or the type name of the workflow service type."
    - id: baseAddresses
      type: System.Uri[]
      description: "An array of type <xref:System.Uri> that contains the base addresses for the hosted service."
    return:
      type: System.ServiceModel.ServiceHostBase
      description: "A <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;></xref> object associated with the workflow service. The default implementation returns a <xref href=&quot;System.ServiceModel.WorkflowServiceHost&quot;></xref> object with the specified base addresses."
  overload: System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Activation.ServiceHostFactoryBase
  isExternal: false
  name: System.ServiceModel.Activation.ServiceHostFactoryBase
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor
  parent: System.ServiceModel.Activation.WorkflowServiceHostFactory
  isExternal: false
  name: WorkflowServiceHostFactory()
  nameWithType: WorkflowServiceHostFactory.WorkflowServiceHostFactory()
  fullName: System.ServiceModel.Activation.WorkflowServiceHostFactory.WorkflowServiceHostFactory()
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])
  parent: System.ServiceModel.Activation.WorkflowServiceHostFactory
  isExternal: false
  name: CreateServiceHost(String,Uri[])
  nameWithType: WorkflowServiceHostFactory.CreateServiceHost(String,Uri[])
  fullName: System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(String,Uri[])
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Uri[]
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri[]
  spec.csharp:
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor*
  parent: System.ServiceModel.Activation.WorkflowServiceHostFactory
  isExternal: false
  name: WorkflowServiceHostFactory
  nameWithType: WorkflowServiceHostFactory.WorkflowServiceHostFactory
- uid: System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost*
  parent: System.ServiceModel.Activation.WorkflowServiceHostFactory
  isExternal: false
  name: CreateServiceHost
  nameWithType: WorkflowServiceHostFactory.CreateServiceHost
