### YamlMime:ManagedReference
items:
- uid: System.Windows.EventManager
  id: EventManager
  children:
  - System.Windows.EventManager.GetRoutedEvents
  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  langs:
  - csharp
  name: EventManager
  nameWithType: EventManager
  fullName: System.Windows.EventManager
  type: Class
  summary: "Fornece os métodos de utilitário relacionados com o evento que registar eventos encaminhados para os proprietários de classe e adicione os processadores de classes."
  remarks: "Esta classe é utilizada para registar um novo evento encaminhado, com <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> frequentemente       O segundo mais comuns [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] utilização é <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A> Utilize este método para ativar o processamento de classe de um evento encaminhado na classe ou um evento anexado. Para obter mais informações, consulte [marcar os eventos encaminhados como Handled e processamento de classe](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example show how to use this class to register a new routed event as a class member, along with the routed event \"wrapper\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event.  \n  \n [!code-cs[DPCustom#EventManagerClass](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#eventmanagerclass)]\n [!code-vb[DPCustom#EventManagerClass](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#eventmanagerclass)]"
  syntax:
    content: public static class EventManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEvents
  id: GetRoutedEvents
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve identificadores para eventos encaminhados que foram registados no sistema de eventos."
  remarks: "Mais <xref:System.Windows.RoutedEvent>objetos podem ser registados mais tarde.</xref:System.Windows.RoutedEvent> Este método obtém um instantâneo e a recolha de eventos encaminhados é passível de escrita ao longo da duração de uma aplicação. A coleção devolvida pode ser bastante grande. Mesmo apenas os eventos que fazem parte de contagem de [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], a contagem de coleção é em centenas de elevada."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();
    parameters: []
    return:
      type: System.Windows.RoutedEvent[]
      description: "Uma matriz do tipo <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> que contém os objetos registados."
  overload: System.Windows.EventManager.GetRoutedEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  id: GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Encontra todos os identificadores de evento encaminhado para os eventos que são registados com o tipo de proprietário fornecidos."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "O tipo de iniciar a pesquisa com. Base classes são incluídas na pesquisa."
    return:
      type: System.Windows.RoutedEvent[]
      description: "Uma matriz de correspondência de identificadores de evento encaminhado se qualquer correspondência for localizada; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.EventManager.GetRoutedEventsForOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Regista um processador de classe para um determinado evento encaminhado."
  remarks: "Processamento de classe é uma funcionalidade que está disponível para eventos encaminhados, incluindo eventos anexados são implementados com evento encaminhado fazer uma cópia. Um processador de classe é como um processador estático que não existe para todas as instâncias da classe. Porque o processador é estático, não é possível alterar as propriedades da instância diretamente com um processador de classe, mas pode aceder às instâncias através de `sender` parâmetro e/ou os dados do evento.       Os processadores de classes são invocados antes de processadores de instância. Pode implementar um processador de classe que tem o comportamento de marcar o evento como processado. Por conseguinte, os processadores de instância para um evento processado de classe não são invocados, a menos que os processadores de instância registar-se especificamente para eventos processados.       Muitas do [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] os eventos de elemento base fornecem classe processamento métodos virtuais. Através da substituição estes métodos em classes que herdam as classes de base, pode implementar a classe de processamento sem chamar RegisterClassHandler em construtores estáticos. Estes métodos de processamento de classe, normalmente, existem para eventos de entrada e têm nomes que começam com &quot;Em&quot; e terminar com o nome do evento que está a ser processado de classe.       Para obter mais informações sobre o processamento de classe, consulte [marcar os eventos encaminhados como Handled e processamento de classe](~/add/includes/ajax-current-ext-md.md).       Utilizar esta assinatura, processadores de classe serão registados para invocar apenas em resposta a eventos não processadas. Também pode registar os processadores de classes para invocar, mesmo se os argumentos de evento são marcados processados, utilizando o <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>assinatura, com `handledEventsToo` definido como `true`.</xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>"
  example:
  - "The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling RegisterClassHandler.  \n  \n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#staticandregisterclasshandler)]\n [!code-cs[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: classType
      type: System.Type
      description: "O tipo de classe que é declarar o processamento de classe."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "O identificador de evento encaminhado do evento para processar."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação de processador de classe."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Regista um processador de classe para um determinado evento encaminhado, com a opção para processar eventos em que já está marcada como dados de eventos processados."
  remarks: "Processamento de classe é uma funcionalidade que está disponível para eventos encaminhados, incluindo eventos anexados são implementados com evento encaminhado fazer uma cópia. Um processador de classe é como um processador estático que não existe para todas as instâncias da classe. Porque o processador é estático, não é possível alterar as propriedades da instância diretamente com um processador de classe, mas pode aceder às instâncias através de `sender` parâmetro e/ou os dados do evento.       Os processadores de classes são invocados antes de processadores de instância. Pode implementar um processador de classe que tem o comportamento de marcar o evento como processado. Por conseguinte, os processadores de instância para um evento processado de classe não são invocados, a menos que os processadores de instância registar-se especificamente para eventos processados.       Muitas do [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] os eventos de elemento base fornecem classe processamento métodos virtuais. Através da substituição estes métodos em classes que herdam as classes de base, pode implementar a classe de processamento sem chamar <xref:System.Windows.EventManager.RegisterClassHandler%2A>em construtores estáticos.</xref:System.Windows.EventManager.RegisterClassHandler%2A> Estes métodos de processamento de classe, normalmente, existem para eventos de entrada e têm nomes que começam com &quot;Em&quot; e terminar com o nome do evento que está a ser processado de classe.       Para obter mais informações sobre o processamento de classe, consulte [marcar os eventos encaminhados como Handled e processamento de classe](~/add/includes/ajax-current-ext-md.md).       Utilizar esta assinatura, os processadores de classes podem ser registados para invocar após processados eventos, definindo `handledEventsToo` definido como `true`. Geralmente, deve efetuar este procedimento apenas se existir um problema conhecido processamento que está a tentar resolver o problema, tais como o sistema de entrada de processamento de eventos de rato ou o teclado."
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: classType
      type: System.Type
      description: "O tipo de classe que é declarar o processamento de classe."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "O identificador de evento encaminhado do evento para processar."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação de processador de classe."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a invocar o processador de classe, mesmo se os argumentos do evento encaminhado foram marcados como processado; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para manter o comportamento predefinido não invocar o processador em qualquer evento marcada como processada."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Regista um novo evento encaminhado com o [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] sistema eventos."
  remarks: "Utilize o valor de retorno deste método para criar a declaração estática para um único <xref:System.Windows.RoutedEvent>campo Identificador.</xref:System.Windows.RoutedEvent> Este campo deve ser armazenado no tipo de proprietário.       Existem vários considerável convenções e melhores práticas associadas a eventos encaminhados como devem ser com o nome, registadas e expostas numa classe. Para obter mais informações, consulte [descrição geral de eventos encaminhados](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "O nome do evento encaminhado. O nome tem de ser exclusivo num tipo de proprietário e não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia."
    - id: routingStrategy
      type: System.Windows.RoutingStrategy
      description: "A estratégia de encaminhamento do evento como um valor de enumeração."
    - id: handlerType
      type: System.Type
      description: "O tipo de processador de eventos. Isto deve ser um tipo de delegado e não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: ownerType
      type: System.Type
      description: "O tipo de classe de proprietário do evento encaminhado. Não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Windows.RoutedEvent
      description: "O identificador para o evento encaminhado recentemente registado. Este objeto de identificador pode agora ser armazenada como um campo estático de uma classe e, em seguida, utilizado como parâmetro para métodos anexar processadores de eventos. O identificador de evento encaminhado também é utilizado para outro sistema de evento [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]."
  overload: System.Windows.EventManager.RegisterRoutedEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.EventManager.GetRoutedEvents
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
- uid: System.Windows.RoutedEvent[]
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent[]
  spec.csharp:
  - uid: System.Windows.RoutedEvent
    name: RoutedEvent
    nameWithType: RoutedEvent
    fullName: RoutedEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.EventManager.GetRoutedEvents*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents
  nameWithType: EventManager.GetRoutedEvents
- uid: System.Windows.EventManager.GetRoutedEventsForOwner*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner
  nameWithType: EventManager.GetRoutedEventsForOwner
- uid: System.Windows.EventManager.RegisterClassHandler*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler
  nameWithType: EventManager.RegisterClassHandler
- uid: System.Windows.EventManager.RegisterRoutedEvent*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent
  nameWithType: EventManager.RegisterRoutedEvent
