### YamlMime:ManagedReference
items:
- uid: System.Windows.Point
  id: Point
  children:
  - System.Windows.Point.#ctor(System.Double,System.Double)
  - System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.Equals(System.Object)
  - System.Windows.Point.Equals(System.Windows.Point)
  - System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.GetHashCode
  - System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  - System.Windows.Point.Offset(System.Double,System.Double)
  - System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  - System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  - System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  - System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.Parse(System.String)
  - System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Point.ToString
  - System.Windows.Point.ToString(System.IFormatProvider)
  - System.Windows.Point.X
  - System.Windows.Point.Y
  langs:
  - csharp
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
  type: Struct
  summary: "Represents an x- and y-coordinate pair in two-dimensional space."
  remarks: "In XAML, the delimiter between the <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> values of a Point can be either a comma or a space.       Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a Point in XAML, because that will clash with the string type conversion of a Point attribute value into the <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> components.      <a name=&quot;xamlAttributeUsage_Duration&quot;></a>    ## XAML Attribute Usage      ```   <object property=&quot;x,y&quot;/>   -or-   <object property=&quot;x y&quot;/>   ```      <a name=&quot;xamlValues_MinWidth&quot;></a>    ## XAML Values    *x*    The x-coordinate of this Point.       *y*    The y-coordinate of this Point."
  example:
  - "The following example shows how to check if two Point structures are not equal.  It also illustrates how to assign values to a Point structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PointConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.PointValueSerializer))]

      public struct Point : IFormattable
  inheritance:
  - System.ValueType
  implements:
  - System.IFormattable
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Windows.Point
  langs:
  - csharp
  name: Point(Double,Double)
  nameWithType: Point.Point(Double,Double)
  fullName: System.Windows.Point.Point(Double,Double)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a new <see cref=&quot;T:System.Windows.Point&quot;></see> structure that contains the specified coordinates."
  syntax:
    content: public Point (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: "The x-coordinate of the new  structure."
    - id: y
      type: System.Double
      description: "The y-coordinate of the new  structure."
  overload: System.Windows.Point.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  id: Add(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Add(Point,Vector)
  nameWithType: Point.Add(Point,Vector)
  fullName: System.Windows.Point.Add(Point,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Adds a <see cref=&quot;T:System.Windows.Vector&quot;></see> to a <see cref=&quot;T:System.Windows.Point&quot;></see> and returns the result as a <see cref=&quot;T:System.Windows.Point&quot;></see> structure."
  remarks: "Adding a <xref:System.Windows.Point> structure to a <xref:System.Windows.Point> structure is prohibited."
  example:
  - "This example adds a <xref:System.Windows.Point> to a <xref:System.Windows.Vector> and returns the result as a <xref:System.Windows.Vector> structure.  \n  \n [!code-cs[PointExamples_snip#AddPointAndVectorExample_csharp](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#addpointandvectorexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Add (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The  structure to add."
    - id: vector
      type: System.Windows.Vector
      description: "The  structure to add."
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: System.Windows.Point.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Determines whether the specified &lt;xref:System.Object&gt; is a <see cref=&quot;T:System.Windows.Point&quot;></see> and whether it contains the same coordinates as this <see cref=&quot;T:System.Windows.Point&quot;></see>."
  remarks: "<xref:System.Windows.Point> coordinates are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when operated upon, a comparison between two <xref:System.Windows.Point> values that are logically equal might fail."
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the non-static Equals method.  \n  \n [!code-cs[PointExamples_snip#NonStaticEqualsExample_csharp](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#nonstaticequalsexample_csharp)]"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "The <xref:System.Object> to compare."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Equals(System.Windows.Point)
  id: Equals(System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: System.Windows.Point.Equals(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compares two <see cref=&quot;T:System.Windows.Point&quot;></see> structures for equality."
  remarks: "<xref:System.Windows.Point> coordinates are expressed using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when operated on, a comparison between two <xref:System.Windows.Point> values that are logically equal might fail."
  syntax:
    content: public bool Equals (System.Windows.Point value);
    parameters:
    - id: value
      type: System.Windows.Point
      description: "The point to compare to this instance."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  id: Equals(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Point,Point)
  nameWithType: Point.Equals(Point,Point)
  fullName: System.Windows.Point.Equals(Point,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compares two <see cref=&quot;T:System.Windows.Point&quot;></see> structures for equality."
  remarks: "Point coordinates are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when operated upon, a comparison between two <xref:System.Windows.Point> values that are logically equal might fail."
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the static Equals method.  \n  \n [!code-cs[PointExamples_snip#StaticEqualsExample_csharp](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#staticequalsexample_csharp)]"
  syntax:
    content: public static bool Equals (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "The first point to compare."
    - id: point2
      type: System.Windows.Point
      description: "The second point to compare."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.GetHashCode
  id: GetHashCode
  parent: System.Windows.Point
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: System.Windows.Point.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returns the hash code for this <see cref=&quot;T:System.Windows.Point&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to get the hash code of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#gethashcodeexample_csharp)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Windows.Point.GetHashCode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  id: Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Multiply(Point,Matrix)
  nameWithType: Point.Multiply(Point,Matrix)
  fullName: System.Windows.Point.Multiply(Point,Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Transforms the specified <see cref=&quot;T:System.Windows.Point&quot;></see> structure by the specified <see cref=&quot;T:System.Windows.Media.Matrix&quot;></see> structure."
  remarks: ''
  example:
  - "The following example shows how to multiply a <xref:System.Windows.Point> structure by a <xref:System.Windows.Media.Matrix> structure using the Multiply method.  \n  \n [!code-cs[PointExamples_snip#MultiplyPointByMatrixExample_csharp](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#multiplypointbymatrixexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point to transform."
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "The transformation matrix."
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.Multiply*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Offset(System.Double,System.Double)
  id: Offset(System.Double,System.Double)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Offset(Double,Double)
  nameWithType: Point.Offset(Double,Double)
  fullName: System.Windows.Point.Offset(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Offsets a point&quot;s &lt;xref:System.Windows.Point.X%2A&gt; and &lt;xref:System.Windows.Point.Y%2A&gt; coordinates by the specified amounts."
  remarks: "This operation is equivalent to adding a <xref:System.Windows.Point> to a <xref:System.Windows.Vector>.       Note that calling the Offset method will only have an effect if you can change the <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> properties directly. Because <xref:System.Windows.Point> is a value type, if you reference a <xref:System.Windows.Point> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <xref:System.Windows.Point.X%2A> or <xref:System.Windows.Point.Y%2A> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <xref:System.Windows.Point> that is referenced as a property or indexer, create a new <xref:System.Windows.Point>, modify its fields, and then assign the <xref:System.Windows.Point> back to the property or indexer."
  example:
  - "The following example shows how to offset the <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> values of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#OffsetExample_csharp](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#offsetexample_csharp)]"
  syntax:
    content: public void Offset (double offsetX, double offsetY);
    parameters:
    - id: offsetX
      type: System.Double
      description: "The amount to offset the point&quot;s       <xref:System.Windows.Point.X%2A> coordinate."
    - id: offsetY
      type: System.Double
      description: "The amount to offset the       point&quot;s <xref:System.Windows.Point.Y%2A> coordinate."
  overload: System.Windows.Point.Offset*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  id: op_Addition(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Addition(Point,Vector)
  nameWithType: Point.op_Addition(Point,Vector)
  fullName: System.Windows.Point.op_Addition(Point,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Translates the specified <see cref=&quot;T:System.Windows.Point&quot;></see> by the specified <see cref=&quot;T:System.Windows.Vector&quot;></see> and returns the result."
  remarks: ''
  example:
  - "The following example shows how to add a <xref:System.Windows.Point> to a <xref:System.Windows.Vector> using the overloaded (+) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedAdditionOperatorExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#overloadedadditionoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedAdditionOperatorExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#overloadedadditionoperatorexample)]"
  syntax:
    content: public static System.Windows.Point op_Addition (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point to translate."
    - id: vector
      type: System.Windows.Vector
      description: "The amount by which to translate `point`."
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.op_Addition*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  id: op_Equality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Equality(Point,Point)
  nameWithType: Point.op_Equality(Point,Point)
  fullName: System.Windows.Point.op_Equality(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compares two <see cref=&quot;T:System.Windows.Point&quot;></see> structures for equality."
  remarks: "A point&quot;s coordinates are described using <xref:System.Double> values. Because the value of <xref:System.Double> can lose precision when arithmetic operations are performed on them, a comparison between two <xref:System.Windows.Point> values that are logically equal might fail."
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the overloaded (==) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#overloadedequalityoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#overloadedequalityoperatorexample)]"
  syntax:
    content: public static bool op_Equality (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "The first  structure to compare."
    - id: point2
      type: System.Windows.Point
      description: "The second  structure to compare."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Point.op_Equality*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  id: op_Explicit(System.Windows.Point to System.Windows.Size)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Size op_Explicit (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "To be added."
    return:
      type: System.Windows.Size
      description: "To be added."
  overload: System.Windows.Point.op_Explicit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  id: op_Explicit(System.Windows.Point to System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Vector op_Explicit (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "To be added."
    return:
      type: System.Windows.Vector
      description: "To be added."
  overload: System.Windows.Point.op_Explicit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  id: op_Inequality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Inequality(Point,Point)
  nameWithType: Point.op_Inequality(Point,Point)
  fullName: System.Windows.Point.op_Inequality(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compares two <see cref=&quot;T:System.Windows.Point&quot;></see> structures for inequality."
  remarks: "A point&quot;s <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> coordinates are described using <xref:System.Double> values. Because <xref:System.Double> values can lose precision when operated on, a comparison between two <xref:System.Windows.Point> values that are logically equal might fail."
  example:
  - "The following example shows how to check whether two <xref:System.Windows.Point> structures are not equal, using the overloaded (!=) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#overloadedinequalityoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#overloadedinequalityoperatorexample)]"
  syntax:
    content: public static bool op_Inequality (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "The first point to compare."
    - id: point2
      type: System.Windows.Point
      description: "The second point to compare."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Point.op_Inequality*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  id: op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Multiply(Point,Matrix)
  nameWithType: Point.op_Multiply(Point,Matrix)
  fullName: System.Windows.Point.op_Multiply(Point,Matrix)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Transforms the specified <see cref=&quot;T:System.Windows.Point&quot;></see> by the specified <see cref=&quot;T:System.Windows.Media.Matrix&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to multiply a <xref:System.Windows.Point> by a <xref:System.Windows.Media.Matrix> using the overloaded (*) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#overloadedmultiplypointbymatrixoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#overloadedmultiplypointbymatrixoperatorexample)]"
  syntax:
    content: public static System.Windows.Point op_Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point to transform."
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "The transformation matrix."
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.op_Multiply*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  id: op_Subtraction(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Subtraction(Point,Point)
  nameWithType: Point.op_Subtraction(Point,Point)
  fullName: System.Windows.Point.op_Subtraction(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Subtracts the specified <see cref=&quot;T:System.Windows.Point&quot;></see> from another specified <see cref=&quot;T:System.Windows.Point&quot;></see> and returns the difference as a <see cref=&quot;T:System.Windows.Vector&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Point> from another <xref:System.Windows.Point> and return a <xref:System.Windows.Vector> using the overloaded (-) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#overloadedsubtractionoperatorexample2)]\n [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#overloadedsubtractionoperatorexample2)]"
  syntax:
    content: public static System.Windows.Vector op_Subtraction (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "The point from which `point2` is subtracted."
    - id: point2
      type: System.Windows.Point
      description: "The point to subtract from `point1`."
    return:
      type: System.Windows.Vector
      description: "To be added."
  overload: System.Windows.Point.op_Subtraction*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  id: op_Subtraction(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Subtraction(Point,Vector)
  nameWithType: Point.op_Subtraction(Point,Vector)
  fullName: System.Windows.Point.op_Subtraction(Point,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Subtracts the specified <see cref=&quot;T:System.Windows.Vector&quot;></see> from the specified <see cref=&quot;T:System.Windows.Point&quot;></see> and returns the resulting <see cref=&quot;T:System.Windows.Point&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Vector> from a <xref:System.Windows.Point> using the overloaded (-) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#overloadedsubtractionoperatorexample1)]\n [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#overloadedsubtractionoperatorexample1)]"
  syntax:
    content: public static System.Windows.Point op_Subtraction (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point from which `vector` is subtracted."
    - id: vector
      type: System.Windows.Vector
      description: "The vector to subtract from `point1`"
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.op_Subtraction*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Point.Parse(String)
  fullName: System.Windows.Point.Parse(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Constructs a <see cref=&quot;T:System.Windows.Point&quot;></see> from the specified &lt;xref:System.String&gt;."
  remarks: ''
  example:
  - "The following example shows how to use the Parse method to convert a <xref:System.String> representation of a point into a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#ParseExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#parseexample)]\n [!code-vb[PointExamples_snip#ParseExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#parseexample)]"
  syntax:
    content: public static System.Windows.Point Parse (string source);
    parameters:
    - id: source
      type: System.String
      description: "A string representation of a point."
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.Parse*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n    source is not composed of two comma- or space-delimited double values."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n    source does not contain two numbers.  \n  \n -or-  \n  \n source contains too many delimiters."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  id: Subtract(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Subtract(Point,Point)
  nameWithType: Point.Subtract(Point,Point)
  fullName: System.Windows.Point.Subtract(Point,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Subtracts the specified <see cref=&quot;T:System.Windows.Point&quot;></see> from another specified <see cref=&quot;T:System.Windows.Point&quot;></see> and returns the difference as a <see cref=&quot;T:System.Windows.Vector&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Point> from another <xref:System.Windows.Point> using the static Subtract method.  \n  \n [!code-cs[PointExamples_snip#SubtractExample2](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#subtractexample2)]\n [!code-vb[PointExamples_snip#SubtractExample2](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#subtractexample2)]"
  syntax:
    content: public static System.Windows.Vector Subtract (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "The point from which `point2` is subtracted."
    - id: point2
      type: System.Windows.Point
      description: "The point to subtract from `point1`."
    return:
      type: System.Windows.Vector
      description: "To be added."
  overload: System.Windows.Point.Subtract*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  id: Subtract(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Subtract(Point,Vector)
  nameWithType: Point.Subtract(Point,Vector)
  fullName: System.Windows.Point.Subtract(Point,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Subtracts the specified <see cref=&quot;T:System.Windows.Vector&quot;></see> from the specified <see cref=&quot;T:System.Windows.Point&quot;></see> and returns the resulting <see cref=&quot;T:System.Windows.Point&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Vector> from a <xref:System.Windows.Point> using the static Subtract method.  \n  \n [!code-cs[PointExamples_snip#SubtractExample1](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#subtractexample1)]\n [!code-vb[PointExamples_snip#SubtractExample1](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#subtractexample1)]"
  syntax:
    content: public static System.Windows.Point Subtract (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "The point from which `vector` is subtracted."
    - id: vector
      type: System.Windows.Vector
      description: "The `vector` to subtract from `point`."
    return:
      type: System.Windows.Point
      description: "To be added."
  overload: System.Windows.Point.Subtract*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Point
  langs:
  - csharp
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Point.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Point.System.IFormattable.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "This member supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see &lt;xref:System.IFormattable.ToString%2A&gt;."
  syntax:
    content: string IFormattable.ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: "The string specifying the format to use.       -or-        to use the default format defined for the type of the <xref:System.IFormattable> implementation."
    - id: provider
      type: System.IFormatProvider
      description: "The  to use to format the value.       -or-        to obtain the numeric format information from the current locale setting of the operating system."
    return:
      type: System.String
      description: "To be added."
  overload: System.Windows.Point.System#IFormattable#ToString*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.ToString
  id: ToString
  parent: System.Windows.Point
  langs:
  - csharp
  name: ToString()
  nameWithType: Point.ToString()
  fullName: System.Windows.Point.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a &lt;xref:System.String&gt; representation of this <see cref=&quot;T:System.Windows.Point&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to use the ToString method to get a <xref:System.String> representation of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#ToStringExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#tostringexample)]\n [!code-vb[PointExamples_snip#ToStringExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#tostringexample)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "To be added."
  overload: System.Windows.Point.ToString*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Point
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Point.ToString(IFormatProvider)
  fullName: System.Windows.Point.ToString(IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Creates a &lt;xref:System.String&gt; representation of this <see cref=&quot;T:System.Windows.Point&quot;></see>."
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "Culture-specific formatting information."
    return:
      type: System.String
      description: "To be added."
  overload: System.Windows.Point.ToString*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.X
  id: X
  parent: System.Windows.Point
  langs:
  - csharp
  name: X
  nameWithType: Point.X
  fullName: System.Windows.Point.X
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the X-coordinate value of this <see cref=&quot;T:System.Windows.Point&quot;></see> structure."
  remarks: ''
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are not equal.  It also illustrates how to assign values to a <xref:System.Windows.Point> structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: public double X { get; set; }
    return:
      type: System.Double
      description: "The X-coordinate value of this <see cref=&quot;T:System.Windows.Point&quot;></see> structure.  The default value is `0`."
  overload: System.Windows.Point.X*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Point.Y
  id: Y
  parent: System.Windows.Point
  langs:
  - csharp
  name: Y
  nameWithType: Point.Y
  fullName: System.Windows.Point.Y
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the Y-coordinate value of this <see cref=&quot;T:System.Windows.Point&quot;></see>."
  remarks: ''
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are not equal.  It also illustrates how to assign values to a <xref:System.Windows.Point> structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/CSharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/VisualBasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: public double Y { get; set; }
    return:
      type: System.Double
      description: "The Y-coordinate value of this <see cref=&quot;T:System.Windows.Point&quot;></see> structure.  The default value is `0`."
  overload: System.Windows.Point.Y*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Windows.Point.#ctor(System.Double,System.Double)
  parent: System.Windows.Point
  isExternal: false
  name: Point(Double,Double)
  nameWithType: Point.Point(Double,Double)
  fullName: System.Windows.Point.Point(Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: Add(Point,Vector)
  nameWithType: Point.Add(Point,Vector)
  fullName: System.Windows.Point.Add(Point,Vector)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Point.Equals(System.Object)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: System.Windows.Point.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Point.Equals(System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: System.Windows.Point.Equals(Point)
- uid: System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Point,Point)
  nameWithType: Point.Equals(Point,Point)
  fullName: System.Windows.Point.Equals(Point,Point)
- uid: System.Windows.Point.GetHashCode
  parent: System.Windows.Point
  isExternal: false
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: System.Windows.Point.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  isExternal: false
  name: Multiply(Point,Matrix)
  nameWithType: Point.Multiply(Point,Matrix)
  fullName: System.Windows.Point.Multiply(Point,Matrix)
- uid: System.Windows.Media.Matrix
  parent: System.Windows.Media
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Point.Offset(System.Double,System.Double)
  parent: System.Windows.Point
  isExternal: false
  name: Offset(Double,Double)
  nameWithType: Point.Offset(Double,Double)
  fullName: System.Windows.Point.Offset(Double,Double)
- uid: System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Addition(Point,Vector)
  nameWithType: Point.op_Addition(Point,Vector)
  fullName: System.Windows.Point.op_Addition(Point,Vector)
- uid: System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Equality(Point,Point)
  nameWithType: Point.op_Equality(Point,Point)
  fullName: System.Windows.Point.op_Equality(Point,Point)
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
- uid: System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Inequality(Point,Point)
  nameWithType: Point.op_Inequality(Point,Point)
  fullName: System.Windows.Point.op_Inequality(Point,Point)
- uid: System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  isExternal: false
  name: op_Multiply(Point,Matrix)
  nameWithType: Point.op_Multiply(Point,Matrix)
  fullName: System.Windows.Point.op_Multiply(Point,Matrix)
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction(Point,Point)
  nameWithType: Point.op_Subtraction(Point,Point)
  fullName: System.Windows.Point.op_Subtraction(Point,Point)
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction(Point,Vector)
  nameWithType: Point.op_Subtraction(Point,Vector)
  fullName: System.Windows.Point.op_Subtraction(Point,Vector)
- uid: System.Windows.Point.Parse(System.String)
  parent: System.Windows.Point
  isExternal: false
  name: Parse(String)
  nameWithType: Point.Parse(String)
  fullName: System.Windows.Point.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Subtract(Point,Point)
  nameWithType: Point.Subtract(Point,Point)
  fullName: System.Windows.Point.Subtract(Point,Point)
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: Subtract(Point,Vector)
  nameWithType: Point.Subtract(Point,Vector)
  fullName: System.Windows.Point.Subtract(Point,Vector)
- uid: System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  parent: System.Windows.Point
  isExternal: false
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Point.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Point.System.IFormattable.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Point.ToString
  parent: System.Windows.Point
  isExternal: false
  name: ToString()
  nameWithType: Point.ToString()
  fullName: System.Windows.Point.ToString()
- uid: System.Windows.Point.ToString(System.IFormatProvider)
  parent: System.Windows.Point
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Point.ToString(IFormatProvider)
  fullName: System.Windows.Point.ToString(IFormatProvider)
- uid: System.Windows.Point.X
  parent: System.Windows.Point
  isExternal: false
  name: X
  nameWithType: Point.X
  fullName: System.Windows.Point.X
- uid: System.Windows.Point.Y
  parent: System.Windows.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
  fullName: System.Windows.Point.Y
- uid: System.Windows.Point.#ctor*
  parent: System.Windows.Point
  isExternal: false
  name: Point
  nameWithType: Point.Point
- uid: System.Windows.Point.Add*
  parent: System.Windows.Point
  isExternal: false
  name: Add
  nameWithType: Point.Add
- uid: System.Windows.Point.Equals*
  parent: System.Windows.Point
  isExternal: false
  name: Equals
  nameWithType: Point.Equals
- uid: System.Windows.Point.GetHashCode*
  parent: System.Windows.Point
  isExternal: false
  name: GetHashCode
  nameWithType: Point.GetHashCode
- uid: System.Windows.Point.Multiply*
  parent: System.Windows.Point
  isExternal: false
  name: Multiply
  nameWithType: Point.Multiply
- uid: System.Windows.Point.Offset*
  parent: System.Windows.Point
  isExternal: false
  name: Offset
  nameWithType: Point.Offset
- uid: System.Windows.Point.op_Addition*
  parent: System.Windows.Point
  isExternal: false
  name: op_Addition
  nameWithType: Point.op_Addition
- uid: System.Windows.Point.op_Equality*
  parent: System.Windows.Point
  isExternal: false
  name: op_Equality
  nameWithType: Point.op_Equality
- uid: System.Windows.Point.op_Explicit*
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit
  nameWithType: Point.op_Explicit
- uid: System.Windows.Point.op_Inequality*
  parent: System.Windows.Point
  isExternal: false
  name: op_Inequality
  nameWithType: Point.op_Inequality
- uid: System.Windows.Point.op_Multiply*
  parent: System.Windows.Point
  isExternal: false
  name: op_Multiply
  nameWithType: Point.op_Multiply
- uid: System.Windows.Point.op_Subtraction*
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction
  nameWithType: Point.op_Subtraction
- uid: System.Windows.Point.Parse*
  parent: System.Windows.Point
  isExternal: false
  name: Parse
  nameWithType: Point.Parse
- uid: System.Windows.Point.Subtract*
  parent: System.Windows.Point
  isExternal: false
  name: Subtract
  nameWithType: Point.Subtract
- uid: System.Windows.Point.System#IFormattable#ToString*
  parent: System.Windows.Point
  isExternal: false
  name: System.IFormattable.ToString
  nameWithType: Point.System.IFormattable.ToString
- uid: System.Windows.Point.ToString*
  parent: System.Windows.Point
  isExternal: false
  name: ToString
  nameWithType: Point.ToString
- uid: System.Windows.Point.X*
  parent: System.Windows.Point
  isExternal: false
  name: X
  nameWithType: Point.X
- uid: System.Windows.Point.Y*
  parent: System.Windows.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
