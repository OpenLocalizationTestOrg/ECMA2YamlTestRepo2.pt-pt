### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Binary
  id: Binary
  children:
  - System.Data.Linq.Binary.#ctor(System.Byte[])
  - System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)
  - System.Data.Linq.Binary.Equals(System.Object)
  - System.Data.Linq.Binary.GetHashCode
  - System.Data.Linq.Binary.Length
  - System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  - System.Data.Linq.Binary.op_Implicit(System.Byte[])
  - System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  - System.Data.Linq.Binary.ToArray
  - System.Data.Linq.Binary.ToString
  langs:
  - csharp
  name: Binary
  nameWithType: Binary
  fullName: System.Data.Linq.Binary
  type: Class
  summary: "Represents an immutable block of binary data."
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract]

      public sealed class Binary : IEquatable<System.Data.Linq.Binary>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.Linq.Binary>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Binary(Byte[])
  nameWithType: Binary.Binary(Byte[])
  fullName: System.Data.Linq.Binary.Binary(Byte[])
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.Linq.Binary&quot;></xref> class."
  remarks: "When`null` is passed to this constructor instead of the required array of bytes, a <xref:System.ArgumentNullException?displayProperty=fullName> exception is thrown. Do not rely on this behavior because it may change in the future."
  syntax:
    content: public Binary (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: "The bytes representing the binary data."
  overload: System.Data.Linq.Binary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)
  id: Equals(System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Equals(Binary)
  nameWithType: Binary.Equals(Binary)
  fullName: System.Data.Linq.Binary.Equals(Binary)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Determines whether two binary objects are equal."
  syntax:
    content: public bool Equals (System.Data.Linq.Binary other);
    parameters:
    - id: other
      type: System.Data.Linq.Binary
      description: "The <xref:System.Object> to which the current object is being compared."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two binary objects are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Linq.Binary.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Binary.Equals(Object)
  fullName: System.Data.Linq.Binary.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Determines whether the specified <xref:System.Object> is equal to the current <xref:System.Object>."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The <xref:System.Object> to compare with the current <xref:System.Object>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two binary objects are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Linq.Binary.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.GetHashCode
  id: GetHashCode
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Binary.GetHashCode()
  fullName: System.Data.Linq.Binary.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Serves as a hash function for a particular type."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current binary object."
  overload: System.Data.Linq.Binary.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.Length
  id: Length
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Length
  nameWithType: Binary.Length
  fullName: System.Data.Linq.Binary.Length
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Gets the length of the binary object."
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "An integer representing the length."
  overload: System.Data.Linq.Binary.Length*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  id: op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: op_Equality(Binary,Binary)
  nameWithType: Binary.op_Equality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Equality(Binary,Binary)
  type: Operator
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Describes the equality relationship between two binary objects."
  remarks: "Returns `true` if both are `null` but returns `false` if only one is `null`."
  syntax:
    content: public static bool op_Equality (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);
    parameters:
    - id: binary1
      type: System.Data.Linq.Binary
      description: "First binary object."
    - id: binary2
      type: System.Data.Linq.Binary
      description: "Second binary object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the binary objects are equal; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Linq.Binary.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.op_Implicit(System.Byte[])
  id: op_Implicit(System.Byte[])
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: op_Implicit(Byte[])
  nameWithType: Binary.op_Implicit(Byte[])
  fullName: System.Data.Linq.Binary.op_Implicit(Byte[])
  type: Operator
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public static System.Data.Linq.Binary op_Implicit (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: "To be added."
    return:
      type: System.Data.Linq.Binary
      description: "To be added."
  overload: System.Data.Linq.Binary.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  id: op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: op_Inequality(Binary,Binary)
  nameWithType: Binary.op_Inequality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Inequality(Binary,Binary)
  type: Operator
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Describes the inequality relationship between two binary objects."
  remarks: "Returns `false` if both are `null`, but returns `true` if either is `null`."
  syntax:
    content: public static bool op_Inequality (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);
    parameters:
    - id: binary1
      type: System.Data.Linq.Binary
      description: "The first binary object."
    - id: binary2
      type: System.Data.Linq.Binary
      description: "The second binary object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the binary objects are not equal; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Linq.Binary.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.ToArray
  id: ToArray
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: ToArray()
  nameWithType: Binary.ToArray()
  fullName: System.Data.Linq.Binary.ToArray()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Returns an array of bytes that represents the current binary object."
  syntax:
    content: public byte[] ToArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "A byte array that contains the value of the current binary object."
  overload: System.Data.Linq.Binary.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.ToString
  id: ToString
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: ToString()
  nameWithType: Binary.ToString()
  fullName: System.Data.Linq.Binary.ToString()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Returns a <xref:System.String> that represents the current binary object."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A <xref:System.String> that represents the current binary object."
  overload: System.Data.Linq.Binary.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.Binary.#ctor(System.Byte[])
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Binary(Byte[])
  nameWithType: Binary.Binary(Byte[])
  fullName: System.Data.Linq.Binary.Binary(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Equals(Binary)
  nameWithType: Binary.Equals(Binary)
  fullName: System.Data.Linq.Binary.Equals(Binary)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Binary
  parent: System.Data.Linq
  isExternal: false
  name: Binary
  nameWithType: Binary
  fullName: System.Data.Linq.Binary
- uid: System.Data.Linq.Binary.Equals(System.Object)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Equals(Object)
  nameWithType: Binary.Equals(Object)
  fullName: System.Data.Linq.Binary.Equals(Object)
- uid: System.Data.Linq.Binary.GetHashCode
  parent: System.Data.Linq.Binary
  isExternal: false
  name: GetHashCode()
  nameWithType: Binary.GetHashCode()
  fullName: System.Data.Linq.Binary.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.Binary.Length
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Length
  nameWithType: Binary.Length
  fullName: System.Data.Linq.Binary.Length
- uid: System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Equality(Binary,Binary)
  nameWithType: Binary.op_Equality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Equality(Binary,Binary)
- uid: System.Data.Linq.Binary.op_Implicit(System.Byte[])
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Implicit(Byte[])
  nameWithType: Binary.op_Implicit(Byte[])
  fullName: System.Data.Linq.Binary.op_Implicit(Byte[])
- uid: System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Inequality(Binary,Binary)
  nameWithType: Binary.op_Inequality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Inequality(Binary,Binary)
- uid: System.Data.Linq.Binary.ToArray
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToArray()
  nameWithType: Binary.ToArray()
  fullName: System.Data.Linq.Binary.ToArray()
- uid: System.Data.Linq.Binary.ToString
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToString()
  nameWithType: Binary.ToString()
  fullName: System.Data.Linq.Binary.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Binary.#ctor*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Binary
  nameWithType: Binary.Binary
- uid: System.Data.Linq.Binary.Equals*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Equals
  nameWithType: Binary.Equals
- uid: System.Data.Linq.Binary.GetHashCode*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: GetHashCode
  nameWithType: Binary.GetHashCode
- uid: System.Data.Linq.Binary.Length*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Length
  nameWithType: Binary.Length
- uid: System.Data.Linq.Binary.op_Equality*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Equality
  nameWithType: Binary.op_Equality
- uid: System.Data.Linq.Binary.op_Implicit*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Implicit
  nameWithType: Binary.op_Implicit
- uid: System.Data.Linq.Binary.op_Inequality*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Inequality
  nameWithType: Binary.op_Inequality
- uid: System.Data.Linq.Binary.ToArray*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToArray
  nameWithType: Binary.ToArray
- uid: System.Data.Linq.Binary.ToString*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToString
  nameWithType: Binary.ToString
