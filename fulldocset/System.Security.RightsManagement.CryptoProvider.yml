### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.CryptoProvider
  id: CryptoProvider
  children:
  - System.Security.RightsManagement.CryptoProvider.BlockSize
  - System.Security.RightsManagement.CryptoProvider.BoundGrants
  - System.Security.RightsManagement.CryptoProvider.CanDecrypt
  - System.Security.RightsManagement.CryptoProvider.CanEncrypt
  - System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  - System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  - System.Security.RightsManagement.CryptoProvider.Dispose
  - System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  - System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  - System.Security.RightsManagement.CryptoProvider.Finalize
  langs:
  - csharp
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
  type: Class
  summary: "Fornece serviços de gestão para a encriptação e desencriptação de conteúdo protegido de direitos digitais."
  remarks: "CryptoProvider é criado como resultado de <xref:System.Security.RightsManagement.UseLicense.Bind%2A>método quando se vincula uma direitos geridos <xref:System.Security.RightsManagement.UseLicense>para <xref:System.Security.RightsManagement.SecureEnvironment>.</xref:System.Security.RightsManagement.SecureEnvironment> </xref:System.Security.RightsManagement.UseLicense> </xref:System.Security.RightsManagement.UseLicense.Bind%2A>       Tal como com outros <xref:System.Security.RightsManagement>tipos, CryptoProvider só é utilizado em aplicações de fidedignidade total.</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows how to use the CryptoProvider class to create an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class CryptoProvider : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize
  id: BlockSize
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
  fullName: System.Security.RightsManagement.CryptoProvider.BlockSize
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém o tamanho do bloco de cifras, em bytes."
  remarks: "O `clearText` e `cipherText` memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>e <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>tem de ser n * tamanho de bloco bytes de comprimento, onde &quot; N&quot;é um número inteiro maior que ou igual a 1.</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>       Se <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>é `false`, memórias intermédias transmitido <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>tem</xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> de ser o mesmo comprimento memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>       Se <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>é `true`, memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>pode ter um comprimento diferente de memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(todos os tamanhos de memória intermédia tem ainda sempre de ser um múltiplo de tamanho de bloco de bytes de comprimento).</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>       Um tamanho de bloco de 1 indica que as cifras é uma cifra de fluxo; um tamanho de bloco de 2 ou superior indica uma cifra de blocos."
  example:
  - "The following example shows how to use the BlockSize property in converting clear-text data to encrypted-text data.  \n  \n [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/visualbasic/rmcontentpublish/window1.xaml.vb#rmcontpubencrypt)]\n [!code-cs[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/csharp/RmContentPublish/Window1.xaml.cs#rmcontpubencrypt)]"
  syntax:
    content: public int BlockSize { get; }
    return:
      type: System.Int32
      description: "O tamanho do bloco cifra, em bytes.  O tamanho do bloco predefinido para [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)] é 8."
  overload: System.Security.RightsManagement.CryptoProvider.BlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants
  id: BoundGrants
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
  fullName: System.Security.RightsManagement.CryptoProvider.BoundGrants
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém uma coleção de listar os direitos que passaram na verificação e que são concedidas ao utilizador."
  remarks: ''
  example:
  - "The following example shows how to use the BoundGrants property to obtain a list rights granted through a <xref:System.Security.RightsManagement.UseLicense>.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewuselicense)]\n [!code-cs[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewuselicense)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentGrant> BoundGrants { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentGrant}
      description: "Uma coleção a enumerar os direitos que passaram na verificação e que são concedidas ao utilizador."
  overload: System.Security.RightsManagement.CryptoProvider.BoundGrants*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  id: CanDecrypt
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém um valor que indica se o utilizador tem direitos para desencriptar."
  remarks: "Devolve CanDecrypt **verdadeiro** se o <xref:System.Security.RightsManagement.UseLicense>vinculados a este <xref:System.Security.RightsManagement.CryptoProvider>concede ao utilizador direitos de acesso de leitura como ver, editar, imprimir ou proprietário.</xref:System.Security.RightsManagement.CryptoProvider> </xref:System.Security.RightsManagement.UseLicense>"
  example:
  - "The following example shows how to use the CanDecrypt property to determine if decryption is allowed.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewuselicense)]\n [!code-cs[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewuselicense)]"
  syntax:
    content: public bool CanDecrypt { get; }
    return:
      type: System.Boolean
      description: '**Verdadeiro** se o <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref> concede direitos de utilizador para desencriptar; caso contrário, **falso**.'
  overload: System.Security.RightsManagement.CryptoProvider.CanDecrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  id: CanEncrypt
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém um valor que indica se o utilizador tem direitos para encriptar."
  remarks: "<xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>Devolve **verdadeiro** se o <xref:System.Security.RightsManagement.UseLicense>vinculados a este <xref:System.Security.RightsManagement.CryptoProvider>concede ao utilizador direitos de acesso de escrita como editar ou proprietário.</xref:System.Security.RightsManagement.CryptoProvider> </xref:System.Security.RightsManagement.UseLicense></xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>"
  syntax:
    content: public bool CanEncrypt { get; }
    return:
      type: System.Boolean
      description: '**Verdadeiro** se o <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref> concede direitos de utilizador a encriptar; caso contrário, **falso**.'
  overload: System.Security.RightsManagement.CryptoProvider.CanEncrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  id: CanMergeBlocks
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
  fullName: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém um valor que indica se <> </> *> e <> </> *> pode aceitar a bloquear de memórias intermédias diferentes tamanhos de comprimento."
  remarks: "O `clearText` e `cipherText` memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>e <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>tem de ser n* <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes de comprimento, onde &quot; N&quot;é um número inteiro maior que ou igual a 1.</xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> </xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>       Se for CanMergeBlocks * *falso**, memórias intermédias transmitido <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>tem</xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> de ser o mesmo comprimento memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>       Se for CanMergeBlocks * *verdadeiro**, memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>pode ter um comprimento diferente de memórias intermédias transmitido a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(todos os tamanhos de memória intermédia sempre ainda tem de ser um múltiplo de <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>bytes de comprimento).</xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> </xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>"
  syntax:
    content: public bool CanMergeBlocks { get; }
    return:
      type: System.Boolean
      description: '**Verdadeiro** se a memória intermédia transmitida para <> </> *> pode ter um comprimento diferente da memória intermédia transmitido para <> </> *>; caso contrário, **falso** se memórias intermédias transmitido a <> </> *> e <> </> *> tem de ser o mesmo comprimento exato.  Para [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)] a predefinição é **verdadeiro**.'
  overload: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  id: Decrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Decrypt(Byte[])
  nameWithType: CryptoProvider.Decrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Decrypt(Byte[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Desencripta cifras texto para limpar o texto."
  remarks: ''
  example:
  - "The following example shows how to use the Decrypt method to convert encrypted data to unencrypted data.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewDecrypt](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewdecrypt)]\n [!code-cs[RightsManagedContentViewer#RmContViewDecrypt](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewdecrypt)]"
  syntax:
    content: public byte[] Decrypt (byte[] cryptoText);
    parameters:
    - id: cryptoText
      type: System.Byte[]
      description: "O texto de cifra para desencriptar."
    return:
      type: System.Byte[]
      description: "O desencriptados limpar o texto de <code> cryptoText </code>."
  overload: System.Security.RightsManagement.CryptoProvider.Decrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>cipherText</code>é nulo."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "Desencriptação à direita não concedida."
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Dispose()
  nameWithType: CryptoProvider.Dispose()
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Versões de todos os recursos utilizados pelo <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;> </xref>."
  remarks: "Efetua Dispose <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(~ / add/includes/ajax-current-ext-md.md).</xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>       É possível chamar Dispose quando tiver terminado de utilizando <xref:System.Security.RightsManagement.CryptoProvider>.</xref:System.Security.RightsManagement.CryptoProvider> O método de Dispose deixa o <xref:System.Security.RightsManagement.CryptoProvider>num Estado não utilizável.</xref:System.Security.RightsManagement.CryptoProvider> Depois de chamar Dispose, tem de libertar todas as referências para o <xref:System.Security.RightsManagement.CryptoProvider>para que o recoletor de lixo pode reclame a memória que a <xref:System.Security.RightsManagement.CryptoProvider>foi occupying.</xref:System.Security.RightsManagement.CryptoProvider> </xref:System.Security.RightsManagement.CryptoProvider> Para obter mais informações, consulte [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md) e [implementar um método eliminar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada eliminar antes de libertar a última referência <xref:System.Security.RightsManagement.CryptoProvider>.</xref:System.Security.RightsManagement.CryptoProvider> Caso contrário, os recursos que está a utilizar não irão ser libertados até que as chamadas de recoletor de lixo a <xref:System.Security.RightsManagement.CryptoProvider>do objeto `Finalize` método.</xref:System.Security.RightsManagement.CryptoProvider>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.CryptoProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoProvider.Dispose(Boolean)
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público `Dispose()`método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca protegida `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro for true, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Security.RightsManagement.CryptoProvider>referências.</xref:System.Security.RightsManagement.CryptoProvider> Este método invoca o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Security.RightsManagement.CryptoProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  id: Encrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Encrypt(Byte[])
  nameWithType: CryptoProvider.Encrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Encrypt(Byte[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Encripta o texto não encriptado para texto de cifras."
  remarks: "O comprimento de byte do `clearText` memória intermédia deve ser um múltiplo da cifra <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>propriedade.</xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>       Utilizações de sistema de gestão de direitos a digital [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)] bloquear cifras.  Com [!INCLUDE[TLA2#tla_aes](~/add/includes/tla2sharptla-aes-md.md)], blocos são encriptados independentemente, de modo a que os dois blocos de texto não encriptado idêntico produzem resultados de texto de cifra idênticos.  Para minimizar a potenciais ameaças de desencriptação da encriptação de bloco independentes, as aplicações devem recorrer a métodos para modificar o conteúdo, tal como compressão, para evitar a encriptar os blocos de texto não encriptado idênticos."
  example:
  - "The following example shows how to use the Encrypt method to convert clear-text data to encrypted-text data.  \n  \n [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/visualbasic/rmcontentpublish/window1.xaml.vb#rmcontpubencrypt)]\n [!code-cs[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/csharp/RmContentPublish/Window1.xaml.cs#rmcontpubencrypt)]"
  syntax:
    content: public byte[] Encrypt (byte[] clearText);
    parameters:
    - id: clearText
      type: System.Byte[]
      description: "O conteúdo de texto não encriptado para encriptar."
    return:
      type: System.Byte[]
      description: "Encriptados texto de cifra da determinada <code> clearText </code>."
  overload: System.Security.RightsManagement.CryptoProvider.Encrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>clearText</code>é nulo."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "Não é permitida a encriptação."
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Finalize
  id: Finalize
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Finalize()
  nameWithType: CryptoProvider.Finalize()
  fullName: System.Security.RightsManagement.CryptoProvider.Finalize()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Liberta recursos e efetua a limpeza interna antes da instância está recuperada através da recolha de lixo."
  remarks: "Finalize efetua <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(~ / add/includes/ajax-current-ext-md.md).</xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>       Este método substitui <xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> Código da aplicação não deve chamar este método; um objeto `Finalize` método é invocado automaticamente durante a recolha de lixo, a menos que Finalização pelo garbage collector foi desativada por uma chamada para o <xref:System.GC.SuppressFinalize%2A>método.</xref:System.GC.SuppressFinalize%2A>       Para obter mais informações, consulte [finalizar métodos e os processos de destruição](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md), e [a substituir o método Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~CryptoProvider ();
    parameters: []
  overload: System.Security.RightsManagement.CryptoProvider.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
  fullName: System.Security.RightsManagement.CryptoProvider.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
  fullName: System.Security.RightsManagement.CryptoProvider.BoundGrants
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentGrant}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentGrant>
  nameWithType: ReadOnlyCollection<ContentGrant>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentGrant>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentGrant>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentGrant
    name: ContentGrant
    nameWithType: ContentGrant
    fullName: ContentGrant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanDecrypt
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanEncrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
  fullName: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Decrypt(Byte[])
  nameWithType: CryptoProvider.Decrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Decrypt(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.RightsManagement.CryptoProvider.Dispose
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose()
  nameWithType: CryptoProvider.Dispose()
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose()
- uid: System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoProvider.Dispose(Boolean)
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose(Boolean)
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Encrypt(Byte[])
  nameWithType: CryptoProvider.Encrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Encrypt(Byte[])
- uid: System.Security.RightsManagement.CryptoProvider.Finalize
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Finalize()
  nameWithType: CryptoProvider.Finalize()
  fullName: System.Security.RightsManagement.CryptoProvider.Finalize()
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Decrypt
  nameWithType: CryptoProvider.Decrypt
- uid: System.Security.RightsManagement.CryptoProvider.Dispose*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose
  nameWithType: CryptoProvider.Dispose
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Encrypt
  nameWithType: CryptoProvider.Encrypt
- uid: System.Security.RightsManagement.CryptoProvider.Finalize*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Finalize
  nameWithType: CryptoProvider.Finalize
