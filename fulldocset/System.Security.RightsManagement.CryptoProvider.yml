### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.CryptoProvider
  id: CryptoProvider
  children:
  - System.Security.RightsManagement.CryptoProvider.BlockSize
  - System.Security.RightsManagement.CryptoProvider.BoundGrants
  - System.Security.RightsManagement.CryptoProvider.CanDecrypt
  - System.Security.RightsManagement.CryptoProvider.CanEncrypt
  - System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  - System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  - System.Security.RightsManagement.CryptoProvider.Dispose
  - System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  - System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  - System.Security.RightsManagement.CryptoProvider.Finalize
  langs:
  - csharp
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
  type: Class
  summary: "Provides digital rights management services for encrypting and decrypting protected content."
  remarks: "CryptoProvider is created as a result of the <xref:System.Security.RightsManagement.UseLicense.Bind%2A> method when binding a rights managed <xref:System.Security.RightsManagement.UseLicense> to a <xref:System.Security.RightsManagement.SecureEnvironment>.       As with other <xref:System.Security.RightsManagement> types, CryptoProvider is only usable in full trust applications."
  example:
  - "The following example shows how to use the CryptoProvider class to create an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class CryptoProvider : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize
  id: BlockSize
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
  fullName: System.Security.RightsManagement.CryptoProvider.BlockSize
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets the cipher block size, in bytes."
  remarks: "The `clearText` and `cipherText` buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> and <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> must be n*BlockSize bytes in length, where &quot;n&quot; is an integer greater than or equal to 1.       If <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A> is `false`, buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> must be the same length as the buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.       If <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A> is `true`, buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> can be a different length from the buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> (all buffer sizes must still always be a multiple of BlockSize bytes in length).       A BlockSize of 1 indicates that the cipher is a stream cipher; a BlockSize of 2 or greater indicates a block cipher."
  example:
  - "The following example shows how to use the BlockSize property in converting clear-text data to encrypted-text data.  \n  \n [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/visualbasic/rmcontentpublish/window1.xaml.vb#rmcontpubencrypt)]\n [!code-cs[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/csharp/RmContentPublish/Window1.xaml.cs#rmcontpubencrypt)]"
  syntax:
    content: public int BlockSize { get; }
    return:
      type: System.Int32
      description: "The cipher block size, in bytes.  The default block size for [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)] is 8."
  overload: System.Security.RightsManagement.CryptoProvider.BlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants
  id: BoundGrants
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
  fullName: System.Security.RightsManagement.CryptoProvider.BoundGrants
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets a collection listing the rights that passed verification and that are granted to the user."
  remarks: ''
  example:
  - "The following example shows how to use the BoundGrants property to obtain a list rights granted through a <xref:System.Security.RightsManagement.UseLicense>.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewuselicense)]\n [!code-cs[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewuselicense)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentGrant> BoundGrants { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentGrant}
      description: "A collection enumerating the rights that passed verification and that are granted to the user."
  overload: System.Security.RightsManagement.CryptoProvider.BoundGrants*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  id: CanDecrypt
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets a value that indicates whether the user has rights to decrypt."
  remarks: "CanDecrypt returns **true** if the <xref:System.Security.RightsManagement.UseLicense> bound to this <xref:System.Security.RightsManagement.CryptoProvider> grants the user read access rights such as View, Edit, Print, or Owner."
  example:
  - "The following example shows how to use the CanDecrypt property to determine if decryption is allowed.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewuselicense)]\n [!code-cs[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewuselicense)]"
  syntax:
    content: public bool CanDecrypt { get; }
    return:
      type: System.Boolean
      description: '**true** if the <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref> grants the user rights to decrypt; otherwise, **false**.'
  overload: System.Security.RightsManagement.CryptoProvider.CanDecrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  id: CanEncrypt
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets a value that indicates whether the user has rights to encrypt."
  remarks: "<xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A> returns **true** if the <xref:System.Security.RightsManagement.UseLicense> bound to this <xref:System.Security.RightsManagement.CryptoProvider> grants the user write access rights such as Edit or Owner."
  syntax:
    content: public bool CanEncrypt { get; }
    return:
      type: System.Boolean
      description: '**true** if the <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref> grants the user rights to encrypt; otherwise, **false**.'
  overload: System.Security.RightsManagement.CryptoProvider.CanEncrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  id: CanMergeBlocks
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
  fullName: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Gets a value that indicates whether <xref:System.Security.RightsManagement.CryptoProvider.Encrypt*> and <xref:System.Security.RightsManagement.CryptoProvider.Decrypt*> can accept buffers that are different block sizes in length."
  remarks: "The `clearText` and `cipherText` buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> and <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> must be n*<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes in length, where &quot;n&quot; is an integer greater than or equal to 1.       If CanMergeBlocks is **false**, buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> must be the same length as the buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.       If CanMergeBlocks is **true**, buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> can be a different length from the buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> (all buffer sizes must still always be a multiple of <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes in length)."
  syntax:
    content: public bool CanMergeBlocks { get; }
    return:
      type: System.Boolean
      description: '**true** if the buffer passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt*> can be a different length from the buffer passed to <xref:System.Security.RightsManagement.CryptoProvider.Decrypt*>; otherwise, **false** if the buffers passed to <xref:System.Security.RightsManagement.CryptoProvider.Encrypt*> and <xref:System.Security.RightsManagement.CryptoProvider.Decrypt*> must be the exact same length.  For [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)] the default is **true**.'
  overload: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  id: Decrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Decrypt(Byte[])
  nameWithType: CryptoProvider.Decrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Decrypt(Byte[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Decrypts cipher text to clear text."
  remarks: ''
  example:
  - "The following example shows how to use the Decrypt method to convert encrypted data to unencrypted data.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewDecrypt](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewdecrypt)]\n [!code-cs[RightsManagedContentViewer#RmContViewDecrypt](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewdecrypt)]"
  syntax:
    content: public byte[] Decrypt (byte[] cryptoText);
    parameters:
    - id: cryptoText
      type: System.Byte[]
      description: "The cipher text to decrypt."
    return:
      type: System.Byte[]
      description: "The decrypted clear text of <code>cryptoText</code>."
  overload: System.Security.RightsManagement.CryptoProvider.Decrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>cipherText</code> is null."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "Decryption right not granted."
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Dispose()
  nameWithType: CryptoProvider.Dispose()
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Releases all resources used by the <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;></xref>."
  remarks: "Dispose performs <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(~/add/includes/ajax-current-ext-md.md).       Call Dispose when you are finished using the <xref:System.Security.RightsManagement.CryptoProvider>. The Dispose method leaves the <xref:System.Security.RightsManagement.CryptoProvider> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Security.RightsManagement.CryptoProvider> so the garbage collector can reclaim the memory that the <xref:System.Security.RightsManagement.CryptoProvider> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Security.RightsManagement.CryptoProvider>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.RightsManagement.CryptoProvider> object&quot;s `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.CryptoProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoProvider.Dispose(Boolean)
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Security.RightsManagement.CryptoProvider> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Security.RightsManagement.CryptoProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  id: Encrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Encrypt(Byte[])
  nameWithType: CryptoProvider.Encrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Encrypt(Byte[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Encrypts clear text to cipher text."
  remarks: "The byte length of the `clearText` buffer should be a multiple of the cipher <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> property.       The digital rights management system uses [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)] block cipher.  With [!INCLUDE[TLA2#tla_aes](~/add/includes/tla2sharptla-aes-md.md)], blocks are encrypted independently such that two blocks of identical clear text produce identical cipher text results.  To minimize potential decryption threats from independent block encryption, applications should employ methods to modify content, such as compression, to avoid encrypting identical clear text blocks."
  example:
  - "The following example shows how to use the Encrypt method to convert clear-text data to encrypted-text data.  \n  \n [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/visualbasic/rmcontentpublish/window1.xaml.vb#rmcontpubencrypt)]\n [!code-cs[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/csharp/RmContentPublish/Window1.xaml.cs#rmcontpubencrypt)]"
  syntax:
    content: public byte[] Encrypt (byte[] clearText);
    parameters:
    - id: clearText
      type: System.Byte[]
      description: "The clear text content to encrypt."
    return:
      type: System.Byte[]
      description: "Encrypted cipher text of the given <code>clearText</code>."
  overload: System.Security.RightsManagement.CryptoProvider.Encrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>clearText</code> is null."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "Encryption is not permitted."
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Finalize
  id: Finalize
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Finalize()
  nameWithType: CryptoProvider.Finalize()
  fullName: System.Security.RightsManagement.CryptoProvider.Finalize()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection."
  remarks: "Finalize performs <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(~/add/includes/ajax-current-ext-md.md).       This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object&quot;s `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.       For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~CryptoProvider ();
    parameters: []
  overload: System.Security.RightsManagement.CryptoProvider.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
  fullName: System.Security.RightsManagement.CryptoProvider.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
  fullName: System.Security.RightsManagement.CryptoProvider.BoundGrants
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentGrant}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentGrant>
  nameWithType: ReadOnlyCollection<ContentGrant>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentGrant>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentGrant>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentGrant
    name: ContentGrant
    nameWithType: ContentGrant
    fullName: ContentGrant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanDecrypt
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanEncrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
  fullName: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Decrypt(Byte[])
  nameWithType: CryptoProvider.Decrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Decrypt(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.RightsManagement.CryptoProvider.Dispose
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose()
  nameWithType: CryptoProvider.Dispose()
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose()
- uid: System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoProvider.Dispose(Boolean)
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose(Boolean)
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Encrypt(Byte[])
  nameWithType: CryptoProvider.Encrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Encrypt(Byte[])
- uid: System.Security.RightsManagement.CryptoProvider.Finalize
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Finalize()
  nameWithType: CryptoProvider.Finalize()
  fullName: System.Security.RightsManagement.CryptoProvider.Finalize()
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Decrypt
  nameWithType: CryptoProvider.Decrypt
- uid: System.Security.RightsManagement.CryptoProvider.Dispose*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose
  nameWithType: CryptoProvider.Dispose
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Encrypt
  nameWithType: CryptoProvider.Encrypt
- uid: System.Security.RightsManagement.CryptoProvider.Finalize*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Finalize
  nameWithType: CryptoProvider.Finalize
