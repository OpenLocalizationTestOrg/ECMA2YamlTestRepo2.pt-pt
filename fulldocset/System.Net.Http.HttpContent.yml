### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpContent
  id: HttpContent
  children:
  - System.Net.Http.HttpContent.#ctor
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.CreateContentReadStreamAsync
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Dispose(System.Boolean)
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
  type: Class
  summary: "Uma classe base que representa um corpo de entidade HTTP e os cabeçalhos do conteúdo."
  syntax:
    content: 'public abstract class HttpContent : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref> classe."
  syntax:
    content: protected HttpContent ();
    parameters: []
  overload: System.Net.Http.HttpContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para um fluxo de bytes e copia-o para o objeto de fluxo fornecido como o <code> stream </code> parâmetro."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após todo o conteúdo foi escrito para o objeto de sequência transmitido como o `stream` parâmetro.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O fluxo de destino."
    return:
      type: System.Threading.Tasks.Task
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para um fluxo de bytes e copia-o para o objeto de fluxo fornecido como o <code> stream </code> parâmetro."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após todo o conteúdo foi escrito para o objeto de sequência transmitido como o `stream` parâmetro.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O fluxo de destino."
    - id: context
      type: System.Net.TransportContext
      description: "Informações sobre o transporte (por exemplo o token de enlace de canal). Este parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para um fluxo de memória que uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após todo o conteúdo foi escrito para o fluxo de memória.</xref:System.Threading.Tasks.Task%601>       Uma vez concluída a operação, o <xref:System.Threading.Tasks.Task%601.Result%2A>propriedade do objeto de tarefa devolvida contém a sequência de memória que que representa o conteúdo HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A> O fluxo devolvido, em seguida, pode ser utilizado para ler o conteúdo utilizando o fluxo várias APIs.       O método CreateContentReadStreamAsync coloca o conteúdo para uma sequência de memória. Classes derivadas podem substituir este comportamento, se existir uma melhor forma de obter o conteúdo como fluxo. Por exemplo, uma matriz de bytes ou uma cadeia de utilizar uma forma mais eficiente do método como um só de leitura de moldagem <xref:System.IO.MemoryStream>à volta de bytes ou cadeia.)</xref:System.IO.MemoryStream>"
  syntax:
    content: protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose
  id: Dispose
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Versões de recursos não geridos e disposes dos recursos geridos utilizados pelo <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref> e opcionalmente disposes dos recursos geridos."
  remarks: "Este método é denominado pelo público `Dispose()` método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca protegida `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`. Quando o `disposing` parâmetro é `true`, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Net.Http.HttpContent>referências.</xref:System.Net.Http.HttpContent></xref:System.Object.Finalize%2A> Este método invoca o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> às versões apenas não gerido recursos."
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Headers
  id: Headers
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Obtém os cabeçalhos de conteúdo HTTP, tal como definido no RFC 2616."
  syntax:
    content: public System.Net.Http.Headers.HttpContentHeaders Headers { get; }
    return:
      type: System.Net.Http.Headers.HttpContentHeaders
      description: "Os cabeçalhos de conteúdo, como definido no RFC 2616."
  overload: System.Net.Http.HttpContent.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  id: LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para uma memória intermédia como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task>objeto será concluída após todo o conteúdo tenha sido serializado para a memória intermédia.</xref:System.Threading.Tasks.Task>       Depois do conteúdo está a ser serializado para uma memória intermédia, chama-se a uma do <xref:System.Net.Http.HttpContent.CopyToAsync%2A>métodos vai copiar o conteúdo de memória intermédia no fluxo de destino.</xref:System.Net.Http.HttpContent.CopyToAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  id: LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para uma memória intermédia como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task>objeto será concluída após todo o conteúdo tenha sido serializado para a memória intermédia.</xref:System.Threading.Tasks.Task>       Depois do conteúdo está a ser serializado para uma memória intermédia, chama-se a uma do <xref:System.Net.Http.HttpContent.CopyToAsync%2A>métodos vai copiar o conteúdo de memória intermédia no fluxo de destino.</xref:System.Net.Http.HttpContent.CopyToAsync%2A>       Se o conteúdo excede o valor transmitido a `maxBufferSize` parâmetro, é emitida uma exceção."
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);
    parameters:
    - id: maxBufferSize
      type: System.Int64
      description: "O tamanho máximo, em bytes, da memória intermédia a utilizar."
    return:
      type: System.Threading.Tasks.Task
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  id: ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para uma matriz de bytes que uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após todo o conteúdo foi escrito como uma matriz de bytes.</xref:System.Threading.Tasks.Task%601>       Uma vez concluída a operação, o <xref:System.Threading.Tasks.Task%601.Result%2A>propriedade do objeto de tarefa devolvida contém a matriz de bytes com o conteúdo HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  id: ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP e devolver um fluxo que representa o conteúdo, tal como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após todas da transmissão em fluxo que representa conteúdo lidas.</xref:System.Threading.Tasks.Task%601>       Uma vez concluída a operação, o <xref:System.Threading.Tasks.Task%601.Result%2A>propriedade do objeto de tarefa devolvida contém o fluxo que que representa o conteúdo HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A> O fluxo devolvido, em seguida, pode ser utilizado para ler o conteúdo utilizando o fluxo várias APIs."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.ReadAsStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  id: ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para uma cadeia como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto concluirá depois de todo o conteúdo foi escrito como uma cadeia.</xref:System.Threading.Tasks.Task%601>       Uma vez concluída a operação, o <xref:System.Threading.Tasks.Task%601.Result%2A>propriedade do objeto de tarefa devolvida contém a cadeia com o conteúdo HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<string> ReadAsStringAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.ReadAsStringAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializar o conteúdo HTTP para um fluxo como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após todo o conteúdo tenha sido serializado para o objeto de fluxo transmitido a `stream` parâmetro.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: protected abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O fluxo de destino."
    - id: context
      type: System.Net.TransportContext
      description: "Informações sobre o transporte (por exemplo o token de enlace de canal). Este parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Determina se o conteúdo HTTP tem um comprimento válido em bytes."
  remarks: "O método TryComputeLength proporciona a capacidade para calcular o comprimento do conteúdo de um conteúdo HTTP. Isto é útil para tipos de conteúdo que são possível calcular facilmente o comprimento do conteúdo. Se o comprimento do conteúdo não é possível ou dispendioso (precisaria a memória intermédia o conteúdo todo onde a serialização deverá ser caro ou exigir que o sistema para atribuir uma grande quantidade de memória do sistema) de informática, este método pode devolver `false`. Se este método devolve `false`, isto implica que partes de transferência seja necessária ou o conteúdo deve obter colocado na memória intermédia antes de a ser enviados para o servidor."
  syntax:
    content: protected abstract bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "Comprimento do conteúdo HTTP em bytes."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> length </code> é um comprimento válido; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.HttpContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Http.HttpContent.#ctor
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.Dispose
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpContent.Headers
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
- uid: System.Net.Http.Headers.HttpContentHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpContentHeaders
  nameWithType: HttpContentHeaders
  fullName: System.Net.Http.Headers.HttpContentHeaders
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
- uid: System.Net.Http.HttpContent.#ctor*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent.HttpContent
- uid: System.Net.Http.HttpContent.CopyToAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync
  nameWithType: HttpContent.CopyToAsync
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: HttpContent.CreateContentReadStreamAsync
- uid: System.Net.Http.HttpContent.Dispose*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose
  nameWithType: HttpContent.Dispose
- uid: System.Net.Http.HttpContent.Headers*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync
  nameWithType: HttpContent.LoadIntoBufferAsync
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync
  nameWithType: HttpContent.ReadAsByteArrayAsync
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync
  nameWithType: HttpContent.ReadAsStreamAsync
- uid: System.Net.Http.HttpContent.ReadAsStringAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync
  nameWithType: HttpContent.ReadAsStringAsync
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: HttpContent.SerializeToStreamAsync
- uid: System.Net.Http.HttpContent.TryComputeLength*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength
  nameWithType: HttpContent.TryComputeLength
