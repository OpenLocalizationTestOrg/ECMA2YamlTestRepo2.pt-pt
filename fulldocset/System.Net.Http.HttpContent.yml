### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpContent
  id: HttpContent
  children:
  - System.Net.Http.HttpContent.#ctor
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.CreateContentReadStreamAsync
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Dispose(System.Boolean)
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
  type: Class
  summary: "A base class representing an HTTP entity body and content headers."
  syntax:
    content: 'public abstract class HttpContent : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Http.HttpContent&quot;></xref> class."
  syntax:
    content: protected HttpContent ();
    parameters: []
  overload: System.Net.Http.HttpContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <code>stream</code> parameter."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter."
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The target stream."
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <code>stream</code> parameter."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the stream object passed as the `stream` parameter."
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The target stream."
    - id: context
      type: System.Net.TransportContext
      description: "Information about the transport (channel binding token, for example). This parameter may be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a memory stream as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the memory stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs.       The CreateContentReadStreamAsync method buffers the content to a memory stream. Derived classes can override this behavior if there is a better way to retrieve the content as stream. For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)"
  syntax:
    content: protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose
  id: Dispose
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Releases the unmanaged resources and disposes of the managed resources used by the <xref href=&quot;System.Net.Http.HttpContent&quot;></xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Net.Http.HttpContent&quot;></xref> and optionally disposes of the managed resources."
  remarks: "This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpContent> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to releases only unmanaged resources."
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Headers
  id: Headers
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Gets the HTTP content headers as defined in RFC 2616."
  syntax:
    content: public System.Net.Http.Headers.HttpContentHeaders Headers { get; }
    return:
      type: System.Net.Http.Headers.HttpContentHeaders
      description: "The content headers as defined in RFC 2616."
  overload: System.Net.Http.HttpContent.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  id: LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a memory buffer as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream."
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  id: LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a memory buffer as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.       After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.       If the content exceeds the value  passed in the `maxBufferSize` parameter , an exception is thrown."
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);
    parameters:
    - id: maxBufferSize
      type: System.Int64
      description: "The maximum size, in bytes, of the buffer to use."
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  id: ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a byte array as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a byte array.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the byte array with the HTTP content."
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  id: ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content and return a stream that represents the content as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the stream that represents content has been read.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the stream that that represents the HTTP content. The returned stream can then be used to read the content using various stream APIs."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.ReadAsStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  id: ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a string as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a string.       Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the string with the HTTP content."
  syntax:
    content: public System.Threading.Tasks.Task<string> ReadAsStringAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.ReadAsStringAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a stream as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been serialized to the stream object passed in the `stream` parameter."
  syntax:
    content: protected abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The target stream."
    - id: context
      type: System.Net.TransportContext
      description: "Information about the transport (channel binding token, for example). This parameter may be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.HttpContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Determines whether the HTTP content has a valid length in bytes."
  remarks: "The TryComputeLength method gives a HTTP content the ability to calculate the content length. This is useful for content types which are able to easily calculate the content length. If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`. If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server."
  syntax:
    content: protected abstract bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "The length in bytes of the HTTP content."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>length</code> is a valid length; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Http.HttpContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Http.HttpContent.#ctor
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.Dispose
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpContent.Headers
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
- uid: System.Net.Http.Headers.HttpContentHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpContentHeaders
  nameWithType: HttpContentHeaders
  fullName: System.Net.Http.Headers.HttpContentHeaders
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
- uid: System.Net.Http.HttpContent.#ctor*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent.HttpContent
- uid: System.Net.Http.HttpContent.CopyToAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync
  nameWithType: HttpContent.CopyToAsync
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: HttpContent.CreateContentReadStreamAsync
- uid: System.Net.Http.HttpContent.Dispose*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose
  nameWithType: HttpContent.Dispose
- uid: System.Net.Http.HttpContent.Headers*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync
  nameWithType: HttpContent.LoadIntoBufferAsync
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync
  nameWithType: HttpContent.ReadAsByteArrayAsync
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync
  nameWithType: HttpContent.ReadAsStreamAsync
- uid: System.Net.Http.HttpContent.ReadAsStringAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync
  nameWithType: HttpContent.ReadAsStringAsync
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: HttpContent.SerializeToStreamAsync
- uid: System.Net.Http.HttpContent.TryComputeLength*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength
  nameWithType: HttpContent.TryComputeLength
