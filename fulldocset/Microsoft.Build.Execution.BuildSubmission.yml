### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Execution.BuildSubmission
  id: BuildSubmission
  children:
  - Microsoft.Build.Execution.BuildSubmission.AsyncContext
  - Microsoft.Build.Execution.BuildSubmission.BuildManager
  - Microsoft.Build.Execution.BuildSubmission.BuildResult
  - Microsoft.Build.Execution.BuildSubmission.Execute
  - Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)
  - Microsoft.Build.Execution.BuildSubmission.IsCompleted
  - Microsoft.Build.Execution.BuildSubmission.SubmissionId
  - Microsoft.Build.Execution.BuildSubmission.WaitHandle
  langs:
  - csharp
  name: BuildSubmission
  nameWithType: BuildSubmission
  fullName: Microsoft.Build.Execution.BuildSubmission
  type: Class
  summary: "Represents a build request that has been submitted to the build manager for processing. The methods of this class may be used to execute synchronous or asynchronous build requests and to provide access to the results upon completion."
  remarks: "This class is thread-safe."
  syntax:
    content: public class BuildSubmission
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.AsyncContext
  id: AsyncContext
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: AsyncContext
  nameWithType: BuildSubmission.AsyncContext
  fullName: Microsoft.Build.Execution.BuildSubmission.AsyncContext
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets or sets the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>, if any."
  syntax:
    content: public object AsyncContext { get; }
    return:
      type: System.Object
      description: "Returns the asynchronous context provided to <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*>. Returns null if no context is provided."
  overload: Microsoft.Build.Execution.BuildSubmission.AsyncContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.BuildManager
  id: BuildManager
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: BuildManager
  nameWithType: BuildSubmission.BuildManager
  fullName: Microsoft.Build.Execution.BuildSubmission.BuildManager
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets or sets the build manager this build submission is associated with."
  syntax:
    content: public Microsoft.Build.Execution.BuildManager BuildManager { get; }
    return:
      type: Microsoft.Build.Execution.BuildManager
      description: "Returns the build manager this build submission is associated with."
  overload: Microsoft.Build.Execution.BuildSubmission.BuildManager*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.BuildResult
  id: BuildResult
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: BuildResult
  nameWithType: BuildSubmission.BuildResult
  fullName: Microsoft.Build.Execution.BuildSubmission.BuildResult
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets or sets the result of the build."
  remarks: "The result is not valid until <xref:Microsoft.Build.Execution.BuildSubmission.WaitHandle%2A> is signalled."
  syntax:
    content: public Microsoft.Build.Execution.BuildResult BuildResult { get; set; }
    return:
      type: Microsoft.Build.Execution.BuildResult
      description: "Returns the result of the build."
  overload: Microsoft.Build.Execution.BuildSubmission.BuildResult*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.Execute
  id: Execute
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: Execute()
  nameWithType: BuildSubmission.Execute()
  fullName: Microsoft.Build.Execution.BuildSubmission.Execute()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Starts a build request synchronously and waits until results are available."
  syntax:
    content: public Microsoft.Build.Execution.BuildResult Execute ();
    parameters: []
    return:
      type: Microsoft.Build.Execution.BuildResult
      description: "Returns the build request."
  overload: Microsoft.Build.Execution.BuildSubmission.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The request has already been started or is already complete."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)
  id: ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: ExecuteAsync(BuildSubmissionCompleteCallback,Object)
  nameWithType: BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)
  fullName: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Starts a build request asynchronously and within the given context. Immediately returns control to the caller."
  syntax:
    content: public void ExecuteAsync (Microsoft.Build.Execution.BuildSubmissionCompleteCallback callback, object context);
    parameters:
    - id: callback
      type: Microsoft.Build.Execution.BuildSubmissionCompleteCallback
      description: "The callback method to call when the build submission is complete."
    - id: context
      type: System.Object
      description: "The context in which the build submission occurs."
  overload: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The request has already been started or is already complete."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.IsCompleted
  id: IsCompleted
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: IsCompleted
  nameWithType: BuildSubmission.IsCompleted
  fullName: Microsoft.Build.Execution.BuildSubmission.IsCompleted
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Determines whether this build submission is complete."
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "Returns true if this build submission is complete; false otherwise."
  overload: Microsoft.Build.Execution.BuildSubmission.IsCompleted*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.SubmissionId
  id: SubmissionId
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: SubmissionId
  nameWithType: BuildSubmission.SubmissionId
  fullName: Microsoft.Build.Execution.BuildSubmission.SubmissionId
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets or sets an ID uniquely identifying this build submission."
  remarks: "This ID is used to distinguish this build submission from other build submissions within the same build."
  syntax:
    content: public int SubmissionId { get; }
    return:
      type: System.Int32
      description: "Returns an ID uniquely identifying this build submission."
  overload: Microsoft.Build.Execution.BuildSubmission.SubmissionId*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildSubmission.WaitHandle
  id: WaitHandle
  parent: Microsoft.Build.Execution.BuildSubmission
  langs:
  - csharp
  name: WaitHandle
  nameWithType: BuildSubmission.WaitHandle
  fullName: Microsoft.Build.Execution.BuildSubmission.WaitHandle
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets a <xref:System.Threading.WaitHandle> object that will be signalled when the build is complete."
  syntax:
    content: public System.Threading.WaitHandle WaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "Returns null until <xref:Microsoft.Build.Execution.BuildSubmission.Execute*> or <xref:Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*> returns, then returns the WaitHandle object."
  overload: Microsoft.Build.Execution.BuildSubmission.WaitHandle*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: Microsoft.Build.Execution.BuildSubmission.AsyncContext
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: AsyncContext
  nameWithType: BuildSubmission.AsyncContext
  fullName: Microsoft.Build.Execution.BuildSubmission.AsyncContext
- uid: Microsoft.Build.Execution.BuildSubmission.BuildManager
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: BuildManager
  nameWithType: BuildSubmission.BuildManager
  fullName: Microsoft.Build.Execution.BuildSubmission.BuildManager
- uid: Microsoft.Build.Execution.BuildManager
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildManager
  nameWithType: BuildManager
  fullName: Microsoft.Build.Execution.BuildManager
- uid: Microsoft.Build.Execution.BuildSubmission.BuildResult
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: BuildResult
  nameWithType: BuildSubmission.BuildResult
  fullName: Microsoft.Build.Execution.BuildSubmission.BuildResult
- uid: Microsoft.Build.Execution.BuildResult
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildResult
  nameWithType: BuildResult
  fullName: Microsoft.Build.Execution.BuildResult
- uid: Microsoft.Build.Execution.BuildSubmission.Execute
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: Execute()
  nameWithType: BuildSubmission.Execute()
  fullName: Microsoft.Build.Execution.BuildSubmission.Execute()
- uid: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(Microsoft.Build.Execution.BuildSubmissionCompleteCallback,System.Object)
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: ExecuteAsync(BuildSubmissionCompleteCallback,Object)
  nameWithType: BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)
  fullName: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback,Object)
- uid: Microsoft.Build.Execution.BuildSubmissionCompleteCallback
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildSubmissionCompleteCallback
  nameWithType: BuildSubmissionCompleteCallback
  fullName: Microsoft.Build.Execution.BuildSubmissionCompleteCallback
- uid: Microsoft.Build.Execution.BuildSubmission.IsCompleted
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: IsCompleted
  nameWithType: BuildSubmission.IsCompleted
  fullName: Microsoft.Build.Execution.BuildSubmission.IsCompleted
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.Execution.BuildSubmission.SubmissionId
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: SubmissionId
  nameWithType: BuildSubmission.SubmissionId
  fullName: Microsoft.Build.Execution.BuildSubmission.SubmissionId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Build.Execution.BuildSubmission.WaitHandle
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: WaitHandle
  nameWithType: BuildSubmission.WaitHandle
  fullName: Microsoft.Build.Execution.BuildSubmission.WaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: Microsoft.Build.Execution.BuildSubmission.AsyncContext*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: AsyncContext
  nameWithType: BuildSubmission.AsyncContext
- uid: Microsoft.Build.Execution.BuildSubmission.BuildManager*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: BuildManager
  nameWithType: BuildSubmission.BuildManager
- uid: Microsoft.Build.Execution.BuildSubmission.BuildResult*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: BuildResult
  nameWithType: BuildSubmission.BuildResult
- uid: Microsoft.Build.Execution.BuildSubmission.Execute*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: Execute
  nameWithType: BuildSubmission.Execute
- uid: Microsoft.Build.Execution.BuildSubmission.ExecuteAsync*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: ExecuteAsync
  nameWithType: BuildSubmission.ExecuteAsync
- uid: Microsoft.Build.Execution.BuildSubmission.IsCompleted*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: IsCompleted
  nameWithType: BuildSubmission.IsCompleted
- uid: Microsoft.Build.Execution.BuildSubmission.SubmissionId*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: SubmissionId
  nameWithType: BuildSubmission.SubmissionId
- uid: Microsoft.Build.Execution.BuildSubmission.WaitHandle*
  parent: Microsoft.Build.Execution.BuildSubmission
  isExternal: false
  name: WaitHandle
  nameWithType: BuildSubmission.WaitHandle
