### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventInstance
  id: EventInstance
  children:
  - System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  - System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventInstance.CategoryId
  - System.Diagnostics.EventInstance.EntryType
  - System.Diagnostics.EventInstance.InstanceId
  langs:
  - csharp
  name: EventInstance
  nameWithType: EventInstance
  fullName: System.Diagnostics.EventInstance
  type: Class
  summary: "Representa as informações de independente de idiomas de uma entrada de registo de eventos."
  remarks: "Utilize EventInstance para escrever uma entrada de registo de eventos com um identificador de recurso em vez de um valor de cadeia. Para escrever uma entrada de registo de eventos, inicializar o <xref:System.Diagnostics.EventInstance.InstanceId%2A>propriedade e passar a instância para o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance.InstanceId%2A> O Visualizador de eventos utiliza o identificador de instância para localizar e apresentar a cadeia correspondente a partir do ficheiro de recurso localizado com base nas definições de idioma atual. Tem de registar a origem do evento com o ficheiro de recurso correspondente antes de escrever eventos utilizando identificadores de recursos.       Quando escrever eventos, pode definir o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade para especificar o ícone que apresenta o Visualizador de eventos para a entrada.</xref:System.Diagnostics.EventInstance.EntryType%2A> Também pode especificar um <xref:System.Diagnostics.EventInstance.CategoryId%2A>propriedade para especificar a categoria que apresenta o Visualizador de eventos para a entrada.</xref:System.Diagnostics.EventInstance.CategoryId%2A>       O Visualizador de eventos utiliza a categoria para filtrar eventos escritos por uma origem de evento. O Visualizador de eventos pode apresentar a categoria como um valor numérico ou pode utilizar a categoria como um identificador de recurso para apresentar uma cadeia de categorias localizadas.       Para apresentar as cadeias de categorias localizadas no Visualizador de eventos, tem de utilizar uma origem de evento configurado com um ficheiro de recursos de categoria e defina o <xref:System.Diagnostics.EventInstance.CategoryId%2A>para um identificador de recurso no ficheiro de recursos de categoria.</xref:System.Diagnostics.EventInstance.CategoryId%2A> Se a origem do evento não tem um ficheiro de recursos de categoria configurado ou especificado <xref:System.Diagnostics.EventInstance.CategoryId%2A>índice uma cadeia no ficheiro de recursos de categoria e, em seguida, o Visualizador de eventos apresenta o valor numérico categoria para essa entrada.</xref:System.Diagnostics.EventInstance.CategoryId%2A> Configurar o ficheiro de recursos de categoria, juntamente com o número de cadeias da categoria no ficheiro de recursos, com o <xref:System.Diagnostics.EventLogInstaller>ou a <xref:System.Diagnostics.EventSourceCreationData>classe.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Tem de registar uma origem para um registo de eventos antes de utilizar EventInstance para escrever um evento com o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> A origem tem de ser configurada para escrever localizadas entradas no registo e a origem tem de definir, pelo menos, um ficheiro de recursos de mensagens.       Crie a nova origem de evento durante a instalação da aplicação. Isto permite que o tempo para o sistema operativo atualizar a lista de origens de eventos registados e as respetivas configurações. Se o sistema operativo não tem de atualizar a lista de origens de eventos e a tentativa de escrever um evento com a nova origem, que a operação de escrita irá falhar. Pode configurar uma nova origem utilizando um <xref:System.Diagnostics.EventLogInstaller>, ou utilizando o <xref:System.Diagnostics.EventLog.CreateEventSource%2A>método.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Tem de ter direitos administrativos no computador para criar uma nova origem de evento.       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de registo de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com)."
  example:
  - "The following code example writes an informational event entry, and then reuses the EventInstance to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/t-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/t-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public class EventInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  id: '#ctor(System.Int64,System.Int32)'
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EventInstance(Int64,Int32)
  nameWithType: EventInstance.EventInstance(Int64,Int32)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> utilizando os identificadores de recurso especificado para o texto da mensagem e categoria localizado da entrada de eventos de classe."
  remarks: "Para escrever uma entrada informativa um registo de eventos, inicializar um <xref:System.Diagnostics.EventInstance>e transmita-à <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> Definir o `instanceId` para o identificador de recurso da mensagem de evento no correspondente <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>propriedade para a origem.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> Definir o `categoryId` para um valor numérico categoria ou o identificador de recurso da categoria de evento no <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>propriedade para a origem de; defina a `categoryId` a zero para nenhuma categoria de evento.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> O <xref:System.Diagnostics.EventInstance.EntryType%2A>para a nova instância for definida como <xref:System.Diagnostics.EventLogEntryType>por predefinição.</xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.EventInstance.EntryType%2A>       O Visualizador de eventos utiliza os identificadores de recursos para apresentar as cadeias dos ficheiros de recursos localizados da origem correspondentes. Tem de registar a origem com os ficheiros de recurso correspondente antes de poder escrever eventos utilizando identificadores de recursos."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/m-system.diagnostics.eve_5_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_5_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/m-system.diagnostics.eve_5_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventInstance (long instanceId, int categoryId);
    parameters:
    - id: instanceId
      type: System.Int64
      description: "Um identificador de recurso que corresponde a uma cadeia definida no ficheiro de recursos de mensagens da origem de evento."
    - id: categoryId
      type: System.Int32
      description: "Um identificador de recurso que corresponde a uma cadeia definida no ficheiro de recursos de categoria da origem do evento, ou zero para não especificar nenhum categoria para o evento."
  overload: System.Diagnostics.EventInstance.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> instanceId </code> parâmetro é um valor negativo ou um valor maior do que &lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;.       - ou - <code> categoryId </code> parâmetro é um valor negativo ou um valor maior do que &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  id: '#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)'
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EventInstance(Int64,Int32,EventLogEntryType)
  nameWithType: EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> classe utilizando os identificadores de recurso especificado para o texto localizados de mensagem e categoria de entrada de evento e o tipo de entrada de registo de eventos especificado."
  remarks: "Para escrever uma entrada para um registo de eventos, inicializar um <xref:System.Diagnostics.EventInstance>e transmita-à <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> Definir o `instanceId` para o identificador de recurso da mensagem de evento no correspondente <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>propriedade para a origem.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> Definir o `categoryId` para um valor numérico categoria ou o identificador de recurso da categoria de evento no <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>propriedade para a origem de; defina a `categoryId` a zero para nenhuma categoria de evento.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       O Visualizador de eventos utiliza os identificadores de recursos para apresentar as cadeias dos ficheiros de recursos localizados da origem correspondentes. Tem de registar a origem com os ficheiros de recurso correspondente antes de poder escrever eventos utilizando identificadores de recursos.       Definir o `entryType` para um dos tipos de entrada predefinido. O Visualizador de eventos utiliza o tipo de evento para determinar o ícone para apresentar na vista de lista do registo de eventos."
  example:
  - "The following code example writes two audit event entries to the event log `myNewLog`. The code example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/fc333350-d8a8-40ee-b15e-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/fc333350-d8a8-40ee-b15e-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/fc333350-d8a8-40ee-b15e-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);
    parameters:
    - id: instanceId
      type: System.Int64
      description: "Um identificador de recurso que corresponde a uma cadeia definida no ficheiro de recursos de mensagens da origem de evento."
    - id: categoryId
      type: System.Int32
      description: "Um identificador de recurso que corresponde a uma cadeia definida no ficheiro de recursos de categoria da origem do evento, ou zero para não especificar nenhum categoria para o evento."
    - id: entryType
      type: System.Diagnostics.EventLogEntryType
      description: "Um <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valor que indica o tipo de evento."
  overload: System.Diagnostics.EventInstance.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>entryType</code>Não é um <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valor."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>instanceId</code>é maior do que um valor negativo ou um valor &lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;.       - ou - <code>categoryId</code> é maior do que um valor negativo ou um valor &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.CategoryId
  id: CategoryId
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: CategoryId
  nameWithType: EventInstance.CategoryId
  fullName: System.Diagnostics.EventInstance.CategoryId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o identificador de recurso que especifica a categoria definido pela aplicação de entrada de evento."
  remarks: "Categorias de registo de eventos são valores de definido pela aplicação de mensagens em fila que ajudam a filtrar eventos ou fornecem mais informações sobre o evento. Por exemplo, a aplicação pode definir categorias separadas para diferentes componentes ou operações diferentes.       Defina a propriedade CategoryId para especificar a categoria que apresenta o Visualizador de eventos para a entrada. O Visualizador de eventos pode apresentar a categoria como um valor numérico ou pode utilizar o CategoryId como um identificador de recurso para apresentar uma cadeia de categorias localizadas com base nas definições de idioma atual.       Para apresentar as cadeias de categorias localizadas nos eventos visualizador, tem de utilizar um evento de origem configurado com um ficheiro de recursos de categoria e defina o CategoryId para um identificador de recurso no ficheiro de recursos de categoria. Se a origem do evento não tem um ficheiro de recursos de categoria configurado ou a CategoryId especificado não indexar uma cadeia no ficheiro de recursos de categoria e, em seguida, o Visualizador de eventos apresenta o valor numérico categoria para essa entrada.       Tem de registar a origem com o ficheiro de recurso correspondente antes de escrever as categorias de eventos utilizando identificadores de recursos. Configurar o ficheiro de recursos de categoria, juntamente com o número de cadeias da categoria no ficheiro de recursos, com o <xref:System.Diagnostics.EventLogInstaller>ou a <xref:System.Diagnostics.EventSourceCreationData>classe.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller> Quando definir cadeias de categoria num ficheiro de recurso, os identificadores de recursos de categoria tem de ser numerados consecutivamente começando em 1, até configurada <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>valor da propriedade.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       Categorias de evento são opcionais. Se a sua aplicação utilizar categorias, não defina o CategoryId para a entrada de registo de eventos.       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/). Para obter mais informações sobre como definir categorias de eventos em ficheiros de recursos, consulte o tópico de &quot;Categorias de evento&quot; no SDK plataforma"
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_24_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_24_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_24_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryId { get; set; }
    return:
      type: System.Int32
      description: "Um identificador de recurso ou valor da categoria numérico que corresponde a uma cadeia definida no ficheiro de recursos de categoria da origem de evento. A predefinição é zero, o que significa que não existem categorias serão apresentadas para a entrada de evento."
  overload: System.Diagnostics.EventInstance.CategoryId*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A propriedade está definida para um valor negativo ou para um valor maior do que &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.EntryType
  id: EntryType
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EntryType
  nameWithType: EventInstance.EntryType
  fullName: System.Diagnostics.EventInstance.EntryType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o tipo de evento da entrada de registo de eventos."
  remarks: "Cada evento é de um único tipo, a aplicação indica quando esta comunica o evento. O Visualizador de eventos utiliza o tipo de evento para determinar o ícone para apresentar na vista de lista do registo de eventos."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_11_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_11_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_11_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public System.Diagnostics.EventLogEntryType EntryType { get; set; }
    return:
      type: System.Diagnostics.EventLogEntryType
      description: "Um <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valor que indica o tipo de entrada de evento. O valor predefinido é <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  overload: System.Diagnostics.EventInstance.EntryType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "A propriedade não está definida como um <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valor."
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.InstanceId
  id: InstanceId
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: EventInstance.InstanceId
  fullName: System.Diagnostics.EventInstance.InstanceId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o identificador de recurso que designa o texto da mensagem da entrada de evento."
  remarks: "A propriedade InstanceId identifica exclusivamente uma entrada de eventos para uma origem de evento configurado. Para eventos definidos nos ficheiros de recursos de mensagem, o InstanceId corresponde ao identificador de recurso compilado dos campos de definição de mensagem no ficheiro de texto de mensagem. A aplicação pode escrever entradas de registo de eventos localizados alterando o InstanceId para um identificador de recurso. O Visualizador de eventos utiliza o identificador de recurso InstanceId para localizar e apresentar a cadeia correspondente a partir do ficheiro de recurso localizado com base nas definições de idioma atual. Tem de registar a origem com o ficheiro de recurso correspondente antes de escrever eventos utilizando identificadores de recursos.       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de registo de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/). Para obter detalhes sobre os identificadores de registo de eventos, consulte o tópico de &quot;Identificadores de evento&quot; no SDK plataforma."
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_16_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_16_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_16_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public long InstanceId { get; set; }
    return:
      type: System.Int64
      description: "Um identificador de recurso que corresponde a uma cadeia definida no ficheiro de recursos de mensagens da origem de evento."
  overload: System.Diagnostics.EventInstance.InstanceId*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A propriedade está definida para um valor negativo ou para um valor maior do que &lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance(Int64,Int32)
  nameWithType: EventInstance.EventInstance(Int64,Int32)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance(Int64,Int32,EventLogEntryType)
  nameWithType: EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventInstance.CategoryId
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: CategoryId
  nameWithType: EventInstance.CategoryId
  fullName: System.Diagnostics.EventInstance.CategoryId
- uid: System.Diagnostics.EventInstance.EntryType
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EntryType
  nameWithType: EventInstance.EntryType
  fullName: System.Diagnostics.EventInstance.EntryType
- uid: System.Diagnostics.EventInstance.InstanceId
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: InstanceId
  nameWithType: EventInstance.InstanceId
  fullName: System.Diagnostics.EventInstance.InstanceId
- uid: System.Diagnostics.EventInstance.#ctor*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance
  nameWithType: EventInstance.EventInstance
- uid: System.Diagnostics.EventInstance.CategoryId*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: CategoryId
  nameWithType: EventInstance.CategoryId
- uid: System.Diagnostics.EventInstance.EntryType*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EntryType
  nameWithType: EventInstance.EntryType
- uid: System.Diagnostics.EventInstance.InstanceId*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: InstanceId
  nameWithType: EventInstance.InstanceId
