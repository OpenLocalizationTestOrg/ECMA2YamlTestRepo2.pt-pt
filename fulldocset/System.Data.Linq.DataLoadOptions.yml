### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataLoadOptions
  id: DataLoadOptions
  children:
  - System.Data.Linq.DataLoadOptions.#ctor
  - System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  langs:
  - csharp
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
  type: Class
  summary: "Provides for immediate loading and filtering of related data."
  remarks: "## General    When you query for an object, you actually retrieve only the object you requested. The *related* objects are not automatically fetched at the same time. (For more information, see [Querying Across Relationships](~/add/includes/ajax-current-ext-md.md).)       The DataLoadOptions class provides two methods to achieve immediate loading of specified related data. The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target. The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.      ## Rules    Note the following rules regarding DataLoadOptions usage:      -   Assigning a DataLoadOptions to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.      -   Modifying a DataLoadOptions after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception      ## Cycle Handling    <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles. The following represent examples of such graphs:      -   Example 1: Self recursive          -   `dlo.LoadWith<Employee>(e => e.Reports);`      -   Example 2: Back-pointers          -   `dlo.LoadWith <Customer>(c => C.Orders);`          -   `dlo.LoadWith <Order>(o => o.Customer);`      -   Example 3: Longer cycles           Although this should not occur in a well-normalized model, it is possible.          -   `dlo.LoadWith <A>(a => a.Bs);`          -   `dlo.LoadWith <B>(b => b.Cs);`          -   `dlo.LoadWith <C>(c => c.As);`      -   Example 4: Self recursive subQueries          -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`      -   Example 5: Longer recursive subqueries          -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`          -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`       The following are some general rules that help you understand what occurs in these scenarios.       **LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph. If there are, as in Examples 1, 2, and 3, an exception is thrown.       **AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.      -   In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)      -   In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`. The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`."
  example:
  - When you retrieve `Customers` from the Northwind sample database, you can use DataLoadOptions to specify that `Orders` is also to be retrieved. You can even specify which subset of `Orders` to retrieve.
  syntax:
    content: public sealed class DataLoadOptions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.#ctor
  id: '#ctor'
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;></xref> class."
  syntax:
    content: public DataLoadOptions ();
    parameters: []
  overload: System.Data.Linq.DataLoadOptions.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  id: AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Filters the objects retrieved for a particular relationship."
  remarks: "In the following example, the inner loop iterates only over those `Orders` that have not been shipped today."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/visualbasic/snip/module1.vb#1)]
     [!code-cs[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/csharp/testmakenew/program.cs#1)]
  syntax:
    content: public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "Identifies the query to be used on a particular one-to-many field or property. Note the following:       If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.       If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:       Where       OrderBy       ThenBy       OrderByDescending       ThenByDescending       Take"
  overload: System.Data.Linq.DataLoadOptions.AssociateWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void AssociateWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
  overload: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  id: LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Retrieves specified data related to the main target by using a lambda expression."
  remarks: "In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed. As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/visualbasic/snip/module1.vb#2)]
     [!code-cs[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/csharp/testmakenew/program.cs#2)]
  syntax:
    content: public void LoadWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "A lambda expression that identifies the related material."
  overload: System.Data.Linq.DataLoadOptions.LoadWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void LoadWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "To be added."
  overload: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataLoadOptions.#ctor
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<T,Object>>
  nameWithType: Expression<Func<T,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<T,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<T,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
- uid: System.Data.Linq.DataLoadOptions.#ctor*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions.DataLoadOptions
- uid: System.Data.Linq.DataLoadOptions.AssociateWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith
  nameWithType: DataLoadOptions.AssociateWith
- uid: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith<T>
  nameWithType: DataLoadOptions.AssociateWith<T>
- uid: System.Data.Linq.DataLoadOptions.LoadWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith
  nameWithType: DataLoadOptions.LoadWith
- uid: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith<T>
  nameWithType: DataLoadOptions.LoadWith<T>
