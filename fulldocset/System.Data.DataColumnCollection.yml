### YamlMime:ManagedReference
items:
- uid: System.Data.DataColumnCollection
  id: DataColumnCollection
  children:
  - System.Data.DataColumnCollection.Add
  - System.Data.DataColumnCollection.Add(System.Data.DataColumn)
  - System.Data.DataColumnCollection.Add(System.String)
  - System.Data.DataColumnCollection.Add(System.String,System.Type)
  - System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)
  - System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])
  - System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)
  - System.Data.DataColumnCollection.Clear
  - System.Data.DataColumnCollection.CollectionChanged
  - System.Data.DataColumnCollection.Contains(System.String)
  - System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)
  - System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)
  - System.Data.DataColumnCollection.IndexOf(System.String)
  - System.Data.DataColumnCollection.Item(System.Int32)
  - System.Data.DataColumnCollection.Item(System.String)
  - System.Data.DataColumnCollection.List
  - System.Data.DataColumnCollection.Remove(System.Data.DataColumn)
  - System.Data.DataColumnCollection.Remove(System.String)
  - System.Data.DataColumnCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  name: DataColumnCollection
  nameWithType: DataColumnCollection
  fullName: System.Data.DataColumnCollection
  type: Class
  summary: "Represents a collection of <xref href=&quot;System.Data.DataColumn&quot;></xref> objects for a <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "The DataColumnCollection defines the schema of a <xref:System.Data.DataTable>, and determines what kind of data each <xref:System.Data.DataColumn> can contain. You can access the DataColumnCollection through the <xref:System.Data.DataTable.Columns%2A> property of the <xref:System.Data.DataTable> object.       The DataColumnCollection uses the <xref:System.Data.DataColumnCollection.Add%2A> and <xref:System.Data.DataColumnCollection.Remove%2A> methods to insert and delete <xref:System.Data.DataColumn> objects. Use the <xref:System.Data.InternalDataCollectionBase.Count%2A> property to determine how many <xref:System.Data.DataColumn> objects are in the collection. Use the <xref:System.Data.DataColumnCollection.Contains%2A> method to verify whether a specified index or column name exists in the collection."
  example:
  - "The following example iterates through a collection of <xref:System.Data.DataColumn> objects and prints various properties of each column in the collection.  \n  \n [!code-cs[Classic WebData DataColumnCollection Example#1](~/add/codesnippet/csharp/t-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumnCollection Example#1](~/add/codesnippet/visualbasic/t-system.data.datacolumn_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("CollectionChanged")]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.ColumnsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class DataColumnCollection : System.Data.InternalDataCollectionBase
  inheritance:
  - System.Object
  - System.Data.InternalDataCollectionBase
  implements: []
  inheritedMembers:
  - System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)
  - System.Data.InternalDataCollectionBase.Count
  - System.Data.InternalDataCollectionBase.GetEnumerator
  - System.Data.InternalDataCollectionBase.IsReadOnly
  - System.Data.InternalDataCollectionBase.IsSynchronized
  - System.Data.InternalDataCollectionBase.SyncRoot
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Add
  id: Add
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Add()
  nameWithType: DataColumnCollection.Add()
  fullName: System.Data.DataColumnCollection.Add()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates and adds a <xref href=&quot;System.Data.DataColumn&quot;></xref> object to the <xref href=&quot;System.Data.DataColumnCollection&quot;></xref>."
  remarks: "A default name (&quot;Column1&quot;, &quot;Column2&quot;, and so on) is given to the column.       If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example creates and adds a new <xref:System.Data.DataColumn> to the <xref:System.Data.DataColumnCollection> of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataColumnCollection.Add5 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_9_1.vb)]"
  syntax:
    content: public System.Data.DataColumn Add ();
    parameters: []
    return:
      type: System.Data.DataColumn
      description: "The newly created <xref href=&quot;System.Data.DataColumn&quot;></xref>."
  overload: System.Data.DataColumnCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Add(System.Data.DataColumn)
  id: Add(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Add(DataColumn)
  nameWithType: DataColumnCollection.Add(DataColumn)
  fullName: System.Data.DataColumnCollection.Add(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates and adds the specified <xref href=&quot;System.Data.DataColumn&quot;></xref> object to the <xref href=&quot;System.Data.DataColumnCollection&quot;></xref>."
  remarks: "If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example adds a <xref:System.Data.DataColumn> to a <xref:System.Data.DataColumnCollection>.  \n  \n [!code-vb[Classic WebData DataColumnCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_2_1.vb)]"
  syntax:
    content: public void Add (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "The <xref href=&quot;System.Data.DataColumn&quot;></xref> to add."
  overload: System.Data.DataColumnCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>column</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The column already belongs to this collection, or to another collection."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "The collection already has a column with the specified name. (The comparison is not case-sensitive.)"
  - type: System.Data.InvalidExpressionException
    commentId: T:System.Data.InvalidExpressionException
    description: "The expression is invalid. See the <xref:System.Data.DataColumn.Expression*> property for more information about how to create expressions."
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: DataColumnCollection.Add(String)
  fullName: System.Data.DataColumnCollection.Add(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates and adds a <xref href=&quot;System.Data.DataColumn&quot;></xref> object that has the specified name to the <xref href=&quot;System.Data.DataColumnCollection&quot;></xref>."
  remarks: "By default, the <xref:System.Data.DataColumn.DataType%2A> for the new column is `string`.       If `null` or an empty string (&quot;&quot;) is passed in for the name, a default name (&quot;Column1&quot;, &quot;Column2&quot;, and so on) is given to the column.       Use the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a column with the proposed name already exists in the collection.       If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example creates and adds a new <xref:System.Data.DataColumn> to a <xref:System.Data.DataColumnCollection> of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataColumnCollection.Add4 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_11_1.vb)]"
  syntax:
    content: public System.Data.DataColumn Add (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "The name of the column."
    return:
      type: System.Data.DataColumn
      description: "The newly created <xref href=&quot;System.Data.DataColumn&quot;></xref>."
  overload: System.Data.DataColumnCollection.Add*
  exceptions:
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "The collection already has a column with the specified name. (The comparison is not case-sensitive.)"
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Add(System.String,System.Type)
  id: Add(System.String,System.Type)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Add(String,Type)
  nameWithType: DataColumnCollection.Add(String,Type)
  fullName: System.Data.DataColumnCollection.Add(String,Type)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates and adds a <xref href=&quot;System.Data.DataColumn&quot;></xref> object that has the specified name and type to the <xref href=&quot;System.Data.DataColumnCollection&quot;></xref>."
  remarks: "If `null` or an empty string (&quot;&quot;) is passed in for the name, a default name (&quot;Column1&quot;, &quot;Column2&quot;, and so on) is given to the column.       Use the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a column with the proposed name already exists in the collection.       If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example creates and adds a new <xref:System.Data.DataColumn> to a <xref:System.Data.DataColumnCollection> of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataColumnCollection.Add2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_7_1.vb)]"
  syntax:
    content: public System.Data.DataColumn Add (string columnName, Type type);
    parameters:
    - id: columnName
      type: System.String
      description: "The <xref:System.Data.DataColumn.ColumnName*> to use when you create the column."
    - id: type
      type: System.Type
      description: "The <xref:System.Data.DataColumn.DataType*> of the new column."
    return:
      type: System.Data.DataColumn
      description: "The newly created <xref href=&quot;System.Data.DataColumn&quot;></xref>."
  overload: System.Data.DataColumnCollection.Add*
  exceptions:
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "The collection already has a column with the specified name. (The comparison is not case-sensitive.)"
  - type: System.Data.InvalidExpressionException
    commentId: T:System.Data.InvalidExpressionException
    description: "The expression is invalid. See the <xref:System.Data.DataColumn.Expression*> property for more information about how to create expressions."
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)
  id: Add(System.String,System.Type,System.String)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Add(String,Type,String)
  nameWithType: DataColumnCollection.Add(String,Type,String)
  fullName: System.Data.DataColumnCollection.Add(String,Type,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates and adds a <xref href=&quot;System.Data.DataColumn&quot;></xref> object that has the specified name, type, and expression to the <xref href=&quot;System.Data.DataColumnCollection&quot;></xref>."
  remarks: "If `null` or an empty string (&quot;&quot;) is passed in for the name, a default name (&quot;Column1&quot;, &quot;Column2&quot;, and so on) is given to the column.       Use the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a column with the proposed name already exists in the collection.       If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example creates and adds a new <xref:System.Data.DataColumn> to a <xref:System.Data.DataColumnCollection> of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataColumnCollection.Add1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_5_1.vb)]"
  syntax:
    content: public System.Data.DataColumn Add (string columnName, Type type, string expression);
    parameters:
    - id: columnName
      type: System.String
      description: "The name to use when you create the column."
    - id: type
      type: System.Type
      description: "The <xref:System.Data.DataColumn.DataType*> of the new column."
    - id: expression
      type: System.String
      description: "The expression to assign to the <xref:System.Data.DataColumn.Expression*> property."
    return:
      type: System.Data.DataColumn
      description: "The newly created <xref href=&quot;System.Data.DataColumn&quot;></xref>."
  overload: System.Data.DataColumnCollection.Add*
  exceptions:
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "The collection already has a column with the specified name. (The comparison is not case-sensitive.)"
  - type: System.Data.InvalidExpressionException
    commentId: T:System.Data.InvalidExpressionException
    description: "The expression is invalid. See the <xref:System.Data.DataColumn.Expression*> property for more information about how to create expressions."
  platform:
  - net462
- uid: System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])
  id: AddRange(System.Data.DataColumn[])
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: AddRange(DataColumn[])
  nameWithType: DataColumnCollection.AddRange(DataColumn[])
  fullName: System.Data.DataColumnCollection.AddRange(DataColumn[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copies the elements of the specified <xref href=&quot;System.Data.DataColumn&quot;></xref> array to the end of the collection."
  syntax:
    content: public void AddRange (System.Data.DataColumn[] columns);
    parameters:
    - id: columns
      type: System.Data.DataColumn[]
      description: "The array of <xref href=&quot;System.Data.DataColumn&quot;></xref> objects to add to the collection."
  overload: System.Data.DataColumnCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)
  id: CanRemove(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: CanRemove(DataColumn)
  nameWithType: DataColumnCollection.CanRemove(DataColumn)
  fullName: System.Data.DataColumnCollection.CanRemove(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Checks whether a specific column can be removed from the collection."
  remarks: "The CanRemove method performs several checks before returning a `true` or `false` result. This includes the following: whether the column exists, belongs to the table, or is involved in a constraint or relation.       Use the CanRemove method before you try to remove any column from a collection. You can also use the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a particular column exists before you try to remove it."
  example:
  - "The following example first uses the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a particular column is found in the collection. If found, the CanRemove method tests whether the column can be removed. If so, the column is removed with the <xref:System.Data.DataColumnCollection.Remove%2A> method.  \n  \n [!code-vb[Classic WebData DataColumnCollection.CanRemove Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_16_1.vb)]\n [!code-cs[Classic WebData DataColumnCollection.CanRemove Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_16_1.cs)]"
  syntax:
    content: public bool CanRemove (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref> in the collection."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the column can be removed. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if,      -   The <code>column</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.      -   The column does not belong to this collection.      -   The column is part of a relationship.      -   Another column&quot;s expression depends on this column."
  overload: System.Data.DataColumnCollection.CanRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Clear
  id: Clear
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: DataColumnCollection.Clear()
  fullName: System.Data.DataColumnCollection.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Clears the collection of any columns."
  remarks: "If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example clears the columns collection.  \n  \n [!code-cs[Classic WebData DataColumnCollection.Clear Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_0_1.cs)]\n [!code-vb[Classic WebData DataColumnCollection.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_0_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataColumnCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.CollectionChanged
  id: CollectionChanged
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: CollectionChanged
  nameWithType: DataColumnCollection.CollectionChanged
  fullName: System.Data.DataColumnCollection.CollectionChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs when the columns collection changes, either by adding or removing a column."
  remarks: "Use the <xref:System.Data.DataColumnCollection.Contains%2A> and <xref:System.Data.DataColumnCollection.CanRemove%2A> methods to determine whether a column exists and can be removed."
  example:
  - "The following example adds an event handler for the CollectionChanged event.  \n  \n [!code-cs[Classic WebData DataColumnCollection.CollectionChanged Example#1](~/add/codesnippet/csharp/e-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumnCollection.CollectionChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datacolumn_1.vb)]"
  syntax:
    content: public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;
    return:
      type: System.ComponentModel.CollectionChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: DataColumnCollection.Contains(String)
  fullName: System.Data.DataColumnCollection.Contains(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Checks whether the collection contains a column with the specified name."
  remarks: "Use the Contains method to confirm the existence of a column before you perform additional operations on the column. The method returns `false` when two or more columns have the same name but different namespaces. The call does not succeed if there is any ambiguity when matching a column name to exactly one column."
  example:
  - "The following example uses the Contains method and the <xref:System.Data.DataColumnCollection.CanRemove%2A> method to determine whether the column can be removed. If so, the column is removed.  \n  \n [!code-vb[Classic WebData DataColumnCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_3_1.vb)]\n [!code-cs[Classic WebData DataColumnCollection.Contains Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_3_1.cs)]"
  syntax:
    content: public bool Contains (string name);
    parameters:
    - id: name
      type: System.String
      description: "The <xref:System.Data.DataColumn.ColumnName*> of the column to look for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a column exists with this name; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataColumnCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)
  id: CopyTo(System.Data.DataColumn[],System.Int32)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: CopyTo(DataColumn[],Int32)
  nameWithType: DataColumnCollection.CopyTo(DataColumn[],Int32)
  fullName: System.Data.DataColumnCollection.CopyTo(DataColumn[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copies the entire collection into an existing array, starting at a specified index within the array."
  syntax:
    content: public void CopyTo (System.Data.DataColumn[] array, int index);
    parameters:
    - id: array
      type: System.Data.DataColumn[]
      description: "An array of <xref href=&quot;System.Data.DataColumn&quot;></xref> objects to copy the collection into."
    - id: index
      type: System.Int32
      description: "The index to start from."
  overload: System.Data.DataColumnCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)
  id: IndexOf(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: IndexOf(DataColumn)
  nameWithType: DataColumnCollection.IndexOf(DataColumn)
  fullName: System.Data.DataColumnCollection.IndexOf(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the index of a column specified by name."
  remarks: "The IndexOf method is not case-sensitive."
  example:
  - "The following example uses the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a specified column exists in a <xref:System.Data.DataColumnCollection>. If so, the IndexOf method returns the index of the column.  \n  \n [!code-vb[Classic WebData DataColumnCollection.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_14_1.vb)]\n [!code-cs[Classic WebData DataColumnCollection.IndexOf Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_14_1.cs)]"
  syntax:
    content: public int IndexOf (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "The name of the column to return."
    return:
      type: System.Int32
      description: "The index of the column specified by <code>column</code> if it is found; otherwise, -1."
  overload: System.Data.DataColumnCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: DataColumnCollection.IndexOf(String)
  fullName: System.Data.DataColumnCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the index of the column with the specific name (the name is not case sensitive)."
  syntax:
    content: public int IndexOf (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "The name of the column to find."
    return:
      type: System.Int32
      description: "The zero-based index of the column with the specified name, or -1 if the column does not exist in the collection."
  overload: System.Data.DataColumnCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataColumnCollection.Item(Int32)
  fullName: System.Data.DataColumnCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref href=&quot;System.Data.DataColumn&quot;></xref> from the collection at the specified index."
  remarks: "The <xref:System.Data.DataColumnCollection.Contains%2A> method can be used to test for the existence of a column. This is useful before you try to use Item."
  example:
  - "The following example uses the Item property to print the <xref:System.Data.DataColumn.ColumnName%2A> value of a <xref:System.Data.DataColumn> object specified by index. The example uses the <xref:System.Data.DataTable> that is contained by a System.Windows.Forms.DataGrid control.  \n  \n [!code-cs[Classic WebData DataColumnCollection.this Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_11_1.cs)]\n [!code-vb[Classic WebData DataColumnCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_11_1.vb)]"
  syntax:
    content: public System.Data.DataColumn this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the column to return."
    return:
      type: System.Data.DataColumn
      description: "The <xref href=&quot;System.Data.DataColumn&quot;></xref> at the specified index."
  overload: System.Data.DataColumnCollection.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "The index value is greater than the number of items in the collection."
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: DataColumnCollection.Item(String)
  fullName: System.Data.DataColumnCollection.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref href=&quot;System.Data.DataColumn&quot;></xref> from the collection with the specified name."
  remarks: "<xref:System.Data.DataColumnCollection.Item%2A> is conditionally case-sensitive when it searches for column names. For example, if one <xref:System.Data.DataColumn> is named &quot;mydatacolumn&quot; and another is named &quot;Mydatacolumn&quot;, a string used to search for one of the columns is regarded as case-sensitive. However, if &quot;mydatacolumn&quot; exists and &quot;Mydatacolumn&quot; does not, the search string is regarded as case-insensitive."
  example:
  - "The following example uses the <xref:System.Data.DataColumnCollection.Item%2A> property to print the <xref:System.Data.DataColumn.DataType%2A> value of a <xref:System.Data.DataColumn> object specified by index.  \n  \n [!code-vb[Classic WebData DataColumnCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_14_1.vb)]\n [!code-cs[Classic WebData DataColumnCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_14_1.cs)]"
  syntax:
    content: public System.Data.DataColumn this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "The <xref:System.Data.DataColumn.ColumnName*> of the column to return."
    return:
      type: System.Data.DataColumn
      description: "The <xref href=&quot;System.Data.DataColumn&quot;></xref> in the collection with the specified <xref:System.Data.DataColumn.ColumnName*>; otherwise a null value if the <xref href=&quot;System.Data.DataColumn&quot;></xref> does not exist."
  overload: System.Data.DataColumnCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.List
  id: List
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: List
  nameWithType: DataColumnCollection.List
  fullName: System.Data.DataColumnCollection.List
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  syntax:
    content: protected override System.Collections.ArrayList List { get; }
    return:
      type: System.Collections.ArrayList
      description: "To be added."
  overload: System.Data.DataColumnCollection.List*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Remove(System.Data.DataColumn)
  id: Remove(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Remove(DataColumn)
  nameWithType: DataColumnCollection.Remove(DataColumn)
  fullName: System.Data.DataColumnCollection.Remove(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Removes the specified <xref href=&quot;System.Data.DataColumn&quot;></xref> object from the collection."
  remarks: "If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example uses the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a named column exists. If so, the <xref:System.Data.DataColumnCollection.Item%2A> property returns the column. The <xref:System.Data.DataColumnCollection.CanRemove%2A> method then checks whether the column can be removed; if so, the Remove method removes it.  \n  \n [!code-cs[Classic WebData DataColumnCollection.Remove Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_10_1.cs)]\n [!code-vb[Classic WebData DataColumnCollection.Remove Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_10_1.vb)]"
  syntax:
    content: public void Remove (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "The <xref href=&quot;System.Data.DataColumn&quot;></xref> to remove."
  overload: System.Data.DataColumnCollection.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>column</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The column does not belong to this collection.       -Or-       The column is part of a relationship.       -Or-       Another column&quot;s expression depends on this column."
  platform:
  - net462
- uid: System.Data.DataColumnCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: DataColumnCollection.Remove(String)
  fullName: System.Data.DataColumnCollection.Remove(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Removes the <xref href=&quot;System.Data.DataColumn&quot;></xref> object that has the specified name from the collection."
  remarks: "If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example first uses the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a particular column is found in the collection. If it is found, the <xref:System.Data.DataColumnCollection.CanRemove%2A> method tests whether the column can be removed. If so, the column is removed with the <xref:System.Data.DataColumnCollection.Remove%2A> method.  \n  \n [!code-cs[Classic WebData DataColumnCollection.Remove1 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_12_1.cs)]\n [!code-vb[Classic WebData DataColumnCollection.Remove1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_12_1.vb)]"
  syntax:
    content: public void Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the column to remove."
  overload: System.Data.DataColumnCollection.Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The collection does not have a column with the specified name."
  platform:
  - net462
- uid: System.Data.DataColumnCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.DataColumnCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: DataColumnCollection.RemoveAt(Int32)
  fullName: System.Data.DataColumnCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Removes the column at the specified index from the collection."
  remarks: "If the collection is successfully changed by adding or removing columns, the <xref:System.Data.DataColumnCollection.CollectionChanged> event occurs."
  example:
  - "The following example first uses the <xref:System.Data.DataColumnCollection.Contains%2A> method to determine whether a particular column is found in the collection. If it is found, the <xref:System.Data.DataColumnCollection.CanRemove%2A> method tests whether the column can be removed. If so, the column is removed with the RemoveAt method.  \n  \n [!code-vb[Classic WebData DataColumnCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_4_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index of the column to remove."
  overload: System.Data.DataColumnCollection.RemoveAt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The collection does not have a column at the specified index."
  platform:
  - net462
references:
- uid: System.Data.InternalDataCollectionBase
  isExternal: false
  name: System.Data.InternalDataCollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.InvalidExpressionException
  parent: System.Data
  isExternal: false
  name: InvalidExpressionException
  nameWithType: InvalidExpressionException
  fullName: System.Data.InvalidExpressionException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataColumnCollection.Add
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Add()
  nameWithType: DataColumnCollection.Add()
  fullName: System.Data.DataColumnCollection.Add()
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataColumnCollection.Add(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Add(DataColumn)
  nameWithType: DataColumnCollection.Add(DataColumn)
  fullName: System.Data.DataColumnCollection.Add(DataColumn)
- uid: System.Data.DataColumnCollection.Add(System.String)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Add(String)
  nameWithType: DataColumnCollection.Add(String)
  fullName: System.Data.DataColumnCollection.Add(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumnCollection.Add(System.String,System.Type)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Add(String,Type)
  nameWithType: DataColumnCollection.Add(String,Type)
  fullName: System.Data.DataColumnCollection.Add(String,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Add(String,Type,String)
  nameWithType: DataColumnCollection.Add(String,Type,String)
  fullName: System.Data.DataColumnCollection.Add(String,Type,String)
- uid: System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: AddRange(DataColumn[])
  nameWithType: DataColumnCollection.AddRange(DataColumn[])
  fullName: System.Data.DataColumnCollection.AddRange(DataColumn[])
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: CanRemove(DataColumn)
  nameWithType: DataColumnCollection.CanRemove(DataColumn)
  fullName: System.Data.DataColumnCollection.CanRemove(DataColumn)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataColumnCollection.Clear
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Clear()
  nameWithType: DataColumnCollection.Clear()
  fullName: System.Data.DataColumnCollection.Clear()
- uid: System.Data.DataColumnCollection.CollectionChanged
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: CollectionChanged
  nameWithType: DataColumnCollection.CollectionChanged
  fullName: System.Data.DataColumnCollection.CollectionChanged
- uid: System.ComponentModel.CollectionChangeEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CollectionChangeEventHandler
  nameWithType: CollectionChangeEventHandler
  fullName: System.ComponentModel.CollectionChangeEventHandler
- uid: System.Data.DataColumnCollection.Contains(System.String)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Contains(String)
  nameWithType: DataColumnCollection.Contains(String)
  fullName: System.Data.DataColumnCollection.Contains(String)
- uid: System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: CopyTo(DataColumn[],Int32)
  nameWithType: DataColumnCollection.CopyTo(DataColumn[],Int32)
  fullName: System.Data.DataColumnCollection.CopyTo(DataColumn[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: IndexOf(DataColumn)
  nameWithType: DataColumnCollection.IndexOf(DataColumn)
  fullName: System.Data.DataColumnCollection.IndexOf(DataColumn)
- uid: System.Data.DataColumnCollection.IndexOf(System.String)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: DataColumnCollection.IndexOf(String)
  fullName: System.Data.DataColumnCollection.IndexOf(String)
- uid: System.Data.DataColumnCollection.Item(System.Int32)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: DataColumnCollection.Item(Int32)
  fullName: System.Data.DataColumnCollection.Item(Int32)
- uid: System.Data.DataColumnCollection.Item(System.String)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Item(String)
  nameWithType: DataColumnCollection.Item(String)
  fullName: System.Data.DataColumnCollection.Item(String)
- uid: System.Data.DataColumnCollection.List
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: List
  nameWithType: DataColumnCollection.List
  fullName: System.Data.DataColumnCollection.List
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Data.DataColumnCollection.Remove(System.Data.DataColumn)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Remove(DataColumn)
  nameWithType: DataColumnCollection.Remove(DataColumn)
  fullName: System.Data.DataColumnCollection.Remove(DataColumn)
- uid: System.Data.DataColumnCollection.Remove(System.String)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Remove(String)
  nameWithType: DataColumnCollection.Remove(String)
  fullName: System.Data.DataColumnCollection.Remove(String)
- uid: System.Data.DataColumnCollection.RemoveAt(System.Int32)
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: DataColumnCollection.RemoveAt(Int32)
  fullName: System.Data.DataColumnCollection.RemoveAt(Int32)
- uid: System.Data.DataColumnCollection.Add*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Add
  nameWithType: DataColumnCollection.Add
- uid: System.Data.DataColumnCollection.AddRange*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: AddRange
  nameWithType: DataColumnCollection.AddRange
- uid: System.Data.DataColumnCollection.CanRemove*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: CanRemove
  nameWithType: DataColumnCollection.CanRemove
- uid: System.Data.DataColumnCollection.Clear*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Clear
  nameWithType: DataColumnCollection.Clear
- uid: System.Data.DataColumnCollection.Contains*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Contains
  nameWithType: DataColumnCollection.Contains
- uid: System.Data.DataColumnCollection.CopyTo*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: CopyTo
  nameWithType: DataColumnCollection.CopyTo
- uid: System.Data.DataColumnCollection.IndexOf*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: IndexOf
  nameWithType: DataColumnCollection.IndexOf
- uid: System.Data.DataColumnCollection.Item*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Item
  nameWithType: DataColumnCollection.Item
- uid: System.Data.DataColumnCollection.List*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: List
  nameWithType: DataColumnCollection.List
- uid: System.Data.DataColumnCollection.Remove*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: Remove
  nameWithType: DataColumnCollection.Remove
- uid: System.Data.DataColumnCollection.RemoveAt*
  parent: System.Data.DataColumnCollection
  isExternal: false
  name: RemoveAt
  nameWithType: DataColumnCollection.RemoveAt
