### YamlMime:ManagedReference
items:
- uid: System.Web.UI.Design.TypeSchema
  id: TypeSchema
  children:
  - System.Web.UI.Design.TypeSchema.#ctor(System.Type)
  - System.Web.UI.Design.TypeSchema.GetViews
  langs:
  - csharp
  name: TypeSchema
  nameWithType: TypeSchema
  fullName: System.Web.UI.Design.TypeSchema
  type: Class
  summary: "Represents the structure, or schema, of an object type."
  remarks: "The TypeSchema class provides information about a particular class, given an instance of that class. For example, given a <xref:System.Data.DataSet> object, a <xref:System.Web.UI.WebControls.GridView> object, or an instance of a custom class that you create, the methods and properties provide information about the class from which the object derives. It does not provide information about the specific instance, but about the class.       The TypeSchema class is used by custom control designers to assist in preparing sample data for previewing custom controls."
  syntax:
    content: 'public sealed class TypeSchema : System.Web.UI.Design.IDataSourceSchema'
  inheritance:
  - System.Object
  implements:
  - System.Web.UI.Design.IDataSourceSchema
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.Design.TypeSchema.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Web.UI.Design.TypeSchema
  langs:
  - csharp
  name: TypeSchema(Type)
  nameWithType: TypeSchema.TypeSchema(Type)
  fullName: System.Web.UI.Design.TypeSchema.TypeSchema(Type)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Creates a new instance of the <see cref=&quot;T:System.Web.UI.Design.TypeSchema&quot;></see> class using the provided &lt;xref:System.Type&gt; object."
  syntax:
    content: public TypeSchema (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type> that describes an object."
  overload: System.Web.UI.Design.TypeSchema.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    type is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.Design.TypeSchema.GetViews
  id: GetViews
  parent: System.Web.UI.Design.TypeSchema
  langs:
  - csharp
  name: GetViews()
  nameWithType: TypeSchema.GetViews()
  fullName: System.Web.UI.Design.TypeSchema.GetViews()
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Gets an array of schema descriptors for views into a data source."
  remarks: "Although the GetViews method always returns an array of <xref:System.Web.UI.Design.IDataSourceViewSchema> objects that implement the <xref:System.Web.UI.Design.IDataSourceViewSchema> interface, the exact return value is dependent on the object that is provided when creating the instance of the <xref:System.Web.UI.Design.TypeSchema> class.       The following table provides examples of return values.      |Underlying Type|Return Value|   |---------------------|------------------|   |A <xref:System.Data.DataSet>|An array of type <xref:System.Web.UI.Design.DataSetViewSchema>, one for each <xref:System.Data.DataTable>.|   |A <xref:System.Data.DataTable>|A one-item array containing a <xref:System.Web.UI.Design.DataSetViewSchema>.|   |An <xref:System.Collections.IEnumerable> type|A one-item array containing an <xref:System.Web.UI.Design.IDataSourceViewSchema>.|   |Any other type|A one-item array containing an <xref:System.Web.UI.Design.IDataSourceViewSchema>.|"
  syntax:
    content: public System.Web.UI.Design.IDataSourceViewSchema[] GetViews ();
    parameters: []
    return:
      type: System.Web.UI.Design.IDataSourceViewSchema[]
      description: "To be added."
  overload: System.Web.UI.Design.TypeSchema.GetViews*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.Design.TypeSchema.#ctor(System.Type)
  parent: System.Web.UI.Design.TypeSchema
  isExternal: false
  name: TypeSchema(Type)
  nameWithType: TypeSchema.TypeSchema(Type)
  fullName: System.Web.UI.Design.TypeSchema.TypeSchema(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.Design.TypeSchema.GetViews
  parent: System.Web.UI.Design.TypeSchema
  isExternal: false
  name: GetViews()
  nameWithType: TypeSchema.GetViews()
  fullName: System.Web.UI.Design.TypeSchema.GetViews()
- uid: System.Web.UI.Design.IDataSourceViewSchema[]
  parent: System.Web.UI.Design
  isExternal: false
  name: IDataSourceViewSchema
  nameWithType: IDataSourceViewSchema
  fullName: System.Web.UI.Design.IDataSourceViewSchema[]
  spec.csharp:
  - uid: System.Web.UI.Design.IDataSourceViewSchema
    name: IDataSourceViewSchema
    nameWithType: IDataSourceViewSchema
    fullName: IDataSourceViewSchema[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.Design.TypeSchema.#ctor*
  parent: System.Web.UI.Design.TypeSchema
  isExternal: false
  name: TypeSchema
  nameWithType: TypeSchema.TypeSchema
- uid: System.Web.UI.Design.TypeSchema.GetViews*
  parent: System.Web.UI.Design.TypeSchema
  isExternal: false
  name: GetViews
  nameWithType: TypeSchema.GetViews
