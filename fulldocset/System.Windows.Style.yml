### YamlMime:ManagedReference
items:
- uid: System.Windows.Style
  id: Style
  children:
  - System.Windows.Style.#ctor
  - System.Windows.Style.#ctor(System.Type)
  - System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  - System.Windows.Style.BasedOn
  - System.Windows.Style.GetHashCode
  - System.Windows.Style.IsSealed
  - System.Windows.Style.RegisterName(System.String,System.Object)
  - System.Windows.Style.Resources
  - System.Windows.Style.Seal
  - System.Windows.Style.Setters
  - System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  - System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.Style.TargetType
  - System.Windows.Style.Triggers
  - System.Windows.Style.UnregisterName(System.String)
  langs:
  - csharp
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
  type: Class
  summary: "Permite que a partilha de propriedades, recursos e processadores de eventos entre instâncias de um tipo."
  remarks: "Pode definir um estilo de qualquer elemento que deriva de um <xref:System.Windows.FrameworkElement>ou <xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> Um estilo normalmente está declarado como um recurso dentro de <xref:System.Windows.Application.Resources%2A>secção.</xref:System.Windows.Application.Resources%2A> Dado que os estilos de recursos, estes obedecer as mesmas regras de âmbito que se aplicam a todos os recursos, caso em que declare um estilo afeta onde podem ser aplicada. Se, por exemplo, de declarar o estilo do elemento de raiz da sua definição de aplicação [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] ficheiro, o estilo pode ser utilizado em qualquer lugar na sua aplicação. Se estiver a criar uma aplicação de navegação e declarar o estilo de uma das seguintes da aplicação [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] ficheiros, o estilo podem ser utilizados apenas em que [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] ficheiro. Para obter mais informações sobre o âmbito de regras de recursos, consulte [XAML recursos](~/add/includes/ajax-current-ext-md.md).       A declaração de estilo é composta por um objeto de estilo que contém uma coleção de uma ou mais <xref:System.Windows.Setter>objetos.</xref:System.Windows.Setter> Cada <xref:System.Windows.Setter>consiste num <xref:System.Windows.Setter.Property%2A>e <xref:System.Windows.Setter.Value%2A>.</xref:System.Windows.Setter.Value%2A> </xref:System.Windows.Setter.Property%2A> </xref:System.Windows.Setter> A propriedade é o nome da propriedade do elemento de estilo aplicar a. Depois do estilo está declarado como um recurso, em seguida, pode ser referenciada, tal como quaisquer outros recursos.      > [!NOTE] > Se houver mais do que um setter da coleção de setter com o mesmo <xref:System.Windows.Setter.Property%2A>valor da propriedade, o setter da que está declarado é utilizado pela última vez.</xref:System.Windows.Setter.Property%2A> Da mesma forma, se definir um valor para a mesma propriedade num style e num elemento diretamente, o valor definido no elemento diretamente prevalece.       O [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] estilos e templating modelo permite que a partilha de um aspeto, bem como a separação de apresentação e a lógica e manutenção. O modelo de estilo e templating inclui um conjunto de funcionalidades que permitem-lhe personalizar a sua [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. Este conjunto de funcionalidades inclui a classe de estilo, bem como o seguinte:- <xref:System.Windows.Trigger>- <xref:System.Windows.EventTrigger>e <xref:System.Windows.Media.Animation.Storyboard>- <xref:System.Windows.Controls.ControlTemplate>- <xref:System.Windows.DataTemplate>para obter mais informações, consulte [estilos e Templating](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.Media.Animation.Storyboard> </xref:System.Windows.EventTrigger> </xref:System.Windows.Trigger>"
  example:
  - "The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.  \n  \n [!code-xml[StyleOvw01#StyleSimple](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#stylesimple)]\n [!code-xml[StyleOvw01#StyleSimple](~/add/codesnippet/xaml/t-system.windows.style_1.xaml)]  \n  \n To apply the above style, do the following:  \n  \n [!code-xml[StyleOvw01#StyleSimpleApplied](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#stylesimpleapplied)]\n [!code-xml[StyleOvw01#StyleSimpleApplied](~/add/codesnippet/xaml/t-system.windows.style_2.xaml)]  \n  \n You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property. Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax. The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/photostore/window1.xaml#1)]\n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/t-system.windows.style_3.xaml)]  \n  \n> [!NOTE]\n>  Many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact. For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.  \n  \n For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page."
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      [System.Windows.Markup.ContentProperty("Setters")]

      [System.Windows.Markup.DictionaryKeyProperty("TargetType")]

      public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements:
  - System.Windows.Markup.IAddChild
  - System.Windows.Markup.INameScope
  - System.Windows.Markup.IQueryAmbient
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Style.#ctor
  id: '#ctor'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style()
  nameWithType: Style.Style()
  fullName: System.Windows.Style.Style()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Style&quot;> </xref> classe."
  remarks: "Esta chamada de construtor requerer validação atrasada de <xref:System.Windows.Style.TargetType%2A>e <xref:System.Windows.Style.BasedOn%2A>estilo de tipo.</xref:System.Windows.Style.BasedOn%2A> </xref:System.Windows.Style.TargetType%2A> Se este for utilizado fora do contexto do parser, comportamento não está definido."
  syntax:
    content: public Style ();
    parameters: []
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style(Type)
  nameWithType: Style.Style(Type)
  fullName: System.Windows.Style.Style(Type)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Style&quot;> </xref> classe para utilizar no <xref:System.Type>.</xref:System.Type> especificado"
  syntax:
    content: public Style (Type targetType);
    parameters:
    - id: targetType
      type: System.Type
      description: "O tipo aos quais será aplicada o estilo."
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  id: '#ctor(System.Type,System.Windows.Style)'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style(Type,Style)
  nameWithType: Style.Style(Type,Style)
  fullName: System.Windows.Style.Style(Type,Style)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Style&quot;> </xref> classe para utilizar no especificado <xref:System.Type>e com base nos especificado <xref href=&quot;System.Windows.Style&quot;> </xref>.</xref:System.Type>"
  syntax:
    content: public Style (Type targetType, System.Windows.Style basedOn);
    parameters:
    - id: targetType
      type: System.Type
      description: "O tipo aos quais será aplicada o estilo."
    - id: basedOn
      type: System.Windows.Style
      description: "O estilo de base este estilo no."
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.BasedOn
  id: BasedOn
  parent: System.Windows.Style
  langs:
  - csharp
  name: BasedOn
  nameWithType: Style.BasedOn
  fullName: System.Windows.Style.BasedOn
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um estilo definido, que é a base do estilo atual."
  remarks: "Cada estilo só suporta um valor de BasedOn.      <a name=&quot;xamlAttributeUsage_BasedOn&quot;></a># # Utilização do atributo de XAML ```   <object BasedOn=&quot;myStyle&quot; .../>   ``` <a name=&quot;xamlValues_BasedOn&quot;> </a> # # XAML valores *myStyle* um estilo de existente.       Normalmente, utiliza o [as extensões de Markup e o WPF XAML](~/add/includes/ajax-current-ext-md.md) para fazer referência a um estilo existente."
  example:
  - "There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] can be extended or inherited. Styles can be based on other styles through this property. When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style. In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName>value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=fullName>value of `Blue`.  \n  \n [!code-xml[StyleOvw01#ExtendingStyle](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#extendingstyle)]\n [!code-xml[StyleOvw01#ExtendingStyle](~/add/codesnippet/xaml/p-system.windows.style.b_1.xaml)]  \n  \n Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#2](~/add/codesnippet/xaml/photostore/window1.xaml#2)]\n [!code-xml[PhotoStoreDemoStyled#2](~/add/codesnippet/xaml/p-system.windows.style.b_2.xaml)]  \n  \n> [!NOTE]\n>  If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.  \n  \n Styles defined for specific types can also be based on other styles, as in the following example.  \n  \n [!code-xml[StyleOvw01#ExtendingStyleTargetType](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#extendingstyletargettype)]\n [!code-xml[StyleOvw01#ExtendingStyleTargetType](~/add/codesnippet/xaml/p-system.windows.style.b_3.xaml)]"
  syntax:
    content: public System.Windows.Style BasedOn { get; set; }
    return:
      type: System.Windows.Style
      description: "Um estilo definido, que é a base do estilo atual. O valor predefinido é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Style.BasedOn*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.GetHashCode
  id: GetHashCode
  parent: System.Windows.Style
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Style.GetHashCode()
  fullName: System.Windows.Style.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Devolve o código hash para este <xref href=&quot;System.Windows.Style&quot;> </xref>."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "O código hash <xref href=&quot;System.Windows.Style&quot;> </xref>."
  overload: System.Windows.Style.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.IsSealed
  id: IsSealed
  parent: System.Windows.Style
  langs:
  - csharp
  name: IsSealed
  nameWithType: Style.IsSealed
  fullName: System.Windows.Style.IsSealed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém um valor que indica se o estilo é só de leitura e não pode ser alterado."
  remarks: "Um estilo está selado quando outro estilo baseia-se no mesmo ou quando é aplicado pela primeira vez."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o estilo está selado; caso contrário <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Style.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.RegisterName(System.String,System.Object)
  id: RegisterName(System.String,System.Object)
  parent: System.Windows.Style
  langs:
  - csharp
  name: RegisterName(String,Object)
  nameWithType: Style.RegisterName(String,Object)
  fullName: System.Windows.Style.RegisterName(String,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Regista um novo par de objeto de nome no namescope atual."
  syntax:
    content: public void RegisterName (string name, object scopedElement);
    parameters:
    - id: name
      type: System.String
      description: "O nome a registar."
    - id: scopedElement
      type: System.Object
      description: "O objeto para mapear para especificado `name`."
  overload: System.Windows.Style.RegisterName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Resources
  id: Resources
  parent: System.Windows.Style
  langs:
  - csharp
  name: Resources
  nameWithType: Style.Resources
  fullName: System.Windows.Style.Resources
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define a coleção de recursos que podem ser utilizadas dentro do âmbito deste estilo."
  remarks: "<a name=\"xamlPropertyElementUsage_Resources\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.Resources>  \n    oneOrMoreResourceElements  \n  </object.Resources>  \n</object>  \n- or -   \n<object>  \n  <object.Resources>  \n    <ResourceDictionary Source=\"externalDictionarySource\"/>  \n  </object.Resources>  \n</object>  \n```  \n  \n<a name=\"xamlValues_Resources\"></a>   \n## XAML Values  \n *oneOrMoreResourceElements*  \n One or more resource elements. To be referenced later in either [StaticResource Markup Extension](~/add/includes/ajax-current-ext-md.md) or [DynamicResource Markup Extension](~/add/includes/ajax-current-ext-md.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.  \n  \n \\<ResourceDictionary Source=\" *externalDictionarySource*\"/>  \n An external dictionary source. For details, see [Merged Resource Dictionaries](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.ResourceDictionary Resources { get; set; }
    return:
      type: System.Windows.ResourceDictionary
      description: "Os recursos que podem ser utilizados dentro do âmbito deste estilo."
  overload: System.Windows.Style.Resources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Seal
  id: Seal
  parent: System.Windows.Style
  langs:
  - csharp
  name: Seal()
  nameWithType: Style.Seal()
  fullName: System.Windows.Style.Seal()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Bloqueia este estilo e todas as fábricas e é acionado, pelo que não podem ser alteradas."
  syntax:
    content: public void Seal ();
    parameters: []
  overload: System.Windows.Style.Seal*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Setters
  id: Setters
  parent: System.Windows.Style
  langs:
  - csharp
  name: Setters
  nameWithType: Style.Setters
  fullName: System.Windows.Style.Setters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém uma coleção de <xref href=&quot;System.Windows.Setter&quot;> </xref> e <xref href=&quot;System.Windows.EventSetter&quot;> </xref> objetos."
  remarks: "A propriedade Setters de um <xref:System.Windows.Style>objeto pode consistir apenas pode ser atribuídos ao <xref:System.Windows.SetterBase>.</xref:System.Windows.SetterBase> de objetos</xref:System.Windows.Style> Adicionar um <xref:System.Windows.SetterBase>subordinado para um <xref:System.Windows.Style>objeto implicitamente adiciona-o para o <xref:System.Windows.SetterBaseCollection>para o <xref:System.Windows.Style>objeto.</xref:System.Windows.Style> </xref:System.Windows.SetterBaseCollection> </xref:System.Windows.Style> </xref:System.Windows.SetterBase>       Uma utilização de elemento de propriedade explícita para Setters também é relativamente comum. Esta é uma decisão de estilo de markup que por vezes, pode ajudar a distinguir a Setters de <xref:System.Windows.Style.Resources%2A>e <xref:System.Windows.Style.Triggers%2A>itens num style complexo.</xref:System.Windows.Style.Triggers%2A> </xref:System.Windows.Style.Resources%2A> Por exemplo: ```   <Style>     <Style.Setters>       <!--one or more SetterBase derived object elements here-->     </Style.Setters>   </Style>   ``` <a name=&quot;xamlPropertyElementUsage_Setters&quot;> </a> # # utilização de elemento de propriedade XAML ```   <object>     oneOrMoreSetters   </object>   ``` <a name=&quot;xamlValues_Setters&quot;> </a> # # XAML valores *oneOrMoreSetters* um ou mais <xref:System.Windows.Setter>ou <xref:System.Windows.EventSetter>objetos.</xref:System.Windows.EventSetter> </xref:System.Windows.Setter>            "
  example:
  - "The following example shows how to use this property.  \n  \n [!code-vb[listboxitemstyle#1](~/add/codesnippet/visualbasic/ListBoxItemStyle/Pane1.xaml.vb#1)]\n [!code-cs[listboxitemstyle#1](~/add/codesnippet/csharp/ListBoxItemStyle/Pane1.xaml.cs#1)]  \n  \n Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object. The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:  \n  \n [!code-xml[eventovwsupport#XAML2](~/add/codesnippet/xaml/EventOvwSupport/page2.xaml#xaml2)]"
  syntax:
    content: public System.Windows.SetterBaseCollection Setters { get; }
    return:
      type: System.Windows.SetterBaseCollection
      description: "Uma coleção de <xref href=&quot;System.Windows.Setter&quot;> </xref> e <xref href=&quot;System.Windows.EventSetter&quot;> </xref> objetos. A predefinição é uma coleção vazia."
  overload: System.Windows.Style.Setters*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  id: System#Windows#Markup#IAddChild#AddChild(System.Object)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddChild(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Adiciona um objeto subordinado."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Windows.Style>instância é convertida para um <xref:System.Windows.Markup.IAddChild>interface.</xref:System.Windows.Markup.IAddChild> </xref:System.Windows.Style>"
  syntax:
    content: void IAddChild.AddChild (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O objeto subordinado para adicionar."
  overload: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  id: System#Windows#Markup#IAddChild#AddText(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddText(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Adiciona o conteúdo de texto de um nó para o objeto."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Windows.Style>instância é convertida para um <xref:System.Windows.Markup.IAddChild>interface.</xref:System.Windows.Markup.IAddChild> </xref:System.Windows.Style>"
  syntax:
    content: void IAddChild.AddText (string text);
    parameters:
    - id: text
      type: System.String
      description: "O texto a adicionar ao objeto."
  overload: System.Windows.Style.System#Windows#Markup#IAddChild#AddText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  id: System#Windows#Markup#INameScope#FindName(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.INameScope.FindName(String)
  nameWithType: Style.System.Windows.Markup.INameScope.FindName(String)
  fullName: System.Windows.Style.System.Windows.Markup.INameScope.FindName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Devolve um objeto com o nome de identificação fornecido."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Windows.Style>instância é convertida para um <xref:System.Windows.Markup.INameScope>interface.</xref:System.Windows.Markup.INameScope> </xref:System.Windows.Style>"
  syntax:
    content: object INameScope.FindName (string name);
    parameters:
    - id: name
      type: System.String
      description: "O identificador de nome para o objeto que está a ser solicitado."
    return:
      type: System.Object
      description: "O objeto, se encontrar. Devolve <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se foi encontrado nenhum objecto com esse nome."
  overload: System.Windows.Style.System#Windows#Markup#INameScope#FindName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  id: System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Consulta se está disponível uma propriedade de ambiente especificada no âmbito atual."
  syntax:
    content: bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "O nome da propriedade ambiente pedida."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a propriedade de ambiente pedida está disponível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.TargetType
  id: TargetType
  parent: System.Windows.Style
  langs:
  - csharp
  name: TargetType
  nameWithType: Style.TargetType
  fullName: System.Windows.Style.TargetType
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o tipo para o qual se destina este estilo."
  remarks: "Pode definir um estilo de qualquer elemento que deriva de um <xref:System.Windows.FrameworkElement>ou <xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> Por conseguinte, o tipo de destino pode ser qualquer um desses elementos. No entanto, se criar um estilo com uma propriedade de TargetType e baseá-lo em outro estilo que também define uma propriedade de TargetType, o tipo de destino do estilo derivado tem de ser igual ou derivar do tipo de destino do estilo de base.       Se não especificar um TargetType, em seguida, tem de especificar um `x:Key` para sua <xref:System.Windows.Style>e também qualificar as propriedades no seu estilo com um nome de classe.</xref:System.Windows.Style>      <a name=&quot;xamlAttributeUsage_TargetType&quot;></a># # Utilização do atributo de XAML ```   <object  TargetType=&quot;{x:Type typeName}&quot;/>   -or-   <object  TargetType=&quot;typeName&quot;/>   ``` <a name=&quot;xamlValues_TargetType&quot;> </a> # # XAML valores `{x:Type ...}` um [x: tipo de extensão de Markup](~/add/includes/ajax-current-ext-md.md) utilização da extensão de markup.             *typeName* o nome do tipo de classe."
  example:
  - "The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/photostore/window1.xaml#1)]\n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/p-system.windows.style.t_0_1.xaml)]  \n  \n Setting the TargetType property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`. This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically. Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.  \n  \n Many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact. For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>."
  syntax:
    content: public Type TargetType { get; set; }
    return:
      type: System.Type
      description: "O tipo de destino para este estilo."
  overload: System.Windows.Style.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Triggers
  id: Triggers
  parent: System.Windows.Style
  langs:
  - csharp
  name: Triggers
  nameWithType: Style.Triggers
  fullName: System.Windows.Style.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém uma coleção de <xref href=&quot;System.Windows.TriggerBase&quot;> </xref> objetos que se aplicam os valores de propriedade com base nas condições especificadas."
  remarks: "O [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] estilos e templating modelo permite-lhe especificar acionadores dentro do seu <xref:System.Windows.Style>.</xref:System.Windows.Style> Essencialmente, acionadores são objetos que lhe permite aplicar alterações ao certas condições (tal como quando um determinado valor da propriedade fica `true`, ou quando ocorre um evento) estiver satisfeito.      <a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a># # Utilização de elemento de propriedade de XAML ```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> # # XAML valores *oneOrMoreTriggers* Zero ou mais objetos elementos de classes derivadas de <xref:System.Windows.TriggerBase>.</xref:System.Windows.TriggerBase>      "
  example:
  - "The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls. The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.  \n  \n [!code-xml[BtnStyles#2](~/add/codesnippet/xaml/ButtonStyles2/app.xaml#2)]"
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "Uma coleção de <xref href=&quot;System.Windows.TriggerBase&quot;> </xref> objetos. A predefinição é uma coleção vazia."
  overload: System.Windows.Style.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.UnregisterName(System.String)
  id: UnregisterName(System.String)
  parent: System.Windows.Style
  langs:
  - csharp
  name: UnregisterName(String)
  nameWithType: Style.UnregisterName(String)
  fullName: System.Windows.Style.UnregisterName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Remove o namescope um mapeamento de objeto de nome."
  syntax:
    content: public void UnregisterName (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do mapeamento para remover."
  overload: System.Windows.Style.UnregisterName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.Style.#ctor
  parent: System.Windows.Style
  isExternal: false
  name: Style()
  nameWithType: Style.Style()
  fullName: System.Windows.Style.Style()
- uid: System.Windows.Style.#ctor(System.Type)
  parent: System.Windows.Style
  isExternal: false
  name: Style(Type)
  nameWithType: Style.Style(Type)
  fullName: System.Windows.Style.Style(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  parent: System.Windows.Style
  isExternal: false
  name: Style(Type,Style)
  nameWithType: Style.Style(Type,Style)
  fullName: System.Windows.Style.Style(Type,Style)
- uid: System.Windows.Style
  parent: System.Windows
  isExternal: false
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
- uid: System.Windows.Style.BasedOn
  parent: System.Windows.Style
  isExternal: false
  name: BasedOn
  nameWithType: Style.BasedOn
  fullName: System.Windows.Style.BasedOn
- uid: System.Windows.Style.GetHashCode
  parent: System.Windows.Style
  isExternal: false
  name: GetHashCode()
  nameWithType: Style.GetHashCode()
  fullName: System.Windows.Style.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Style.IsSealed
  parent: System.Windows.Style
  isExternal: false
  name: IsSealed
  nameWithType: Style.IsSealed
  fullName: System.Windows.Style.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Style.RegisterName(System.String,System.Object)
  parent: System.Windows.Style
  isExternal: false
  name: RegisterName(String,Object)
  nameWithType: Style.RegisterName(String,Object)
  fullName: System.Windows.Style.RegisterName(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Style.Resources
  parent: System.Windows.Style
  isExternal: false
  name: Resources
  nameWithType: Style.Resources
  fullName: System.Windows.Style.Resources
- uid: System.Windows.ResourceDictionary
  parent: System.Windows
  isExternal: false
  name: ResourceDictionary
  nameWithType: ResourceDictionary
  fullName: System.Windows.ResourceDictionary
- uid: System.Windows.Style.Seal
  parent: System.Windows.Style
  isExternal: false
  name: Seal()
  nameWithType: Style.Seal()
  fullName: System.Windows.Style.Seal()
- uid: System.Windows.Style.Setters
  parent: System.Windows.Style
  isExternal: false
  name: Setters
  nameWithType: Style.Setters
  fullName: System.Windows.Style.Setters
- uid: System.Windows.SetterBaseCollection
  parent: System.Windows
  isExternal: false
  name: SetterBaseCollection
  nameWithType: SetterBaseCollection
  fullName: System.Windows.SetterBaseCollection
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddChild(Object)
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddText(String)
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.INameScope.FindName(String)
  nameWithType: Style.System.Windows.Markup.INameScope.FindName(String)
  fullName: System.Windows.Style.System.Windows.Markup.INameScope.FindName(String)
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
- uid: System.Windows.Style.TargetType
  parent: System.Windows.Style
  isExternal: false
  name: TargetType
  nameWithType: Style.TargetType
  fullName: System.Windows.Style.TargetType
- uid: System.Windows.Style.Triggers
  parent: System.Windows.Style
  isExternal: false
  name: Triggers
  nameWithType: Style.Triggers
  fullName: System.Windows.Style.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.Style.UnregisterName(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: UnregisterName(String)
  nameWithType: Style.UnregisterName(String)
  fullName: System.Windows.Style.UnregisterName(String)
- uid: System.Windows.Style.#ctor*
  parent: System.Windows.Style
  isExternal: false
  name: Style
  nameWithType: Style.Style
- uid: System.Windows.Style.BasedOn*
  parent: System.Windows.Style
  isExternal: false
  name: BasedOn
  nameWithType: Style.BasedOn
- uid: System.Windows.Style.GetHashCode*
  parent: System.Windows.Style
  isExternal: false
  name: GetHashCode
  nameWithType: Style.GetHashCode
- uid: System.Windows.Style.IsSealed*
  parent: System.Windows.Style
  isExternal: false
  name: IsSealed
  nameWithType: Style.IsSealed
- uid: System.Windows.Style.RegisterName*
  parent: System.Windows.Style
  isExternal: false
  name: RegisterName
  nameWithType: Style.RegisterName
- uid: System.Windows.Style.Resources*
  parent: System.Windows.Style
  isExternal: false
  name: Resources
  nameWithType: Style.Resources
- uid: System.Windows.Style.Seal*
  parent: System.Windows.Style
  isExternal: false
  name: Seal
  nameWithType: Style.Seal
- uid: System.Windows.Style.Setters*
  parent: System.Windows.Style
  isExternal: false
  name: Setters
  nameWithType: Style.Setters
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.INameScope.FindName
  nameWithType: Style.System.Windows.Markup.INameScope.FindName
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
- uid: System.Windows.Style.TargetType*
  parent: System.Windows.Style
  isExternal: false
  name: TargetType
  nameWithType: Style.TargetType
- uid: System.Windows.Style.Triggers*
  parent: System.Windows.Style
  isExternal: false
  name: Triggers
  nameWithType: Style.Triggers
- uid: System.Windows.Style.UnregisterName*
  parent: System.Windows.Style
  isExternal: false
  name: UnregisterName
  nameWithType: Style.UnregisterName
