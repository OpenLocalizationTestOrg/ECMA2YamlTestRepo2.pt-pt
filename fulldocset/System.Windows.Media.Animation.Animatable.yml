### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.Animatable
  id: Animatable
  children:
  - System.Windows.Media.Animation.Animatable.#ctor
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.Clone
  - System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  langs:
  - csharp
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
  type: Class
  summary: "Abstract class that provides animation support."
  syntax:
    content: 'public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.CreateInstanceCore
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref> class."
  syntax:
    content: protected Animatable ();
    parameters: []
  overload: System.Windows.Media.Animation.Animatable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Applies an <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;></xref> to the specified <xref href=&quot;System.Windows.DependencyProperty&quot;></xref>. If the property is already animated, the <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> handoff behavior is used."
  remarks: "Note that using this method to removing clocks from a property does not stop those clocks."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "The clock with which to animate the specified property. If `clock` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, all animations will be removed from the specified property (but not stopped)."
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Applies an <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;></xref> to the specified <xref href=&quot;System.Windows.DependencyProperty&quot;></xref>. If the property is already animated, the specified <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> is used."
  remarks: "Note that using this method to remove clocks from a property does not stop those clocks.      ## Using the Compose HandoffBehavior    When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.       To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.      -   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This will remove all animation clocks from the property.      -   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.  In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.       This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks will also be disconnected and garbage collected.       For more information about clock objects, see the [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "The clock with which to animate the specified property. If `handoffBehavior` is <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> and `clock` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, all animations will be removed from the specified property (but not stopped). If `handoffBehavior` is <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> and clock is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, this method has no effect."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "A value that specifies how the new animation should interact with any current animations already affecting the property value."
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Applies an animation to the specified <xref href=&quot;System.Windows.DependencyProperty&quot;></xref>. The animation is started when the next frame is rendered. If the specified property is already animated, the <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> handoff behavior is used."
  remarks: "If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "The animation used to animate the specified property.       If the animation&quot;s <xref:System.Windows.Media.Animation.Timeline.BeginTime*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, any current animations will be removed and the current value of the property will be held.       If `animation` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, all animations will be removed from the property and the property value will revert back to its base value."
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Applies an animation to the specified <xref href=&quot;System.Windows.DependencyProperty&quot;></xref>. The animation is started when the next frame is rendered. If the specified property is already animated, the specified <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> is used."
  remarks: "If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.      ## Using the Compose HandoffBehavior    When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.       To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.      -   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This will remove all animation clocks from the property.      -   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.  In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.       This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks will also be disconnected and garbage collected.       For more information about clock objects, see the [Animation and Timing System Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.  \n  \n [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/cpp/animagionproperty_cpp/InteractiveExample.cpp#interactiveanimationexamplewholepage)]\n [!code-cs[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/csharp/animateproperty_csharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]\n [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/visualbasic/animateproperty_vb/InteractiveExample.vb#interactiveanimationexamplewholepage)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The property to animate."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "The animation used to animate the specified property.       If `handoffBehavior` is <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> and the animation&quot;s <xref:System.Windows.Media.Animation.Timeline.BeginTime*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, any current animations will be removed and the current value of the property will be held.       If `handoffBehavior` is <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref> and `animation` is a <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> reference, all animations will be removed from the property and the property value will revert back to its base value.       If `handoffBehavior` is <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>, this method will have no effect if the animation or its <xref:System.Windows.Media.Animation.Timeline.BeginTime*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "A value that specifies how the new animation should interact with any current animations already affecting the property value."
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.Clone
  id: Clone
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Creates a modifiable clone of this <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref>, making deep copies of this object&quot;s values. When copying this object&quot;s dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values."
  remarks: "The Clone method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects. For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation."
  syntax:
    content: public System.Windows.Media.Animation.Animatable Clone ();
    parameters: []
    return:
      type: System.Windows.Media.Animation.Animatable
      description: "A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone&quot;s <xref:System.Windows.Freezable.IsFrozen*> property is **false**."
  overload: System.Windows.Media.Animation.Animatable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  id: FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Makes this <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref> object unmodifiable or determines whether it can be made unmodifiable."
  remarks: "This method will return **false** when <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> is **true**.       Do not call this method directly (except when calling base in an implementation). This method is called internally by <xref:System.Windows.Freezable.CanFreeze%2A> (with `isChecking` equal to `true`) and  <xref:System.Windows.Freezable.Freeze%2A> (with `isChecking` equal to `false`)."
  syntax:
    content: protected override bool FreezeCore (bool isChecking);
    parameters:
    - id: isChecking
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this method should simply determine whether this instance can be frozen. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if this instance should actually freeze itself when this method is called."
    return:
      type: System.Boolean
      description: "If <code>isChecking</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, this method returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref> can be made unmodifiable, or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it cannot be made unmodifiable.       If <code>isChecking</code> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, this method returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the if this <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref> is now unmodifiable, or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object."
  overload: System.Windows.Media.Animation.Animatable.FreezeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Returns the non-animated value of the specified <xref href=&quot;System.Windows.DependencyProperty&quot;></xref>."
  remarks: "If the specified property is not animated, this method returns the same result as <xref:System.Windows.DependencyObject.GetValue%2A>."
  example:
  - "In the following example, the non-animated values of animated properties are retrieved and displayed.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identifies the property whose base (non-animated) value should be retrieved."
    return:
      type: System.Object
      description: "The value that would be returned if the specified property were not animated."
  overload: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Gets a value that indicates whether one or more <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;></xref> objects is associated with any of this object&quot;s dependency properties."
  remarks: "This property does not indicate whether this object contains animated sub-objects."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: '**true** if one or more <xref href="System.Windows.Media.Animation.AnimationClock"></xref> objects is associated with any of this object''s dependency properties; otherwise, **false**.'
  overload: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  id: ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Specifies whether a dependency object should be serialized."
  remarks: "The <xref:System.ComponentModel.TypeDescriptor> class uses the ShouldSerializeStoredWeakReference method to determine if a property should be serialized."
  syntax:
    content: public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "Represents an object that participates in the dependency property system."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to serialize <code>target</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.Windows.Media.Animation.Animatable.#ctor
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.Media.Animation.Animatable.Clone
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
- uid: System.Windows.Media.Animation.Animatable
  parent: System.Windows.Media.Animation
  isExternal: false
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Media.Animation.Animatable.#ctor*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable
  nameWithType: Animatable.Animatable
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: Animatable.ApplyAnimationClock
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation
  nameWithType: Animatable.BeginAnimation
- uid: System.Windows.Media.Animation.Animatable.Clone*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone
  nameWithType: Animatable.Clone
- uid: System.Windows.Media.Animation.Animatable.FreezeCore*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore
  nameWithType: Animatable.FreezeCore
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: Animatable.GetAnimationBaseValue
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference
  nameWithType: Animatable.ShouldSerializeStoredWeakReference
