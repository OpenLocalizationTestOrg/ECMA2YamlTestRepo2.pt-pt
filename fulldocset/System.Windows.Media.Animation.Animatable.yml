### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.Animatable
  id: Animatable
  children:
  - System.Windows.Media.Animation.Animatable.#ctor
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.Clone
  - System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  langs:
  - csharp
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
  type: Class
  summary: "Classe abstracta que fornece suporte de animação."
  syntax:
    content: 'public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.CreateInstanceCore
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> classe."
  syntax:
    content: protected Animatable ();
    parameters: []
  overload: System.Windows.Media.Animation.Animatable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Aplica-se um <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref> para especificado <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. Se a propriedade já está a ser animada, o <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> comportamento handoff é utilizado."
  remarks: "Tenha em atenção que utilizar este método para remover os relógios de uma propriedade não parar os relógios."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "O relógio com a qual animar a propriedade especificada. Se `clock` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, todas as animações serão removidas da propriedade especificada (mas não parar)."
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Aplica-se um <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref> para especificado <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. Se a propriedade já está a ser animada, especificado <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> é utilizado."
  remarks: "Tenha em atenção que ao utilizar este método para remover os relógios de uma propriedade não parar os relógios.      ## Utilizar a compor HandoffBehavior quando aplica um <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock>para uma propriedade utilizando o <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualquer <xref:System.Windows.Media.Animation.Clock>objetos anteriormente associados essa propriedade continuam a consumir recursos de sistema; o sistema de temporização não remove estas relógios automaticamente.</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       Para evitar problemas de desempenho quando aplica um grande número de relógios utilizando <xref:System.Windows.Media.Animation.HandoffBehavior>, deve remover os relógios composição da propriedade animada depois de estarem concluídas.</xref:System.Windows.Media.Animation.HandoffBehavior> Existem várias formas para remover um relógio.      -Para remover todos os relógios de uma propriedade, utilize o <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>método do objeto animado.</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> Especifique a propriedade que está a ser animada como o primeiro parâmetro e `null` como o segundo. Isto irá remover todos os relógios de animação da propriedade.      -Para remover um específico <xref:System.Windows.Media.Animation.AnimationClock>de uma lista de relógios, utilize a <xref:System.Windows.Media.Animation.Clock.Controller%2A>propriedade de <xref:System.Windows.Media.Animation.AnimationClock>obter um <xref:System.Windows.Media.Animation.ClockController>em seguida, chame o <xref:System.Windows.Media.Animation.ClockController.Remove%2A>método de <xref:System.Windows.Media.Animation.ClockController>.</xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.ClockController.Remove%2A> </xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.AnimationClock> Isto é geralmente feito o <xref:System.Windows.Media.Animation.Clock.Completed>processador de eventos para um clock.</xref:System.Windows.Media.Animation.Clock.Completed> Tenha em atenção que os relógios de raiz apenas podem ser controlados por um <xref:System.Windows.Media.Animation.ClockController>; o <xref:System.Windows.Media.Animation.Clock.Controller%2A>irá devolver a propriedade de um relógio subordinado `null`.</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> Tenha em atenção que o <xref:System.Windows.Media.Animation.Clock.Completed>evento não será chamado se a duração efetiva do relógio é indefinidamente.</xref:System.Windows.Media.Animation.Clock.Completed>  Nesse caso, o utilizador terá de determinar quando deve chamar <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A>       Isto é principalmente um problema para animações em objetos que têm uma duração de tempo.  Quando um objeto é memória libertada, os relógios também serão desligados e libertação da memória.       Para obter mais informações sobre os objetos de relógio, consulte o [animação e descrição geral do sistema de temporização](~/add/includes/ajax-current-ext-md.md)."
  example:
  - The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "O relógio com a qual animar a propriedade especificada. Se `handoffBehavior` é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> e `clock` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, todas as animações serão removidas da propriedade especificada (mas não parar). Se `handoffBehavior` é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> e o relógio está <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, este método não tem qualquer efeito."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Um valor que especifica como a nova animação deve interagir com quaisquer animações atuais já que afetam o valor da propriedade."
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Aplica-se um animação a especificado <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. A animação é iniciada quando o intervalo seguinte é composto. Se a propriedade especificada já está a ser animada, o <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> comportamento handoff é utilizado."
  remarks: "Se a animação tem um <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>que é maior que zero, a animação começa depois desse período de tempo decorrido desde a altura da moldura seguinte é composta.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "A animação utilizada para animar a propriedade especificada.       Se a animação <xref:System.Windows.Media.Animation.Timeline.BeginTime*>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, serão removidas qualquer animações atuais e o valor da propriedade atual será retido.</xref:System.Windows.Media.Animation.Timeline.BeginTime*>       Se `animation` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, todas as animações serão removidas da propriedade e o valor da propriedade irá reverter para o valor base."
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Aplica-se um animação a especificado <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. A animação é iniciada quando o intervalo seguinte é composto. Se a propriedade especificada já está a ser animada, especificado <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> é utilizado."
  remarks: "Se a animação tem um <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>que é maior que zero, a animação começa depois desse período de tempo decorrido desde a altura da moldura seguinte é composta.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>      ## Utilizar a compor HandoffBehavior quando aplica um <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, ou <xref:System.Windows.Media.Animation.AnimationClock>para uma propriedade utilizando o <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualquer <xref:System.Windows.Media.Animation.Clock>objetos anteriormente associados essa propriedade continuam a consumir recursos de sistema; o sistema de temporização não remove estas relógios automaticamente.</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       Para evitar problemas de desempenho quando aplica um grande número de relógios utilizando <xref:System.Windows.Media.Animation.HandoffBehavior>, deve remover os relógios composição da propriedade animada depois de estarem concluídas.</xref:System.Windows.Media.Animation.HandoffBehavior> Existem várias formas para remover um relógio.      -Para remover todos os relógios de uma propriedade, utilize o <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>ou <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>método do objeto animado.</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> Especifique a propriedade que está a ser animada como o primeiro parâmetro e `null` como o segundo. Isto irá remover todos os relógios de animação da propriedade.      -Para remover um específico <xref:System.Windows.Media.Animation.AnimationClock>de uma lista de relógios, utilize a <xref:System.Windows.Media.Animation.Clock.Controller%2A>propriedade de <xref:System.Windows.Media.Animation.AnimationClock>obter um <xref:System.Windows.Media.Animation.ClockController>em seguida, chame o <xref:System.Windows.Media.Animation.ClockController.Remove%2A>método de <xref:System.Windows.Media.Animation.ClockController>.</xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.ClockController.Remove%2A> </xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.AnimationClock> Isto é geralmente feito o <xref:System.Windows.Media.Animation.Clock.Completed>processador de eventos para um clock.</xref:System.Windows.Media.Animation.Clock.Completed> Tenha em atenção que os relógios de raiz apenas podem ser controlados por um <xref:System.Windows.Media.Animation.ClockController>; o <xref:System.Windows.Media.Animation.Clock.Controller%2A>irá devolver a propriedade de um relógio subordinado `null`.</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> Tenha em atenção que o <xref:System.Windows.Media.Animation.Clock.Completed>evento não será chamado se a duração efetiva do relógio é indefinidamente.</xref:System.Windows.Media.Animation.Clock.Completed>  Nesse caso, o utilizador terá de determinar quando deve chamar <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A>       Isto é principalmente um problema para animações em objetos que têm uma duração de tempo.  Quando um objeto é memória libertada, os relógios também serão desligados e libertação da memória.       Para obter mais informações sobre os objetos de relógio, consulte o [animação e descrição geral do sistema de temporização](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.  \n  \n [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/cpp/animagionproperty_cpp/InteractiveExample.cpp#interactiveanimationexamplewholepage)]\n [!code-cs[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/csharp/animateproperty_csharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]\n [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/visualbasic/animateproperty_vb/InteractiveExample.vb#interactiveanimationexamplewholepage)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "A animação utilizada para animar a propriedade especificada.       Se `handoffBehavior` é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> e a animação <> </> *> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, serão removidas qualquer animações atuais e o valor da propriedade atual será retido.       Se `handoffBehavior` é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> e `animation` é um <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> referência, todos os animações serão removidas da propriedade e o valor da propriedade irá reverter para o valor base.       Se `handoffBehavior` é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>, este método não tem qualquer efeito se a animação ou respetivas <> </> *> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Um valor que especifica como a nova animação deve interagir com quaisquer animações atuais já que afetam o valor da propriedade."
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.Clone
  id: Clone
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Cria um clone modificável deste <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref>, efetuar cópias profundas de valores deste objeto. Quando copiar propriedades de dependência deste objeto, este método copia enlaces de referências e os dados de recursos (mas já não poderão resolver), mas não animações ou os respetivos valores atuais."
  remarks: "O método de Clone pode ser utilizado para produzir modificável cópias congeladas <xref:System.Windows.Freezable>objetos.</xref:System.Windows.Freezable> Para sua comodidade, este método funciona como sombra o herdados <xref:System.Windows.Freezable.Clone%2A>método para fornecer uma implementação com tipo seguro.</xref:System.Windows.Freezable.Clone%2A>"
  syntax:
    content: public System.Windows.Media.Animation.Animatable Clone ();
    parameters: []
    return:
      type: System.Windows.Media.Animation.Animatable
      description: "Um clone modificável desta instância. O clone devolvido eficazmente é uma cópia profunda do objeto atual. O clone <> </> *> propriedade é * *falso**."
  overload: System.Windows.Media.Animation.Animatable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  id: FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Faz com que esta <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> objeto unmodifiable ou determina se que pode ser efetuado unmodifiable."
  remarks: "Este método irá devolver **falso** quando <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>é **verdadeiro**.</xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>       Não chame este método diretamente (exceto quando chamar base de uma implementação). Este método é denominado internamente pelo <xref:System.Windows.Freezable.CanFreeze%2A>(com `isChecking` igual a `true`) e <xref:System.Windows.Freezable.Freeze%2A>(com `isChecking` igual a `false`).</xref:System.Windows.Freezable.Freeze%2A> </xref:System.Windows.Freezable.CanFreeze%2A>"
  syntax:
    content: protected override bool FreezeCore (bool isChecking);
    parameters:
    - id: isChecking
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este método simplesmente deve determinar se esta instância pode ser congelada. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>Se esta instância, na verdade, deve parar próprio quando este método é chamado."
    return:
      type: System.Boolean
      description: "Se <code> isChecking </code> é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, este método devolve <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> podem ser efetuadas unmodifiable, ou <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não é possível efetuar unmodifiable.       Se <code> isChecking </code> é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, este método devolve <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se a caso isto <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> está agora unmodifiable, ou <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não é possível efetuar unmodifiable, com o efeito de ter iniciado alterar o estado deste objeto congelado."
  overload: System.Windows.Media.Animation.Animatable.FreezeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Devolve o valor não animada de especificado <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>."
  remarks: "Se a propriedade especificada não está a ser animada, este método devolve o mesmo resultado como <xref:System.Windows.DependencyObject.GetValue%2A>.</xref:System.Windows.DependencyObject.GetValue%2A>"
  example:
  - "In the following example, the non-animated values of animated properties are retrieved and displayed.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identifica a propriedade cujo valor base (não animada) deve ser obtido."
    return:
      type: System.Object
      description: "O valor que deverá ser devolvido se a propriedade especificada não foram animada."
  overload: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Obtém um valor que indica se um ou mais <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref> objetos está associado a qualquer uma das propriedades de dependência deste objeto."
  remarks: "Esta propriedade indica se este objeto contém os objetos secundárias animados."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: '**true** if one or more <xref href="System.Windows.Media.Animation.AnimationClock"></xref> objects is associated with any of this object''s dependency properties; otherwise, **false**.'
  overload: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  id: ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Especifica se deve ser serializado um objeto de dependência."
  remarks: "O <xref:System.ComponentModel.TypeDescriptor>classe utiliza o método ShouldSerializeStoredWeakReference para determinar se uma propriedade deverá ser serializada.</xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "Representa um objeto que participa no sistema de propriedade de dependência."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>to serialize <code>target</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.Windows.Media.Animation.Animatable.#ctor
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.Media.Animation.Animatable.Clone
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
- uid: System.Windows.Media.Animation.Animatable
  parent: System.Windows.Media.Animation
  isExternal: false
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Media.Animation.Animatable.#ctor*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable
  nameWithType: Animatable.Animatable
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: Animatable.ApplyAnimationClock
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation
  nameWithType: Animatable.BeginAnimation
- uid: System.Windows.Media.Animation.Animatable.Clone*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone
  nameWithType: Animatable.Clone
- uid: System.Windows.Media.Animation.Animatable.FreezeCore*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore
  nameWithType: Animatable.FreezeCore
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: Animatable.GetAnimationBaseValue
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference
  nameWithType: Animatable.ShouldSerializeStoredWeakReference
