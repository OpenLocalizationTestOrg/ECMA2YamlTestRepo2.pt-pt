### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.Extensions
  id: Extensions
  children:
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  langs:
  - csharp
  name: Extensions
  nameWithType: Extensions
  fullName: System.Xml.Schema.Extensions
  type: Class
  summary: "Esta classe contém o [!INCLUDE[sqltecxlinq](~/add/includes/sqltecxlinq-md.md)] métodos de extensão para a validação de XSD."
  remarks: "Esta classe também contém métodos para obter o conjunto de post schema validação informações (PSVI) de um nó XML validado.       Ao validar um <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, ou <xref:System.Xml.Linq.XAttribute>, também, opcionalmente, pode preencher a árvore XML com o conjunto de informações de validação do schema post.</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> Informações de PSVI são adicionadas como uma anotação do tipo <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.</xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>"
  example:
  - "The XSD in [Sample XSD File: Customers and Orders](~/add/includes/ajax-current-ext-md.md) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](~/add/includes/ajax-current-ext-md.md). The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.  \n  \n```c#  \n  \n                XmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", \"CustomersOrders.xsd\");  \n  \nXDocument custOrd = XDocument.Load(\"CustomersOrders.xml\");  \n  \nConsole.WriteLine(\"Validating custOrd\");  \nbool errors = false;  \ncustOrd.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrd {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// Modify the custOrd tree so that it is no longer valid.  \ncustOrd.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\";  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating custOrd\");  \nerrors = false;  \ncustOrd.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrd {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", \"CustomersOrders.xsd\")  \n  \n    Console.WriteLine(\"Validating custOrd\")  \n    Dim custOrd As XDocument = XDocument.Load(\"CustomersOrders.xml\")  \n    errors = False  \n    custOrd.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrd {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating custOrd\")  \n    ' Modify the source document so that it will not validate.  \n    custOrd.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\"  \n    errors = False  \n    custOrd.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrd {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating custOrd  \ncustOrd validated  \n  \nValidating custOrd  \nThe key sequence 'AAAAA' in Keyref fails to refer to some key.  \ncustOrd did not validate  \n```"
  syntax:
    content: public static class Extensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  id: GetSchemaInfo(System.Xml.Linq.XAttribute@)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: GetSchemaInfo(XAttribute)
  nameWithType: Extensions.GetSchemaInfo(XAttribute)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XAttribute)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Obtém o conjunto de post schema validação informações (PSVI) de um atributo validado."
  remarks: "Pode utilizar o <xref:System.Xml.Schema.IXmlSchemaInfo>devolvido por este método para determinar certas características de um atributo validado.</xref:System.Xml.Schema.IXmlSchemaInfo> Por exemplo, pode determinar se o atributo provém de um valor de atributo predefinido num XSD.       Utilizar o <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A>propriedade para obter um tipo de validação parcial (<xref:System.Xml.Schema.XmlSchemaAttribute>).</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> Pode utilizá-lo para revalidate um atributo sem validar um documento de todo.       Para obter um exemplo desta propriedade, consulte <xref:System.Xml.Schema.Extensions.Validate%2A>.</xref:System.Xml.Schema.Extensions.Validate%2A>"
  syntax:
    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "Um <xref:System.Xml.Linq.XAttribute>que foi anteriormente validada.</xref:System.Xml.Linq.XAttribute>"
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "A <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> que contém o conjunto de informações de validação do schema post para um <xref:System.Xml.Linq.XAttribute>.</xref:System.Xml.Linq.XAttribute>"
  overload: System.Xml.Schema.Extensions.GetSchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  id: GetSchemaInfo(System.Xml.Linq.XElement@)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XElement)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Obtém o conjunto de post schema validação informações (PSVI) de um elemento validado."
  remarks: "Pode utilizar o <xref:System.Xml.Schema.IXmlSchemaInfo>devolvido por este método para determinar certas características de um elemento validado.</xref:System.Xml.Schema.IXmlSchemaInfo> Por exemplo, pode determinar o tipo de esquema dinâmico do elemento.       Utilizar o <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A>propriedade para obter um tipo de validação parcial (<xref:System.Xml.Schema.XmlSchemaElement>).</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> Pode utilizá-lo para revalidate uma árvore secundárias com um elemento na raiz sem validar um documento de todo.       Para obter um exemplo desta propriedade, consulte <xref:System.Xml.Schema.Extensions.Validate%2A>.</xref:System.Xml.Schema.Extensions.Validate%2A>"
  example:
  - "The following example populates the tree with a PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \n  \n```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n         @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n   <xsd:simpleType name='GCType'>  \n    <xsd:restriction base='xsd:token'>  \n     <xsd:enumeration value='AAA'/>  \n     <xsd:enumeration value='BBB'/>  \n    </xsd:restriction>  \n   </xsd:simpleType>  \n   <xsd:element name='Root'>  \n    <xsd:complexType>  \n     <xsd:sequence>  \n      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n       <xsd:complexType>  \n        <xsd:sequence>  \n         <xsd:element name='GrandChild1' type='GCType'/>  \n         <xsd:element name='GrandChild2' type='GCType'/>  \n         <xsd:element name='GrandChild3' type='GCType'/>  \n        </xsd:sequence>  \n       </xsd:complexType>  \n      </xsd:element>  \n     </xsd:sequence>  \n    </xsd:complexType>  \n   </xsd:element>  \n  </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XElement(\"Child1\",  \n                new XElement(\"GrandChild1\", \"AAA\"),  \n                new XElement(\"GrandChild2\", \"ZZZ\"),  \n                new XElement(\"GrandChild3\", \"ZZZ\")  \n            )  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:simpleType name='GCType'>  \n            <xsd:restriction base='xsd:token'>  \n                <xsd:enumeration value='AAA'/>  \n                <xsd:enumeration value='BBB'/>  \n            </xsd:restriction>  \n        </xsd:simpleType>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                        <xsd:complexType>  \n                            <xsd:sequence>  \n                                <xsd:element name='GrandChild1' type='GCType'/>  \n                                <xsd:element name='GrandChild2' type='GCType'/>  \n                                <xsd:element name='GrandChild3' type='GCType'/>  \n                            </xsd:sequence>  \n                        </xsd:complexType>  \n                    </xsd:element>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>  \n            <GrandChild1>AAA</GrandChild1>  \n            <GrandChild2>ZZZ</GrandChild2>  \n            <GrandChild3>ZZZ</GrandChild3>  \n        </Child1>  \n    </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3  \n```"
  syntax:
    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "Um <xref:System.Xml.Linq.XElement>que foi anteriormente validada.</xref:System.Xml.Linq.XElement>"
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "A <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> que contém o conjunto de post schema validação informações (PSVI) para um <xref:System.Xml.Linq.XElement>.</xref:System.Xml.Linq.XElement>"
  overload: System.Xml.Schema.Extensions.GetSchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Este método valida que um <xref:System.Xml.Linq.XDocument>está em conformidade com um XSD num <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>.</xref:System.Xml.Linq.XDocument>"
  remarks: "Este método de extensão valida que <xref:System.Xml.Linq.XDocument>está em conformidade com o modelo de conteúdo de esquema <xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Linq.XDocument>"
  example:
  - "The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set. One of the documents is valid, the other is not.  \n  \n```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child2\", \"content1\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>content1</Child1>  \n        <Child2>content2</Child2>  \n    </Root>  \n  \n    Dim doc2 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>content1</Child1>  \n        <Child3>content1</Child3>  \n    </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XDocument
      description: "O <xref:System.Xml.Linq.XDocument>para validar.</xref:System.Xml.Linq.XDocument>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> a validar contra."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> um evento que ocorre quando o leitor encontra erros de validação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, emite uma exceção após erros de validação."
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Emitida para erros de validação de linguagem de definição de esquema de XML (XSD)."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Este método valida que um <xref:System.Xml.Linq.XAttribute>está em conformidade com uma determinada <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> e um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>.</xref:System.Xml.Linq.XAttribute>"
  remarks: "Pode utilizar este método para validar uma <xref:System.Xml.Linq.XAttribute>está em conformidade com um esquema.</xref:System.Xml.Linq.XAttribute> Normalmente, utiliza este método quando modificar um atributo e pretender certificar-se de que este ainda está em conformidade com a esquema. Foi possível validar todo o documento, mas demora menos tempo de processamento para validar apenas o atributo.       Se passa `null` para `validationEventHandler`, este método emite uma exceção após erros de validação. Avisos de validação não irão emitir uma exceção.       Para validar um atributo, utilizar uma instância do <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> Pode obter esta instância de várias formas. Uma forma fácil é o seguinte: 1.  Valide que um documento está em conformidade com um esquema.      2.  Adicionar o conjunto de informações de validação do schema post (PSVI) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A>método de extensão.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>método de extensão para obter um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> Do objeto obtido, pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XElement>o tipo estará <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XAttribute>o tipo estará <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Depois de ter uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, pode utilizar este método para validar um atributo.</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:simpleContent>  \n          <xsd:extension base='xsd:string'>  \n           <xsd:attribute name='Lang' use='required'>  \n            <xsd:simpleType>  \n             <xsd:restriction base='xsd:token'>  \n              <xsd:enumeration value='C#'/>  \n              <xsd:enumeration value='VB'/>  \n             </xsd:restriction>  \n            </xsd:simpleType>  \n           </xsd:attribute>  \n          </xsd:extension>  \n         </xsd:simpleContent>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XAttribute(\"Lang\", \"C#\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1 ...\");  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Lang attribute ...\");  \nXAttribute lang = doc1.Root.Attribute(\"Lang\");  \n  \nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// the following makes the Lang attribute invalid according to the schema  \nlang.Value = \"VC\";  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Lang attribute ...\");  \n  \nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n      <?xml version='1.0'?>  \n      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n          <xsd:element name='Root'>  \n              <xsd:complexType>  \n                  <xsd:simpleContent>  \n                      <xsd:extension base='xsd:string'>  \n                          <xsd:attribute name='Lang' use='required'>  \n                              <xsd:simpleType>  \n                                  <xsd:restriction base='xsd:token'>  \n                                      <xsd:enumeration value='C#'/>  \n                                      <xsd:enumeration value='VB'/>  \n                                  </xsd:restriction>  \n                              </xsd:simpleType>  \n                          </xsd:attribute>  \n                      </xsd:extension>  \n                  </xsd:simpleContent>  \n              </xsd:complexType>  \n          </xsd:element>  \n      </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root Lang='C#'/>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n    Dim lang As XAttribute = doc1.Root.Attribute(\"Lang\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    ' the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\"  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Lang attribute ...  \nlang validated  \n  \nValidating Lang attribute ...  \nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \nlang did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "O <xref:System.Xml.Linq.XAttribute>para validar.</xref:System.Xml.Linq.XAttribute>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> que especifica a árvore secundárias para validar."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> a validar contra."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> um evento que ocorre quando o leitor encontra erros de validação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, emite uma exceção após erros de validação."
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Emitida para erros de validação de linguagem de definição de esquema de XML (XSD)."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Valida que um <xref:System.Xml.Linq.XDocument>está em conformidade com um XSD num <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>, opcionalmente, povoando a árvore XML com o conjunto de informações de validação do schema post (PSVI).</xref:System.Xml.Linq.XDocument>"
  remarks: "Este método de extensão valida que <xref:System.Xml.Linq.XDocument>está em conformidade com o modelo de conteúdo de esquema <xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Linq.XDocument>       Se `addSchemaInfo` é `true`, este método preenche a árvore XML com o conjunto de informações de validação do schema post (PSVI).       Existem dois passos para preencher a árvore XML com o PSVI.      1.  Em primeiro lugar, uma anotação está adicionada para todos os nós da árvore para permitir a chamar <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>ou <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>num elemento ou atributo na árvore.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>      2.  Segundo, elementos predefinido e os atributos definidos no XSD são adicionados à árvore de XML. Ao chamar um do <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>métodos, pode determinar se um atributo ou elemento específico foi adicionado do XSD como um atributo ou elemento predefinido.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>"
  example:
  - "The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value. After successfully validating the document, the attribute with the default value is added to the XML tree. Note that the default attribute is not added to `doc2`, which does not validate against the schema.  \n  \n```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:simpleContent>  \n             <xsd:extension base='xsd:string'>  \n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n             </xsd:extension>  \n            </xsd:simpleContent>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"c1\"),  \n        new XElement(\"Child2\", \"c2\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                           {  \n                               Console.WriteLine(\"{0}\", e.Message);  \n                               errors = true;  \n                           }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc1:\");  \nConsole.WriteLine(doc1);  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc2:\");  \nConsole.WriteLine(doc2);  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n                        <xsd:complexType>  \n                            <xsd:simpleContent>  \n                                <xsd:extension base='xsd:string'>  \n                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n                                </xsd:extension>  \n                            </xsd:simpleContent>  \n                        </xsd:complexType>  \n                    </xsd:element>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root>  \n                                <Child1>c1</Child1>  \n                                <Child2>c2</Child2>  \n                            </Root>  \n    Dim doc2 As XDocument = <?xml version='1.0'?>  \n                            <Root>  \n                                <Child1>content1</Child1>  \n                                <Child3>content1</Child3>  \n                            </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc1:\")  \n    Console.WriteLine(doc1)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc2:\")  \n    Console.WriteLine(doc2)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n  \nContents of doc1:  \n<Root>  \n  <Child1>c1</Child1>  \n  <Child2 Att1=\"Att1 Default Value\">c2</Child2>  \n</Root>  \n  \nContents of doc2:  \n<Root>  \n  <Child1>content1</Child1>  \n  <Child3>content1</Child3>  \n</Root>  \n```  \n  \n The following example populates the tree with PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \n  \n```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n   string xsdMarkup =  \n        @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n           <xsd:simpleType name='GCType'>  \n            <xsd:restriction base='xsd:token'>  \n             <xsd:enumeration value='AAA'/>  \n             <xsd:enumeration value='BBB'/>  \n            </xsd:restriction>  \n           </xsd:simpleType>  \n           <xsd:element name='Root'>  \n            <xsd:complexType>  \n             <xsd:sequence>  \n              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n               <xsd:complexType>  \n                <xsd:sequence>  \n                 <xsd:element name='GrandChild1' type='GCType'/>  \n                 <xsd:element name='GrandChild2' type='GCType'/>  \n                 <xsd:element name='GrandChild3' type='GCType'/>  \n                </xsd:sequence>  \n               </xsd:complexType>  \n              </xsd:element>  \n             </xsd:sequence>  \n            </xsd:complexType>  \n           </xsd:element>  \n          </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XElement(\"Child1\",  \n                new XElement(\"GrandChild1\", \"AAA\"),  \n                new XElement(\"GrandChild2\", \"ZZZ\"),  \n                new XElement(\"GrandChild3\", \"ZZZ\")  \n            )  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n        {  \n            Console.WriteLine(e.Message);  \n            errors = true;  \n        }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:simpleType name='GCType'>  \n                <xsd:restriction base='xsd:token'>  \n                    <xsd:enumeration value='AAA'/>  \n                    <xsd:enumeration value='BBB'/>  \n                </xsd:restriction>  \n            </xsd:simpleType>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:sequence>  \n                                    <xsd:element name='GrandChild1' type='GCType'/>  \n                                    <xsd:element name='GrandChild2' type='GCType'/>  \n                                    <xsd:element name='GrandChild3' type='GCType'/>  \n                                </xsd:sequence>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>  \n                <GrandChild1>AAA</GrandChild1>  \n                <GrandChild2>ZZZ</GrandChild2>  \n                <GrandChild3>ZZZ</GrandChild3>  \n            </Child1>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XDocument
      description: "O <xref:System.Xml.Linq.XDocument>para validar.</xref:System.Xml.Linq.XDocument>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> a validar contra."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> um evento que ocorre quando o leitor encontra erros de validação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, emite uma exceção após erros de validação."
    - id: addSchemaInfo
      type: System.Boolean
      description: "A <xref:System.Boolean>que indica se deve preencher o conjunto de informações de validação do schema post (PSVI).</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Emitida para erros de validação de linguagem de definição de esquema de XML (XSD)."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Este método valida que um <xref:System.Xml.Linq.XElement>árvore secundária está em conformidade com uma determinada <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> e um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>.</xref:System.Xml.Linq.XElement>"
  remarks: "Pode utilizar este método para validar uma árvore secundárias (com um <xref:System.Xml.Linq.XElement>na raiz) está em conformidade com um esquema.</xref:System.Xml.Linq.XElement> Normalmente, utiliza este método quando modificar uma árvore secundárias e pretender certificar-se de que este ainda está em conformidade com a esquema. Foi possível validar todo o documento, mas demora menos tempo de processamento para validar uma árvore secundárias.       Se passa `null` para `validationEventHandler`, em seguida, este método emite uma exceção após erros de validação. Avisos de validação não irão emitir uma exceção.       Para validar uma árvore secundárias, utilizar uma instância do <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> Pode obter esta instância de várias formas. Uma forma fácil é o seguinte: 1.  Valide que um documento está em conformidade com um esquema.      2.  Adicionar o conjunto de informações de validação do schema post (PSVI) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A>método de extensão.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>método de extensão para obter um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> Do objeto obtido, pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XElement>o tipo estará <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XAttribute>o tipo estará <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Depois de ter uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, pode utilizar este método para validar uma árvore de secundárias.</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:sequence>  \n             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \n             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \n            </xsd:sequence>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\",  \n            new XElement(\"GrandChild1\", \"gc\"),  \n            new XElement(\"GrandChild2\", \"gc\")  \n        )  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1 ...\");  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Child1 after first edit ...\");  \nXElement child1 = doc1.Element(\"Root\").Element(\"Child1\");  \nchild1.Add(new XElement(\"GrandChild2\", \"gc\"));  \nerrors = false;  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"child1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// the following makes the Child1 element invalid according to the schema  \nchild1.Add(new XElement(\"GrandChild3\", \"gc\"));  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Child1 after second edit ...\");  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"child1 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:sequence>  \n                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \n                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \n                                </xsd:sequence>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>  \n                <GrandChild1>gc</GrandChild1>  \n                <GrandChild2>gc</GrandChild2>  \n            </Child1>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Child1 after first edit ...\")  \n    Dim child1 As XElement = doc1.Element(\"Root\").Element(\"Child1\")  \n    child1.Add(<GrandChild2>gc</GrandChild2>)  \n    errors = False  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"child1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    ' the following makes the Child1 element invalid according to the schema  \n    child1.Add(<GrandChild3>gc</GrandChild3>)  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Child1 after second edit ...\")  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"child1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Child1 after first edit ...  \nchild1 validated  \n  \nValidating Child1 after second edit ...  \nThe element 'Child1' has invalid child element 'GrandChild3'.  \nchild1 did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "O <xref:System.Xml.Linq.XElement>para validar.</xref:System.Xml.Linq.XElement>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> que especifica a árvore secundárias para validar."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> a validar contra."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> um evento que ocorre quando o leitor encontra erros de validação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, emite uma exceção após erros de validação."
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Emitida para erros de validação de linguagem de definição de esquema de XML (XSD)."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Valida que um <xref:System.Xml.Linq.XAttribute>está em conformidade com uma determinada <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> e um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>, opcionalmente, povoando a árvore XML com o conjunto de informações de validação do schema post (PSVI).</xref:System.Xml.Linq.XAttribute>"
  remarks: "Pode utilizar este método para validar uma <xref:System.Xml.Linq.XAttribute>está em conformidade com um esquema.</xref:System.Xml.Linq.XAttribute> Normalmente, utiliza este método quando modificar um atributo e pretender certificar-se de que este ainda está em conformidade com a esquema. Foi possível validar todo o documento, mas demora menos tempo de processamento para validar apenas o atributo.       Se `addSchemaInfo` é `true`, este método preenche o atributo com o conjunto de informações de validação do schema post (PSVI). Depois de ter preenchida a árvore XML com o PSVI, pode chamar <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>no atributo validado.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> Isto é útil se estiver a escrever código que se baseie dados devolvidos por <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       Se passa `null` para `validationEventHandler`, em seguida, este método emite uma exceção após erros de validação. Avisos de validação não irão emitir uma exceção.       Para validar um atributo, utilizar uma instância do <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> Pode obter esta instância de várias formas. Uma forma fácil é o seguinte: 1.  Valide que um documento está em conformidade com um esquema.      2.  Adicionar o conjunto de informações de validação do schema post (PSVI) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A>método de extensão.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>método de extensão para obter um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> Do objeto obtido, pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XElement>o tipo estará <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XAttribute>o tipo estará <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Depois de ter uma instância de um <xref:System.Xml.Schema.XmlSchemaObject>, pode utilizar este método para validar um atributo.</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n        @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:simpleContent>  \n          <xsd:extension base='xsd:string'>  \n           <xsd:attribute name='Lang' use='required'>  \n            <xsd:simpleType>  \n             <xsd:restriction base='xsd:token'>  \n              <xsd:enumeration value='C#'/>  \n              <xsd:enumeration value='VB'/>  \n             </xsd:restriction>  \n            </xsd:simpleType>  \n           </xsd:attribute>  \n          </xsd:extension>  \n         </xsd:simpleContent>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XAttribute(\"Lang\", \"C#\")  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Validating Lang attribute ...\");  \n    XAttribute lang = doc1.Element(\"Root\").Attribute(\"Lang\");  \n  \n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n  \n    // the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\";  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Validating Lang attribute ...\");  \n  \n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:simpleContent>  \n                        <xsd:extension base='xsd:string'>  \n                            <xsd:attribute name='Lang' use='required'>  \n                                <xsd:simpleType>  \n                                    <xsd:restriction base='xsd:token'>  \n                                        <xsd:enumeration value='C#'/>  \n                                        <xsd:enumeration value='VB'/>  \n                                    </xsd:restriction>  \n                                </xsd:simpleType>  \n                            </xsd:attribute>  \n                        </xsd:extension>  \n                    </xsd:simpleContent>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root Lang='C#'/>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n    Dim lang As XAttribute = doc1.Element(\"Root\").Attribute(\"Lang\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \n  \n    ' the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\"  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Lang attribute ...  \nlang validated  \n  \nValidating Lang attribute ...  \nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \nlang did not validate  \nInvalid Attribute /Root/@Lang  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "O <xref:System.Xml.Linq.XAttribute>para validar.</xref:System.Xml.Linq.XAttribute>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> que especifica a árvore secundárias para validar."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> a validar contra."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> um evento que ocorre quando o leitor encontra erros de validação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, emite uma exceção após erros de validação."
    - id: addSchemaInfo
      type: System.Boolean
      description: "A <xref:System.Boolean>que indica se deve preencher o conjunto de informações de validação do schema post (PSVI).</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Emitida para erros de validação de linguagem de definição de esquema de XML (XSD)."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Valida que um <xref:System.Xml.Linq.XElement>árvore secundária está em conformidade com uma determinada <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> e um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>, opcionalmente, povoando a árvore XML com o conjunto de informações de validação do schema post (PSVI).</xref:System.Xml.Linq.XElement>"
  remarks: "Pode utilizar este método para validar uma árvore secundárias (com um <xref:System.Xml.Linq.XElement>na raiz da árvore subsecção) está em conformidade com um esquema.</xref:System.Xml.Linq.XElement> Normalmente, utiliza este método quando modificar uma árvore secundárias e pretender certificar-se de que este ainda está em conformidade com a esquema. Foi possível validar todo o documento, mas demora menos tempo de processamento para validar uma árvore secundárias.       Se `addSchemaInfo` é `true`, em seguida, este método preenche a árvore XML com o conjunto de informações de validação do schema post (PSVI).       Existem dois aspetos de povoar a árvore XML com o PSVI.       Em primeiro lugar, uma anotação está adicionada a todos os nós da árvore de forma a que agora pode chamar <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>num elemento ou atributo na árvore.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       Segundo, elementos predefinido e os atributos definidos no XSD são adicionados à árvore de XML. Ao chamar um do <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>métodos, pode determinar se um atributo ou elemento específico foi adicionado do XSD como um atributo ou elemento predefinido.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       Se passa `null` para `validationEventHandler`, em seguida, este método emite uma exceção após erros de validação. Avisos de validação não irão emitir uma exceção.       Para validar uma árvore secundárias, utilizar uma instância do <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> Pode obter esta instância de várias formas. Uma forma fácil é o seguinte: 1.  Valide que um documento está em conformidade com um esquema.      2.  Adicionar o conjunto de informações de validação do schema post (PSVI) ao chamar o <xref:System.Xml.Schema.Extensions.Validate%2A>método de extensão.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  Chamar o <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>método de extensão para obter um objeto que implementa <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> Do objeto obtido, pode obter um <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XElement>o tipo estará <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Se de que obtém um <xref:System.Xml.Schema.XmlSchemaObject>para um <xref:System.Xml.Linq.XAttribute>o tipo estará <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Depois de ter uma instância de uma <xref:System.Xml.Schema.XmlSchemaObject>pode utilizar este método para validar uma árvore secundárias..</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:simpleContent>  \n             <xsd:extension base='xsd:string'>  \n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n             </xsd:extension>  \n            </xsd:simpleContent>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"c1\"),  \n        new XElement(\"Child2\", \"c2\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc1:\");  \nConsole.WriteLine(doc1);  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc2:\");  \nConsole.WriteLine(doc2);  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:simpleContent>  \n                                    <xsd:extension base='xsd:string'>  \n                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n                                    </xsd:extension>  \n                                </xsd:simpleContent>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>c1</Child1>  \n            <Child2>c2</Child2>  \n        </Root>  \n  \n    Dim doc2 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>content1</Child1>  \n            <Child3>content1</Child3>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc1:\")  \n    Console.WriteLine(doc1)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc2:\")  \n    Console.WriteLine(doc2)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n  \nContents of doc1:  \n<Root>  \n  <Child1>c1</Child1>  \n  <Child2 Att1=\"Att1 Default Value\">c2</Child2>  \n</Root>  \n  \nContents of doc2:  \n<Root>  \n  <Child1>content1</Child1>  \n  <Child3>content1</Child3>  \n</Root>  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "O <xref:System.Xml.Linq.XElement>para validar.</xref:System.Xml.Linq.XElement>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> que especifica a árvore secundárias para validar."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> a validar contra."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> um evento que ocorre quando o leitor encontra erros de validação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, emite uma exceção após erros de validação."
    - id: addSchemaInfo
      type: System.Boolean
      description: "A <xref:System.Boolean>que indica se deve preencher o conjunto de informações de validação do schema post (PSVI).</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Emitida para erros de validação de linguagem de definição de esquema de XML (XSD)."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XAttribute)
  nameWithType: Extensions.GetSchemaInfo(XAttribute)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XAttribute)
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.Linq.XAttribute
  parent: System.Xml.Linq
  isExternal: true
  name: XAttribute
  nameWithType: XAttribute
  fullName: System.Xml.Linq.XAttribute
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XElement)
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: true
  name: XDocument
  nameWithType: XDocument
  fullName: System.Xml.Linq.XDocument
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.XmlSchemaObject
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObject
  nameWithType: XmlSchemaObject
  fullName: System.Xml.Schema.XmlSchemaObject
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Xml.Schema.Extensions.GetSchemaInfo*
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo
  nameWithType: Extensions.GetSchemaInfo
- uid: System.Xml.Schema.Extensions.Validate*
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate
  nameWithType: Extensions.Validate
