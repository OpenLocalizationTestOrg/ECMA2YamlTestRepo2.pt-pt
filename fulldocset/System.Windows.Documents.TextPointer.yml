### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Representa uma posição dentro de um <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> ou <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "A classe de TextPointer apresenta a seguinte terminologia: - posicionar - inerentemente, uma TextPointer aponta sempre para um *posição* no conteúdo.  Essas posições um enquadram-se entre carateres no conteúdo ou entre o fluxo de conteúdo de elemento de etiquetas que definem a estrutura para o conteúdo.      -Atual posicionar - porque um TextPointer indica sempre uma posição e dado que muitas das operações que podem ser efetuadas através de um TextPointer relativamente à posição atualmente indicada pelo TextPointer, faz sentido simplesmente referir-se a posição indicada por um TextPointer como o *posição atual*.      -Posição de inserção - um *posição de inserção* é uma posição em que o novo conteúdo pode ser adicionado sem ultrapassar quaisquer regras semânticos para o conteúdo associado.  Na prática, uma posição de inserção em qualquer local está a ser onde um acento circunflexo poderá estar posicionado de conteúdo.  Um exemplo de uma posição TextPointer válido que não é uma posição de inserção é a posição entre duas adjacentes <xref:System.Windows.Documents.Paragraph>etiquetas (ou seja, entre a tag de fecho de parágrafo anterior e a tag de abertura do parágrafo seguinte).</xref:System.Windows.Documents.Paragraph>      -Símbolo - para efeitos de operações de TextPointer que envolvem símbolos, qualquer um dos seguintes é considerado um *símbolo*: – uma abrir ou fechar tag para uma <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>          -Um <xref:System.Windows.UIElement>elemento contido dentro de um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Tenha em atenção que essas um <xref:System.Windows.UIElement>são sempre contabilizadas como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pelo <xref:System.Windows.UIElement>não são contabilizadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Cada de 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caráter dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>      -Texto a opção contentor - um *contentor de texto* é o elemento que constitui o limite ultimate para o conteúdo de fluxo em execução; a posição indicado por um TextPointer sempre recai num contentor de texto.  Atualmente, um contentor de texto tem de ser um um <xref:System.Windows.Documents.FlowDocument>ou um <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  Um modo geral, as operações entre instâncias de TextPointer nos contentores de texto diferente não são suportadas.      Contentor - documento - o conteúdo de um texto é referido como um *documento*, como no <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>método e o <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>e <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>Propriedades.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       A classe de TextPointer destina-se para facilitar a transversal e manipulação de conteúdo que é representado por [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elementos de conteúdo do fluxo; em geral, os elementos derivam <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Algumas das operações que facilita a TextPointer incluem o seguinte:-executar uma comparação ordinal da posição atual com uma segundo posição especificada.  Consulte o <xref:System.Windows.Documents.TextPointer.CompareTo%2A>método.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      -Determinam o tipo de conteúdo adjacente à posição atual numa direção especificada.  Consulte o <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>método e <xref:System.Windows.Documents.TextPointerContext>enumeração.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -Obtenha o <xref:System.Windows.Documents.TextElement>que âmbitos ou adjacente à posição atual.</xref:System.Windows.Documents.TextElement>  Consulte <xref:System.Windows.Documents.Paragraph>e <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>método.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      -Obtenha o contentor de texto que âmbitos o documento atual.  Consulte o <xref:System.Windows.Documents.TextPointer.Parent%2A>propriedade.</xref:System.Windows.Documents.TextPointer.Parent%2A>      -Obter um número especificado de carateres anterior ou seguinte a posição actual.  Consulte o <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>método.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Inserir uma cadeia de carateres da posição atual.  Consulte o <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>método.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -Localize limites de linha no conteúdo.  Consulte o <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>método e <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>propriedade.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -Implica entre TextPointer posições e os desvios de símbolo conteúdo.  Consulte o <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>métodos.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      -Realizar testes acessos visual por traduzir entre uma posição TextPointer e um <xref:System.Windows.Point>que representa coordenadas relativas.</xref:System.Windows.Point>      -Localizar uma posição de inserção próximos em ou verifique se a posição atual é uma posição de inserção.  Consulte o <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>métodos e <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>propriedade.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       A posição e <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>indicado por um objeto de TextPointer são imutáveis.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  Quando o conteúdo editado ou modificado, a posição indicada por um TextPointer não é alterado em relação ao texto surrounding; em vez do deslocamento nessa posição a partir do início do conteúdo é ajustado proporcionalmente para refletir a nova posição relativa no conteúdo.  Por exemplo, um TextPointer que indica uma posição no início de um determinado parágrafo continua apontar para o início desse parágrafo, mesmo quando o conteúdo é inserido ou eliminado antes ou depois do parágrafo.       A classe de TextPointer não fornece qualquer construtores públicos.  É criada uma instância do TextPointer utilizando propriedades ou métodos de outros objetos (incluindo outros objetos TextPointer). A lista seguinte fornece alguns exemplos de métodos e propriedades que criam e devolvem um TextPointer.  Esta lista não é exaustiva: - a partir de um <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A>e <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> </xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -Partir de um <xref:System.Windows.Controls.TextBlock>(contentor de texto): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>e <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -Partir de um <xref:System.Windows.Documents.FlowDocument>(contentor de texto): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, e <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>- a partir de um TextPointer existente: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Efetua uma comparação ordinal entre as posições especificadas por atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e uma segunda especificado <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Um valor de –1 indica que a posição especificada pelo atual <xref:System.Windows.Documents.TextPointer>precede a posição especificada pelo `position`.</xref:System.Windows.Documents.TextPointer>  Um valor de 0 indica que as posições indicadas são iguais.  Um valor positivo +&1; indica que a posição especificada pelo atual <xref:System.Windows.Documents.TextPointer>segue-se a posição especificada pelo `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que especifica uma posição para comparar com a posição actual."
    return:
      type: System.Int32
      description: "-1 se atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede <code> position </code>; 0 se as localizações são os mesmos; + 1 se atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> segue <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Especifica uma posição fora do contentor de texto associado a posição actual."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Elimina o número especificado de carateres da posição indicada pelo atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Especifique um valor positivo para eliminar os carateres que se seguem a posição actual (como no <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); Especifique um valor negativo para eliminar os carateres que a posição actual de preceder (como no <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       O número de carateres eliminado, na verdade, pode ser inferior ao número especificado por `count`.  Isto acontece em casos onde `count` especifica mais carateres que existe a eliminar."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "O número de carateres para eliminar, começando na posição atual. Especifique um valor positivo para eliminar os carateres que se seguem a posição actual; Especifique um valor negativo para eliminar carateres preceder a posição actual."
    return:
      type: System.Int32
      description: "O número de carateres, na verdade, eliminado."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O método é denominado uma posição em que o texto não é permitido."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no fim do conteúdo no contentor de texto associado a posição actual."
  remarks: "O <xref:System.Windows.Documents.TextPointer.Parent%2A>para o devolvido <xref:System.Windows.Documents.TextPointer>é sempre um contentor de texto (<xref:System.Windows.Controls.TextBlock> ou <xref:System.Windows.Documents.FlowDocument>), em vez de um <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no fim do conteúdo no contentor de texto associado a posição actual."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no início do conteúdo no contentor de texto associado a posição actual."
  remarks: "Utilize a posição devolvida por esta propriedade como uma posição de linha de base a partir da qual trabalhar com desvios relativos para outros posições.  O <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>métodos proporcionam uma forma traduzir entre as posições e posição desvia os.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       O <xref:System.Windows.Documents.TextPointer.Parent%2A>para o devolvido <xref:System.Windows.Documents.TextPointer>é sempre um contentor de texto (<xref:System.Windows.Controls.TextBlock> ou <xref:System.Windows.Documents.FlowDocument>), em vez de um <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no início do conteúdo no contentor de texto associado a posição actual."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve o elemento, se existir, o que borders atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: "O elemento devolvido é, normalmente, um <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  A <xref:System.Windows.UIElement>pode ser devolvido quando a <xref:System.Windows.Documents.TextPointer>indica uma posição dentro de um <xref:System.Windows.Documents.BlockUIContainer>elemento ou um <xref:System.Windows.Documents.InlineUIContainer>elemento.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direcção lógica na qual pretende procurar um elemento adjacente."
    return:
      type: System.Windows.DependencyObject
      description: "O elemento adjacente especificado no <code> direction </code>, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não existir nenhum elemento adjacente."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve uma caixa delimitadora (<xref href=&quot;System.Windows.Rect&quot;></xref>) para o conteúdo que borders atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: "<xref:System.Windows.Documents.TextElement>margens não são consideradas conteúdo para efeitos deste método.</xref:System.Windows.Documents.TextElement>  Se o <xref:System.Windows.Documents.TextPointer>está posicionado antes de um <xref:System.Windows.Documents.TextElement>limite, o valor de retorno é uma caixa delimitadora pela próxima não -<xref:System.Windows.Documents.TextElement> conteúdo na direção especificada.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Se não houver nenhum conteúdo na direção especificada, a largura do zero <xref:System.Windows.Rect>é devolvido com uma altura correspondente a altura de qualquer anterior a conteúdo.</xref:System.Windows.Rect>       A operação efetuada através deste método depende de um esquema válido.  Quando for necessário, este método tenta voltar a gerar automaticamente um esquema válido antes de prosseguir a operação.  A regenerar um esquema pode ser uma operação dispendiosa relativamente.  Utilize o <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>propriedade verificar a existência de um esquema válido antes de efetuar as operações que podem voltar a gerar o esquema.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Para obter mais informações, consulte [esquema](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direcção lógica para localizar um conteúdo delimitadora caixa."
    return:
      type: System.Windows.Rect
      description: "Uma caixa delimitadora para conteúdo que borders atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção especificada, ou &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; atual, informações de esquema válido estiver indisponíveis."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição de inserção mais próxima na direção lógica especificada."
  remarks: "Uma posição de inserção é uma posição em que o novo conteúdo pode ser adicionado sem ultrapassar quaisquer regras semânticos para o conteúdo associado.  Na prática, uma posição de inserção em qualquer local está a ser onde um acento circunflexo poderá estar posicionado de conteúdo.  Um exemplo de um <xref:System.Windows.Documents.TextPointer>posição não é uma posição de inserção é a posição entre duas adjacentes <xref:System.Windows.Documents.Paragraph>etiquetas (ou seja, entre a tag de fecho de parágrafo anterior e a tag de abertura do parágrafo seguinte).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Se o <xref:System.Windows.Documents.TextPointer>já aponta para uma posição de inserção válido, mas a tag de fecho de uma sequência de formatação vazios segue diretamente nessa posição na direção especificada, em seguida, a <xref:System.Windows.Documents.TextPointer>devolvido por este método é ajustado para apontar para a posição de inserção imediatamente após o fecho da sequência de formatação.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Por exemplo, considere a sequência de marcação `<Bold>``a``</Bold>``b`.  Tenha em atenção que existem dois inserção posições entre as letras `a` e `b`— que precede o fecho `Bold` tag e um diretamente da tag de fecho a seguir `Bold` etiquetas.  Se GetInsertionPosition denomina-se num <xref:System.Windows.Documents.TextPointer>para a posição imediatamente após a letra `a` e antes do fechar `Bold` etiqueta e com um `direction` de <xref:System.Windows.Documents.LogicalDirection>, o devolvido <xref:System.Windows.Documents.TextPointer>é ajustada para apontar para a posição imediatamente antes da letra `b`, após o fecho `Bold` tag.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  É efetuada uma ajuste semelhante para abrir a formatação etiquetas ao trabalhar na direção oposta lógica.  Este método destina-se para fornecer um meio de disambiguation entre as posições de inserção em casos semelhantes.       Este método também pode ser utilizado para ser seletiva sobre os pontos de inserção quando está envolvida uma sequência de etiquetas estruturais. Por exemplo, quando posição um entre, fechar e etiquetas de parágrafo, o parâmetro de direção pode ser utilizado para selecionar o ponto de inserção mais próximo no início do parágrafo seguinte (especificando <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) ou no final de parágrafo anterior (especificando <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Se o ponteiro já se encontra na posição de inserção, e existem não adjacentes etiquetas de formatação especificado `direction`, a devolvido <xref:System.Windows.Documents.TextPointer>aponta para a mesma posição como a chamar <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>       É possível que não existem posição de inserção válido existe relativamente à posição indicada pelo <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>  Isto pode acontecer se o conteúdo referenciado é estruturalmente incompleto, como uma tabela vazia ou uma lista.  Nestes casos, este método devolve simplesmente um <xref:System.Windows.Documents.TextPointer>para a mesma posição como o <xref:System.Windows.Documents.TextPointer>de que este método foi chamado.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Este método devolve sempre um <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> válido"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual a pesquisar a posição de inserção mais próxima."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição de inserção mais próxima na direção especificada."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o início de uma linha que é especificado relativamente à atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>aponta para uma posição ambígua, por exemplo, entre duas linhas, a linha na direção especificada pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>é selecionado como a linha inicial relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       A operação efetuada através deste método depende de um esquema válido.  Quando for necessário, este método tenta voltar a gerar automaticamente um esquema válido antes de prosseguir a operação.  A regenerar um esquema pode ser uma operação dispendiosa relativamente.  Utilize <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>verificar a existência de um esquema válido antes de efetuar as operações que podem voltar a gerar o esquema.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Para obter mais informações, consulte [esquema](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "O número de marcadores de início da linha para ignorar ao determinar a linha para o qual pretende devolver a posição inicial. Os valores negativos especificam linhas anteriores, 0 Especifica a linha atual e especificam valores positivos seguintes linhas."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> apontar para o início da linha especificada (com o <xref:System.Windows.Documents.TextPointer.LogicalDirection*>definido como <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a linha especificada está fora do intervalo ou caso contrário, não é possível localizar.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o início de uma linha que é especificado relativamente à atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>e reporta o número de linhas foram ignoradas."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>aponta para uma posição ambígua, por exemplo, entre duas linhas, a linha na direção especificada pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>propriedade é selecionada como a linha inicial relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "O número de marcadores de início da linha para ignorar ao determinar a linha para o qual pretende devolver a posição inicial. Os valores negativos especificam linhas anteriores, 0 Especifica a linha atual e especificam valores positivos seguintes linhas."
    - id: actualCount
      type: System.Int32
      description: "Quando este método devolve, contém o número real de marcadores de início da linha que foram ignorados ao determinar a linha para o qual pretende devolver a posição inicial.  Este valor pode ser inferior a `count` se o início ou fim do conteúdo for detetado antes do número de linhas especificado é ignorado. Este parâmetro é transmitido não inicializado."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> apontar para o início da linha especificada (com o <xref:System.Windows.Documents.TextPointer.LogicalDirection*>definido como <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), ou para o início da linha mais próxima da linha especificada se a linha especificada está fora do intervalo.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um ponteiro para o símbolo seguinte na direção lógica especificada."
  remarks: "Qualquer uma das seguintes é considerada um símbolo: – uma abrir ou fechar tag para uma <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contidos numa <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Tenha em atenção que essas um <xref:System.Windows.UIElement>são sempre contabilizadas como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pelo <xref:System.Windows.UIElement>não são contabilizadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caráter dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>       Se o símbolo seguinte está categorizado como <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, ou <xref:System.Windows.Documents.TextPointerContext>(conforme identificado pelo <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>método), o <xref:System.Windows.Documents.TextPointer>devolvido por este método avançado pelo símbolo de exatamente um da posição atual.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       Se o símbolo seguinte está categorizado como <xref:System.Windows.Documents.TextPointerContext>, em seguida, a <xref:System.Windows.Documents.TextPointer>devolvido por este método avançado passado o texto do símbolo de não sejam de texto seguinte (ou seja, a próxima posicionar onde o <xref:System.Windows.Documents.TextPointerContext>não é <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  A contagem de símbolo exato ultrapassada pode ser calculada antecipadamente ao chamar o <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>método.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direcção lógica na qual pretende procurar o símbolo seguinte."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o símbolo seguinte na direção pedida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> borders o início ou fim do conteúdo."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição de inserção seguinte na direção lógica especificada."
  remarks: "Um *posição de inserção* é uma posição em que o novo conteúdo pode ser adicionado sem ultrapassar quaisquer regras semânticos para o conteúdo associado.  Na prática, uma posição de inserção em qualquer local está a ser onde um acento circunflexo poderá estar posicionado de conteúdo.  Um exemplo de um <xref:System.Windows.Documents.TextPointer>posição não é uma posição de inserção é a posição entre duas adjacentes <xref:System.Windows.Documents.Paragraph>etiquetas (ou seja, entre a tag de fecho de parágrafo anterior e a tag de abertura do parágrafo seguinte).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual a pesquisar a posição de inserção seguinte."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que identifica a posição de inserção seguinte na direção pedida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se é possível encontrar nenhum seguinte posição de inserção."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve a contagem de símbolos entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e uma segunda especificado <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Qualquer uma das seguintes é considerada um símbolo: – uma abrir ou fechar tag para uma <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contidos numa <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Tenha em atenção que essas um <xref:System.Windows.UIElement>são sempre contabilizadas como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pelo <xref:System.Windows.UIElement>não são contabilizadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caráter dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que especifica uma posição para encontrar a distância (em símbolos)."
    return:
      type: System.Int32
      description: "O número de símbolos entre atual relativo <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e <code> position </code>.  Um valor negativo indica que o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> segue-se a posição especificada pelo <code> position </code>, 0 indica que as posições são iguais e um valor positivo indica que o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede a posição especificada pelo <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Especifica uma posição fora do contentor de texto associado a posição actual."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um indicador de categoria para o conteúdo adjacente a atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual determinar a categoria para o conteúdo adjacente."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "Um do <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> valores que indica a categoria para o conteúdo adjacente na direção lógica especificada."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição indicada pelo desvio especificado, no símbolos, a partir do início da atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Qualquer uma das seguintes é considerada um símbolo: – uma abrir ou fechar a etiqueta para o <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contidos numa <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Tenha em atenção que essas um <xref:System.Windows.UIElement>são sempre contabilizadas como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pelo <xref:System.Windows.UIElement>não são contabilizadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caráter dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Um desvio igual a, no símbolos, para o qual calcular e voltar a posição.  Se o desvio é negativo, a posição é calculada na direção lógica opposite desse indicado pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection*>propriedade.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição indicada pelo desvio especificado, ou<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>não se é possível encontrar nenhum posição correspondente."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição indicada pelo desvio especificado, no símbolos, a partir do início da atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e na direção especificada."
  remarks: "Qualquer uma das seguintes é considerada um símbolo: – uma abrir ou fechar a etiqueta para o <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contidos numa <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Tenha em atenção que essas um <xref:System.Windows.UIElement>são sempre contabilizadas como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pelo <xref:System.Windows.UIElement>não são contabilizadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caráter dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "Um desvio igual a, no símbolos, para o qual calcular e voltar a posição.  Se o desvio é negativo, o devolvido <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>; caso contrário, se segue."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica do devolvido <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição indicada pelo desvio especificado, ou<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se o deslocamento ultrapassa o fim do conteúdo."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve uma cadeia contendo qualquer texto adjacente a atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: "Este método devolve apenas ininterrupta execuções do texto.  Nada é devolvido se qualquer um símbolo tipo diferente de <xref:System.Windows.Documents.TextPointerContext>adjacente a atual <xref:System.Windows.Documents.TextPointer>na direção especificada.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Da mesma forma, o texto é devolvido apenas até o símbolo de não sejam de texto seguinte."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direcção lógica na qual pretende encontrar e devolver quaisquer adjacente."
    return:
      type: System.String
      description: "Uma cadeia contendo qualquer adjacente na direção especificada lógica, ou &lt;xref:System.String?displayProperty=fullName&gt; se nenhum adjacente pode ser encontrado."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Copia o número máximo de carateres especificado a partir de qualquer adjacente na direção especificada para uma matriz de caracteres fornecido pelo chamador."
  remarks: "Este método devolve apenas ininterrupta execuções do texto.  Nada é devolvido se qualquer um símbolo tipo diferente de <xref:System.Windows.Documents.TextPointerContext>adjacente a atual <xref:System.Windows.Documents.TextPointer>na direção especificada.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Da mesma forma, o texto é devolvido apenas até o símbolo de não sejam de texto seguinte."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direcção lógica na qual pretende localizar e copiar qualquer adjacente."
    - id: textBuffer
      type: System.Char[]
      description: "Uma memória intermédia para o qual a qualquer texto é copiado."
    - id: startIndex
      type: System.Int32
      description: "Um índice em `textBuffer` no qual pretende começar a escrever copiado texto."
    - id: count
      type: System.Int32
      description: "O número máximo de carateres para copiar."
    return:
      type: System.Int32
      description: "O número de carateres, na verdade, copiado para <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>é menor que 0 ou maior do que o <xref:System.Array.Length*> propriedade <code>textBuffer</code>.       - ou - <code>count</code> é inferior a 0 ou maior do que o espaço restante em <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> menos <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Devolve o número de carateres Unicode entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e o símbolo de não sejam de texto seguinte, na direção lógica especificada."
  remarks: "Qualquer uma das seguintes é considerada um símbolo: – uma abrir ou fechar a etiqueta para o <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contidos numa <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Tenha em atenção que essas um <xref:System.Windows.UIElement>são sempre contabilizadas como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pelo <xref:System.Windows.UIElement>não são contabilizadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caráter dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Um do <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual contabilizar o número de carateres."
    return:
      type: System.Int32
      description: "O número de carateres Unicode entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e o símbolo de não sejam de texto seguinte.  Este número pode ser 0, se não houver nenhuma adjacente."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um valor que indica se o contentor de texto associado a posição atual tem um esquema (atualizado) válido."
  remarks: "Quando for necessário, as operações que dependem de um esquema válido (tais como o <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>método, <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>método, e <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>propriedade) tentar voltar a gerar automaticamente um esquema válido antes de prosseguir a operação.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  A regenerar um esquema pode ser uma operação dispendiosa relativamente.  Utilize esta propriedade para procurar um esquema válido antes de efetuar as operações que podem voltar a gerar o esquema.  Para obter mais informações, consulte [esquema](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o esquema é atual e válido. caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Insere uma quebra de linha na posição atual."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> posicionado imediatamente após o <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> elemento inserido por este método."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Insere uma quebra de parágrafo na posição atual."
  remarks: "Se este método é chamado quando a posição atual está no interior de um existente <xref:System.Windows.Documents.Paragraph>elemento, o parágrafo existente e qualquer conteúdo contém estão divididos em duas parágrafos na posição atual.</xref:System.Windows.Documents.Paragraph>  Se este método é chamado quando a posição actual não está dentro de um parágrafo existente, é inserido um parágrafo novo, estar vazio.  Se este método é denominado uma posição unsuitable para dividir ou por inserir um parágrafo (por exemplo, se a posição atual no interior de um <xref:System.Windows.Documents.Hyperlink>elemento), é emitida uma exceção.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> ao início (<xref:System.Windows.Documents.TextElement.ContentStart*>) do novo parágrafo.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Este método é chamado para uma posição que não é possível dividir para acomodar um parágrafo novo, tal como no âmbito de um <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> ou <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Insere o texto especificado no texto <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> na posição atual."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>não tem um âmbito por um <xref:System.Windows.Documents.Run>elemento, um <xref:System.Windows.Documents.Run>é inserido juntamente com o `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "O texto para inserir."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A posição actual não está dentro um <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> elemento."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um valor que indica se a posição atual é uma posição de inserção."
  remarks: "Uma posição de inserção é uma posição em que o novo conteúdo pode ser adicionado sem ultrapassar quaisquer regras semânticos para o conteúdo associado.  Na prática, uma posição de inserção em qualquer local está a ser onde um acento circunflexo poderá estar posicionado de conteúdo.  Um exemplo de um <xref:System.Windows.Documents.TextPointer>posição não é uma posição de inserção é a posição entre duas adjacentes <xref:System.Windows.Documents.Paragraph>etiquetas (ou seja, entre a tag de fecho de parágrafo anterior e a tag de abertura do parágrafo seguinte).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a posição atual é uma posição de inserção; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um valor que indica se a posição atual está no início de uma linha."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>aponta para uma posição ambígua, por exemplo, entre duas linhas, a linha na direção especificada pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>propriedade é selecionada como a linha inicial relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       A operação efetuada por esta propriedade depende de um esquema válido.  Quando for necessário, este método tenta voltar a gerar automaticamente um esquema válido antes de prosseguir a operação.  A regenerar um esquema pode ser uma operação dispendiosa relativamente.  Utilize o <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>propriedade verificar a existência de um esquema válido antes de efetuar as operações que podem voltar a gerar o esquema.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Para obter mais informações, consulte [esquema](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a posição atual está no início de uma linha; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Indica se a posição especificada está no mesmo contentor de texto, como a posição actual."
  remarks: "A maioria das operações que envolvem várias <xref:System.Windows.Documents.TextPointer>instâncias só são válidas se as instâncias em questão indicam as posições que estão no mesmo âmbito do contentor de texto.</xref:System.Windows.Documents.TextPointer>  Por exemplo o <xref:System.Windows.Documents.TextPointer.CompareTo%2A>e <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>métodos não podem ser utilizados com um <xref:System.Windows.Documents.TextPointer>para uma posição fora do contentor de texto associado a posição actual.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Utilize este método para verificar se uma determinada <xref:System.Windows.Documents.TextPointer>é compatível com a posição atual de operações.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "A <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que especifica uma posição para comparar com a posição actual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> textPosition </code> indica uma posição que se encontra no mesmo contentor de texto, como a posição actual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém a direção lógica associada com a posição actual, que é utilizada para eliminar a ambiguidade de conteúdo associado a posição actual."
  remarks: "Como um exemplo de como esta propriedade é utilizada, o <xref:System.Windows.Documents.LogicalDirection>do <xref:System.Windows.Documents.TextPointer>devolvido por um teste de acessos método proporciona um acessos entre dois carateres do texto.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> A direção lógica Especifica que os dois carateres, na verdade, foi atingido — à esquerda ou à direita."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "O <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valor que está associado a posição actual."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém o parágrafo âmbitos a posição actual, se aplicável."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "O <xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> que âmbitos a posição actual, ou<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>não existir nenhum desse parágrafo."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém a lógica principal que âmbitos a posição actual."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "A lógica principal que âmbitos a posição actual."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Este tipo ou membro suporta o [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infraestrutura e não se destina a ser utilizado diretamente a partir do seu código."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A cadeia que representa o objeto."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
