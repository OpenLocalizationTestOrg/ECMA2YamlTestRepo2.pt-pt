### YamlMime:ManagedReference
items:
- uid: System.Messaging.AccessControlEntry
  id: AccessControlEntry
  children:
  - System.Messaging.AccessControlEntry.#ctor
  - System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee)
  - System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.GenericAccessRights,System.Messaging.StandardAccessRights,System.Messaging.AccessControlEntryType)
  - System.Messaging.AccessControlEntry.CustomAccessRights
  - System.Messaging.AccessControlEntry.EntryType
  - System.Messaging.AccessControlEntry.GenericAccessRights
  - System.Messaging.AccessControlEntry.StandardAccessRights
  - System.Messaging.AccessControlEntry.Trustee
  langs:
  - csharp
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry
  type: Class
  summary: "Specifies access rights for a trustee (user, group, or computer) to perform application-specific implementations of common tasks."
  remarks: "Many applications have similar operations to which a trustee can be assigned rights, for example, reading, writing, and deleting objects. When you assign rights for these general operations, the application interprets them in a way specific to that application. For example, Message Queuing interprets the reading operation as receiving or peeking messages from a queue. The AccessControlEntry class provides access to these common rights.       When working with access control entries, you specify a trustee to which you are assigning the rights. You must set at least one of the <xref:System.Messaging.AccessControlEntry.GenericAccessRights%2A>, <xref:System.Messaging.AccessControlEntry.StandardAccessRights%2A>, or <xref:System.Messaging.AccessControlEntry.CustomAccessRights%2A> properties to indicate which rights to assign to the trustee. You can set the <xref:System.Messaging.AccessControlEntry.EntryType%2A> property to specify whether the rights you indicate should be granted or denied. The default entry type is to allow rights."
  syntax:
    content: public class AccessControlEntry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.#ctor
  id: '#ctor'
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: AccessControlEntry()
  nameWithType: AccessControlEntry.AccessControlEntry()
  fullName: System.Messaging.AccessControlEntry.AccessControlEntry()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <xref href=&quot;System.Messaging.AccessControlEntry&quot;></xref> class that specifies neither a trustee nor set of rights to apply."
  remarks: "Set the <xref:System.Messaging.AccessControlEntry.Trustee%2A> property and at least one of the <xref:System.Messaging.AccessControlEntry.GenericAccessRights%2A>, <xref:System.Messaging.AccessControlEntry.StandardAccessRights%2A>, or <xref:System.Messaging.AccessControlEntry.CustomAccessRights%2A> properties before using this <xref:System.Messaging.AccessControlEntry> instance to set access rights for a trustee.       You can optionally set the <xref:System.Messaging.AccessControlEntry.EntryType%2A> property, though it defaults to `Allow` if you choose not to do so."
  syntax:
    content: public AccessControlEntry ();
    parameters: []
  overload: System.Messaging.AccessControlEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee)
  id: '#ctor(System.Messaging.Trustee)'
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: AccessControlEntry(Trustee)
  nameWithType: AccessControlEntry.AccessControlEntry(Trustee)
  fullName: System.Messaging.AccessControlEntry.AccessControlEntry(Trustee)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <xref href=&quot;System.Messaging.AccessControlEntry&quot;></xref> class that specifies a trustee to which rights are granted or denied."
  remarks: "Set the <xref:System.Messaging.AccessControlEntry.EntryType%2A> property and at least one of the <xref:System.Messaging.AccessControlEntry.GenericAccessRights%2A>, <xref:System.Messaging.AccessControlEntry.StandardAccessRights%2A>, or <xref:System.Messaging.AccessControlEntry.CustomAccessRights%2A> properties before using this <xref:System.Messaging.AccessControlEntry> instance to set access rights for a trustee."
  syntax:
    content: public AccessControlEntry (System.Messaging.Trustee trustee);
    parameters:
    - id: trustee
      type: System.Messaging.Trustee
      description: "A <xref href=&quot;System.Messaging.Trustee&quot;></xref> that specifies a user, group, computer, domain, or alias."
  overload: System.Messaging.AccessControlEntry.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>trustee</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.GenericAccessRights,System.Messaging.StandardAccessRights,System.Messaging.AccessControlEntryType)
  id: '#ctor(System.Messaging.Trustee,System.Messaging.GenericAccessRights,System.Messaging.StandardAccessRights,System.Messaging.AccessControlEntryType)'
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: AccessControlEntry(Trustee,GenericAccessRights,StandardAccessRights,AccessControlEntryType)
  nameWithType: AccessControlEntry.AccessControlEntry(Trustee,GenericAccessRights,StandardAccessRights,AccessControlEntryType)
  fullName: System.Messaging.AccessControlEntry.AccessControlEntry(Trustee,GenericAccessRights,StandardAccessRights,AccessControlEntryType)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <xref href=&quot;System.Messaging.AccessControlEntry&quot;></xref> class that specifies a trustee, rights to assign, and whether to grant or deny these rights."
  remarks: "This overload of the constructor sets the <xref:System.Messaging.AccessControlEntry.CustomAccessRights%2A> property to a bitwise combination of the `genericAccessRights` and `standardAccessRights` parameters you specify."
  syntax:
    content: public AccessControlEntry (System.Messaging.Trustee trustee, System.Messaging.GenericAccessRights genericAccessRights, System.Messaging.StandardAccessRights standardAccessRights, System.Messaging.AccessControlEntryType entryType);
    parameters:
    - id: trustee
      type: System.Messaging.Trustee
      description: "A <xref href=&quot;System.Messaging.Trustee&quot;></xref> that specifies a user, group, computer, domain, or alias."
    - id: genericAccessRights
      type: System.Messaging.GenericAccessRights
      description: "A bitwise combination of the <xref href=&quot;System.Messaging.GenericAccessRights&quot;></xref> values."
    - id: standardAccessRights
      type: System.Messaging.StandardAccessRights
      description: "A bitwise combination of the <xref href=&quot;System.Messaging.StandardAccessRights&quot;></xref> values."
    - id: entryType
      type: System.Messaging.AccessControlEntryType
      description: "One of the <xref href=&quot;System.Messaging.AccessControlEntryType&quot;></xref> values, which specifies whether to allow, deny, set, or revoke the specified rights."
  overload: System.Messaging.AccessControlEntry.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>trustee</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The <code>genericAccessRights</code>, <code>standardAccessRights</code>, or <code>entryType</code> parameters are not valid enumeration values."
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.CustomAccessRights
  id: CustomAccessRights
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: CustomAccessRights
  nameWithType: AccessControlEntry.CustomAccessRights
  fullName: System.Messaging.AccessControlEntry.CustomAccessRights
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets custom access rights."
  syntax:
    content: protected int CustomAccessRights { get; set; }
    return:
      type: System.Int32
      description: "Application-specific access rights, usually defined as a bitflag."
  overload: System.Messaging.AccessControlEntry.CustomAccessRights*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.EntryType
  id: EntryType
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: EntryType
  nameWithType: AccessControlEntry.EntryType
  fullName: System.Messaging.AccessControlEntry.EntryType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a value that indicates how the access rights apply to the trustee."
  syntax:
    content: public System.Messaging.AccessControlEntryType EntryType { get; set; }
    return:
      type: System.Messaging.AccessControlEntryType
      description: "One of the <xref href=&quot;System.Messaging.AccessControlEntryType&quot;></xref> values, which specifies whether to allow, deny, set, or revoke the specified rights. The default is <xref uid=&quot;langword_csharp_Allow&quot; name=&quot;Allow&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.AccessControlEntry.EntryType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The entry type is not a valid <xref href=&quot;System.Messaging.AccessControlEntryType&quot;></xref> enumeration value."
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.GenericAccessRights
  id: GenericAccessRights
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: GenericAccessRights
  nameWithType: AccessControlEntry.GenericAccessRights
  fullName: System.Messaging.AccessControlEntry.GenericAccessRights
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a set of common access rights that map to both standard and object-specific access rights for reading, writing, and executing."
  remarks: "Securable objects use the four high-order bits of the Windows 2000 and Windows NT access mask format to specify the generic access rights. Each type of securable object maps these bits to a set of its standard and object-specific access rights. Applications that define private securable objects can also use the generic access rights."
  syntax:
    content: public System.Messaging.GenericAccessRights GenericAccessRights { get; set; }
    return:
      type: System.Messaging.GenericAccessRights
      description: "A bitwise combination of the <xref href=&quot;System.Messaging.GenericAccessRights&quot;></xref> values."
  overload: System.Messaging.AccessControlEntry.GenericAccessRights*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value you set is not a valid combination of <xref href=&quot;System.Messaging.GenericAccessRights&quot;></xref> bitflag members."
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.StandardAccessRights
  id: StandardAccessRights
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: StandardAccessRights
  nameWithType: AccessControlEntry.StandardAccessRights
  fullName: System.Messaging.AccessControlEntry.StandardAccessRights
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a set of standard access rights that correspond to operations common to most types of securable objects."
  remarks: "The Windows 2000 and Windows NT access mask format includes a set of bits for the standard access rights. Each type of securable object has a set of access rights that correspond to operations specific to that type of object. In addition to these object-specific access rights, there is a set of standard access rights that correspond to operations common to most types of securable objects."
  syntax:
    content: public System.Messaging.StandardAccessRights StandardAccessRights { get; set; }
    return:
      type: System.Messaging.StandardAccessRights
      description: "A bitwise combination of the <xref href=&quot;System.Messaging.StandardAccessRights&quot;></xref> values."
  overload: System.Messaging.AccessControlEntry.StandardAccessRights*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value you set is not a valid combination of <xref href=&quot;System.Messaging.StandardAccessRights&quot;></xref> bitflag members."
  platform:
  - net462
- uid: System.Messaging.AccessControlEntry.Trustee
  id: Trustee
  parent: System.Messaging.AccessControlEntry
  langs:
  - csharp
  name: Trustee
  nameWithType: AccessControlEntry.Trustee
  fullName: System.Messaging.AccessControlEntry.Trustee
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the user, group, domain, or alias to which you are assigning access rights."
  remarks: "Both users and programs, such as Win32 services, use user accounts to log on to the local computer. Group accounts cannot be used to log on to a computer, but are useful in <xref:System.Messaging.AccessControlEntry> instances to allow or deny a set of access rights to one or more user accounts."
  syntax:
    content: public System.Messaging.Trustee Trustee { get; set; }
    return:
      type: System.Messaging.Trustee
      description: "A <xref href=&quot;System.Messaging.Trustee&quot;></xref> that specifies a user account, group account, or logon session to which a <xref href=&quot;System.Messaging.AccessControlEntry&quot;></xref> applies."
  overload: System.Messaging.AccessControlEntry.Trustee*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The Trustee property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.AccessControlEntry.#ctor
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: AccessControlEntry()
  nameWithType: AccessControlEntry.AccessControlEntry()
  fullName: System.Messaging.AccessControlEntry.AccessControlEntry()
- uid: System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee)
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: AccessControlEntry(Trustee)
  nameWithType: AccessControlEntry.AccessControlEntry(Trustee)
  fullName: System.Messaging.AccessControlEntry.AccessControlEntry(Trustee)
- uid: System.Messaging.Trustee
  parent: System.Messaging
  isExternal: false
  name: Trustee
  nameWithType: Trustee
  fullName: System.Messaging.Trustee
- uid: System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.GenericAccessRights,System.Messaging.StandardAccessRights,System.Messaging.AccessControlEntryType)
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: AccessControlEntry(Trustee,GenericAccessRights,StandardAccessRights,AccessControlEntryType)
  nameWithType: AccessControlEntry.AccessControlEntry(Trustee,GenericAccessRights,StandardAccessRights,AccessControlEntryType)
  fullName: System.Messaging.AccessControlEntry.AccessControlEntry(Trustee,GenericAccessRights,StandardAccessRights,AccessControlEntryType)
- uid: System.Messaging.GenericAccessRights
  parent: System.Messaging
  isExternal: false
  name: GenericAccessRights
  nameWithType: GenericAccessRights
  fullName: System.Messaging.GenericAccessRights
- uid: System.Messaging.StandardAccessRights
  parent: System.Messaging
  isExternal: false
  name: StandardAccessRights
  nameWithType: StandardAccessRights
  fullName: System.Messaging.StandardAccessRights
- uid: System.Messaging.AccessControlEntryType
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntryType
  nameWithType: AccessControlEntryType
  fullName: System.Messaging.AccessControlEntryType
- uid: System.Messaging.AccessControlEntry.CustomAccessRights
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: CustomAccessRights
  nameWithType: AccessControlEntry.CustomAccessRights
  fullName: System.Messaging.AccessControlEntry.CustomAccessRights
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.AccessControlEntry.EntryType
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: EntryType
  nameWithType: AccessControlEntry.EntryType
  fullName: System.Messaging.AccessControlEntry.EntryType
- uid: System.Messaging.AccessControlEntry.GenericAccessRights
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: GenericAccessRights
  nameWithType: AccessControlEntry.GenericAccessRights
  fullName: System.Messaging.AccessControlEntry.GenericAccessRights
- uid: System.Messaging.AccessControlEntry.StandardAccessRights
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: StandardAccessRights
  nameWithType: AccessControlEntry.StandardAccessRights
  fullName: System.Messaging.AccessControlEntry.StandardAccessRights
- uid: System.Messaging.AccessControlEntry.Trustee
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: Trustee
  nameWithType: AccessControlEntry.Trustee
  fullName: System.Messaging.AccessControlEntry.Trustee
- uid: System.Messaging.AccessControlEntry.#ctor*
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry.AccessControlEntry
- uid: System.Messaging.AccessControlEntry.CustomAccessRights*
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: CustomAccessRights
  nameWithType: AccessControlEntry.CustomAccessRights
- uid: System.Messaging.AccessControlEntry.EntryType*
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: EntryType
  nameWithType: AccessControlEntry.EntryType
- uid: System.Messaging.AccessControlEntry.GenericAccessRights*
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: GenericAccessRights
  nameWithType: AccessControlEntry.GenericAccessRights
- uid: System.Messaging.AccessControlEntry.StandardAccessRights*
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: StandardAccessRights
  nameWithType: AccessControlEntry.StandardAccessRights
- uid: System.Messaging.AccessControlEntry.Trustee*
  parent: System.Messaging.AccessControlEntry
  isExternal: false
  name: Trustee
  nameWithType: AccessControlEntry.Trustee
