### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "Fornece uma transação interna da colocação de mensagens em fila."
  remarks: "Para enviar ou receber uma mensagem como parte de uma transação, pode utilizar a classe de MessageQueueTransaction para criar uma transação e transmita-a uma sobrecarga do <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>método ou <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>método que assume um `transaction` parâmetro.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> As mensagens enviadas como parte de uma transação tem de ser enviadas para filas transacionais. Recebida filas transacionais devem ser recebidas mensagens com uma transação especificada.       Para além de <xref:System.Messaging.MessageQueue.Receive%2A>método, pode receber mensagens com um identificador especificado ou o identificador de correlação especificado.</xref:System.Messaging.MessageQueue.Receive%2A> Consulte o <xref:System.Messaging.MessageQueue.ReceiveById%2A>e <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>métodos para obter mais informações sobre seletivamente receber mensagens de filas transacionais.</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> </xref:System.Messaging.MessageQueue.ReceiveById%2A>       As mensagens enviadas para filas transacionais são removidas se a transação foi consolidada. Da mesma forma, as mensagens recebidas de filas transacionais são devolvidas para a fila se a transação é revertida.       Se instanciar um MessageQueueTransaction e transmita-a uma sobrecarga aplicável do <xref:System.Messaging.MessageQueue.Send%2A>método ou <xref:System.Messaging.MessageQueue.Receive%2A>método para enviar uma mensagem para uma fila não transacional ou receber uma mensagem numa fila não transacional, o método emite uma exceção que indica &quot;Utilização da transação incorreto&quot;.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Send%2A>       [Visual Basic]       MessageQueueTransaction é thread de apartamento com suporte para, por isso, se o estado de apartamento for `STA`, não é possível utilizar a transação em vários threads. Visual Basic define o estado do thread principal para `STA`, por isso, tem de aplicar o <xref:System.MTAThreadAttribute>no `Main` subroutine.</xref:System.MTAThreadAttribute> Caso contrário, enviar uma mensagem de transacional com outro thread emite um <xref:System.Messaging.MessageQueueException>exceção.</xref:System.Messaging.MessageQueueException> Aplicar o <xref:System.MTAThreadAttribute>utilizando o seguinte fragmento.</xref:System.MTAThreadAttribute>      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> classe."
  remarks: "Este construtor define o <xref:System.Messaging.MessageQueueTransaction.Status%2A>propriedade `Initialized`.</xref:System.Messaging.MessageQueueTransaction.Status%2A>"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "A reverter a transação interna pendente."
  remarks: "Abortar marca a conclusão bem-sucedida de um processo iniciada numa chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Normalmente, um efetua uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>dentro de um `Try...Catch` bloco de processamento de exceções, colocar uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A>no `Try` cláusula e uma chamada para abortar no `Catch` cláusula.</xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Abortar reverte toda a transação. Isto inclui todas as mensagens enviadas ou recebidas após a chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação interna que está a tentar reverter não foi iniciado."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Ocorre um erro interno de colocação de mensagens em fila."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicia uma nova transação interna a colocação de mensagens em fila."
  remarks: "Começar a marca o início do processamento que será consolidado ou revertido, consoante o sucesso da transação. Se ocorrer uma excepção durante o processamento, toda a transação é revertida. Isto inclui todas as mensagens enviadas ou recebidas após a chamada de Begin.       Normalmente, um efetua uma chamada para Begin dentro de um `Try...Catch` bloco de processamento de exceções, colocar uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A>no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A>no `Catch` cláusula.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A>"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação já foi iniciada."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Ocorre um erro interno de colocação de mensagens em fila."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Consolida a transação interna pendente."
  remarks: "Consolidação marca a conclusão do processamento iniciada numa chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> com êxito Se ocorrer uma excepção entre a chamada de <xref:System.Messaging.MessageQueueTransaction.Begin%2A>e a chamada para a consolidação, toda a transação é revertida.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Isto inclui todas as mensagens enviadas ou recebidas após a chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Normalmente, um efetua uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>dentro de um `Try...Catch` bloco de processamento de exceções, colocar uma chamada para consolidação no `Try` cláusula e uma chamada para <xref:System.Messaging.MessageQueueTransaction.Abort%2A>no `Catch` cláusula.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação que está a tentar consolidar não foi iniciado."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Ocorre um erro interno de colocação de mensagens em fila."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Versões de todos os recursos utilizados pelo <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>."
  remarks: "Chamar Dispose permite que os recursos utilizados pelo <xref:System.Messaging.MessageQueueTransaction>para possível reatribuir porque para outros fins.</xref:System.Messaging.MessageQueueTransaction> Para obter mais informações sobre `Dispose`, consulte [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md).       Qualquer internas transacções pendentes são revertidas por Dispose."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueTransaction.Dispose%2A> `Dispose`invoca protegida `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Messaging.MessageQueueTransaction>referências.</xref:System.Messaging.MessageQueueTransaction> Este método invoca o `Dispose` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Liberta os recursos retidos, a instância atual."
  remarks: "Este método substitui <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Código da aplicação não deve chamar este método; método Finalize de um objeto é invocado automaticamente durante a recolha de lixo, a menos que Finalização pelo garbage collector foi desativada por uma chamada para o <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>método.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Para obter mais informações, consulte [finalizar métodos e os processos de destruição](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md), e [a substituir o método Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o estado da transação."
  remarks: "Quando uma instância do <xref:System.Messaging.MessageQueueTransaction>classe ter sido criada, o estado é definido pelo construtor para `Initialized`.</xref:System.Messaging.MessageQueueTransaction> Após uma chamada para <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, mas antes de uma chamada para <xref:System.Messaging.MessageQueueTransaction.Commit%2A>ou <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, o estado é `Pending`.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "Um do <xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;> </xref> valores que indica se a transação foi consolidada, abortado, inicializado, ou está pendente."
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
