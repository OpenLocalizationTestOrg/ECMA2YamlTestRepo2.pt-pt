### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  id: PeerCollaborationPermission
  children:
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml
  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PeerCollaborationPermission
  nameWithType: PeerCollaborationPermission
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  type: Class
  summary: "Specifies the values that define or are used in <see cref=&quot;N:System.Net.PeerToPeer.Collaboration&quot;></see> object permissions."
  remarks: "The default <xref:System.Security.Permissions> allow all local and Intranet zone applications to access collaboration services, and no permission is granted for Internet zone applications. In other words, if the default permissions are not changed, all link-local and site-local applications have access to Peer-To-Peer collaboration services, but global applications have no access.       This class is not derivable."
  syntax:
    content: 'public sealed class PeerCollaborationPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: PeerCollaborationPermission(PermissionState)
  nameWithType: PeerCollaborationPermission.PeerCollaborationPermission(PermissionState)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.PeerCollaborationPermission(PermissionState)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see>. The initial <see cref=&quot;T:System.Security.Permissions.PermissionState&quot;></see> for this instance is passed when the constructor is called."
  remarks: "Instances of this type either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.       If state is <xref:System.Security.Permissions.PermissionState>, the <xref:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission> instance passes all demands. If state contains any other value, the <xref:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission> instance fails all demands."
  syntax:
    content: public PeerCollaborationPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the values in the  enumeration."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy
  id: Copy
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PeerCollaborationPermission.Copy()
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Creates and returns a copy of the current <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see>."
  remarks: "A copy of a <xref:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission> instance grants the same access to resources as the original permission."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "To be added."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PeerCollaborationPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Represents the XML object model for encoding security objects."
  remarks: "This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.       This class cannot be inherited."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "The XML encoding to use to reconstruct the permission."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-   The parameter is not a valid permission element.      -   The parameter does not contain a valid type or class.      -   The parameter&quot;s version number is not supported."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The parameter is a  reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PeerCollaborationPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Creates and returns a permission that is the intersection of the current <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see> and the specified <span class=&quot;paramref&quot;>target</span> permission."
  remarks: "The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       The following statements are required to be `true` for all implementations of the Intersect method. X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (`Nothing` in Visual Basic).      -   X.Intersect(X) returns a value equal to X.      -   X.Intersect(Y) returns the same value as Y.Intersect(X).      -   X.Intersect(a `null` reference) returns a `null` reference."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Permission to Intersect with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "To be added."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The target parameter is not a  reference ( in Visual Basic) and is not an instance of the same class as the current permission."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PeerCollaborationPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Determines whether the current <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see> is a subset of the specified <span class=&quot;paramref&quot;>target</span> permission."
  remarks: "The current <xref:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.IsSubsetOf(X) returns `true`.  \n  \n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \n  \n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \n  \n If X represents an empty [IPermission](http://go.microsoft.com/fwlink?LinkID=98303) object with a permission state of None and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union%2A> of two empty permissions is an empty permission."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The parameter is a  reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PeerCollaborationPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Returns a value specifying whether the current <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see> is unrestricted."
  remarks: "An unrestricted permission represents access to any and all resources protected by the permission."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml
  id: ToXml
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PeerCollaborationPermission.ToXml()
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Creates an XML encoding of the <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see> and its current state."
  remarks: "In general, permission class methods are used by the infrastructure and are not intended for use in applications."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "To be added."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PeerCollaborationPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer.Collaboration
  summary: "Creates a permission that is the union of the current <see cref=&quot;T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission&quot;></see> and the specified <span class=&quot;paramref&quot;>target</span> permission."
  remarks: "The result of a call to Union is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission> and the specified permission. Any demand that passes either permission passes their union.       The following statements are required to be `true` for all implementations of the Union method. X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).      -   X.Union(X) returns an object that has the same value as X.      -   X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).      -   X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to combine with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "To be added."
  overload: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The parameter is a  reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: PeerCollaborationPermission(PermissionState)
  nameWithType: PeerCollaborationPermission.PeerCollaborationPermission(PermissionState)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.PeerCollaborationPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: Copy()
  nameWithType: PeerCollaborationPermission.Copy()
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PeerCollaborationPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PeerCollaborationPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(IPermission)
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PeerCollaborationPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PeerCollaborationPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted()
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: ToXml()
  nameWithType: PeerCollaborationPermission.ToXml()
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml()
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PeerCollaborationPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(IPermission)
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: PeerCollaborationPermission
  nameWithType: PeerCollaborationPermission.PeerCollaborationPermission
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: Copy
  nameWithType: PeerCollaborationPermission.Copy
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: FromXml
  nameWithType: PeerCollaborationPermission.FromXml
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: Intersect
  nameWithType: PeerCollaborationPermission.Intersect
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PeerCollaborationPermission.IsSubsetOf
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PeerCollaborationPermission.IsUnrestricted
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: ToXml
  nameWithType: PeerCollaborationPermission.ToXml
- uid: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union*
  parent: System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission
  isExternal: false
  name: Union
  nameWithType: PeerCollaborationPermission.Union
