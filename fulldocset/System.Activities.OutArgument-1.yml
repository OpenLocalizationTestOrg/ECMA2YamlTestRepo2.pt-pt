### YamlMime:ManagedReference
items:
- uid: System.Activities.OutArgument`1
  id: OutArgument`1
  children:
  - System.Activities.OutArgument`1.#ctor
  - System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})
  - System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)
  - System.Activities.OutArgument`1.#ctor(System.Activities.Variable)
  - System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})
  - System.Activities.OutArgument`1.Expression
  - System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)
  - System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})
  - System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)
  - System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)
  - System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)
  - System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})
  - System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)
  - System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)
  - System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)
  langs:
  - csharp
  name: OutArgument<T>
  nameWithType: OutArgument<T>
  fullName: System.Activities.OutArgument<T>
  type: Class
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Activities.XamlIntegration.OutArgumentConverter))]

      [System.Windows.Markup.ContentProperty("Expression")]

      [System.Windows.Markup.ValueSerializer(typeof(System.Activities.XamlIntegration.ArgumentValueSerializer))]

      public sealed class OutArgument<T> : System.Activities.OutArgument
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.Object
  - System.Activities.Argument
  - System.Activities.OutArgument
  implements: []
  inheritedMembers:
  - System.Activities.Argument.ArgumentType
  - System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)
  - System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)
  - System.Activities.Argument.Direction
  - System.Activities.Argument.EvaluationOrder
  - System.Activities.Argument.Get``1(System.Activities.ActivityContext)
  - System.Activities.Argument.ResultValue
  - System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)
  - System.Activities.Argument.UnspecifiedEvaluationOrder
  - System.Activities.OutArgument.CreateReference(System.Activities.InOutArgument,System.String)
  - System.Activities.OutArgument.CreateReference(System.Activities.OutArgument,System.String)
  platform:
  - net462
- uid: System.Activities.OutArgument`1.#ctor
  id: '#ctor'
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: OutArgument()
  nameWithType: OutArgument<T>.OutArgument()
  fullName: System.Activities.OutArgument<T>.OutArgument()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public OutArgument ();
    parameters: []
  overload: System.Activities.OutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})
  id: '#ctor(System.Activities.Activity{System.Activities.Location{`0}})'
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: OutArgument(Activity<Location<T>>)
  nameWithType: OutArgument<T>.OutArgument(Activity<Location<T>>)
  fullName: System.Activities.OutArgument<T>.OutArgument(Activity<Location<T>>)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public OutArgument (System.Activities.Activity<System.Activities.Location<T>> expression);
    parameters:
    - id: expression
      type: System.Activities.Activity{System.Activities.Location{T}}
      description: "To be added."
  overload: System.Activities.OutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)
  id: '#ctor(System.Activities.DelegateArgument)'
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: OutArgument(DelegateArgument)
  nameWithType: OutArgument<T>.OutArgument(DelegateArgument)
  fullName: System.Activities.OutArgument<T>.OutArgument(DelegateArgument)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public OutArgument (System.Activities.DelegateArgument delegateArgument);
    parameters:
    - id: delegateArgument
      type: System.Activities.DelegateArgument
      description: "To be added."
  overload: System.Activities.OutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.#ctor(System.Activities.Variable)
  id: '#ctor(System.Activities.Variable)'
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: OutArgument(Variable)
  nameWithType: OutArgument<T>.OutArgument(Variable)
  fullName: System.Activities.OutArgument<T>.OutArgument(Variable)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public OutArgument (System.Activities.Variable variable);
    parameters:
    - id: variable
      type: System.Activities.Variable
      description: "To be added."
  overload: System.Activities.OutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})'
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: OutArgument(Expression<Func<ActivityContext,T>>)
  nameWithType: OutArgument<T>.OutArgument(Expression<Func<ActivityContext,T>>)
  fullName: System.Activities.OutArgument<T>.OutArgument(Expression<Func<ActivityContext,T>>)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public OutArgument (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,T>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,T}}
      description: "To be added."
  overload: System.Activities.OutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.Expression
  id: Expression
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: Expression
  nameWithType: OutArgument<T>.Expression
  fullName: System.Activities.OutArgument<T>.Expression
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public System.Activities.Activity<System.Activities.Location<T>> Expression { get; set; }
    return:
      type: System.Activities.Activity{System.Activities.Location{T}}
      description: "To be added."
  overload: System.Activities.OutArgument`1.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)
  id: FromDelegateArgument(System.Activities.DelegateArgument)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: FromDelegateArgument(DelegateArgument)
  nameWithType: OutArgument<T>.FromDelegateArgument(DelegateArgument)
  fullName: System.Activities.OutArgument<T>.FromDelegateArgument(DelegateArgument)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static System.Activities.OutArgument<T> FromDelegateArgument (System.Activities.DelegateArgument delegateArgument);
    parameters:
    - id: delegateArgument
      type: System.Activities.DelegateArgument
      description: "To be added."
    return:
      type: System.Activities.OutArgument`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.FromDelegateArgument*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})
  id: FromExpression(System.Activities.Activity{System.Activities.Location{`0}})
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: FromExpression(Activity<Location<T>>)
  nameWithType: OutArgument<T>.FromExpression(Activity<Location<T>>)
  fullName: System.Activities.OutArgument<T>.FromExpression(Activity<Location<T>>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static System.Activities.OutArgument<T> FromExpression (System.Activities.Activity<System.Activities.Location<T>> expression);
    parameters:
    - id: expression
      type: System.Activities.Activity{System.Activities.Location{T}}
      description: "To be added."
    return:
      type: System.Activities.OutArgument`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.FromExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)
  id: FromVariable(System.Activities.Variable)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: FromVariable(Variable)
  nameWithType: OutArgument<T>.FromVariable(Variable)
  fullName: System.Activities.OutArgument<T>.FromVariable(Variable)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static System.Activities.OutArgument<T> FromVariable (System.Activities.Variable variable);
    parameters:
    - id: variable
      type: System.Activities.Variable
      description: "To be added."
    return:
      type: System.Activities.OutArgument`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.FromVariable*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)
  id: Get(System.Activities.ActivityContext)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: Get(ActivityContext)
  nameWithType: OutArgument<T>.Get(ActivityContext)
  fullName: System.Activities.OutArgument<T>.Get(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public T Get (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "To be added."
    return:
      type: T
      description: "To be added."
  overload: System.Activities.OutArgument`1.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)
  id: GetLocation(System.Activities.ActivityContext)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: GetLocation(ActivityContext)
  nameWithType: OutArgument<T>.GetLocation(ActivityContext)
  fullName: System.Activities.OutArgument<T>.GetLocation(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public System.Activities.Location<T> GetLocation (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "To be added."
    return:
      type: System.Activities.Location`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.GetLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})
  id: op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: op_Implicit(Activity<Location<T>>)
  nameWithType: OutArgument<T>.op_Implicit(Activity<Location<T>>)
  fullName: System.Activities.OutArgument<T>.op_Implicit(Activity<Location<T>>)
  type: Operator
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static System.Activities.OutArgument<T> op_Implicit (System.Activities.Activity<System.Activities.Location<T>> expression);
    parameters:
    - id: expression
      type: System.Activities.Activity{System.Activities.Location{T}}
      description: "To be added."
    return:
      type: System.Activities.OutArgument`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)
  id: op_Implicit(System.Activities.DelegateArgument)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: op_Implicit(DelegateArgument)
  nameWithType: OutArgument<T>.op_Implicit(DelegateArgument)
  fullName: System.Activities.OutArgument<T>.op_Implicit(DelegateArgument)
  type: Operator
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static System.Activities.OutArgument<T> op_Implicit (System.Activities.DelegateArgument delegateArgument);
    parameters:
    - id: delegateArgument
      type: System.Activities.DelegateArgument
      description: "To be added."
    return:
      type: System.Activities.OutArgument`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)
  id: op_Implicit(System.Activities.Variable)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: op_Implicit(Variable)
  nameWithType: OutArgument<T>.op_Implicit(Variable)
  fullName: System.Activities.OutArgument<T>.op_Implicit(Variable)
  type: Operator
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static System.Activities.OutArgument<T> op_Implicit (System.Activities.Variable variable);
    parameters:
    - id: variable
      type: System.Activities.Variable
      description: "To be added."
    return:
      type: System.Activities.OutArgument`1
      description: "To be added."
  overload: System.Activities.OutArgument`1.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)
  id: Set(System.Activities.ActivityContext,`0)
  parent: System.Activities.OutArgument`1
  langs:
  - csharp
  name: Set(ActivityContext,T)
  nameWithType: OutArgument<T>.Set(ActivityContext,T)
  fullName: System.Activities.OutArgument<T>.Set(ActivityContext,T)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public void Set (System.Activities.ActivityContext context, T value);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "To be added."
    - id: value
      type: T
      description: "To be added."
  overload: System.Activities.OutArgument`1.Set*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.OutArgument
  isExternal: false
  name: System.Activities.OutArgument
- uid: System.Activities.OutArgument`1.#ctor
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: OutArgument()
  nameWithType: OutArgument<T>.OutArgument()
  fullName: System.Activities.OutArgument<T>.OutArgument()
- uid: System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: OutArgument(Activity<Location<T>>)
  nameWithType: OutArgument<T>.OutArgument(Activity<Location<T>>)
  fullName: System.Activities.OutArgument<T>.OutArgument(Activity<Location<T>>)
- uid: System.Activities.Activity{System.Activities.Location{T}}
  parent: System.Activities
  isExternal: false
  name: Activity<Location<T>>
  nameWithType: Activity<Location<T>>
  fullName: System.Activities.Activity<System.Activities.Location<T>>
  spec.csharp:
  - uid: System.Activities.Activity`1
    name: Activity
    nameWithType: Activity
    fullName: Activity<System.Activities.Location<T>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Location`1
    name: Location
    nameWithType: Location
    fullName: Location<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: OutArgument(DelegateArgument)
  nameWithType: OutArgument<T>.OutArgument(DelegateArgument)
  fullName: System.Activities.OutArgument<T>.OutArgument(DelegateArgument)
- uid: System.Activities.DelegateArgument
  parent: System.Activities
  isExternal: false
  name: DelegateArgument
  nameWithType: DelegateArgument
  fullName: System.Activities.DelegateArgument
- uid: System.Activities.OutArgument`1.#ctor(System.Activities.Variable)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: OutArgument(Variable)
  nameWithType: OutArgument<T>.OutArgument(Variable)
  fullName: System.Activities.OutArgument<T>.OutArgument(Variable)
- uid: System.Activities.Variable
  parent: System.Activities
  isExternal: false
  name: Variable
  nameWithType: Variable
  fullName: System.Activities.Variable
- uid: System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: OutArgument(Expression<Func<ActivityContext,T>>)
  nameWithType: OutArgument<T>.OutArgument(Expression<Func<ActivityContext,T>>)
  fullName: System.Activities.OutArgument<T>.OutArgument(Expression<Func<ActivityContext,T>>)
- uid: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,T}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<ActivityContext,T>>
  nameWithType: Expression<Func<ActivityContext,T>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Activities.ActivityContext,T>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<System.Activities.ActivityContext,T>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Activities.ActivityContext,T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.ActivityContext
    name: ActivityContext
    nameWithType: ActivityContext
    fullName: ActivityContext
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.OutArgument`1.Expression
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: Expression
  nameWithType: OutArgument<T>.Expression
  fullName: System.Activities.OutArgument<T>.Expression
- uid: System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: FromDelegateArgument(DelegateArgument)
  nameWithType: OutArgument<T>.FromDelegateArgument(DelegateArgument)
  fullName: System.Activities.OutArgument<T>.FromDelegateArgument(DelegateArgument)
- uid: System.Activities.OutArgument`1
  parent: System.Activities
  isExternal: false
  name: OutArgument<T>
  nameWithType: OutArgument<T>
  fullName: System.Activities.OutArgument<T>
- uid: System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: FromExpression(Activity<Location<T>>)
  nameWithType: OutArgument<T>.FromExpression(Activity<Location<T>>)
  fullName: System.Activities.OutArgument<T>.FromExpression(Activity<Location<T>>)
- uid: System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: FromVariable(Variable)
  nameWithType: OutArgument<T>.FromVariable(Variable)
  fullName: System.Activities.OutArgument<T>.FromVariable(Variable)
- uid: System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: Get(ActivityContext)
  nameWithType: OutArgument<T>.Get(ActivityContext)
  fullName: System.Activities.OutArgument<T>.Get(ActivityContext)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Activities.ActivityContext
  parent: System.Activities
  isExternal: false
  name: ActivityContext
  nameWithType: ActivityContext
  fullName: System.Activities.ActivityContext
- uid: System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: GetLocation(ActivityContext)
  nameWithType: OutArgument<T>.GetLocation(ActivityContext)
  fullName: System.Activities.OutArgument<T>.GetLocation(ActivityContext)
- uid: System.Activities.Location`1
  parent: System.Activities
  isExternal: false
  name: Location<T>
  nameWithType: Location<T>
  fullName: System.Activities.Location<T>
- uid: System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: op_Implicit(Activity<Location<T>>)
  nameWithType: OutArgument<T>.op_Implicit(Activity<Location<T>>)
  fullName: System.Activities.OutArgument<T>.op_Implicit(Activity<Location<T>>)
- uid: System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: op_Implicit(DelegateArgument)
  nameWithType: OutArgument<T>.op_Implicit(DelegateArgument)
  fullName: System.Activities.OutArgument<T>.op_Implicit(DelegateArgument)
- uid: System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: op_Implicit(Variable)
  nameWithType: OutArgument<T>.op_Implicit(Variable)
  fullName: System.Activities.OutArgument<T>.op_Implicit(Variable)
- uid: System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: Set(ActivityContext,T)
  nameWithType: OutArgument<T>.Set(ActivityContext,T)
  fullName: System.Activities.OutArgument<T>.Set(ActivityContext,T)
- uid: System.Activities.OutArgument`1.#ctor*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: OutArgument<T>
  nameWithType: OutArgument<T>.OutArgument<T>
- uid: System.Activities.OutArgument`1.Expression*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: Expression
  nameWithType: OutArgument<T>.Expression
- uid: System.Activities.OutArgument`1.FromDelegateArgument*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: FromDelegateArgument
  nameWithType: OutArgument<T>.FromDelegateArgument
- uid: System.Activities.OutArgument`1.FromExpression*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: FromExpression
  nameWithType: OutArgument<T>.FromExpression
- uid: System.Activities.OutArgument`1.FromVariable*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: FromVariable
  nameWithType: OutArgument<T>.FromVariable
- uid: System.Activities.OutArgument`1.Get*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: Get
  nameWithType: OutArgument<T>.Get
- uid: System.Activities.OutArgument`1.GetLocation*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: GetLocation
  nameWithType: OutArgument<T>.GetLocation
- uid: System.Activities.OutArgument`1.op_Implicit*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: op_Implicit
  nameWithType: OutArgument<T>.op_Implicit
- uid: System.Activities.OutArgument`1.Set*
  parent: System.Activities.OutArgument`1
  isExternal: false
  name: Set
  nameWithType: OutArgument<T>.Set
