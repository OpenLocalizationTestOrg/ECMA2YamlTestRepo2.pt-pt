### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.Internal.Publish
  id: Publish
  children:
  - System.EnterpriseServices.Internal.Publish.#ctor
  - System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)
  - System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)
  - System.EnterpriseServices.Internal.Publish.GacInstall(System.String)
  - System.EnterpriseServices.Internal.Publish.GacRemove(System.String)
  - System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)
  - System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)
  - System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)
  - System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)
  - System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)
  - System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)
  langs:
  - csharp
  name: Publish
  nameWithType: Publish
  fullName: System.EnterpriseServices.Internal.Publish
  type: Class
  summary: "Publishes COM interfaces for SOAP-enabled COM+ applications."
  remarks: "Publish is used internally by the .NET Framework. You do not need to use it directly in your code."
  syntax:
    content: >-
      [System.Runtime.InteropServices.Guid("d8013eef-730b-45e2-ba24-874b7242c425")]

      public class Publish : System.EnterpriseServices.Internal.IComSoapPublisher
  inheritance:
  - System.Object
  implements:
  - System.EnterpriseServices.Internal.IComSoapPublisher
  inheritedMembers: []
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.#ctor
  id: '#ctor'
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: Publish()
  nameWithType: Publish.Publish()
  fullName: System.EnterpriseServices.Internal.Publish.Publish()
  type: Constructor
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Initializes a new instance of the <xref href=&quot;System.EnterpriseServices.Internal.Publish&quot;></xref> class."
  syntax:
    content: public Publish ();
    parameters: []
  overload: System.EnterpriseServices.Internal.Publish.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  id: CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: CreateMailBox(String,String,String,String,String,String)
  nameWithType: Publish.CreateMailBox(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.CreateMailBox(String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Creates a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented."
  remarks: "Not fully implemented; does not create a mailbox. Returns the error message &quot;COM+ SOAP services SMTP publication is not supported.&quot;"
  syntax:
    content: public void CreateMailBox (string RootMailServer, string MailBox, out string SmtpName, out string Domain, out string PhysicalPath, out string Error);
    parameters:
    - id: RootMailServer
      type: System.String
      description: "The URL for the root mail server."
    - id: MailBox
      type: System.String
      description: "The mailbox to create."
    - id: SmtpName
      type: System.String
      description: "When this method returns, this parameter contains the name of the Simple Mail Transfer Protocol (SMTP) server containing the mailbox."
    - id: Domain
      type: System.String
      description: "When this method returns, this parameter contains the domain of the SMTP server."
    - id: PhysicalPath
      type: System.String
      description: "When this method returns, this parameter contains the file system path for the mailbox."
    - id: Error
      type: System.String
      description: "When this method returns, this parameter contains an error message if a problem was encountered."
  overload: System.EnterpriseServices.Internal.Publish.CreateMailBox*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  id: CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: CreateVirtualRoot(String,String,String,String,String,String)
  nameWithType: Publish.CreateVirtualRoot(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Creates a SOAP-enabled COM+ application virtual root."
  remarks: "It is recommended that <xref:System.EnterpriseServices.Internal.SoapServerVRoot.CreateVirtualRootEx%2A> be used instead of CreateVirtualRoot."
  syntax:
    content: public void CreateVirtualRoot (string Operation, string FullUrl, out string BaseUrl, out string VirtualRoot, out string PhysicalPath, out string Error);
    parameters:
    - id: Operation
      type: System.String
      description: "The operation to perform."
    - id: FullUrl
      type: System.String
      description: "The complete URL address for the virtual root."
    - id: BaseUrl
      type: System.String
      description: "When this method returns, this parameter contains the base URL address."
    - id: VirtualRoot
      type: System.String
      description: "When this method returns, this parameter contains the name of the virtual root."
    - id: PhysicalPath
      type: System.String
      description: "When this method returns, this parameter contains the file path for the virtual root."
    - id: Error
      type: System.String
      description: "When this method returns, this parameter contains an error message if a problem was encountered."
  overload: System.EnterpriseServices.Internal.Publish.CreateVirtualRoot*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code.       -or-       The caller does not have permission to access DNS information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>FullUrl</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error is encountered when resolving the local host name."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>FullUrl</code> is empty.       -or-       The scheme specified in <code>FullUrl</code> is invalid.       -or-       <code>FullUrl</code> contains more than two consecutive slashes.       -or-       The password specified in <code>FullUrl</code> is invalid.       -or-       The host name specified in <code>FullUrl</code> is invalid.       -or-       The file name specified in <code>FullUrl</code> is invalid."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)
  id: DeleteMailBox(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: DeleteMailBox(String,String,String)
  nameWithType: Publish.DeleteMailBox(String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.DeleteMailBox(String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Deletes a SOAP-enabled COM+ application mailbox at a specified URL. Not fully implemented."
  remarks: "Not fully implemented, does not delete the mailbox. Returns the error message &quot;COM+ SOAP services SMTP publication is not supported.&quot;"
  syntax:
    content: public void DeleteMailBox (string RootMailServer, string MailBox, out string Error);
    parameters:
    - id: RootMailServer
      type: System.String
      description: "The URL for the root mail server."
    - id: MailBox
      type: System.String
      description: "The mailbox to delete."
    - id: Error
      type: System.String
      description: "When this method returns, this parameter contains an error message if a problem was encountered."
  overload: System.EnterpriseServices.Internal.Publish.DeleteMailBox*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)
  id: DeleteVirtualRoot(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: DeleteVirtualRoot(String,String,String)
  nameWithType: Publish.DeleteVirtualRoot(String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Deletes a SOAP-enabled COM+ application virtual root. Not fully implemented."
  remarks: "The functionality for DeleteVirtualRoot is not yet available.      > [!CAUTION] >  The method currently returns without an error, but the virtual root is not deleted.       When the functionality becomes available, the recommended method will be <xref:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx%2A>."
  syntax:
    content: public void DeleteVirtualRoot (string RootWebServer, string FullUrl, out string Error);
    parameters:
    - id: RootWebServer
      type: System.String
      description: "The root Web server."
    - id: FullUrl
      type: System.String
      description: "The complete URL address for the virtual root."
    - id: Error
      type: System.String
      description: "When this method returns, this parameter contains an error message if a problem was encountered."
  overload: System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.GacInstall(System.String)
  id: GacInstall(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: GacInstall(String)
  nameWithType: Publish.GacInstall(String)
  fullName: System.EnterpriseServices.Internal.Publish.GacInstall(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Installs an assembly in the global assembly cache."
  syntax:
    content: public void GacInstall (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "The file system path for the assembly."
  overload: System.EnterpriseServices.Internal.Publish.GacInstall*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.GacRemove(System.String)
  id: GacRemove(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: GacRemove(String)
  nameWithType: Publish.GacRemove(String)
  fullName: System.EnterpriseServices.Internal.Publish.GacRemove(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Removes an assembly from the global assembly cache."
  syntax:
    content: public void GacRemove (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "The file system path for the assembly."
  overload: System.EnterpriseServices.Internal.Publish.GacRemove*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code.       -or-       The caller does not have path discovery permission."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>AssemblyPath</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>AssemblyPath</code> is empty."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>AssemblyPath</code> is not found."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>AssemblyPath</code> is not a valid assembly."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)
  id: GetAssemblyNameForCache(System.String,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: GetAssemblyNameForCache(String,String)
  nameWithType: Publish.GetAssemblyNameForCache(String,String)
  fullName: System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Returns the full path for a strong-named signed generated assembly in the SoapCache directory."
  remarks: "For an unmanaged COM+ component to be published through .NET remoting as a SOAP endpoint, a proxy needs to be generated to make the unmanaged components available to the .NET Framework. This is done by programmatically performing the same steps as Type Library Importer (Tlbimp.exe), the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)] tool that is used to convert unmanaged COM+ type libraries to proxy metadata assemblies. For client activation over SOAP to succeed, however, client and server machines must share the same strong-named signed metadata proxies. For this reason, when a managed proxy assembly is generated for an unmanaged COM+ component, a strong name key is also generated and used to sign the proxy assembly."
  syntax:
    content: public void GetAssemblyNameForCache (string TypeLibPath, out string CachePath);
    parameters:
    - id: TypeLibPath
      type: System.String
      description: "The path for the file that contains the typelib."
    - id: CachePath
      type: System.String
      description: "When this method returns, this parameter contains the name of the SoapCache directory."
  overload: System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>TypeLibPath</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The file name is empty, contains only white spaces, or contains invalid characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Access to <code>TypeLibPath</code> is denied."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>TypeLibPath</code> contains a colon (:) in the middle of the string."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)
  id: GetClientPhysicalPath(System.Boolean)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: GetClientPhysicalPath(Boolean)
  nameWithType: Publish.GetClientPhysicalPath(Boolean)
  fullName: System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(Boolean)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Returns the path for the directory for storing client configuration files."
  remarks: "Creates the directories &quot;\\com\\SOAPAssembly\\&quot; under the system directory."
  syntax:
    content: public static string GetClientPhysicalPath (bool CreateDir);
    parameters:
    - id: CreateDir
      type: System.Boolean
      description: "Set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create the directory, or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to return the path but not create the directory."
    return:
      type: System.String
      description: "The path for the directory to contain the configuration files."
  overload: System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)
  id: GetTypeNameFromProgId(System.String,System.String)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: GetTypeNameFromProgId(String,String)
  nameWithType: Publish.GetTypeNameFromProgId(String,String)
  fullName: System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Reflects over an assembly and returns the type name that matches the ProgID."
  syntax:
    content: public string GetTypeNameFromProgId (string AssemblyPath, string ProgId);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "The file system path for the assembly."
    - id: ProgId
      type: System.String
      description: "The programmatic identifier of the class."
    return:
      type: System.String
      description: "The type name that matches the ProgID."
  overload: System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)
  id: ParseUrl(System.String,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: ParseUrl(String,String,String)
  nameWithType: Publish.ParseUrl(String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.ParseUrl(String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Parses a URL and returns the base URL and virtual root portions."
  syntax:
    content: public static void ParseUrl (string FullUrl, out string BaseUrl, out string VirtualRoot);
    parameters:
    - id: FullUrl
      type: System.String
      description: "The complete URL address for the virtual root."
    - id: BaseUrl
      type: System.String
      description: "When this method returns, this parameter contains the base URL address."
    - id: VirtualRoot
      type: System.String
      description: "When this method returns, this parameter contains the name of the virtual root."
  overload: System.EnterpriseServices.Internal.Publish.ParseUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>FullUrl</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error is encountered when resolving the local host name."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have permission to access DNS information."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>FullUrl</code> is empty.       -or-       The scheme specified in <code>FullUrl</code> is invalid.       -or-       <code>FullUrl</code> contains too many slashes.       -or-       The password specified in <code>FullUrl</code> is invalid.       -or-       The host name specified in <code>FullUrl</code> is invalid.       -or-       The file name specified in <code>FullUrl</code> is invalid."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  id: ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  nameWithType: Publish.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Processes a client type library, creating a configuration file on the client."
  remarks: "This method is used on a client proxy import to generate a remoting configuration file.       If the `Mode` parameter is either &quot;wellknownobject&quot; or an empty string (&quot;&quot;), a well-known object is assumed; otherwise, client activation is assumed.       It is recommended that <xref:System.EnterpriseServices.Internal.SoapClientImport.ProcessClientTlbEx%2A> be used instead of ProcessClientTlb."
  syntax:
    content: public void ProcessClientTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, out string AssemblyName, out string TypeName, out string Error);
    parameters:
    - id: ProgId
      type: System.String
      description: "The programmatic identifier of the class."
    - id: SrcTlbPath
      type: System.String
      description: "The path for the file that contains the typelib."
    - id: PhysicalPath
      type: System.String
      description: "The Web application directory."
    - id: VRoot
      type: System.String
      description: "The name of the virtual root."
    - id: BaseUrl
      type: System.String
      description: "The base URL that contains the virtual root."
    - id: Mode
      type: System.String
      description: "The activation mode."
    - id: Transport
      type: System.String
      description: "Not used. Specify <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> for this parameter."
    - id: AssemblyName
      type: System.String
      description: "When this method returns, this parameter contains the display name of the assembly."
    - id: TypeName
      type: System.String
      description: "When this method returns, this parameter contains the fully-qualified type name of the assembly."
    - id: Error
      type: System.String
      description: "When this method returns, this parameter contains an error message if a problem was encountered."
  overload: System.EnterpriseServices.Internal.Publish.ProcessClientTlb*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  id: ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: ProcessServerTlb(String,String,String,String,String,String,String)
  nameWithType: Publish.ProcessServerTlb(String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.ProcessServerTlb(String,String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Processes a server type library, either adding or deleting component entries to the Web.config and Default.disco files. Generates a proxy if necessary."
  remarks: "ProcessServerTlb adds an entry to the discovery file and the web.config file for the components in the typelib, and either generates or copies a proxy to the bin directory for unmanaged components. If `Operation` equals &quot;delete,&quot; then the component entries are removed from the Web.config and Default.disco files.       It is recommended that <xref:System.EnterpriseServices.Internal.SoapServerTlb.AddServerTlb%2A> and <xref:System.EnterpriseServices.Internal.SoapServerTlb.DeleteServerTlb%2A> be used instead of ProcessServerTlb."
  syntax:
    content: public void ProcessServerTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, out string strAssemblyName, out string TypeName, out string Error);
    parameters:
    - id: ProgId
      type: System.String
      description: "The programmatic identifier of the class."
    - id: SrcTlbPath
      type: System.String
      description: "The path for the file that contains the type library."
    - id: PhysicalPath
      type: System.String
      description: "The Web application directory."
    - id: Operation
      type: System.String
      description: "The operation to perform."
    - id: strAssemblyName
      type: System.String
      description: "When this method returns, this parameter contains the display name of the assembly."
    - id: TypeName
      type: System.String
      description: "When this method returns, this parameter contains the fully-qualified type name of the assembly."
    - id: Error
      type: System.String
      description: "When this method returns, this parameter contains an error message if a problem was encountered."
  overload: System.EnterpriseServices.Internal.Publish.ProcessServerTlb*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code."
  - type: System.EnterpriseServices.ServicedComponentException
    commentId: T:System.EnterpriseServices.ServicedComponentException
    description: "The <code>SrcTlbPath</code> parameter referenced scrobj.dll; therefore, SOAP publication of script components is not supported."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)
  id: RegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: RegisterAssembly(String)
  nameWithType: Publish.RegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.Publish.RegisterAssembly(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Registers an assembly for COM interop."
  remarks: "RegisterAssembly uses the Assembly Registration tool (Regasm.exe) to register the creatable classes in the assembly. For more information, see [Regasm.exe (Assembly Registration Tool)](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void RegisterAssembly (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "The file system path for the assembly."
  overload: System.EnterpriseServices.Internal.Publish.RegisterAssembly*
  exceptions:
  - type: System.EnterpriseServices.RegistrationException
    commentId: T:System.EnterpriseServices.RegistrationException
    description: "The input assembly does not have a strong name."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code.       -or-       A codebase that does not start with &quot;file://&quot; was specified without the required <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>AssemblyPath</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>AssemblyPath</code> is not found, or a filename extension is not specified."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>AssemblyPath</code> is not a valid assembly."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A method marked with <xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref> is not <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>.       -or-       There is more than one method marked with <xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref> at a given level of the hierarchy.       -or-       The signature of the method marked with <xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref> is not valid."
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)
  id: UnRegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  langs:
  - csharp
  name: UnRegisterAssembly(String)
  nameWithType: Publish.UnRegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "Unregisters a COM interop assembly."
  remarks: "UnRegisterAssembly uses Regasm.exe to unregister the creatable classes in the assembly. For more information, see [Regasm.exe (Assembly Registration Tool)](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void UnRegisterAssembly (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "The file system path for the assembly."
  overload: System.EnterpriseServices.Internal.Publish.UnRegisterAssembly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller in the call chain does not have permission to access unmanaged code.       -or-       A codebase that does not start with &quot;file://&quot; was specified without the required <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>AssemblyPath</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>AssemblyPath</code> is not found, or a file name extension is not specified."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>AssemblyPath</code> is not a valid assembly."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A method marked with <xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref> is not <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>.       -or-       There is more than one method marked with <xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref> at a given level of the hierarchy.       -or-       The signature of the method marked with <xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref> is not valid."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.FileLoadException
  isExternal: true
  name: System.IO.FileLoadException
- uid: System.BadImageFormatException
  isExternal: true
  name: System.BadImageFormatException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.EnterpriseServices.ServicedComponentException
  parent: System.EnterpriseServices
  isExternal: false
  name: ServicedComponentException
  nameWithType: ServicedComponentException
  fullName: System.EnterpriseServices.ServicedComponentException
- uid: System.EnterpriseServices.RegistrationException
  parent: System.EnterpriseServices
  isExternal: false
  name: RegistrationException
  nameWithType: RegistrationException
  fullName: System.EnterpriseServices.RegistrationException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.EnterpriseServices.Internal.Publish.#ctor
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: Publish()
  nameWithType: Publish.Publish()
  fullName: System.EnterpriseServices.Internal.Publish.Publish()
- uid: System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: CreateMailBox(String,String,String,String,String,String)
  nameWithType: Publish.CreateMailBox(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.CreateMailBox(String,String,String,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: CreateVirtualRoot(String,String,String,String,String,String)
  nameWithType: Publish.CreateVirtualRoot(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(String,String,String,String,String,String)
- uid: System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: DeleteMailBox(String,String,String)
  nameWithType: Publish.DeleteMailBox(String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.DeleteMailBox(String,String,String)
- uid: System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: DeleteVirtualRoot(String,String,String)
  nameWithType: Publish.DeleteVirtualRoot(String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(String,String,String)
- uid: System.EnterpriseServices.Internal.Publish.GacInstall(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GacInstall(String)
  nameWithType: Publish.GacInstall(String)
  fullName: System.EnterpriseServices.Internal.Publish.GacInstall(String)
- uid: System.EnterpriseServices.Internal.Publish.GacRemove(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GacRemove(String)
  nameWithType: Publish.GacRemove(String)
  fullName: System.EnterpriseServices.Internal.Publish.GacRemove(String)
- uid: System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GetAssemblyNameForCache(String,String)
  nameWithType: Publish.GetAssemblyNameForCache(String,String)
  fullName: System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(String,String)
- uid: System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GetClientPhysicalPath(Boolean)
  nameWithType: Publish.GetClientPhysicalPath(Boolean)
  fullName: System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GetTypeNameFromProgId(String,String)
  nameWithType: Publish.GetTypeNameFromProgId(String,String)
  fullName: System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(String,String)
- uid: System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: ParseUrl(String,String,String)
  nameWithType: Publish.ParseUrl(String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.ParseUrl(String,String,String)
- uid: System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  nameWithType: Publish.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
- uid: System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: ProcessServerTlb(String,String,String,String,String,String,String)
  nameWithType: Publish.ProcessServerTlb(String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.Publish.ProcessServerTlb(String,String,String,String,String,String,String)
- uid: System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: RegisterAssembly(String)
  nameWithType: Publish.RegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.Publish.RegisterAssembly(String)
- uid: System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: UnRegisterAssembly(String)
  nameWithType: Publish.UnRegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(String)
- uid: System.EnterpriseServices.Internal.Publish.#ctor*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: Publish
  nameWithType: Publish.Publish
- uid: System.EnterpriseServices.Internal.Publish.CreateMailBox*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: CreateMailBox
  nameWithType: Publish.CreateMailBox
- uid: System.EnterpriseServices.Internal.Publish.CreateVirtualRoot*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: CreateVirtualRoot
  nameWithType: Publish.CreateVirtualRoot
- uid: System.EnterpriseServices.Internal.Publish.DeleteMailBox*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: DeleteMailBox
  nameWithType: Publish.DeleteMailBox
- uid: System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: DeleteVirtualRoot
  nameWithType: Publish.DeleteVirtualRoot
- uid: System.EnterpriseServices.Internal.Publish.GacInstall*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GacInstall
  nameWithType: Publish.GacInstall
- uid: System.EnterpriseServices.Internal.Publish.GacRemove*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GacRemove
  nameWithType: Publish.GacRemove
- uid: System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GetAssemblyNameForCache
  nameWithType: Publish.GetAssemblyNameForCache
- uid: System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GetClientPhysicalPath
  nameWithType: Publish.GetClientPhysicalPath
- uid: System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: GetTypeNameFromProgId
  nameWithType: Publish.GetTypeNameFromProgId
- uid: System.EnterpriseServices.Internal.Publish.ParseUrl*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: ParseUrl
  nameWithType: Publish.ParseUrl
- uid: System.EnterpriseServices.Internal.Publish.ProcessClientTlb*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: ProcessClientTlb
  nameWithType: Publish.ProcessClientTlb
- uid: System.EnterpriseServices.Internal.Publish.ProcessServerTlb*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: ProcessServerTlb
  nameWithType: Publish.ProcessServerTlb
- uid: System.EnterpriseServices.Internal.Publish.RegisterAssembly*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: RegisterAssembly
  nameWithType: Publish.RegisterAssembly
- uid: System.EnterpriseServices.Internal.Publish.UnRegisterAssembly*
  parent: System.EnterpriseServices.Internal.Publish
  isExternal: false
  name: UnRegisterAssembly
  nameWithType: Publish.UnRegisterAssembly
