### YamlMime:ManagedReference
items:
- uid: System.Management.MethodDataCollection
  id: MethodDataCollection
  children:
  - System.Management.MethodDataCollection.Add(System.String)
  - System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  - System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  - System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  - System.Management.MethodDataCollection.Count
  - System.Management.MethodDataCollection.GetEnumerator
  - System.Management.MethodDataCollection.IsSynchronized
  - System.Management.MethodDataCollection.Item(System.String)
  - System.Management.MethodDataCollection.Remove(System.String)
  - System.Management.MethodDataCollection.SyncRoot
  - System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: MethodDataCollection
  nameWithType: MethodDataCollection
  fullName: System.Management.MethodDataCollection
  type: Class
  summary: "Representa o conjunto de métodos disponíveis na coleção."
  remarks: ''
  example:
  - "The following example lists information about the **Win32_Process.Create** method using the <xref:System.Management.MethodData> class. For more information on the **Win32_Process** class, see the Windows Management Instrumentation documentation in the MSDN Library at http://msdn.microsoft.com/library.  \n  \n [!code-vb[wminet_MethodDataCollection#1](~/add/codesnippet/visualbasic/t-system.management.meth_1_1.vb)]\n [!code-cs[wminet_MethodDataCollection#1](~/add/codesnippet/csharp/t-system.management.meth_1_1.cs)]"
  syntax:
    content: 'public class MethodDataCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: MethodDataCollection.Add(String)
  fullName: System.Management.MethodDataCollection.Add(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Adds a <xref href=&quot;System.Management.MethodData&quot;></xref> to the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>. Esta sobrecarga de irá adicionar um novo método sem parâmetros para a coleção."
  remarks: "Adicionar <xref:System.Management.MethodData>objetos para o <xref:System.Management.MethodDataCollection>só pode ser efetuada quando a classe não tem nenhuma instância.</xref:System.Management.MethodDataCollection> </xref:System.Management.MethodData> Quaisquer outro caso fará uma exceção.      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Add (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método a adicionar."
  overload: System.Management.MethodDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  id: Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Add(String,ManagementBaseObject,ManagementBaseObject)
  nameWithType: MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
  fullName: System.Management.MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Adds a <xref href=&quot;System.Management.MethodData&quot;></xref> to the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>. Esta sobrecarga de irá adicionar um novo método com os objetos de parâmetro especificado para a coleção."
  remarks: "Adicionar <xref:System.Management.MethodData>objetos para o <xref:System.Management.MethodDataCollection>só pode ser efetuada quando a classe não tem nenhuma instância.</xref:System.Management.MethodDataCollection> </xref:System.Management.MethodData> Quaisquer outro caso fará uma exceção.      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Add (string methodName, System.Management.ManagementBaseObject inParameters, System.Management.ManagementBaseObject outParameters);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método a adicionar."
    - id: inParameters
      type: System.Management.ManagementBaseObject
      description: "O <xref href=&quot;System.Management.ManagementBaseObject&quot;> </xref> que contém os parâmetros de entrada para o método."
    - id: outParameters
      type: System.Management.ManagementBaseObject
      description: "O <xref href=&quot;System.Management.ManagementBaseObject&quot;> </xref> que contém os parâmetros de saída para o método."
  overload: System.Management.MethodDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: MethodDataCollection.CopyTo(Array,Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Copia o <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref> para uma matriz."
  remarks: "##Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "A matriz para o qual pretende copiar a coleção."
    - id: index
      type: System.Int32
      description: "O índice do qual pretende iniciar."
  overload: System.Management.MethodDataCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  id: CopyTo(System.Management.MethodData[],System.Int32)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: CopyTo(MethodData[],Int32)
  nameWithType: MethodDataCollection.CopyTo(MethodData[],Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(MethodData[],Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Copia o <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref> para um especializadas <xref href=&quot;System.Management.MethodData&quot;> </xref> matriz."
  remarks: "##Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void CopyTo (System.Management.MethodData[] methodArray, int index);
    parameters:
    - id: methodArray
      type: System.Management.MethodData[]
      description: "A matriz de destino para o qual pretende copiar o <xref href=&quot;System.Management.MethodData&quot;> </xref> objetos."
    - id: index
      type: System.Int32
      description: "O índice da matriz de destino a partir do qual pretende iniciar a cópia."
  overload: System.Management.MethodDataCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Count
  id: Count
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: System.Management.MethodDataCollection.Count
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Obtém o número de objetos a <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref> coleção."
  remarks: "##O número de objetos no <xref:System.Management.MethodDataCollection>.</xref:System.Management.MethodDataCollection> do valor de propriedade      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Devolve um <xref:System.Int32>valor representa o número de objetos na coleção.</xref:System.Int32>"
  overload: System.Management.MethodDataCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: MethodDataCollection.GetEnumerator()
  fullName: System.Management.MethodDataCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Devolve um enumerador para o <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref>."
  remarks: "Cada chamada para este método devolve um enumerador de nova coleção. Enumeradores vários podem ser obtidos para a mesma coleção de método. No entanto, cada enumerador tira um instantâneo da coleção, pelo que as alterações efetuadas à coleção depois de obtido o enumerador não são refletidas.       Apenas pode voltar (que aparece um Visual Basic .NET `For Each` instrução ou um c# `For` instrução) através de um enumerador apenas de reencaminhamento, uma vez. A memória que contém as instâncias for lançada por WMI para que o enumerador não pode ser rewound. Por conseguinte, o <xref:System.Management.MethodDataCollection.Count%2A>método não pode ser utilizado uma vez que requer rewinding o enumerador.</xref:System.Management.MethodDataCollection.Count%2A>       Enumeradores apenas de reencaminhamento são geralmente muito mais rápidos e utilizam menos memória que enumeradores convencionais, mas não permite chamadas para <xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>.</xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>       Se um enumerador rewindable, os objetos na coleção serão mantidos disponíveis para vários enumerações.      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Management.MethodDataCollection.MethodDataEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Management.MethodDataCollection.MethodDataEnumerator
      description: "Um <xref:System.Collections.IEnumerator>enumerar através da coleção.</xref:System.Collections.IEnumerator>"
  overload: System.Management.MethodDataCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: System.Management.MethodDataCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Obtém um valor que indica se o objeto está sincronizado."
  remarks: "##O valor da propriedade `true` se o objeto é sincronizado; caso contrário, `false`.      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Devolve um <xref:System.Boolean>valor que indica se o objeto está sincronizado.</xref:System.Boolean>"
  overload: System.Management.MethodDataCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: MethodDataCollection.Item(String)
  fullName: System.Management.MethodDataCollection.Item(String)
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Obtém a especificado <xref href=&quot;System.Management.MethodData&quot;> </xref> do <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref>."
  remarks: "##Um valor de propriedade <xref:System.Management.MethodData>que contém todas as informações sobre o método especificado.</xref:System.Management.MethodData>      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual System.Management.MethodData this[string methodName] { get; }
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método pedido."
    return:
      type: System.Management.MethodData
      description: "Devolve um <xref href=&quot;System.Management.MethodData&quot;> </xref> que contém os dados de método para um método da coleção especificado."
  overload: System.Management.MethodDataCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: MethodDataCollection.Remove(String)
  fullName: System.Management.MethodDataCollection.Remove(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Removes a <xref href=&quot;System.Management.MethodData&quot;></xref> from the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>."
  remarks: "Remover <xref:System.Management.MethodData>objetos do <xref:System.Management.MethodDataCollection>só pode ser efetuada quando a classe não tem nenhuma instância.</xref:System.Management.MethodDataCollection> </xref:System.Management.MethodData> Quaisquer outro caso fará uma exceção.      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Remove (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome do método a remover da coleção."
  overload: System.Management.MethodDataCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.SyncRoot
  id: SyncRoot
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: System.Management.MethodDataCollection.SyncRoot
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Obtém o objeto a ser utilizada para sincronização."
  remarks: "##O objeto a ser utilizada para sincronização do valor de propriedade.      ## Confiança de segurança completa do .NET framework para o chamador imediato. Este membro não pode ser utilizado pelo código parcialmente fidedigno. Para obter mais informações, consulte [utilizando bibliotecas do código parcialmente fidedigno](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Devolve um <xref:System.Object>valor que representa o objeto a ser utilizada para sincronização.</xref:System.Object>"
  overload: System.Management.MethodDataCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Devolve um <xref:System.Collections.IEnumerator>que itera através de <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, c#]       O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A> AT isto posicionar, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, tais como adicionar, modificar ou eliminar elementos, o enumerador irrevogavelmente é invalidado e a próxima chamada ou <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>emitir um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>devolve o elemento que está definido, mesmo que o enumerador já é invalidado.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento de segurança de thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Este método é uma operação de O(1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.MethodDataCollection.Add(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add(String)
  nameWithType: MethodDataCollection.Add(String)
  fullName: System.Management.MethodDataCollection.Add(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add(String,ManagementBaseObject,ManagementBaseObject)
  nameWithType: MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
  fullName: System.Management.MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
- uid: System.Management.ManagementBaseObject
  parent: System.Management
  isExternal: false
  name: ManagementBaseObject
  nameWithType: ManagementBaseObject
  fullName: System.Management.ManagementBaseObject
- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: MethodDataCollection.CopyTo(Array,Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo(MethodData[],Int32)
  nameWithType: MethodDataCollection.CopyTo(MethodData[],Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(MethodData[],Int32)
- uid: System.Management.MethodData[]
  parent: System.Management
  isExternal: false
  name: MethodData
  nameWithType: MethodData
  fullName: System.Management.MethodData[]
  spec.csharp:
  - uid: System.Management.MethodData
    name: MethodData
    nameWithType: MethodData
    fullName: MethodData[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Management.MethodDataCollection.Count
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: System.Management.MethodDataCollection.Count
- uid: System.Management.MethodDataCollection.GetEnumerator
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: MethodDataCollection.GetEnumerator()
  fullName: System.Management.MethodDataCollection.GetEnumerator()
- uid: System.Management.MethodDataCollection.MethodDataEnumerator
  parent: System.Management
  isExternal: false
  name: MethodDataCollection+MethodDataEnumerator
  nameWithType: MethodDataCollection+MethodDataEnumerator
  fullName: System.Management.MethodDataCollection+MethodDataEnumerator
- uid: System.Management.MethodDataCollection.IsSynchronized
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: System.Management.MethodDataCollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Management.MethodDataCollection.Item(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Item(String)
  nameWithType: MethodDataCollection.Item(String)
  fullName: System.Management.MethodDataCollection.Item(String)
- uid: System.Management.MethodData
  parent: System.Management
  isExternal: false
  name: MethodData
  nameWithType: MethodData
  fullName: System.Management.MethodData
- uid: System.Management.MethodDataCollection.Remove(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Remove(String)
  nameWithType: MethodDataCollection.Remove(String)
  fullName: System.Management.MethodDataCollection.Remove(String)
- uid: System.Management.MethodDataCollection.SyncRoot
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: System.Management.MethodDataCollection.SyncRoot
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Management.MethodDataCollection.Add*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add
  nameWithType: MethodDataCollection.Add
- uid: System.Management.MethodDataCollection.CopyTo*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo
  nameWithType: MethodDataCollection.CopyTo
- uid: System.Management.MethodDataCollection.Count*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Count
  nameWithType: MethodDataCollection.Count
- uid: System.Management.MethodDataCollection.GetEnumerator*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: MethodDataCollection.GetEnumerator
- uid: System.Management.MethodDataCollection.IsSynchronized*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
- uid: System.Management.MethodDataCollection.Item*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Item
  nameWithType: MethodDataCollection.Item
- uid: System.Management.MethodDataCollection.Remove*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Remove
  nameWithType: MethodDataCollection.Remove
- uid: System.Management.MethodDataCollection.SyncRoot*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator
