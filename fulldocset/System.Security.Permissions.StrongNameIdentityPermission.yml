### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.StrongNameIdentityPermission
  id: StrongNameIdentityPermission
  children:
  - System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  - System.Security.Permissions.StrongNameIdentityPermission.Copy
  - System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.StrongNameIdentityPermission.Name
  - System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  - System.Security.Permissions.StrongNameIdentityPermission.ToXml
  - System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)
  - System.Security.Permissions.StrongNameIdentityPermission.Version
  langs:
  - csharp
  name: StrongNameIdentityPermission
  nameWithType: StrongNameIdentityPermission
  fullName: System.Security.Permissions.StrongNameIdentityPermission
  type: Class
  summary: "Defines the identity permission for strong names. This class cannot be inherited."
  remarks: "> [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.       Use StrongNameIdentityPermission to confirm that the calling code is in a particular strong-named code assembly. Full demands for StrongNameIdentityPermission succeed only if all the assemblies in the stack have the correct evidence to satisfy the demand. Link demands that use the <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute succeed only if the immediate caller has the correct evidence.       A strong name identity is based on a cryptographic public key called a binary large object (BLOB),  which is optionally combined with the name and version of a specific assembly. The key defines a unique namespace and provides strong verification that the name is genuine, because the definition of the name must be in an assembly that is signed by the corresponding private key.       Note that the validity of the strong name key is not dependent on a trust relationship or on any certificate necessarily being issued for the key.       In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, even if the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust. This ensures consistency for all permissions and eliminates the treatment of identity permissions as a special case.       For a complete description of strong names, see the <xref:System.Security.Policy.StrongName> reference page. For more information about strong-named assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md).       The StrongNameIdentityPermission class is used to define strong-name requirements for accessing the public members of a type. The <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute can be used to define strong-name requirements at the assembly level. In the .NET Framework version 2.0 and later, you can also use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to specify that all nonpublic types in that assembly are visible to another assembly. For more information, see [Friend Assemblies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StrongNameIdentityPermission : System.Security.CodeAccessPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements: []
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: StrongNameIdentityPermission(PermissionState)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref> class with the specified <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>."
  remarks: "Creates either a fully restricted (`None`) or `Unrestricted` permission.      > [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.       In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.       Use this constructor with a permission state value of <xref:System.Security.Permissions.PermissionState> to create an identity permission that matches no strong names. If you subsequently set the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> and <xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> properties, a specific strong name identity can be represented by the permission."
  example:
  - "The following code example shows the use of the StrongNameIdentityPermission constructor.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/visualbasic/ecc5c20f-4468-431e-a2f0-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/cpp/ecc5c20f-4468-431e-a2f0-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/csharp/ecc5c20f-4468-431e-a2f0-_1.cs)]"
  syntax:
    content: public StrongNameIdentityPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> values."
  overload: System.Security.Permissions.StrongNameIdentityPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>state</code> parameter is not a valid value of <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  id: '#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)'
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref> class for the specified strong name identity."
  remarks: "The `name` and `version` parameters can be `null` only when the public key is used to identify the assembly. An empty string (&quot;&quot;) should not be used in place of `null`. If `name` is an empty string, an <xref:System.ArgumentException> is thrown.       For more information on names and version numbers of assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example shows the use of the StrongNameIdentityPermission constructor.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/visualbasic/f67888ca-a49f-49ea-a115-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/cpp/f67888ca-a49f-49ea-a115-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/csharp/f67888ca-a49f-49ea-a115-_1.cs)]"
  syntax:
    content: public StrongNameIdentityPermission (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);
    parameters:
    - id: blob
      type: System.Security.Permissions.StrongNamePublicKeyBlob
      description: "The public key defining the strong name identity namespace."
    - id: name
      type: System.String
      description: "The simple name part of the strong name identity. This corresponds to the name of the assembly."
    - id: version
      type: System.Version
      description: "The version number of the identity."
  overload: System.Security.Permissions.StrongNameIdentityPermission.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>blob</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>name</code> parameter is an empty string (&quot;&quot;)."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy
  id: Copy
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: StrongNameIdentityPermission.Copy()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns an identical copy of the current permission."
  remarks: "A copy of a permission represents the same access to resources as the original permission."
  example:
  - "The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_15_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/cpp/m-system.security.permis_15_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/csharp/m-system.security.permis_15_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A copy of the current permission."
  overload: System.Security.Permissions.StrongNameIdentityPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: StrongNameIdentityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Reconstructs a permission with a specified state from an XML encoding."
  remarks: "This method is not used by application code."
  example:
  - "The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/visualbasic/ed9c932c-08d5-452f-8a11-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/cpp/ed9c932c-08d5-452f-8a11-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/csharp/ed9c932c-08d5-452f-8a11-_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "The XML encoding to use to reconstruct the permission."
  overload: System.Security.Permissions.StrongNameIdentityPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>e</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>e</code> parameter is not a valid permission element.       -or-       The <code>e</code> parameter&quot;s version number is not valid."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: StrongNameIdentityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a permission that is the intersection of the current permission and the specified permission."
  remarks: "The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       The intersection of two identical strong name identity permissions is the same permission. The intersection of two different (not wildcard) expressions is an empty permission. The intersection of a wildcard expression and a matching strong name is the strong name. The intersection of two wildcard expressions that match is the longer, more specific of the two expressions."
  example:
  - "The following code example shows the results of the use of the Intersect method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/visualbasic/fc41bc4b-3965-4525-8b6a-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/cpp/fc41bc4b-3965-4525-8b6a-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/csharp/fc41bc4b-3965-4525-8b6a-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to intersect with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the intersection of the current permission and the specified permission, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the intersection is empty."
  overload: System.Security.Permissions.StrongNameIdentityPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: StrongNameIdentityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines whether the current permission is a subset of the specified permission."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, the other properties being equal, an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property containing the wildcard expression MyCompany.MyDepartment.* is identified as a subset of an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property MyCompany.MyDepartment.MyFile."
  example:
  - "The following code example shows the results of the use of the IsSubsetOf method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/visualbasic/e4452cd4-0b1f-49b1-baf5-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/cpp/e4452cd4-0b1f-49b1-baf5-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/csharp/e4452cd4-0b1f-49b1-baf5-_1.cs)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Name
  id: Name
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Name
  nameWithType: StrongNameIdentityPermission.Name
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the simple name portion of the strong name identity."
  remarks: "The value of the Name property can be an exact name or can be modified by a wildcard character in the final position; for example, both MyCompany.MyDepartment.MyFile and MyCompany.MyDepartment.* are valid names. If you attempt to set the Name property to an empty string (&quot;&quot;), an <xref:System.ArgumentException> is thrown."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "The simple name of the identity."
  overload: System.Security.Permissions.StrongNameIdentityPermission.Name*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value is an empty string (&quot;&quot;)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The property value cannot be retrieved because it contains an ambiguous identity."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  id: PublicKey
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: PublicKey
  nameWithType: StrongNameIdentityPermission.PublicKey
  fullName: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the public key blob that defines the strong name identity namespace."
  syntax:
    content: public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }
    return:
      type: System.Security.Permissions.StrongNamePublicKeyBlob
      description: "A <xref href=&quot;System.Security.Permissions.StrongNamePublicKeyBlob&quot;></xref> that contains the public key of the identity, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if there is no key."
  overload: System.Security.Permissions.StrongNameIdentityPermission.PublicKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is set to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The property value cannot be retrieved because it contains an ambiguous identity."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: StrongNameIdentityPermission.ToXml()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates an XML encoding of the permission and its current state."
  remarks: "This method is not typically used by application code."
  example:
  - "The following code example shows the behavior of the ToXml method.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_20_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/cpp/m-system.security.permis_20_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/csharp/m-system.security.permis_20_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "An XML encoding of the permission, including any state information."
  overload: System.Security.Permissions.StrongNameIdentityPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: StrongNameIdentityPermission.Union(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates a permission that is the union of the current permission and the specified permission."
  remarks: "The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.       The union of a permission and `null` is the permission that is not `null`. The union of a permission and a subset of that permission is the permission that contains the other. Any other combination results in an <xref:System.ArgumentException> exception being thrown."
  example:
  - "The following code example shows the results of the use of the Union method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/visualbasic/3b1a04e0-7bea-4a40-8e18-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/cpp/3b1a04e0-7bea-4a40-8e18-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/csharp/3b1a04e0-7bea-4a40-8e18-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to combine with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the union of the current permission and the specified permission."
  overload: System.Security.Permissions.StrongNameIdentityPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not of the same type as the current permission.       -or-       The two permissions are not equal and one is a subset of the other."
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Version
  id: Version
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Version
  nameWithType: StrongNameIdentityPermission.Version
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Version
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the version number of the identity."
  syntax:
    content: public Version Version { get; set; }
    return:
      type: System.Version
      description: "The version of the identity."
  overload: System.Security.Permissions.StrongNameIdentityPermission.Version*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The property value cannot be retrieved because it contains an ambiguous identity."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: StrongNameIdentityPermission(PermissionState)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
- uid: System.Security.Permissions.StrongNamePublicKeyBlob
  parent: System.Security.Permissions
  isExternal: false
  name: StrongNamePublicKeyBlob
  nameWithType: StrongNamePublicKeyBlob
  fullName: System.Security.Permissions.StrongNamePublicKeyBlob
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Copy()
  nameWithType: StrongNameIdentityPermission.Copy()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: StrongNameIdentityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: StrongNameIdentityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Intersect(IPermission)
- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: StrongNameIdentityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.StrongNameIdentityPermission.Name
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Name
  nameWithType: StrongNameIdentityPermission.Name
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Name
- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: PublicKey
  nameWithType: StrongNameIdentityPermission.PublicKey
  fullName: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: ToXml()
  nameWithType: StrongNameIdentityPermission.ToXml()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.ToXml()
- uid: System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: StrongNameIdentityPermission.Union(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Union(IPermission)
- uid: System.Security.Permissions.StrongNameIdentityPermission.Version
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Version
  nameWithType: StrongNameIdentityPermission.Version
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Version
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: StrongNameIdentityPermission
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission
- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Copy
  nameWithType: StrongNameIdentityPermission.Copy
- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: FromXml
  nameWithType: StrongNameIdentityPermission.FromXml
- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Intersect
  nameWithType: StrongNameIdentityPermission.Intersect
- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: StrongNameIdentityPermission.IsSubsetOf
- uid: System.Security.Permissions.StrongNameIdentityPermission.Name*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Name
  nameWithType: StrongNameIdentityPermission.Name
- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: PublicKey
  nameWithType: StrongNameIdentityPermission.PublicKey
- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: ToXml
  nameWithType: StrongNameIdentityPermission.ToXml
- uid: System.Security.Permissions.StrongNameIdentityPermission.Union*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Union
  nameWithType: StrongNameIdentityPermission.Union
- uid: System.Security.Permissions.StrongNameIdentityPermission.Version*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Version
  nameWithType: StrongNameIdentityPermission.Version
