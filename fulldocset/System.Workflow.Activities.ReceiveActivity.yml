### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.ReceiveActivity
  id: ReceiveActivity
  children:
  - System.Workflow.Activities.ReceiveActivity.#ctor
  - System.Workflow.Activities.ReceiveActivity.#ctor(System.String)
  - System.Workflow.Activities.ReceiveActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.ReceiveActivity.CanCreateInstance
  - System.Workflow.Activities.ReceiveActivity.Context
  - System.Workflow.Activities.ReceiveActivity.ContextToken
  - System.Workflow.Activities.ReceiveActivity.Dispose(System.Boolean)
  - System.Workflow.Activities.ReceiveActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.ReceiveActivity.FaultMessage
  - System.Workflow.Activities.ReceiveActivity.FaultMessageProperty
  - System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)
  - System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)
  - System.Workflow.Activities.ReceiveActivity.GetRootContext(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(System.Object)
  - System.Workflow.Activities.ReceiveActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.Activities.ReceiveActivity.Initialize(System.IServiceProvider)
  - System.Workflow.Activities.ReceiveActivity.InitializeProperties
  - System.Workflow.Activities.ReceiveActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.ReceiveActivity.OperationValidation
  - System.Workflow.Activities.ReceiveActivity.OperationValidationEvent
  - System.Workflow.Activities.ReceiveActivity.ParameterBindings
  - System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo
  - System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(System.Object,System.Object)
  - System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName
  - System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#QueueEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)
  - System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty
  langs:
  - csharp
  name: ReceiveActivity
  nameWithType: ReceiveActivity
  fullName: System.Workflow.Activities.ReceiveActivity
  type: Class
  summary: "Service activity that implements an operation defined by a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service contract."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       The ReceiveActivity activity is used when a workflow implements an operation defined in a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service contract. The ReceiveActivity can implement an operation from an already defined service contract or can define the service contract and operation within the workflow itself. The latter is known as a workflow-first contract.       The ReceiveActivity activity supports a set of predefined message exchange patterns. These patterns include:      -   One-way receive           The client that sends the message does not expect the service to send a response. The contract operation should have a void return type.      -   Receive request - Send response           After a message is received and processed by the ReceiveActivity activity, a response is sent back to the client. When the contract operation has a void return type, an acknowledgement is sent back to the send activity.      -   Receive request - Send fault           After a message is received and processed by the ReceiveActivity activity, a response or a fault is sent back to the client.      > [!NOTE] >  To ensure that persistence performs properly and does not persist transient messages, make sure that child activities of the ReceiveActivity do not persist by themselves. This can occur if the child activities go idle when a persistence provider was created with `UnloadOnIdle` set to `true`, for instance.      > [!NOTE] >  This activity is part of [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]. For the equivalent activity in [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], see <xref:System.ServiceModel.Activities.Receive>."
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.ReceiveActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.ReceiveActivity), "Design.Resources.ReceiveActivity.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.ReceiveActivityValidator))]

      public sealed class ReceiveActivity : System.Workflow.Activities.SequenceActivity, System.Workflow.Activities.IEventActivity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  - System.Workflow.ComponentModel.CompositeActivity
  - System.Workflow.Activities.SequenceActivity
  implements:
  - System.Workflow.Activities.IEventActivity
  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  inheritedMembers:
  - System.Workflow.Activities.SequenceActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.Activities.SequenceActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.SequenceActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.CompositeActivity.Activities
  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: ReceiveActivity()
  nameWithType: ReceiveActivity.ReceiveActivity()
  fullName: System.Workflow.Activities.ReceiveActivity.ReceiveActivity()
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> class."
  remarks: "The <xref:System.Workflow.Activities.ReceiveActivity> constructor is typically invoked in the code-beside file created by the workflow designer."
  example:
  - "The following example shows how to create a new instance of the <xref:System.Workflow.Activities.ReceiveActivity> class.  This code was adapted from the `Conversations` SDK sample, from the `ShipperWorkflow.designer.cs` file.  \n  \n [!code-cs[ReceiveActivity#11](~/add/codesnippet/csharp/receiveactivity/snippets.cs#11)]"
  syntax:
    content: public ReceiveActivity ();
    parameters: []
  overload: System.Workflow.Activities.ReceiveActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: ReceiveActivity(String)
  nameWithType: ReceiveActivity.ReceiveActivity(String)
  fullName: System.Workflow.Activities.ReceiveActivity.ReceiveActivity(String)
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> class, initializing its <xref:System.Workflow.ComponentModel.Activity.Name*> property."
  remarks: "The <xref:System.Workflow.Activities.ReceiveActivity> constructor is typically invoked in the code-beside file created by the workflow designer."
  example:
  - "The following example shows how to create a new instance of the <xref:System.Workflow.Activities.ReceiveActivity> class.  \n  \n [!code-cs[ReceiveActivity#12](~/add/codesnippet/csharp/receiveactivity/snippets.cs#12)]"
  syntax:
    content: public ReceiveActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name to assign to the activity instance."
  overload: System.Workflow.Activities.ReceiveActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: Cancel(ActivityExecutionContext)
  nameWithType: ReceiveActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.Activities.ReceiveActivity.Cancel(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.CanCreateInstance
  id: CanCreateInstance
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: CanCreateInstance
  nameWithType: ReceiveActivity.CanCreateInstance
  fullName: System.Workflow.Activities.ReceiveActivity.CanCreateInstance
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets or sets whether the operation causes a new workflow service instance to be created."
  remarks: "A <xref:System.Workflow.Activities.ReceiveActivity> activity that has CanCreateInstance set to `true` represents a service operation that, when invoked by a service client without being part of a conversation, causes a new instance of the service workflow to be created.       Service workflows that do not have a <xref:System.Workflow.Activities.ReceiveActivity> activity with CanCreateInstance set to `true` cannot be instantiated by a client using a service operation invocation. Such workflows can be created using the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method of the associated <xref:System.Workflow.Runtime.WorkflowRuntime> object.       The default value for this property is `false`."
  example:
  - "The following example shows how to set the `CanCreateInstance` property. This code was adapted from the `Conversations` SDK sample, from the `ShipperWorkflow.designer.cs` file.  \n  \n [!code-cs[ReceiveActivity#0](~/add/codesnippet/csharp/receiveactivity/snippets.cs#0)]"
  syntax:
    content: public bool CanCreateInstance { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a new workflow instance is created; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Workflow.Activities.ReceiveActivity.CanCreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.Context
  id: Context
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: Context
  nameWithType: ReceiveActivity.Context
  fullName: System.Workflow.Activities.ReceiveActivity.Context
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets the context information for this activity."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to access the `Context` property.  \n  \n [!code-cs[ReceiveActivity#17](~/add/codesnippet/csharp/receiveactivity/snippets.cs#17)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Context { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A &lt;xref:System.Collections.Generic.IDictionary%602&gt; object that contains context information for this activity."
  overload: System.Workflow.Activities.ReceiveActivity.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.ContextToken
  id: ContextToken
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: ContextToken
  nameWithType: ReceiveActivity.ContextToken
  fullName: System.Workflow.Activities.ReceiveActivity.ContextToken
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents a token that can be used to specify the context that should be used to correlate the exchange between a <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity and the client that the activity is communicating with."
  remarks: "Each ContextToken is defined within the scope of an owner activity. Users can model two distinct context tokens with the same name but different owner scopes. The value of the contexts associated with these context tokens are different at runtime.       By default, each workflow has an implicit root context token, scoped at the root activity level. The name of the root context token is &quot;(RootContext)&quot; and the <xref:System.Workflow.Activities.ContextToken.OwnerActivityName%2A> is `null`. If a <xref:System.Workflow.Activities.ReceiveActivity> activity does not have a ContextToken associated with it, the root context token is used."
  example:
  - "The following code example shows how to access the `ContextToken` property. This code example is adapted from the `Conversations` SDK sample, from the `SupplierWorkflow.Designer.cs` file.  \n  \n [!code-cs[ReceiveActivity#1](~/add/codesnippet/csharp/receiveactivity/snippets.cs#1)]"
  syntax:
    content: public System.Workflow.Activities.ContextToken ContextToken { get; set; }
    return:
      type: System.Workflow.Activities.ContextToken
      description: "A <xref href=&quot;System.Workflow.Activities.ContextToken&quot;></xref> that can be used for correlation."
  overload: System.Workflow.Activities.ReceiveActivity.ContextToken*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ReceiveActivity.Dispose(Boolean)
  fullName: System.Workflow.Activities.ReceiveActivity.Dispose(Boolean)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: ReceiveActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.ReceiveActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.FaultMessage
  id: FaultMessage
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: FaultMessage
  nameWithType: ReceiveActivity.FaultMessage
  fullName: System.Workflow.Activities.ReceiveActivity.FaultMessage
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "The exception that is returned when a receive activity completes execution."
  remarks: "If the FaultMessage property is set to an instance of type <xref:System.ServiceModel.FaultException>, the fault is returned to the client upon completion.       If an exception is thrown during the activity execution and the FaultMessage property is set, then the specified fault is returned to the client. If an exception is thrown during the activity execution and the FaultMessage property is set, and the associated operation has a <xref:System.ServiceModel.FaultContractAttribute> attribute that specifies a fault type that matches that of the FaultMessage property, then the channel is not faulted and the client can still communicate to the server. If the FaultMessage property is not set, the thrown exception is returned as a fault to the client."
  example:
  - "The following code sample shows how to access the `FaultMessage` property.  \n  \n [!code-cs[ReceiveActivity#2](~/add/codesnippet/csharp/receiveactivity/snippets.cs#2)]"
  syntax:
    content: public System.ServiceModel.FaultException FaultMessage { get; set; }
    return:
      type: System.ServiceModel.FaultException
      description: "A <xref:System.ServiceModel.FaultException> object that contains the fault message text and details."
  overload: System.Workflow.Activities.ReceiveActivity.FaultMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.FaultMessageProperty
  id: FaultMessageProperty
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: FaultMessageProperty
  nameWithType: ReceiveActivity.FaultMessageProperty
  fullName: System.Workflow.Activities.ReceiveActivity.FaultMessageProperty
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents the <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref> that targets the <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage*> property."
  remarks: "This dependency property can be used to set up a binding between the receive activity&quot;s <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> property and a public workflow property/field of type <xref:System.ServiceModel.FaultException> or another activity&quot;s public property/field of the same type.       This dependency property can also be used to set the value associated with the <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> property of a <xref:System.Workflow.Activities.ReceiveActivity> activity.       This dependency property can also be used to get the binding or value associated with the <xref:System.Workflow.Activities.ReceiveActivity.FaultMessage%2A> property of the <xref:System.Workflow.Activities.ReceiveActivity> activity."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty FaultMessageProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)
  id: GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: GetContext(Activity,ContextToken)
  nameWithType: ReceiveActivity.GetContext(Activity,ContextToken)
  fullName: System.Workflow.Activities.ReceiveActivity.GetContext(Activity,ContextToken)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Static method that returns context information given an activity instance and context token."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to use the `GetContext` method.  \n  \n [!code-cs[ReceiveActivity#13](~/add/codesnippet/csharp/receiveactivity/snippets.cs#13)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ContextToken contextToken);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Activity instance that context information is requested for."
    - id: contextToken
      type: System.Workflow.Activities.ContextToken
      description: "The context token used by the activity."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A dictionary based collection that contains <xref:System.Xml.XmlQualifiedName> keys and their associated <xref:System.String> values."
  overload: System.Workflow.Activities.ReceiveActivity.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)
  id: GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: GetContext(Activity,String,String)
  nameWithType: ReceiveActivity.GetContext(Activity,String,String)
  fullName: System.Workflow.Activities.ReceiveActivity.GetContext(Activity,String,String)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Static method that returns context information given an activity instance and context token."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to use the `GetContext` method.  \n  \n [!code-cs[ReceiveActivity#15](~/add/codesnippet/csharp/receiveactivity/snippets.cs#15)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, string contextName, string ownerActivityName);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Activity instance that context information is requested for."
    - id: contextName
      type: System.String
      description: "Name of the context token used by the activity."
    - id: ownerActivityName
      type: System.String
      description: "The name of the owning activity name."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A dictionary-based collection that contains <xref:System.Xml.XmlQualifiedName> keys and their associated <xref:System.String> values."
  overload: System.Workflow.Activities.ReceiveActivity.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.GetRootContext(System.Workflow.ComponentModel.Activity)
  id: GetRootContext(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: GetRootContext(Activity)
  nameWithType: ReceiveActivity.GetRootContext(Activity)
  fullName: System.Workflow.Activities.ReceiveActivity.GetRootContext(Activity)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Static method that returns context information for the root context associated with a given activity instance. Context information is used for communication between a host application and the workflow service."
  remarks: "Context information is used for communication between the client and the service it is communicating with and includes such things as identification for correlation."
  example:
  - "The following example shows how to use the `GetRootContext` method.  \n  \n [!code-cs[ReceiveActivity#16](~/add/codesnippet/csharp/receiveactivity/snippets.cs#16)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetRootContext (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "The child activity instance."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "A dictionary-based collection that contains <xref:System.Xml.XmlQualifiedName> keys and their associated <xref:System.String> values that represent context information for a root context. Barring custom instance creation logic, the message that triggers creation of a new instance is received in the root context."
  overload: System.Workflow.Activities.ReceiveActivity.GetRootContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(System.Object)
  id: GetWorkflowServiceAttributes(System.Object)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: GetWorkflowServiceAttributes(Object)
  nameWithType: ReceiveActivity.GetWorkflowServiceAttributes(Object)
  fullName: System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Returns the <xref href=&quot;System.Workflow.Activities.WorkflowServiceAttributes&quot;></xref> attributes for the service implemented by the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity. These attributes include items like the <xref:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode*>, the <xref:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName*>, the <xref:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults*>, and whether to include exception details in any faults that are returned from the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity."
  remarks: "The <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> property is an attached dependency property defined by the <xref:System.Workflow.Activities.ReceiveActivity> activity. This dependency property is attached to the root workflow that contains the <xref:System.Workflow.Activities.ReceiveActivity> activity using the <xref:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes%2A> method call at design time.       The <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> property is used for defining service-level behavior attributes that are applied to the workflow service when it starts. These cannot be modified at runtime.      > [!NOTE] >  If the current workflow starts another workflow using an <xref:System.Workflow.Activities.InvokeWorkflowActivity> activity, the invoked workflow does not inherit the invoking workflow&quot;s service attributes.      > [!NOTE] >  If service attributes are set for a custom activity and that activity is included in a workflow, those service attributes are used. Service attributes are only used for custom activities if the custom activity itself is run as a workflow."
  example:
  - "The following example shows how to use the `GetWorkflowServiceAttributes` method.  \n  \n [!code-cs[ReceiveActivity#5](~/add/codesnippet/csharp/receiveactivity/snippets.cs#5)]"
  syntax:
    content: public static object GetWorkflowServiceAttributes (object dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Object
      description: "The object to retrieve the service attributes from."
    return:
      type: System.Object
      description: "A <xref:System.Object> that represents a <xref href=&quot;System.Workflow.Activities.WorkflowServiceAttributes&quot;></xref> object that contains service attribute data."
  overload: System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  id: HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: HandleFault(ActivityExecutionContext,Exception)
  nameWithType: ReceiveActivity.HandleFault(ActivityExecutionContext,Exception)
  fullName: System.Workflow.Activities.ReceiveActivity.HandleFault(ActivityExecutionContext,Exception)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus HandleFault (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, Exception exception);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    - id: exception
      type: System.Exception
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.HandleFault*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.Initialize(System.IServiceProvider)
  id: Initialize(System.IServiceProvider)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: Initialize(IServiceProvider)
  nameWithType: ReceiveActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.Activities.ReceiveActivity.Initialize(IServiceProvider)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override void Initialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.InitializeProperties
  id: InitializeProperties
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: InitializeProperties()
  nameWithType: ReceiveActivity.InitializeProperties()
  fullName: System.Workflow.Activities.ReceiveActivity.InitializeProperties()
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override void InitializeProperties ();
    parameters: []
  overload: System.Workflow.Activities.ReceiveActivity.InitializeProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: OnSequenceComplete(ActivityExecutionContext)
  nameWithType: ReceiveActivity.OnSequenceComplete(ActivityExecutionContext)
  fullName: System.Workflow.Activities.ReceiveActivity.OnSequenceComplete(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override void OnSequenceComplete (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.OnSequenceComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.OperationValidation
  id: OperationValidation
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: OperationValidation
  nameWithType: ReceiveActivity.OperationValidation
  fullName: System.Workflow.Activities.ReceiveActivity.OperationValidation
  type: Event
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Occurs when a message is received for an operation and validation is required."
  remarks: "This is an optional event handler that is fired when the <xref:System.Workflow.Activities.ReceiveActivity> activity is about to receive a message. The associated handler can be used to perform ClaimSet-based security checks to authorize client invocation of the service operation implemented by the <xref:System.Workflow.Activities.ReceiveActivity> activity.       Setting <xref:System.Workflow.Activities.OperationValidationEventArgs.IsValid%2A?displayProperty=fullName> to `false` in the event handler rejects the service operation invocation and the client receives a <xref:System.ServiceModel.FaultException>. If <xref:System.Workflow.Activities.OperationValidationEventArgs.IsValid%2A?displayProperty=fullName> is set to `true`, then the service operation invocation succeeds and the <xref:System.Workflow.Activities.ReceiveActivity> activity receives and processes the message."
  example:
  - "The following example shows how to use the `OperationValidation` event.  \n  \n [!code-cs[ReceiveActivity#7](~/add/codesnippet/csharp/receiveactivity/snippets.cs#7)]"
  syntax:
    content: public event EventHandler<System.Workflow.Activities.OperationValidationEventArgs> OperationValidation;
    return:
      type: System.EventHandler{System.Workflow.Activities.OperationValidationEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.OperationValidationEvent
  id: OperationValidationEvent
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: OperationValidationEvent
  nameWithType: ReceiveActivity.OperationValidationEvent
  fullName: System.Workflow.Activities.ReceiveActivity.OperationValidationEvent
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents the <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref> that targets the <xref href=&quot;System.Workflow.Activities.ReceiveActivity.OperationValidation&quot;></xref> event."
  remarks: "This dependency event property can be used to bind the receive activity&quot;s <xref:System.Workflow.Activities.ReceiveActivity.OperationValidation> event to a public event handler on the workflow class."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty OperationValidationEvent;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.ParameterBindings
  id: ParameterBindings
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: ParameterBindings
  nameWithType: ReceiveActivity.ParameterBindings
  fullName: System.Workflow.Activities.ReceiveActivity.ParameterBindings
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets the collection of bindable parameters as found in the service&quot;s formal parameter list."
  remarks: "ParameterBindings can be used to specify a binding between the service operation parameters and public field/properties of the workflow that contain the <xref:System.Workflow.Activities.ReceiveActivity> activity. When a client invokes the operation, the corresponding parameter values are written to bound workflow properties during the receive activity&quot;s execution.       ParameterBindings can also be used by the receive activity&quot;s child activities to read the parameter values passed in by client invocation. Child activities can use the ParameterBindings collection to set the return value of the parent <xref:System.Workflow.Activities.ReceiveActivity> activity.       All parameters of the service contract should be included in the `ParameterBindings` property. Unbound parameters cause compiler warnings upon compilation and an exception can occur when the <xref:System.Workflow.Activities.ReceiveActivity> returns this message back to the client."
  example:
  - "The following example shows how to access the `ParameterBindings` property. This code was adapted from the `Conversations` SDK sample, from the `ShipperWorkflow.designer.cs` file.  \n  \n [!code-cs[ReceiveActivity#3](~/add/codesnippet/csharp/receiveactivity/snippets.cs#3)]"
  syntax:
    content: public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }
    return:
      type: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
      description: "The <xref href=&quot;System.Workflow.ComponentModel.WorkflowParameterBindingCollection&quot;></xref> of parameters to bind to."
  overload: System.Workflow.Activities.ReceiveActivity.ParameterBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo
  id: ServiceOperationInfo
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: ServiceOperationInfo
  nameWithType: ReceiveActivity.ServiceOperationInfo
  fullName: System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Defines the contract and service operation that the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity implements."
  remarks: "The ServiceOperationInfo property can be set to an instance of type <xref:System.Workflow.Activities.TypedOperationInfo> or <xref:System.Workflow.Activities.OperationInfo>. <xref:System.Workflow.Activities.TypedOperationInfo> can be used to configure a receive activity using an existing [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service contract.       An instance of <xref:System.Workflow.Activities.OperationInfo> can be used to configure a receive activity for the workflow-first contract scenario."
  example:
  - "The following example shows how to access the `ServiceOperationInfo` property. This code was adapted from the `Conversations` SDK sample, from the `ShipperWorkflow.designer.cs` file.  \n  \n [!code-cs[ReceiveActivity#4](~/add/codesnippet/csharp/receiveactivity/snippets.cs#4)]"
  syntax:
    content: public System.Workflow.Activities.OperationInfoBase ServiceOperationInfo { get; set; }
    return:
      type: System.Workflow.Activities.OperationInfoBase
      description: "An <xref href=&quot;System.Workflow.Activities.OperationInfoBase&quot;></xref> object that contains the contract name, the contract type, the operation name, (which could be distinct from method name), whether the operation is a one-way operation, and method information including parameters about the operation."
  overload: System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(System.Object,System.Object)
  id: SetWorkflowServiceAttributes(System.Object,System.Object)
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: SetWorkflowServiceAttributes(Object,Object)
  nameWithType: ReceiveActivity.SetWorkflowServiceAttributes(Object,Object)
  fullName: System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(Object,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Sets the attributes for the service implemented by the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity. These attributes include items like the <xref:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode*>, the <xref:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName*>, and whether to include exception details in any faults that are returned from the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity."
  remarks: "The <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> property is an attached dependency property defined by the <xref:System.Workflow.Activities.ReceiveActivity> activity. This dependency property is attached to the root workflow that contains the <xref:System.Workflow.Activities.ReceiveActivity> activity using the SetWorkflowServiceAttributes method call at design time.       The <xref:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty> property is used for defining service-level behavior attributes that are applied to the workflow service when it starts. These cannot be modified at runtime.      > [!NOTE] >  If the current workflow starts another workflow using a <xref:System.Workflow.Activities.InvokeWorkflowActivity> activity, the invoked workflow does not inherit the invoking workflow&quot;s service attributes.      > [!NOTE] >  If service attributes are set for a custom activity and that activity is included in a workflow, those service attributes is not used. Service attributes are only used in custom activities if the custom activity itself is run as a workflow."
  example:
  - "The following example shows how to use the `SetWorkflowServiceAttributes` method.  \n  \n [!code-cs[ReceiveActivity#6](~/add/codesnippet/csharp/receiveactivity/snippets.cs#6)]"
  syntax:
    content: public static void SetWorkflowServiceAttributes (object dependencyObject, object value);
    parameters:
    - id: dependencyObject
      type: System.Object
      description: "The object to apply the service attributes to."
    - id: value
      type: System.Object
      description: "The <xref href=&quot;System.Workflow.Activities.WorkflowServiceAttributes&quot;></xref> object that contains the service attribute data to apply."
  overload: System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName
  id: System#Workflow#Activities#IEventActivity#QueueName
  isEii: true
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: System.Workflow.Activities.IEventActivity.QueueName
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.QueueName
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.Activities.IEventActivity.QueueName
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Gets the name of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> on which the activity is waiting for data to arrive."
  syntax:
    content: IComparable System.Workflow.Activities.IEventActivity.QueueName { get; }
    return:
      type: System.IComparable
      description: "The name of the <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref> on which the activity is waiting for data to arrive."
  overload: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  isEii: true
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Creates the subscription of the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity to an event."
  syntax:
    content: void IEventActivity.Subscribe (System.Workflow.ComponentModel.ActivityExecutionContext parentContext, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> parentEventHandler);
    parameters:
    - id: parentContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> that represents the execution environment of the <xref href=&quot;System.Workflow.Activities.ReceiveActivity&quot;></xref> activity."
    - id: parentEventHandler
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "The <xref:System.EventHandler> that handles the event. This event handler is owned by the parent activity."
  overload: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  isEii: true
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Cancels the subscription of a <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref> to an event."
  syntax:
    content: void IEventActivity.Unsubscribe (System.Workflow.ComponentModel.ActivityExecutionContext parentContext, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> parentEventHandler);
    parameters:
    - id: parentContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> that represents the execution environment of the <xref href=&quot;System.Workflow.Activities.WebServiceInputActivity&quot;></xref> activity."
    - id: parentEventHandler
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "The <xref:System.EventHandler> that handles the event. This event handler is owned by the parent activity."
  overload: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#QueueEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)
  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#QueueEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)
  isEii: true
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,QueueEventArgs)
  nameWithType: ReceiveActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,QueueEventArgs)
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,QueueEventArgs)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: void IActivityEventListener<QueueEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.QueueEventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "To be added."
    - id: e
      type: System.Workflow.ComponentModel.QueueEventArgs
      description: "To be added."
  overload: System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#QueueEventArgs>#OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty
  id: WorkflowServiceAttributesProperty
  parent: System.Workflow.Activities.ReceiveActivity
  langs:
  - csharp
  name: WorkflowServiceAttributesProperty
  nameWithType: ReceiveActivity.WorkflowServiceAttributesProperty
  fullName: System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Represents the <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref> that targets the <xref:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo*> property."
  remarks: "The WorkflowServiceAttributesProperty property is an attached dependency property defined by the <xref:System.Workflow.Activities.ReceiveActivity> activity. This dependency property is attached to the root workflow that contains the <xref:System.Workflow.Activities.ReceiveActivity> activity using the <xref:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes%2A> method call at design time.       The WorkflowServiceAttributesProperty property is used for defining service-level behavior attributes that are applied to the workflow service when it starts. These cannot be modified at runtime."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty WorkflowServiceAttributesProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.Activities.SequenceActivity
  isExternal: false
  name: System.Workflow.Activities.SequenceActivity
- uid: System.Workflow.Activities.ReceiveActivity.#ctor
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ReceiveActivity()
  nameWithType: ReceiveActivity.ReceiveActivity()
  fullName: System.Workflow.Activities.ReceiveActivity.ReceiveActivity()
- uid: System.Workflow.Activities.ReceiveActivity.#ctor(System.String)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ReceiveActivity(String)
  nameWithType: ReceiveActivity.ReceiveActivity(String)
  fullName: System.Workflow.Activities.ReceiveActivity.ReceiveActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Activities.ReceiveActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Cancel(ActivityExecutionContext)
  nameWithType: ReceiveActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.Activities.ReceiveActivity.Cancel(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.Activities.ReceiveActivity.CanCreateInstance
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: CanCreateInstance
  nameWithType: ReceiveActivity.CanCreateInstance
  fullName: System.Workflow.Activities.ReceiveActivity.CanCreateInstance
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Activities.ReceiveActivity.Context
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Context
  nameWithType: ReceiveActivity.Context
  fullName: System.Workflow.Activities.ReceiveActivity.Context
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.ReceiveActivity.ContextToken
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ContextToken
  nameWithType: ReceiveActivity.ContextToken
  fullName: System.Workflow.Activities.ReceiveActivity.ContextToken
- uid: System.Workflow.Activities.ContextToken
  parent: System.Workflow.Activities
  isExternal: false
  name: ContextToken
  nameWithType: ContextToken
  fullName: System.Workflow.Activities.ContextToken
- uid: System.Workflow.Activities.ReceiveActivity.Dispose(System.Boolean)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ReceiveActivity.Dispose(Boolean)
  fullName: System.Workflow.Activities.ReceiveActivity.Dispose(Boolean)
- uid: System.Workflow.Activities.ReceiveActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: ReceiveActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.ReceiveActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.Activities.ReceiveActivity.FaultMessage
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: FaultMessage
  nameWithType: ReceiveActivity.FaultMessage
  fullName: System.Workflow.Activities.ReceiveActivity.FaultMessage
- uid: System.ServiceModel.FaultException
  parent: System.ServiceModel
  isExternal: true
  name: FaultException
  nameWithType: FaultException
  fullName: System.ServiceModel.FaultException
- uid: System.Workflow.Activities.ReceiveActivity.FaultMessageProperty
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: FaultMessageProperty
  nameWithType: ReceiveActivity.FaultMessageProperty
  fullName: System.Workflow.Activities.ReceiveActivity.FaultMessageProperty
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetContext(Activity,ContextToken)
  nameWithType: ReceiveActivity.GetContext(Activity,ContextToken)
  fullName: System.Workflow.Activities.ReceiveActivity.GetContext(Activity,ContextToken)
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetContext(Activity,String,String)
  nameWithType: ReceiveActivity.GetContext(Activity,String,String)
  fullName: System.Workflow.Activities.ReceiveActivity.GetContext(Activity,String,String)
- uid: System.Workflow.Activities.ReceiveActivity.GetRootContext(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetRootContext(Activity)
  nameWithType: ReceiveActivity.GetRootContext(Activity)
  fullName: System.Workflow.Activities.ReceiveActivity.GetRootContext(Activity)
- uid: System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(System.Object)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetWorkflowServiceAttributes(Object)
  nameWithType: ReceiveActivity.GetWorkflowServiceAttributes(Object)
  fullName: System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Workflow.Activities.ReceiveActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: HandleFault(ActivityExecutionContext,Exception)
  nameWithType: ReceiveActivity.HandleFault(ActivityExecutionContext,Exception)
  fullName: System.Workflow.Activities.ReceiveActivity.HandleFault(ActivityExecutionContext,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Workflow.Activities.ReceiveActivity.Initialize(System.IServiceProvider)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Initialize(IServiceProvider)
  nameWithType: ReceiveActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.Activities.ReceiveActivity.Initialize(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Workflow.Activities.ReceiveActivity.InitializeProperties
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: InitializeProperties()
  nameWithType: ReceiveActivity.InitializeProperties()
  fullName: System.Workflow.Activities.ReceiveActivity.InitializeProperties()
- uid: System.Workflow.Activities.ReceiveActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: OnSequenceComplete(ActivityExecutionContext)
  nameWithType: ReceiveActivity.OnSequenceComplete(ActivityExecutionContext)
  fullName: System.Workflow.Activities.ReceiveActivity.OnSequenceComplete(ActivityExecutionContext)
- uid: System.Workflow.Activities.ReceiveActivity.OperationValidation
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: OperationValidation
  nameWithType: ReceiveActivity.OperationValidation
  fullName: System.Workflow.Activities.ReceiveActivity.OperationValidation
- uid: System.EventHandler{System.Workflow.Activities.OperationValidationEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<OperationValidationEventArgs>
  nameWithType: EventHandler<OperationValidationEventArgs>
  fullName: System.EventHandler<System.Workflow.Activities.OperationValidationEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Workflow.Activities.OperationValidationEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Activities.OperationValidationEventArgs
    name: OperationValidationEventArgs
    nameWithType: OperationValidationEventArgs
    fullName: OperationValidationEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.ReceiveActivity.OperationValidationEvent
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: OperationValidationEvent
  nameWithType: ReceiveActivity.OperationValidationEvent
  fullName: System.Workflow.Activities.ReceiveActivity.OperationValidationEvent
- uid: System.Workflow.Activities.ReceiveActivity.ParameterBindings
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ParameterBindings
  nameWithType: ReceiveActivity.ParameterBindings
  fullName: System.Workflow.Activities.ReceiveActivity.ParameterBindings
- uid: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowParameterBindingCollection
  nameWithType: WorkflowParameterBindingCollection
  fullName: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
- uid: System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ServiceOperationInfo
  nameWithType: ReceiveActivity.ServiceOperationInfo
  fullName: System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo
- uid: System.Workflow.Activities.OperationInfoBase
  parent: System.Workflow.Activities
  isExternal: false
  name: OperationInfoBase
  nameWithType: OperationInfoBase
  fullName: System.Workflow.Activities.OperationInfoBase
- uid: System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(System.Object,System.Object)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: SetWorkflowServiceAttributes(Object,Object)
  nameWithType: ReceiveActivity.SetWorkflowServiceAttributes(Object,Object)
  fullName: System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(Object,Object)
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.Activities.IEventActivity.QueueName
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.QueueName
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.Activities.IEventActivity.QueueName
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: IActivityEventListener<QueueEventArgs>
  nameWithType: IActivityEventListener<QueueEventArgs>
  fullName: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  spec.csharp:
  - uid: System.Workflow.ComponentModel.IActivityEventListener`1
    name: IActivityEventListener
    nameWithType: IActivityEventListener
    fullName: IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.QueueEventArgs
    name: QueueEventArgs
    nameWithType: QueueEventArgs
    fullName: QueueEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext,IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#QueueEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,QueueEventArgs)
  nameWithType: ReceiveActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,QueueEventArgs)
  fullName: System.Workflow.Activities.ReceiveActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,QueueEventArgs)
- uid: System.Workflow.ComponentModel.QueueEventArgs
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: QueueEventArgs
  nameWithType: QueueEventArgs
  fullName: System.Workflow.ComponentModel.QueueEventArgs
- uid: System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: WorkflowServiceAttributesProperty
  nameWithType: ReceiveActivity.WorkflowServiceAttributesProperty
  fullName: System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty
- uid: System.Workflow.Activities.ReceiveActivity.#ctor*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ReceiveActivity
  nameWithType: ReceiveActivity.ReceiveActivity
- uid: System.Workflow.Activities.ReceiveActivity.Cancel*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Cancel
  nameWithType: ReceiveActivity.Cancel
- uid: System.Workflow.Activities.ReceiveActivity.CanCreateInstance*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: CanCreateInstance
  nameWithType: ReceiveActivity.CanCreateInstance
- uid: System.Workflow.Activities.ReceiveActivity.Context*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Context
  nameWithType: ReceiveActivity.Context
- uid: System.Workflow.Activities.ReceiveActivity.ContextToken*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ContextToken
  nameWithType: ReceiveActivity.ContextToken
- uid: System.Workflow.Activities.ReceiveActivity.Dispose*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Dispose
  nameWithType: ReceiveActivity.Dispose
- uid: System.Workflow.Activities.ReceiveActivity.Execute*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Execute
  nameWithType: ReceiveActivity.Execute
- uid: System.Workflow.Activities.ReceiveActivity.FaultMessage*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: FaultMessage
  nameWithType: ReceiveActivity.FaultMessage
- uid: System.Workflow.Activities.ReceiveActivity.GetContext*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetContext
  nameWithType: ReceiveActivity.GetContext
- uid: System.Workflow.Activities.ReceiveActivity.GetRootContext*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetRootContext
  nameWithType: ReceiveActivity.GetRootContext
- uid: System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: GetWorkflowServiceAttributes
  nameWithType: ReceiveActivity.GetWorkflowServiceAttributes
- uid: System.Workflow.Activities.ReceiveActivity.HandleFault*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: HandleFault
  nameWithType: ReceiveActivity.HandleFault
- uid: System.Workflow.Activities.ReceiveActivity.Initialize*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: Initialize
  nameWithType: ReceiveActivity.Initialize
- uid: System.Workflow.Activities.ReceiveActivity.InitializeProperties*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: InitializeProperties
  nameWithType: ReceiveActivity.InitializeProperties
- uid: System.Workflow.Activities.ReceiveActivity.OnSequenceComplete*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: OnSequenceComplete
  nameWithType: ReceiveActivity.OnSequenceComplete
- uid: System.Workflow.Activities.ReceiveActivity.ParameterBindings*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ParameterBindings
  nameWithType: ReceiveActivity.ParameterBindings
- uid: System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: ServiceOperationInfo
  nameWithType: ReceiveActivity.ServiceOperationInfo
- uid: System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: SetWorkflowServiceAttributes
  nameWithType: ReceiveActivity.SetWorkflowServiceAttributes
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.Activities.IEventActivity.QueueName
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.QueueName
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.Activities.IEventActivity.Subscribe
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.Subscribe
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.Activities.IEventActivity.Unsubscribe
  nameWithType: ReceiveActivity.System.Workflow.Activities.IEventActivity.Unsubscribe
- uid: System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#QueueEventArgs>#OnEvent*
  parent: System.Workflow.Activities.ReceiveActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent
  nameWithType: ReceiveActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent
