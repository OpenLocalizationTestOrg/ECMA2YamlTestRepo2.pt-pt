### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSACryptoServiceProvider
  id: DSACryptoServiceProvider
  children:
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider
  fullName: System.Security.Cryptography.DSACryptoServiceProvider
  type: Class
  summary: "Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> algorithm. This class cannot be inherited."
  remarks: "You can use the DSACryptoServiceProvider class to create digital signatures and protect the integrity of your data.       To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender&quot;s private key to create the sender&quot;s personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender&quot;s public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender&quot;s public key is common knowledge.      > [!NOTE] >  Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the DSACryptoServiceProvider class. Use DSACryptoServiceProvider only for compatibility with legacy applications and data.       This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.DSA
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> class."
  syntax:
    content: public DSACryptoServiceProvider ();
    parameters: []
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> class with the specified key size."
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "The size of the key for the asymmetric algorithm in bits."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> class with the specified parameters for the cryptographic service provider (CSP)."
  syntax:
    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "The parameters for the CSP."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> class with the specified key size and parameters for the cryptographic service provider (CSP)."
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "The size of the key for the cryptographic algorithm in bits."
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "The parameters for the CSP."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The CSP cannot be acquired.       -or-       The key cannot be created."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>dwKeySize</code> is out of range."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates the <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> signature for the specified data."
  syntax:
    content: public override byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "The data to be signed."
    return:
      type: System.Byte[]
      description: "The digital signature for the specified data."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets a <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;></xref> object that describes additional information about a cryptographic key pair."
  remarks: "Use the CspKeyContainerInfo property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.       In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the CspKeyContainerInfo property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the CspKeyContainerInfo property."
  syntax:
    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }
    return:
      type: System.Security.Cryptography.CspKeyContainerInfo
      description: "A <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;></xref> object that describes additional information about a cryptographic key pair."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "To be added."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  id: ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Exports a blob containing the key information associated with a <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> object."
  remarks: "The ExportCspBlob method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."
  syntax:
    content: public byte[] ExportCspBlob (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include the private key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Byte[]
      description: "A byte array containing the key information associated with a <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> object."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Exports the <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;></xref>."
  syntax:
    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include private parameters; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "The parameters for <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The key cannot be exported."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "To be added."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "To be added."
    return:
      type: System.Byte[]
      description: "To be added."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "To be added."
    - id: offset
      type: System.Int32
      description: "To be added."
    - id: count
      type: System.Int32
      description: "To be added."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "To be added."
    return:
      type: System.Byte[]
      description: "To be added."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  id: ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Imports a blob that represents DSA key information."
  remarks: "The ImportCspBlob method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."
  syntax:
    content: public void ImportCspBlob (byte[] keyBlob);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "A byte array that represents a DSA key blob."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Imports the specified <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;></xref>."
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "The parameters for <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The cryptographic service provider (CSP) cannot be acquired.       -or-       The <code>parameters</code> parameter has missing fields."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the name of the key exchange algorithm."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "The name of the key exchange algorithm."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  id: KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the size of the key used by the asymmetric algorithm in bits."
  remarks: "This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.       The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the KeySize property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "The size of the key used by the asymmetric algorithm."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  id: PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP)."
  remarks: "Use this property when you want to persist a key in a key container."
  syntax:
    content: public bool PersistKeyInCsp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the key should be persisted in the CSP; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  id: PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets a value that indicates whether the <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> object contains only a public key."
  remarks: "The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the PublicOnly property to determine whether the current instance contains only a public key or both a public and private key."
  syntax:
    content: public bool PublicOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;></xref> object contains only a public key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets the name of the signature algorithm."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "The name of the signature algorithm."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  id: SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Computes the hash value of the specified byte array and signs the resulting hash value."
  remarks: "This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."
  syntax:
    content: public byte[] SignData (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The input data for which to compute the hash."
    return:
      type: System.Byte[]
      description: "The <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> signature for the specified data."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  id: SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Computes the hash value of the specified input stream and signs the resulting hash value."
  remarks: "<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."
  syntax:
    content: public byte[] SignData (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "The input data for which to compute the hash."
    return:
      type: System.Byte[]
      description: "The <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> signature for the specified data."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  id: SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Signs a byte array from the specified start point to the specified end point."
  remarks: "This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."
  syntax:
    content: public byte[] SignData (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The input data to sign."
    - id: offset
      type: System.Int32
      description: "The offset into the array from which to begin using data."
    - id: count
      type: System.Int32
      description: "The number of bytes in the array to use as data."
    return:
      type: System.Byte[]
      description: "The <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> signature for the specified data."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  id: SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Computes the signature for the specified hash value by encrypting it with the private key."
  remarks: "This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."
  syntax:
    content: public byte[] SignHash (byte[] rgbHash, string str);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "The hash value of the data to be signed."
    - id: str
      type: System.String
      description: "The name of the hash algorithm used to create the hash value of the data."
    return:
      type: System.Byte[]
      description: "The <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> signature for the specified hash value."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The cryptographic service provider (CSP) cannot be acquired.       -or-       There is no private key."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  id: UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets a value indicating whether the key should be persisted in the computer&quot;s key store instead of the user profile store."
  remarks: "Setting this property to true is equivalent to passing the UseMachineKeyStore flag to a <xref:System.Security.Cryptography.CspParameters> object. The UseMachineKeyStore property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded."
  syntax:
    content: public static bool UseMachineKeyStore { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the key should be persisted in the computer key store; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  id: VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifies the specified signature data by comparing it to the signature computed for the specified data."
  remarks: "This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.       <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."
  syntax:
    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "The data that was signed."
    - id: rgbSignature
      type: System.Byte[]
      description: "The signature data to be verified."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the signature verifies as valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  id: VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifies the specified signature data by comparing it to the signature computed for the specified hash value."
  remarks: "This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.       If the `str` parameter is `null`, the default hash algorithm (SHA1) is used. The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>."
  syntax:
    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "The hash value of the data to be signed."
    - id: str
      type: System.String
      description: "The name of the hash algorithm used to create the hash value of the data."
    - id: rgbSignature
      type: System.Byte[]
      description: "The signature data to be verified."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the signature verifies as valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The cryptographic service provider (CSP) cannot be acquired.       -or-       The signature cannot be verified."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifies the <xref href=&quot;System.Security.Cryptography.DSA&quot;></xref> signature for the specified data."
  syntax:
    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "The data signed with `rgbSignature`."
    - id: rgbSignature
      type: System.Byte[]
      description: "The signature to be verified for `rgbData`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DSA
  isExternal: false
  name: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.CspKeyContainerInfo
  parent: System.Security.Cryptography
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature
  nameWithType: DSACryptoServiceProvider.CreateSignature
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose
  nameWithType: DSACryptoServiceProvider.Dispose
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob
  nameWithType: DSACryptoServiceProvider.ExportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters
  nameWithType: DSACryptoServiceProvider.ExportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData
  nameWithType: DSACryptoServiceProvider.HashData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob
  nameWithType: DSACryptoServiceProvider.ImportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters
  nameWithType: DSACryptoServiceProvider.ImportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData
  nameWithType: DSACryptoServiceProvider.SignData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash
  nameWithType: DSACryptoServiceProvider.SignHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData
  nameWithType: DSACryptoServiceProvider.VerifyData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash
  nameWithType: DSACryptoServiceProvider.VerifyHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature
  nameWithType: DSACryptoServiceProvider.VerifySignature
