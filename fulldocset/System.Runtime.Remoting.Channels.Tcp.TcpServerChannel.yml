### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  id: TcpServerChannel
  children:
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Int32)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(System.String)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(System.String,System.String@)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(System.Object)
  - System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(System.Object)
  langs:
  - csharp
  name: TcpServerChannel
  nameWithType: TcpServerChannel
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  type: Class
  summary: "Implements a server channel for remote calls that uses the TCP protocol to transmit messages."
  remarks: "Channels transport messages across remoting boundaries (for example, computers or application domains). The TcpServerChannel class transports messages using the TCP protocol.       Channels are used by the .NET Framework remoting infrastructure to transport remote calls. When a client makes a call to a remote object, the call is serialized into a message that is sent by a client channel and received by a server channel. It is then deserialized and processed. Any returned values are transmitted by the server channel and received by the client channel.       To perform additional processing of messages on the server side, you can specify an implementation of the <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> interface through which all messages processed by the TcpServerChannel instance are passed.       The TcpServerChannel instance accepts messages serialized in either binary or SOAP format.       A TcpServerChannel object has associated configuration properties that can be set at run time either in a configuration file (by invoking the static <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=fullName> method) or programmatically (by passing a <xref:System.Collections.IDictionary> collection to the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.%23ctor%2A> constructor). For a list of these configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the TcpServerChannel cannot be specified as secure."
  example:
  - "The following code example shows the use of a remotable type.  \n  \n [!code-cpp[Remoting_TcpInfo#10](~/add/codesnippet/cpp/t-system.runtime.remotin_35_1.cpp)]\n [!code-cs[Remoting_TcpInfo#10](~/add/codesnippet/csharp/t-system.runtime.remotin_35_1.cs)]  \n  \n The following code example shows the use of the TcpServerChannel class to expose a remotable type.  \n  \n [!code-cpp[Remoting_TcpInfo#30](~/add/codesnippet/cpp/t-system.runtime.remotin_35_2.cpp)]\n [!code-cs[Remoting_TcpInfo#30](~/add/codesnippet/csharp/t-system.runtime.remotin_35_2.cs)]"
  syntax:
    content: 'public class TcpServerChannel : System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.ISecurableChannel'
  inheritance:
  - System.Object
  implements:
  - System.Runtime.Remoting.Channels.IChannelReceiver
  - System.Runtime.Remoting.Channels.ISecurableChannel
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: TcpServerChannel(Int32)
  nameWithType: TcpServerChannel.TcpServerChannel(Int32)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(Int32)
  type: Constructor
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Initializes a new instance of the <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&quot;></xref> class that listens on the specified port."
  remarks: "To request that an available port be dynamically assigned, set the `port` parameter to 0 (zero)."
  example:
  - "The following code example shows the use of this constructor.  \n  \n [!code-cpp[Remoting_TcpInfo#31](~/add/codesnippet/cpp/m-system.runtime.remotin_59_1.cpp)]\n [!code-cs[Remoting_TcpInfo#31](~/add/codesnippet/csharp/m-system.runtime.remotin_59_1.cs)]"
  syntax:
    content: public TcpServerChannel (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "The port on which the channel listens."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
  id: '#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)'
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: TcpServerChannel(IDictionary,IServerChannelSinkProvider)
  nameWithType: TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider)
  type: Constructor
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Initializes a new instance of the <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&quot;></xref> class with the specified channel properties and sink."
  remarks: "For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> cannot be specified as secure.       If you do not require sink functionality, set the `sinkProvider` parameter to `null`."
  example:
  - "The following code example shows the use of this constructor to create a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> object with specific configuration properties.  \n  \n [!code-cs[Remoting_TcpAuth#21](~/add/codesnippet/csharp/472bb560-5765-4872-9612-_1.cs)]\n [!code-cpp[Remoting_TcpAuth#21](~/add/codesnippet/cpp/472bb560-5765-4872-9612-_1.cpp)]"
  syntax:
    content: public TcpServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);
    parameters:
    - id: properties
      type: System.Collections.IDictionary
      description: "A <xref:System.Collections.IDictionary> collection specifying values for configuration properties to be used by the channel."
    - id: sinkProvider
      type: System.Runtime.Remoting.Channels.IServerChannelSinkProvider
      description: "The <xref href=&quot;System.Runtime.Remoting.Channels.IServerChannelSinkProvider&quot;></xref> implementation to be used by the channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A provided channel property was badly formatted."
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: TcpServerChannel(String,Int32)
  nameWithType: TcpServerChannel.TcpServerChannel(String,Int32)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(String,Int32)
  type: Constructor
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Initializes a new instance of the <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&quot;></xref> class with the given name and that listens on the specified port."
  remarks: "This constructor sets the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName%2A> property by using the `name` parameter. If you want to register more than one channel, each channel must have a unique name.       To request that an available port be dynamically assigned, set the `port` parameter to 0 (zero)."
  example:
  - "The following code example shows how to construct a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel>.  \n  \n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.2#21](~/add/codesnippet/cpp/d1905420-7593-4238-90aa-_1.cpp)]\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.2#21](~/add/codesnippet/csharp/d1905420-7593-4238-90aa-_1.cs)]"
  syntax:
    content: public TcpServerChannel (string name, int port);
    parameters:
    - id: name
      type: System.String
      description: "The name of the channel."
    - id: port
      type: System.Int32
      description: "The port on which the channel listens."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection)
  id: '#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection)'
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: TcpServerChannel(IDictionary,IServerChannelSinkProvider,IAuthorizeRemotingConnection)
  nameWithType: TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider,IAuthorizeRemotingConnection)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider,IAuthorizeRemotingConnection)
  type: Constructor
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Initializes a new instance of the <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&quot;></xref> class with the specified channel properties, sink, and authorization provider."
  remarks: "For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).      > [!NOTE] >  If the server computer is running Windows 95/98/Me, the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> cannot be specified as secure."
  syntax:
    content: public TcpServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection authorizeCallback);
    parameters:
    - id: properties
      type: System.Collections.IDictionary
      description: "A <xref:System.Collections.IDictionary> collection that specifies values for configuration properties to be used by the channel."
    - id: sinkProvider
      type: System.Runtime.Remoting.Channels.IServerChannelSinkProvider
      description: "The <xref href=&quot;System.Runtime.Remoting.Channels.IServerChannelSinkProvider&quot;></xref> implementation to be used by the channel."
    - id: authorizeCallback
      type: System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection
      description: "The <xref href=&quot;System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection&quot;></xref> implementation to be used by the channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A provided channel property was badly formatted."
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
  id: '#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)'
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: TcpServerChannel(String,Int32,IServerChannelSinkProvider)
  nameWithType: TcpServerChannel.TcpServerChannel(String,Int32,IServerChannelSinkProvider)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(String,Int32,IServerChannelSinkProvider)
  type: Constructor
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Initializes a new instance of the <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpServerChannel&quot;></xref> class with the given name, which listens on the specified port, and uses the specified sink."
  remarks: "This constructor sets the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName%2A> property by using the `name` parameter. If you want to register more than one channel, each channel must have a unique name.       To request that an available port be dynamically assigned, set the `port` parameter to 0 (zero).       If you do not require sink functionality, set the `sinkProvider` parameter to `null`."
  example:
  - "The following code example shows how to construct a <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel>.  \n  \n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel#21](~/add/codesnippet/cpp/6f97d4a1-cd2f-4f7f-a313-_1.cpp)]\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel#21](~/add/codesnippet/csharp/6f97d4a1-cd2f-4f7f-a313-_1.cs)]"
  syntax:
    content: public TcpServerChannel (string name, int port, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);
    parameters:
    - id: name
      type: System.String
      description: "The name of the channel."
    - id: port
      type: System.Int32
      description: "The port on which the channel listens."
    - id: sinkProvider
      type: System.Runtime.Remoting.Channels.IServerChannelSinkProvider
      description: "The <xref href=&quot;System.Runtime.Remoting.Channels.IServerChannelSinkProvider&quot;></xref> implementation to be used by the channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData
  id: ChannelData
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: ChannelData
  nameWithType: TcpServerChannel.ChannelData
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData
  type: Property
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Gets channel-specific data."
  remarks: "Although returned as an instance of <xref:System.Object?displayProperty=fullName>, the value of this property can be cast to an instance of <xref:System.Runtime.Remoting.Channels.ChannelDataStore> describing the channel to which the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> object listens."
  example:
  - "The following code example shows the use of this property.  \n  \n [!code-cpp[Remoting_TcpInfo#33](~/add/codesnippet/cpp/p-system.runtime.remotin_76_1.cpp)]\n [!code-cs[Remoting_TcpInfo#33](~/add/codesnippet/csharp/p-system.runtime.remotin_76_1.cs)]"
  syntax:
    content: public object ChannelData { get; }
    return:
      type: System.Object
      description: "A <xref href=&quot;System.Runtime.Remoting.Channels.ChannelDataStore&quot;></xref> instance containing channel-specific data."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName
  id: ChannelName
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: ChannelName
  nameWithType: TcpServerChannel.ChannelName
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName
  type: Property
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Gets the name of the current channel."
  remarks: "Every registered channel has a unique name. The name is used to retrieve a specific channel when calling <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>."
  example:
  - "The following code example shows the use of this property.  \n  \n [!code-cpp[Remoting_TcpInfo#32](~/add/codesnippet/cpp/p-system.runtime.remotin_12_1.cpp)]\n [!code-cs[Remoting_TcpInfo#32](~/add/codesnippet/csharp/p-system.runtime.remotin_12_1.cs)]"
  syntax:
    content: public string ChannelName { get; }
    return:
      type: System.String
      description: "A <xref:System.String> instance that contains the name of the channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority
  id: ChannelPriority
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: ChannelPriority
  nameWithType: TcpServerChannel.ChannelPriority
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority
  type: Property
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Gets the priority of the current channel."
  remarks: "The priority controls the order in which channel data appears in a <xref:System.Runtime.Remoting.ObjRef> instance; higher priority channels appear before lower priority channels. Clients try to connect to the server channels in the order that they are listed in the <xref:System.Runtime.Remoting.ObjRef> instance. The default priority is 1; negative priorities are allowed."
  example:
  - "The following code example shows the use of this property.  \n  \n [!code-cpp[Remoting_TcpInfo#32](~/add/codesnippet/cpp/p-system.runtime.remotin_70_1.cpp)]\n [!code-cs[Remoting_TcpInfo#32](~/add/codesnippet/csharp/p-system.runtime.remotin_70_1.cs)]"
  syntax:
    content: public int ChannelPriority { get; }
    return:
      type: System.Int32
      description: "An integer that represents the priority assigned to the channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri
  id: GetChannelUri
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: GetChannelUri()
  nameWithType: TcpServerChannel.GetChannelUri()
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri()
  type: Method
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Returns the URI of the current channel."
  remarks: ''
  example:
  - "The following code example shows the use this method.  \n  \n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel#22](~/add/codesnippet/cpp/m-system.runtime.remotin_40_1.cpp)]\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel#22](~/add/codesnippet/csharp/m-system.runtime.remotin_40_1.cs)]"
  syntax:
    content: public string GetChannelUri ();
    parameters: []
    return:
      type: System.String
      description: "The URI of the current channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(System.String)
  id: GetUrlsForUri(System.String)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: GetUrlsForUri(String)
  nameWithType: TcpServerChannel.GetUrlsForUri(String)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(String)
  type: Method
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Returns an array of all the URLs for an object with the specified URI, hosted on the current <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpChannel&quot;></xref> instance."
  remarks: "This method is used by <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=fullName>."
  example:
  - "The following code example shows the use of the GetUrlsForUri method.  \n  \n [!code-vb[TcpServerChannel.GetUrlsForUri#1](~/add/codesnippet/visualbasic/bb372639-3896-49bc-9ba1-_1.vb)]\n [!code-cpp[TcpServerChannel.GetUrlsForUri#1](~/add/codesnippet/cpp/bb372639-3896-49bc-9ba1-_1.cpp)]\n [!code-cs[TcpServerChannel.GetUrlsForUri#1](~/add/codesnippet/csharp/bb372639-3896-49bc-9ba1-_1.cs)]"
  syntax:
    content: public virtual string[] GetUrlsForUri (string objectUri);
    parameters:
    - id: objectUri
      type: System.String
      description: "The URI of the object for which URLs are required."
    return:
      type: System.String[]
      description: "An array of the URLs for an object with the specified URI, hosted on the current <xref href=&quot;System.Runtime.Remoting.Channels.Tcp.TcpChannel&quot;></xref> instance."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured
  id: IsSecured
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: IsSecured
  nameWithType: TcpServerChannel.IsSecured
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured
  type: Property
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Gets or sets a Boolean value that indicates whether the current channel is secure."
  syntax:
    content: public bool IsSecured { get; set; }
    return:
      type: System.Boolean
      description: "A Boolean value that indicates whether the current instance is secure."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(System.String,System.String@)
  id: Parse(System.String,System.String@)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: Parse(String,String)
  nameWithType: TcpServerChannel.Parse(String,String)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(String,String)
  type: Method
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Extracts the channel URI and the remote well-known object URI from the specified URL."
  remarks: "The URI of an object is a value that uniquely identifies a specific object instance."
  example:
  - "The following code example shows the use this method.  \n  \n [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel#23](~/add/codesnippet/cpp/51407ae1-12ac-4e0b-a450-_1.cpp)]\n [!code-cs[System.Runtime.Remoting.Channels.Tcp.TcpServerChannel#23](~/add/codesnippet/csharp/51407ae1-12ac-4e0b-a450-_1.cs)]"
  syntax:
    content: public string Parse (string url, out string objectURI);
    parameters:
    - id: url
      type: System.String
      description: "The URL from which to extract the URI of the remote well-known object."
    - id: objectURI
      type: System.String
      description: "When this method returns, contains a <xref:System.String> instance that holds the URI of the remote well-known object. This parameter is passed uninitialized."
    return:
      type: System.String
      description: "The URI of the current channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: TcpServerChannel.StartListening(Object)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(Object)
  type: Method
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Instructs the current channel to start listening for requests."
  remarks: "It is not necessary to call this method to begin listening on a newly initialized channel.       Use this method to restart listening on a channel after the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening%2A> method has been called to stop listening on the channel.       If your channel uses a dynamically assigned port number, your port number might change when you restart listening.       The data object can be used to pass a specific initialization state to the channel. If you do not want to pass a specific state to the channel, set `data` to `null`."
  syntax:
    content: public void StartListening (object data);
    parameters:
    - id: data
      type: System.Object
      description: "Optional initialization information."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: TcpServerChannel.StopListening(Object)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(Object)
  type: Method
  assemblies:
  - System.Runtime.Remoting
  namespace: System.Runtime.Remoting.Channels.Tcp
  summary: "Instructs the current channel to stop listening for requests."
  remarks: "Use this method to stop listening on a channel. To restart listening, use the <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening%2A> method.       If your channel uses a dynamically assigned port number, your port number might change when you restart listening.       The data object can be used to pass a specific initialization state to the channel. If you do not want to pass a specific state to the channel, set `data` to `null`."
  syntax:
    content: public void StopListening (object data);
    parameters:
    - id: data
      type: System.Object
      description: "Optional state information for the channel."
  overload: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Int32)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: TcpServerChannel(Int32)
  nameWithType: TcpServerChannel.TcpServerChannel(Int32)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: TcpServerChannel(IDictionary,IServerChannelSinkProvider)
  nameWithType: TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Runtime.Remoting.Channels.IServerChannelSinkProvider
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: IServerChannelSinkProvider
  nameWithType: IServerChannelSinkProvider
  fullName: System.Runtime.Remoting.Channels.IServerChannelSinkProvider
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: TcpServerChannel(String,Int32)
  nameWithType: TcpServerChannel.TcpServerChannel(String,Int32)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: TcpServerChannel(IDictionary,IServerChannelSinkProvider,IAuthorizeRemotingConnection)
  nameWithType: TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider,IAuthorizeRemotingConnection)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(IDictionary,IServerChannelSinkProvider,IAuthorizeRemotingConnection)
- uid: System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: IAuthorizeRemotingConnection
  nameWithType: IAuthorizeRemotingConnection
  fullName: System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: TcpServerChannel(String,Int32,IServerChannelSinkProvider)
  nameWithType: TcpServerChannel.TcpServerChannel(String,Int32,IServerChannelSinkProvider)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.TcpServerChannel(String,Int32,IServerChannelSinkProvider)
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: ChannelData
  nameWithType: TcpServerChannel.ChannelData
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: ChannelName
  nameWithType: TcpServerChannel.ChannelName
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: ChannelPriority
  nameWithType: TcpServerChannel.ChannelPriority
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: GetChannelUri()
  nameWithType: TcpServerChannel.GetChannelUri()
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri()
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(System.String)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: GetUrlsForUri(String)
  nameWithType: TcpServerChannel.GetUrlsForUri(String)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: IsSecured
  nameWithType: TcpServerChannel.IsSecured
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(System.String,System.String@)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: Parse(String,String)
  nameWithType: TcpServerChannel.Parse(String,String)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(String,String)
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(System.Object)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: StartListening(Object)
  nameWithType: TcpServerChannel.StartListening(Object)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(Object)
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(System.Object)
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: StopListening(Object)
  nameWithType: TcpServerChannel.StopListening(Object)
  fullName: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(Object)
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: TcpServerChannel
  nameWithType: TcpServerChannel.TcpServerChannel
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: ChannelData
  nameWithType: TcpServerChannel.ChannelData
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: ChannelName
  nameWithType: TcpServerChannel.ChannelName
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: ChannelPriority
  nameWithType: TcpServerChannel.ChannelPriority
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: GetChannelUri
  nameWithType: TcpServerChannel.GetChannelUri
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: GetUrlsForUri
  nameWithType: TcpServerChannel.GetUrlsForUri
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: IsSecured
  nameWithType: TcpServerChannel.IsSecured
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: Parse
  nameWithType: TcpServerChannel.Parse
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: StartListening
  nameWithType: TcpServerChannel.StartListening
- uid: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening*
  parent: System.Runtime.Remoting.Channels.Tcp.TcpServerChannel
  isExternal: false
  name: StopListening
  nameWithType: TcpServerChannel.StopListening
