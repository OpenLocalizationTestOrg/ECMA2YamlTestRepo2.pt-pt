### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IServiceBehavior
  id: IServiceBehavior
  children:
  - System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: IServiceBehavior
  nameWithType: IServiceBehavior
  fullName: System.ServiceModel.Description.IServiceBehavior
  type: Interface
  summary: "Fornece um mecanismo para modificar ou inserir extensões personalizadas através de um serviço completo, incluindo o <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>."
  remarks: "Implementar o IServiceBehavior modificar, examine ou expandir algum aspeto da execução de nível de serviço ao nível da aplicação:-Utilize o <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>método para alterar os valores de propriedade de tempo de execução ou extensões personalizadas objetos tais como processadores de erro, intercetores de mensagem ou parâmetro, extensões de segurança e outros objetos de extensão personalizado de inserção.</xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>      -Utilize o <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>método para a descrição antes de examinar [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] constrói o serviço em execução para confirmar que este pode ser executado corretamente.</xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>      -Utilize o <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>método para passar para um elemento de enlace de informações personalizadas para o serviço, para que possa suportar o serviço corretamente.</xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>       Objetos de IServiceBehavior podem tornar a utilização de qualquer um destes métodos, mas, muitas vezes, apenas um é importante; Nestes casos, os métodos não utilizados podem voltar atrás sem um valor.      > [!NOTE] > Passaram em todos os métodos de IServiceBehavior <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objetos como uma parâmetros.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> O <xref:System.ServiceModel.Description.ServiceDescription>parâmetro é para serem examinados só; se modificar estes objetos o comportamento de execução é indefinido.</xref:System.ServiceModel.Description.ServiceDescription>       Para executar a tarefa de personalização para o qual destina-se, o objeto de IServiceBehavior tem de ser adicionado para o <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>propriedade antes da construção de tempo de execução do serviço.</xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> Existem três formas para efetuar este procedimento: - programaticamente adicionar o comportamento de serviço personalizado para o <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>propriedade antes do ponto de onde o <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName>método é chamado o <xref:System.ServiceModel.ServiceHost?displayProperty=fullName>objeto.</xref:System.ServiceModel.ServiceHost?displayProperty=fullName> </xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>      -Criar um atributo personalizado que implementa o IServiceBehavior e utilizá-lo para marcar classes de serviço que estão a ser modificado. Quando um <xref:System.ServiceModel.ServiceHost>objecto é construído, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] utiliza reflexão para detetar os atributos no tipo de serviço.</xref:System.ServiceModel.ServiceHost> Se quaisquer atributos implementam IServiceBehavior, estes são adicionados à coleção de comportamentos no <xref:System.ServiceModel.Description.ServiceDescription>.</xref:System.ServiceModel.Description.ServiceDescription>      -Expandir o <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>classe para suportar a especificação do comportamento de uma aplicação ou um ficheiro de configuração da máquina.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName> Consulte a secção de exemplo para obter mais informações.       Exemplos de comportamentos de serviços no [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] incluem o <xref:System.ServiceModel.ServiceBehaviorAttribute>atributo, a <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName>, a <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName>e <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName>comportamento.</xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following IServiceBehavior implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IServiceBehavior
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Fornece a capacidade para transmitir dados personalizados para elementos para suportar a implementação de contrato de enlace."
  remarks: "Utilize o método de AddBindingParameters para adicionar objetos de dados personalizados para o `parameters` coleção de elementos de enlace podem utilizar para obter informações adicionais para as ativar suportar o contrato.       Este método é chamado uma vez para cada URI de escuta. Por exemplo, se um serviço tem quatro pontos finais e dois dos atributos tem o mesmo URI de escuta, em seguida, este método obtém chamado três vezes. O motivo é que o `bindingParameters` cada pilha de canal de destino e existe um canal pilha para cada URI de escuta. Uma vez que cada chamada recebe esses pontos finais nesse URI de escuta, chama dois cada get de um único <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>, e uma chamada obtém uma coleção de dois <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>objetos.</xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>      > [!NOTE] > Todas as <xref:System.ServiceModel.Description.IServiceBehavior>métodos passaram <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objetos como uma parâmetros.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> O <xref:System.ServiceModel.Description.ServiceDescription>parâmetro é para serem examinados e a inserção de personalizações só; se modificar estes objetos; caso contrário o comportamento de execução é indefinido.</xref:System.ServiceModel.Description.ServiceDescription>"
  syntax:
    content: public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "A descrição do serviço do serviço."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "O anfitrião do serviço."
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "Os pontos finais de serviço."
    - id: bindingParameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "Objetos personalizados para o enlace de elementos tem acesso."
  overload: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Fornece a capacidade de alterar os valores de propriedade de tempo de execução ou inserir extensão personalizado objetos tais como processadores de erro, intercetores de mensagem ou parâmetro, extensões de segurança e outros objetos de extensão personalizado."
  remarks: "Implementa o método ApplyDispatchBehavior inspecionar ou modificar o <xref:System.ServiceModel.ServiceHostBase>objeto que está a ser construído para suportar o cenário algumas execução personalizado.</xref:System.ServiceModel.ServiceHostBase>      > [!NOTE] > Todas as <xref:System.ServiceModel.Description.IServiceBehavior>métodos passaram <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objetos como uma parâmetros.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> O <xref:System.ServiceModel.Description.ServiceDescription>parâmetro é para serem examinados e a inserção de personalizações só; se modificar estes objetos; caso contrário o comportamento de execução é indefinido.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "A descrição do serviço."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "O anfitrião que está atualmente a ser criado."
  overload: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Fornece a capacidade de inspecionar o anfitrião do serviço e a descrição do serviço para confirmar que o serviço pode ser executado com êxito."
  remarks: "Utilize o método Validate para confirmar se o serviço atual pode ser executado corretamente, de acordo com seu cenário.      > [!NOTE] > Todas as <xref:System.ServiceModel.Description.IServiceBehavior>métodos passaram <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objetos como uma parâmetros.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> O <xref:System.ServiceModel.Description.ServiceDescription>parâmetro é para serem examinados e a inserção de personalizações só; se modificar estes objetos; caso contrário o comportamento de execução é indefinido.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "A descrição do serviço."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "O anfitrião do serviço que está atualmente a ser criado."
  overload: System.ServiceModel.Description.IServiceBehavior.Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters
  nameWithType: IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior
  nameWithType: IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.IServiceBehavior.Validate*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate
  nameWithType: IServiceBehavior.Validate
