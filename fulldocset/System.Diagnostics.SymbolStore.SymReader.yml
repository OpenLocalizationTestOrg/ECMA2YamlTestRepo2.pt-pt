### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.SymReader
  id: SymReader
  children:
  - System.Diagnostics.SymbolStore.SymReader.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)
  - System.Diagnostics.SymbolStore.SymReader.Dispose
  - System.Diagnostics.SymbolStore.SymReader.Dispose(System.Boolean)
  - System.Diagnostics.SymbolStore.SymReader.Finalize
  - System.Diagnostics.SymbolStore.SymReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Diagnostics.SymbolStore.SymReader.GetDocuments
  - System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables
  - System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)
  - System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)
  - System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymReader.GetNamespaces
  - System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)
  - System.Diagnostics.SymbolStore.SymReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)
  - System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(System.String,System.IntPtr)
  - System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(System.String,System.IntPtr)
  - System.Diagnostics.SymbolStore.SymReader.UserEntryPoint
  langs:
  - csharp
  name: SymReader
  nameWithType: SymReader
  fullName: System.Diagnostics.SymbolStore.SymReader
  type: Class
  summary: "Provides access to documents, methods, and variables within a symbol store."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SymReader : System.Diagnostics.SymbolStore.SymReaderBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolReader
  inheritance:
  - System.Object
  - System.Diagnostics.SymbolStore.SymReaderBase
  implements:
  - System.Diagnostics.SymbolStore.ISymbolReader
  - System.IDisposable
  inheritedMembers:
  - System.Diagnostics.SymbolStore.SymReaderBase.{dtor}
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)
  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)'
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: SymReader(ISymUnmanagedReader*)
  nameWithType: SymReader.SymReader(ISymUnmanagedReader*)
  fullName: System.Diagnostics.SymbolStore.SymReader.SymReader(ISymUnmanagedReader*)
  type: Constructor
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  syntax:
    content: public SymReader (System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader* pReader);
    parameters:
    - id: pReader
      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*
      description: "To be added."
  overload: System.Diagnostics.SymbolStore.SymReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.Dispose
  id: Dispose
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymReader.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Releases the resources used by the current instance of the <xref href=&quot;System.Diagnostics.SymbolStore.SymReader&quot;></xref> class."
  syntax:
    content: public override sealed void Dispose ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymReader.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose(Boolean)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Called by the <xref:System.Diagnostics.SymbolStore.SymReader.Dispose*> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize*> methods to release the managed and unmanaged resources used by the current instance of the <xref href=&quot;System.Diagnostics.SymbolStore.SymReader&quot;></xref> class."
  remarks: "This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymReader.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymReader.Finalize%2A> methods; do not call this method directly."
  syntax:
    content: protected virtual void Dispose (bool A_0);
    parameters:
    - id: A_0
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Diagnostics.SymbolStore.SymReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.Finalize
  id: Finalize
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: Finalize()
  nameWithType: SymReader.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymReader.Finalize()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Releases unmanaged resources and performs other cleanup operations before the <xref href=&quot;System.Diagnostics.SymbolStore.SymReader&quot;></xref> is reclaimed by garbage collection."
  remarks: "This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object&quot;s `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method."
  syntax:
    content: ~SymReader ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymReader.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: GetDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetDocument(String,Guid,Guid,Guid)
  nameWithType: SymReader.GetDocument(String,Guid,Guid,Guid)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocument(String,Guid,Guid,Guid)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets a document specified by the URL for the document and optionally the language, language vendor, and type."
  remarks: "The `language`, `languageVendor`, and `documentType` parameters are currently ignored."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolDocument GetDocument (string url, Guid language, Guid languageVendor, Guid documentType);
    parameters:
    - id: url
      type: System.String
      description: "The URL that identifies the document."
    - id: language
      type: System.Guid
      description: "The document language. You can specify this parameter as <xref:System.Guid>. to indicate any language."
    - id: languageVendor
      type: System.Guid
      description: "The identity of the vendor for the document language. You can specify this parameter as <xref:System.Guid> to indicate any language vendor."
    - id: documentType
      type: System.Guid
      description: "The type of the document. You can specify this parameter as <xref:System.Guid> to indicate any document type."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "The document with the specified URL if found in the symbol store, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the document does not exist."
  overload: System.Diagnostics.SymbolStore.SymReader.GetDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetDocuments
  id: GetDocuments
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetDocuments()
  nameWithType: SymReader.GetDocuments()
  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocuments()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets an array of all documents defined in the symbol store."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolDocument[] GetDocuments ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "An array of all documents defined in the symbol store."
  overload: System.Diagnostics.SymbolStore.SymReader.GetDocuments*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is insufficient memory to satisfy the request."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables
  id: GetGlobalVariables
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetGlobalVariables()
  nameWithType: SymReader.GetGlobalVariables()
  fullName: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Throws a <xref:System.NotSupportedException> in all cases."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetGlobalVariables ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "Throws a <xref:System.NotSupportedException> in all cases."
  overload: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "In all cases."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)
  id: GetMethod(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetMethod(SymbolToken)
  nameWithType: SymReader.GetMethod(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets a symbol reader method object when given the identifier of a method."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod GetMethod (System.Diagnostics.SymbolStore.SymbolToken method);
    parameters:
    - id: method
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token of the method."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolMethod
      description: "The symbol reader method object for the specified method identifier."
  overload: System.Diagnostics.SymbolStore.SymReader.GetMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)
  id: GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetMethod(SymbolToken,Int32)
  nameWithType: SymReader.GetMethod(SymbolToken,Int32)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets a symbol reader method object when given the identifier of a method and its edit and continue version."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod GetMethod (System.Diagnostics.SymbolStore.SymbolToken method, int version);
    parameters:
    - id: method
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token of the method."
    - id: version
      type: System.Int32
      description: "The edit and continue version of the method."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolMethod
      description: "The symbol reader method object for the specified method identifier and version."
  overload: System.Diagnostics.SymbolStore.SymReader.GetMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)
  nameWithType: SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets a symbol reader method object that contains a specified position in a document."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolMethod GetMethodFromDocumentPosition (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "The document in which the method is located."
    - id: line
      type: System.Int32
      description: "The position of the line within the document. The lines are numbered, beginning with 1."
    - id: column
      type: System.Int32
      description: "The position of column within the document. The columns are numbered, beginning with 1."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolMethod
      description: "The symbol reader method object for the specified position in the document."
  overload: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetNamespaces
  id: GetNamespaces
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetNamespaces()
  nameWithType: SymReader.GetNamespaces()
  fullName: System.Diagnostics.SymbolStore.SymReader.GetNamespaces()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Throws a <xref:System.NotSupportedException> in all cases."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace[]
      description: "Throws a <xref:System.NotSupportedException> in all cases."
  overload: System.Diagnostics.SymbolStore.SymReader.GetNamespaces*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "In all cases."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)
  id: GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetSymAttribute(SymbolToken,String)
  nameWithType: SymReader.GetSymAttribute(SymbolToken,String)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(SymbolToken,String)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Throws a <xref:System.NotSupportedException> in all cases."
  syntax:
    content: public virtual byte[] GetSymAttribute (System.Diagnostics.SymbolStore.SymbolToken parent, string name);
    parameters:
    - id: parent
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "This parameter is not used."
    - id: name
      type: System.String
      description: "This parameter is not used."
    return:
      type: System.Byte[]
      description: "Throws a <xref:System.NotSupportedException> in all cases."
  overload: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "In all cases."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)
  id: GetVariables(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: GetVariables(SymbolToken)
  nameWithType: SymReader.GetVariables(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetVariables(SymbolToken)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Throws a <xref:System.NotSupportedException> in all cases."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetVariables (System.Diagnostics.SymbolStore.SymbolToken parent);
    parameters:
    - id: parent
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "This parameter is not used."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "Throws a <xref:System.NotSupportedException> in all cases."
  overload: System.Diagnostics.SymbolStore.SymReader.GetVariables*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "In all cases."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(System.String,System.IntPtr)
  id: ReplaceSymbolStore(System.String,System.IntPtr)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: ReplaceSymbolStore(String,IntPtr)
  nameWithType: SymReader.ReplaceSymbolStore(String,IntPtr)
  fullName: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(String,IntPtr)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Replaces the existing symbol store with a delta symbol store."
  remarks: "The ReplaceSymbolStore is much like the <xref:System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore%2A> method, but the given delta acts as a complete replacement rather than an update.       Only one of the parameters, `fileName` or `stream`, needs to be specified. If `fileName` is specified, the symbol store is updated with the symbols in that file. If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> ."
  syntax:
    content: public virtual void ReplaceSymbolStore (string fileName, IntPtr stream);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file containing the symbol store, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if using an in-memory store."
    - id: stream
      type: System.IntPtr
      description: "The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store."
  overload: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(System.String,System.IntPtr)
  id: UpdateSymbolStore(System.String,System.IntPtr)
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: UpdateSymbolStore(String,IntPtr)
  nameWithType: SymReader.UpdateSymbolStore(String,IntPtr)
  fullName: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(String,IntPtr)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Updates the existing symbol store with a delta symbol store."
  remarks: "This method is used in Edit and Continue scenarios as a way to update the symbol store to match deltas to the original PE file.       Only one of the parameters, `fileName` or `stream`, needs to be specified. If `fileName` is specified, the symbol store is updated with the symbols in that file. If `stream` is specified, the symbol store is updated with the data from the <xref:System.Runtime.InteropServices.ComTypes.IStream> ."
  syntax:
    content: public virtual void UpdateSymbolStore (string fileName, IntPtr stream);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file containing the symbol store, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if using an in-memory store."
    - id: stream
      type: System.IntPtr
      description: "The pointer to the input stream for the symbol store, or <xref:System.IntPtr> if using an on-disk store."
  overload: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint
  id: UserEntryPoint
  parent: System.Diagnostics.SymbolStore.SymReader
  langs:
  - csharp
  name: UserEntryPoint
  nameWithType: SymReader.UserEntryPoint
  fullName: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the metadata token for the method that was specified as the user entry point for the module, if any."
  remarks: "The return value is normally the main method."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.SymbolToken UserEntryPoint { get; }
    return:
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token for the method that is the user entry point for the module."
  overload: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An entry point was not found."
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.SymReaderBase
  isExternal: false
  name: System.Diagnostics.SymbolStore.SymReaderBase
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.Diagnostics.SymbolStore.SymReader.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader*)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: SymReader(ISymUnmanagedReader*)
  nameWithType: SymReader.SymReader(ISymUnmanagedReader*)
  fullName: System.Diagnostics.SymbolStore.SymReader.SymReader(ISymUnmanagedReader*)
- uid: System.Diagnostics.SymbolStore.SymReader.Dispose
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: Dispose()
  nameWithType: SymReader.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose()
- uid: System.Diagnostics.SymbolStore.SymReader.Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymReader.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.SymReader.Finalize
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: Finalize()
  nameWithType: SymReader.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymReader.Finalize()
- uid: System.Diagnostics.SymbolStore.SymReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetDocument(String,Guid,Guid,Guid)
  nameWithType: SymReader.GetDocument(String,Guid,Guid,Guid)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocument(String,Guid,Guid,Guid)
- uid: System.Diagnostics.SymbolStore.ISymbolDocument
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.SymbolStore.SymReader.GetDocuments
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetDocuments()
  nameWithType: SymReader.GetDocuments()
  fullName: System.Diagnostics.SymbolStore.SymReader.GetDocuments()
- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolDocument
    name: ISymbolDocument
    nameWithType: ISymbolDocument
    fullName: ISymbolDocument[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetGlobalVariables()
  nameWithType: SymReader.GetGlobalVariables()
  fullName: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetMethod(SymbolToken)
  nameWithType: SymReader.GetMethod(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken)
- uid: System.Diagnostics.SymbolStore.ISymbolMethod
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolMethod
  nameWithType: ISymbolMethod
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetMethod(SymbolToken,Int32)
  nameWithType: SymReader.GetMethod(SymbolToken,Int32)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethod(SymbolToken,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)
  nameWithType: SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition(ISymbolDocument,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.SymReader.GetNamespaces
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetNamespaces()
  nameWithType: SymReader.GetNamespaces()
  fullName: System.Diagnostics.SymbolStore.SymReader.GetNamespaces()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolNamespace
    name: ISymbolNamespace
    nameWithType: ISymbolNamespace
    fullName: ISymbolNamespace[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetSymAttribute(SymbolToken,String)
  nameWithType: SymReader.GetSymAttribute(SymbolToken,String)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute(SymbolToken,String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetVariables(SymbolToken)
  nameWithType: SymReader.GetVariables(SymbolToken)
  fullName: System.Diagnostics.SymbolStore.SymReader.GetVariables(SymbolToken)
- uid: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(System.String,System.IntPtr)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: ReplaceSymbolStore(String,IntPtr)
  nameWithType: SymReader.ReplaceSymbolStore(String,IntPtr)
  fullName: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore(String,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(System.String,System.IntPtr)
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: UpdateSymbolStore(String,IntPtr)
  nameWithType: SymReader.UpdateSymbolStore(String,IntPtr)
  fullName: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore(String,IntPtr)
- uid: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: UserEntryPoint
  nameWithType: SymReader.UserEntryPoint
  fullName: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint
- uid: System.Diagnostics.SymbolStore.SymReader.#ctor*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: SymReader
  nameWithType: SymReader.SymReader
- uid: System.Diagnostics.SymbolStore.SymReader.Dispose*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: Dispose
  nameWithType: SymReader.Dispose
- uid: System.Diagnostics.SymbolStore.SymReader.Finalize*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: Finalize
  nameWithType: SymReader.Finalize
- uid: System.Diagnostics.SymbolStore.SymReader.GetDocument*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetDocument
  nameWithType: SymReader.GetDocument
- uid: System.Diagnostics.SymbolStore.SymReader.GetDocuments*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetDocuments
  nameWithType: SymReader.GetDocuments
- uid: System.Diagnostics.SymbolStore.SymReader.GetGlobalVariables*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetGlobalVariables
  nameWithType: SymReader.GetGlobalVariables
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethod*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetMethod
  nameWithType: SymReader.GetMethod
- uid: System.Diagnostics.SymbolStore.SymReader.GetMethodFromDocumentPosition*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetMethodFromDocumentPosition
  nameWithType: SymReader.GetMethodFromDocumentPosition
- uid: System.Diagnostics.SymbolStore.SymReader.GetNamespaces*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetNamespaces
  nameWithType: SymReader.GetNamespaces
- uid: System.Diagnostics.SymbolStore.SymReader.GetSymAttribute*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetSymAttribute
  nameWithType: SymReader.GetSymAttribute
- uid: System.Diagnostics.SymbolStore.SymReader.GetVariables*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: GetVariables
  nameWithType: SymReader.GetVariables
- uid: System.Diagnostics.SymbolStore.SymReader.ReplaceSymbolStore*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: ReplaceSymbolStore
  nameWithType: SymReader.ReplaceSymbolStore
- uid: System.Diagnostics.SymbolStore.SymReader.UpdateSymbolStore*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: UpdateSymbolStore
  nameWithType: SymReader.UpdateSymbolStore
- uid: System.Diagnostics.SymbolStore.SymReader.UserEntryPoint*
  parent: System.Diagnostics.SymbolStore.SymReader
  isExternal: false
  name: UserEntryPoint
  nameWithType: SymReader.UserEntryPoint
