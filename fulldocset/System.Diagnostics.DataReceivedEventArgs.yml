### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.DataReceivedEventArgs
  id: DataReceivedEventArgs
  children:
  - System.Diagnostics.DataReceivedEventArgs.Data
  langs:
  - csharp
  name: DataReceivedEventArgs
  nameWithType: DataReceivedEventArgs
  fullName: System.Diagnostics.DataReceivedEventArgs
  type: Class
  summary: "Disponibiliza dados para o <xref href=&quot;System.Diagnostics.Process.OutputDataReceived&quot;> </xref> e <xref href=&quot;System.Diagnostics.Process.ErrorDataReceived&quot;> </xref> eventos."
  remarks: "No modo assíncrono recolher o redirecionada <xref:System.Diagnostics.Process.StandardOutput%2A>ou <xref:System.Diagnostics.Process.StandardError%2A>fluxo de saída de um processo, tem de criar um método que processa os eventos de saída de fluxo redirecionada.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.StandardOutput%2A> O método do processador de eventos é chamado quando o processo escreve no fluxo redirecionado. O delegado do evento chama o processador de eventos com uma instância do DataReceivedEventArgs. O <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>propriedade contém a linha de texto que o processo escreveu no fluxo redirecionada.</xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>"
  example:
  - "The following code example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `sort` command. The `sort` command is a console application that reads and sorts text input.  \n  \n The example creates an event delegate for the `SortOutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event. The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.  \n  \n [!code-cpp[Process_AsyncStreams#1](~/add/codesnippet/cpp/t-system.diagnostics.dat_0_1.cpp)]\n [!code-vb[Process_AsyncStreams#1](~/add/codesnippet/visualbasic/t-system.diagnostics.dat_0_1.vb)]\n [!code-cs[Process_AsyncStreams#1](~/add/codesnippet/csharp/t-system.diagnostics.dat_0_1.cs)]"
  syntax:
    content: 'public class DataReceivedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.DataReceivedEventArgs.Data
  id: Data
  parent: System.Diagnostics.DataReceivedEventArgs
  langs:
  - csharp
  name: Data
  nameWithType: DataReceivedEventArgs.Data
  fullName: System.Diagnostics.DataReceivedEventArgs.Data
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a linha de carateres que foi escrita para um redirecionada <xref href=&quot;System.Diagnostics.Process&quot;> </xref> fluxo de saída."
  remarks: "When you redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> or <xref:System.Diagnostics.Process.StandardError%2A> stream of a <xref:System.Diagnostics.Process> to your event handler, an event is raised each time the process writes a line to the redirected stream. The Data property is the line that the <xref:System.Diagnostics.Process> wrote to the redirected output stream. Your event handler can use the Data property to filter process output or write output to an alternate location. For example, you might create an event handler that stores all error output lines into a designated error log file.  \n  \n A line is defined as a sequence of characters followed by a line feed (\"\\n\") or a carriage return immediately followed by a line feed (\"\\r\\n\"). The line characters are encoded using the default system ANSI code page. The Data property does not include the terminating carriage return or line feed.  \n  \n When the redirected stream is closed, a null line is sent to the event handler. Ensure your event handler checks the Data property appropriately before accessing it. For example, you can use the static method <xref:System.String.IsNullOrEmpty%2A?displayProperty=fullName> to validate the Data property in your event handler."
  example:
  - "The following code example illustrates a simple event handler associated with the <xref:System.Diagnostics.Process.OutputDataReceived> event. The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.  \n  \n [!code-cpp[Process_AsyncStreams#4](~/add/codesnippet/cpp/p-system.diagnostics.dat_1.cpp)]\n [!code-cs[Process_AsyncStreams#4](~/add/codesnippet/csharp/p-system.diagnostics.dat_1.cs)]\n [!code-vb[Process_AsyncStreams#4](~/add/codesnippet/visualbasic/p-system.diagnostics.dat_1.vb)]"
  syntax:
    content: public string Data { get; }
    return:
      type: System.String
      description: "A linha que foi escrita por um associados <xref href=&quot;System.Diagnostics.Process&quot;> </xref> ao respetivo redirecionada <> </> *> ou <> </> *> fluxo."
  overload: System.Diagnostics.DataReceivedEventArgs.Data*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Diagnostics.DataReceivedEventArgs.Data
  parent: System.Diagnostics.DataReceivedEventArgs
  isExternal: false
  name: Data
  nameWithType: DataReceivedEventArgs.Data
  fullName: System.Diagnostics.DataReceivedEventArgs.Data
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.DataReceivedEventArgs.Data*
  parent: System.Diagnostics.DataReceivedEventArgs
  isExternal: false
  name: Data
  nameWithType: DataReceivedEventArgs.Data
