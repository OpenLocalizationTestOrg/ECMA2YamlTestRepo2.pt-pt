### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.IMultiValueConverter
  id: IMultiValueConverter
  children:
  - System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  - System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  langs:
  - csharp
  name: IMultiValueConverter
  nameWithType: IMultiValueConverter
  fullName: System.Windows.Data.IMultiValueConverter
  type: Interface
  summary: "Provides a way to apply custom logic in a <xref href=&quot;System.Windows.Data.MultiBinding&quot;></xref>."
  remarks: "To associate a converter with a <xref:System.Windows.Data.MultiBinding>, create a class that implements the IMultiValueConverter interface, and then implement the <xref:System.Windows.Data.IMultiValueConverter.Convert%2A> and <xref:System.Windows.Data.IMultiValueConverter.ConvertBack%2A> methods.       Individual bindings in the collection can have their own value converters. For more information, see <xref:System.Windows.Data.IValueConverter>."
  syntax:
    content: public interface IMultiValueConverter
  implements: []
  platform:
  - net462
- uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  id: Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  langs:
  - csharp
  name: Convert(Object[],Type,Object,CultureInfo)
  nameWithType: IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target."
  remarks: "The data binding engine does not catch exceptions that are thrown by a user-supplied converter. Any exception that is thrown by the Convert method, or any uncaught exceptions that are thrown by methods that the Convert method calls, are treated as run-time errors. Handle anticipated problems by returning <xref:System.Windows.DependencyProperty>.<xref:System.Windows.DependencyProperty.UnsetValue>."
  syntax:
    content: public object Convert (object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture);
    parameters:
    - id: values
      type: System.Object[]
      description: "The array of values that the source bindings in the <xref href=&quot;System.Windows.Data.MultiBinding&quot;></xref> produces. The value <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref> indicates that the source binding has no value to provide for conversion."
    - id: targetType
      type: System.Type
      description: "The type of the binding target property."
    - id: parameter
      type: System.Object
      description: "The converter parameter to use."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The culture to use in the converter."
    return:
      type: System.Object
      description: "A converted value.       If the method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the valid <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> value is used.       A return value of <xref href=&quot;System.Windows.DependencyProperty&quot;></xref>.<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref> indicates that the converter did not produce a value, and that the binding will use the <xref:System.Windows.Data.BindingBase.FallbackValue*> if it is available, or else will use the default value.       A return value of <xref href=&quot;System.Windows.Data.Binding&quot;></xref>.<xref href=&quot;System.Windows.Data.Binding.DoNothing&quot;></xref> indicates that the binding does not transfer the value or use the <xref:System.Windows.Data.BindingBase.FallbackValue*> or the default value."
  overload: System.Windows.Data.IMultiValueConverter.Convert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  id: ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  langs:
  - csharp
  name: ConvertBack(Object,Type[],Object,CultureInfo)
  nameWithType: IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Converts a binding target value to the source binding values."
  remarks: "If there are more return values than there are bindings in the <xref:System.Windows.Data.MultiBinding>, the excess return values are ignored. If there are more source bindings than there are return values, the remaining source bindings do not have any values set on them. Types of return values are not verified against `targetTypes`; the values are set on the source bindings directly.       Return <xref:System.Windows.Data.Binding.DoNothing> at position `i` to indicate that no value is to be set on the source binding at index `i`.       Return <xref:System.Windows.DependencyProperty>.<xref:System.Windows.DependencyProperty.UnsetValue> at position `i` to indicate that the converter is unable to provide a value for the source binding at index `i`, and that no value is to be set on it.       Return `null` to indicate that the converter cannot perform the conversion or that it does not support conversion in this direction.       The data binding engine does not catch exceptions that are thrown by a user-supplied converter. Any exception that is thrown by the ConvertBack method or any uncaught exceptions that are thrown by methods that the ConvertBack method calls are treated as run-time errors. Handle anticipated problems by returning `null`."
  syntax:
    content: public object[] ConvertBack (object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "The value that the binding target produces."
    - id: targetTypes
      type: System.Type[]
      description: "The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return."
    - id: parameter
      type: System.Object
      description: "The converter parameter to use."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The culture to use in the converter."
    return:
      type: System.Object[]
      description: "An array of values that have been converted from the target value back to the source values."
  overload: System.Windows.Data.IMultiValueConverter.ConvertBack*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: Convert(Object[],Type,Object,CultureInfo)
  nameWithType: IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: ConvertBack(Object,Type[],Object,CultureInfo)
  nameWithType: IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Data.IMultiValueConverter.Convert*
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: Convert
  nameWithType: IMultiValueConverter.Convert
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack*
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: ConvertBack
  nameWithType: IMultiValueConverter.ConvertBack
