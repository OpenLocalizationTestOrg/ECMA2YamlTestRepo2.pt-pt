### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.InvokePattern
  id: InvokePattern
  children:
  - System.Windows.Automation.InvokePattern.Invoke
  - System.Windows.Automation.InvokePattern.InvokedEvent
  - System.Windows.Automation.InvokePattern.Pattern
  langs:
  - csharp
  name: InvokePattern
  nameWithType: InvokePattern
  fullName: System.Windows.Automation.InvokePattern
  type: Class
  summary: "Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated."
  remarks: "Controls support InvokePattern if the same behavior is not exposed through another control pattern. For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control will not support InvokePattern.       [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)] elements that represent controls such as check boxes and radio buttons, which maintain a state, instead support <xref:System.Windows.Automation.TogglePattern> or <xref:System.Windows.Automation.SelectionItemPattern>."
  syntax:
    content: 'public class InvokePattern : System.Windows.Automation.BasePattern'
  inheritance:
  - System.Object
  - System.Windows.Automation.BasePattern
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Automation.InvokePattern.Invoke
  id: Invoke
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: Invoke()
  nameWithType: InvokePattern.Invoke()
  fullName: System.Windows.Automation.InvokePattern.Invoke()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "Sends a request to activate a control and initiate its single, unambiguous action."
  remarks: "Calls to Invoke should return immediately without blocking. However, this behavior is entirely dependent on the [!INCLUDE[TLA#tla_uiautomation](~/add/includes/tlasharptla-uiautomation-md.md)] provider implementation. In scenarios where calling Invoke causes a blocking issue (such as a modal dialog) a separate helper thread may be required to call the method."
  example:
  - "In the following example an <xref:System.Windows.Automation.InvokePattern>control pattern is obtained from a control and the Invoke method is called.  \n  \n [!code-cs[UIAInvokePattern_snip#101](~/add/codesnippet/CSharp/UIAInvokePattern_snip/UIAInvokePattern_snippets.cs#101)]\n [!code-vb[UIAInvokePattern_snip#101](~/add/codesnippet/VisualBasic/UIAInvokePattern_snip/UIAInvokePattern_snippets.vb#101)]"
  syntax:
    content: public void Invoke ();
    parameters: []
  overload: System.Windows.Automation.InvokePattern.Invoke*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The element does not support the  control pattern or is hidden or blocked."
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "The element is not enabled. Can be raised when a UI Automation provider has implemented its own handling of the <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled%2A> property."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Automation.InvokePattern.InvokedEvent
  id: InvokedEvent
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: InvokedEvent
  nameWithType: InvokePattern.InvokedEvent
  fullName: System.Windows.Automation.InvokePattern.InvokedEvent
  type: Field
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "Identifies the event raised when a control is invoked or activated."
  remarks: "This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.       The InvokedEvent identifier is passed as a parameter to <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>."
  example:
  - "In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the InvokedEvent identifier field.  \n  \n [!code-vb[UIAClient_snip#101](~/add/codesnippet/VisualBasic/UIAClient_snip/ClientForm.vb#101)]\n [!code-cs[UIAClient_snip#101](~/add/codesnippet/CSharp/CustomElementClient/ClientForm.cs#101)]"
  syntax:
    content: public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;
    return:
      type: System.Windows.Automation.AutomationEvent
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Automation.InvokePattern.Pattern
  id: Pattern
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: Pattern
  nameWithType: InvokePattern.Pattern
  fullName: System.Windows.Automation.InvokePattern.Pattern
  type: Field
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "Identifies the <see cref=&quot;T:System.Windows.Automation.InvokePattern&quot;></see> control pattern."
  remarks: "This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.       The pattern identifier is passed to methods such as <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> to retrieve the control pattern of interest from the specified <xref:System.Windows.Automation.AutomationElement>."
  example:
  - "In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.  \n  \n [!code-cs[UIAInvokePattern_snip#101](~/add/codesnippet/CSharp/UIAInvokePattern_snip/UIAInvokePattern_snippets.cs#101)]\n [!code-vb[UIAInvokePattern_snip#101](~/add/codesnippet/VisualBasic/UIAInvokePattern_snip/UIAInvokePattern_snippets.vb#101)]"
  syntax:
    content: public static readonly System.Windows.Automation.AutomationPattern Pattern;
    return:
      type: System.Windows.Automation.AutomationPattern
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Windows.Automation.BasePattern
  isExternal: false
  name: System.Windows.Automation.BasePattern
- uid: System.Windows.Automation.InvokePattern.Invoke
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Invoke()
  nameWithType: InvokePattern.Invoke()
  fullName: System.Windows.Automation.InvokePattern.Invoke()
- uid: System.Windows.Automation.InvokePattern.InvokedEvent
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: InvokedEvent
  nameWithType: InvokePattern.InvokedEvent
  fullName: System.Windows.Automation.InvokePattern.InvokedEvent
- uid: System.Windows.Automation.AutomationEvent
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationEvent
  nameWithType: AutomationEvent
  fullName: System.Windows.Automation.AutomationEvent
- uid: System.Windows.Automation.InvokePattern.Pattern
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Pattern
  nameWithType: InvokePattern.Pattern
  fullName: System.Windows.Automation.InvokePattern.Pattern
- uid: System.Windows.Automation.AutomationPattern
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationPattern
  nameWithType: AutomationPattern
  fullName: System.Windows.Automation.AutomationPattern
- uid: System.Windows.Automation.InvokePattern.Invoke*
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Invoke
  nameWithType: InvokePattern.Invoke
