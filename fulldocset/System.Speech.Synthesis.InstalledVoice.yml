### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.InstalledVoice
  id: InstalledVoice
  children:
  - System.Speech.Synthesis.InstalledVoice.Enabled
  - System.Speech.Synthesis.InstalledVoice.Equals(System.Object)
  - System.Speech.Synthesis.InstalledVoice.GetHashCode
  - System.Speech.Synthesis.InstalledVoice.VoiceInfo
  langs:
  - csharp
  name: InstalledVoice
  nameWithType: InstalledVoice
  fullName: System.Speech.Synthesis.InstalledVoice
  type: Class
  summary: "Contains information about a speech synthesis voice installed in Windows."
  remarks: "Use this class to get information about an installed voice, including its culture, name, gender, age, and whether it is enabled.       To perform text-to-speech using the language specified in the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as &quot;en&quot; are also permitted."
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices.   \n        Console.WriteLine(\"Installed voices -\");  \n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          string AudioFormats = \"\";  \n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \n          {  \n            AudioFormats += String.Format(\"{0}\\n\",  \n            fmt.EncodingFormat.ToString());  \n          }  \n  \n          Console.WriteLine(\" Name:          \" + info.Name);  \n          Console.WriteLine(\" Culture:       \" + info.Culture);  \n          Console.WriteLine(\" Age:           \" + info.Age);  \n          Console.WriteLine(\" Gender:        \" + info.Gender);  \n          Console.WriteLine(\" Description:   \" + info.Description);  \n          Console.WriteLine(\" ID:            \" + info.Id);  \n          Console.WriteLine(\" Enabled:       \" + voice.Enabled);  \n          if (info.SupportedAudioFormats.Count != 0)  \n          {  \n            Console.WriteLine( \" Audio formats: \" + AudioFormats);  \n          }  \n          else  \n          {  \n            Console.WriteLine(\" No supported audio formats found\");  \n          }  \n  \n          string AdditionalInfo = \"\";  \n          foreach (string key in info.AdditionalInfo.Keys)  \n          {  \n            AdditionalInfo += String.Format(\"  {0}: {1}\\n\", key, info.AdditionalInfo[key]);  \n          }  \n  \n          Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n          Console.WriteLine();  \n        }  \n      }  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{VoiceInfo.Name} [{Enabled ? "Enabled" : "Disabled"}]")]

      public class InstalledVoice
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.InstalledVoice.Enabled
  id: Enabled
  parent: System.Speech.Synthesis.InstalledVoice
  langs:
  - csharp
  name: Enabled
  nameWithType: InstalledVoice.Enabled
  fullName: System.Speech.Synthesis.InstalledVoice.Enabled
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Gets or sets whether a voice can be used to generate speech."
  remarks: "The value of the Enabled property is `true` by default. When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its Enabled property to `false`. An application cannot select a voice whose Enabled property is `false`. Typically, applications will not set a voiceâ€™s Enabled property."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "Returns a <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref> that represents the enabled state of the voice."
  overload: System.Speech.Synthesis.InstalledVoice.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.InstalledVoice.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Synthesis.InstalledVoice
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: InstalledVoice.Equals(Object)
  fullName: System.Speech.Synthesis.InstalledVoice.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Determines if a given object is an instance of <xref href=&quot;System.Speech.Synthesis.InstalledVoice&quot;></xref> and equal to the current instance of <xref href=&quot;System.Speech.Synthesis.InstalledVoice&quot;></xref>."
  remarks: "The method returns false if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.Synthesis.InstalledVoice>."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "An object that can be cast to an instance of <xref href=&quot;System.Speech.Synthesis.InstalledVoice&quot;></xref>."
    return:
      type: System.Boolean
      description: "Returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current instance of <xref href=&quot;System.Speech.Synthesis.InstalledVoice&quot;></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Synthesis.InstalledVoice.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.InstalledVoice.GetHashCode
  id: GetHashCode
  parent: System.Speech.Synthesis.InstalledVoice
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: InstalledVoice.GetHashCode()
  fullName: System.Speech.Synthesis.InstalledVoice.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Provides a hash code for an `InstalledVoice` object."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref href=&quot;System.Speech.Synthesis.InstalledVoice&quot;></xref> object."
  overload: System.Speech.Synthesis.InstalledVoice.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.InstalledVoice.VoiceInfo
  id: VoiceInfo
  parent: System.Speech.Synthesis.InstalledVoice
  langs:
  - csharp
  name: VoiceInfo
  nameWithType: InstalledVoice.VoiceInfo
  fullName: System.Speech.Synthesis.InstalledVoice.VoiceInfo
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Gets information about a voice, such as culture, name, gender, and age."
  syntax:
    content: public System.Speech.Synthesis.VoiceInfo VoiceInfo { get; }
    return:
      type: System.Speech.Synthesis.VoiceInfo
      description: "The information about an installed voice."
  overload: System.Speech.Synthesis.InstalledVoice.VoiceInfo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.InstalledVoice.Enabled
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: Enabled
  nameWithType: InstalledVoice.Enabled
  fullName: System.Speech.Synthesis.InstalledVoice.Enabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.InstalledVoice.Equals(System.Object)
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: Equals(Object)
  nameWithType: InstalledVoice.Equals(Object)
  fullName: System.Speech.Synthesis.InstalledVoice.Equals(Object)
- uid: System.Speech.Synthesis.InstalledVoice.GetHashCode
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: GetHashCode()
  nameWithType: InstalledVoice.GetHashCode()
  fullName: System.Speech.Synthesis.InstalledVoice.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.InstalledVoice.VoiceInfo
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: VoiceInfo
  nameWithType: InstalledVoice.VoiceInfo
  fullName: System.Speech.Synthesis.InstalledVoice.VoiceInfo
- uid: System.Speech.Synthesis.VoiceInfo
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
- uid: System.Speech.Synthesis.InstalledVoice.Enabled*
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: Enabled
  nameWithType: InstalledVoice.Enabled
- uid: System.Speech.Synthesis.InstalledVoice.Equals*
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: Equals
  nameWithType: InstalledVoice.Equals
- uid: System.Speech.Synthesis.InstalledVoice.GetHashCode*
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: GetHashCode
  nameWithType: InstalledVoice.GetHashCode
- uid: System.Speech.Synthesis.InstalledVoice.VoiceInfo*
  parent: System.Speech.Synthesis.InstalledVoice
  isExternal: false
  name: VoiceInfo
  nameWithType: InstalledVoice.VoiceInfo
