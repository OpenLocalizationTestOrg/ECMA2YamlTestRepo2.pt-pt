### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.GrammarBuilder
  id: GrammarBuilder
  children:
  - System.Speech.Recognition.GrammarBuilder.#ctor
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.AppendDictation
  - System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendWildcard
  - System.Speech.Recognition.GrammarBuilder.Culture
  - System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  langs:
  - csharp
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
  type: Class
  summary: "Provides a mechanism for programmatically building the constraints for a speech recognition grammar."
  remarks: "Speech recognition grammars are commonly authored in the XML format defined by the [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761). If you are familiar with SRGS but want to generate the grammars programmatically, you can use the <xref:System.Speech.Recognition.SrgsGrammar> namespace, whose members correspond closely to the elements and attributes defined by SRGS. If you are unfamiliar with SRGS, or you want a lightweight, programmatic approach to authoring grammars with which you can efficiently accomplish many common scenarios; you can use the GrammarBuilder and <xref:System.Speech.Recognition.Choices> classes.       Use GrammarBuilder objects to build a hierarchical tree composed of <xref:System.Speech.Recognition.Choices> objects that contain alternate phrases, interspersed with preamble and post-amble phrases at each node, and seeded with semantic values that convey  meaning back to the application.       To use a GrammarBuilder to create a <xref:System.Speech.Recognition.Grammar> object, use the following steps.      1.  Create a GrammarBuilder object.      2.  Append constraints to the GrammarBuilder, such as <xref:System.String> objects, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, and other GrammarBuilder objects that define the constraints for the grammar.      3.  Use one of the <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructors to create a <xref:System.Speech.Recognition.Grammar> object from the completed GrammarBuilder grammar.       Authoring with GrammarBuilder is best suited to grammars that have a single rule containing lists, or perhaps lists of lists. To programmatically build grammars that have multiple rules, or that need to make internal rule references, use the classes of the <xref:System.Speech.Recognition.SrgsGrammar> namespace.       Instances of GrammarBuilder can also be obtained by implicit conversions from certain other classes or by combining a  GrammarBuilder with a second object that contains constraints for a grammar.. For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators and the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods.       To add rules to an existing GrammarBuilder, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods.      > [!IMPORTANT] >  The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c).       To help with debugging, the <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> property returns the current status of the GrammarBuilder as a string.       For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)."
  example:
  - "The following example uses  GrammarBuilder and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two GrammarBuilder objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with GrammarBuilder.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a GrammarBuilder constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{DebugSummary}")]

      public class GrammarBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new, empty instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class."
  remarks: "To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder> object, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.      > [!IMPORTANT] >  The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  GrammarBuilder bothPhrases = new GrammarBuilder();  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  bothPhrases.Append(bothChoices);  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  id: '#ctor(System.Speech.Recognition.Choices)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class from a set of alternatives."
  remarks: "For more information about building a speech recognition grammar that contains alternatives, see [Using Choices to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/en-us/5b18db18-a5f6-46a3-aa77-6d3141544efd)."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "The set of alternatives."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  id: '#ctor(System.Speech.Recognition.SemanticResultKey)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class from a semantic key."
  remarks: "When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result. You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event. If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key. See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.      > [!IMPORTANT] >  When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices object for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the Grammar object from the GrammarBuilder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "The semantic key."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  id: '#ctor(System.Speech.Recognition.SemanticResultValue)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class from a semantic value."
  remarks: "When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result. You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event. If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key. See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.      > [!IMPORTANT] >  When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the grammar from the grammar builder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "The semantic value or name/value pair."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class from a sequence of words."
  remarks: "The phrase represents an exact spoken phrase that the speech recognition grammar can recognize. For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "The sequence of words."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: '#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class for a subset of a sequence of words."
  remarks: "The `phrase` parameter represents the phrase that the speech recognition grammar can recognize. The `subsetMatchingMode` parameter specifies a subset of the phrase that can be spoken to achieve successful recognition of the entire phrase. You can use this to create a grammar with a list of entries that have long names, without requiring users to speak an entire name to match an item.       For more information about the matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode>. For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)."
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars. If the value of `phrase` is \"one two three four five six seven\", then the Subsequence grammar recognizes the input \"two three four\", but not the input \"one three five\". However, the Ordered Subset grammar recognizes both of these inputs.  \n  \n```c#  \n  \nprivate static IEnumerable<Grammar>  \n  CreateMatchingModeGrammars(string phrase)  \n{  \n  List<Grammar> grammars = new List<Grammar>(5);  \n  \n  Choices modeChoice = new Choices();  \n  Type enumType = typeof(SubsetMatchingMode);  \n  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  \n  {  \n    string modeName = Enum.GetName(enumType, mode);  \n    modeName = BreakAtCaps(modeName);  \n  \n    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  \n    Grammar modeGrammar = new Grammar(builder);  \n    modeGrammar.Name = modeName;  \n    modeGrammar.Enabled = false;  \n    grammars.Add(modeGrammar);  \n  \n    modeChoice.Add(modeName);  \n  }  \n  \n  Grammar choiceGrammar = new Grammar(modeChoice);  \n  choiceGrammar.Name = \"choice\";  \n  grammars.Add(choiceGrammar);  \n  \n  return grammars;  \n}  \n  \n// Insert spaces preceding each uppercase letter in a string.   \nprivate static string BreakAtCaps(string item)  \n{  \n  if (item == null || item.Length == 0)  \n  {  \n    return item;  \n  }  \n  \n  StringBuilder sb = new StringBuilder(item[0].ToString());  \n  for (int i = 1; i < item.Length; i++)  \n  {  \n    char c = item[i];  \n    if (char.IsUpper(c))  \n    {  \n      sb.Append(\" \");  \n    }  \n    sb.Append(c);  \n  }  \n  \n  return sb.ToString();  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "The sequence of words."
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "The matching mode the speech recognition grammar uses to recognize the phrase."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class from a repeated element."
  remarks: "If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.       The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.      > [!IMPORTANT] >  When you specify repeats for <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object from a string array of alternative toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The repeated element."
    - id: minRepeat
      type: System.Int32
      description: "The minimum number of times that input matching the element defined by `builder` must occur to constitute a match."
    - id: maxRepeat
      type: System.Int32
      description: "The maximum number of times that input matching the element defined by `builder` can occur to constitute a match."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> class from the sequence of words in a <xref:System.String> and specifies how many times the <xref:System.String> can be repeated."
  remarks: "If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.       The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`. For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "The repeated sequence of words."
    - id: minRepeat
      type: System.Int32
      description: "The minimum number of times that input matching the phrase must occur to constitute a match."
    - id: maxRepeat
      type: System.Int32
      description: "The maximum number of times that input matching the phrase can occur to constitute a match."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a <xref href=&quot;System.Speech.Recognition.Choices&quot;></xref> object followed by a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter.       For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.      > [!IMPORTANT] >  When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Add Semantics to a GrammarBuilder Grammar](https://msdn.microsoft.com/library/hh361581.aspx)."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "The first grammar element, which represents a set of alternatives."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The second grammar element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>choices</code> element followed by the <code>builder</code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> object followed by a <xref href=&quot;System.Speech.Recognition.Choices&quot;></xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter.       For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.      > [!IMPORTANT] >  When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The first grammar element."
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "The second grammar element, which represents a set of alternatives."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>builder</code> element followed by the <code>choices</code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a sequence of two <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> objects."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder1` or `builder2` parameter.       For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.      > [!IMPORTANT] >  When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "The first grammar element."
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "The second grammar element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>builder1</code> element followed by the <code>builder2</code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> object followed by a phrase."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter.       For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The first grammar element."
    - id: phrase
      type: System.String
      description: "The second grammar element, which represents a sequence of words."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>builder</code> element followed by the <code>phrase</code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a phrase followed by a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter.       For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "The first grammar element, which represents a sequence of words."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The second grammar element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>phrase</code> element followed by the <code>builder</code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  id: Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a set of alternatives to the current sequence of grammar elements."
  remarks: "`alternateChoices` is added to the end of the current sequence of elements.      > [!IMPORTANT] >  When you append <xref:System.Speech.Recognition.Choices> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. The example highlights the use of the Append method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "The set of alternatives to append."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  id: Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a grammar element to the current sequence of grammar elements."
  remarks: "`builder` is added to the end of the current sequence of grammar elements.      > [!NOTE] >  When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The grammar element to append."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  id: Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a semantic key to the current sequence of grammar elements."
  remarks: "`key` is added to the end of the current sequence of elements.      > [!IMPORTANT] >  When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey>instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue>object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create a Choices object and add  cities and airport codes  \n        // using SemanticResultValue objects.  \n        Choices cities = new Choices();  \n        cities.Add(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n        cities.Add(new SemanticResultValue(\"Boston\", \"BOS\"));  \n        cities.Add(new SemanticResultValue(\"Miami\", \"MIA\"));  \n        cities.Add(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "The semantic key to append."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  id: Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a semantic value to the current sequence of grammar elements."
  remarks: "`value` is added to the end of the current sequence of elements.      > [!IMPORTANT] >  When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey>instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue>object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create GrammarBuilder objects and append SemanticResultValue objects   \n        // that contain cities and airport codes.  \n  \n        GrammarBuilder chicago = new GrammarBuilder();  \n        chicago.Append(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n  \n        GrammarBuilder boston = new GrammarBuilder();  \n        boston.Append(new SemanticResultValue(\"Boston\", \"BOS\"));  \n  \n        GrammarBuilder miami = new GrammarBuilder();  \n        miami.Append(new SemanticResultValue(\"Miami\", \"MIA\"));  \n  \n        GrammarBuilder dallas = new GrammarBuilder();  \n        dallas.Append(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Create a Choices object and add the cities using implicit conversion from   \n        // SemanticResultValue to GrammarBuilder.  \n        Choices cities = new Choices();  \n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "The semantic value to append."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a phrase to the current sequence of grammar elements."
  remarks: '`phrase` is added to the end of the current sequence of elements.'
  syntax:
    content: public void Append (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "The sequence of words to append."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends an element for a subset of a phrase to the current sequence of grammar elements."
  remarks: "The subset element is added to the end of the current sequence of elements. For more information about building a speech recognition grammar using strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114).       For detailed information on the use of subset matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName>."
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value. For example, the generated grammar `OrderedSubset` recognizes the phrases, \"three four five\" and \"one three five\", and the grammar `Subsequence` recognizes the phrase \"three four five\", but not the phrase, \"one three five\".  \n  \n```c#  \n  \nprivate Grammar[] CreateSubsetMatchTest()  \n{  \n  List<Grammar> grammars = new List<Grammar>(4);  \n  \n  string phrase = \"one two three four five six\";  \n  foreach (SubsetMatchingMode mode in  \n    Enum.GetValues(typeof(SubsetMatchingMode)))  \n  {  \n    GrammarBuilder gb = new GrammarBuilder();  \n    gb.Append(phrase, mode);  \n  \n    Grammar grammar = new Grammar(gb);  \n    grammar.Name = mode.ToString();  \n    grammars.Add(grammar);  \n  }  \n  \n  return grammars.ToArray();  \n}  \n```"
  syntax:
    content: public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "The sequence of words to append."
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "The matching mode the grammar uses to recognize the phrase."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a repeated grammar element to the current sequence of grammar elements."
  remarks: "The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.      > [!IMPORTANT] >  When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey>instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue>object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The repeated grammar element to append."
    - id: minRepeat
      type: System.Int32
      description: "The minimum number of times that input matching the element defined by `builder` must occur to constitute a match."
    - id: maxRepeat
      type: System.Int32
      description: "The maximum number of times that input matching the element defined by `builder` can occur to constitute a match."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a repeated phrase to the current sequence of grammar elements."
  remarks: "The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "The repeated sequence of words to append."
    - id: minRepeat
      type: System.Int32
      description: "The minimum number of times that input matching `phrase` must occur to constitute a match."
    - id: maxRepeat
      type: System.Int32
      description: "The maximum number of times that input matching `phrase` can occur to constitute a match."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  id: AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends the default dictation grammar to the current sequence of grammar elements."
  remarks: "For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>."
  example:
  - "The following example creates a speech recognition grammar that incorporates dictation.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation();  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  id: AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends the specified dictation grammar to the current sequence of grammar elements."
  remarks: "To use the spelling dictation grammar, set `category` to `spelling`.       For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>."
  example:
  - "The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation(\"spelling\");  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation (string category);
    parameters:
    - id: category
      type: System.String
      description: "The category of the dictation grammar to append."
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  id: AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a grammar definition file to the current sequence of grammar elements."
  remarks: "The URI provided by the `path` argument may be local or remote. The application must have read access to the location of specified grammar files.       A W3C Speech Recognition Grammar Specification (SRGS) representation can define a root rule. This method appends the grammar, beginning with its root rule, to the current sequence of grammar elements. To append a specific grammar rule, use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method."
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar1()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.AppendRuleReference(\"file://c:/temp/cities.grxml\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 1\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-16\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format."
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  id: AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends the specified rule of a grammar definition file to the current sequence of grammar elements."
  remarks: "The URI provided by the `path` argument may be local or remote. The application must have read access to the location of specified grammar files.       You can use the use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method to append a grammar file beginning with its root rule."
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar2()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.Append(\"Does\");  \n  builder.AppendRuleReference(@\"c:\\temp\\cities.grxml\", \"Cities\");  \n  builder.Append(\"have a shuttle\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 2\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path, string rule);
    parameters:
    - id: path
      type: System.String
      description: "The file path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format."
    - id: rule
      type: System.String
      description: "The identifier of the rule to append, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> to append the default root rule of the grammar file."
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  id: AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Appends a recognition grammar element that matches any input to the current sequence of grammar elements."
  remarks: "The wildcard element is added to the end of the current sequence of elements.       The wildcard element matches any spoken word. It does not match background noise or silence."
  example:
  - "The following example creates a grammar that accepts password input as a wildcard. The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event handler to the grammar that validates the password input.  \n  \n```c#  \nprivate Grammar CreatePasswordGrammar()  \n{  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey passwordKey =  \n    new SemanticResultKey(\"Password\", wildcardBuilder);  \n  \n  GrammarBuilder passwordBuilder =  \n    new GrammarBuilder(\"My Password is\");  \n  passwordBuilder.Append(passwordKey);  \n  \n  Grammar passwordGrammar = new Grammar(passwordBuilder);  \n  passwordGrammar.Name = \"Password input\";  \n  \n  passwordGrammar.SpeechRecognized +=  \n    new EventHandler<SpeechRecognizedEventArgs>(  \n      PasswordInputHandler);  \n  \n  return passwordGrammar;  \n}  \n  \n// Handle the SpeechRecognized event for the password grammar.  \nprivate void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  RecognitionResult result = e.Result;  \n  SemanticValue semantics = e.Result.Semantics;  \n  \n  if (semantics.ContainsKey(\"Password\"))  \n  {  \n    RecognizedAudio passwordAudio =  \n      result.GetAudioForWordRange(  \n        result.Words[3], result.Words[result.Words.Count - 1]);  \n  \n    if (IsValidPassword(passwordAudio))  \n    {  \n      Console.WriteLine(\"Password accepted.\");  \n  \n      // Add code to handle a valid password here.  \n    }  \n    else  \n    {  \n      Console.WriteLine(\"Invalid password.\");  \n  \n      // Add code to handle an invalid password here.  \n    }  \n  }  \n}  \n  \n// Validate the password input.   \nprivate bool IsValidPassword(RecognizedAudio passwordAudio)  \n{  \n  Console.WriteLine(\"Validating password.\");  \n  \n  // Add password validation code here.  \n  \n  return false;  \n}  \n```"
  syntax:
    content: public void AppendWildcard ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  id: Culture
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Gets or sets the culture of the speech recognition grammar."
  remarks: "The <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor creates a <xref:System.Speech.Recognition.Grammar> object that can be used by a speech recognizer of the corresponding culture. Only the Culture property of the <xref:System.Speech.Recognition.GrammarBuilder> that is provided as the parameter to the Grammar constructor is used to set the culture of the resulting speech recognition grammar.       Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform speech recognition using the language specified in the `Culture` property, a speech recognition engine that supports that language-country code must be installed. The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.      -   en-GB. English (United Kingdom)      -   en-US. English (United States)      -   de-DE. German (Germany)      -   es-ES. Spanish (Spain)      -   fr-FR. French (France)      -   ja-JP. Japanese (Japan)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as &quot;en&quot;, &quot;fr&quot;, or &quot;es&quot; are also permitted."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "The culture of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>. The default is the executing thread&quot;s <xref:System.Threading.Thread.CurrentUICulture*> property."
  overload: System.Speech.Recognition.GrammarBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  id: DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Gets a string that shows the contents and structure of the grammar contained by the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>."
  remarks: ''
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar. This method generates the following output:  \n  \n-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Write the contents and structure of the GrammarBuilder to the console.  \n  Console.WriteLine(\"Grammar content and structure: {0}\", gb.DebugShowPhrases);  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public string DebugShowPhrases { get; }
    return:
      type: System.String
      description: "The current content and structure of the <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>."
  overload: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a <xref href=&quot;System.Speech.Recognition.Choices&quot;></xref> object followed by a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter. For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.      > [!IMPORTANT] >  When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "The first grammar element, which represents a set of alternatives."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The second grammar element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Returns a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>choices</code> parameter followed by the <code>builder</code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> followed by a <xref href=&quot;System.Speech.Recognition.Choices&quot;></xref>."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes:      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter. For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.      > [!IMPORTANT] >  When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The first grammar element."
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "The second grammar element, which represents a set of alternative elements."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Returns a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>builder</code> parameter followed by the <code>choices</code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a sequence of two <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> objects."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder1` and `builder2` parameters. For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.      > [!IMPORTANT] >  When you combine <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object. The speech recognizer can throw an exception if it encounters these circumstances. For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "The first grammar element."
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "The second grammar element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Returns a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>builder1</code> parameter followed by the <code>builder2</code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> followed by a phrase."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter. For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The first grammar element."
    - id: phrase
      type: System.String
      description: "The second grammar element, which represents a sequence of words."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Returns a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>builder</code> parameter followed by the <code>phrase</code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Creates a new <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> that contains a phrase followed by a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.      -   <xref:System.Speech.Recognition.Choices>      -   <xref:System.Speech.Recognition.SemanticResultKey>      -   <xref:System.Speech.Recognition.SemanticResultValue>      -   <xref:System.String>       This method accepts the objects listed above for the `builder` parameter. For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "The first grammar element, which represents a sequence of words."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "The second grammar element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Returns a <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref> for the sequence of the <code>phrase</code> parameter followed by the <code>builder</code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  id: op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.Choices choices);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "To be added."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "To be added."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  id: op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultKey semanticKey);
    parameters:
    - id: semanticKey
      type: System.Speech.Recognition.SemanticResultKey
      description: "To be added."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "To be added."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  id: op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultValue semanticValue);
    parameters:
    - id: semanticValue
      type: System.Speech.Recognition.SemanticResultValue
      description: "To be added."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "To be added."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  id: op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "To be added."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "To be added."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
- uid: System.Speech.Recognition.Choices
  parent: System.Speech.Recognition
  isExternal: false
  name: Choices
  nameWithType: Choices
  fullName: System.Speech.Recognition.Choices
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
- uid: System.Speech.Recognition.SemanticResultKey
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
- uid: System.Speech.Recognition.SemanticResultValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.SubsetMatchingMode
  parent: System.Speech.Recognition
  isExternal: false
  name: SubsetMatchingMode
  nameWithType: SubsetMatchingMode
  fullName: System.Speech.Recognition.SubsetMatchingMode
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
- uid: System.Speech.Recognition.GrammarBuilder.#ctor*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder.GrammarBuilder
- uid: System.Speech.Recognition.GrammarBuilder.Add*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add
  nameWithType: GrammarBuilder.Add
- uid: System.Speech.Recognition.GrammarBuilder.Append*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append
  nameWithType: GrammarBuilder.Append
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation
  nameWithType: GrammarBuilder.AppendDictation
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference
  nameWithType: GrammarBuilder.AppendRuleReference
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard
  nameWithType: GrammarBuilder.AppendWildcard
- uid: System.Speech.Recognition.GrammarBuilder.Culture*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition
  nameWithType: GrammarBuilder.op_Addition
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit
  nameWithType: GrammarBuilder.op_Implicit
