### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellmanCng
  id: ECDiffieHellmanCng
  children:
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  - System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  - System.Security.Cryptography.ECDiffieHellmanCng.Key
  - System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  - System.Security.Cryptography.ECDiffieHellmanCng.Label
  - System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  - System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  - System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  - System.Security.Cryptography.ECDiffieHellmanCng.Seed
  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  langs:
  - csharp
  name: ECDiffieHellmanCng
  nameWithType: ECDiffieHellmanCng
  fullName: System.Security.Cryptography.ECDiffieHellmanCng
  type: Class
  summary: "Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations."
  remarks: "The ECDiffieHellmanCng class enables two parties to exchange private key material even if they are communicating through a public channel.  Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes. The secret agreement can then be used for a variety of purposes, including as a symmetric key. However, instead of exposing the secret agreement directly, the ECDiffieHellmanCng class does some post-processing on the agreement before providing the value. This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.      |Key derivation function|Properties|   |-----------------------------|----------------|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.|   |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.|       The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application. The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:      1.  Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation      2.  Alice and Bob configure the KDF using parameters the agree on.      3.  Alice sends Bob her public key.      4.  Bob sends Alice his public key.      5.  Alice and Bob use each other&quot;s public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material."
  example:
  - "The following example shows how to use the ECDiffieHellmanCng class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.  \n  \n [!code-vb[ECDiffieHellmanCng#1](~/add/codesnippet/visualbasic/t-system.security.crypto_88_1.vb)]\n [!code-cs[ECDiffieHellmanCng#1](~/add/codesnippet/csharp/t-system.security.crypto_88_1.cs)]"
  syntax:
    content: 'public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.ECDiffieHellman
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng()
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref> class with a random key pair."
  remarks: "The random key pair has a default public key length of 521 bits."
  syntax:
    content: public ECDiffieHellmanCng ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(Int32)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref> class with a random key pair, using the specified key size."
  remarks: "The random key pair will have the public key length defined by the `keySize` parameter."
  syntax:
    content: public ECDiffieHellmanCng (int keySize);
    parameters:
    - id: keySize
      type: System.Int32
      description: "The size of the key. Valid key sizes are 256, 384, and 521 bits."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keySize</code> specifies an invalid length."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) classes are not supported on this system."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(CngKey)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref> class by using the specified <xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref> object."
  syntax:
    content: public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: "The key that will be used as input to the cryptographic operations performed by the current object."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) classes are not supported on this system."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives bytes that can be used as a key using a hash function, given another party&quot;s public key, hash algorithm&quot;s name, a prepend value and an append value."
  remarks: "If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays."
  syntax:
    content: public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm  to use to derive the key material."
    - id: secretPrepend
      type: System.Byte[]
      description: "A value to prepend to the derived secret before hashing."
    - id: secretAppend
      type: System.Byte[]
      description: "A value to append to the derived secret before hashing."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other party’s public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "All other errors."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC)."
  remarks: "If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays. If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key."
  syntax:
    content: public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm to use to derive the key material."
    - id: hmacKey
      type: System.Byte[]
      description: "The key for the HMAC."
    - id: secretPrepend
      type: System.Byte[]
      description: "A value to prepend to the derived secret before hashing."
    - id: secretAppend
      type: System.Byte[]
      description: "A value to append to the derived secret before hashing."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other party’s public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size.       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "All other errors."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyMaterial(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives the key material that is generated from the secret agreement between two parties, given a <xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref> object that contains the second party&quot;s public key."
  syntax:
    content: public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.CngKey
      description: "An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange."
    return:
      type: System.Byte[]
      description: "A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object&quot;s private key and the specified public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is invalid. Either its <xref:System.Security.Cryptography.CngKey.AlgorithmGroup*> property does not specify <xref:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*> or its key size does not match the key size of this instance."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This object&quot;s <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*> property specifies the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref> key derivation function, but either <xref:System.Security.Cryptography.ECDiffieHellmanCng.Label*> or <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed*> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "All other errors."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives the key material that is generated from the secret agreement between two parties, given an <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanPublicKey&quot;></xref> object that contains the second party&quot;s public key."
  syntax:
    content: public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The public key from the other party in the key exchange."
    return:
      type: System.Byte[]
      description: "A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object&quot;s private key and the specified public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCngPublicKey&quot;></xref> key."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm."
  syntax:
    content: public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: prfLabel
      type: System.Byte[]
      description: "The ASCII-encoded PRF label."
    - id: prfSeed
      type: System.Byte[]
      description: "The 64-byte PRF seed."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other party’s public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>prfLabel</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>prfSeed</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>prfSeed</code> is not exactly 64 bytes in length.       -or-       All other cryptographic errors."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  id: DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveSecretAgreementHandle(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets a handle to the secret agreement generated between two parties, given a <xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref> object that contains the second party&quot;s public key."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.CngKey
      description: "An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange."
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
      description: "A handle to the secret agreement. This information is calculated from the current object&quot;s private key and the specified public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an ECDH key, or it is not the correct size."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "All other errors."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets a handle to the secret agreement generated between two parties, given an <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanPublicKey&quot;></xref> object that contains the second party&quot;s public key."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The public key from the other party in the key exchange."
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
      description: "A handle to the secret agreement. This information is calculated from the current object&quot;s private key and the specified public key."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code> is not an <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanPublicKey&quot;></xref> key."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "To be added."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "This method is not implemented."
  remarks: "To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead."
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "The XML-based key information to be deserialized."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "This method was not overridden for this instance."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: FromXmlString(String,ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Deserializes the key information from an XML string by using the specified format."
  syntax:
    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: xml
      type: System.String
      description: "The XML-based key information to be deserialized."
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: "One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xml</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>xml</code> is malformed."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>format</code> specifies an invalid format. The only accepted value is <xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "All other errors."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets the hash algorithm to use when generating key material."
  remarks: "This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.       This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.       Other custom hash algorithms may also be used.       The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "An object that specifies the hash algorithm."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The value is <xref uid=&quot;langword_csharp_null.&quot; name=&quot;null.&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  id: HmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material."
  remarks: "This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`. By default, the value is `null`."
  syntax:
    content: public byte[] HmacKey { get; set; }
    return:
      type: System.Byte[]
      description: "The Hash-based Message Authentication Code (HMAC) key to use when deriving key material."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key
  id: Key
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Key
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Specifies the <xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref> that is used by the current object for cryptographic operations."
  syntax:
    content: public System.Security.Cryptography.CngKey Key { get; }
    return:
      type: System.Security.Cryptography.CngKey
      description: "The key pair used by this object to perform cryptographic operations."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  id: KeyDerivationFunction
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets the key derivation function for the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref> class."
  remarks: "This property specifies the key derivation function that is used to transform the secret agreement into key material."
  syntax:
    content: public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
      description: 'One of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref> enumeration values: <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>, <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>, or <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>. The default value is <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>.'
  overload: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The enumeration value is out of range."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label
  id: Label
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Label
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets the label value that is used for key derivation."
  remarks: "This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property. By default, it is `null`."
  syntax:
    content: public byte[] Label { get; set; }
    return:
      type: System.Byte[]
      description: "The label value."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets the public key that can be used by another <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref> object to generate a shared secret agreement."
  syntax:
    content: public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The public key that is associated with this instance of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref> object."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  id: SecretAppend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets a value that will be appended to the secret agreement when generating key material."
  remarks: "This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> key derivation function (KDF) is used. The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material. By default, the value is `null`."
  syntax:
    content: public byte[] SecretAppend { get; set; }
    return:
      type: System.Byte[]
      description: "The value that is appended to the secret agreement."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  id: SecretPrepend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material."
  remarks: "This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:      -   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>      -   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>       The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material. By default, the value is `null`."
  syntax:
    content: public byte[] SecretPrepend { get; set; }
    return:
      type: System.Byte[]
      description: "The value that is appended to the beginning of the secret agreement during key derivation."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  id: Seed
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets or sets the seed value that will be used when deriving key material."
  remarks: "This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>. By default, the value is `null`."
  syntax:
    content: public byte[] Seed { get; set; }
    return:
      type: System.Byte[]
      description: "The seed value."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Seed*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "This method is not implemented."
  remarks: "To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead."
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include private parameters; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.String
      description: "Not applicable."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "This method was not overridden for this instance."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Serializes the key information to an XML string by using the specified format."
  syntax:
    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: "One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>."
    return:
      type: System.String
      description: "A string object that contains the key information, serialized to an XML string, according to the requested format."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>format</code> specifies an invalid format. The only accepted value is <xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  id: UseSecretAgreementAsHmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material."
  remarks: '-   This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>. By default, the value is `false`.'
  syntax:
    content: public bool UseSecretAgreementAsHmacKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the secret agreement is used as an HMAC key to derive key material; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: System.Security.Cryptography.ECDiffieHellman
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng()
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng()
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(Int32)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(CngKey)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptSecretHandle
  nameWithType: SafeNCryptSecretHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString(String)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString(String,ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECKeyXmlFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: ECKeyXmlFormat
  nameWithType: ECKeyXmlFormat
  fullName: System.Security.Cryptography.ECKeyXmlFormat
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Key
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanKeyDerivationFunction
  nameWithType: ECDiffieHellmanKeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Label
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Seed
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(Boolean)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Dispose
  nameWithType: ECDiffieHellmanCng.Dispose
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString
  nameWithType: ECDiffieHellmanCng.FromXmlString
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString
  nameWithType: ECDiffieHellmanCng.ToXmlString
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
