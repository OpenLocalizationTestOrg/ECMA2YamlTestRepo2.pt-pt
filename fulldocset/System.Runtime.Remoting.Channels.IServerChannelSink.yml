### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Channels.IServerChannelSink
  id: IServerChannelSink
  children:
  - System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)
  - System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)
  - System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink
  - System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)
  langs:
  - csharp
  name: IServerChannelSink
  nameWithType: IServerChannelSink
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink
  type: Interface
  summary: "Provides methods used for security and transport sinks."
  remarks: "Channel sinks provide a plug-in point that allows access to the underlying messages flowing through the channel as well as the stream used by the transport mechanism to send messages to a remote object. Channel sinks are linked together in a chain of channel sink providers, and all channel messages flow through this chain of sinks before the message is serialized and transported."
  example:
  - "The following code example illustrates an implementation of the IServerChannelSink interface.  \n  \n [!code-cs[Remoting_Sinks#60](~/add/codesnippet/csharp/t-system.runtime.remotin_17_1.cs)]\n [!code-cpp[Remoting_Sinks#60](~/add/codesnippet/cpp/t-system.runtime.remotin_17_1.cpp)]  \n  \n See the <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> interface documentation for an example of the corresponding server sink provider implementation."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IServerChannelSink : System.Runtime.Remoting.Channels.IChannelSinkBase
  implements:
  - System.Runtime.Remoting.Channels.IChannelSinkBase
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)
  id: AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  langs:
  - csharp
  name: AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)
  nameWithType: IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Channels
  summary: "Requests processing from the current sink of the response from a method call sent asynchronously."
  remarks: "The `state` parameter contains information that was pushed onto the channel sink stack and associated with the current sink."
  example:
  - >-
    [!code-cpp[CommonTransportKeys#1](~/add/codesnippet/cpp/c6d0c233-95cd-4d1f-b4f8-_1.cpp)]
     [!code-cs[CommonTransportKeys#1](~/add/codesnippet/csharp/c6d0c233-95cd-4d1f-b4f8-_1.cs)]
     [!code-vb[CommonTransportKeys#1](~/add/codesnippet/visualbasic/c6d0c233-95cd-4d1f-b4f8-_1.vb)]
  syntax:
    content: public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);
    parameters:
    - id: sinkStack
      type: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack
      description: "A stack of sinks leading back to the server transport sink."
    - id: state
      type: System.Object
      description: "Information generated on the request side that is associated with this sink."
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "The response message."
    - id: headers
      type: System.Runtime.Remoting.Channels.ITransportHeaders
      description: "The headers to add to the return message heading to the client."
    - id: stream
      type: System.IO.Stream
      description: "The stream heading back to the transport sink."
  overload: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)
  id: GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  langs:
  - csharp
  name: GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)
  nameWithType: IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Channels
  summary: "Returns the <xref:System.IO.Stream> onto which the provided response message is to be serialized."
  remarks: "This method is called when a response stream needs to be created."
  syntax:
    content: public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);
    parameters:
    - id: sinkStack
      type: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack
      description: "A stack of sinks leading back to the server transport sink."
    - id: state
      type: System.Object
      description: "The state that has been pushed to the stack by this sink."
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "The response message to serialize."
    - id: headers
      type: System.Runtime.Remoting.Channels.ITransportHeaders
      description: "The headers to put in the response stream to the client."
    return:
      type: System.IO.Stream
      description: "The <xref:System.IO.Stream> onto which the provided response message is to be serialized."
  overload: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink
  id: NextChannelSink
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  langs:
  - csharp
  name: NextChannelSink
  nameWithType: IServerChannelSink.NextChannelSink
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Channels
  summary: "Gets the next server channel sink in the server sink chain."
  remarks: "Channel sinks are linked together in a chain of sink providers, and all channel messages flow through this chain before the message is serialized and transported."
  syntax:
    content: public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }
    return:
      type: System.Runtime.Remoting.Channels.IServerChannelSink
      description: "The next server channel sink in the server sink chain."
  overload: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller does not have the required <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref> permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)
  id: ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  langs:
  - csharp
  name: ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)
  nameWithType: IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Channels
  summary: "Requests message processing from the current sink."
  remarks: "The job of a proxy is to convert a method call invoked on it into a message object. This message object, which implements the <xref:System.Runtime.Remoting.Messaging.IMessage> interface, is passed from the client end to the server end by invoking ProcessMessage on message sink objects. Message sinks are chained together in the sense that every message sink is responsible for calling ProcessMessage on the next message sink after it has performed its work. For instance, a synchronization-related message sink can cause a lock to be acquired or released, and then delegated further to the downstream message sink."
  syntax:
    content: public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);
    parameters:
    - id: sinkStack
      type: System.Runtime.Remoting.Channels.IServerChannelSinkStack
      description: "A stack of channel sinks that called the current sink."
    - id: requestMsg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "The message that contains the request."
    - id: requestHeaders
      type: System.Runtime.Remoting.Channels.ITransportHeaders
      description: "Headers retrieved from the incoming message from the client."
    - id: requestStream
      type: System.IO.Stream
      description: "The stream that needs to be to processed and passed on to the deserialization sink."
    - id: responseMsg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "When this method returns, contains a <xref href=&quot;System.Runtime.Remoting.Messaging.IMessage&quot;></xref> that holds the response message. This parameter is passed uninitialized."
    - id: responseHeaders
      type: System.Runtime.Remoting.Channels.ITransportHeaders
      description: "When this method returns, contains a <xref href=&quot;System.Runtime.Remoting.Channels.ITransportHeaders&quot;></xref> that holds the headers that are to be added to return message heading to the client. This parameter is passed uninitialized."
    - id: responseStream
      type: System.IO.Stream
      description: "When this method returns, contains a <xref:System.IO.Stream> that is heading back to the transport sink. This parameter is passed uninitialized."
    return:
      type: System.Runtime.Remoting.Channels.ServerProcessing
      description: "A <xref href=&quot;System.Runtime.Remoting.Channels.ServerProcessing&quot;></xref> status value that provides information about how message was processed."
  overload: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller does not have infrastructure permission."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)
  nameWithType: IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders,Stream)
- uid: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: IServerResponseChannelSinkStack
  nameWithType: IServerResponseChannelSinkStack
  fullName: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.Remoting.Messaging.IMessage
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: System.Runtime.Remoting.Messaging.IMessage
- uid: System.Runtime.Remoting.Channels.ITransportHeaders
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: ITransportHeaders
  nameWithType: ITransportHeaders
  fullName: System.Runtime.Remoting.Channels.ITransportHeaders
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)
  nameWithType: IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(IServerResponseChannelSinkStack,Object,IMessage,ITransportHeaders)
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: NextChannelSink
  nameWithType: IServerChannelSink.NextChannelSink
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink
- uid: System.Runtime.Remoting.Channels.IServerChannelSink
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: IServerChannelSink
  nameWithType: IServerChannelSink
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)
  nameWithType: IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)
  fullName: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(IServerChannelSinkStack,IMessage,ITransportHeaders,Stream,IMessage,ITransportHeaders,Stream)
- uid: System.Runtime.Remoting.Channels.ServerProcessing
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: ServerProcessing
  nameWithType: ServerProcessing
  fullName: System.Runtime.Remoting.Channels.ServerProcessing
- uid: System.Runtime.Remoting.Channels.IServerChannelSinkStack
  parent: System.Runtime.Remoting.Channels
  isExternal: false
  name: IServerChannelSinkStack
  nameWithType: IServerChannelSinkStack
  fullName: System.Runtime.Remoting.Channels.IServerChannelSinkStack
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse*
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: AsyncProcessResponse
  nameWithType: IServerChannelSink.AsyncProcessResponse
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream*
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: GetResponseStream
  nameWithType: IServerChannelSink.GetResponseStream
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink*
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: NextChannelSink
  nameWithType: IServerChannelSink.NextChannelSink
- uid: System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage*
  parent: System.Runtime.Remoting.Channels.IServerChannelSink
  isExternal: false
  name: ProcessMessage
  nameWithType: IServerChannelSink.ProcessMessage
