### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "Fornece uma classe base para o Gestor de eventos é utilizado no *padrão de eventos fraca*. O Gestor de adiciona e remove os serviços de escuta de eventos (ou chamadas de retorno) que também utilizam o padrão."
  remarks: "Normalmente, utiliza o padrão de eventos fracos quando a origem do evento tem um objeto que seja independente dos serviços de escuta de eventos. Utilizar a capacidade de emissão de evento central de uma WeakEventManager permite que os processadores do serviço de escuta a serem libertados, mesmo se persistir o objeto de origem. Por outro lado, um hookup de evento regular utilizando o `+=` operador faz com que a origem potencialmente desligada conter uma referência para os serviços de escuta. Isto impede que o recetor que está a ser recolhidos de forma atempada.       Uma situação comuns onde as relações de duração entre origens e os serviços de escuta devem utilizar o padrão de eventos fracos é o processamento de eventos de atualização proveniente de enlaces de dados.       O padrão de eventos fraca também pode ser utilizado para chamadas de retorno eventos e regulares."
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa base valores de classe quando é utilizado como o inicializador pelo construtor de uma classe derivada."
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Fornece o evento que está a ser gerido para cada serviço de escuta."
  remarks: "Chamar o método de DeliverEvent a partir de processadores de eventos que são adicionados ou removidos pelo <xref:System.Windows.WeakEventManager.StartListening%2A>e <xref:System.Windows.WeakEventManager.StopListening%2A>implementações de subclasses.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       Se chama o <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>método na sua `AddListener` implementação da sua classe, a lista de escuta recebe o evento é mantida numa coleção de subjacente.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> (`AddListener` não faz parte de um contrato de interface ou classe. `AddListener`é o nome sugerido para o método de classe manager que chama <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>e adiciona o evento fraca padrão os serviços de escuta para o evento.)       <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>adiciona os serviços de escuta para uma única lista.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> </xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Se a implementação de manager mantém mais do que uma lista de escuta por eventos, não utilize DeliverEvent ou <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Em vez disso, a implementação deve criar seu próprio <xref:System.Windows.WeakEventManager.ListenerList>instâncias, `AddListener` deve adicionar serviços de escuta à lista de adequado e os eventos devem ser entregues à lista de escuta adequado ao chamar <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "O objeto no qual o evento estiver a ser processado."
    - id: args
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de eventos para o evento entregar.</xref:System.EventArgs>"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "A adicionar."
    - id: args
      type: System.EventArgs
      description: "A adicionar."
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "A adicionar."
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Devolve o <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementação que é utilizada para o tipo fornecido."
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>implementações de chamar este método com o respetivo transmitido `managerType`.</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> O devolvido <xref:System.Windows.WeakEventManager>, em seguida, é utilizado como o differentiator determina qual o evento foi recebido e o processador de classe privada invocar.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "O tipo para obter o <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> para."
    return:
      type: System.Windows.WeakEventManager
      description: "A correspondência <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementação."
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define os dados que está a ser armazenados para a origem especificada."
  remarks: "Classes derivadas podem escolher os dados e o tipo para armazenar neste indexador. Normalmente, isto é implementado como um <xref:System.Windows.WeakEventManager.ListenerList>, que é uma lista de referências fracas para os serviços de escuta.</xref:System.Windows.WeakEventManager.ListenerList> Apenas terá de alterar este tipo se o <xref:System.Windows.WeakEventManager.ListenerList>tipo não pode conter as informações necessárias.</xref:System.Windows.WeakEventManager.ListenerList> Se Sim, terá de substituir o <xref:System.Windows.WeakEventManager.Purge%2A>método para que todos os limpeza do tipo subjacente é executada corretamente.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "O índice baseado em zero da origem do pedido."
    return:
      type: System.Object
      description: "Dados que está a ser armazenados pelo Gestor de para esta origem."
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Devolve um novo objeto que contém os serviços de escuta a um evento."
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "Um novo objeto que contém os serviços de escuta a um evento."
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Adiciona o delegado especificado como um processador de eventos da origem especificada."
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "O objeto de origem que subscreve o delegado de processador."
    - id: handler
      type: System.Delegate
      description: "O delegado que processa o evento é gerado pelo `source`."
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Adiciona o serviço de escuta fornecido para a origem fornecida para o evento a ser gerido."
  remarks: "Chamar este método dentro da sua classe manager `AddListener` métodos em <xref:System.Windows.WeakEventManager>implementações.</xref:System.Windows.WeakEventManager> `AddListener`é o nome sugerido para o método estático definir na sua classe manager para ativar a outras classes adicionar um serviço de escuta para o seu padrão de eventos fracos. `AddListener`deve ter dois parâmetros: o `source` onde o serviço de escuta está ligado e o `listener` instância. Para sua `AddListener` implementação, chame o método de ProtectedAddListener no Gestor de atual e passar os mesmos parâmetros de dois.       Se a lista de escuta era anteriormente vazia, ProtectedAddListener chama o <xref:System.Windows.WeakEventManager.StartListening%2A>método internamente, que irá chamar específicos da sua <xref:System.Windows.WeakEventManager.StartListening%2A>Substituir através de que o polimorfismo.</xref:System.Windows.WeakEventManager.StartListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       ProtectedAddListener adiciona os serviços de escuta para um único interno <xref:System.Windows.WeakEventManager.ListenerList>por `source`.</xref:System.Windows.WeakEventManager.ListenerList> Se a sua implementação do Gestor manter mais de uma lista de escuta para cada combinação de origem do evento, não utilize ProtectedAddListener. Em vez disso, a implementação deve criar seu próprio <xref:System.Windows.WeakEventManager.ListenerList>instâncias, `AddListener` deve adicionar serviços de escuta à lista de adequado e os eventos devem ser entregues à lista de escuta adequado ao chamar o <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>eventos em vez do <xref:System.Windows.WeakEventManager.DeliverEvent%2A>método.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "A origem de ligar os serviços de escuta para."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "A classe de serviço de escuta (que tem de implementar <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Remove o processador anteriormente adicionado da origem especificada."
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "A origem para remover o processador do."
    - id: handler
      type: System.Delegate
      description: "O delegado para remover `source`."
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Remove um serviço de escuta anteriormente adicionado a origem fornecida."
  remarks: "Chamar este método dentro da sua classe manager `RemoveListener` métodos em <xref:System.Windows.WeakEventManager>implementações.</xref:System.Windows.WeakEventManager> `RemoveListener`é o nome sugerido para o método estático definir na sua classe manager para ativar a outras classes remover um serviço de escuta para o seu padrão de eventos fracos. `RemoveListener`deve ter dois parâmetros: o `source` onde o serviço de escuta for removido e o `listener` classe. Para sua `RemoveListener` implementação, chame o método de ProtectedRemoveListener no Gestor de atual e passar os mesmos parâmetros de dois.       Se uma chamada para ProtectedRemoveListener remove o último serviço de escuta na lista, ProtectedRemoveListener chama o <xref:System.Windows.WeakEventManager.StopListening%2A>método internamente, que irá chamar específicos da sua <xref:System.Windows.WeakEventManager.StopListening%2A>Substituir através de que o polimorfismo.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StopListening%2A>       ProtectedRemoveListener remove os serviços de escuta de um único interno <xref:System.Windows.WeakEventManager.ListenerList>por `source`.</xref:System.Windows.WeakEventManager.ListenerList> Se a sua implementação do Gestor manter mais de uma lista de escuta para cada combinação de origem do evento, não utilize ProtectedRemoveListener. Em vez disso, a implementação deve criar seu próprio <xref:System.Windows.WeakEventManager.ListenerList>instâncias, `RemoveListener` deve remover os serviços de escuta da lista adequada e os eventos devem ser entregues à lista de escuta adequado ao chamar o <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>método em vez do <xref:System.Windows.WeakEventManager.DeliverEvent%2A>método.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "A origem para remover os serviços de escuta do."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "A classe de serviço de escuta (que tem de implementar <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Remove a lista de dados para a origem de fornecido entradas de serviço de escuta inativa. Devolve <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se algumas entradas, na verdade, foram removidas da lista."
  remarks: "O método de remoção tem uma implementação predefinida que irá remover todas as entradas quando os dados <xref:System.Windows.WeakEventManager.ListenerList>.</xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "A origem para os eventos que está a ser listened para."
    - id: data
      type: System.Object
      description: "Os dados para verificar. Este objeto é esperado um <xref:System.Windows.WeakEventManager.ListenerList>implementação.</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para parar a escutar `source`e remova completamente todas as entradas de `data`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se algumas entradas, na verdade, foram removidas; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Estabelece um bloqueio de leitura na tabela de dados subjacente e devolve um <xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "Em classes derivadas, consulta para a tabela contida no <xref:System.Windows.WeakEventManager.Item%2A>sempre deve ocorrer dentro de um `using (ReadLock) { ... }` cláusula, exceto as consultas que já estão dentro de um bloqueio de escrita.</xref:System.Windows.WeakEventManager.Item%2A> Estas consultas poderão ser necessárias se a sua classe suporta mais sofisticadas `AddListener` implementação que necessita de mais dados para além de `source` e `listener`e utiliza o <xref:System.Windows.WeakEventManager.Item%2A>coleção para armazenar as informações adicionais.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "Um objeto que pode ser utilizado para estabelecer um bloqueio dos membros da tabela de dados e, em seguida, adequadamente eliminado com um <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> construir."
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Remove todos os serviços de escuta para a origem especificada."
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "A origem para remover as informações do serviço de escuta de."
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Pedidos que ser efetuada uma limpeza de entradas não utilizadas na lista subjacente do serviço de escuta num thread de prioridade inferior."
  remarks: "Chamar o método ScheduleCleanup é semelhante ao chamar o <xref:System.Windows.WeakEventManager.Purge%2A>método na lista do Gestor de atual, com a prioridade do thread inferior, com o `purgeAll` parâmetro definido como `false`.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Define o Gestor de atual para o tipo de gestor especificado."
  remarks: "Chamar o método SetCurrentManager ao inicializar um gestor, se de que é exigido por uma chamada para o `CurrentManager` propriedade um <xref:System.Windows.WeakEventManager>implementação.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "O tipo para definir o novo Gestor de eventos."
    - id: manager
      type: System.Windows.WeakEventManager
      description: "O novo Gestor de eventos."
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, começa a escutar para o evento a ser gerido. Após o método StartListening pela primeira vez é designado, o Gestor de deve estar no estado de chamar <> </> *> ou <> </> *> sempre o evento relevante da origem fornecida é processado."
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "A origem para começar a escutar."
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, deixa de escutar na origem de fornecido para o evento a ser gerido."
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "A origem para parar a escutar."
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Estabelece um bloqueio de escrita na tabela de dados subjacente e devolve um<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "Em classes derivadas, todas as modificações à tabela de dados subjacente devem ocorrer dentro de um `using (WriteLock) { ... }` cláusula. Estas alterações poderão ser necessárias se a sua classe suporta mais sofisticadas `AddListener` implementação que necessita de mais dados para além de `source` e o `listener`e utiliza o <xref:System.Windows.WeakEventManager.Item%2A>coleção para armazenar as informações adicionais.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "Um objeto que pode ser utilizado para estabelecer um bloqueio dos membros da tabela de dados e, em seguida, adequadamente eliminado com um <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> construir."
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
