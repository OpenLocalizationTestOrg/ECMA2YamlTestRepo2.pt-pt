### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ErrObject
  id: ErrObject
  children:
  - Microsoft.VisualBasic.ErrObject.Clear
  - Microsoft.VisualBasic.ErrObject.Description
  - Microsoft.VisualBasic.ErrObject.Erl
  - Microsoft.VisualBasic.ErrObject.GetException
  - Microsoft.VisualBasic.ErrObject.HelpContext
  - Microsoft.VisualBasic.ErrObject.HelpFile
  - Microsoft.VisualBasic.ErrObject.LastDllError
  - Microsoft.VisualBasic.ErrObject.Number
  - Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  - Microsoft.VisualBasic.ErrObject.Source
  langs:
  - csharp
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
  type: Class
  summary: "O <xref uid=&quot;langword_csharp_ErrObject&quot; name=&quot;ErrObject&quot; href=&quot;&quot;> </xref> módulo contém propriedades e os procedimentos utilizados para identificar e processar erros de tempo de execução a utilizar o <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref> objeto."
  remarks: "O `ErrObject` módulo suporta o `Err` objeto. Para obter mais informações, consulte <xref:Microsoft.VisualBasic.Information.Err%2A>.</xref:Microsoft.VisualBasic.Information.Err%2A>"
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n```  \nDim Msg As String  \n' If an error occurs, construct an error message.  \nOn Error Resume Next   ' Defer error handling.  \nErr.Clear  \nErr.Raise(6)   ' Generate an \"Overflow\" error.  \n' Check for error, then show message.  \nIf Err.Number <> 0 Then  \n    Msg = \"Error # \" & Str(Err.Number) & \" was generated by \" _  \n        & Err.Source & ControlChars.CrLf & Err.Description  \n    MsgBox(Msg, MsgBoxStyle.Information, \"Error\")  \nEnd If  \n```"
  syntax:
    content: public sealed class ErrObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Clear
  id: Clear
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Limpa todas as definições de propriedade do <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref> objeto."
  remarks: "Utilizar `Clear` explicitamente limpar o `Err` objeto depois de processadas um erro, por exemplo, quando utiliza erros diferido com `On Error Resume Next`. O `Clear` método é chamado automaticamente sempre que executa qualquer uma das seguintes instruções:-qualquer tipo de `Resume` declaração - `Exit Sub`, `Exit Function`, ou `Exit Property` - qualquer `On Error` declaração - qualquer `Try...Catch...Finally` instrução > [!NOTE] > o `On Error Resume Next` construção poderá ser preferível para `On Error GoTo` quando o processamento de erros gerados durante o acesso a outros objetos. A verificar `Err` após cada interação com um objeto remove ambiguidade sobre o qual o objeto foi acedido pelo código da: pode ter a certeza que objeto colocou o código de erro no `Err.Number`, bem como o objeto originalmente gerou o erro (o objeto especificado no `Err.Source`)."
  example:
  - "This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings. Without the call to `Clear`, the second call to `MsgBox` would display the same error message.  \n  \n [!code-vb[VbVbalrErrorHandling#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._141_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.ErrObject.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Description
  id: Description
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve ou define um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que contém uma cadeia descritiva associada a um erro. Leitura/escrita."
  remarks: "O `Description` definição de propriedade é composta por uma breve descrição do erro. Utilize esta propriedade para alertar o utilizador a um erro que não é possível ou não pretende processar. Ao gerar um erro definidas pelo utilizador, atribua uma breve descrição do erro para o `Description` propriedade. Se o `Description` propriedade não for preenchida e o valor do <xref:Microsoft.VisualBasic.ErrObject.Number%2A>propriedade corresponde a um erro de tempo de execução Visual Basic, em seguida, a cadeia devolvida pelo <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>definida na função de `Description` propriedade quando o erro é gerado.</xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> </xref:Microsoft.VisualBasic.ErrObject.Number%2A>"
  example:
  - "This example assigns a user-defined message to the `Description` property of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._68_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "Devolve ou define um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que contém uma cadeia descritiva associada a um erro. Leitura/escrita."
  overload: Microsoft.VisualBasic.ErrObject.Description*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Erl
  id: Erl
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro que indica o número de linha da última instrução executado. Só de leitura."
  remarks: "Se for Visual Basic encontra não números de linha, devolve 0."
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n```  \n10:     On Error Resume Next  \n20:     Err.Raise(60000)  \n' Returns 20.  \n30:     MsgBox(Erl())  \n```"
  syntax:
    content: public int Erl { get; }
    return:
      type: System.Int32
      description: "Devolve um número inteiro que indica o número de linha da última instrução executado. Só de leitura."
  overload: Microsoft.VisualBasic.ErrObject.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.GetException
  id: GetException
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve a exceção que representa o erro ocorreu."
  remarks: "O `GetException` função está disponível apenas a partir de `Err` classe do objeto. Funciona com o `Exception` propriedade o `Err` objecto a mostrar o erro ocorreu."
  example:
  - "The following code displays the message assigned to the exception in the `Err` object:  \n  \n [!code-vb[VbVbalrCatRef#66](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._226_1.vb)]"
  syntax:
    content: public Exception GetException ();
    parameters: []
    return:
      type: System.Exception
      description: "Devolve a exceção que representa o erro ocorreu."
  overload: Microsoft.VisualBasic.ErrObject.GetException*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  id: HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve ou define um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> que contém o ID de contexto para um tópico no ficheiro de ajuda. Leitura/escrita."
  remarks: "O `HelpContext` propriedade é utilizada para apresentar a ajuda sensível ao contexto de uma aplicação. Se for especificado um ficheiro de ajuda na `HelpFile`, a `HelpContext` propriedade é utilizada para o ficheiro de ajuda identificado for apresentado automaticamente. Se ambos os o `HelpFile` e `HelpContext` propriedades estão vazios, o valor da <xref:Microsoft.VisualBasic.ErrObject.Number%2A>propriedade está marcada.</xref:Microsoft.VisualBasic.ErrObject.Number%2A> Se o valor da `Number` propriedade corresponde a um valor de erro de tempo de execução Visual Basic, em seguida, é utilizado o ID de contexto ajudar do Visual Basic para o erro. Se o valor da `Number` propriedade não corresponde a um erro de Visual Basic, o conteúdo para o ficheiro de ajuda do Visual Basic é apresentado o ecrã.      > [!NOTE] > Deve escrever rotinas na sua aplicação para processar erros comuns. Quando a programação com um objeto, pode utilizar o ficheiro de ajuda do objeto para melhorar a qualidade de processamento de erros ou para apresentar uma mensagem com significado para o utilizador se o erro não é recuperável."
  example:
  - "This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._34_1.vb)]"
  syntax:
    content: public int HelpContext { get; set; }
    return:
      type: System.Int32
      description: "Devolve ou define um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> que contém o ID de contexto para um tópico no ficheiro de ajuda. Leitura/escrita."
  overload: Microsoft.VisualBasic.ErrObject.HelpContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  id: HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve ou define um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que contém o caminho completamente qualificado para um ficheiro de ajuda. Leitura/escrita."
  remarks: "Se for especificado um ficheiro de ajuda pelo `HelpFile` propriedade, é automaticamente denominado quando o utilizador prime a chave de ajuda (ou a chave de F1) na caixa de diálogo de mensagem de erro. Se o `HelpContext` propriedade contém um contexto válido ID para o ficheiro especificado, esse tópico é automaticamente apresentado. Se não `HelpFile` é especificado, o ficheiro de ajuda do Visual Basic é apresentado.      > [!NOTE] > Deve escrever rotinas na sua aplicação para processar erros comuns. Quando a programação com um objeto, pode utilizar o ficheiro de ajuda do objeto para melhorar a qualidade de processamento de erros ou para apresentar uma mensagem com significado para o utilizador se o erro não é recuperável."
  example:
  - "This example uses the `HelpFile` property of the `Err` object to start the Help system. By default, the `HelpFile` property contains the name of the Visual Basic Help file.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._70_1.vb)]"
  syntax:
    content: public string HelpFile { get; set; }
    return:
      type: System.String
      description: "Devolve ou define um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que contém o caminho completamente qualificado para um ficheiro de ajuda. Leitura/escrita."
  overload: Microsoft.VisualBasic.ErrObject.HelpFile*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  id: LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um código de erro de sistema produzido por uma chamada para uma biblioteca de ligação dinâmica (DLL). Só de leitura."
  remarks: "A propriedade LastDllError só se aplica a chamadas DLL feitas a partir do código do Visual Basic. Quando é efetuada uma chamada deste tipo, a função de chamada normalmente devolve um código que indica êxito ou falha, e a propriedade LastDllError é preenchida. Consulte a documentação de funções de DLL determinar os valores de retorno que indicam êxito ou falha. Sempre que é devolvido o código de falha, a aplicação do Visual Basic deve verificar a propriedade LastDllError imediatamente. Sem exceção é gerada quando a propriedade LastDllError está definida.      > [!NOTE] > LastDllError a propriedade está protegida por <xref:System.Security.Permissions.SecurityAction>, que ajuda a impedir o seu a ser acedido a partir do código não fidedigno.</xref:System.Security.Permissions.SecurityAction> No entanto, <xref:System.Security.Permissions.SecurityAction>requer apenas o chamador imediato ter <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>permissão.</xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> </xref:System.Security.Permissions.SecurityAction> Se o seu código pode ser chamado a partir do código parcialmente fidedigno, o valor de LastDllError sem validação a exposição é um risco de segurança.   >> Para limitações importantes sobre como utilizar o <xref:System.Security.Permissions.SecurityAction>Membro, consulte [exigem vs</xref:System.Security.Permissions.SecurityAction> LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Para obter mais informações sobre permissões, consulte <xref:System.Security.Permissions.SecurityPermission>e [permissões de acesso de código](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>       Tenha em atenção para dispositivos inteligentes que esta propriedade devolve sempre zero."
  example:
  - "The following example shows how you can use the `LastDllError` property after calling a function in the Windows API. The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function. `GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window. If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.  \n  \n [!code-vb[VbVbalrErrorHandling#8](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_1.vb)]  \n[!code-vb[VbVbalrErrorHandling#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_2.vb)]  \n[!code-vb[VbVbalrErrorHandling#10](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_3.vb)]  \n  \n [!code-vb[VbVbalrErrorHandling#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_4.vb)]"
  syntax:
    content: public int LastDllError { get; }
    return:
      type: System.Int32
      description: "Devolve um código de erro de sistema produzido por uma chamada para uma biblioteca de ligação dinâmica (DLL). Só de leitura."
  overload: Microsoft.VisualBasic.ErrObject.LastDllError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Number
  id: Number
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve ou define um valor numérico a especificação de um erro. Leitura/escrita."
  remarks: "Todas as `Raise` argumentos, exceto `Number` são opcionais. Se omitir argumentos opcionais e as definições de propriedade do `Err` objeto contém os valores que não tem sido limpo, esses valores servirem como os valores para o erro.       Porque o `Err` objeto dá-informações mais rica de quando poderá gerar erros com o `Error` instrução `Raise` é útil para gerar erros ao escrever módulos de classe. Por exemplo, com o `Raise` método, a origem de que gerou o erro pode ser especificada o `Source` propriedade, ajuda online para o erro podem ser referenciadas e assim sucessivamente.       Quando regressar um erro definidas pelo utilizador de um objeto, defina `Err.Number` adicionando o número selecionado como um código de erro para o `VbObjectError` constante. Por exemplo, utilize o seguinte código para devolver o número 1051 como um código de erro: [!code-vb [VbVbalrErrorHandling #13](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_1.vb)]"
  example:
  - "This example illustrates a typical use of the `Number` property in an error-handling routine.  \n  \n [!code-vb[VbVbalrErrorHandling#12](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_2.vb)]  \n  \n This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic. The calling function can catch the error and report it to the user. Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_3.vb)]"
  syntax:
    content: public int Number { get; set; }
    return:
      type: System.Int32
      description: "Devolve ou define um valor numérico a especificação de um erro. Leitura/escrita."
  overload: Microsoft.VisualBasic.ErrObject.Number*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é maior que 65535."
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  id: Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Gera um erro de tempo de execução; pode ser utilizado em vez do <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref> instrução."
  remarks: "Todas as `Raise` argumentos, exceto `Number` são opcionais. Se omitir argumentos opcionais e as definições de propriedade do `Err` objeto contém os valores que não tem sido limpo, esses valores servirem como os valores para o erro.       Porque o `Err` objeto dá-informações mais rica de quando poderá gerar erros com o `Error` instrução `Raise` é útil para gerar erros ao escrever módulos de classe. Por exemplo, com o `Raise` método, a origem de que gerou o erro pode ser especificada o `Source` propriedade, ajuda online para o erro podem ser referenciadas e assim sucessivamente."
  example:
  - "This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic. The calling function can catch the error and report it to the user with a message box.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/b1f4ec6f-36d3-4787-9987-_1.vb)]"
  syntax:
    content: public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);
    parameters:
    - id: Number
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>número inteiro que identifica a natureza do erro. Erros Visual Basic estão no intervalo 0-65535; o intervalo de 0 – 512 está reservado para erros de sistema o intervalo 513 – 65535 está disponível para erros definido pelo utilizador. Ao definir o <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> propriedade para o seu próprio código de erro de um módulo de classe, adicione o número de código de erro para o <xref uid=&quot;langword_csharp_vbObjectError&quot; name=&quot;vbObjectError&quot; href=&quot;&quot;> </xref> constante. Por exemplo, para gerar o número de erro 513, atribua `vbObjectError + 513` para o <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> propriedade."
    - id: Source
      type: System.Object
      description: "Opcional. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>o objeto ou a aplicação que gerou o erro de atribuição de nome de expressão. Quando definir esta propriedade para um objeto, utilize o formato `project`.`class`. Se `Source` não for especificado, o ID de processo do projeto de Visual Basic atual é utilizado."
    - id: Description
      type: System.Object
      description: "Opcional. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão que descrevem o erro. Se não for indicado, o valor de <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> é examinada propriedade. Se este pode ser mapeado para um erro de tempo de execução Visual Basic code, a cadeia que poderia ser devolvida pelo <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref> função é utilizada como o <xref uid=&quot;langword_csharp_Description&quot; name=&quot;Description&quot; href=&quot;&quot;> </xref> propriedade. Se não houver nenhum erro de Visual Basic correspondente para o <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> propriedade, a mensagem &quot;definido pela aplicação ou definido por objecto error&quot; é utilizada."
    - id: HelpFile
      type: System.Object
      description: "Opcional. O caminho completamente qualificado para o ficheiro de ajuda na qual pode encontrar ajuda sobre este erro. Se não for indicado, o Visual Basic utiliza a unidade completamente qualificada, caminho e nome de ficheiro do ficheiro de ajuda do Visual Basic."
    - id: HelpContext
      type: System.Object
      description: "Opcional. O ID de contexto identificar um tópico no `HelpFile` que fornece ajuda para o erro. Se for omitido, o ID de contexto de ficheiro de ajuda do Visual Basic para o erro correspondente para o <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> propriedade é utilizada, se existir."
  overload: Microsoft.VisualBasic.ErrObject.Raise*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Source
  id: Source
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve ou define um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão especificando o nome do objeto ou aplicação que originalmente gerou o erro. Leitura/escrita."
  remarks: "O `Source` propriedade especifica um `String` expressão que representa o objeto que gerou o erro; a expressão é, normalmente, o nome de classe do objeto ou ID de processo. Utilize o `Source` propriedade para fornecer informações quando o seu código não consegue processar um erro gerado por um objeto acedido. Por exemplo, se aceder Microsoft Excel e gera um `Division by zero` define do Microsoft Excel de erro, `Err.Number` o código de erro para esse erro e conjuntos `Source` para &quot;Excel.Application&quot;.       Quando a aplicação está a gerar um erro do código, `Source` é ID programático da. sua aplicação Dentro de uma classe, `Source` deve conter um nome de formato *projeto*.* classe*. Quando ocorre um erro inesperado no seu código, o `Source` propriedade é automaticamente preenchida. Erros no módulo, `Source` contém o nome do projeto."
  example:
  - "This example demonstrates the use of the `Source` property in a typical error-handling routine. When an error is raised from `Class1`, the string `\"Class1\"` is assigned to the `Source` property of the `Err` object. This string is then displayed in an informative message indicating the source and number of the error.  \n  \n [!code-vb[VbVbalrErrorHandling#15](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._39_1.vb)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Devolve ou define um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão especificando o nome do objeto ou aplicação que originalmente gerou o erro. Leitura/escrita."
  overload: Microsoft.VisualBasic.ErrObject.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.ErrObject.Clear
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
- uid: Microsoft.VisualBasic.ErrObject.Description
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ErrObject.Erl
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.ErrObject.GetException
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
- uid: Microsoft.VisualBasic.ErrObject.Source
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
- uid: Microsoft.VisualBasic.ErrObject.Clear*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear
  nameWithType: ErrObject.Clear
- uid: Microsoft.VisualBasic.ErrObject.Description*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
- uid: Microsoft.VisualBasic.ErrObject.Erl*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
- uid: Microsoft.VisualBasic.ErrObject.GetException*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException
  nameWithType: ErrObject.GetException
- uid: Microsoft.VisualBasic.ErrObject.HelpContext*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise
  nameWithType: ErrObject.Raise
- uid: Microsoft.VisualBasic.ErrObject.Source*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
