### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ErrObject
  id: ErrObject
  children:
  - Microsoft.VisualBasic.ErrObject.Clear
  - Microsoft.VisualBasic.ErrObject.Description
  - Microsoft.VisualBasic.ErrObject.Erl
  - Microsoft.VisualBasic.ErrObject.GetException
  - Microsoft.VisualBasic.ErrObject.HelpContext
  - Microsoft.VisualBasic.ErrObject.HelpFile
  - Microsoft.VisualBasic.ErrObject.LastDllError
  - Microsoft.VisualBasic.ErrObject.Number
  - Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  - Microsoft.VisualBasic.ErrObject.Source
  langs:
  - csharp
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
  type: Class
  summary: "The <xref uid=&quot;langword_csharp_ErrObject&quot; name=&quot;ErrObject&quot; href=&quot;&quot;></xref> module contains properties and procedures used to identify and handle run-time errors using the <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;></xref> object."
  remarks: "The `ErrObject` module supports the `Err` object. For more information, see <xref:Microsoft.VisualBasic.Information.Err%2A>."
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n```  \nDim Msg As String  \n' If an error occurs, construct an error message.  \nOn Error Resume Next   ' Defer error handling.  \nErr.Clear  \nErr.Raise(6)   ' Generate an \"Overflow\" error.  \n' Check for error, then show message.  \nIf Err.Number <> 0 Then  \n    Msg = \"Error # \" & Str(Err.Number) & \" was generated by \" _  \n        & Err.Source & ControlChars.CrLf & Err.Description  \n    MsgBox(Msg, MsgBoxStyle.Information, \"Error\")  \nEnd If  \n```"
  syntax:
    content: public sealed class ErrObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Clear
  id: Clear
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Clears all property settings of the <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;></xref> object."
  remarks: "Use `Clear` to explicitly clear the `Err` object after an error has been handled, such as when you use deferred error handling with `On Error Resume Next`. The `Clear` method is called automatically whenever any of the following statements executes:      -   Any type of `Resume` statement      -   `Exit Sub`, `Exit Function`, or `Exit Property`      -   Any `On Error` statement      -   Any `Try...Catch...Finally` statement          > [!NOTE]     >  The `On Error Resume Next` construct may be preferable to `On Error GoTo` when handling errors generated during access to other objects. Checking `Err` after each interaction with an object removes ambiguity about which object was accessed by the code: You can be sure which object placed the error code in `Err.Number`, as well as which object originally generated the error (the object specified in `Err.Source`)."
  example:
  - "This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings. Without the call to `Clear`, the second call to `MsgBox` would display the same error message.  \n  \n [!code-vb[VbVbalrErrorHandling#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._141_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.ErrObject.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Description
  id: Description
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns or sets a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression containing a descriptive string associated with an error. Read/write."
  remarks: "The `Description` property setting consists of a short description of the error. Use this property to alert the user to an error that you cannot or do not want to handle. When generating a user-defined error, assign a short description of your error to the `Description` property. If the `Description` property is not filled in, and the value of the <xref:Microsoft.VisualBasic.ErrObject.Number%2A> property corresponds to a Visual Basic run-time error, then the string returned by the <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> function is set in the `Description` property when the error is generated."
  example:
  - "This example assigns a user-defined message to the `Description` property of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._68_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "Returns or sets a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression containing a descriptive string associated with an error. Read/write."
  overload: Microsoft.VisualBasic.ErrObject.Description*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Erl
  id: Erl
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns an integer indicating the line number of the last executed statement. Read-only."
  remarks: "If Visual Basic encounters no line numbers, it returns 0."
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n```  \n10:     On Error Resume Next  \n20:     Err.Raise(60000)  \n' Returns 20.  \n30:     MsgBox(Erl())  \n```"
  syntax:
    content: public int Erl { get; }
    return:
      type: System.Int32
      description: "Returns an integer indicating the line number of the last executed statement. Read-only."
  overload: Microsoft.VisualBasic.ErrObject.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.GetException
  id: GetException
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns the exception representing the error that occurred."
  remarks: "The `GetException` function is available only from the `Err` object class. It works with the `Exception` property of the `Err` object to display the error that has occurred."
  example:
  - "The following code displays the message assigned to the exception in the `Err` object:  \n  \n [!code-vb[VbVbalrCatRef#66](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._226_1.vb)]"
  syntax:
    content: public Exception GetException ();
    parameters: []
    return:
      type: System.Exception
      description: "Returns the exception representing the error that occurred."
  overload: Microsoft.VisualBasic.ErrObject.GetException*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  id: HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns or sets an <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref> containing the context ID for a topic in a Help file. Read/write."
  remarks: "The `HelpContext` property is used to display context-sensitive Help for an application. If a Help file is specified in `HelpFile`, the `HelpContext` property is used to automatically display the Help file identified. If both the `HelpFile` and `HelpContext` properties are empty, the value of the <xref:Microsoft.VisualBasic.ErrObject.Number%2A> property  is checked. If the value of the `Number` property corresponds to a Visual Basic run-time error value, then the Visual Basic Help context ID for the error is used. If the value of the `Number` property does not correspond to a Visual Basic error, the contents screen for the Visual Basic Help file is displayed.      > [!NOTE] >  You should write routines in your application to handle typical errors. When programming with an object, you can use the object&quot;s Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable."
  example:
  - "This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._34_1.vb)]"
  syntax:
    content: public int HelpContext { get; set; }
    return:
      type: System.Int32
      description: "Returns or sets an <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref> containing the context ID for a topic in a Help file. Read/write."
  overload: Microsoft.VisualBasic.ErrObject.HelpContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  id: HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns or sets a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression containing the fully qualified path to a Help file. Read/write."
  remarks: "If a Help file is specified by the `HelpFile` property, it is automatically called when the user presses the Help key (or the F1 key) in the error message dialog box. If the `HelpContext` property contains a valid context ID for the specified file, that topic is automatically displayed. If no `HelpFile` is specified, the Visual Basic Help file is displayed.      > [!NOTE] >  You should write routines in your application to handle typical errors. When programming with an object, you can use the object&quot;s Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable."
  example:
  - "This example uses the `HelpFile` property of the `Err` object to start the Help system. By default, the `HelpFile` property contains the name of the Visual Basic Help file.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._70_1.vb)]"
  syntax:
    content: public string HelpFile { get; set; }
    return:
      type: System.String
      description: "Returns or sets a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression containing the fully qualified path to a Help file. Read/write."
  overload: Microsoft.VisualBasic.ErrObject.HelpFile*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  id: LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns a system error code produced by a call to a dynamic-link library (DLL). Read-only."
  remarks: "The LastDllError property applies only to DLL calls made from Visual Basic code. When such a call is made, the called function usually returns a code indicating success or failure, and the LastDllError property is filled. Check the documentation for the DLL&quot;s functions to determine the return values that indicate success or failure. Whenever the failure code is returned, the Visual Basic application should immediately check the LastDllError property. No exception is raised when the LastDllError property is set.      > [!NOTE] >  The LastDllError property is protected by <xref:System.Security.Permissions.SecurityAction>, which helps prevent it from being accessed from untrusted code. However, <xref:System.Security.Permissions.SecurityAction> requires only the immediate caller to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> permission. If your code can be called from partially trusted code, exposing the value of LastDllError without validation is a security risk.   >    >  For important limitations about how to use the <xref:System.Security.Permissions.SecurityAction> member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5). For more information about permissions, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).       Note   For smart devices this property always returns zero."
  example:
  - "The following example shows how you can use the `LastDllError` property after calling a function in the Windows API. The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function. `GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window. If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.  \n  \n [!code-vb[VbVbalrErrorHandling#8](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_1.vb)]  \n[!code-vb[VbVbalrErrorHandling#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_2.vb)]  \n[!code-vb[VbVbalrErrorHandling#10](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_3.vb)]  \n  \n [!code-vb[VbVbalrErrorHandling#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_4.vb)]"
  syntax:
    content: public int LastDllError { get; }
    return:
      type: System.Int32
      description: "Returns a system error code produced by a call to a dynamic-link library (DLL). Read-only."
  overload: Microsoft.VisualBasic.ErrObject.LastDllError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Number
  id: Number
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns or sets a numeric value specifying an error. Read/write."
  remarks: "All of the `Raise` arguments except `Number` are optional. If you omit optional arguments, and the property settings of the `Err` object contain values that have not been cleared, those values serve as the values for your error.       Because the `Err` object gives richer information than when you generate errors with the `Error` statement, `Raise` is useful for generating errors when writing class modules. For example, with the `Raise` method, the source that generated the error can be specified in the `Source` property, online Help for the error can be referenced, and so on.       When returning a user-defined error from an object, set `Err.Number` by adding the number you selected as an error code to the `VbObjectError` constant. For example, you use the following code to return the number 1051 as an error code:       [!code-vb[VbVbalrErrorHandling#13](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_1.vb)]"
  example:
  - "This example illustrates a typical use of the `Number` property in an error-handling routine.  \n  \n [!code-vb[VbVbalrErrorHandling#12](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_2.vb)]  \n  \n This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic. The calling function can catch the error and report it to the user. Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_3.vb)]"
  syntax:
    content: public int Number { get; set; }
    return:
      type: System.Int32
      description: "Returns or sets a numeric value specifying an error. Read/write."
  overload: Microsoft.VisualBasic.ErrObject.Number*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> is greater than 65535."
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  id: Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Generates a run-time error; can be used instead of the <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;></xref> statement."
  remarks: "All of the `Raise` arguments except `Number` are optional. If you omit optional arguments, and the property settings of the `Err` object contain values that have not been cleared, those values serve as the values for your error.       Because the `Err` object gives richer information than when you generate errors with the `Error` statement, `Raise` is useful for generating errors when writing class modules. For example, with the `Raise` method, the source that generated the error can be specified in the `Source` property, online Help for the error can be referenced, and so on."
  example:
  - "This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic. The calling function can catch the error and report it to the user with a message box.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/b1f4ec6f-36d3-4787-9987-_1.vb)]"
  syntax:
    content: public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);
    parameters:
    - id: Number
      type: System.Int32
      description: "Required. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref> integer that identifies the nature of the error. Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors. When setting the <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref> property to your own error code in a class module, you add your error code number to the <xref uid=&quot;langword_csharp_vbObjectError&quot; name=&quot;vbObjectError&quot; href=&quot;&quot;></xref> constant. For example, to generate the error number 513, assign `vbObjectError + 513` to the <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref> property."
    - id: Source
      type: System.Object
      description: "Optional. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression naming the object or application that generated the error. When setting this property for an object, use the form `project`.`class`. If `Source` is not specified, the process ID of the current Visual Basic project is used."
    - id: Description
      type: System.Object
      description: "Optional. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression describing the error. If unspecified, the value in the <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref> property is examined. If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;></xref> function is used as the <xref uid=&quot;langword_csharp_Description&quot; name=&quot;Description&quot; href=&quot;&quot;></xref> property. If there is no Visual Basic error corresponding to the <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref> property, the &quot;Application-defined or object-defined error&quot; message is used."
    - id: HelpFile
      type: System.Object
      description: "Optional. The fully qualified path to the Help file in which help on this error can be found. If unspecified, Visual Basic uses the fully qualified drive, path, and file name of the Visual Basic Help file."
    - id: HelpContext
      type: System.Object
      description: "Optional. The context ID identifying a topic within `HelpFile` that provides help for the error. If omitted, the Visual Basic Help-file context ID for the error corresponding to the <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref> property is used, if it exists."
  overload: Microsoft.VisualBasic.ErrObject.Raise*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Source
  id: Source
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returns or sets a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression specifying the name of the object or application that originally generated the error. Read/write."
  remarks: "The `Source` property specifies a `String` expression representing the object that generated the error; the expression is usually the object&quot;s class name or process ID. Use the `Source` property to provide information when your code is unable to handle an error generated in an accessed object. For example, if you access Microsoft Excel and it generates a `Division by zero` error, Microsoft Excel sets `Err.Number` to its error code for that error and sets `Source` to &quot;Excel.Application&quot;.       When the application is generating an error from code, `Source` is your application&quot;s programmatic ID. Within a class, `Source` should contain a name having the form *project*.*class*. When an unexpected error occurs in your code, the `Source` property is automatically filled in. For errors in a module, `Source` contains the project name."
  example:
  - "This example demonstrates the use of the `Source` property in a typical error-handling routine. When an error is raised from `Class1`, the string `\"Class1\"` is assigned to the `Source` property of the `Err` object. This string is then displayed in an informative message indicating the source and number of the error.  \n  \n [!code-vb[VbVbalrErrorHandling#15](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._39_1.vb)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Returns or sets a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> expression specifying the name of the object or application that originally generated the error. Read/write."
  overload: Microsoft.VisualBasic.ErrObject.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.ErrObject.Clear
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
- uid: Microsoft.VisualBasic.ErrObject.Description
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ErrObject.Erl
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.ErrObject.GetException
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
- uid: Microsoft.VisualBasic.ErrObject.Source
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
- uid: Microsoft.VisualBasic.ErrObject.Clear*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear
  nameWithType: ErrObject.Clear
- uid: Microsoft.VisualBasic.ErrObject.Description*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
- uid: Microsoft.VisualBasic.ErrObject.Erl*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
- uid: Microsoft.VisualBasic.ErrObject.GetException*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException
  nameWithType: ErrObject.GetException
- uid: Microsoft.VisualBasic.ErrObject.HelpContext*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise
  nameWithType: ErrObject.Raise
- uid: Microsoft.VisualBasic.ErrObject.Source*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
