### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherTimer
  id: DispatcherTimer
  children:
  - System.Windows.Threading.DispatcherTimer.#ctor
  - System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  - System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  - System.Windows.Threading.DispatcherTimer.Dispatcher
  - System.Windows.Threading.DispatcherTimer.Interval
  - System.Windows.Threading.DispatcherTimer.IsEnabled
  - System.Windows.Threading.DispatcherTimer.Start
  - System.Windows.Threading.DispatcherTimer.Stop
  - System.Windows.Threading.DispatcherTimer.Tag
  - System.Windows.Threading.DispatcherTimer.Tick
  langs:
  - csharp
  name: DispatcherTimer
  nameWithType: DispatcherTimer
  fullName: System.Windows.Threading.DispatcherTimer
  type: Class
  summary: "A timer that is integrated into the <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref> queue which is processed at a specified interval of time and at a specified priority."
  remarks: "The DispatcherTimer is reevaluated at the top of every <xref:System.Windows.Threading.Dispatcher> loop.       Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs.  This is because DispatcherTimer operations are placed on the <xref:System.Windows.Threading.Dispatcher> queue like other operations.  When the DispatcherTimer operation executes is dependent on the other jobs in the queue and their priorities.       If a <xref:System.Timers.Timer?displayProperty=fullName> is used in a [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] application, it is worth noting that the <xref:System.Timers.Timer?displayProperty=fullName> runs on a different thread then the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] thread.  In order to access objects on the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] thread, it is necessary to post the operation onto the <xref:System.Windows.Threading.Dispatcher> of the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] thread using <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Reasons for using a DispatcherTimer opposed to a <xref:System.Timers.Timer?displayProperty=fullName> are that the DispatcherTimer runs on the same thread as the <xref:System.Windows.Threading.Dispatcher> and a <xref:System.Windows.Threading.DispatcherPriority> can be set on the DispatcherTimer.       A DispatcherTimer will keep an object alive whenever the object&quot;s methods are bound to the timer.      <a name=&quot;xamlTextUsage_DispatcherTimer&quot;></a>    ## XAML Text Usage"
  example:
  - "The following example creates a DispatcherTimer that updates the contents of a <xref:System.Windows.Controls.Label> and calls the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method on the <xref:System.Windows.Input.CommandManager>.  \n  \n A DispatcherTimer object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event of `dispatcherTimer`.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object, and the timer is started.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]  \n  \n The <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public class DispatcherTimer
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer()
  nameWithType: DispatcherTimer.DispatcherTimer()
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref> class."
  remarks: '<xref:System.Windows.Threading.DispatcherTimer> runs on the <xref:System.Windows.Threading.Dispatcher> of the current thread at <xref:System.Windows.Threading.DispatcherPriority> priority.  To specify a different <xref:System.Windows.Threading.Dispatcher>, use the following constructor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=fullName>.'
  syntax:
    content: public DispatcherTimer ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  id: '#ctor(System.Windows.Threading.DispatcherPriority)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(DispatcherPriority)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref> class which processes timer events at the specified priority."
  remarks: '<xref:System.Windows.Threading.DispatcherTimer> runs on the <xref:System.Windows.Threading.Dispatcher> of the current thread.  To specify a different <xref:System.Windows.Threading.Dispatcher>, use the following constructor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.'
  syntax:
    content: public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "The priority at which to invoke the timer."
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  id: '#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(DispatcherPriority,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref> class which runs on the specified <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref> at the specified priority."
  syntax:
    content: public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "The priority at which to invoke the timer."
    - id: dispatcher
      type: System.Windows.Threading.Dispatcher
      description: "The dispatcher the timer is associated with."
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dispatcher</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  id: '#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref> class which uses the specified time interval, priority, event handler, and <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>."
  syntax:
    content: public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);
    parameters:
    - id: interval
      type: System.TimeSpan
      description: "The period of time between ticks."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "The priority at which to invoke the timer."
    - id: callback
      type: System.EventHandler
      description: "The event handler to call when the <xref href=&quot;System.Windows.Threading.DispatcherTimer.Tick&quot;></xref> event occurs."
    - id: dispatcher
      type: System.Windows.Threading.Dispatcher
      description: "The dispatcher the timer is associated with."
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callback</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>interval</code> is less than 0 or greater than <xref:System.Int32.MaxValue>."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
  fullName: System.Windows.Threading.DispatcherTimer.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets the <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref> associated with this <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref>."
  remarks: "The Dispatcher property is determined at the creation of the <xref:System.Windows.Threading.DispatcherTimer> object.  The <xref:System.Windows.Threading.Dispatcher> property is set to the current <xref:System.Windows.Threading.Dispatcher> at the time of creation unless a different <xref:System.Windows.Threading.Dispatcher> is specified."
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "The dispatcher."
  overload: System.Windows.Threading.DispatcherTimer.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Interval
  id: Interval
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Interval
  nameWithType: DispatcherTimer.Interval
  fullName: System.Windows.Threading.DispatcherTimer.Interval
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets or sets the period of time between timer ticks."
  remarks: "Timers are not guaranteed to execute exactly when the time interval occurs, but they are guaranteed to not execute before the time interval occurs.  This is because <xref:System.Windows.Threading.DispatcherTimer> operations are placed on the <xref:System.Windows.Threading.Dispatcher> queue like other operations.  When the <xref:System.Windows.Threading.DispatcherTimer> operation executes is dependent on the other jobs in the queue and their priorities.      <a name=&quot;XAMLTextUsage_Interval&quot;></a>    ## XAML Text Usage"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The Interval is set to 1 second using a <xref:System.TimeSpan> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public TimeSpan Interval { get; set; }
    return:
      type: System.TimeSpan
      description: "The period of time between ticks. The default is 00:00:00."
  overload: System.Windows.Threading.DispatcherTimer.Interval*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>interval</code> is less than 0 or greater than <xref:System.Int32.MaxValue> milliseconds."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled
  id: IsEnabled
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
  fullName: System.Windows.Threading.DispatcherTimer.IsEnabled
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets or sets a value that indicates whether the timer is running."
  remarks: "IsEnabled must be set to `true` for the <xref:System.Windows.Threading.DispatcherTimer.Tick> event to be raised.       Calling <xref:System.Windows.Threading.DispatcherTimer.Start%2A> sets IsEnabled to `true`.       Calling <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> sets IsEnabled to `false`.      <a name=&quot;XAMLTextUsage_IsEnabled&quot;></a>    ## XAML Text Usage"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the timer is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.  The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Threading.DispatcherTimer.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Start
  id: Start
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Start()
  nameWithType: DispatcherTimer.Start()
  fullName: System.Windows.Threading.DispatcherTimer.Start()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Starts the <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref>."
  remarks: "Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false` when the timer is started stops the timer.       Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true` when the timer is stopped starts the timer.       Start sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true`.       Start resets the timer <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>."
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.Start*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Stop
  id: Stop
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Stop()
  nameWithType: DispatcherTimer.Stop()
  fullName: System.Windows.Threading.DispatcherTimer.Stop()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Stops the <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref>."
  remarks: "Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false` when the timer is started stops the timer.       Setting <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `true` when the timer is stopped starts the timer.       Calling Stop sets <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> to `false`."
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Tag
  id: Tag
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Tag
  nameWithType: DispatcherTimer.Tag
  fullName: System.Windows.Threading.DispatcherTimer.Tag
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets or sets a user-defined data object."
  remarks: "<a name=&quot;XAMLTextUsage_Tag&quot;></a>    ## XAML Text Usage"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "The user-defined data.  The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Threading.DispatcherTimer.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Tick
  id: Tick
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Tick
  nameWithType: DispatcherTimer.Tick
  fullName: System.Windows.Threading.DispatcherTimer.Tick
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Occurs when the timer interval has elapsed."
  remarks: "<a name=&quot;xamlTextUsage_Tick&quot;></a>    ## XAML Text Usage"
  example:
  - "The following example creates a Tick event handler.  The event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public event EventHandler Tick;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Threading.DispatcherTimer.#ctor
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer()
  nameWithType: DispatcherTimer.DispatcherTimer()
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer()
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(DispatcherPriority)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority)
- uid: System.Windows.Threading.DispatcherPriority
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriority
  nameWithType: DispatcherPriority
  fullName: System.Windows.Threading.DispatcherPriority
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(DispatcherPriority,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
  fullName: System.Windows.Threading.DispatcherTimer.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.Interval
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Interval
  nameWithType: DispatcherTimer.Interval
  fullName: System.Windows.Threading.DispatcherTimer.Interval
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
  fullName: System.Windows.Threading.DispatcherTimer.IsEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherTimer.Start
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Start()
  nameWithType: DispatcherTimer.Start()
  fullName: System.Windows.Threading.DispatcherTimer.Start()
- uid: System.Windows.Threading.DispatcherTimer.Stop
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Stop()
  nameWithType: DispatcherTimer.Stop()
  fullName: System.Windows.Threading.DispatcherTimer.Stop()
- uid: System.Windows.Threading.DispatcherTimer.Tag
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tag
  nameWithType: DispatcherTimer.Tag
  fullName: System.Windows.Threading.DispatcherTimer.Tag
- uid: System.Windows.Threading.DispatcherTimer.Tick
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tick
  nameWithType: DispatcherTimer.Tick
  fullName: System.Windows.Threading.DispatcherTimer.Tick
- uid: System.Windows.Threading.DispatcherTimer.#ctor*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer
  nameWithType: DispatcherTimer.DispatcherTimer
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.Interval*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Interval
  nameWithType: DispatcherTimer.Interval
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
- uid: System.Windows.Threading.DispatcherTimer.Start*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Start
  nameWithType: DispatcherTimer.Start
- uid: System.Windows.Threading.DispatcherTimer.Stop*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Stop
  nameWithType: DispatcherTimer.Stop
- uid: System.Windows.Threading.DispatcherTimer.Tag*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tag
  nameWithType: DispatcherTimer.Tag
