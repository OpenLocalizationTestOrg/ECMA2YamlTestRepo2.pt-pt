### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherTimer
  id: DispatcherTimer
  children:
  - System.Windows.Threading.DispatcherTimer.#ctor
  - System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  - System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  - System.Windows.Threading.DispatcherTimer.Dispatcher
  - System.Windows.Threading.DispatcherTimer.Interval
  - System.Windows.Threading.DispatcherTimer.IsEnabled
  - System.Windows.Threading.DispatcherTimer.Start
  - System.Windows.Threading.DispatcherTimer.Stop
  - System.Windows.Threading.DispatcherTimer.Tag
  - System.Windows.Threading.DispatcherTimer.Tick
  langs:
  - csharp
  name: DispatcherTimer
  nameWithType: DispatcherTimer
  fullName: System.Windows.Threading.DispatcherTimer
  type: Class
  summary: "Um temporizador que está integrado o <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> fila que está a ser processada um intervalo de tempo especificado e com uma prioridade especificada."
  remarks: "O DispatcherTimer é reavaliada na parte superior de cada <xref:System.Windows.Threading.Dispatcher>ciclo.</xref:System.Windows.Threading.Dispatcher>       Não são garantidos que os temporizadores executar exatamente quando ocorre o intervalo de tempo, mas garantidos para não executar antes de ocorre o intervalo de tempo.  Isto acontece porque DispatcherTimer operações são colocadas no <xref:System.Windows.Threading.Dispatcher>fila como outras operações.</xref:System.Windows.Threading.Dispatcher>  Quando executa a operação de DispatcherTimer está dependente de outras tarefas na fila e as respetivas prioridades.       Se um <xref:System.Timers.Timer?displayProperty=fullName>é utilizada num [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] aplicação, é importante salientar, que o <xref:System.Timers.Timer?displayProperty=fullName>é executado num thread diferente, em seguida, o [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] thread.</xref:System.Timers.Timer?displayProperty=fullName> </xref:System.Timers.Timer?displayProperty=fullName>  Para poder aceder aos objetos no [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] thread, é necessário publicar a operação para o <xref:System.Windows.Threading.Dispatcher>do [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] thread utilizando <xref:System.Windows.Threading.Dispatcher.Invoke%2A>ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> </xref:System.Windows.Threading.Dispatcher> Razões para utilizar um DispatcherTimer opposed para um <xref:System.Timers.Timer?displayProperty=fullName>tem o DispatcherTimer é executado no mesmo thread que o <xref:System.Windows.Threading.Dispatcher>e um <xref:System.Windows.Threading.DispatcherPriority>podem ser definidas no DispatcherTimer.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher> </xref:System.Timers.Timer?displayProperty=fullName>       Um DispatcherTimer vai manter a um objeto alive sempre que os métodos do objeto estão vinculados ao temporizador.      <a name=&quot;xamlTextUsage_DispatcherTimer&quot;></a># # Utilização de texto XAML"
  example:
  - "The following example creates a DispatcherTimer that updates the contents of a <xref:System.Windows.Controls.Label> and calls the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method on the <xref:System.Windows.Input.CommandManager>.  \n  \n A DispatcherTimer object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event of `dispatcherTimer`.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object, and the timer is started.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]  \n  \n The <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public class DispatcherTimer
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer()
  nameWithType: DispatcherTimer.DispatcherTimer()
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref> classe."
  remarks: '<xref:System.Windows.Threading.DispatcherTimer>é executado o <xref:System.Windows.Threading.Dispatcher>do thread atual em <xref:System.Windows.Threading.DispatcherPriority>prioridade.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.DispatcherTimer>  Para especificar um <xref:System.Windows.Threading.Dispatcher>, utilize o seguinte construtor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=fullName>.</xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=fullName> </xref:System.Windows.Threading.Dispatcher>'
  syntax:
    content: public DispatcherTimer ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  id: '#ctor(System.Windows.Threading.DispatcherPriority)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(DispatcherPriority)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref> classe que processa os eventos do temporizador com a prioridade especificada."
  remarks: '<xref:System.Windows.Threading.DispatcherTimer>é executado o <xref:System.Windows.Threading.Dispatcher>do thread atual.</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.DispatcherTimer>  Para especificar um <xref:System.Windows.Threading.Dispatcher>, utilize o seguinte construtor: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.</xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29> </xref:System.Windows.Threading.Dispatcher>'
  syntax:
    content: public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "A prioridade no qual pretende invocar o temporizador."
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  id: '#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(DispatcherPriority,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref> classe que é executado no especificado <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> com a prioridade especificada."
  syntax:
    content: public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "A prioridade no qual pretende invocar o temporizador."
    - id: dispatcher
      type: System.Windows.Threading.Dispatcher
      description: "O dispatcher o temporizador está associado."
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dispatcher</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  id: '#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref> classe que utiliza o intervalo de tempo especificado, a prioridade, o processador de eventos e <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  syntax:
    content: public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);
    parameters:
    - id: interval
      type: System.TimeSpan
      description: "O período de tempo entre os batimentos."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "A prioridade no qual pretende invocar o temporizador."
    - id: callback
      type: System.EventHandler
      description: "O processador de eventos para chamar quando o <xref href=&quot;System.Windows.Threading.DispatcherTimer.Tick&quot;> </xref> evento ocorre."
    - id: dispatcher
      type: System.Windows.Threading.Dispatcher
      description: "O dispatcher o temporizador está associado."
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>interval</code>é menor que 0 ou maior do que <xref:System.Int32.MaxValue>."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
  fullName: System.Windows.Threading.DispatcherTimer.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Obtém o <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> associada a este <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref>."
  remarks: "A propriedade do emissor é determinada, a criação do <xref:System.Windows.Threading.DispatcherTimer>objeto.</xref:System.Windows.Threading.DispatcherTimer>  O <xref:System.Windows.Threading.Dispatcher>propriedade está definida como atual <xref:System.Windows.Threading.Dispatcher>no momento da criação, a menos que outra <xref:System.Windows.Threading.Dispatcher>está especificado.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher>"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "O dispatcher."
  overload: System.Windows.Threading.DispatcherTimer.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Interval
  id: Interval
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Interval
  nameWithType: DispatcherTimer.Interval
  fullName: System.Windows.Threading.DispatcherTimer.Interval
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Obtém ou define o período de tempo entre os batimentos de temporizador."
  remarks: "Não são garantidos que os temporizadores executar exatamente quando ocorre o intervalo de tempo, mas garantidos para não executar antes de ocorre o intervalo de tempo.  Isto acontece porque <xref:System.Windows.Threading.DispatcherTimer>operações são colocadas no <xref:System.Windows.Threading.Dispatcher>fila como outras operações.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.DispatcherTimer>  Quando o <xref:System.Windows.Threading.DispatcherTimer>operação executa depende de outras tarefas na fila e as respetivas prioridades.</xref:System.Windows.Threading.DispatcherTimer>      <a name=&quot;XAMLTextUsage_Interval&quot;></a># # Utilização de texto XAML"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The Interval is set to 1 second using a <xref:System.TimeSpan> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public TimeSpan Interval { get; set; }
    return:
      type: System.TimeSpan
      description: "O período de tempo entre os batimentos. A predefinição é 00:00:00."
  overload: System.Windows.Threading.DispatcherTimer.Interval*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>interval</code>é menor que 0 ou maior do que <xref:System.Int32.MaxValue> milissegundos."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled
  id: IsEnabled
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
  fullName: System.Windows.Threading.DispatcherTimer.IsEnabled
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Obtém ou define um valor que indica se o temporizador está em execução."
  remarks: "IsEnabled tem de ser definido como `true` para o <xref:System.Windows.Threading.DispatcherTimer.Tick>evento seja gerado.</xref:System.Windows.Threading.DispatcherTimer.Tick>       Chamar <xref:System.Windows.Threading.DispatcherTimer.Start%2A>define IsEnabled para `true`.</xref:System.Windows.Threading.DispatcherTimer.Start%2A>       Chamar <xref:System.Windows.Threading.DispatcherTimer.Stop%2A>define IsEnabled para `false`.</xref:System.Windows.Threading.DispatcherTimer.Stop%2A>      <a name=&quot;XAMLTextUsage_IsEnabled&quot;></a># # Utilização de texto XAML"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o temporizador é activado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.DispatcherTimer.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Start
  id: Start
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Start()
  nameWithType: DispatcherTimer.Start()
  fullName: System.Windows.Threading.DispatcherTimer.Start()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicia o <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref>."
  remarks: "Definição <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>para `false` quando é iniciado o temporizador de parar o temporizador.</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>       Definição <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>para `true` quando o temporizador é interrompido inicia o temporizador.</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>       Iniciar conjuntos <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>para `true`.</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>       Iniciar repõe o temporizador <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.</xref:System.Windows.Threading.DispatcherTimer.Interval%2A>"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.Start*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Stop
  id: Stop
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Stop()
  nameWithType: DispatcherTimer.Stop()
  fullName: System.Windows.Threading.DispatcherTimer.Stop()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Interrompe a <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref>."
  remarks: "Definição <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>para `false` quando é iniciado o temporizador de parar o temporizador.</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>       Definição <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>para `true` quando o temporizador é interrompido inicia o temporizador.</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>       Conjuntos de paragem ao chamar <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>para `false`.</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Tag
  id: Tag
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Tag
  nameWithType: DispatcherTimer.Tag
  fullName: System.Windows.Threading.DispatcherTimer.Tag
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Obtém ou define um objeto de dados definidos pelo utilizador."
  remarks: "<a name=&quot;XAMLTextUsage_Tag&quot;></a># # Utilização de texto XAML"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "Os dados definidos pelo utilizador.  A predefinição é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.DispatcherTimer.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Tick
  id: Tick
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Tick
  nameWithType: DispatcherTimer.Tick
  fullName: System.Windows.Threading.DispatcherTimer.Tick
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Ocorre quando o temporizador de intervalo tiver decorrido."
  remarks: "<a name=&quot;xamlTextUsage_Tick&quot;></a># # Utilização de texto XAML"
  example:
  - "The following example creates a Tick event handler.  The event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public event EventHandler Tick;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Threading.DispatcherTimer.#ctor
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer()
  nameWithType: DispatcherTimer.DispatcherTimer()
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer()
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(DispatcherPriority)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority)
- uid: System.Windows.Threading.DispatcherPriority
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriority
  nameWithType: DispatcherPriority
  fullName: System.Windows.Threading.DispatcherPriority
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(DispatcherPriority,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
  fullName: System.Windows.Threading.DispatcherTimer.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.Interval
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Interval
  nameWithType: DispatcherTimer.Interval
  fullName: System.Windows.Threading.DispatcherTimer.Interval
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
  fullName: System.Windows.Threading.DispatcherTimer.IsEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherTimer.Start
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Start()
  nameWithType: DispatcherTimer.Start()
  fullName: System.Windows.Threading.DispatcherTimer.Start()
- uid: System.Windows.Threading.DispatcherTimer.Stop
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Stop()
  nameWithType: DispatcherTimer.Stop()
  fullName: System.Windows.Threading.DispatcherTimer.Stop()
- uid: System.Windows.Threading.DispatcherTimer.Tag
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tag
  nameWithType: DispatcherTimer.Tag
  fullName: System.Windows.Threading.DispatcherTimer.Tag
- uid: System.Windows.Threading.DispatcherTimer.Tick
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tick
  nameWithType: DispatcherTimer.Tick
  fullName: System.Windows.Threading.DispatcherTimer.Tick
- uid: System.Windows.Threading.DispatcherTimer.#ctor*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer
  nameWithType: DispatcherTimer.DispatcherTimer
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.Interval*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Interval
  nameWithType: DispatcherTimer.Interval
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
- uid: System.Windows.Threading.DispatcherTimer.Start*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Start
  nameWithType: DispatcherTimer.Start
- uid: System.Windows.Threading.DispatcherTimer.Stop*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Stop
  nameWithType: DispatcherTimer.Stop
- uid: System.Windows.Threading.DispatcherTimer.Tag*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tag
  nameWithType: DispatcherTimer.Tag
