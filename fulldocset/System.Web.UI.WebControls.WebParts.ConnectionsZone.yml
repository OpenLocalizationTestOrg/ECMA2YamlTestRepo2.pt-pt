### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone
  id: ConnectionsZone
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.#ctor
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.Close
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.Display
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState(System.Object)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState(System.Object)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent(System.String)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState
  - System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect
  langs:
  - csharp
  name: ConnectionsZone
  nameWithType: ConnectionsZone
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone
  type: Class
  summary: "Provides a user interface (UI) that enables users to form connections between <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref> and other server controls that reside in <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;></xref> zones."
  remarks: "Using the Web Parts control set, you can enable two server controls to form a connection and share data, with one control acting as the provider, and the other acting as the consumer of the data. The two controls can be <xref:System.Web.UI.WebControls.WebParts.WebPart> controls or any other type of server control, provided that they are designed to handle connections, and that they are residing in a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone. To learn more about Web Parts connections, see the <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> and <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overviews, as well as [Web Parts Connections Overview](~/add/includes/ajax-current-ext-md.md).       Provided that the requisite controls and conditions exist to form a Web Parts connection, it is still necessary to actually connect the controls. There are three ways to form a connection between server controls: declaring a connection in a Web page, creating a connection in code, or adding a ConnectionsZone control to the page so that users can connect the controls on demand. The ConnectionsZone control generates a UI that enables users to connect or disconnect any server controls on a page that meet the conditions necessary to form a connection. It is an optional control that is not necessary to form connections, but is useful in the case where you want to give users control over which server controls are connected or disconnected.       The ConnectionsZone control is one of the Web Parts tool zone controls that inherit from the <xref:System.Web.UI.WebControls.WebParts.ToolZone> base class. As a tool zone, the ConnectionsZone control is designed to be visible only when its Web page is in a certain display mode. In this case, the display mode is named connect mode (a page is in this mode when the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control on the page has its <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property value set to <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>). After users switch a page into connect mode, they must click a connect verb on the verbs menu of one of the server controls, and then the connection UI becomes visible.       As a Web Parts zone control, the ConnectionsZone control is a type of <xref:System.Web.UI.WebControls.WebParts.WebZone> zone (which inherits from the <xref:System.Web.UI.WebControls.CompositeControl> class) designed to contain other controls. In general, a ConnectionsZone zone has most of the same elements as other Web Parts tool zones: a header, a body or contents area, and a footer. For a complete discussion of what a Web Parts zone is, and the different parts of a zone, see the <xref:System.Web.UI.WebControls.WebParts.WebZone> class overview.      > [!IMPORTANT] >  Unlike most other Web Parts zones, it is important to note that a ConnectionsZone zone does not contain a unique type of server control associated with it. For a list of zones and the associated controls they contain, see the chart in the <xref:System.Web.UI.WebControls.WebParts.WebZone> class overview. But the ConnectionsZone zone does not contain <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> controls. Instead, it serves a very limited purpose of providing a UI for users to connect or disconnect server controls that exist in some <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone on the page. The only controls contained in a ConnectionsZone control are the standard ASP.NET server controls that it generates as part of its UI for forming connections.       When the ConnectionsZone control is rendered, it generates a UI based on the server controls on the page that are capable of forming connections. The ConnectionsZone control determines which server controls in the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone on the page are providers, which are consumers, which connection points are available, and whether the server controls are currently connected or disconnected, and then it generates the UI accordingly.       For example, suppose there is one <xref:System.Web.UI.WebControls.WebParts.WebPart> control capable of being a provider, one <xref:System.Web.UI.WebControls.WebParts.WebPart> control capable of being a consumer, they are declared in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> on the page, and they are currently disconnected. When a user switches the page to connect mode and clicks the connect verb on one of the controls, the ConnectionsZone control generates a UI with a link that, when clicked, displays a form in which users can choose options to create a connection. (If the controls were previously connected, the initial view instead presents users with a button to disconnect the controls). In the connection UI for creating new connections, users are shown which control is a provider, and which control is a consumer. A drop-down list control appears below each server control, listing the available <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for the control. From the respective drop-down lists, users must select one <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider (to determine what interface and data will be shared with consumers), and one <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object for each consumer (to determine what interface and data the consumer will consume) that will be connected to the provider.      > [!NOTE] >  In the Web Parts control set default implementation, one provider can connect to many consumers, but a consumer can have only one provider.       To use the ConnectionsZone control, you can declare it within the `<form>` element on a Web page (but not nested within another Web Parts zone element), using the `<asp:connectionszone>` element, or you can add it to the page programmatically. If you declare the element in a page, unlike the other Web Parts zones, you cannot declare any other type of server controls between the tags of the `<asp:connectionszone>` element. You can declare elements within it that relate to its own properties and style details, but it is a standalone element and is not a template control within which other server controls can be declared.      > [!NOTE] >  To improve accessibility, the ConnectionsZone control is rendered within a `<fieldset>` element. The `<fieldset>` element groups the related set of controls used for establishing connections in the ConnectionsZone control, and it facilitates tabbed navigation among those controls for both visual user agents (such as ordinary Web browsers) and speech-oriented user agents (such as screen-reading software).       The ConnectionsZone control has a number of properties it uses for rendering the connection UI. One set of properties includes several verbs--used only in relation to connections--that carry out actions in the UI: <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb%2A>, and <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb%2A>. A large set of properties, used especially for the connections zone UI, consists of text strings displayed at various places (or in certain situations, such as when errors occur) in the UI: <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText%2A>, and <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText%2A>. The ConnectionsZone class also contains a number of common properties found in other Web Parts zones: <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.Display%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText%2A>, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText%2A>, and <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType%2A>. Finally, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect%2A> property is unique to the class, referencing the control that initiates the connection (this is the control on which the user clicks the connect verb in its verbs menu, which is also the control referenced in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control&quot;s <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> property).       The ConnectionsZone class also has a number of methods, all of which are inherited and overridden from base classes, and most of them come from the base Web Parts zone classes. For details, see the individual methods."
  example:
  - "The following code example demonstrates how to use the ConnectionsZone control on a Web Parts page. The example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page that hosts all the controls, demonstrates how to declare an `<asp:connectionszone>` element, and sets a number of properties on the connections zone declaratively and programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of this code example is the user control that enables users to switch display modes on a Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_156_1.ascx)]\n [!code-vb[WebParts_ConnectionZone_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_156_1.ascx)]  \n  \n The second part of the example is the source file with the interface and custom controls. Notice that the `ZipCodeWebPart` control implements the `IZipCode` interface, adding a `ConnectionProvider` attribute so that the control can act as a provider for a connection. The `WeatherWebPart` control has a method marked with a `ConnectionConsumer` attribute, where it consumes the `IZipCode` interface, so it can act as a consumer in a connection.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_156_2.cs)]\n [!code-vb[WebParts_ConnectionZone_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_156_2.vb)]  \n  \n The third part of the example code is the Web page. Near the top are `Register` directives for the user control and the custom controls used in the connection. An <`asp:connectionszone>` element is declared in the page as an example of using the ConnectionsZone control declaratively. Within the element, a number of properties are set declaratively. Other properties on the connections zone are set programmatically in the `<script>` section of the page.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_156_3.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_156_3.aspx)]  \n  \n Load the Web page in a browser. Use the **Display Mode** drop-down list control to switch the page to connect mode. On the verbs menu of the **ZIP Code Provider** control (the verbs menu is indicated by the downward arrow in the control's title bar), click the connect verb. A ConnectionsZone control appears. Note that in the connection UI, an **End Connection** button appears; the connection has already been declared in the markup of the page, so the controls are already connected. Click **End Connection**, and then use the **Display Mode** control again to return the page to browse mode. Next, return the page to connect mode again, click the connect verb on one of the controls, and note that the connection UI now displays a hyperlink that enables you to form a connection between the controls. Click the link, and use the connection UI to select connection points and establish the connection."
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.ConnectionsZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Web.UI.SupportsEventValidation]

      public class ConnectionsZone : System.Web.UI.WebControls.WebParts.ToolZone
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  - System.Web.UI.WebControls.CompositeControl
  - System.Web.UI.WebControls.WebParts.WebZone
  - System.Web.UI.WebControls.WebParts.ToolZone
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.WebControls.CompositeControl.Controls
  - System.Web.UI.WebControls.CompositeControl.DataBind
  - System.Web.UI.WebControls.CompositeControl.RecreateChildControls
  - System.Web.UI.WebControls.CompositeControl.SupportsDisabledAttribute
  - System.Web.UI.WebControls.CompositeControl.System#Web#UI#WebControls#ICompositeControlDesignerAccessor#RecreateChildControls
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CreateControlStyle
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.Width
  - System.Web.UI.WebControls.WebParts.ToolZone.AssociatedDisplayModes
  - System.Web.UI.WebControls.WebParts.ToolZone.EditUIStyle
  - System.Web.UI.WebControls.WebParts.ToolZone.HeaderCloseVerb
  - System.Web.UI.WebControls.WebParts.ToolZone.HeaderVerbStyle
  - System.Web.UI.WebControls.WebParts.ToolZone.InstructionTextStyle
  - System.Web.UI.WebControls.WebParts.ToolZone.LabelStyle
  - System.Web.UI.WebControls.WebParts.ToolZone.RenderFooter(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ToolZone.RenderHeader(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ToolZone.RenderVerb(System.Web.UI.HtmlTextWriter,System.Web.UI.WebControls.WebParts.WebPartVerb)
  - System.Web.UI.WebControls.WebParts.ToolZone.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)
  - System.Web.UI.WebControls.WebParts.ToolZone.Visible
  - System.Web.UI.WebControls.WebParts.WebZone.BackImageUrl
  - System.Web.UI.WebControls.WebParts.WebZone.EmptyZoneTextStyle
  - System.Web.UI.WebControls.WebParts.WebZone.ErrorStyle
  - System.Web.UI.WebControls.WebParts.WebZone.FooterStyle
  - System.Web.UI.WebControls.WebParts.WebZone.GetEffectiveChromeType(System.Web.UI.WebControls.WebParts.Part)
  - System.Web.UI.WebControls.WebParts.WebZone.HasFooter
  - System.Web.UI.WebControls.WebParts.WebZone.HasHeader
  - System.Web.UI.WebControls.WebParts.WebZone.HeaderStyle
  - System.Web.UI.WebControls.WebParts.WebZone.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebZone.Padding
  - System.Web.UI.WebControls.WebParts.WebZone.PartChromePadding
  - System.Web.UI.WebControls.WebParts.WebZone.PartChromeStyle
  - System.Web.UI.WebControls.WebParts.WebZone.PartStyle
  - System.Web.UI.WebControls.WebParts.WebZone.PartTitleStyle
  - System.Web.UI.WebControls.WebParts.WebZone.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.WebZone.RenderClientScript
  - System.Web.UI.WebControls.WebParts.WebZone.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.WebZone.TagKey
  - System.Web.UI.WebControls.WebParts.WebZone.VerbButtonType
  - System.Web.UI.WebControls.WebParts.WebZone.VerbStyle
  - System.Web.UI.WebControls.WebParts.WebZone.WebPartManager
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectionsZone()
  nameWithType: ConnectionsZone.ConnectionsZone()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectionsZone()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> class."
  remarks: "This default constructor is called when you declare the `<asp:connectionszone>` element in an ASP.NET page. You do not need to implicitly call this constructor, except in cases where you are adding the control to the page programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectionsZone constructor to create a new instance of a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to add to a Web page programmatically. The example contains only the code for the Web page that demonstrates use of the constructor; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls and, in its `Page_Init` method, uses the ConnectionsZone constructor to create a new instance of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control and add it to the page.  \n  \n-   An explanation of how the example works in a browser.  \n  \n On the Web page, in the `Page_Init` method, a new <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control is created (using the constructor) and added to the page. When a user sets the page to connect mode and clicks the connect verb on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears.  \n  \n [!code-cs[WebParts_ConnectionZone_ctor#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_176_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_ctor#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_176_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. The connection UI appears, and the controls are already connected because the connection was declared in the markup of the page."
  syntax:
    content: public ConnectionsZone ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb
  id: CancelVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: CancelVerb
  nameWithType: ConnectionsZone.CancelVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets a reference to a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> object that enables end users to cancel the process of establishing a connection."
  remarks: "The cancel verb, as used with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, is a zone-level verb that appears in the connection user interface (UI) as part of the view in which users select connection points for the controls. When users click the cancel verb, it cancels the process of selecting connection points, and returns the connections zone view to the hyperlinks that users can click to establish a new connection.       Use the CancelVerb property to get a reference to the corresponding <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object in the UI. Although the property itself is read-only, after you have a reference to the verb, you can change its property values as needed.       You can set the property values of the cancel verb declaratively, by declaring the `<cancelverb>` element within the tags of an `<asp:connectionszone>` element. The properties of the verb can be set declaratively in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object (for example, `CancelVerb-Text`). You can also set the properties programmatically in the form `Property.Subproperty` (for example, `CancelVerb.Text`)."
  example:
  - "The following code example demonstrates the use of the CancelVerb property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property declaratively and programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element, and within the element, it declares a `<cancelverb>` element and sets some properties using attributes. Also, in the `Page_PreRender` method, the code sets some properties on the cancel verb for the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_56_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_56_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Click the **End Connection** button to disconnect the controls that are already connected due to the declarative connection on the page. Click the **Select a consumer for the provider to connect with** hyperlink, and notice the effect of setting the various properties. If you position your mouse pointer over the **Terminate** button, the custom description text appears in a ToolTip."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartVerb CancelVerb { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartVerb
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> that enables end users to cancel the process of connecting two controls."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Close
  id: Close
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: Close()
  nameWithType: ConnectionsZone.Close()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.Close()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Closes the connection user interface (UI) created by the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control."
  remarks: "The Close method is called when a user clicks the zone-level close verb in the connection UI. After the method executes, the connection UI is hidden, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect%2A> property value is `null`, and the page remains in the connect display mode. At this point users can either select a control by clicking the connect verb on the control&quot;s verbs menu, or switch the page to another display mode."
  syntax:
    content: protected override void Close ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb
  id: CloseVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: CloseVerb
  nameWithType: ConnectionsZone.CloseVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets a reference to a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> object that enables end users to close the connection user interface (UI) created by the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control."
  remarks: "The close verb, as used with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, is a zone-level verb that appears at the bottom (the footer) of the connection UI. When users click the close verb, it cancels the connection process and closes the connection UI, but leaves the page in connect display mode. At this point, the user can either return the page to browse mode or click the connect verb on another server control to reopen the connection UI.       The close verb should be distinguished from the header close verb (for details, see the <xref:System.Web.UI.WebControls.WebParts.ToolZone.HeaderCloseVerb%2A> property). Both verbs perform the identical action of closing the connection UI, but the header close verb appears at the top of the UI and is represented by a hyperlink by default, whereas the close verb appears at the bottom of the UI, and is represented by a button by default.       Use the CloseVerb property to get a reference to the corresponding <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object in the UI. Although the property itself is read-only, after you have a reference to the verb, you can change its property values as needed.       You can set the property values of the close verb declaratively, by declaring the `<closeverb>` element within the tags of an `<asp:connectionszone>` element. The properties of the verb can be set declaratively in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object (for example, `CloseVerb-Text`). You can also set the properties programmatically in the form `Property.Subproperty` (for example, `CloseVerb.Text`)."
  example:
  - "The following code example demonstrates the use of the CloseVerb property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property declaratively and programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element, and within the element, it declares a `<closeverb>` element and sets a property using attributes. Also, in the `Page_PreRender` method, the code sets a property on the close verb for the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1068_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1068_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Click the **End Connection** button to disconnect the controls that are already connected due to the declarative connection on the page. Click the **Select a consumer for the provider to connect with** hyperlink, and notice the effect of setting the various properties. If you position your mouse pointer over the **Close Zone** button at the bottom of the connection UI, the custom description text appears in a ToolTip. Notice that the header close verb at the top of the connections zone is represented by a hyperlink, and your property assignments on the close verb have no effect on the header close verb."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartVerb CloseVerb { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartVerb
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> that allows an end user to close the connection UI."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle
  id: ConfigureConnectionTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConfigureConnectionTitle
  nameWithType: ConnectionsZone.ConfigureConnectionTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text displayed as the title of a subsection of the connection user interface (UI) created by a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control."
  remarks: "Use the ConfigureConnectionTitle property to use a custom value for the title of this section of the connection UI. The Configure Connections section of the UI appears when a user has displayed the connection UI with an existing connection, and clicks the configure verb (by default, this is represented by a **Configure** button in the connection UI).       You can set the property value declaratively, by assigning a string to the `configureconnectiontitle` attribute on the `<asp:connectionszone>` tag in a Web page. Or you can assign a string to the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConfigureConnectionTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element, and in the `Page_PreRender` method, the code assigns a value to the ConfigureConnectionTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_474_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_474_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Because the connection already exists, you now see an **End Connection** button, and a **Configure** button, which represents the configure verb. If your connection were configurable (it is not in this code example), the **Configure** button would be enabled; you could click it to open the Configure Connections section, and the title would be the value the code assigned to the ConfigureConnectionTitle property."
  syntax:
    content: public virtual string ConfigureConnectionTitle { get; set; }
    return:
      type: System.String
      description: "A string containing the title for the Configure Connections section. The default title is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb
  id: ConfigureVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConfigureVerb
  nameWithType: ConnectionsZone.ConfigureVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets a reference to a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> object used to open the configuration view in the connection user interface (UI)."
  remarks: "The configure verb appears in the Manage Connections section of the connection UI, when a connection already exists and a user has opened the connection UI. The UI presents users with an **End Connection** button to end the connection, and a **Configure** button (which represents the configure verb) to configure the connection. If a user clicks the **Configure** button, the Configure Connections section of the UI appears, enabling users to configure the connection. This option to configure a connection (and hence the **Configure** button) is enabled only when the connection uses a transformer, and the transformer includes a configuration wizard control (<xref:System.Web.UI.WebControls.Wizard>) that enables it to be configured by users. For details, see the <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> class.       Use the ConfigureVerb property to get a reference to the corresponding <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object in the UI. Although the property itself is read-only, after you have a reference to the verb, you can change its property values as needed.       You can set the property values of the configure verb declaratively, by declaring the `<configureverb>` element within the tags of an `<asp:connectionszone>` element. The properties of the verb can be set declaratively in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object (for example, `ConfigureVerb-Text`). You can also set the properties programmatically in the form `Property.Subproperty` (for example, `ConfigureVerb.Text`)."
  example:
  - "The following code example demonstrates the use of the ConfigureVerb property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property declaratively and programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element, and within the element, it declares a `<configureverb>` element and sets a property using attributes. Also, in the `Page_PreRender` method, the code sets a property on the configure verb for the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_633_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_633_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Notice that there is an **End Connection** button to disconnect the controls that are already connected, and a disabled **Configure** button. If your code example used a transformer that included a configuration wizard, the **Configure** button would be enabled, and users could click it to configure the connection. If you position your mouse pointer over the **Configure** button in the connection UI, the custom description text appears in a ToolTip."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartVerb ConfigureVerb { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartVerb
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> used to open the Configure Connections section in the connection UI."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText
  id: ConnectToConsumerInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectToConsumerInstructionText
  nameWithType: ConnectionsZone.ConnectToConsumerInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the instructional text displayed in the section of the connection user interface (UI) where users select a consumer connection point that the provider will connect to."
  remarks: "The ConnectToConsumerInstructionText property takes effect in a specific connection scenario. When a user clicks the connect verb on a provider control, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a portion of the connection UI that enables users to select a consumer. If the user clicked a connect verb on the consumer, then the connection UI would do the reverse, and display information about connecting to a provider.       The text in the ConnectToConsumerInstructionText property is displayed just above the drop-down list controls that contain the available consumer connection points to which a provider can be connected.       You can set this property declaratively, by using the `ConnectToConsumerInstructionText` attribute in the opening tag of the `<asp:connectionszone>` element in a page, or you can set the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectToConsumerInstructionText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConnectToConsumerInstructionText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/936e369f-f603-43f8-a04c-_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/936e369f-f603-43f8-a04c-_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Click the **End Connection** button to end the connection, and then click the **Select a consumer for the provider to connect with** hyperlink. The consumer connection UI appears, and the custom text assigned to the ConnectToConsumerInstructionText property appears just above the area with the control that allows you to select a connection point on the consumer for connecting with the provider."
  syntax:
    content: public virtual string ConnectToConsumerInstructionText { get; set; }
    return:
      type: System.String
      description: "A string containing the instructions for creating a consumer connection to the provider. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText
  id: ConnectToConsumerText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectToConsumerText
  nameWithType: ConnectionsZone.ConnectToConsumerText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text of a hyperlink that users click to open a view in which they can choose a consumer control for a connection."
  remarks: "The ConnectToConsumerText property takes effect in a specific connection scenario. When a user clicks the connect verb on a provider control, and no connection exists, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a hyperlink with the text **Select a consumer for the provider to connect with**. When users click the hyperlink, it opens a view in which they can select an available consumer to connect with the provider.       You can set this property declaratively, by using the `ConnectToConsumerText` attribute in the opening tag of the `<asp:connectionszone>` element in a page, or you can set the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectToConsumerText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConnectToConsumerText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_83_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_83_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Click the **End Connection** button to end the connection, and then notice that the hyperlink appears with the custom text assigned to the ConnectToConsumerText property."
  syntax:
    content: public virtual string ConnectToConsumerText { get; set; }
    return:
      type: System.String
      description: "A string displayed as the text of a hyperlink that opens the view where users select consumers. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle
  id: ConnectToConsumerTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectToConsumerTitle
  nameWithType: ConnectionsZone.ConnectToConsumerTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the title text of the section in the connection user interface (UI) in which users can select a specific consumer to connect with."
  remarks: "The ConnectToConsumerTitle property takes effect in a specific connection scenario. When users click the connect verb on a provider control, and no connection exists, they eventually arrive at a view in which they can select a consumer to connect with the previously selected provider. The title of this view is supplied by the ConnectToConsumerTitle property.       You can set this property declaratively, by using the `ConnectToConsumerTitle` attribute in the opening tag of the `<asp:connectionszone>` element in a page, or you can set the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectToConsumerTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConnectToConsumerTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1301_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1301_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Click the **End Connection** button to end the connection, and then click the link to select a consumer. In the view for selecting a consumer, note that the title text of the section is the text that the code assigns to the ConnectToConsumerTitle property."
  syntax:
    content: public virtual string ConnectToConsumerTitle { get; set; }
    return:
      type: System.String
      description: "A string serving as the title of the section where users select consumers. The default title is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText
  id: ConnectToProviderInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectToProviderInstructionText
  nameWithType: ConnectionsZone.ConnectToProviderInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the instructional text displayed in the section of the connection user interface (UI) where users select a provider connection point that the consumer will connect to."
  remarks: "The ConnectToProviderInstructionText property takes effect in a specific connection scenario. When a user clicks the connect verb on a consumer control, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a portion of the connection UI that enables users to select a provider. If the user clicked a connect verb on the provider, then the connection UI would do the reverse, and display information about connecting to a consumer.       The text in the ConnectToProviderInstructionText property is displayed just above the drop-down list controls that contain the available provider connection points to which a consumer can be connected.       You can set this property declaratively, by using the `ConnectToProviderInstructionText` attribute in the opening tag of the `<asp:connectionszone>` element in a page, or you can set the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectToProviderInstructionText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConnectToProviderInstructionText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/1b05e7a5-06d4-4365-a197-_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/1b05e7a5-06d4-4365-a197-_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. Click the **End Connection** button to end the connection, and then click the **Select a provider for the consumer to connect with** hyperlink. The provider connection UI appears, and the custom text assigned to the ConnectToProviderInstructionText property appears just above the area with the control that allows you to select a connection point on the provider for connecting with the consumer."
  syntax:
    content: public virtual string ConnectToProviderInstructionText { get; set; }
    return:
      type: System.String
      description: "A string containing the instructions on creating a provider connection to the consumer. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText
  id: ConnectToProviderText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectToProviderText
  nameWithType: ConnectionsZone.ConnectToProviderText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text of a hyperlink that users click to open a view in which they can choose a provider control for a connection."
  remarks: "The ConnectToProviderText property takes effect in a specific connection scenario. When a user clicks the connect verb on a consumer control, and no connection exists, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a hyperlink with the text **Select a provider for the consumer to connect with**. When users click the hyperlink, it opens a view in which they can select an available provider to connect with the consumer.       You can set this property declaratively, by using the `ConnectToProviderText` attribute in the opening tag of the `<asp:connectionszone>` element in a page, or you can set the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectToProviderText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConnectToProviderText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_450_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_450_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. Click the **End Connection** button to end the connection, and then notice that the hyperlink appears with the custom text assigned to the ConnectToProviderText property."
  syntax:
    content: public virtual string ConnectToProviderText { get; set; }
    return:
      type: System.String
      description: "A string displayed as the text of a hyperlink that opens the view where users select providers. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle
  id: ConnectToProviderTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectToProviderTitle
  nameWithType: ConnectionsZone.ConnectToProviderTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the title text of the section in the connection user interface (UI) in which users can select a specific provider to connect with."
  remarks: "The ConnectToProviderTitle property takes effect in a specific connection scenario. When users click the connect verb on a consumer control, and no connection exists, they eventually arrive at a view in which they can select a provider to connect with the previously selected consumer. The title of this view is supplied by the ConnectToProviderTitle property.       You can set this property declaratively, by using the `ConnectToProviderTitle` attribute in the opening tag of the `<asp:connectionszone>` element in a page, or you can set the property programmatically."
  example:
  - "The following code example demonstrates the use of the ConnectToProviderTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConnectToProviderTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1101_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1101_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. Click the **End Connection** button to end the connection, and then click the link to select a provider. In the view for selecting a provider, note that the title text of the section is the text that the code assigns to the ConnectToProviderTitle property."
  syntax:
    content: public virtual string ConnectToProviderTitle { get; set; }
    return:
      type: System.String
      description: "A string serving as the title of the section where users select providers. The default title is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb
  id: ConnectVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConnectVerb
  nameWithType: ConnectionsZone.ConnectVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets a reference to a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> object that enables two <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref> controls to establish a connection."
  remarks: "The connect verb, as used with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, is a zone-level verb that appears in the connection user interface (UI) as part of the view in which users finalize a connection between two controls. In the part of the UI where users can select connection points, if two controls are able to connect, the connect verb is enabled near the bottom of the UI. After users select a connection point, they can click the connect verb to create the connection.      > [!NOTE] >  The zone-level connect verb discussed in this topic actually establishes a connection between controls, and is different from the verb that appears on the verbs menu of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control. When a user switches a Web page to connect display mode, if a control can form connections, a <xref:System.Web.UI.WebControls.WebParts.WebPart> connect verb appears on its verbs menu. This <xref:System.Web.UI.WebControls.WebParts.WebPart> connect verb simply opens the connection UI created by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. In contrast, the ConnectVerb verb discussed in this topic, which operates at the zone level, actually creates a connection.       Use the ConnectVerb property to get a reference to the corresponding <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object in the UI. Although the property itself is read-only, after you have a reference to the verb, you can change its property values as needed.       You can set the property values of the connect verb declaratively, by declaring the `<connectverb>` element between the opening and closing tags of an `<asp:connectionszone>` element. The properties of the verb can also be set declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object (for example, `ConnectVerb-Text`). You can also set the properties programmatically in the form `Property.Subproperty` (for example, `ConnectVerb.Text`)."
  example:
  - "The following code example demonstrates the use of the ConnectVerb property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property declaratively and programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, within the element tags, it declares a `<connectverb>` element and sets some properties using attributes. Also, in the `Page_PreRender` method, the code sets some properties on the connect verb for the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1155_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1155_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Click the **End Connection** button to disconnect the controls that are already connected due to the declarative connection on the page. Click the **Select a consumer for the provider to connect with** hyperlink, and notice the effect of setting the various properties. If you position your mouse pointer over the **Connect Controls** button, the custom description text appears in a ToolTip."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartVerb ConnectVerb { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartVerb
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> that enables two controls to establish a connection."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText
  id: ConsumersInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConsumersInstructionText
  nameWithType: ConnectionsZone.ConsumersInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the instructional text shown in the consumers section of the connection user interface (UI), when a connection already exists."
  remarks: "The ConsumersInstructionText property takes effect in a specific connection scenario. When a user clicks the connect verb on a provider control, and a connection already exists, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to disconnect the connection. The view also shows any consumers participating in the connection. Just above the list of consumers is the consumers instruction text, which by default is more of a description of what consumer controls do in a connection.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `ConsumersInstructionText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the ConsumersInstructionText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConsumersInstructionText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_175_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_175_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. In the view that opens for the existing connection, look in the consumers section for the custom text assigned to the ConsumersInstructionText property."
  syntax:
    content: public virtual string ConsumersInstructionText { get; set; }
    return:
      type: System.String
      description: "A string serving as the instructional text for consumers participating in a connection. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle
  id: ConsumersTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ConsumersTitle
  nameWithType: ConnectionsZone.ConsumersTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the title shown above the consumers section of the connection user interface (UI), when a connection already exists."
  remarks: "The ConsumersTitle property takes effect in a specific connection scenario. When a user clicks the connect verb on a provider control, and a connection already exists, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to disconnect the connection. The view also shows any consumers participating in the connection. Just above the list of consumers is the consumers instruction text, and above that is the title of the consumers section, for which the ConsumersTitle property supplies the text.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `ConsumersTitle` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the ConsumersTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ConsumersTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_926_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_926_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. In the view that opens for the existing connection, look in the consumers section for the custom text assigned to the ConsumersTitle property."
  syntax:
    content: public virtual string ConsumersTitle { get; set; }
    return:
      type: System.String
      description: "A string serving as the title text for consumers participating in a connection. The default title is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls
  id: CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: CreateChildControls()
  nameWithType: ConnectionsZone.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Creates all child controls contained in a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control in preparation for posting back to the server or rendering."
  remarks: "This method overrides the base <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=fullName> method. It prepares all connection-related objects needed for connections (for example, it retrieves the connection point objects from the available consumer and provider controls), and it creates the various user interface (UI) controls that users interact with in the connection UI to establish a connection."
  syntax:
    content: protected override void CreateChildControls ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb
  id: DisconnectVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: DisconnectVerb
  nameWithType: ConnectionsZone.DisconnectVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets a reference to a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> object that enables a user to disconnect two connected <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref> controls."
  remarks: "The disconnect verb, as used with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, is a zone-level verb that appears in the connection user interface (UI) as part of the view in which users manage an existing connection between two controls. After users have clicked the <xref:System.Web.UI.WebControls.WebParts.WebPart> connect verb on the verbs menu of a control, and the connection UI appears, if there is already a connection between two controls, the disconnect verb appears activated near the bottom of the UI.       Use the DisconnectVerb property to get a reference to the corresponding <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object in the UI. Although the property itself is read-only, after you have a reference to the verb, you can change its property values as needed.       You can set the property values of the disconnect verb declaratively, by declaring the `<disconnectverb>` element between the opening and closing tags of an `<asp:connectionszone>` element. The properties of the verb can also be set declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute in the form `Property-Subproperty`, where `Subproperty` is a property of the <xref:System.Web.UI.WebControls.WebParts.WebPartVerb> object (for example, `DisconnectVerb-Text`). You can also set the properties programmatically in the form `Property.Subproperty` (for example, `DisconnectVerb.Text`)."
  example:
  - "The following code example demonstrates the use of the DisconnectVerb property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property declaratively and programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, within the element tags, declares a `<disconnectverb>` element and sets some properties using attributes. Also, in the `Page_PreRender` method, the code sets some properties on the disconnect verb for the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_493_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_493_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Provider** control, and click the connect verb. Note the effect of the property values that were set on the disconnect verb. If you position your mouse pointer over the **End Connection** button, the custom description text appears in a ToolTip. Click the **End Connection** button to disconnect the controls that are already connected due to the declarative connection on the page."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartVerb DisconnectVerb { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartVerb
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartVerb&quot;></xref> that disconnects two connected <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref> controls."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Display
  id: Display
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: Display
  nameWithType: ConnectionsZone.Display
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.Display
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets a value that indicates whether a <xref href=&quot;System.Web.UI.WebControls.WebParts.ToolZone&quot;></xref> control is currently displayed."
  syntax:
    content: protected override bool Display { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Web.UI.WebControls.WebParts.ToolZone&quot;></xref> is currently displayed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.Display*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText
  id: EmptyZoneText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: EmptyZoneText
  nameWithType: ConnectionsZone.EmptyZoneText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets a text message that is displayed in an empty <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control if there are insufficient controls on a Web page to establish a connection."
  remarks: "This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override string EmptyZoneText { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String> that contains the message for an empty zone. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage
  id: ExistingConnectionErrorMessage
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ExistingConnectionErrorMessage
  nameWithType: ConnectionsZone.ExistingConnectionErrorMessage
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text of a message displayed in the connection user interface (UI) when there is an error or warning on an existing connection."
  syntax:
    content: public virtual string ExistingConnectionErrorMessage { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String> that contains the text of the message. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText
  id: GetFromText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: GetFromText
  nameWithType: ConnectionsZone.GetFromText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text shown in the section of the connection user interface (UI) that precedes the named provider from which a consumer will retrieve data."
  remarks: "The GetFromText property takes effect in a specific connection scenario. When a user clicks the connect verb on a consumer control, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to establish a connection to a provider. In the part of the UI that instructs users to choose a provider connection point, there is some text that precedes the drop-down list control in which users can select which connection point the consumer will get its data from. This text that precedes the drop-down control is the text in the GetFromText property. By default, the text value is **From**.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `GetFromText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the GetFromText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the GetFromText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_527_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_527_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, look in the providers section for the text that precedes the named provider. This is the text assigned to the GetFromText property."
  syntax:
    content: public virtual string GetFromText { get; set; }
    return:
      type: System.String
      description: "A string that prefaces the named provider that the consumer will get data from. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText
  id: GetText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: GetText
  nameWithType: ConnectionsZone.GetText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text shown in the section of the connection user interface (UI) that precedes the named consumer that will receive data from a provider."
  remarks: "The GetText property takes effect in a specific connection scenario. When a user clicks the connect verb on a consumer control, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to establish a connection to a provider. In the part of the UI that instructs users to choose a provider connection point, there is some text that precedes the named consumer that will participate in the connection. This text that precedes the consumer is the text in the GetText property. By default, the text value is **Get**.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `GetText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the GetText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the GetText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_735_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_735_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, look in the providers section for the text that precedes the named consumer. This is the text assigned to the GetText property."
  syntax:
    content: public virtual string GetText { get; set; }
    return:
      type: System.String
      description: "A string that prefaces the named consumer in the connection. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText
  id: HeaderText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: HeaderText
  nameWithType: ConnectionsZone.HeaderText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the header text that appears at the top of the connection user interface (UI) created by the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control."
  remarks: "The text contained in the HeaderText property is visible whenever the connection UI is displayed. When a user clicks the connect verb on the verbs menu of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, the connection UI appears, and the header text serves as a label at the very top of the connection UI. The default text is **Connections Zone**.       This property overrides the base <xref:System.Web.UI.WebControls.WebParts.WebZone.HeaderText%2A> property from the <xref:System.Web.UI.WebControls.WebParts.WebZone> class, so that the default connections zone header text can be assigned to the property.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `HeaderText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the HeaderText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the HeaderText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_26_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_26_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, note that the header text at the top of the connections zone is the value assigned to the HeaderText property in the code example."
  syntax:
    content: public override string HeaderText { get; set; }
    return:
      type: System.String
      description: "A string that contains the header text for the connection UI. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText
  id: InstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: InstructionText
  nameWithType: ConnectionsZone.InstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or set the text that is used for general instructions about the selected control in the section of the connection user interface (UI) for managing existing connections."
  remarks: "The text contained in the InstructionText property is visible whenever the connection UI is displayed and a connection already exists. Just below the header text (contained in the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText%2A> property), which is found at the top of the connection UI, is the instruction title, and just below that is the instruction text. The instruction text informs users what type of action can be performed on the currently selected <xref:System.Web.UI.WebControls.WebParts.WebPart> control (the selected control is the one for which the user clicked a connect verb on the control&quot;s verbs menu). By default, the instruction text is **Manage the connections for the current Web part**.       This property overrides the base <xref:System.Web.UI.WebControls.WebParts.ToolZone.InstructionText%2A> property from the <xref:System.Web.UI.WebControls.WebParts.ToolZone> class, so that the default connections zone instruction text can be assigned to the property.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `InstructionText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the InstructionText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the InstructionText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_12_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_12_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, note that the instruction text near the top of the connections zone is the value assigned to the InstructionText property in the code example."
  syntax:
    content: public override string InstructionText { get; set; }
    return:
      type: System.String
      description: "A string that contains the instruction text for the connection UI. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle
  id: InstructionTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: InstructionTitle
  nameWithType: ConnectionsZone.InstructionTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text that is used for a general description of the action that can be performed on the consumer or provider control, within the connection user interface (UI) for managing existing connections."
  remarks: "The text contained in the InstructionTitle property is visible whenever the connection UI is displayed and a connection already exists. The instruction title text is just below the header text (contained in the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText%2A> property), which is found at the top of the connection UI. The instruction title is a general description that informs users what type of action can be performed on the consumer or provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control that is participating in an existing connection. By default, the instruction title begins with **Manage the connections for**, and ends with the name of the consumer or provider control that the user selected by clicking the connect verb on its verbs menu.      > [!NOTE] >  When you assign a custom value to this property, remember that you cannot know at design time whether the user will select a provider or consumer control on which to manage the connection, so the custom instruction title must be general enough to refer to a consumer or a provider control. In contrast, the default value of the property is rendered in such a way that it dynamically appends the name of whatever consumer or provider control that the user selects. If you want to supply a custom value for the property that mimics this behavior, you must inherit from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class, and override this property or the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody%2A> method.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `InstructionTitle` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the InstructionTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the InstructionTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1334_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1334_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, note that the instruction title just below the header text, near the top of the connections zone, is the value assigned to the InstructionTitle property in the code example."
  syntax:
    content: public virtual string InstructionTitle { get; set; }
    return:
      type: System.String
      description: "A string that contains the instruction title for the connection UI. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: ConnectionsZone.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Restores control state information from a previous page request that was saved by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState*> method."
  remarks: "When this method is invoked, it determines whether control state was previously saved for the control and, if so, sets the control state to the saved value."
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An <xref:System.Object> that represents the control state to be restored."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The length of <code>savedState</code> does not equal the length of the array created by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState*> method."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: ConnectionsZone.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Restores view-state information from a previous page request that was saved by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState*> method."
  remarks: "This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).       When this method is invoked, it determines whether view state was previously saved for the control and, if so, sets the view state to the saved value. The method overrides the <xref:System.Web.UI.WebControls.WebParts.ToolZone.LoadViewState%2A> method inherited from the <xref:System.Web.UI.WebControls.WebParts.ToolZone> class, so that it can add to the base implementation and restore state for the several zone-level verbs used in the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control."
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An <xref:System.Object> that contains the view state to be restored."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The length of <code>savedState</code> does not equal the length of the array created by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState*> method."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage
  id: NewConnectionErrorMessage
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: NewConnectionErrorMessage
  nameWithType: ConnectionsZone.NewConnectionErrorMessage
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text of a message displayed in the connection user interface (UI) when there is an error or warning on a new connection that a user tries to create."
  syntax:
    content: public virtual string NewConnectionErrorMessage { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String> that contains the text of the message. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText
  id: NoExistingConnectionInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: NoExistingConnectionInstructionText
  nameWithType: ConnectionsZone.NoExistingConnectionInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the instruction text that appears in the body of the connection user interface (UI) when a Web Parts control has no existing connection."
  remarks: "The text contained in the NoExistingConnectionInstructionText property is visible whenever the connection UI is displayed and no connection exists. After a user switches a page into connect display mode and clicks a connect verb on the verbs menu of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, the main connection UI is displayed. If there is no current connection, the text from the NoExistingConnectionInstructionText property is displayed near the bottom of the connection UI, just above the close verb in the zone&quot;s footer area. The text describes the fact that there are no existing connections and gives users basic instructions for creating a connection within the UI.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `NoExistingConnectionInstructionText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the NoExistingConnectionInstructionText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the NoExistingConnectionInstructionText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/914f44a9-cf32-4bd1-a42d-_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/914f44a9-cf32-4bd1-a42d-_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, click the **End Connection** button. Note that the instruction text for no existing connections appears near the bottom of the connection UI, just above the close verb in the zone's footer area."
  syntax:
    content: public virtual string NoExistingConnectionInstructionText { get; set; }
    return:
      type: System.String
      description: "A string that contains the text message for the case where there is no existing connection. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle
  id: NoExistingConnectionTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: NoExistingConnectionTitle
  nameWithType: ConnectionsZone.NoExistingConnectionTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the title text that appears in the body of the connection user interface (UI) when a Web Parts control has no existing connection."
  remarks: "The text contained in the NoExistingConnectionTitle property is visible whenever the connection UI is displayed and no connection exists. After a user switches a page into connect display mode and clicks a connect verb on the verbs menu of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, the main connection UI is displayed. If there is no current connection, the text from the NoExistingConnectionTitle property is displayed near the top of the body of the connection UI, just below the link that users can click to create a new connection. The title summarizes the fact that no connections exist, and the default title is **No active connections**.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `NoExistingConnectionTitle` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the NoExistingConnectionTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the NoExistingConnectionTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_676_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_676_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, click the **End Connection** button. Note that the instruction title for no existing connections occurs just below the link that enables users to create a new connection."
  syntax:
    content: public virtual string NoExistingConnectionTitle { get; set; }
    return:
      type: System.String
      description: "A string that contains the title text for the case where there is no existing connection. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  id: OnDisplayModeChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: OnDisplayModeChanged(Object,WebPartDisplayModeEventArgs)
  nameWithType: ConnectionsZone.OnDisplayModeChanged(Object,WebPartDisplayModeEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged(Object,WebPartDisplayModeEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged&quot;></xref> event."
  remarks: "This method raises the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> event and provides a custom handler for it. After a Web page enters or exits the connect display mode, this method carries out several steps unique to the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The method cancels any connection activity that is pending at this point, ensures that no child controls from the connection user interface (UI) are displayed by setting the <xref:System.Web.UI.Control.ChildControlsCreated%2A> property to `false`, and sets the connection UI to a mode in which it can display information about existing connections, if a user proceeds with the process of creating a connection.       To add specialized handling to the handling provided in the OnDisplayModeChanged method, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class and override this method. As an alternative, developers can also provide a handler for the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> event on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control by adding an `OnDisplayModeChanged` attribute to the `<asp:webpartmanager>` element in a Web page, and assigning to it the value of a custom method to handle the event. In this method, developers can check the current value of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property, and if it is <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>, they can carry out the desired changes to the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control."
  syntax:
    content: protected override void OnDisplayModeChanged (object sender, System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "The sender of the event."
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ConnectionsZone.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Raises the <xref href=&quot;System.Web.UI.Control.Init&quot;></xref> event."
  remarks: "This method calls the base <xref:System.Web.UI.WebControls.WebParts.ToolZone.OnInit%2A?displayProperty=fullName> method, and adds custom handling to prepare the Web page to display the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: OnSelectedWebPartChanged(Object,WebPartEventArgs)
  nameWithType: ConnectionsZone.OnSelectedWebPartChanged(Object,WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged(Object,WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged&quot;></xref> event."
  remarks: "This method overrides the <xref:System.Web.UI.WebControls.WebParts.ToolZone> implementation to reset the connection user interface (UI) for the fact that the child controls will have to be recreated. This is necessary because, when the selected control changes, several options in the connection UI will change, depending on whether the selected control is a consumer or provider, what connection points the controls has (the connection points are listed in drop-down list controls), and other details."
  syntax:
    content: protected override void OnSelectedWebPartChanged (object sender, System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "An <xref:System.Object> that identifies the sender of the event."
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType
  id: PartChromeType
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: PartChromeType
  nameWithType: ConnectionsZone.PartChromeType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the type of border that frames the server controls contained in a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control."
  remarks: "This property cannot be set by themes or style sheet themes. For more information, see <xref:System.Web.UI.ThemeableAttribute> and [ASP.NET Themes and Skins](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.PartChromeType PartChromeType { get; set; }
    return:
      type: System.Web.UI.WebControls.WebParts.PartChromeType
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.PartChromeType&quot;></xref> that determines the type of border that frames the controls contained in the connections zone."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText
  id: ProvidersInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ProvidersInstructionText
  nameWithType: ConnectionsZone.ProvidersInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the instructional text shown in the providers section of the connection user interface (UI), when a connection already exists."
  remarks: "The ProvidersInstructionText property takes effect in a specific connection scenario. When a user clicks the connect verb on a consumer control, and a connection already exists, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to disconnect the connection. The view also shows any providers participating in the connection. Just above the list of providers is the providers instruction text, which by default is more of a description of what provider controls do in a connection.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `ProvidersInstructionText` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the ProvidersInstructionText property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ProvidersInstructionText property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_237_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_237_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, look in the providers section for the custom text assigned to the ProvidersInstructionText property."
  syntax:
    content: public virtual string ProvidersInstructionText { get; set; }
    return:
      type: System.String
      description: "A string serving as the instructional text for providers participating in a connection. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle
  id: ProvidersTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: ProvidersTitle
  nameWithType: ConnectionsZone.ProvidersTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the title shown above the providers section of the connection user interface (UI), when a connection already exists."
  remarks: "The ProvidersTitle property takes effect in a specific connection scenario. When a user clicks the connect verb on a consumer control, and a connection already exists, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to disconnect the connection. The view also shows any providers participating in the connection. Just above the list of providers is the providers instruction text, and above that is the title of the providers section, for which the ProvidersTitle property supplies the text.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `ProvidersTitle` and assigning it a value. You can also set the property value programmatically."
  example:
  - "The following code example demonstrates the use of the ProvidersTitle property with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. The example contains only the code for the Web page that demonstrates use of the property; for the other two code files needed to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview. The code example has four parts:  \n  \n-   A user control that enables you to switch display modes on the Web page. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A source file that contains the code for a ZIP Code interface, and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection. Obtain this code from the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> class overview.  \n  \n-   A Web page that hosts all the controls, declares an `<asp:connectionszone>` element, and shows how to use the property programmatically.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The Web page declares an `<asp:connectionszone>` element and, in the `Page_PreRender` method, the code assigns a value to the ProvidersTitle property.  \n  \n [!code-cs[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_852_1.aspx)]\n [!code-vb[WebParts_ConnectionZone_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_852_1.aspx)]  \n  \n Load the page in a browser. Switch to connect mode, using the **Display Mode** control. Click the verbs menu arrow on the **ZIP Code Consumer** control, and click the connect verb. In the view that opens for the existing connection, look in the providers section for the custom text assigned to the ProvidersTitle property."
  syntax:
    content: public virtual string ProvidersTitle { get; set; }
    return:
      type: System.String
      description: "A string serving as the title text for providers participating in a connection. The default title is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent(System.String)
  id: RaisePostBackEvent(System.String)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: RaisePostBackEvent(String)
  nameWithType: ConnectionsZone.RaisePostBackEvent(String)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Raises an event for the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control when the form that contains it posts back to the server."
  remarks: 'The RaisePostBackEvent method handles the several possible outcomes that can occur when a form containing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control is posted back to the server. First, if the value of the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect%2A> property is `null`, there is no further connections-related action to take, so any pending connections are canceled and the method returns. Second, if the connection user interface (UI) is actually visible and the user is in the process of creating a connection, the method handles the possible scenarios: the user clicked a connect verb, the user clicked a disconnect verb, the transformer UI is being displayed, the zone is being closed, a connection to a provider is being created, or a connection to a consumer is being created. In each case, the RaisePostBackEvent method takes the `eventArgument` parameter being passed and updates the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control accordingly. Finally, if none of the above cases apply, the method calls the base method in the <xref:System.Web.UI.WebControls.WebParts.ToolZone> class.'
  syntax:
    content: protected override void RaisePostBackEvent (string eventArgument);
    parameters:
    - id: eventArgument
      type: System.String
      description: "A <xref:System.String> that contains the argument data for the event."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: ConnectionsZone.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Renders the contents of the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control to the specified <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> object."
  remarks: "The Render method updates the connection user interface (UI) with any changes that occurred since the child controls were created or during the prerendering stage, and then calls the base <xref:System.Web.UI.WebControls.CompositeControl.Render%2A?displayProperty=fullName> method to write the contents of the zone to the Web page."
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "The <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> that receives the Web Parts control content."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody(System.Web.UI.HtmlTextWriter)
  id: RenderBody(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: RenderBody(HtmlTextWriter)
  nameWithType: ConnectionsZone.RenderBody(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Sends the content of a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control&quot;s body area to the specified <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> object, which writes the content to the Web page."
  remarks: "The body of a Web Parts control is the portion between its header and footer areas. The RenderBody method overrides the rendering of the body region that is done by the base <xref:System.Web.UI.WebControls.WebParts.WebZone.RenderBody%2A?displayProperty=fullName> method.       This method adds to the base rendering unique style attributes that apply to a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control, and it also renders the appropriate content for the child controls in the connection user interface (UI), based on previous selections made by a user in the UI."
  syntax:
    content: protected override void RenderBody (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "The <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> that receives the control&quot;s body content."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs(System.Web.UI.HtmlTextWriter)
  id: RenderVerbs(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: RenderVerbs(HtmlTextWriter)
  nameWithType: ConnectionsZone.RenderVerbs(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Renders the zone-level verbs for a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control."
  remarks: "This method renders the several zone-level verbs that are included with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. As a part of this method, the <xref:System.Web.UI.WebControls.WebParts.ToolZone.RenderVerb%2A?displayProperty=fullName> method is also called to render the individual details of each verb."
  syntax:
    content: protected override void RenderVerbs (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "The <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> that receives the content of the verbs to render in a connections zone."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: ConnectionsZone.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Saves any Web Parts control state changes that occurred since the last time the page was posted back to the server."
  remarks: "If a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control is visible in any of its modes except the mode that displays existing connections details, and if it has control state data about connection details associated with it, the SaveControlState method saves the data so that it can be persisted across round trips to the server."
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "Returns the Web Parts control&quot;s current state. If no state is associated with the control, this method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: ConnectionsZone.SaveViewState()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Saves a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control&quot;s view-state changes that occurred since the page was last posted back to the server."
  remarks: "View state is the accumulation of the values of a Web Parts control&quot;s properties. These values are automatically placed in the control&quot;s <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. This property&quot;s value is then persisted to a string object after the save state stage of the control&quot;s life cycle.       The SaveViewState method adds to the base implementation the ability to save view state for the various verbs in a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "Returns an <xref:System.Object> containing the control&quot;s current view state. If no view state is associated with the control, this method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText
  id: SendText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: SendText
  nameWithType: ConnectionsZone.SendText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text shown in the section of the connection user interface (UI) that precedes the named provider that will send data to a consumer."
  remarks: "The SendText property takes effect in a specific connection scenario. When a user clicks the connect verb on a provider control, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to establish a connection to a consumer. In the part of the UI that instructs users to choose a consumer connection point, there is some text that precedes the named provider that will participate in the connection. This text that precedes the provider is the text in the SendText property. By default, the text value is **Send**.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `SendText` and assigning it a value. You can also set the property value programmatically."
  syntax:
    content: public virtual string SendText { get; set; }
    return:
      type: System.String
      description: "A string that prefaces the named provider in the connection. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText
  id: SendToText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: SendToText
  nameWithType: ConnectionsZone.SendToText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets or sets the text shown in the section of the connection user interface (UI) that precedes the named consumer to which a provider will send data."
  remarks: "The SendToText property takes effect in a specific connection scenario. When a user clicks the connect verb on a provider control, the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control displays a view that enables users to establish a connection to a consumer. In the part of the UI that instructs users to choose a consumer connection point, there is some text that precedes the drop-down list control in which users can select which connection point the provider will send its data to. This text that precedes the drop-down control is the text in the SendToText property. By default, the text value is **To**.       You can set the value of this property declaratively within the opening tag of the `<asp:connectionszone>` element, by adding an attribute named `SendToText` and assigning it a value. You can also set the property value programmatically."
  syntax:
    content: public virtual string SendToText { get; set; }
    return:
      type: System.String
      description: "A string that prefaces the named consumer that the provider will send data to. The default text is a culture-specific string supplied by the .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: ConnectionsZone.TrackViewState()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Tracks view-state changes to the <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionsZone&quot;></xref> control so the changes can be stored in the control&quot;s <xref href=&quot;System.Web.UI.StateBag&quot;></xref> object."
  remarks: "This method calls the base method in the <xref:System.Web.UI.WebControls.WebParts.ToolZone> class and also triggers view-state tracking for the verbs associated with a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect
  id: WebPartToConnect
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  langs:
  - csharp
  name: WebPartToConnect
  nameWithType: ConnectionsZone.WebPartToConnect
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gets the currently selected <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref> control to connect to."
  remarks: "When a user switches a Web page into connect display mode, and clicks the connect verb on the verbs menu of a <xref:System.Web.UI.WebControls.WebParts.WebPart> control that is enabled for connections, the connection user interface (UI) opens, and the control is now referenced by the WebPartToConnect property.      > [!NOTE] >  The control referenced by the WebPartToConnect property gets its value from the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> property of the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager> object."
  syntax:
    content: protected System.Web.UI.WebControls.WebParts.WebPart WebPartToConnect { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref> control."
  overload: System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ToolZone
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ToolZone
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.#ctor
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectionsZone()
  nameWithType: ConnectionsZone.ConnectionsZone()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectionsZone()
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: CancelVerb
  nameWithType: ConnectionsZone.CancelVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb
- uid: System.Web.UI.WebControls.WebParts.WebPartVerb
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartVerb
  nameWithType: WebPartVerb
  fullName: System.Web.UI.WebControls.WebParts.WebPartVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Close
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: Close()
  nameWithType: ConnectionsZone.Close()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.Close()
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: CloseVerb
  nameWithType: ConnectionsZone.CloseVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConfigureConnectionTitle
  nameWithType: ConnectionsZone.ConfigureConnectionTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConfigureVerb
  nameWithType: ConnectionsZone.ConfigureVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToConsumerInstructionText
  nameWithType: ConnectionsZone.ConnectToConsumerInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToConsumerText
  nameWithType: ConnectionsZone.ConnectToConsumerText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToConsumerTitle
  nameWithType: ConnectionsZone.ConnectToConsumerTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToProviderInstructionText
  nameWithType: ConnectionsZone.ConnectToProviderInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToProviderText
  nameWithType: ConnectionsZone.ConnectToProviderText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToProviderTitle
  nameWithType: ConnectionsZone.ConnectToProviderTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectVerb
  nameWithType: ConnectionsZone.ConnectVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConsumersInstructionText
  nameWithType: ConnectionsZone.ConsumersInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConsumersTitle
  nameWithType: ConnectionsZone.ConsumersTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: CreateChildControls()
  nameWithType: ConnectionsZone.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls()
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: DisconnectVerb
  nameWithType: ConnectionsZone.DisconnectVerb
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Display
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: Display
  nameWithType: ConnectionsZone.Display
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.Display
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: EmptyZoneText
  nameWithType: ConnectionsZone.EmptyZoneText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ExistingConnectionErrorMessage
  nameWithType: ConnectionsZone.ExistingConnectionErrorMessage
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: GetFromText
  nameWithType: ConnectionsZone.GetFromText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: GetText
  nameWithType: ConnectionsZone.GetText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: HeaderText
  nameWithType: ConnectionsZone.HeaderText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: InstructionText
  nameWithType: ConnectionsZone.InstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: InstructionTitle
  nameWithType: ConnectionsZone.InstructionTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: ConnectionsZone.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: ConnectionsZone.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState(Object)
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: NewConnectionErrorMessage
  nameWithType: ConnectionsZone.NewConnectionErrorMessage
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: NoExistingConnectionInstructionText
  nameWithType: ConnectionsZone.NoExistingConnectionInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: NoExistingConnectionTitle
  nameWithType: ConnectionsZone.NoExistingConnectionTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: OnDisplayModeChanged(Object,WebPartDisplayModeEventArgs)
  nameWithType: ConnectionsZone.OnDisplayModeChanged(Object,WebPartDisplayModeEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged(Object,WebPartDisplayModeEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeEventArgs
  nameWithType: WebPartDisplayModeEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ConnectionsZone.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: OnSelectedWebPartChanged(Object,WebPartEventArgs)
  nameWithType: ConnectionsZone.OnSelectedWebPartChanged(Object,WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged(Object,WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartEventArgs
  nameWithType: WebPartEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartEventArgs
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: PartChromeType
  nameWithType: ConnectionsZone.PartChromeType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType
- uid: System.Web.UI.WebControls.WebParts.PartChromeType
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: PartChromeType
  nameWithType: PartChromeType
  fullName: System.Web.UI.WebControls.WebParts.PartChromeType
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ProvidersInstructionText
  nameWithType: ConnectionsZone.ProvidersInstructionText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ProvidersTitle
  nameWithType: ConnectionsZone.ProvidersTitle
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent(System.String)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: RaisePostBackEvent(String)
  nameWithType: ConnectionsZone.RaisePostBackEvent(String)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent(String)
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: ConnectionsZone.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: RenderBody(HtmlTextWriter)
  nameWithType: ConnectionsZone.RenderBody(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody(HtmlTextWriter)
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: RenderVerbs(HtmlTextWriter)
  nameWithType: ConnectionsZone.RenderVerbs(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs(HtmlTextWriter)
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SaveControlState()
  nameWithType: ConnectionsZone.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState()
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SaveViewState()
  nameWithType: ConnectionsZone.SaveViewState()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState()
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SendText
  nameWithType: ConnectionsZone.SendText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SendToText
  nameWithType: ConnectionsZone.SendToText
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: TrackViewState()
  nameWithType: ConnectionsZone.TrackViewState()
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState()
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: WebPartToConnect
  nameWithType: ConnectionsZone.WebPartToConnect
  fullName: System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectionsZone
  nameWithType: ConnectionsZone.ConnectionsZone
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CancelVerb*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: CancelVerb
  nameWithType: ConnectionsZone.CancelVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Close*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: Close
  nameWithType: ConnectionsZone.Close
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CloseVerb*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: CloseVerb
  nameWithType: ConnectionsZone.CloseVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureConnectionTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConfigureConnectionTitle
  nameWithType: ConnectionsZone.ConfigureConnectionTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConfigureVerb*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConfigureVerb
  nameWithType: ConnectionsZone.ConfigureVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerInstructionText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToConsumerInstructionText
  nameWithType: ConnectionsZone.ConnectToConsumerInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToConsumerText
  nameWithType: ConnectionsZone.ConnectToConsumerText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToConsumerTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToConsumerTitle
  nameWithType: ConnectionsZone.ConnectToConsumerTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderInstructionText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToProviderInstructionText
  nameWithType: ConnectionsZone.ConnectToProviderInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToProviderText
  nameWithType: ConnectionsZone.ConnectToProviderText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectToProviderTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectToProviderTitle
  nameWithType: ConnectionsZone.ConnectToProviderTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConnectVerb*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConnectVerb
  nameWithType: ConnectionsZone.ConnectVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersInstructionText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConsumersInstructionText
  nameWithType: ConnectionsZone.ConsumersInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ConsumersTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ConsumersTitle
  nameWithType: ConnectionsZone.ConsumersTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.CreateChildControls*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: CreateChildControls
  nameWithType: ConnectionsZone.CreateChildControls
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.DisconnectVerb*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: DisconnectVerb
  nameWithType: ConnectionsZone.DisconnectVerb
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Display*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: Display
  nameWithType: ConnectionsZone.Display
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.EmptyZoneText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: EmptyZoneText
  nameWithType: ConnectionsZone.EmptyZoneText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ExistingConnectionErrorMessage*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ExistingConnectionErrorMessage
  nameWithType: ConnectionsZone.ExistingConnectionErrorMessage
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetFromText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: GetFromText
  nameWithType: ConnectionsZone.GetFromText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.GetText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: GetText
  nameWithType: ConnectionsZone.GetText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.HeaderText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: HeaderText
  nameWithType: ConnectionsZone.HeaderText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: InstructionText
  nameWithType: ConnectionsZone.InstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.InstructionTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: InstructionTitle
  nameWithType: ConnectionsZone.InstructionTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadControlState*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: LoadControlState
  nameWithType: ConnectionsZone.LoadControlState
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.LoadViewState*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: LoadViewState
  nameWithType: ConnectionsZone.LoadViewState
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NewConnectionErrorMessage*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: NewConnectionErrorMessage
  nameWithType: ConnectionsZone.NewConnectionErrorMessage
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionInstructionText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: NoExistingConnectionInstructionText
  nameWithType: ConnectionsZone.NoExistingConnectionInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.NoExistingConnectionTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: NoExistingConnectionTitle
  nameWithType: ConnectionsZone.NoExistingConnectionTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnDisplayModeChanged*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: OnDisplayModeChanged
  nameWithType: ConnectionsZone.OnDisplayModeChanged
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnInit*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: OnInit
  nameWithType: ConnectionsZone.OnInit
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.OnSelectedWebPartChanged*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: OnSelectedWebPartChanged
  nameWithType: ConnectionsZone.OnSelectedWebPartChanged
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.PartChromeType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: PartChromeType
  nameWithType: ConnectionsZone.PartChromeType
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersInstructionText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ProvidersInstructionText
  nameWithType: ConnectionsZone.ProvidersInstructionText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.ProvidersTitle*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: ProvidersTitle
  nameWithType: ConnectionsZone.ProvidersTitle
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RaisePostBackEvent*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: RaisePostBackEvent
  nameWithType: ConnectionsZone.RaisePostBackEvent
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.Render*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: Render
  nameWithType: ConnectionsZone.Render
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderBody*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: RenderBody
  nameWithType: ConnectionsZone.RenderBody
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.RenderVerbs*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: RenderVerbs
  nameWithType: ConnectionsZone.RenderVerbs
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveControlState*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SaveControlState
  nameWithType: ConnectionsZone.SaveControlState
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SaveViewState*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SaveViewState
  nameWithType: ConnectionsZone.SaveViewState
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SendText
  nameWithType: ConnectionsZone.SendText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.SendToText*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: SendToText
  nameWithType: ConnectionsZone.SendToText
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.TrackViewState*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: TrackViewState
  nameWithType: ConnectionsZone.TrackViewState
- uid: System.Web.UI.WebControls.WebParts.ConnectionsZone.WebPartToConnect*
  parent: System.Web.UI.WebControls.WebParts.ConnectionsZone
  isExternal: false
  name: WebPartToConnect
  nameWithType: ConnectionsZone.WebPartToConnect
