### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  summary: "Representa um conjunto de direitos de acesso permitido ou negado para um utilizador ou grupo. Esta classe não pode ser herdada."
  remarks: "A classe de EventWaitHandleAccessRule é um de um conjunto de classes que o .NET Framework fornece para gerir a segurança de controlo de acesso de Windows em eventos de sistema com nome. Para uma descrição geral destas classes e a respetiva relação estruturas de controlo de acesso de Windows subjacente, consulte <xref:System.Security.AccessControl.EventWaitHandleSecurity>.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Windows segurança de controlo de acesso é significativa apenas para com o nome de eventos do sistema. Se um <xref:System.Threading.EventWaitHandle>objeto representa um evento local, o controlo de acesso é irrelevantes.</xref:System.Threading.EventWaitHandle>       Para obter uma lista de regras a aplicada a um evento com nome, utilize o <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>método para obter um <xref:System.Security.AccessControl.EventWaitHandleSecurity>de objeto e, em seguida, utilize o <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>método para obter uma coleção de objetos de EventWaitHandleAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       Objetos de EventWaitHandleAccessRule não mapeiam um para um com entradas de controlo de acesso na lista de controlo de acesso discricionário (DACL) subjacente. Quando obtiver o conjunto de todas as regras de acesso para um evento, o conjunto contém o número mínimo de regras necessárias atualmente para expressar todas as entradas de controlo de acesso.      > [!NOTE] > As entradas de controlo de acesso subjacente alterar como aplicar e remover regras. As informações nas regras intercaladas se possível, para manter o menor número de entradas de controlo de acesso. Assim, quando chegar a atual lista de regras, este não exatamente aspeto que poderá ter a lista de todas as regras que tenha adicionado.       Utilize EventWaitHandleAccessRule objetos para especificar os direitos de acesso para permitir ou negar a um utilizador ou grupo. Um EventWaitHandleAccessRule objeto representa sempre permissão de acesso ou negado o acesso, nunca ambos.       Para aplicar uma regra a um evento com o nome de sistema, utilize o <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>método para obter o <xref:System.Security.AccessControl.EventWaitHandleSecurity>objeto.</xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> Modificar o <xref:System.Security.AccessControl.EventWaitHandleSecurity>objeto ao utilizar os seus métodos para adicionar a regra e, em seguida, utilize o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>método reattach o objeto de segurança.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Alterações efetuadas um <xref:System.Security.AccessControl.EventWaitHandleSecurity>objeto não afetam os níveis de acesso do evento com nome até que tem de chamar o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>método para atribuir o objeto de segurança alterada para o evento com nome.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>       Objetos de EventWaitHandleAccessRule são imutáveis. Segurança para um evento é modificada utilizando os métodos do <xref:System.Security.AccessControl.EventWaitHandleSecurity>classe para adicionar ou remover regras; como tal, as entradas de controlo de acesso subjacente são modificadas.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Segurança em objetos de sincronização não é suportada para Windows 98 ou Windows Millennium Edition."
  example:
  - "The following code example demonstrates the creation and use of EventWaitHandleAccessRule objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_0_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_0_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> classe, especificando o utilizador ou grupo a regra se aplica, os direitos de acesso, e se os direitos de acesso especificado são permitidos ou negados."
  remarks: "Aguarde um <xref:System.Threading.EventWaitHandle>(chamando a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>ou <xref:System.Threading.WaitHandle.WaitAll%2A>método), um utilizador tem de ter <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> Sinalizar um evento ao chamar o <xref:System.Threading.EventWaitHandle.Set%2A>método, ou para repô-lo para o estado unsignaled ao chamar o <xref:System.Threading.EventWaitHandle.Reset%2A>método, o utilizador tem de ter <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> Sinalizar um <xref:System.Threading.EventWaitHandle>de objeto e, em seguida, aguarde na mesma ao chamar o <xref:System.Threading.WaitHandle.SignalAndWait%2A>método, o utilizador tem de ter <xref:System.Security.AccessControl.EventWaitHandleRights>e <xref:System.Security.AccessControl.EventWaitHandleRights>acesso.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>"
  syntax:
    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "O utilizador ou grupo a regra aplica-se. Tem de ser do tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ou um tipo como <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> que pode ser convertido no tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> especificar os direitos de valores permitido ou negado."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Um do <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valores especificar se os direitos são permitidos ou negados."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Especifica um valor inválido.       - ou - <code>type</code> Especifica um valor inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>eventRights</code> é zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>é nenhum tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> nem um tipo como <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> que pode ser convertido no tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> classe, especificando o nome de utilizador ou grupo a regra se aplica, os direitos de acesso, e se os direitos de acesso especificado são permitidos ou negados."
  remarks: "Aguarde um <xref:System.Threading.EventWaitHandle>(chamando a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>ou <xref:System.Threading.WaitHandle.WaitAll%2A>método), um utilizador tem de ter <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> Sinalizar um evento ao chamar o <xref:System.Threading.EventWaitHandle.Set%2A>método, ou para repô-lo para o estado unsignaled ao chamar o <xref:System.Threading.EventWaitHandle.Reset%2A>método, o utilizador tem de ter <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> Sinalizar um <xref:System.Threading.EventWaitHandle>de objeto e, em seguida, aguarde na mesma ao chamar o <xref:System.Threading.WaitHandle.SignalAndWait%2A>método, o utilizador tem de ter <xref:System.Security.AccessControl.EventWaitHandleRights>e <xref:System.Security.AccessControl.EventWaitHandleRights>acesso.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>       Este construtor é equivalente ao criar um <xref:System.Security.Principal.NTAccount>objeto, transferindo `identity` para o <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>construtor e transmitir recém-criada <xref:System.Security.Principal.NTAccount>de objeto para o <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>construtor.</xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/ffb3828f-bc0d-4880-b857-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/ffb3828f-bc0d-4880-b857-_1.vb)]"
  syntax:
    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "O nome de utilizador ou grupo a regra aplica-se."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> especificar os direitos de valores permitido ou negado."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Um do <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valores especificar se os direitos são permitidos ou negados."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Especifica um valor inválido.       - ou - <code>type</code> Especifica um valor inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>é zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>identity</code> é uma cadeia de comprimento zero.       - ou - <code>identity</code> é superior a 512 caracteres."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém os direitos permitido ou negado pela regra de acesso."
  remarks: "<xref:System.Security.AccessControl.EventWaitHandleAccessRule>os objetos são imutáveis.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> Pode criar uma nova regra de acesso que representa um utilizador diferente, direitos diferentes ou outro <xref:System.Security.AccessControl.AccessControlType>, mas não é possível modificar uma regra de acesso existentes.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the EventWaitHandleRights property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_2_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_2_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> indicar os direitos de valores permitido ou negado pela regra de acesso."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
