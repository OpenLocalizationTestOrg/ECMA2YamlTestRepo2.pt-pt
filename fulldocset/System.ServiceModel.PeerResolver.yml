### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.PeerResolver
  id: PeerResolver
  children:
  - System.ServiceModel.PeerResolver.#ctor
  - System.ServiceModel.PeerResolver.CanShareReferrals
  - System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)
  - System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  - System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)
  - System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)
  - System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  langs:
  - csharp
  name: PeerResolver
  nameWithType: PeerResolver
  fullName: System.ServiceModel.PeerResolver
  type: Class
  summary: "Especifica um tipo base utilizado para definir o contrato para o registo e resolução de um elemento mesh ID para os endereços de ponto final de nós que participam na malha."
  remarks: "Esta classe é a classe base para a implementação de resoluções de nome de elemento personalizado. Uma resolução de nome de elemento de rede é um serviço de deteção utilizado pelo canais de ponto a ponto para localizar nós de elementos que participam no mesh elemento de rede. Também é utilizado para &quot;Registar&quot; um nó de um mesh ponto a ponto, o mecanismo através do qual o nó de elemento fica conhecido e disponível de mesh o elemento de rede."
  syntax:
    content: public abstract class PeerResolver
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.#ctor
  id: '#ctor'
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: PeerResolver()
  nameWithType: PeerResolver.PeerResolver()
  fullName: System.ServiceModel.PeerResolver.PeerResolver()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.PeerResolver&quot;> </xref> classe."
  syntax:
    content: protected PeerResolver ();
    parameters: []
  overload: System.ServiceModel.PeerResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.CanShareReferrals
  id: CanShareReferrals
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: CanShareReferrals
  nameWithType: PeerResolver.CanShareReferrals
  fullName: System.ServiceModel.PeerResolver.CanShareReferrals
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém se a resolução de nome de ponto a ponto pode partilhar as referências."
  syntax:
    content: public abstract bool CanShareReferrals { get; }
    return:
      type: System.Boolean
      description: "Se for VERDADEIRO, a resolução de nome de ponto a ponto pode partilhar referências; Se for FALSO, não pode ser."
  overload: System.ServiceModel.PeerResolver.CanShareReferrals*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)
  id: Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)
  nameWithType: PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)
  fullName: System.ServiceModel.PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicia a instância atual para a resolução de ponto a ponto com o novo endereço de ponto final fornecido e as definições."
  remarks: "Este método simplesmente inicializa a instância de resolução de peer existente; não cria um novo. Para criar uma nova resolução de peer, chame o método de CreatePeerResolver no elemento de enlace correspondente (por exemplo, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).</xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>"
  syntax:
    content: public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);
    parameters:
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "<xref:System.ServiceModel.EndpointAddress>que contém o novo endereço de ponto final desta instância de resolução de ponto a ponto.</xref:System.ServiceModel.EndpointAddress>"
    - id: binding
      type: System.ServiceModel.Channels.Binding
      description: "<xref:System.ServiceModel.Channels.Binding>Especifica que o enlace de rede para esta resolução de peer.</xref:System.ServiceModel.Channels.Binding>"
    - id: credentials
      type: System.ServiceModel.Description.ClientCredentials
      description: "<xref:System.ServiceModel.Description.ClientCredentials>que especifica as novas credenciais do cliente para esta resolução de peer.</xref:System.ServiceModel.Description.ClientCredentials>"
    - id: referralPolicy
      type: System.ServiceModel.PeerResolvers.PeerReferralPolicy
      description: "<xref href=&quot;System.ServiceModel.PeerResolvers.PeerReferralPolicy&quot;></xref>a nova política de referência que especifica para esta resolução de peer."
  overload: System.ServiceModel.PeerResolver.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  id: Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: Register(String,PeerNodeAddress,TimeSpan)
  nameWithType: PeerResolver.Register(String,PeerNodeAddress,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Register(String,PeerNodeAddress,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Regista um <xref href=&quot;System.ServiceModel.PeerNodeAddress&quot;> </xref> para mesh um elemento de rede específico."
  syntax:
    content: public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);
    parameters:
    - id: meshId
      type: System.String
      description: "O ID do mesh ponto a ponto no qual o nó de elemento de rede está a ser registado."
    - id: nodeAddress
      type: System.ServiceModel.PeerNodeAddress
      description: "O <xref href=&quot;System.ServiceModel.PeerNodeAddress&quot;> </xref> registado com o mesh ponto a ponto."
    - id: timeout
      type: System.TimeSpan
      description: "O período de tempo de espera para êxito antes de abortar ao tentar registar o mesh ponto a ponto. Se a tentativa falhar, <xref:System.TimeoutException>é gerado após a ponto a ponto.</xref:System.TimeoutException>"
    return:
      type: System.Object
      description: "Um <xref:System.Object>que representa o ID de registo</xref:System.Object> Este objeto de ID de registo é passado para o <> </> *> e <> </> *> métodos."
  overload: System.ServiceModel.PeerResolver.Register*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)
  id: Resolve(System.String,System.Int32,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: Resolve(String,Int32,TimeSpan)
  nameWithType: PeerResolver.Resolve(String,Int32,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Resolve(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Resolve o ID de mesh fornecido para zero ou mais endereços de ponto final de nós que participam na malha ponto a ponto."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress> Resolve (string meshId, int maxAddresses, TimeSpan timeout);
    parameters:
    - id: meshId
      type: System.String
      description: "O ID de mesh do elemento de mesh no qual o <xref href=&quot;System.ServiceModel.PeerNodeAddress&quot;> </xref> objetos que representam nós participantes devem ser obtidos."
    - id: maxAddresses
      type: System.Int32
      description: "O número de endereços de ponto final para devolver."
    - id: timeout
      type: System.TimeSpan
      description: "O período de tempo de espera para êxito antes de abortar ao tentar resolver endereços de ponto final dentro de mesh ponto a ponto. Se a tentativa falhar, <xref:System.TimeoutException>é gerado após a ponto a ponto.</xref:System.TimeoutException>"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.ServiceModel.PeerNodeAddress}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; que contenha <xref href=&quot;System.ServiceModel.PeerNodeAddress&quot;> </xref> objetos que representa nós que participam na malha ponto a ponto."
  overload: System.ServiceModel.PeerResolver.Resolve*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)
  id: Unregister(System.Object,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: Unregister(Object,TimeSpan)
  nameWithType: PeerResolver.Unregister(Object,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Unregister(Object,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Remove a entrada de registo para um nó de um mesh ponto a ponto."
  remarks: "Um ID de registo é um token de resolução de ponto a ponto, que, em muito mínima, representa a cadeia de identificação de um ID de nó de elemento de rede e o ID de mesh. Este valor de ID têm de ter foi obtido numa chamada anterior para <xref:System.ServiceModel.PeerResolver.Register%2A>.</xref:System.ServiceModel.PeerResolver.Register%2A>       Anular o registo denomina-se em dois casos específicos: - quando o <xref:System.ServiceModel.PeerNode>é abandonar o fileparser o elemento de rede mesh (normalmente, como resultado de fechar o último ponto a ponto canal ou serviço de anfitrião que está associado ao mesmo).</xref:System.ServiceModel.PeerNode>      -Quando o <xref:System.ServiceModel.PeerNode>não pode encontrar nenhum endereços de ponto final disponível dos outros nós que participam na malha ponto a ponto.</xref:System.ServiceModel.PeerNode> Como resultado, o <xref:System.ServiceModel.PeerNode>já não está acessível, e a tentativa de chamar Unregister para anular o registo próprio <xref:System.ServiceModel.PeerResolver>.</xref:System.ServiceModel.PeerResolver> </xref:System.ServiceModel.PeerNode> Se outros nós de ponto a ponto dentro de mesh fiquem disponíveis tem anulação do registo, o nó pode voltar a registar-se ao chamar <xref:System.ServiceModel.PeerResolver.Register%2A>e a obtenção de um novo registo de ID.</xref:System.ServiceModel.PeerResolver.Register%2A>"
  syntax:
    content: public abstract void Unregister (object registrationId, TimeSpan timeout);
    parameters:
    - id: registrationId
      type: System.Object
      description: "Um ID de registo para o nó obtido por uma chamada anterior para <xref:System.ServiceModel.PeerResolver.Register*>.</xref:System.ServiceModel.PeerResolver.Register*>"
    - id: timeout
      type: System.TimeSpan
      description: "O período de tempo de espera para uma remoção com êxito o registo a partir de mesh ponto a ponto. Se a tentativa falhar, <xref:System.TimeoutException>é gerado após a ponto a ponto.</xref:System.TimeoutException>"
  overload: System.ServiceModel.PeerResolver.Unregister*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  id: Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  langs:
  - csharp
  name: Update(Object,PeerNodeAddress,TimeSpan)
  nameWithType: PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Atualizações a <xref href=&quot;System.ServiceModel.PeerNodeAddress&quot;> </xref> para um nó registado no mesh elemento de rede específico."
  remarks: "Atualização é chamada quando o endereço do <xref:System.ServiceModel.PeerNode>alterações no computador local.</xref:System.ServiceModel.PeerNode>"
  syntax:
    content: public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);
    parameters:
    - id: registrationId
      type: System.Object
      description: "Um token de ID de registo para o nó, obtido por uma chamada anterior para<xref:System.ServiceModel.PeerResolver.Register*></xref:System.ServiceModel.PeerResolver.Register*>"
    - id: updatedNodeAddress
      type: System.ServiceModel.PeerNodeAddress
      description: "O endereço de ponto final atualizadas (e outros endereços IP em multihoming)."
    - id: timeout
      type: System.TimeSpan
      description: "O período de tempo de espera para êxito antes de abortar a tentativa de atualização de registo do nó dentro de mesh ponto a ponto. Se a tentativa falhar, <xref:System.TimeoutException>é gerado após a ponto a ponto.</xref:System.TimeoutException>"
  overload: System.ServiceModel.PeerResolver.Update*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.PeerResolver.#ctor
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: PeerResolver()
  nameWithType: PeerResolver.PeerResolver()
  fullName: System.ServiceModel.PeerResolver.PeerResolver()
- uid: System.ServiceModel.PeerResolver.CanShareReferrals
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: CanShareReferrals
  nameWithType: PeerResolver.CanShareReferrals
  fullName: System.ServiceModel.PeerResolver.CanShareReferrals
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)
  nameWithType: PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)
  fullName: System.ServiceModel.PeerResolver.Initialize(EndpointAddress,Binding,ClientCredentials,PeerReferralPolicy)
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.ServiceModel.Channels.Binding
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Binding
  nameWithType: Binding
  fullName: System.ServiceModel.Channels.Binding
- uid: System.ServiceModel.Description.ClientCredentials
  parent: System.ServiceModel.Description
  isExternal: true
  name: ClientCredentials
  nameWithType: ClientCredentials
  fullName: System.ServiceModel.Description.ClientCredentials
- uid: System.ServiceModel.PeerResolvers.PeerReferralPolicy
  parent: System.ServiceModel.PeerResolvers
  isExternal: false
  name: PeerReferralPolicy
  nameWithType: PeerReferralPolicy
  fullName: System.ServiceModel.PeerResolvers.PeerReferralPolicy
- uid: System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Register(String,PeerNodeAddress,TimeSpan)
  nameWithType: PeerResolver.Register(String,PeerNodeAddress,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Register(String,PeerNodeAddress,TimeSpan)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.PeerNodeAddress
  parent: System.ServiceModel
  isExternal: false
  name: PeerNodeAddress
  nameWithType: PeerNodeAddress
  fullName: System.ServiceModel.PeerNodeAddress
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Resolve(String,Int32,TimeSpan)
  nameWithType: PeerResolver.Resolve(String,Int32,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Resolve(String,Int32,TimeSpan)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.ServiceModel.PeerNodeAddress}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<PeerNodeAddress>
  nameWithType: ReadOnlyCollection<PeerNodeAddress>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.ServiceModel.PeerNodeAddress>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.PeerNodeAddress
    name: PeerNodeAddress
    nameWithType: PeerNodeAddress
    fullName: PeerNodeAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Unregister(Object,TimeSpan)
  nameWithType: PeerResolver.Unregister(Object,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Unregister(Object,TimeSpan)
- uid: System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Update(Object,PeerNodeAddress,TimeSpan)
  nameWithType: PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)
  fullName: System.ServiceModel.PeerResolver.Update(Object,PeerNodeAddress,TimeSpan)
- uid: System.ServiceModel.PeerResolver.#ctor*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: PeerResolver
  nameWithType: PeerResolver.PeerResolver
- uid: System.ServiceModel.PeerResolver.CanShareReferrals*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: CanShareReferrals
  nameWithType: PeerResolver.CanShareReferrals
- uid: System.ServiceModel.PeerResolver.Initialize*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Initialize
  nameWithType: PeerResolver.Initialize
- uid: System.ServiceModel.PeerResolver.Register*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Register
  nameWithType: PeerResolver.Register
- uid: System.ServiceModel.PeerResolver.Resolve*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Resolve
  nameWithType: PeerResolver.Resolve
- uid: System.ServiceModel.PeerResolver.Unregister*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Unregister
  nameWithType: PeerResolver.Unregister
- uid: System.ServiceModel.PeerResolver.Update*
  parent: System.ServiceModel.PeerResolver
  isExternal: false
  name: Update
  nameWithType: PeerResolver.Update
