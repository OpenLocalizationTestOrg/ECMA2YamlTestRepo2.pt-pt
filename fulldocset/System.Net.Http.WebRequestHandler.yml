### YamlMime:ManagedReference
items:
- uid: System.Net.Http.WebRequestHandler
  id: WebRequestHandler
  children:
  - System.Net.Http.WebRequestHandler.#ctor
  - System.Net.Http.WebRequestHandler.AllowPipelining
  - System.Net.Http.WebRequestHandler.AuthenticationLevel
  - System.Net.Http.WebRequestHandler.CachePolicy
  - System.Net.Http.WebRequestHandler.ClientCertificates
  - System.Net.Http.WebRequestHandler.ContinueTimeout
  - System.Net.Http.WebRequestHandler.ImpersonationLevel
  - System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  - System.Net.Http.WebRequestHandler.ReadWriteTimeout
  - System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  - System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  langs:
  - csharp
  name: WebRequestHandler
  nameWithType: WebRequestHandler
  fullName: System.Net.Http.WebRequestHandler
  type: Class
  summary: "Fornece funcionalidades específicas do ambiente de trabalho não está disponíveis para aplicações da loja Windows ou outros ambientes."
  remarks: "Esta classe implementa um processador de transporte utilizando <xref:System.Net.HttpWebRequest>instâncias para enviar pedidos HTTP para servidores.</xref:System.Net.HttpWebRequest>"
  syntax:
    content: 'public class WebRequestHandler : System.Net.Http.HttpClientHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.HttpClientHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
  type: Constructor
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Http.WebRequestHandler&quot;> </xref> classe."
  syntax:
    content: public WebRequestHandler ();
    parameters: []
  overload: System.Net.Http.WebRequestHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  id: AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define um valor que indica se o pedido para o recurso de Internet de pipeline."
  remarks: "Uma aplicação utilizar a propriedade AllowPipelining para indicar uma preferência de ligações encaminhadas. Quando é AllowPipelining `true`, uma aplicação torna ligações encaminhadas para os servidores que suportem-los."
  syntax:
    content: public bool AllowPipelining { get; set; }
    return:
      type: System.Boolean
      description: "Devolve <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o pedido deve ser encaminhado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.WebRequestHandler.AllowPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  id: AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define um valor que indica o nível de autenticação e representação utilizado para este pedido."
  remarks: "Na autenticação mútua, o cliente e o servidor apresentam as credenciais para estabelecer a identidade. O <xref:System.Net.Security.AuthenticationLevel>e <xref:System.Net.Security.AuthenticationLevel>os valores são relevantes para a autenticação Kerberos.</xref:System.Net.Security.AuthenticationLevel> </xref:System.Net.Security.AuthenticationLevel> A autenticação Kerberos pode ser suportada diretamente ou pode ser utilizada se o protocolo de segurança de negociar é utilizado para selecionar o protocolo de segurança real. Para mais informações sobre os protocolos de autenticação, consulte [autenticação de Internet](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }
    return:
      type: System.Net.Security.AuthenticationLevel
      description: "Devolve <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>       Uma combinação bit a bit do <xref:System.Net.Security.AuthenticationLevel>valores.</xref:System.Net.Security.AuthenticationLevel>  O valor predefinido é <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>"
  overload: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  id: CachePolicy
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define a política de cache para este pedido."
  remarks: "A política de cache atual e a presença do recurso pedido na cache de determinam se pode obter uma resposta da cache. Utilizar as respostas em cache normalmente melhora o desempenho da aplicação, mas não existe um risco de que a resposta em cache não corresponde a resposta no servidor.       A política de cache predefinido pode ser especificada no ficheiro de configuração de Machine. config ou definindo o <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>propriedade.</xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>       Uma cópia de um recurso só é adicionada à cache se a sequência de resposta para o recurso é obtida e de leitura para o fim da sequência. Para que outro pedido para o mesmo recurso poderia utilizar uma cópia em cache, consoante o nível de política de cache para este pedido."
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "Returns <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;></xref>.       A <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;> </xref> objeto que define uma política de cache. A predefinição é <xref:System.Net.WebRequest.DefaultCachePolicy*>.</xref:System.Net.WebRequest.DefaultCachePolicy*>"
  overload: System.Net.Http.WebRequestHandler.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define a coleção de certificados de segurança que estão associados este pedido."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "Returns <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref>.       A coleção de certificados de segurança associados este pedido."
  overload: System.Net.Http.WebRequestHandler.ClientCertificates*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define a quantidade de tempo, em milissegundos, a aplicação irá aguardar 100-continue a partir do servidor antes de carregar dados."
  syntax:
    content: public TimeSpan ContinueTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "Devolve <xref:System.TimeSpan>.</xref:System.TimeSpan>       A quantidade de tempo, em milissegundos, a aplicação irá aguardar 100-continue a partir do servidor antes de carregar dados. O valor predefinido é 350 milissegundos."
  overload: System.Net.Http.WebRequestHandler.ContinueTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define o nível de representação para o pedido atual."
  remarks: "O nível de representação determina como o servidor pode utilizar as credenciais do cliente."
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Devolve <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>       O nível de representação para o pedido. A predefinição é <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define o comprimento máximo permitido dos cabeçalhos de resposta."
  remarks: "O comprimento do cabeçalho de resposta inclui a linha de estado de resposta e caracteres de controlo adicionais que são recebidos como parte do protocolo HTTP. Um valor de-1 significa que nenhum limite é imposto nos cabeçalhos de resposta; um valor de 0 significa que não obedeçam a todos os pedidos.       Se não for explicitamente definida a propriedade MaxResponseHeadersLength, assume como o valor da <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>propriedade.</xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>       Se o comprimento do cabeçalho de resposta recebido excede o valor da propriedade MaxResponseHeadersLength, é emitida uma exceção quando a resposta é acedida."
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: "Devolve <xref:System.Int32>.</xref:System.Int32>       O comprimento de, em quilobytes (1024 bytes), dos cabeçalhos de resposta."
  overload: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define um limite de tempo em milissegundos, quando um pedido para a escrever ou ler uma resposta de um servidor."
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "Devolve <xref:System.Int32>.</xref:System.Int32>       O número de milissegundos antes do escrever ou ler o tempo limite. O valor predefinido é 300.000 milissegundos (5 minutos)."
  overload: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define um método de chamada de retorno para validar o certificado de servidor."
  remarks: "Se estiver a ServerCertificateValidationCallback `null`, o certificado de servidor será validado utilizar autoridades de certificação conhecidos padrão."
  syntax:
    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "Returns <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>.       Um método de chamada de retorno para validar o certificado de servidor."
  overload: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  id: UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Obtém ou define um valor que indica se pretende permitir que a partilha de ligação de autenticação de NTLM de alta velocidade."
  remarks: "O valor predefinido para esta propriedade é `false`, que faz com que a ligação atual a ser fechado depois de concluída a um pedido. A aplicação tiver de passar pela sequência de autenticação sempre que emite um pedido de novo. Se esta propriedade estiver definida como `true`, a ligação utilizada para obter a resposta permanece aberta após a autenticação foi efetuada. Neste caso, os outros pedidos que tenham esta propriedade definida como `true` pode utilizar a ligação sem autenticar novamente. Por outras palavras, se uma ligação ter sido autenticada para o utilizador A, o utilizador B pode reutilizar A ligação; pedido de utilizador do B é concluído com base nas credenciais de utilizador A.      > [!CAUTION] > Porque é possível que uma aplicação utilizar a ligação sem a ser autenticado, tem de ser se de que não existe nenhum vulnerabilidade administrativa no seu sistema quando a definição desta propriedade como `true`. Se a aplicação envia pedidos para vários utilizadores (representa tem múltiplas contas de utilizador) e baseia-se na autenticação para proteger os recursos, não defina esta propriedade como `true` a menos que utilize grupos de ligação conforme descrito abaixo.       Poderá pretender considerar a ativação este mecanismo se o estão a ter problemas de desempenho e a aplicação está em execução num servidor Web com a autenticação integrada do Windows.       A ativação desta definição é aberto o sistema a riscos de segurança. Se definir o <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>propriedade `true` Lembre-se de que tome as seguintes precauções:-executar a sua aplicação num ambiente protegido para ajudar a evitar possíveis ligação exploits.</xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>       Se a controlar o servidor de back-end, como alternativa, considere desativar a persistência de autenticação. Isto aumenta o desempenho para um menor grau, mas é mais segura. Para obter mais detalhes, procure AuthPersistence na biblioteca do MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public bool UnsafeAuthenticatedConnectionSharing { get; set; }
    return:
      type: System.Boolean
      description: "Devolve <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para manter a ligação autenticada aberta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpClientHandler
  isExternal: false
  name: System.Net.Http.HttpClientHandler
- uid: System.Net.Http.WebRequestHandler.#ctor
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
- uid: System.Net.Security.AuthenticationLevel
  parent: System.Net.Security
  isExternal: true
  name: AuthenticationLevel
  nameWithType: AuthenticationLevel
  fullName: System.Net.Security.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.Http.WebRequestHandler.#ctor*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler
  nameWithType: WebRequestHandler.WebRequestHandler
- uid: System.Net.Http.WebRequestHandler.AllowPipelining*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
