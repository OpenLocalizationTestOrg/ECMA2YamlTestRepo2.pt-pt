### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "Funciona como a classe base para definir a ligação do ponto de objetos que permitem o controlo de consumidor e o controlo de fornecedor numa ligação para partilhar os dados de peças Web."
  remarks: "Cada ligação de peças Web é composta por dois controlos do servidor partilha de dados: um controlo é o consumidor, o outro é o fornecedor. Para ver um debate dos componentes essenciais de uma ligação de peças Web e o objeto de ligação em si, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>Descrição geral de classe.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Cada ligação de peças Web necessita de pontos de ligação. O fornecedor e o controlo de consumidor tem de ter pelo menos um ConnectionPoint objeto definido (cada um deles pode, opcionalmente, ter vários pontos de ligação) que contém os detalhes para a forma como um controlo pode ligar a outro controlo e o tipo de dados pode partilhar. Uma ligação real, o fornecedor tem seu próprio tipo de objeto de ponto de ligação (derivado da classe base ConnectionPoint), um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>instância e o consumidor tem o seu próprio objeto, um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>instância.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Para criar um ponto de ligação do fornecedor, os programadores tem de adicionar um método de chamada de retorno para o fornecedor que irá devolver uma instância de interface implementada para um consumidor. Estes devem assinalar o método de chamada de retorno com o código de origem com um `ConnectionProvider` atributo de código (consulte o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Da mesma forma, para criar um ponto de ligação de consumidor, os programadores tem de adicionar um método para o consumidor que recebe uma instância de interface e tem de marcar este método com um `ConnectionConsumer` atributo (consulte o <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       Quando os programadores criar ligações numa página Web, estes podem ser criados como ligações estáticas ou dinâmicas. Ligações estáticas declaradas no markup de uma página Web. Quando uma ligação estática é declarada, os programadores podem designar quais os pontos de ligação são utilizados para o consumidor e fornecedor ao atribuir valores para o `ProviderConnectionPointID` e `ConsumerConnectionPointID` atributos dentro de `<asp:webpartconnection>` tag do elemento. Esta abordagem é particularmente útil se existirem vários pontos de ligação definidos nos controlos de consumidor e fornecedor, porque permitem que a ligação estática identificar quais os pontos de ligação para utilizar a ligação.       Ligações dinâmicas são criadas através de programação, por código de um programador ou pelos utilizadores através da interface de utilizador (IU) fornecidos pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controlo.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Para criar uma ligação no código, os programadores tem de obter uma instância de um <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto ao chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Antes, podem chamar este método, os programadores têm de ter referências para o consumidor e controlos do servidor do fornecedor e os objetos de ponto de ligação respetiva. Para obter as referências para os pontos de ligação para um fornecedor e um controlo de consumidor, os programadores primeiro de chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>os métodos no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Estes métodos devolvem uma ligação adequada objetos ponto, que por sua vez, podem ser transmitidos ao método para criar uma ligação.       Quando o fornecedor e o consumidor ponto objetos de ligação que ambos trabalham com o mesmo tipo de interface, estes são compatíveis e podem constituir uma ligação direta para partilhar os dados. Se estas não trabalharem com o mesmo tipo de interface, um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto tem de ser utilizado para converter a instância de interface do fornecedor para um tipo que o consumidor pode trabalhar com.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Classe abstrata ConnectionPoint fornece os detalhes de base dos pontos de ligação que são partilhados por controlos de consumidor e fornecedor. Várias propriedades contenham estes detalhes. O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>propriedade indica se um ponto de ligação pode participar em mais do que uma ligação a uma hora.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Por predefinição, os pontos de ligação de fornecedor podem participar em várias ligações e pontos de ligação de consumidor não é possível. O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>propriedade indica o tipo de controlo de servidor associado um ponto de ligação.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Tenha em atenção que não só <xref:System.Web.UI.WebControls.WebParts.WebPart>controlos podem constituir ligações; qualquer controlo de servidor, se um controlo ASP.NET, um controlo personalizado ou um controlo de utilizador, pode ser ativado para participar em ligações se colocado num <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>propriedade fornece um nome amigável para o ponto de ligação que pode ser apresentado na IU para ajudar os utilizadores que estão a criação de ligações.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>propriedade funciona como um identificador de cadeia para o objeto de ponto de ligação em si.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>propriedade indica o tipo de instância de interface que o ponto de ligação compreende.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se um ponto de ligação fornecido fornece ou consome uma instância dessa interface é determinado pelo quer seja um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>ou um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       A classe de ConnectionPoint tem um método. O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>método devolve um valor booleano que indica se um ponto de ligação é atualmente conseguir participar em ligações.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       A classe de ConnectionPoint tem também um campo público, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Este campo contém um valor utilizado para identificar o ponto de ligação predefinido numa ligação.      > [!NOTE] > Os atributos para especificar o ponto de ligação de métodos ter apenas um parâmetro necessário, `displayName`, pelo que é possível criar o atributo de ponto de ligação predefinido sem especificar um ID. Nestes casos, o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo fornece um valor base a utilizar.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se um ponto de ligação suporta várias ligações simultâneas."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objetos de tem o seu conjunto de valor de propriedade AllowsMultipleConnections para `true` (pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe), porque o controlo de peças Web definido por predefinição permite pontos de ligação de fornecedor para ligações de forma a vários consumidores.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Em contrapartida, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objetos têm o respetivo valor de propriedade AllowsMultipleConnections definido como `false` (pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe) porque o controlo de peças Web definido por predefinição permite a ligação de consumidor pontos para estabelecer uma ligação para apenas um fornecedor de cada vez.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Pode alterar o comportamento predefinido que dizem respeito à várias ligações ao atribuir valores diferentes para o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>propriedade (para fornecedores) ou o <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>propriedade (para consumidores) em dois <xref:System.Attribute>classes utilizadas para atributos de ligação.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> Se ativar pontos de ligação de consumidor ligar a vários fornecedores ao mesmo tempo, o código deve lidar com problemas resultantes de sincronização."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponto de ligação suporta várias ligações; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o <xref:System.Type>do controlo de servidor a que um ponto de ligação está associado.</xref:System.Type>"
  remarks: "O valor da propriedade ControlType é frequentemente a <xref:System.Web.UI.WebControls.WebParts.WebPart>tipo.</xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, porque qualquer tipo de controlo de utilizador ou controlo de servidor pode participar em ligações se está ativado e colocada no corretamente um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, a propriedade ControlType pode devolver um dos seguintes outros servidor controlo tipos bem.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Quando o servidor controla que não são <xref:System.Web.UI.WebControls.WebParts.WebPart>controlos são colocados num <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, estes são moldadas com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objeto em tempo de execução para que podem funcionar como <xref:System.Web.UI.WebControls.WebParts.WebPart>controla e participar em ligações.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Mas quando esses controlos envolvidos nas ligações, o valor da propriedade ControlType devolve o <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>Escreva; devolve o tipo do <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controlo subordinado deste objeto, que é o tipo de controlo de utilizador ou de servidor.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de controlo.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa uma cadeia utilizada para identificar o ponto de ligação predefinido dentro de uma coleção de pontos de ligação associada a um controlo de servidor."
  remarks: "Quando é criado um ponto de ligação, é possível especificar um ID para o ponto de ligação com o código de origem de um consumidor ou o fornecedor <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar, utilizando um <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>ou um <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atributo.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, quando é adicionado um atributo para um ponto de ligação com o código de origem, o `ID` parâmetro é opcional. Se o ID não está especificado no atributo, o campo de DefaultID fornece uma cadeia que é utilizada para identificar o ponto de ligação predefinido.       Se vários pontos de ligação são definidos num controlo de consumidor ou o fornecedor, é necessário especificar um ID para cada ponto de ligação, para que os pontos de ligação podem ser distinguidos durante a criação de ligações."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma cadeia que funciona como um nome a apresentar amigável para representar um ponto de ligação na interface de utilizador (IU)."
  remarks: "Especifique para criar uma ligação de peças Web, os controlos de fornecedor e consumidor da ligação tem cada ponto de ligação de pelo menos, um método que permite-lhes comunicar e partilhar dados. Para identificar estes métodos de ponto de ligação, um programador especifica um atributo os métodos selecionados. No fornecedor de um `ConnectionProvider` atributo está definido no método de chamada de retorno selecionado e, o consumidor, um `ConnectionConsumer` atributo é definido para o método que recebe uma instância de uma interface que contém os dados do fornecedor. Para ambas destes atributos, um parâmetro que é sempre necessário, independentemente de qual sobrecarga está declarada para criar o atributo é a `displayName` parâmetro. O programador tem de atribuir uma cadeia a ser utilizado como um nome a apresentar amigável para o ponto de ligação e essa cadeia torna-se o valor da propriedade DisplayName.       O valor da propriedade DisplayName é apresentado na IU de uma página Web quando os utilizadores criam ligações. Por exemplo, quando o <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controlo é adicionado à página, cria uma IU para os utilizadores criar ligações entre controlos.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Depois de um utilizador muda de uma página no modo de visualização de ligar e clica num verbo connect num <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar, a ligação é apresentada a IU.</xref:System.Web.UI.WebControls.WebParts.WebPart> Cada controlo que pode participar numa ligação se encontra listado na IU e junto a cada controlo é um controlo de lista pendente que apresenta os nomes amigáveis dos respetivos pontos de ligação disponíveis. Os utilizadores devem selecionar ponto de ligação, pelo menos, um para estabelecer uma ligação. Os valores que são apresentados na lista de pontos de ligação são obtidos da propriedade DisplayName. Se os programadores criar uma IU personalizada para a criação de ligações, podem utilizar a propriedade DisplayName de forma semelhante para fornecer um nome amigável que representa um ponto de ligação."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "Uma cadeia que contém um nome a apresentar amigável para um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> objeto."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Devolve um valor que indica se um ponto de ligação pode participar em ligações."
  remarks: "O método GetEnabled na base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe sempre devolve `true`, mas as classes derivadas podem substituir o método para devolver `true` ou `false` em alturas diferentes, com base no estado de `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controlo de servidor que está associado um ponto de ligação."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o controlo pode criar um ponto de ligação participar numa ligação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma cadeia que contém o identificador de um ponto de ligação."
  remarks: "Quando um programador declara um <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>ou um <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atributo num método com o código de origem de um controlo, para que o método pode ser utilizado como um ponto de ligação, não é necessário declarar o `ID` parâmetro para o atributo de ponto de ligação.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> O atributo necessário apenas o `displayName` parâmetro. Um ID predefinido é atribuído ao ponto de ligação, utilizar o valor do <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Se houver apenas um método num controlo a ser utilizado como um ponto de ligação, é desnecessário especificar um ID para o ponto de ligação. Se existirem vários métodos que especificar como pontos de ligação, tem de especificar um ID para cada um deles; caso contrário, será emitida uma exceção. Ao atribuir um ID para cada ponto de ligação, é também o tornam possível especificar o ponto de ligação a utilizar quando declarar ligações em páginas Web ou criá-los no código."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "Uma cadeia que contém o identificador de um ponto de ligação."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o tipo de interface utilizado por um ponto de ligação."
  remarks: "A propriedade InterfaceType indica o tipo de interface de um ponto de ligação utiliza. Isto pode ajudar a determinar se dois controlos são compatíveis e capacidade para formar uma ligação. Se InterfaceType o ponto de ligação de fornecedor é diferente do InterfaceType o ponto de ligação de consumidor, em seguida, os dois controlos são incompatíveis (que significa que não podem ser ligados diretamente, sem um transformador) e um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto tem de ser utilizado para estabelecer uma ligação.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>que corresponda ao tipo de interface fornecida ou consumido por um controlo.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
